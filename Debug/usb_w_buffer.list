
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .img_def      00000228  0800f000  0800f000  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000d80c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000f5c  0800d918  0800d918  0001d918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800e874  0800e874  0002f228  2**0
                  CONTENTS
  5 .ARM          00000000  0800e874  0800e874  0002f228  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800e874  0800e874  0002f228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800e874  0800e874  0001e874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800e878  0800e878  0001e878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001f0  20000000  0800e87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001b04  200001f0  0800ea6c  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001cf4  0800ea6c  00021cf4  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002f228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ed0d  00000000  00000000  0002f251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b72  00000000  00000000  0006df5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022f8  00000000  00000000  00073ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002000  00000000  00000000  00075dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001df4e  00000000  00000000  00077dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023305  00000000  00000000  00095d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fc2a  00000000  00000000  000b901b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158c45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009648  00000000  00000000  00158c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d900 	.word	0x0800d900

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	0800d900 	.word	0x0800d900

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern TIM_HandleTypeDef htim1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f004 f97e 	bl	800448c <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f004 f979 	bl	800448c <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f004 fc74 	bl	8004a90 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f004 fc6d 	bl	8004a90 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f006 fe60 	bl	8006ef0 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f004 fc29 	bl	8004a90 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000450 	.word	0x20000450
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Kpd_Irqv_Init();
 800025c:	f001 fa3c 	bl	80016d8 <Kpd_Irqv_Init>
	init_custom_character_db();
 8000260:	f000 fc70 	bl	8000b44 <init_custom_character_db>
	enable_backlight(true);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 ff5d 	bl	8001124 <enable_backlight>
	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <Start_APP+0x6c>)
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <Start_APP+0x70>)
 800026e:	4917      	ldr	r1, [pc, #92]	; (80002cc <Start_APP+0x74>)
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <Start_APP+0x78>)
 8000272:	f002 fa1d 	bl	80026b0 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 8000276:	4816      	ldr	r0, [pc, #88]	; (80002d0 <Start_APP+0x78>)
 8000278:	f003 ffd1 	bl	800421e <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 800027c:	2100      	movs	r1, #0
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <Start_APP+0x78>)
 8000280:	f003 ffdc 	bl	800423c <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 8000284:	2004      	movs	r0, #4
 8000286:	f000 ff9f 	bl	80011c8 <set_contrast>

		u8g2_SetBitmapMode(&u8g2,0);
 800028a:	2100      	movs	r1, #0
 800028c:	4810      	ldr	r0, [pc, #64]	; (80002d0 <Start_APP+0x78>)
 800028e:	f001 fe75 	bl	8001f7c <u8g2_SetBitmapMode>


		u8g2_SetDrawColor(&u8g2, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	480e      	ldr	r0, [pc, #56]	; (80002d0 <Start_APP+0x78>)
 8000296:	f003 fa25 	bl	80036e4 <u8g2_SetDrawColor>
		u8g2_SetFontMode(&u8g2, 0);
 800029a:	2100      	movs	r1, #0
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <Start_APP+0x78>)
 800029e:	f002 fea1 	bl	8002fe4 <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <Start_APP+0x78>)
 80002a4:	f003 f80c 	bl	80032c0 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_crox2c_mf);
 80002a8:	490a      	ldr	r1, [pc, #40]	; (80002d4 <Start_APP+0x7c>)
 80002aa:	4809      	ldr	r0, [pc, #36]	; (80002d0 <Start_APP+0x78>)
 80002ac:	f003 f816 	bl	80032dc <u8g2_SetFont>
		disp_splash();
 80002b0:	f000 ff9e 	bl	80011f0 <disp_splash>
		text_insertion_point(0 , 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fc60 	bl	8000b7c <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002bc:	f000 faf2 	bl	80008a4 <monitor_begin>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	0800015d 	.word	0x0800015d
 80002c8:	080001cd 	.word	0x080001cd
 80002cc:	0800e7d0 	.word	0x0800e7d0
 80002d0:	2000020c 	.word	0x2000020c
 80002d4:	0800d9ec 	.word	0x0800d9ec

080002d8 <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	uint8_t RxBuf[3];
	while (CDC_Transmit_FS(buf, strlen(buf)) == USBD_OK);
 80002e0:	bf00      	nop
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f7ff ff32 	bl	800014c <strlen>
 80002e8:	4603      	mov	r3, r0
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f00c fa3a 	bl	800c768 <CDC_Transmit_FS>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f3      	beq.n	80002e2 <monitor_send_string+0xa>
/*	buf[2] = '\0';
	Flash_Read_Data (0x800f800, RxBuf, 2);
	Flash_Write_Data (0x800f800, buf, 2);
	RxBuf[2] = '\0';
	while (CDC_Transmit_FS(RxBuf, strlen(RxBuf)) == USBD_OK);*/
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000314:	f007 f870 	bl	80073f8 <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 8000318:	f000 f9e0 	bl	80006dc <monitor_interrupt>
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	200003c8 	.word	0x200003c8
 8000328:	200004f0 	.word	0x200004f0

0800032c <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af02      	add	r7, sp, #8
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 8000336:	2204      	movs	r2, #4
 8000338:	49a0      	ldr	r1, [pc, #640]	; (80005bc <monitor_check_cmd+0x290>)
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f00c fe6e 	bl	800d01c <strncmp>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d108      	bne.n	8000358 <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 8000346:	4a9e      	ldr	r2, [pc, #632]	; (80005c0 <monitor_check_cmd+0x294>)
 8000348:	21c8      	movs	r1, #200	; 0xc8
 800034a:	489e      	ldr	r0, [pc, #632]	; (80005c4 <monitor_check_cmd+0x298>)
 800034c:	f00c fe32 	bl	800cfb4 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000350:	489c      	ldr	r0, [pc, #624]	; (80005c4 <monitor_check_cmd+0x298>)
 8000352:	f7ff ffc1 	bl	80002d8 <monitor_send_string>
			put_Ucursor(true,cmd[2], cmd[3],'R');
		}


	}
}
 8000356:	e192      	b.n	800067e <monitor_check_cmd+0x352>
	else if (cmd[0] == LCD_CMD) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2bfe      	cmp	r3, #254	; 0xfe
 800035e:	f040 818e 	bne.w	800067e <monitor_check_cmd+0x352>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3301      	adds	r3, #1
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b31      	cmp	r3, #49	; 0x31
 800036a:	d109      	bne.n	8000380 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 800036c:	4b96      	ldr	r3, [pc, #600]	; (80005c8 <monitor_check_cmd+0x29c>)
 800036e:	4a97      	ldr	r2, [pc, #604]	; (80005cc <monitor_check_cmd+0x2a0>)
 8000370:	21c8      	movs	r1, #200	; 0xc8
 8000372:	4894      	ldr	r0, [pc, #592]	; (80005c4 <monitor_check_cmd+0x298>)
 8000374:	f00c fe1e 	bl	800cfb4 <sniprintf>
			monitor_send_string(ans);
 8000378:	4892      	ldr	r0, [pc, #584]	; (80005c4 <monitor_check_cmd+0x298>)
 800037a:	f7ff ffad 	bl	80002d8 <monitor_send_string>
}
 800037e:	e17e      	b.n	800067e <monitor_check_cmd+0x352>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3301      	adds	r3, #1
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b30      	cmp	r3, #48	; 0x30
 8000388:	d109      	bne.n	800039e <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 800038a:	4b8f      	ldr	r3, [pc, #572]	; (80005c8 <monitor_check_cmd+0x29c>)
 800038c:	4a90      	ldr	r2, [pc, #576]	; (80005d0 <monitor_check_cmd+0x2a4>)
 800038e:	21c8      	movs	r1, #200	; 0xc8
 8000390:	488c      	ldr	r0, [pc, #560]	; (80005c4 <monitor_check_cmd+0x298>)
 8000392:	f00c fe0f 	bl	800cfb4 <sniprintf>
			monitor_send_string(ans);
 8000396:	488b      	ldr	r0, [pc, #556]	; (80005c4 <monitor_check_cmd+0x298>)
 8000398:	f7ff ff9e 	bl	80002d8 <monitor_send_string>
}
 800039c:	e16f      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_SOFT_RESET) {
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b56      	cmp	r3, #86	; 0x56
 80003a6:	d102      	bne.n	80003ae <monitor_check_cmd+0x82>
			lcd_soft_reset();
 80003a8:	f000 fea8 	bl	80010fc <lcd_soft_reset>
}
 80003ac:	e167      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3301      	adds	r3, #1
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b42      	cmp	r3, #66	; 0x42
 80003b6:	d103      	bne.n	80003c0 <monitor_check_cmd+0x94>
			enable_backlight(true);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 feb3 	bl	8001124 <enable_backlight>
}
 80003be:	e15e      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3301      	adds	r3, #1
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b46      	cmp	r3, #70	; 0x46
 80003c8:	d103      	bne.n	80003d2 <monitor_check_cmd+0xa6>
			enable_backlight(false);
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 feaa 	bl	8001124 <enable_backlight>
}
 80003d0:	e155      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_BACKLIGHT_BRIGHTNESS) {
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3301      	adds	r3, #1
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b41      	cmp	r3, #65	; 0x41
 80003da:	d106      	bne.n	80003ea <monitor_check_cmd+0xbe>
			set_backlight_brightness(cmd[2]);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3302      	adds	r3, #2
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fec8 	bl	8001178 <set_backlight_brightness>
}
 80003e8:	e149      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3301      	adds	r3, #1
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b66      	cmp	r3, #102	; 0x66
 80003f2:	d103      	bne.n	80003fc <monitor_check_cmd+0xd0>
			inverse_text(true);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fcc9 	bl	8000d8c <inverse_text>
}
 80003fa:	e140      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b67      	cmp	r3, #103	; 0x67
 8000404:	d103      	bne.n	800040e <monitor_check_cmd+0xe2>
			inverse_text(false);
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fcc0 	bl	8000d8c <inverse_text>
}
 800040c:	e137      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_CLEAR) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3301      	adds	r3, #1
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b58      	cmp	r3, #88	; 0x58
 8000416:	d102      	bne.n	800041e <monitor_check_cmd+0xf2>
			clear_display();
 8000418:	f000 fe76 	bl	8001108 <clear_display>
}
 800041c:	e12f      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	3301      	adds	r3, #1
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b70      	cmp	r3, #112	; 0x70
 8000426:	d10a      	bne.n	800043e <monitor_check_cmd+0x112>
			put_pixel(cmd[3], cmd[2]);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3303      	adds	r3, #3
 800042c:	781a      	ldrb	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3302      	adds	r3, #2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4619      	mov	r1, r3
 8000436:	4610      	mov	r0, r2
 8000438:	f000 fdda 	bl	8000ff0 <put_pixel>
}
 800043c:	e11f      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b71      	cmp	r3, #113	; 0x71
 8000446:	d10a      	bne.n	800045e <monitor_check_cmd+0x132>
			erase_pixel(cmd[3], cmd[2]);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3303      	adds	r3, #3
 800044c:	781a      	ldrb	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3302      	adds	r3, #2
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	4610      	mov	r0, r2
 8000458:	f000 fde8 	bl	800102c <erase_pixel>
}
 800045c:	e10f      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_PUT_BYTE) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	3301      	adds	r3, #1
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b3e      	cmp	r3, #62	; 0x3e
 8000466:	d10c      	bne.n	8000482 <monitor_check_cmd+0x156>
			put_byte(cmd[2],cmd[3], cmd[4]);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3302      	adds	r3, #2
 800046c:	7818      	ldrb	r0, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3303      	adds	r3, #3
 8000472:	7819      	ldrb	r1, [r3, #0]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	461a      	mov	r2, r3
 800047c:	f000 fdf4 	bl	8001068 <put_byte>
}
 8000480:	e0fd      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_DEFINE_CUSTOM_CHARACTER) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	3301      	adds	r3, #1
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b4e      	cmp	r3, #78	; 0x4e
 800048a:	d103      	bne.n	8000494 <monitor_check_cmd+0x168>
					define_custom_character(cmd);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 fca3 	bl	8000dd8 <define_custom_character>
}
 8000492:	e0f4      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3301      	adds	r3, #1
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b43      	cmp	r3, #67	; 0x43
 800049c:	d103      	bne.n	80004a6 <monitor_check_cmd+0x17a>
			auto_line_wrap(true);
 800049e:	2001      	movs	r0, #1
 80004a0:	f000 fb5c 	bl	8000b5c <auto_line_wrap>
}
 80004a4:	e0eb      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3301      	adds	r3, #1
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b44      	cmp	r3, #68	; 0x44
 80004ae:	d103      	bne.n	80004b8 <monitor_check_cmd+0x18c>
			auto_line_wrap(false);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fb53 	bl	8000b5c <auto_line_wrap>
}
 80004b6:	e0e2      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_SET_INSERT) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3301      	adds	r3, #1
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b47      	cmp	r3, #71	; 0x47
 80004c0:	d10a      	bne.n	80004d8 <monitor_check_cmd+0x1ac>
			text_insertion_point(cmd[2], cmd[3]);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3302      	adds	r3, #2
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3303      	adds	r3, #3
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	4619      	mov	r1, r3
 80004d0:	4610      	mov	r0, r2
 80004d2:	f000 fb53 	bl	8000b7c <text_insertion_point>
}
 80004d6:	e0d2      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_HOME_INSERT) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3301      	adds	r3, #1
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b48      	cmp	r3, #72	; 0x48
 80004e0:	d104      	bne.n	80004ec <monitor_check_cmd+0x1c0>
			text_insertion_point(0, 0);
 80004e2:	2100      	movs	r1, #0
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fb49 	bl	8000b7c <text_insertion_point>
}
 80004ea:	e0c8      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_READ_GPI) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b65      	cmp	r3, #101	; 0x65
 80004f4:	d115      	bne.n	8000522 <monitor_check_cmd+0x1f6>
			if (cmd[2] == '0') {
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3302      	adds	r3, #2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b30      	cmp	r3, #48	; 0x30
 80004fe:	f040 80be 	bne.w	800067e <monitor_check_cmd+0x352>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000502:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <monitor_check_cmd+0x2a8>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
						ddp[1]);
 8000508:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <monitor_check_cmd+0x2a8>)
 800050a:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	4613      	mov	r3, r2
 8000510:	4a31      	ldr	r2, [pc, #196]	; (80005d8 <monitor_check_cmd+0x2ac>)
 8000512:	21c8      	movs	r1, #200	; 0xc8
 8000514:	482b      	ldr	r0, [pc, #172]	; (80005c4 <monitor_check_cmd+0x298>)
 8000516:	f00c fd4d 	bl	800cfb4 <sniprintf>
				monitor_send_string(ans);
 800051a:	482a      	ldr	r0, [pc, #168]	; (80005c4 <monitor_check_cmd+0x298>)
 800051c:	f7ff fedc 	bl	80002d8 <monitor_send_string>
}
 8000520:	e0ad      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b69      	cmp	r3, #105	; 0x69
 800052a:	d102      	bne.n	8000532 <monitor_check_cmd+0x206>
			disp_splash();
 800052c:	f000 fe60 	bl	80011f0 <disp_splash>
}
 8000530:	e0a5      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3301      	adds	r3, #1
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b76      	cmp	r3, #118	; 0x76
 800053a:	d103      	bne.n	8000544 <monitor_check_cmd+0x218>
			def_v_bar_thickness(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f000 fc35 	bl	8000dac <def_v_bar_thickness>
}
 8000542:	e09c      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b73      	cmp	r3, #115	; 0x73
 800054c:	d103      	bne.n	8000556 <monitor_check_cmd+0x22a>
			def_v_bar_thickness(0);
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fc2c 	bl	8000dac <def_v_bar_thickness>
}
 8000554:	e093      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3301      	adds	r3, #1
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b3d      	cmp	r3, #61	; 0x3d
 800055e:	d10a      	bne.n	8000576 <monitor_check_cmd+0x24a>
			draw_un_v_bar_graph(cmd[2], cmd[3], false);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3302      	adds	r3, #2
 8000564:	7818      	ldrb	r0, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3303      	adds	r3, #3
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2200      	movs	r2, #0
 800056e:	4619      	mov	r1, r3
 8000570:	f000 fc5c 	bl	8000e2c <draw_un_v_bar_graph>
}
 8000574:	e083      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_ERASE_VERTICAL_BAR_GRAPH ) {
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3301      	adds	r3, #1
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b2d      	cmp	r3, #45	; 0x2d
 800057e:	d10a      	bne.n	8000596 <monitor_check_cmd+0x26a>
			draw_un_v_bar_graph(cmd[2], cmd[3], true);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3302      	adds	r3, #2
 8000584:	7818      	ldrb	r0, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3303      	adds	r3, #3
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	f000 fc4c 	bl	8000e2c <draw_un_v_bar_graph>
}
 8000594:	e073      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH ) {
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3301      	adds	r3, #1
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b7c      	cmp	r3, #124	; 0x7c
 800059e:	d11d      	bne.n	80005dc <monitor_check_cmd+0x2b0>
			draw_un_h_bar_graph(cmd[2], cmd[3], cmd[4],false);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3302      	adds	r3, #2
 80005a4:	7818      	ldrb	r0, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3303      	adds	r3, #3
 80005aa:	7819      	ldrb	r1, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3304      	adds	r3, #4
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	f000 fcb2 	bl	8000f1c <draw_un_h_bar_graph>
}
 80005b8:	e061      	b.n	800067e <monitor_check_cmd+0x352>
 80005ba:	bf00      	nop
 80005bc:	0800d918 	.word	0x0800d918
 80005c0:	0800d920 	.word	0x0800d920
 80005c4:	20000368 	.word	0x20000368
 80005c8:	0800d958 	.word	0x0800d958
 80005cc:	0800d95c 	.word	0x0800d95c
 80005d0:	0800d974 	.word	0x0800d974
 80005d4:	20000000 	.word	0x20000000
 80005d8:	0800d988 	.word	0x0800d988
		else if (cmd[1] == LCD_ERASE_HORIZONTAL_BAR_GRAPH ) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b2b      	cmp	r3, #43	; 0x2b
 80005e4:	d10c      	bne.n	8000600 <monitor_check_cmd+0x2d4>
			draw_un_h_bar_graph(cmd[2], cmd[3], cmd[4],true);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3302      	adds	r3, #2
 80005ea:	7818      	ldrb	r0, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3303      	adds	r3, #3
 80005f0:	7819      	ldrb	r1, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3304      	adds	r3, #4
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	f000 fc8f 	bl	8000f1c <draw_un_h_bar_graph>
}
 80005fe:	e03e      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_UNDERLINE_CURSOR_ON) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b4a      	cmp	r3, #74	; 0x4a
 8000608:	d10a      	bne.n	8000620 <monitor_check_cmd+0x2f4>
			put_Ucursor(true,cmd[2], cmd[3],0);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3302      	adds	r3, #2
 800060e:	7819      	ldrb	r1, [r3, #0]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3303      	adds	r3, #3
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	2001      	movs	r0, #1
 800061a:	f000 fadb 	bl	8000bd4 <put_Ucursor>
}
 800061e:	e02e      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_UNDERLINE_CURSOR_OFF) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	3301      	adds	r3, #1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b4b      	cmp	r3, #75	; 0x4b
 8000628:	d10a      	bne.n	8000640 <monitor_check_cmd+0x314>
			put_Ucursor(false,cmd[2], cmd[3],0);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3302      	adds	r3, #2
 800062e:	7819      	ldrb	r1, [r3, #0]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3303      	adds	r3, #3
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	2000      	movs	r0, #0
 800063a:	f000 facb 	bl	8000bd4 <put_Ucursor>
}
 800063e:	e01e      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_MOVE_CURSOR_LEFT ) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b4c      	cmp	r3, #76	; 0x4c
 8000648:	d10a      	bne.n	8000660 <monitor_check_cmd+0x334>
			put_Ucursor(true,cmd[2], cmd[3],'L');
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3302      	adds	r3, #2
 800064e:	7819      	ldrb	r1, [r3, #0]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3303      	adds	r3, #3
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	234c      	movs	r3, #76	; 0x4c
 8000658:	2001      	movs	r0, #1
 800065a:	f000 fabb 	bl	8000bd4 <put_Ucursor>
}
 800065e:	e00e      	b.n	800067e <monitor_check_cmd+0x352>
		else if (cmd[1] == LCD_MOVE_CURSOR_RIGHT ) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b4d      	cmp	r3, #77	; 0x4d
 8000668:	d109      	bne.n	800067e <monitor_check_cmd+0x352>
			put_Ucursor(true,cmd[2], cmd[3],'R');
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3302      	adds	r3, #2
 800066e:	7819      	ldrb	r1, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3303      	adds	r3, #3
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	2352      	movs	r3, #82	; 0x52
 8000678:	2001      	movs	r0, #1
 800067a:	f000 faab 	bl	8000bd4 <put_Ucursor>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop

08000688 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]

	memcpy(cmd + size, buf, len);
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <app_usb_cbk+0x44>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <app_usb_cbk+0x48>)
 8000698:	4413      	add	r3, r2
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	6879      	ldr	r1, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	f00c fc72 	bl	800cf88 <memcpy>
	size += len;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <app_usb_cbk+0x44>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <app_usb_cbk+0x44>)
 80006ae:	6013      	str	r3, [r2, #0]

	if (size >= CMD_BUF_SIZE) {
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <app_usb_cbk+0x44>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2bc7      	cmp	r3, #199	; 0xc7
 80006b6:	d902      	bls.n	80006be <app_usb_cbk+0x36>
		new_cmd = true;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <app_usb_cbk+0x4c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <app_usb_cbk+0x50>)
 80006c0:	f006 fe48 	bl	8007354 <HAL_TIM_Base_Start_IT>

}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200003c4 	.word	0x200003c4
 80006d0:	200002a0 	.word	0x200002a0
 80006d4:	200003c8 	.word	0x200003c8
 80006d8:	200004f0 	.word	0x200004f0

080006dc <monitor_interrupt>:

void monitor_interrupt(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	if (new_cmd) {
 80006e2:	4b6c      	ldr	r3, [pc, #432]	; (8000894 <monitor_interrupt+0x1b8>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f000 80d0 	beq.w	800088c <monitor_interrupt+0x1b0>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 80006f0:	4b69      	ldr	r3, [pc, #420]	; (8000898 <monitor_interrupt+0x1bc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 80006f6:	2300      	movs	r3, #0
 80006f8:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 80006fa:	2300      	movs	r3, #0
 80006fc:	70fb      	strb	r3, [r7, #3]

//		o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
//		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
//		 começa o inicializador

		for (offset = 0; offset < size; offset++) {
 80006fe:	2300      	movs	r3, #0
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	e0a6      	b.n	8000852 <monitor_interrupt+0x176>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD && *(cmd + offset + 1) != 20) {
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4a65      	ldr	r2, [pc, #404]	; (800089c <monitor_interrupt+0x1c0>)
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2bfd      	cmp	r3, #253	; 0xfd
 800070e:	d110      	bne.n	8000732 <monitor_interrupt+0x56>
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	3301      	adds	r3, #1
 8000714:	4a61      	ldr	r2, [pc, #388]	; (800089c <monitor_interrupt+0x1c0>)
 8000716:	4413      	add	r3, r2
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2bfe      	cmp	r3, #254	; 0xfe
 800071c:	d009      	beq.n	8000732 <monitor_interrupt+0x56>
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	3301      	adds	r3, #1
 8000722:	4a5e      	ldr	r2, [pc, #376]	; (800089c <monitor_interrupt+0x1c0>)
 8000724:	4413      	add	r3, r2
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b14      	cmp	r3, #20
 800072a:	d002      	beq.n	8000732 <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	3301      	adds	r3, #1
 8000730:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD && *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00c      	beq.n	8000752 <monitor_interrupt+0x76>
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	4a58      	ldr	r2, [pc, #352]	; (800089c <monitor_interrupt+0x1c0>)
 800073c:	4413      	add	r3, r2
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2bfe      	cmp	r3, #254	; 0xfe
 8000742:	d106      	bne.n	8000752 <monitor_interrupt+0x76>
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	3b01      	subs	r3, #1
 8000748:	4a54      	ldr	r2, [pc, #336]	; (800089c <monitor_interrupt+0x1c0>)
 800074a:	4413      	add	r3, r2
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2bfd      	cmp	r3, #253	; 0xfd
 8000750:	d104      	bne.n	800075c <monitor_interrupt+0x80>
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	4b50      	ldr	r3, [pc, #320]	; (8000898 <monitor_interrupt+0x1bc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d103      	bne.n	8000764 <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o fim de outro
				printable = true;
 800075c:	2301      	movs	r3, #1
 800075e:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	717b      	strb	r3, [r7, #5]
			}
			if(offset+1 == size && bgn_print>end_print  || offset+1 == size &&bgn_print< end_print){
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	3301      	adds	r3, #1
 8000768:	4a4b      	ldr	r2, [pc, #300]	; (8000898 <monitor_interrupt+0x1bc>)
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	4293      	cmp	r3, r2
 800076e:	d103      	bne.n	8000778 <monitor_interrupt+0x9c>
 8000770:	79ba      	ldrb	r2, [r7, #6]
 8000772:	797b      	ldrb	r3, [r7, #5]
 8000774:	429a      	cmp	r2, r3
 8000776:	d809      	bhi.n	800078c <monitor_interrupt+0xb0>
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	3301      	adds	r3, #1
 800077c:	4a46      	ldr	r2, [pc, #280]	; (8000898 <monitor_interrupt+0x1bc>)
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	4293      	cmp	r3, r2
 8000782:	d108      	bne.n	8000796 <monitor_interrupt+0xba>
 8000784:	79ba      	ldrb	r2, [r7, #6]
 8000786:	797b      	ldrb	r3, [r7, #5]
 8000788:	429a      	cmp	r2, r3
 800078a:	d204      	bcs.n	8000796 <monitor_interrupt+0xba>
				printable = true;
 800078c:	2301      	movs	r3, #1
 800078e:	70fb      	strb	r3, [r7, #3]
				end_print = offset+1;
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	3301      	adds	r3, #1
 8000794:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d022      	beq.n	80007e2 <monitor_interrupt+0x106>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	4a3f      	ldr	r2, [pc, #252]	; (800089c <monitor_interrupt+0x1c0>)
 80007a0:	1899      	adds	r1, r3, r2
 80007a2:	797a      	ldrb	r2, [r7, #5]
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	483d      	ldr	r0, [pc, #244]	; (80008a0 <monitor_interrupt+0x1c4>)
 80007ac:	f00c fc4a 	bl	800d044 <strncpy>
				monitor_send_string(ans);
 80007b0:	483b      	ldr	r0, [pc, #236]	; (80008a0 <monitor_interrupt+0x1c4>)
 80007b2:	f7ff fd91 	bl	80002d8 <monitor_send_string>
//				CDC_Transmit_FS(ans, end_print - bgn_print);
				lcd_print(ans);
 80007b6:	483a      	ldr	r0, [pc, #232]	; (80008a0 <monitor_interrupt+0x1c4>)
 80007b8:	f000 fe6e 	bl	8001498 <lcd_print>
				memset(ans, 0, ANS_BUF_SIZE);
 80007bc:	225a      	movs	r2, #90	; 0x5a
 80007be:	2100      	movs	r1, #0
 80007c0:	4837      	ldr	r0, [pc, #220]	; (80008a0 <monitor_interrupt+0x1c4>)
 80007c2:	f00c fbef 	bl	800cfa4 <memset>
				printable = !printable;
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	bf14      	ite	ne
 80007cc:	2301      	movne	r3, #1
 80007ce:	2300      	moveq	r3, #0
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f083 0301 	eor.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	70fb      	strb	r3, [r7, #3]
 80007da:	78fb      	ldrb	r3, [r7, #3]
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	70fb      	strb	r3, [r7, #3]
			}

			if (*(cmd + offset) == LCD_CMD) {
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a2d      	ldr	r2, [pc, #180]	; (800089c <monitor_interrupt+0x1c0>)
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2bfe      	cmp	r3, #254	; 0xfe
 80007ec:	d117      	bne.n	800081e <monitor_interrupt+0x142>
				monitor_check_cmd((char*) cmd + offset, size);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4a2a      	ldr	r2, [pc, #168]	; (800089c <monitor_interrupt+0x1c0>)
 80007f2:	4413      	add	r3, r2
 80007f4:	4a28      	ldr	r2, [pc, #160]	; (8000898 <monitor_interrupt+0x1bc>)
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fd96 	bl	800032c <monitor_check_cmd>
				is_cmd = !is_cmd;
 8000800:	793b      	ldrb	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f083 0301 	eor.w	r3, r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	713b      	strb	r3, [r7, #4]
 8000814:	793b      	ldrb	r3, [r7, #4]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	713b      	strb	r3, [r7, #4]
 800081c:	e013      	b.n	8000846 <monitor_interrupt+0x16a>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4a1e      	ldr	r2, [pc, #120]	; (800089c <monitor_interrupt+0x1c0>)
 8000822:	4413      	add	r3, r2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2bfd      	cmp	r3, #253	; 0xfd
 8000828:	d10d      	bne.n	8000846 <monitor_interrupt+0x16a>
				is_cmd = !is_cmd;
 800082a:	793b      	ldrb	r3, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	bf14      	ite	ne
 8000830:	2301      	movne	r3, #1
 8000832:	2300      	moveq	r3, #0
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f083 0301 	eor.w	r3, r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	713b      	strb	r3, [r7, #4]
 800083e:	793b      	ldrb	r3, [r7, #4]
 8000840:	f003 0301 	and.w	r3, r3, #1
 8000844:	713b      	strb	r3, [r7, #4]
			}
			if(bgn_print>end_print && offset+1 > size){
 8000846:	79ba      	ldrb	r2, [r7, #6]
 8000848:	797b      	ldrb	r3, [r7, #5]
 800084a:	429a      	cmp	r2, r3
		for (offset = 0; offset < size; offset++) {
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3301      	adds	r3, #1
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <monitor_interrupt+0x1bc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	429a      	cmp	r2, r3
 800085a:	f4ff af53 	bcc.w	8000704 <monitor_interrupt+0x28>

			}
		}
		size = 0;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <monitor_interrupt+0x1bc>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 8000864:	22c8      	movs	r2, #200	; 0xc8
 8000866:	2100      	movs	r1, #0
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <monitor_interrupt+0x1c0>)
 800086a:	f00c fb9b 	bl	800cfa4 <memset>
		new_cmd = !new_cmd;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <monitor_interrupt+0x1b8>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf14      	ite	ne
 8000876:	2301      	movne	r3, #1
 8000878:	2300      	moveq	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	b2da      	uxtb	r2, r3
 8000888:	4b02      	ldr	r3, [pc, #8]	; (8000894 <monitor_interrupt+0x1b8>)
 800088a:	701a      	strb	r2, [r3, #0]
	}
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200003c8 	.word	0x200003c8
 8000898:	200003c4 	.word	0x200003c4
 800089c:	200002a0 	.word	0x200002a0
 80008a0:	20000368 	.word	0x20000368

080008a4 <monitor_begin>:

void monitor_begin(void) {
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 80008a8:	4b04      	ldr	r3, [pc, #16]	; (80008bc <monitor_begin+0x18>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <monitor_begin+0x1c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	200003c4 	.word	0x200003c4
 80008c0:	200003c8 	.word	0x200003c8

080008c4 <exp>:

/**@brief	Exponentiate [value] , at the [pot] level
 * eu redefini a funcão de exponenciação manualmente por não poder importar a biblioteca matematica inteira apenas por uma função :D
*
*/
uint16_t exp(uint16_t val,uint16_t pot ){
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	460a      	mov	r2, r1
 80008ce:	80fb      	strh	r3, [r7, #6]
 80008d0:	4613      	mov	r3, r2
 80008d2:	80bb      	strh	r3, [r7, #4]
    uint16_t ans = 1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	81fb      	strh	r3, [r7, #14]
    while(pot){
 80008d8:	e007      	b.n	80008ea <exp+0x26>
        ans *=val;
 80008da:	89fb      	ldrh	r3, [r7, #14]
 80008dc:	88fa      	ldrh	r2, [r7, #6]
 80008de:	fb02 f303 	mul.w	r3, r2, r3
 80008e2:	81fb      	strh	r3, [r7, #14]
        pot--;
 80008e4:	88bb      	ldrh	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	80bb      	strh	r3, [r7, #4]
    while(pot){
 80008ea:	88bb      	ldrh	r3, [r7, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d1f4      	bne.n	80008da <exp+0x16>
    }
    return ans;
 80008f0:	89fb      	ldrh	r3, [r7, #14]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <decode_convert_expand_encode>:
/**@brief	Decode Convert  Expand Rotate Encode
 * Esta função decodifica um caracter em hexadecimal dado, amplifica ele para o tamanho da memoria do novo display, rotaciona ele e recodifica
 * de maneira que no banco de dados eu só vou salvar o caractere definido pelo usuario em hexadecimal e o indice
*
*/
void decode_convert_expand_encode(uint8_t *hex_char){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	; 0x50
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
uint8_t mat[N][N]= {0};
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	2240      	movs	r2, #64	; 0x40
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f00c fb49 	bl	800cfa4 <memset>
uint8_t i,j,k, hex, temp;


//decode_expand
    for(i=3; *(hex_char+i) != 0xFD ; i++){
 8000912:	2303      	movs	r3, #3
 8000914:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000918:	e02e      	b.n	8000978 <decode_convert_expand_encode+0x7c>
        hex = *(hex_char+i);
 800091a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

        for(j=7;j>=0 && j<8;j--)
 8000928:	2307      	movs	r3, #7
 800092a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800092e:	e01a      	b.n	8000966 <decode_convert_expand_encode+0x6a>
        {
            mat[i-3][j] =hex%2;
 8000930:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000934:	1eda      	subs	r2, r3, #3
 8000936:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800093a:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800093e:	f001 0101 	and.w	r1, r1, #1
 8000942:	b2c9      	uxtb	r1, r1
 8000944:	00d2      	lsls	r2, r2, #3
 8000946:	3250      	adds	r2, #80	; 0x50
 8000948:	443a      	add	r2, r7
 800094a:	4413      	add	r3, r2
 800094c:	3b48      	subs	r3, #72	; 0x48
 800094e:	460a      	mov	r2, r1
 8000950:	701a      	strb	r2, [r3, #0]
            hex=hex/2;
 8000952:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000956:	085b      	lsrs	r3, r3, #1
 8000958:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        for(j=7;j>=0 && j<8;j--)
 800095c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000960:	3b01      	subs	r3, #1
 8000962:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000966:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800096a:	2b07      	cmp	r3, #7
 800096c:	d9e0      	bls.n	8000930 <decode_convert_expand_encode+0x34>
    for(i=3; *(hex_char+i) != 0xFD ; i++){
 800096e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000972:	3301      	adds	r3, #1
 8000974:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000978:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2bfd      	cmp	r3, #253	; 0xfd
 8000984:	d1c9      	bne.n	800091a <decode_convert_expand_encode+0x1e>
        }
    }
//rotate
        // Consider all squares one by one
	for (i = 0; i < N / 2; i++) {
 8000986:	2300      	movs	r3, #0
 8000988:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800098c:	e07d      	b.n	8000a8a <decode_convert_expand_encode+0x18e>
		// Consider elements in group
		// of 4 in current square
		for (j = i; j < N - i - 1; j++) {
 800098e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000992:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000996:	e06b      	b.n	8000a70 <decode_convert_expand_encode+0x174>
			// Store current cell in
			// temp variable
			temp = mat[i][j];
 8000998:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800099c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009a0:	00d2      	lsls	r2, r2, #3
 80009a2:	3250      	adds	r2, #80	; 0x50
 80009a4:	443a      	add	r2, r7
 80009a6:	4413      	add	r3, r2
 80009a8:	3b48      	subs	r3, #72	; 0x48
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			// Move values from right to top
			mat[i][j] = mat[j][N - 1 - i];
 80009b0:	f897 004e 	ldrb.w	r0, [r7, #78]	; 0x4e
 80009b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009b8:	f1c3 0107 	rsb	r1, r3, #7
 80009bc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80009c0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009c4:	00c0      	lsls	r0, r0, #3
 80009c6:	3050      	adds	r0, #80	; 0x50
 80009c8:	4438      	add	r0, r7
 80009ca:	4401      	add	r1, r0
 80009cc:	3948      	subs	r1, #72	; 0x48
 80009ce:	7809      	ldrb	r1, [r1, #0]
 80009d0:	00d2      	lsls	r2, r2, #3
 80009d2:	3250      	adds	r2, #80	; 0x50
 80009d4:	443a      	add	r2, r7
 80009d6:	4413      	add	r3, r2
 80009d8:	3b48      	subs	r3, #72	; 0x48
 80009da:	460a      	mov	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]

			// Move values from bottom to right
			mat[j][N - 1 - i]
				= mat[N - 1 - i][N - 1 - j];
 80009de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009e2:	f1c3 0007 	rsb	r0, r3, #7
 80009e6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009ea:	f1c3 0107 	rsb	r1, r3, #7
			mat[j][N - 1 - i]
 80009ee:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80009f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
				= mat[N - 1 - i][N - 1 - j];
 80009fa:	00c0      	lsls	r0, r0, #3
 80009fc:	3050      	adds	r0, #80	; 0x50
 80009fe:	4438      	add	r0, r7
 8000a00:	4401      	add	r1, r0
 8000a02:	3948      	subs	r1, #72	; 0x48
 8000a04:	7809      	ldrb	r1, [r1, #0]
 8000a06:	00d2      	lsls	r2, r2, #3
 8000a08:	3250      	adds	r2, #80	; 0x50
 8000a0a:	443a      	add	r2, r7
 8000a0c:	4413      	add	r3, r2
 8000a0e:	3b48      	subs	r3, #72	; 0x48
 8000a10:	460a      	mov	r2, r1
 8000a12:	701a      	strb	r2, [r3, #0]

			// Move values from left to bottom
			mat[N - 1 - i][N - 1 - j]
				= mat[N - 1 - j][i];
 8000a14:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a18:	f1c3 0007 	rsb	r0, r3, #7
 8000a1c:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
			mat[N - 1 - i][N - 1 - j]
 8000a20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a24:	f1c3 0207 	rsb	r2, r3, #7
 8000a28:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a2c:	f1c3 0307 	rsb	r3, r3, #7
				= mat[N - 1 - j][i];
 8000a30:	00c0      	lsls	r0, r0, #3
 8000a32:	3050      	adds	r0, #80	; 0x50
 8000a34:	4438      	add	r0, r7
 8000a36:	4401      	add	r1, r0
 8000a38:	3948      	subs	r1, #72	; 0x48
 8000a3a:	7809      	ldrb	r1, [r1, #0]
 8000a3c:	00d2      	lsls	r2, r2, #3
 8000a3e:	3250      	adds	r2, #80	; 0x50
 8000a40:	443a      	add	r2, r7
 8000a42:	4413      	add	r3, r2
 8000a44:	3b48      	subs	r3, #72	; 0x48
 8000a46:	460a      	mov	r2, r1
 8000a48:	701a      	strb	r2, [r3, #0]

			// Assign temp to left
			mat[N - 1 - j][i] = temp;
 8000a4a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a4e:	f1c3 0207 	rsb	r2, r3, #7
 8000a52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a56:	00d2      	lsls	r2, r2, #3
 8000a58:	3250      	adds	r2, #80	; 0x50
 8000a5a:	443a      	add	r2, r7
 8000a5c:	4413      	add	r3, r2
 8000a5e:	3b48      	subs	r3, #72	; 0x48
 8000a60:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000a64:	701a      	strb	r2, [r3, #0]
		for (j = i; j < N - i - 1; j++) {
 8000a66:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000a70:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000a74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a78:	f1c3 0307 	rsb	r3, r3, #7
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	db8b      	blt.n	8000998 <decode_convert_expand_encode+0x9c>
	for (i = 0; i < N / 2; i++) {
 8000a80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a84:	3301      	adds	r3, #1
 8000a86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	f67f af7d 	bls.w	800098e <decode_convert_expand_encode+0x92>
		}
	}
//encode
    for(i=0,k=0;i<N;i++){
 8000a94:	2300      	movs	r3, #0
 8000a96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000aa0:	e047      	b.n	8000b32 <decode_convert_expand_encode+0x236>
        temp=0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        for(j=0;j<N;j++){
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000aae:	e022      	b.n	8000af6 <decode_convert_expand_encode+0x1fa>
            temp += exp(2,N-j) * mat[i][j];
 8000ab0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	f1c3 0308 	rsb	r3, r3, #8
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4619      	mov	r1, r3
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f7ff ff00 	bl	80008c4 <exp>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000acc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000ad0:	00d2      	lsls	r2, r2, #3
 8000ad2:	3250      	adds	r2, #80	; 0x50
 8000ad4:	443a      	add	r2, r7
 8000ad6:	4413      	add	r3, r2
 8000ad8:	3b48      	subs	r3, #72	; 0x48
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	fb01 f303 	mul.w	r3, r1, r3
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ae6:	4413      	add	r3, r2
 8000ae8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        for(j=0;j<N;j++){
 8000aec:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000af0:	3301      	adds	r3, #1
 8000af2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000af6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	d9d8      	bls.n	8000ab0 <decode_convert_expand_encode+0x1b4>
        }
        //save on the database
        if(i>1 && k<CUSTOM_CHARACTER_SIZE){
 8000afe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d910      	bls.n	8000b28 <decode_convert_expand_encode+0x22c>
 8000b06:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000b0a:	2b05      	cmp	r3, #5
 8000b0c:	d80c      	bhi.n	8000b28 <decode_convert_expand_encode+0x22c>
        	hex_char[k+3] = temp;
 8000b0e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000b12:	3303      	adds	r3, #3
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	4413      	add	r3, r2
 8000b18:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000b1c:	701a      	strb	r2, [r3, #0]
        	k++;
 8000b1e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000b22:	3301      	adds	r3, #1
 8000b24:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    for(i=0,k=0;i<N;i++){
 8000b28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000b32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	d9b3      	bls.n	8000aa2 <decode_convert_expand_encode+0x1a6>
        }
    }
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	3750      	adds	r7, #80	; 0x50
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <init_custom_character_db>:
*	inicializa o banco de caracteres com o que foi salvo na memoria do equipamento
*	por hora ele seta todos os valores salvos para zero mas pode um dia buscar na
*	memoria persistente pelos valores gravados
*
*/
void init_custom_character_db(void){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	memset(custom_character_db,0,sizeof(custom_character_db));
 8000b48:	2270      	movs	r2, #112	; 0x70
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <init_custom_character_db+0x14>)
 8000b4e:	f00c fa29 	bl	800cfa4 <memset>
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200003d0 	.word	0x200003d0

08000b5c <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <auto_line_wrap+0x1c>)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	7013      	strb	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	200003ca 	.word	0x200003ca

08000b7c <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	460a      	mov	r2, r1
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <text_insertion_point+0x4c>)
 8000b8e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	79fa      	ldrb	r2, [r7, #7]
 8000b96:	fb02 f303 	mul.w	r3, r2, r3
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <text_insertion_point+0x50>)
 8000b9e:	701a      	strb	r2, [r3, #0]
	cursor[1] = row
			* (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <text_insertion_point+0x4c>)
 8000ba2:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <text_insertion_point+0x54>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	1ad3      	subs	r3, r2, r3
	cursor[1] = row
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	79ba      	ldrb	r2, [r7, #6]
 8000bb2:	fb02 f303 	mul.w	r3, r2, r3
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <text_insertion_point+0x50>)
 8000bba:	705a      	strb	r2, [r3, #1]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	2000020c 	.word	0x2000020c
 8000bcc:	200003cc 	.word	0x200003cc
 8000bd0:	20000005 	.word	0x20000005

08000bd4 <put_Ucursor>:
 *	caso o usuario utiluze a função de apagar o cursor, sem antes telo escrito, o codigo vai de fato criar um cursor em uma posição lixo
 *	de memoria tanto para linha quanto para coluna
 */


void put_Ucursor(bool enable,uint8_t col, uint8_t row,uint8_t hoover) {
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af02      	add	r7, sp, #8
 8000bda:	4604      	mov	r4, r0
 8000bdc:	4608      	mov	r0, r1
 8000bde:	4611      	mov	r1, r2
 8000be0:	461a      	mov	r2, r3
 8000be2:	4623      	mov	r3, r4
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	4603      	mov	r3, r0
 8000be8:	71bb      	strb	r3, [r7, #6]
 8000bea:	460b      	mov	r3, r1
 8000bec:	717b      	strb	r3, [r7, #5]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	713b      	strb	r3, [r7, #4]
	static uint8_t ucursor[2];
	u8g2_SetDrawColor(&u8g2, 2);
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	4863      	ldr	r0, [pc, #396]	; (8000d84 <put_Ucursor+0x1b0>)
 8000bf6:	f002 fd75 	bl	80036e4 <u8g2_SetDrawColor>
	if(enable){
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f000 80a7 	beq.w	8000d50 <put_Ucursor+0x17c>
		if(hoover){
 8000c02:	793b      	ldrb	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d07b      	beq.n	8000d00 <put_Ucursor+0x12c>
			if(hoover == 'R'){
 8000c08:	793b      	ldrb	r3, [r7, #4]
 8000c0a:	2b52      	cmp	r3, #82	; 0x52
 8000c0c:	d13b      	bne.n	8000c86 <put_Ucursor+0xb2>
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000c0e:	4b5e      	ldr	r3, [pc, #376]	; (8000d88 <put_Ucursor+0x1b4>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b299      	uxth	r1, r3
 8000c14:	4b5c      	ldr	r3, [pc, #368]	; (8000d88 <put_Ucursor+0x1b4>)
 8000c16:	785b      	ldrb	r3, [r3, #1]
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b5a      	ldr	r3, [pc, #360]	; (8000d84 <put_Ucursor+0x1b0>)
 8000c1c:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	9000      	str	r0, [sp, #0]
 8000c26:	4857      	ldr	r0, [pc, #348]	; (8000d84 <put_Ucursor+0x1b0>)
 8000c28:	f001 fa9e 	bl	8002168 <u8g2_DrawFrame>
				ucursor[0] = (ucursor[0] + u8g2_GetMaxCharWidth(&u8g2)) >  u8g2_GetDisplayWidth(&u8g2) - u8g2_GetMaxCharWidth(&u8g2) ? 0 : ucursor[0] + u8g2_GetMaxCharWidth(&u8g2);
 8000c2c:	4b56      	ldr	r3, [pc, #344]	; (8000d88 <put_Ucursor+0x1b4>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b54      	ldr	r3, [pc, #336]	; (8000d84 <put_Ucursor+0x1b0>)
 8000c34:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c38:	441a      	add	r2, r3
 8000c3a:	4b52      	ldr	r3, [pc, #328]	; (8000d84 <put_Ucursor+0x1b0>)
 8000c3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c40:	4619      	mov	r1, r3
 8000c42:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <put_Ucursor+0x1b0>)
 8000c44:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c48:	1acb      	subs	r3, r1, r3
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	dc08      	bgt.n	8000c60 <put_Ucursor+0x8c>
 8000c4e:	4b4e      	ldr	r3, [pc, #312]	; (8000d88 <put_Ucursor+0x1b4>)
 8000c50:	781a      	ldrb	r2, [r3, #0]
 8000c52:	4b4c      	ldr	r3, [pc, #304]	; (8000d84 <put_Ucursor+0x1b0>)
 8000c54:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	e000      	b.n	8000c62 <put_Ucursor+0x8e>
 8000c60:	2300      	movs	r3, #0
 8000c62:	4a49      	ldr	r2, [pc, #292]	; (8000d88 <put_Ucursor+0x1b4>)
 8000c64:	7013      	strb	r3, [r2, #0]
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000c66:	4b48      	ldr	r3, [pc, #288]	; (8000d88 <put_Ucursor+0x1b4>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b299      	uxth	r1, r3
 8000c6c:	4b46      	ldr	r3, [pc, #280]	; (8000d88 <put_Ucursor+0x1b4>)
 8000c6e:	785b      	ldrb	r3, [r3, #1]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b44      	ldr	r3, [pc, #272]	; (8000d84 <put_Ucursor+0x1b0>)
 8000c74:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	9000      	str	r0, [sp, #0]
 8000c7e:	4841      	ldr	r0, [pc, #260]	; (8000d84 <put_Ucursor+0x1b0>)
 8000c80:	f001 fa72 	bl	8002168 <u8g2_DrawFrame>
 8000c84:	e073      	b.n	8000d6e <put_Ucursor+0x19a>
			}else{
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000c86:	4b40      	ldr	r3, [pc, #256]	; (8000d88 <put_Ucursor+0x1b4>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b299      	uxth	r1, r3
 8000c8c:	4b3e      	ldr	r3, [pc, #248]	; (8000d88 <put_Ucursor+0x1b4>)
 8000c8e:	785b      	ldrb	r3, [r3, #1]
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <put_Ucursor+0x1b0>)
 8000c94:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	9000      	str	r0, [sp, #0]
 8000c9e:	4839      	ldr	r0, [pc, #228]	; (8000d84 <put_Ucursor+0x1b0>)
 8000ca0:	f001 fa62 	bl	8002168 <u8g2_DrawFrame>
				ucursor[0] = (ucursor[0] - u8g2_GetMaxCharWidth(&u8g2)) < 0 ? u8g2_GetDisplayWidth(&u8g2) - u8g2_GetMaxCharWidth(&u8g2) : ucursor[0] - u8g2_GetMaxCharWidth(&u8g2);
 8000ca4:	4b38      	ldr	r3, [pc, #224]	; (8000d88 <put_Ucursor+0x1b4>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <put_Ucursor+0x1b0>)
 8000cac:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	da0a      	bge.n	8000ccc <put_Ucursor+0xf8>
 8000cb6:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <put_Ucursor+0x1b0>)
 8000cb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <put_Ucursor+0x1b0>)
 8000cc0:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	e007      	b.n	8000cdc <put_Ucursor+0x108>
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <put_Ucursor+0x1b4>)
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <put_Ucursor+0x1b0>)
 8000cd2:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4a2a      	ldr	r2, [pc, #168]	; (8000d88 <put_Ucursor+0x1b4>)
 8000cde:	7013      	strb	r3, [r2, #0]
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000ce0:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <put_Ucursor+0x1b4>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b299      	uxth	r1, r3
 8000ce6:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <put_Ucursor+0x1b4>)
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <put_Ucursor+0x1b0>)
 8000cee:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	9000      	str	r0, [sp, #0]
 8000cf8:	4822      	ldr	r0, [pc, #136]	; (8000d84 <put_Ucursor+0x1b0>)
 8000cfa:	f001 fa35 	bl	8002168 <u8g2_DrawFrame>
 8000cfe:	e036      	b.n	8000d6e <put_Ucursor+0x19a>
			}
		} else{
			ucursor[0] = col*u8g2_GetMaxCharWidth(&u8g2);
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <put_Ucursor+0x1b0>)
 8000d02:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	79ba      	ldrb	r2, [r7, #6]
 8000d0a:	fb02 f303 	mul.w	r3, r2, r3
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <put_Ucursor+0x1b4>)
 8000d12:	701a      	strb	r2, [r3, #0]
			ucursor[1] = (row+1)*u8g2_GetMaxCharWidth(&u8g2)+2;
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	3301      	adds	r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4a1a      	ldr	r2, [pc, #104]	; (8000d84 <put_Ucursor+0x1b0>)
 8000d1c:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	3302      	adds	r3, #2
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <put_Ucursor+0x1b4>)
 8000d2e:	705a      	strb	r2, [r3, #1]
			u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <put_Ucursor+0x1b4>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b299      	uxth	r1, r3
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <put_Ucursor+0x1b4>)
 8000d38:	785b      	ldrb	r3, [r3, #1]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <put_Ucursor+0x1b0>)
 8000d3e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	2001      	movs	r0, #1
 8000d46:	9000      	str	r0, [sp, #0]
 8000d48:	480e      	ldr	r0, [pc, #56]	; (8000d84 <put_Ucursor+0x1b0>)
 8000d4a:	f001 fa0d 	bl	8002168 <u8g2_DrawFrame>
 8000d4e:	e00e      	b.n	8000d6e <put_Ucursor+0x19a>
		}
	}else{
		u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <put_Ucursor+0x1b4>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b299      	uxth	r1, r3
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <put_Ucursor+0x1b4>)
 8000d58:	785b      	ldrb	r3, [r3, #1]
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <put_Ucursor+0x1b0>)
 8000d5e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	9000      	str	r0, [sp, #0]
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <put_Ucursor+0x1b0>)
 8000d6a:	f001 f9fd 	bl	8002168 <u8g2_DrawFrame>
	}
	u8g2_SendBuffer(&u8g2);
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <put_Ucursor+0x1b0>)
 8000d70:	f001 faca 	bl	8002308 <u8g2_SendBuffer>
	u8g2_SetDrawColor(&u8g2, 1);
 8000d74:	2101      	movs	r1, #1
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <put_Ucursor+0x1b0>)
 8000d78:	f002 fcb4 	bl	80036e4 <u8g2_SetDrawColor>
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd90      	pop	{r4, r7, pc}
 8000d84:	2000020c 	.word	0x2000020c
 8000d88:	20000440 	.word	0x20000440

08000d8c <inverse_text>:
 */
void test_font(void) {
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}
void inverse_text(bool state) {
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <inverse_text+0x1c>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	7013      	strb	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200003c9 	.word	0x200003c9

08000dac <def_v_bar_thickness>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_v_bar_thickness(uint8_t thick){
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	if(thick){
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <def_v_bar_thickness+0x18>
		vertical_bar_width = 10;//5 no original
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <def_v_bar_thickness+0x28>)
 8000dbe:	220a      	movs	r2, #10
 8000dc0:	701a      	strb	r2, [r3, #0]
	}else{
		vertical_bar_width = 4;//2 no original
	}
}
 8000dc2:	e002      	b.n	8000dca <def_v_bar_thickness+0x1e>
		vertical_bar_width = 4;//2 no original
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <def_v_bar_thickness+0x28>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <define_custom_character>:
 *	Os 6 bytes variam da seguinte forma:
 *	FE 4E [cc] [6bytes] FD
 *	254 104 [cc] [6bytes] 253
 *	254 `N` [cc] [6bytes] 253
 */
void define_custom_character(uint8_t *cmd){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
		decode_convert_expand_encode(cmd);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fd8b 	bl	80008fc <decode_convert_expand_encode>
		memcpy(custom_character_db[*(cmd+2)].custom_caracter,cmd+3,6);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3302      	adds	r3, #2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4613      	mov	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <define_custom_character+0x50>)
 8000df6:	1898      	adds	r0, r3, r2
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3303      	adds	r3, #3
 8000dfc:	2206      	movs	r2, #6
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f00c f8c2 	bl	800cf88 <memcpy>
		custom_character_db[*(cmd+2)].custo_character_index = *(cmd+2);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3302      	adds	r3, #2
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7898      	ldrb	r0, [r3, #2]
 8000e10:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <define_custom_character+0x50>)
 8000e12:	460b      	mov	r3, r1
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	1a5b      	subs	r3, r3, r1
 8000e18:	4413      	add	r3, r2
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	701a      	strb	r2, [r3, #0]
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200003d0 	.word	0x200003d0

08000e2c <draw_un_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_un_v_bar_graph(uint8_t col, uint8_t height, bool erase) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	460b      	mov	r3, r1
 8000e38:	71bb      	strb	r3, [r7, #6]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	717b      	strb	r3, [r7, #5]
	static uint8_t vcursor, temp_height = 200 , temp_col=200;

	vcursor = col*u8g2_GetMaxCharWidth(&u8g2);
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000e40:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	79fa      	ldrb	r2, [r7, #7]
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <draw_un_v_bar_graph+0xe0>)
 8000e50:	701a      	strb	r2, [r3, #0]
	height = u8g2_GetDisplayHeight(&u8g2) - height*2;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	71bb      	strb	r3, [r7, #6]



	if(!erase){
 8000e64:	797b      	ldrb	r3, [r7, #5]
 8000e66:	f083 0301 	eor.w	r3, r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d030      	beq.n	8000ed2 <draw_un_v_bar_graph+0xa6>
		u8g2_SetDrawColor(&u8g2, 0);
 8000e70:	2100      	movs	r1, #0
 8000e72:	4825      	ldr	r0, [pc, #148]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000e74:	f002 fc36 	bl	80036e4 <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, temp_col, temp_height, vertical_bar_width, u8g2_GetDisplayHeight(&u8g2));
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <draw_un_v_bar_graph+0xe4>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b299      	uxth	r1, r3
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <draw_un_v_bar_graph+0xe8>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <draw_un_v_bar_graph+0xec>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b298      	uxth	r0, r3
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	4603      	mov	r3, r0
 8000e94:	481c      	ldr	r0, [pc, #112]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000e96:	f001 f931 	bl	80020fc <u8g2_DrawBox>
		u8g2_SetDrawColor(&u8g2, 1);
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	481a      	ldr	r0, [pc, #104]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000e9e:	f002 fc21 	bl	80036e4 <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, vcursor, height, vertical_bar_width, u8g2_GetDisplayHeight(&u8g2));
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <draw_un_v_bar_graph+0xe0>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b299      	uxth	r1, r3
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <draw_un_v_bar_graph+0xec>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b298      	uxth	r0, r3
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4812      	ldr	r0, [pc, #72]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000ebe:	f001 f91d 	bl	80020fc <u8g2_DrawBox>

		temp_height = height;
 8000ec2:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <draw_un_v_bar_graph+0xe8>)
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	7013      	strb	r3, [r2, #0]
		temp_col = vcursor;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <draw_un_v_bar_graph+0xe0>)
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <draw_un_v_bar_graph+0xe4>)
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	e013      	b.n	8000efa <draw_un_v_bar_graph+0xce>

	}else{
		u8g2_SetDrawColor(&u8g2, 0);
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000ed6:	f002 fc05 	bl	80036e4 <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, vcursor, height, vertical_bar_width, u8g2_GetDisplayHeight(&u8g2));
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <draw_un_v_bar_graph+0xe0>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b299      	uxth	r1, r3
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <draw_un_v_bar_graph+0xec>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b298      	uxth	r0, r3
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000ef6:	f001 f901 	bl	80020fc <u8g2_DrawBox>
	}

	u8g2_SendBuffer(&u8g2);
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <draw_un_v_bar_graph+0xdc>)
 8000efc:	f001 fa04 	bl	8002308 <u8g2_SendBuffer>

}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2000020c 	.word	0x2000020c
 8000f0c:	20000442 	.word	0x20000442
 8000f10:	20000006 	.word	0x20000006
 8000f14:	20000007 	.word	0x20000007
 8000f18:	20000004 	.word	0x20000004

08000f1c <draw_un_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_un_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght , bool erase) {
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	4604      	mov	r4, r0
 8000f24:	4608      	mov	r0, r1
 8000f26:	4611      	mov	r1, r2
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71bb      	strb	r3, [r7, #6]
 8000f32:	460b      	mov	r3, r1
 8000f34:	717b      	strb	r3, [r7, #5]
 8000f36:	4613      	mov	r3, r2
 8000f38:	713b      	strb	r3, [r7, #4]
	if(!erase){
 8000f3a:	793b      	ldrb	r3, [r7, #4]
 8000f3c:	f083 0301 	eor.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d021      	beq.n	8000f8a <draw_un_h_bar_graph+0x6e>
		u8g2_DrawBox(&u8g2, (col) * u8g2_GetMaxCharWidth(&u8g2), (row) * u8g2_GetMaxCharHeight(&u8g2), lenght * 2,
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4a28      	ldr	r2, [pc, #160]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000f4c:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000f50:	b292      	uxth	r2, r2
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	b299      	uxth	r1, r3
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4a23      	ldr	r2, [pc, #140]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000f5e:	f992 207e 	ldrsb.w	r2, [r2, #126]	; 0x7e
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	797b      	ldrb	r3, [r7, #5]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	b298      	uxth	r0, r3
		u8g2_GetMaxCharHeight(&u8g2)-3);
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000f74:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000f78:	b29b      	uxth	r3, r3
		u8g2_DrawBox(&u8g2, (col) * u8g2_GetMaxCharWidth(&u8g2), (row) * u8g2_GetMaxCharHeight(&u8g2), lenght * 2,
 8000f7a:	3b03      	subs	r3, #3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	4603      	mov	r3, r0
 8000f82:	481a      	ldr	r0, [pc, #104]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000f84:	f001 f8ba 	bl	80020fc <u8g2_DrawBox>
 8000f88:	e024      	b.n	8000fd4 <draw_un_h_bar_graph+0xb8>

	}else{
		u8g2_SetDrawColor(&u8g2, 0);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4817      	ldr	r0, [pc, #92]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000f8e:	f002 fba9 	bl	80036e4 <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, (col) * u8g2_GetMaxCharWidth(&u8g2), (row) * u8g2_GetMaxCharHeight(&u8g2), lenght * 2,
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000f98:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000f9c:	b292      	uxth	r2, r2
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	b299      	uxth	r1, r3
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4a10      	ldr	r2, [pc, #64]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000faa:	f992 207e 	ldrsb.w	r2, [r2, #126]	; 0x7e
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	797b      	ldrb	r3, [r7, #5]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	b298      	uxth	r0, r3
				u8g2_GetMaxCharHeight(&u8g2)-3);
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000fc0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000fc4:	b29b      	uxth	r3, r3
		u8g2_DrawBox(&u8g2, (col) * u8g2_GetMaxCharWidth(&u8g2), (row) * u8g2_GetMaxCharHeight(&u8g2), lenght * 2,
 8000fc6:	3b03      	subs	r3, #3
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000fd0:	f001 f894 	bl	80020fc <u8g2_DrawBox>

	}
	u8g2_SetDrawColor(&u8g2, 1);
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000fd8:	f002 fb84 	bl	80036e4 <u8g2_SetDrawColor>
	u8g2_SendBuffer(&u8g2);
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <draw_un_h_bar_graph+0xd0>)
 8000fde:	f001 f993 	bl	8002308 <u8g2_SendBuffer>
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000020c 	.word	0x2000020c

08000ff0 <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	460a      	mov	r2, r1
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 8001000:	2101      	movs	r1, #1
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <put_pixel+0x38>)
 8001004:	f002 fb6e 	bl	80036e4 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	b29b      	uxth	r3, r3
 800100c:	79ba      	ldrb	r2, [r7, #6]
 800100e:	b292      	uxth	r2, r2
 8001010:	4619      	mov	r1, r3
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <put_pixel+0x38>)
 8001014:	f002 fb33 	bl	800367e <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <put_pixel+0x38>)
 800101a:	f001 f975 	bl	8002308 <u8g2_SendBuffer>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000020c 	.word	0x2000020c

0800102c <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	460a      	mov	r2, r1
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	4613      	mov	r3, r2
 800103a:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 800103c:	2100      	movs	r1, #0
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <erase_pixel+0x38>)
 8001040:	f002 fb50 	bl	80036e4 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	b29b      	uxth	r3, r3
 8001048:	79ba      	ldrb	r2, [r7, #6]
 800104a:	b292      	uxth	r2, r2
 800104c:	4619      	mov	r1, r3
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <erase_pixel+0x38>)
 8001050:	f002 fb15 	bl	800367e <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <erase_pixel+0x38>)
 8001056:	f001 f957 	bl	8002308 <u8g2_SendBuffer>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000020c 	.word	0x2000020c

08001068 <put_byte>:
 *	Desenha um byte na posição [x,row] onde x varia de 0-121 e y varia de 0-3
 *	FE 3E [x] [row] [byte] [4 dummy bytes] FD
 *	254 62 [x] [row] [byte] [4 dummy bytes]  253
 *	254 `>` [x] [row] [byte] [4 dummy bytes]  253
 */
void put_byte(uint8_t x, uint8_t row, uint8_t byte){
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af02      	add	r7, sp, #8
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	460b      	mov	r3, r1
 8001074:	71bb      	strb	r3, [r7, #6]
 8001076:	4613      	mov	r3, r2
 8001078:	717b      	strb	r3, [r7, #5]
	char arr[8], i;
	memset(arr, 0, 8);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2208      	movs	r2, #8
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f00b ff8e 	bl	800cfa4 <memset>
	for(i=0; byte > 0; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	75fb      	strb	r3, [r7, #23]
 800108c:	e00e      	b.n	80010ac <put_byte+0x44>
	  {
	    arr[i] = byte%2;
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	797a      	ldrb	r2, [r7, #5]
 8001092:	f002 0201 	and.w	r2, r2, #1
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	3318      	adds	r3, #24
 800109a:	443b      	add	r3, r7
 800109c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	    byte = byte/2;
 80010a0:	797b      	ldrb	r3, [r7, #5]
 80010a2:	085b      	lsrs	r3, r3, #1
 80010a4:	717b      	strb	r3, [r7, #5]
	for(i=0; byte > 0; i++)
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	3301      	adds	r3, #1
 80010aa:	75fb      	strb	r3, [r7, #23]
 80010ac:	797b      	ldrb	r3, [r7, #5]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ed      	bne.n	800108e <put_byte+0x26>
	  }
	row = row * ((u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS);
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <put_byte+0x8c>)
 80010b4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <put_byte+0x90>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	79ba      	ldrb	r2, [r7, #6]
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	71bb      	strb	r3, [r7, #6]
	u8g2_DrawXBM(&u8g2 , x, row, 1, 8, arr);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	b299      	uxth	r1, r3
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	2308      	movs	r3, #8
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <put_byte+0x8c>)
 80010e0:	f000 ffc9 	bl	8002076 <u8g2_DrawXBM>
	u8g2_SendBuffer(&u8g2);
 80010e4:	4803      	ldr	r0, [pc, #12]	; (80010f4 <put_byte+0x8c>)
 80010e6:	f001 f90f 	bl	8002308 <u8g2_SendBuffer>

}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000020c 	.word	0x2000020c
 80010f8:	20000005 	.word	0x20000005

080010fc <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8001100:	f003 fb31 	bl	8004766 <HAL_NVIC_SystemReset>
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}

08001108 <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	text_insertion_point(0, 0);
 800110c:	2100      	movs	r1, #0
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fd34 	bl	8000b7c <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <clear_display+0x18>)
 8001116:	f001 faa5 	bl	8002664 <u8g2_ClearDisplay>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000020c 	.word	0x2000020c

08001124 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	if(enable){
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00e      	beq.n	8001152 <enable_backlight+0x2e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2110      	movs	r1, #16
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <enable_backlight+0x48>)
 800113a:	f003 fca9 	bl	8004a90 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800113e:	2100      	movs	r1, #0
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <enable_backlight+0x4c>)
 8001142:	f006 f9df 	bl	8007504 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT );
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <enable_backlight+0x50>)
 8001148:	881a      	ldrh	r2, [r3, #0]
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <enable_backlight+0x4c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	}
}
 8001150:	e008      	b.n	8001164 <enable_backlight+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	2110      	movs	r1, #16
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <enable_backlight+0x48>)
 8001158:	f003 fc9a 	bl	8004a90 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800115c:	2100      	movs	r1, #0
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <enable_backlight+0x4c>)
 8001160:	f006 fa72 	bl	8007648 <HAL_TIM_PWM_Stop>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40010800 	.word	0x40010800
 8001170:	200004a8 	.word	0x200004a8
 8001174:	20000002 	.word	0x20000002

08001178 <set_backlight_brightness>:
 * Define o brlho do backlight em um dos niveis pre-configurados, [bright] varia de 1-7
 *   	FE 41 [bright] FD
 *		254 64 [bright] 253
 *		254 'A' [bright] 253
 */
void set_backlight_brightness(uint8_t bright){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
	if(bright){
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d016      	beq.n	80011b6 <set_backlight_brightness+0x3e>
	LCD_BRIGHT = (7/bright)*59999;
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2207      	movs	r2, #7
 800118c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001190:	b29b      	uxth	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	0152      	lsls	r2, r2, #5
 8001196:	1ad2      	subs	r2, r2, r3
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	441a      	add	r2, r3
 800119c:	4611      	mov	r1, r2
 800119e:	0109      	lsls	r1, r1, #4
 80011a0:	1a8a      	subs	r2, r1, r2
 80011a2:	0152      	lsls	r2, r2, #5
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <set_backlight_brightness+0x48>)
 80011aa:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT);
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <set_backlight_brightness+0x48>)
 80011ae:	881a      	ldrh	r2, [r3, #0]
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <set_backlight_brightness+0x4c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	20000002 	.word	0x20000002
 80011c4:	200004a8 	.word	0x200004a8

080011c8 <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast) * 9);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	461a      	mov	r2, r3
 80011d6:	00d2      	lsls	r2, r2, #3
 80011d8:	4413      	add	r3, r2
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4619      	mov	r1, r3
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <set_contrast+0x24>)
 80011e0:	f003 f83d 	bl	800425e <u8x8_SetContrast>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000020c 	.word	0x2000020c

080011f0 <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <disp_splash+0x28>)
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	2318      	movs	r3, #24
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	23b4      	movs	r3, #180	; 0xb4
 8001200:	2214      	movs	r2, #20
 8001202:	2106      	movs	r1, #6
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <disp_splash+0x2c>)
 8001206:	f000 ff36 	bl	8002076 <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <disp_splash+0x2c>)
 800120c:	f001 f87c 	bl	8002308 <u8g2_SendBuffer>

}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	0800f000 	.word	0x0800f000
 800121c:	2000020c 	.word	0x2000020c

08001220 <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap_t *wrap, uint8_t *txt) {
 8001220:	b5b0      	push	{r4, r5, r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux;
 800122a:	2300      	movs	r3, #0
 800122c:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	737b      	strb	r3, [r7, #13]

	index = strlen(txt);
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f7fe ff8a 	bl	800014c <strlen>
 8001238:	4603      	mov	r3, r0
 800123a:	73bb      	strb	r3, [r7, #14]
	wrap->wrap_times = index / MAX_CHARS_ONSCREEN;
 800123c:	7bba      	ldrb	r2, [r7, #14]
 800123e:	4b43      	ldr	r3, [pc, #268]	; (800134c <str_warper+0x12c>)
 8001240:	fba3 1302 	umull	r1, r3, r3, r2
 8001244:	1ad2      	subs	r2, r2, r3
 8001246:	0852      	lsrs	r2, r2, #1
 8001248:	4413      	add	r3, r2
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	b2da      	uxtb	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	if (wrap->wrap_times) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800125a:	2b00      	cmp	r3, #0
 800125c:	d071      	beq.n	8001342 <str_warper+0x122>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e068      	b.n	8001336 <str_warper+0x116>
			if (aux < N_LINES) {
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	2b04      	cmp	r3, #4
 8001268:	d82f      	bhi.n	80012ca <str_warper+0xaa>

				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	461a      	mov	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
						1 : 0;
 800127c:	2b20      	cmp	r3, #32
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8001286:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	00da      	lsls	r2, r3, #3
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	1898      	adds	r0, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)),
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	00da      	lsls	r2, r3, #3
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 80012aa:	2214      	movs	r2, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	f00b fec9 	bl	800d044 <strncpy>
						MAX_CHARS_ONSCREEN - 1);
				wrap->wrap_str[aux][MAX_CHARS_ONSCREEN - 1] = '\0';
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	00da      	lsls	r2, r3, #3
 80012be:	1ad2      	subs	r2, r2, r3
 80012c0:	188b      	adds	r3, r1, r2
 80012c2:	3314      	adds	r3, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	e032      	b.n	8001330 <str_warper+0x110>
			} else {
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 80012ca:	7bfa      	ldrb	r2, [r7, #15]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	461a      	mov	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
						0 : 1;
 80012dc:	2b20      	cmp	r3, #32
 80012de:	bf14      	ite	ne
 80012e0:	2301      	movne	r3, #1
 80012e2:	2300      	moveq	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 80012e6:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	00da      	lsls	r2, r3, #3
 80012f2:	1ad2      	subs	r2, r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	189c      	adds	r4, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)) + shift,
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	4613      	mov	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	4413      	add	r3, r2
 8001300:	00da      	lsls	r2, r3, #3
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	461a      	mov	r2, r3
 8001306:	7b7b      	ldrb	r3, [r7, #13]
 8001308:	4413      	add	r3, r2
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	18d5      	adds	r5, r2, r3
						strlen(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))));
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	461a      	mov	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 800131e:	4618      	mov	r0, r3
 8001320:	f7fe ff14 	bl	800014c <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4629      	mov	r1, r5
 800132a:	4620      	mov	r0, r4
 800132c:	f00b fe8a 	bl	800d044 <strncpy>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	3301      	adds	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	429a      	cmp	r2, r3
 8001340:	d990      	bls.n	8001264 <str_warper+0x44>
			}
		}
	}
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bdb0      	pop	{r4, r5, r7, pc}
 800134a:	bf00      	nop
 800134c:	86186187 	.word	0x86186187

08001350 <Custom_Character_masker>:


bool Custom_Character_masker(uint8_t *txt,uint8_t * mask, uint8_t *v_cursor){
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
	uint8_t index;
	bool enable;
	strncpy(mask,txt,MASK_BUFFER);
 800135c:	2269      	movs	r2, #105	; 0x69
 800135e:	68f9      	ldr	r1, [r7, #12]
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f00b fe6f 	bl	800d044 <strncpy>
	*(mask+MASK_BUFFER-1) = '\0';
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3368      	adds	r3, #104	; 0x68
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]

	*(v_cursor+0) = cursor[0];
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <Custom_Character_masker+0x6c>)
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	701a      	strb	r2, [r3, #0]
	*(v_cursor+1) = cursor[1];
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3301      	adds	r3, #1
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <Custom_Character_masker+0x6c>)
 800137c:	7852      	ldrb	r2, [r2, #1]
 800137e:	701a      	strb	r2, [r3, #0]

	for(index=0;*(mask+index) != '\0';index++){
 8001380:	2300      	movs	r3, #0
 8001382:	75fb      	strb	r3, [r7, #23]
 8001384:	e00f      	b.n	80013a6 <Custom_Character_masker+0x56>
		if(*(mask+index)>=0 && *(mask+index)<=16){
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d806      	bhi.n	80013a0 <Custom_Character_masker+0x50>
			*(mask+index) =32;
 8001392:	7dfb      	ldrb	r3, [r7, #23]
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	4413      	add	r3, r2
 8001398:	2220      	movs	r2, #32
 800139a:	701a      	strb	r2, [r3, #0]
			enable = true;
 800139c:	2301      	movs	r3, #1
 800139e:	75bb      	strb	r3, [r7, #22]
	for(index=0;*(mask+index) != '\0';index++){
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	3301      	adds	r3, #1
 80013a4:	75fb      	strb	r3, [r7, #23]
 80013a6:	7dfb      	ldrb	r3, [r7, #23]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1e9      	bne.n	8001386 <Custom_Character_masker+0x36>
		}
	}
return enable;
 80013b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200003cc 	.word	0x200003cc

080013c0 <clean_it>:
void clean_it(uint8_t *str){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	memset(str, 0, sizeof(str));
 80013c8:	2204      	movs	r2, #4
 80013ca:	2100      	movs	r1, #0
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f00b fde9 	bl	800cfa4 <memset>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <custom_character_dealer>:
void custom_character_dealer( uint8_t *txt){
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	6078      	str	r0, [r7, #4]
	uint8_t char_w = 8;
 80013e4:	2308      	movs	r3, #8
 80013e6:	737b      	strb	r3, [r7, #13]
	uint8_t char_h = 6;
 80013e8:	2306      	movs	r3, #6
 80013ea:	733b      	strb	r3, [r7, #12]
	uint8_t offset,temp_x,temp_y,index;
	temp_x = cursor[0];
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <custom_character_dealer+0xb0>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	73bb      	strb	r3, [r7, #14]
	temp_y = cursor[1];
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <custom_character_dealer+0xb0>)
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	72fb      	strb	r3, [r7, #11]
	for(offset = 0;*(txt+offset) !='\0';offset++){
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e03b      	b.n	8001476 <custom_character_dealer+0x9a>
		index = *(txt+offset);
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	72bb      	strb	r3, [r7, #10]
		if((custom_character_db[index].custo_character_index)){
 8001408:	7aba      	ldrb	r2, [r7, #10]
 800140a:	4921      	ldr	r1, [pc, #132]	; (8001490 <custom_character_dealer+0xb4>)
 800140c:	4613      	mov	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	440b      	add	r3, r1
 8001414:	3306      	adds	r3, #6
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d022      	beq.n	8001462 <custom_character_dealer+0x86>
				u8g2_DrawXBM(&u8g2 , temp_x, temp_y+4, char_w, char_h, custom_character_db[index].custom_caracter);
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	b298      	uxth	r0, r3
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	b29b      	uxth	r3, r3
 8001424:	3304      	adds	r3, #4
 8001426:	b29c      	uxth	r4, r3
 8001428:	7b7b      	ldrb	r3, [r7, #13]
 800142a:	b29d      	uxth	r5, r3
 800142c:	7b3b      	ldrb	r3, [r7, #12]
 800142e:	b299      	uxth	r1, r3
 8001430:	7aba      	ldrb	r2, [r7, #10]
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	4a15      	ldr	r2, [pc, #84]	; (8001490 <custom_character_dealer+0xb4>)
 800143a:	4413      	add	r3, r2
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	9100      	str	r1, [sp, #0]
 8001440:	462b      	mov	r3, r5
 8001442:	4622      	mov	r2, r4
 8001444:	4601      	mov	r1, r0
 8001446:	4813      	ldr	r0, [pc, #76]	; (8001494 <custom_character_dealer+0xb8>)
 8001448:	f000 fe15 	bl	8002076 <u8g2_DrawXBM>
				u8g2_SendBuffer(&u8g2);
 800144c:	4811      	ldr	r0, [pc, #68]	; (8001494 <custom_character_dealer+0xb8>)
 800144e:	f000 ff5b 	bl	8002308 <u8g2_SendBuffer>
				temp_x += u8g2_GetMaxCharWidth(&u8g2);
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <custom_character_dealer+0xb8>)
 8001454:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8001458:	b2da      	uxtb	r2, r3
 800145a:	7bbb      	ldrb	r3, [r7, #14]
 800145c:	4413      	add	r3, r2
 800145e:	73bb      	strb	r3, [r7, #14]
 8001460:	e006      	b.n	8001470 <custom_character_dealer+0x94>
				//trocando os caracteres especiais por um espaço em branco pra bater com a conta de espaço em tela
				//é um custom caracter
				//ele foi definido pelo usuario
				//ele deve ser impresso
			}else{
				temp_x += u8g2_GetMaxCharWidth(&u8g2);
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <custom_character_dealer+0xb8>)
 8001464:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8001468:	b2da      	uxtb	r2, r3
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	4413      	add	r3, r2
 800146e:	73bb      	strb	r3, [r7, #14]
	for(offset = 0;*(txt+offset) !='\0';offset++){
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	3301      	adds	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1bd      	bne.n	80013fe <custom_character_dealer+0x22>
			}
	}

}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bdb0      	pop	{r4, r5, r7, pc}
 800148c:	200003cc 	.word	0x200003cc
 8001490:	200003d0 	.word	0x200003d0
 8001494:	2000020c 	.word	0x2000020c

08001498 <lcd_print>:


void lcd_print(uint8_t *txt) {
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b0bf      	sub	sp, #252	; 0xfc
 800149c:	af04      	add	r7, sp, #16
 800149e:	6078      	str	r0, [r7, #4]
	txt_wrap_t wrap;
	uint8_t aux = 0, i;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t v_cursor[2];
	uint8_t mask[MASK_BUFFER];
	bool enable;


	if (text_invertion) {
 80014a6:	4b87      	ldr	r3, [pc, #540]	; (80016c4 <lcd_print+0x22c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d061      	beq.n	8001572 <lcd_print+0xda>
		if (text_wrap) {
 80014ae:	4b86      	ldr	r3, [pc, #536]	; (80016c8 <lcd_print+0x230>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d03a      	beq.n	800152c <lcd_print+0x94>
			str_warper(&wrap, txt);
 80014b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff feaf 	bl	8001220 <str_warper>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 80014c2:	2300      	movs	r3, #0
 80014c4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80014c8:	e024      	b.n	8001514 <lcd_print+0x7c>
				//cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));

				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80014ca:	4b80      	ldr	r3, [pc, #512]	; (80016cc <lcd_print+0x234>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b298      	uxth	r0, r3
 80014d0:	4b7e      	ldr	r3, [pc, #504]	; (80016cc <lcd_print+0x234>)
 80014d2:	785b      	ldrb	r3, [r3, #1]
 80014d4:	b29c      	uxth	r4, r3
						0, 0, 0, wrap.wrap_str[aux]);
 80014d6:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80014da:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	00da      	lsls	r2, r3, #3
 80014e6:	1ad2      	subs	r2, r2, r3
 80014e8:	188b      	adds	r3, r1, r2
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80014ea:	9303      	str	r3, [sp, #12]
 80014ec:	2300      	movs	r3, #0
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	2300      	movs	r3, #0
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	2300      	movs	r3, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2320      	movs	r3, #32
 80014fa:	4622      	mov	r2, r4
 80014fc:	4601      	mov	r1, r0
 80014fe:	4874      	ldr	r0, [pc, #464]	; (80016d0 <lcd_print+0x238>)
 8001500:	f001 f85c 	bl	80025bc <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 8001504:	4872      	ldr	r0, [pc, #456]	; (80016d0 <lcd_print+0x238>)
 8001506:	f000 feff 	bl	8002308 <u8g2_SendBuffer>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 800150a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800150e:	3301      	adds	r3, #1
 8001510:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001514:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001518:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800151c:	429a      	cmp	r2, r3
 800151e:	d9d4      	bls.n	80014ca <lcd_print+0x32>
				 } else {
				 cursor[0] += u8g2_GetStrWidth(&u8g2,
				 wrap.wrap_str[aux - 1]);
				 }*/
			}
			clean_it(wrap.wrap_str);
 8001520:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff4b 	bl	80013c0 <clean_it>
				custom_character_dealer(txt);
			}
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
		}
	}
}
 800152a:	e0c6      	b.n	80016ba <lcd_print+0x222>
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 800152c:	4b67      	ldr	r3, [pc, #412]	; (80016cc <lcd_print+0x234>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b299      	uxth	r1, r3
 8001532:	4b66      	ldr	r3, [pc, #408]	; (80016cc <lcd_print+0x234>)
 8001534:	785b      	ldrb	r3, [r3, #1]
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	9303      	str	r3, [sp, #12]
 800153c:	2300      	movs	r3, #0
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	2300      	movs	r3, #0
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	2300      	movs	r3, #0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2320      	movs	r3, #32
 800154a:	4861      	ldr	r0, [pc, #388]	; (80016d0 <lcd_print+0x238>)
 800154c:	f001 f836 	bl	80025bc <u8g2_DrawButtonUTF8>
			u8g2_SendBuffer(&u8g2);
 8001550:	485f      	ldr	r0, [pc, #380]	; (80016d0 <lcd_print+0x238>)
 8001552:	f000 fed9 	bl	8002308 <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	485d      	ldr	r0, [pc, #372]	; (80016d0 <lcd_print+0x238>)
 800155a:	f001 ff3d 	bl	80033d8 <u8g2_GetStrWidth>
 800155e:	4603      	mov	r3, r0
 8001560:	4619      	mov	r1, r3
 8001562:	4b5a      	ldr	r3, [pc, #360]	; (80016cc <lcd_print+0x234>)
 8001564:	781a      	ldrb	r2, [r3, #0]
 8001566:	b2cb      	uxtb	r3, r1
 8001568:	4413      	add	r3, r2
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b57      	ldr	r3, [pc, #348]	; (80016cc <lcd_print+0x234>)
 800156e:	701a      	strb	r2, [r3, #0]
}
 8001570:	e0a3      	b.n	80016ba <lcd_print+0x222>
		if (text_wrap) {
 8001572:	4b55      	ldr	r3, [pc, #340]	; (80016c8 <lcd_print+0x230>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d072      	beq.n	8001660 <lcd_print+0x1c8>
			str_warper(&wrap, txt);
 800157a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fe4d 	bl	8001220 <str_warper>
			if (wrap.wrap_times) {
 8001586:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800158a:	2b00      	cmp	r3, #0
 800158c:	d05a      	beq.n	8001644 <lcd_print+0x1ac>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 800158e:	2300      	movs	r3, #0
 8001590:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001594:	e04a      	b.n	800162c <lcd_print+0x194>
					clean_it(mask);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff10 	bl	80013c0 <clean_it>
					enable = Custom_Character_masker(wrap.wrap_str[aux],mask,v_cursor);
 80015a0:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80015a4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	00da      	lsls	r2, r3, #3
 80015b0:	1ad2      	subs	r2, r2, r3
 80015b2:	188b      	adds	r3, r1, r2
 80015b4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80015b8:	f107 010c 	add.w	r1, r7, #12
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fec7 	bl	8001350 <Custom_Character_masker>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					u8g2_DrawUTF8(&u8g2, v_cursor[0], v_cursor[1], mask);
 80015c8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80015cc:	b299      	uxth	r1, r3
 80015ce:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	483d      	ldr	r0, [pc, #244]	; (80016d0 <lcd_print+0x238>)
 80015da:	f001 fdc1 	bl	8003160 <u8g2_DrawUTF8>
					u8g2_SendBuffer(&u8g2);
 80015de:	483c      	ldr	r0, [pc, #240]	; (80016d0 <lcd_print+0x238>)
 80015e0:	f000 fe92 	bl	8002308 <u8g2_SendBuffer>
					if(enable){
 80015e4:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00c      	beq.n	8001606 <lcd_print+0x16e>
						custom_character_dealer(wrap.wrap_str[aux]);
 80015ec:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80015f0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	00da      	lsls	r2, r3, #3
 80015fc:	1ad2      	subs	r2, r2, r3
 80015fe:	188b      	adds	r3, r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff feeb 	bl	80013dc <custom_character_dealer>
					cursor[1] += (u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS;
 8001606:	4b31      	ldr	r3, [pc, #196]	; (80016cc <lcd_print+0x234>)
 8001608:	785a      	ldrb	r2, [r3, #1]
 800160a:	4b31      	ldr	r3, [pc, #196]	; (80016d0 <lcd_print+0x238>)
 800160c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001610:	b2d9      	uxtb	r1, r3
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <lcd_print+0x23c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	1acb      	subs	r3, r1, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4413      	add	r3, r2
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <lcd_print+0x234>)
 8001620:	705a      	strb	r2, [r3, #1]
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8001622:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001626:	3301      	adds	r3, #1
 8001628:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800162c:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001630:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001634:	429a      	cmp	r2, r3
 8001636:	d9ae      	bls.n	8001596 <lcd_print+0xfe>
				clean_it(wrap.wrap_str);
 8001638:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff febf 	bl	80013c0 <clean_it>
}
 8001642:	e03a      	b.n	80016ba <lcd_print+0x222>
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <lcd_print+0x234>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b299      	uxth	r1, r3
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <lcd_print+0x234>)
 800164c:	785b      	ldrb	r3, [r3, #1]
 800164e:	b29a      	uxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	481f      	ldr	r0, [pc, #124]	; (80016d0 <lcd_print+0x238>)
 8001654:	f001 fd84 	bl	8003160 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 8001658:	481d      	ldr	r0, [pc, #116]	; (80016d0 <lcd_print+0x238>)
 800165a:	f000 fe55 	bl	8002308 <u8g2_SendBuffer>
}
 800165e:	e02c      	b.n	80016ba <lcd_print+0x222>
			enable = Custom_Character_masker(txt,mask,v_cursor);
 8001660:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4619      	mov	r1, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fe70 	bl	8001350 <Custom_Character_masker>
 8001670:	4603      	mov	r3, r0
 8001672:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			u8g2_DrawUTF8(&u8g2, v_cursor[0], v_cursor[1], mask);
 8001676:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800167a:	b299      	uxth	r1, r3
 800167c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001680:	b29a      	uxth	r2, r3
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4812      	ldr	r0, [pc, #72]	; (80016d0 <lcd_print+0x238>)
 8001688:	f001 fd6a 	bl	8003160 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 800168c:	4810      	ldr	r0, [pc, #64]	; (80016d0 <lcd_print+0x238>)
 800168e:	f000 fe3b 	bl	8002308 <u8g2_SendBuffer>
			if(enable){
 8001692:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <lcd_print+0x208>
				custom_character_dealer(txt);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fe9e 	bl	80013dc <custom_character_dealer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	480b      	ldr	r0, [pc, #44]	; (80016d0 <lcd_print+0x238>)
 80016a4:	f001 fe98 	bl	80033d8 <u8g2_GetStrWidth>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4619      	mov	r1, r3
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <lcd_print+0x234>)
 80016ae:	781a      	ldrb	r2, [r3, #0]
 80016b0:	b2cb      	uxtb	r3, r1
 80016b2:	4413      	add	r3, r2
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <lcd_print+0x234>)
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	37ec      	adds	r7, #236	; 0xec
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200003c9 	.word	0x200003c9
 80016c8:	200003ca 	.word	0x200003ca
 80016cc:	200003cc 	.word	0x200003cc
 80016d0:	2000020c 	.word	0x2000020c
 80016d4:	20000005 	.word	0x20000005

080016d8 <Kpd_Irqv_Init>:
#include "usbd_cdc_if.h"

//{set,reset,up,down,left,right}
key_ih IRQ_VECTOR[6];

void Kpd_Irqv_Init(void) {
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	//
	IRQ_VECTOR[0].IRQn_p = SET_P_EXTI_IRQn;
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <Kpd_Irqv_Init+0x54>)
 80016de:	220a      	movs	r2, #10
 80016e0:	705a      	strb	r2, [r3, #1]
	IRQ_VECTOR[0].deb_counter = 0;
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <Kpd_Irqv_Init+0x54>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
	//
	IRQ_VECTOR[1].IRQn_p = RESET_P_EXTI_IRQn;
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <Kpd_Irqv_Init+0x54>)
 80016ea:	2217      	movs	r2, #23
 80016ec:	70da      	strb	r2, [r3, #3]
	IRQ_VECTOR[1].deb_counter = 0;
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <Kpd_Irqv_Init+0x54>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	709a      	strb	r2, [r3, #2]
	//
	IRQ_VECTOR[2].IRQn_p = UP_P_EXTI_IRQn;
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <Kpd_Irqv_Init+0x54>)
 80016f6:	2217      	movs	r2, #23
 80016f8:	715a      	strb	r2, [r3, #5]
	IRQ_VECTOR[2].deb_counter = 0;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <Kpd_Irqv_Init+0x54>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	711a      	strb	r2, [r3, #4]
	//
	IRQ_VECTOR[3].IRQn_p = DOWN_P_EXTI_IRQn;
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <Kpd_Irqv_Init+0x54>)
 8001702:	2217      	movs	r2, #23
 8001704:	71da      	strb	r2, [r3, #7]
	IRQ_VECTOR[3].deb_counter = 0;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <Kpd_Irqv_Init+0x54>)
 8001708:	2200      	movs	r2, #0
 800170a:	719a      	strb	r2, [r3, #6]
	//
	IRQ_VECTOR[4].IRQn_p = LEFT_P_EXTI_IRQn;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <Kpd_Irqv_Init+0x54>)
 800170e:	2217      	movs	r2, #23
 8001710:	725a      	strb	r2, [r3, #9]
	IRQ_VECTOR[4].deb_counter = 0;
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <Kpd_Irqv_Init+0x54>)
 8001714:	2200      	movs	r2, #0
 8001716:	721a      	strb	r2, [r3, #8]
	//
	IRQ_VECTOR[5].IRQn_p = RIGHT_P_EXTI_IRQn;
 8001718:	4b04      	ldr	r3, [pc, #16]	; (800172c <Kpd_Irqv_Init+0x54>)
 800171a:	2217      	movs	r2, #23
 800171c:	72da      	strb	r2, [r3, #11]
	IRQ_VECTOR[5].deb_counter = 0;
 800171e:	4b03      	ldr	r3, [pc, #12]	; (800172c <Kpd_Irqv_Init+0x54>)
 8001720:	2200      	movs	r2, #0
 8001722:	729a      	strb	r2, [r3, #10]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	20000444 	.word	0x20000444

08001730 <SystickCallback>:

void SystickCallback(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 6; i++) {
 8001736:	2300      	movs	r3, #0
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	e01b      	b.n	8001774 <SystickCallback+0x44>
		if (IRQ_VECTOR[i].deb_counter == 0) {
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4a11      	ldr	r2, [pc, #68]	; (8001784 <SystickCallback+0x54>)
 8001740:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <SystickCallback+0x2c>
			HAL_NVIC_EnableIRQ(IRQ_VECTOR[i].IRQn_p);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <SystickCallback+0x54>)
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001754:	4618      	mov	r0, r3
 8001756:	f002 ffea 	bl	800472e <HAL_NVIC_EnableIRQ>
 800175a:	e008      	b.n	800176e <SystickCallback+0x3e>
		} else {
			IRQ_VECTOR[i].deb_counter--;
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4a09      	ldr	r2, [pc, #36]	; (8001784 <SystickCallback+0x54>)
 8001760:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001764:	3a01      	subs	r2, #1
 8001766:	b2d1      	uxtb	r1, r2
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <SystickCallback+0x54>)
 800176a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 6; i++) {
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	3301      	adds	r3, #1
 8001772:	71fb      	strb	r3, [r7, #7]
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b05      	cmp	r3, #5
 8001778:	d9e0      	bls.n	800173c <SystickCallback+0xc>
		}
	}
}
 800177a:	bf00      	nop
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000444 	.word	0x20000444

08001788 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SET_P_Pin) {
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	2b10      	cmp	r3, #16
 8001796:	d10d      	bne.n	80017b4 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_NVIC_DisableIRQ(IRQ_VECTOR[0].IRQn_p);
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_GPIO_EXTI_Callback+0x34>)
 800179a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 ffd3 	bl	800474a <HAL_NVIC_DisableIRQ>
		IRQ_VECTOR[0].deb_counter = DEBOUNCE_TIME;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_GPIO_EXTI_Callback+0x34>)
 80017a6:	22f4      	movs	r2, #244	; 0xf4
 80017a8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ae:	4804      	ldr	r0, [pc, #16]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x38>)
 80017b0:	f003 f986 	bl	8004ac0 <HAL_GPIO_TogglePin>
	}
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000444 	.word	0x20000444
 80017c0:	40011000 	.word	0x40011000

080017c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c8:	f002 fdfe 	bl	80043c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017cc:	f000 f80e 	bl	80017ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d0:	f000 f988 	bl	8001ae4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80017d4:	f00a feec 	bl	800c5b0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80017d8:	f000 f862 	bl	80018a0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80017dc:	f000 f936 	bl	8001a4c <MX_TIM2_Init>
  MX_TIM1_Init();
 80017e0:	f000 f894 	bl	800190c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 80017e4:	f7fe fd38 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 80017e8:	bf30      	wfi
 80017ea:	e7fd      	b.n	80017e8 <main+0x24>

080017ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b094      	sub	sp, #80	; 0x50
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f6:	2228      	movs	r2, #40	; 0x28
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f00b fbd2 	bl	800cfa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800181c:	2301      	movs	r3, #1
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182a:	2301      	movs	r3, #1
 800182c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182e:	2302      	movs	r3, #2
 8001830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001838:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800183c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001842:	4618      	mov	r0, r3
 8001844:	f004 fe32 	bl	80064ac <HAL_RCC_OscConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800184e:	f000 f9fd 	bl	8001c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
 8001854:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001862:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f005 f89e 	bl	80069b0 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800187a:	f000 f9e7 	bl	8001c4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800187e:	2310      	movs	r3, #16
 8001880:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4618      	mov	r0, r3
 800188a:	f005 f9f7 	bl	8006c7c <HAL_RCCEx_PeriphCLKConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001894:	f000 f9da 	bl	8001c4c <Error_Handler>
  }
}
 8001898:	bf00      	nop
 800189a:	3750      	adds	r7, #80	; 0x50
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_SPI1_Init+0x64>)
 80018a6:	4a18      	ldr	r2, [pc, #96]	; (8001908 <MX_SPI1_Init+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_SPI1_Init+0x64>)
 80018ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_SPI1_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_SPI1_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_SPI1_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_SPI1_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_SPI1_Init+0x64>)
 80018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_SPI1_Init+0x64>)
 80018d4:	2208      	movs	r2, #8
 80018d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <MX_SPI1_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_SPI1_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <MX_SPI1_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_SPI1_Init+0x64>)
 80018ec:	220a      	movs	r2, #10
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_SPI1_Init+0x64>)
 80018f2:	f005 fa79 	bl	8006de8 <HAL_SPI_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018fc:	f000 f9a6 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000450 	.word	0x20000450
 8001908:	40013000 	.word	0x40013000

0800190c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b096      	sub	sp, #88	; 0x58
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001920:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2220      	movs	r2, #32
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f00b fb2d 	bl	800cfa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <MX_TIM1_Init+0x138>)
 800194c:	4a3e      	ldr	r2, [pc, #248]	; (8001a48 <MX_TIM1_Init+0x13c>)
 800194e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001950:	4b3c      	ldr	r3, [pc, #240]	; (8001a44 <MX_TIM1_Init+0x138>)
 8001952:	2200      	movs	r2, #0
 8001954:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <MX_TIM1_Init+0x138>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 800195c:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <MX_TIM1_Init+0x138>)
 800195e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001964:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <MX_TIM1_Init+0x138>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800196a:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <MX_TIM1_Init+0x138>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <MX_TIM1_Init+0x138>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001976:	4833      	ldr	r0, [pc, #204]	; (8001a44 <MX_TIM1_Init+0x138>)
 8001978:	f005 fc9c 	bl	80072b4 <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001982:	f000 f963 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800198c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001990:	4619      	mov	r1, r3
 8001992:	482c      	ldr	r0, [pc, #176]	; (8001a44 <MX_TIM1_Init+0x138>)
 8001994:	f006 f882 	bl	8007a9c <HAL_TIM_ConfigClockSource>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800199e:	f000 f955 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019a2:	4828      	ldr	r0, [pc, #160]	; (8001a44 <MX_TIM1_Init+0x138>)
 80019a4:	f005 fd56 	bl	8007454 <HAL_TIM_PWM_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80019ae:	f000 f94d 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019be:	4619      	mov	r1, r3
 80019c0:	4820      	ldr	r0, [pc, #128]	; (8001a44 <MX_TIM1_Init+0x138>)
 80019c2:	f006 fbf7 	bl	80081b4 <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019cc:	f000 f93e 	bl	8001c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d0:	2360      	movs	r3, #96	; 0x60
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019dc:	2300      	movs	r3, #0
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e8:	2300      	movs	r3, #0
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f0:	2200      	movs	r2, #0
 80019f2:	4619      	mov	r1, r3
 80019f4:	4813      	ldr	r0, [pc, #76]	; (8001a44 <MX_TIM1_Init+0x138>)
 80019f6:	f005 ff93 	bl	8007920 <HAL_TIM_PWM_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001a00:	f000 f924 	bl	8001c4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4807      	ldr	r0, [pc, #28]	; (8001a44 <MX_TIM1_Init+0x138>)
 8001a28:	f006 fc22 	bl	8008270 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001a32:	f000 f90b 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a36:	4803      	ldr	r0, [pc, #12]	; (8001a44 <MX_TIM1_Init+0x138>)
 8001a38:	f000 f9c6 	bl	8001dc8 <HAL_TIM_MspPostInit>

}
 8001a3c:	bf00      	nop
 8001a3e:	3758      	adds	r7, #88	; 0x58
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	200004a8 	.word	0x200004a8
 8001a48:	40012c00 	.word	0x40012c00

08001a4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	463b      	mov	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <MX_TIM2_Init+0x94>)
 8001a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <MX_TIM2_Init+0x94>)
 8001a72:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001a76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <MX_TIM2_Init+0x94>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <MX_TIM2_Init+0x94>)
 8001a80:	221d      	movs	r2, #29
 8001a82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_TIM2_Init+0x94>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <MX_TIM2_Init+0x94>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a90:	4813      	ldr	r0, [pc, #76]	; (8001ae0 <MX_TIM2_Init+0x94>)
 8001a92:	f005 fc0f 	bl	80072b4 <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a9c:	f000 f8d6 	bl	8001c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aa6:	f107 0308 	add.w	r3, r7, #8
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <MX_TIM2_Init+0x94>)
 8001aae:	f005 fff5 	bl	8007a9c <HAL_TIM_ConfigClockSource>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ab8:	f000 f8c8 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_TIM2_Init+0x94>)
 8001aca:	f006 fb73 	bl	80081b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ad4:	f000 f8ba 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200004f0 	.word	0x200004f0

08001ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af8:	4b4f      	ldr	r3, [pc, #316]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a4e      	ldr	r2, [pc, #312]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001afe:	f043 0310 	orr.w	r3, r3, #16
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a48      	ldr	r2, [pc, #288]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b16:	f043 0320 	orr.w	r3, r3, #32
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b46      	ldr	r3, [pc, #280]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	4b43      	ldr	r3, [pc, #268]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a42      	ldr	r2, [pc, #264]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b40      	ldr	r3, [pc, #256]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a3c      	ldr	r2, [pc, #240]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5e:	4837      	ldr	r0, [pc, #220]	; (8001c3c <MX_GPIO_Init+0x158>)
 8001b60:	f002 ff96 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2110      	movs	r1, #16
 8001b68:	4835      	ldr	r0, [pc, #212]	; (8001c40 <MX_GPIO_Init+0x15c>)
 8001b6a:	f002 ff91 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2140      	movs	r1, #64	; 0x40
 8001b72:	4833      	ldr	r0, [pc, #204]	; (8001c40 <MX_GPIO_Init+0x15c>)
 8001b74:	f002 ff8c 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2103      	movs	r1, #3
 8001b7c:	4831      	ldr	r0, [pc, #196]	; (8001c44 <MX_GPIO_Init+0x160>)
 8001b7e:	f002 ff87 	bl	8004a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4828      	ldr	r0, [pc, #160]	; (8001c3c <MX_GPIO_Init+0x158>)
 8001b9c:	f002 fdf4 	bl	8004788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4822      	ldr	r0, [pc, #136]	; (8001c40 <MX_GPIO_Init+0x15c>)
 8001bb8:	f002 fde6 	bl	8004788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bbc:	2340      	movs	r3, #64	; 0x40
 8001bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481b      	ldr	r0, [pc, #108]	; (8001c40 <MX_GPIO_Init+0x15c>)
 8001bd4:	f002 fdd8 	bl	8004788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	4815      	ldr	r0, [pc, #84]	; (8001c44 <MX_GPIO_Init+0x160>)
 8001bf0:	f002 fdca 	bl	8004788 <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_P_Pin RESET_P_Pin UP_P_Pin DOWN_P_Pin
                           LEFT_P_Pin RIGHT_P_Pin */
  GPIO_InitStruct.Pin = SET_P_Pin|RESET_P_Pin|UP_P_Pin|DOWN_P_Pin
 8001bf4:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001bf8:	613b      	str	r3, [r7, #16]
                          |LEFT_P_Pin|RIGHT_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <MX_GPIO_Init+0x164>)
 8001bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	480e      	ldr	r0, [pc, #56]	; (8001c44 <MX_GPIO_Init+0x160>)
 8001c0a:	f002 fdbd 	bl	8004788 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	200a      	movs	r0, #10
 8001c14:	f002 fd6f 	bl	80046f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c18:	200a      	movs	r0, #10
 8001c1a:	f002 fd88 	bl	800472e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2017      	movs	r0, #23
 8001c24:	f002 fd67 	bl	80046f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c28:	2017      	movs	r0, #23
 8001c2a:	f002 fd80 	bl	800472e <HAL_NVIC_EnableIRQ>

}
 8001c2e:	bf00      	nop
 8001c30:	3720      	adds	r7, #32
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40011000 	.word	0x40011000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40010c00 	.word	0x40010c00
 8001c48:	10210000 	.word	0x10210000

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <Error_Handler+0x8>
	...

08001c58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_MspInit+0x7c>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_MspInit+0x7c>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6193      	str	r3, [r2, #24]
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_MspInit+0x7c>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_MspInit+0x7c>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <HAL_MspInit+0x7c>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_MspInit+0x7c>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2005      	movs	r0, #5
 8001c94:	f002 fd2f 	bl	80046f6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c98:	2005      	movs	r0, #5
 8001c9a:	f002 fd48 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2005      	movs	r0, #5
 8001ca4:	f002 fd27 	bl	80046f6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ca8:	2005      	movs	r0, #5
 8001caa:	f002 fd40 	bl	800472e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_MspInit+0x80>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_MspInit+0x80>)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000

08001cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_SPI_MspInit+0x70>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d123      	bne.n	8001d44 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_SPI_MspInit+0x74>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <HAL_SPI_MspInit+0x74>)
 8001d02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_SPI_MspInit+0x74>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_SPI_MspInit+0x74>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <HAL_SPI_MspInit+0x74>)
 8001d1a:	f043 0304 	orr.w	r3, r3, #4
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_SPI_MspInit+0x74>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d2c:	23a0      	movs	r3, #160	; 0xa0
 8001d2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <HAL_SPI_MspInit+0x78>)
 8001d40:	f002 fd22 	bl	8004788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d44:	bf00      	nop
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40013000 	.word	0x40013000
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010800 	.word	0x40010800

08001d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <HAL_TIM_Base_MspInit+0x68>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d10c      	bne.n	8001d84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d74:	6193      	str	r3, [r2, #24]
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d82:	e018      	b.n	8001db6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8c:	d113      	bne.n	8001db6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	61d3      	str	r3, [r2, #28]
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	201c      	movs	r0, #28
 8001dac:	f002 fca3 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001db0:	201c      	movs	r0, #28
 8001db2:	f002 fcbc 	bl	800472e <HAL_NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40012c00 	.word	0x40012c00
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <HAL_TIM_MspPostInit+0x5c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d118      	bne.n	8001e1a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_TIM_MspPostInit+0x60>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <HAL_TIM_MspPostInit+0x60>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <HAL_TIM_MspPostInit+0x60>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0310 	add.w	r3, r7, #16
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <HAL_TIM_MspPostInit+0x64>)
 8001e16:	f002 fcb7 	bl	8004788 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40012c00 	.word	0x40012c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010800 	.word	0x40010800

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>

08001e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <MemManage_Handler+0x4>

08001e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickCallback();
 8001e76:	f7ff fc5b 	bl	8001730 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7a:	f002 faeb 	bl	8004454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_P_Pin);
 8001e92:	2010      	movs	r0, #16
 8001e94:	f002 fe2e 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001ea2:	f002 ff70 	bl	8004d86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200017d8 	.word	0x200017d8

08001eb0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001eb6:	f002 ff66 	bl	8004d86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	200017d8 	.word	0x200017d8

08001ec4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_P_Pin);
 8001ec8:	2020      	movs	r0, #32
 8001eca:	f002 fe13 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_P_Pin);
 8001ece:	2040      	movs	r0, #64	; 0x40
 8001ed0:	f002 fe10 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_P_Pin);
 8001ed4:	2080      	movs	r0, #128	; 0x80
 8001ed6:	f002 fe0d 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_P_Pin);
 8001eda:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ede:	f002 fe09 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_P_Pin);
 8001ee2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ee6:	f002 fe05 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <TIM2_IRQHandler+0x10>)
 8001ef6:	f005 fc0b 	bl	8007710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200004f0 	.word	0x200004f0

08001f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <_sbrk+0x5c>)
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_sbrk+0x60>)
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f34:	f00a fffe 	bl	800cf34 <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20005000 	.word	0x20005000
 8001f64:	00000400 	.word	0x00000400
 8001f68:	20000538 	.word	0x20000538
 8001f6c:	20001cf8 	.word	0x20001cf8

08001f70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr

08001f9a <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b088      	sub	sp, #32
 8001f9e:	af02      	add	r7, sp, #8
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	4608      	mov	r0, r1
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4603      	mov	r3, r0
 8001faa:	817b      	strh	r3, [r7, #10]
 8001fac:	460b      	mov	r3, r1
 8001fae:	813b      	strh	r3, [r7, #8]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001fba:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001fbc:	7dbb      	ldrb	r3, [r7, #22]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001fca:	897a      	ldrh	r2, [r7, #10]
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	4413      	add	r3, r2
 8001fd0:	b298      	uxth	r0, r3
 8001fd2:	893b      	ldrh	r3, [r7, #8]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	893a      	ldrh	r2, [r7, #8]
 8001fda:	8979      	ldrh	r1, [r7, #10]
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4603      	mov	r3, r0
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f001 fbc8 	bl	8003776 <u8g2_IsIntersection>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d040      	beq.n	800206e <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001ff0:	e035      	b.n	800205e <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00c      	beq.n	800201a <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	7dba      	ldrb	r2, [r7, #22]
 8002004:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002008:	893a      	ldrh	r2, [r7, #8]
 800200a:	8979      	ldrh	r1, [r7, #10]
 800200c:	2300      	movs	r3, #0
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2301      	movs	r3, #1
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f001 fa76 	bl	8003504 <u8g2_DrawHVLine>
 8002018:	e010      	b.n	800203c <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10b      	bne.n	800203c <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	7d7a      	ldrb	r2, [r7, #21]
 8002028:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800202c:	893a      	ldrh	r2, [r7, #8]
 800202e:	8979      	ldrh	r1, [r7, #10]
 8002030:	2300      	movs	r3, #0
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f001 fa64 	bl	8003504 <u8g2_DrawHVLine>
    }
    x++;
 800203c:	897b      	ldrh	r3, [r7, #10]
 800203e:	3301      	adds	r3, #1
 8002040:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8002042:	7dfb      	ldrb	r3, [r7, #23]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d104      	bne.n	8002058 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
      b++;
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	3301      	adds	r3, #1
 8002056:	623b      	str	r3, [r7, #32]
    }
    len--;
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	3b01      	subs	r3, #1
 800205c:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1c6      	bne.n	8001ff2 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	7dba      	ldrb	r2, [r7, #22]
 8002068:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800206c:	e000      	b.n	8002070 <u8g2_DrawHXBM+0xd6>
    return;
 800206e:	bf00      	nop
}
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b088      	sub	sp, #32
 800207a:	af02      	add	r7, sp, #8
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	4608      	mov	r0, r1
 8002080:	4611      	mov	r1, r2
 8002082:	461a      	mov	r2, r3
 8002084:	4603      	mov	r3, r0
 8002086:	817b      	strh	r3, [r7, #10]
 8002088:	460b      	mov	r3, r1
 800208a:	813b      	strh	r3, [r7, #8]
 800208c:	4613      	mov	r3, r2
 800208e:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8002094:	8afb      	ldrh	r3, [r7, #22]
 8002096:	3307      	adds	r3, #7
 8002098:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 800209a:	8afb      	ldrh	r3, [r7, #22]
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80020a0:	897a      	ldrh	r2, [r7, #10]
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4413      	add	r3, r2
 80020a6:	b298      	uxth	r0, r3
 80020a8:	893a      	ldrh	r2, [r7, #8]
 80020aa:	8c3b      	ldrh	r3, [r7, #32]
 80020ac:	4413      	add	r3, r2
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	893a      	ldrh	r2, [r7, #8]
 80020b2:	8979      	ldrh	r1, [r7, #10]
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	4603      	mov	r3, r0
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f001 fb5c 	bl	8003776 <u8g2_IsIntersection>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d017      	beq.n	80020f4 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80020c4:	e012      	b.n	80020ec <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80020c6:	88f8      	ldrh	r0, [r7, #6]
 80020c8:	893a      	ldrh	r2, [r7, #8]
 80020ca:	8979      	ldrh	r1, [r7, #10]
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	4603      	mov	r3, r0
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f7ff ff61 	bl	8001f9a <u8g2_DrawHXBM>
    bitmap += blen;
 80020d8:	8afb      	ldrh	r3, [r7, #22]
 80020da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020dc:	4413      	add	r3, r2
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 80020e0:	893b      	ldrh	r3, [r7, #8]
 80020e2:	3301      	adds	r3, #1
 80020e4:	813b      	strh	r3, [r7, #8]
    h--;
 80020e6:	8c3b      	ldrh	r3, [r7, #32]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 80020ec:	8c3b      	ldrh	r3, [r7, #32]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1e9      	bne.n	80020c6 <u8g2_DrawXBM+0x50>
 80020f2:	e000      	b.n	80020f6 <u8g2_DrawXBM+0x80>
    return;
 80020f4:	bf00      	nop
  }
}
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	461a      	mov	r2, r3
 800210a:	4603      	mov	r3, r0
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	460b      	mov	r3, r1
 8002110:	813b      	strh	r3, [r7, #8]
 8002112:	4613      	mov	r3, r2
 8002114:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002116:	897a      	ldrh	r2, [r7, #10]
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	4413      	add	r3, r2
 800211c:	b298      	uxth	r0, r3
 800211e:	893a      	ldrh	r2, [r7, #8]
 8002120:	8b3b      	ldrh	r3, [r7, #24]
 8002122:	4413      	add	r3, r2
 8002124:	b29b      	uxth	r3, r3
 8002126:	893a      	ldrh	r2, [r7, #8]
 8002128:	8979      	ldrh	r1, [r7, #10]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4603      	mov	r3, r0
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f001 fb21 	bl	8003776 <u8g2_IsIntersection>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800213a:	e00d      	b.n	8002158 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	893a      	ldrh	r2, [r7, #8]
 8002140:	8979      	ldrh	r1, [r7, #10]
 8002142:	2000      	movs	r0, #0
 8002144:	9000      	str	r0, [sp, #0]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f001 f9dc 	bl	8003504 <u8g2_DrawHVLine>
    y++;    
 800214c:	893b      	ldrh	r3, [r7, #8]
 800214e:	3301      	adds	r3, #1
 8002150:	813b      	strh	r3, [r7, #8]
    h--;
 8002152:	8b3b      	ldrh	r3, [r7, #24]
 8002154:	3b01      	subs	r3, #1
 8002156:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8002158:	8b3b      	ldrh	r3, [r7, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1ee      	bne.n	800213c <u8g2_DrawBox+0x40>
 800215e:	e000      	b.n	8002162 <u8g2_DrawBox+0x66>
    return;
 8002160:	bf00      	nop
  }
}
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8002182:	897b      	ldrh	r3, [r7, #10]
 8002184:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002186:	897a      	ldrh	r2, [r7, #10]
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	4413      	add	r3, r2
 800218c:	b298      	uxth	r0, r3
 800218e:	893a      	ldrh	r2, [r7, #8]
 8002190:	8c3b      	ldrh	r3, [r7, #32]
 8002192:	4413      	add	r3, r2
 8002194:	b29b      	uxth	r3, r3
 8002196:	893a      	ldrh	r2, [r7, #8]
 8002198:	8979      	ldrh	r1, [r7, #10]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4603      	mov	r3, r0
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f001 fae9 	bl	8003776 <u8g2_IsIntersection>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d037      	beq.n	800221a <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	893a      	ldrh	r2, [r7, #8]
 80021ae:	8979      	ldrh	r1, [r7, #10]
 80021b0:	2000      	movs	r0, #0
 80021b2:	9000      	str	r0, [sp, #0]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f001 f9a5 	bl	8003504 <u8g2_DrawHVLine>
  if (h >= 2) {
 80021ba:	8c3b      	ldrh	r3, [r7, #32]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d92d      	bls.n	800221c <u8g2_DrawFrame+0xb4>
    h-=2;
 80021c0:	8c3b      	ldrh	r3, [r7, #32]
 80021c2:	3b02      	subs	r3, #2
 80021c4:	843b      	strh	r3, [r7, #32]
    y++;
 80021c6:	893b      	ldrh	r3, [r7, #8]
 80021c8:	3301      	adds	r3, #1
 80021ca:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 80021cc:	8c3b      	ldrh	r3, [r7, #32]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d01a      	beq.n	8002208 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80021d2:	8c3b      	ldrh	r3, [r7, #32]
 80021d4:	893a      	ldrh	r2, [r7, #8]
 80021d6:	8979      	ldrh	r1, [r7, #10]
 80021d8:	2001      	movs	r0, #1
 80021da:	9000      	str	r0, [sp, #0]
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f001 f991 	bl	8003504 <u8g2_DrawHVLine>
      x+=w;
 80021e2:	897a      	ldrh	r2, [r7, #10]
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	4413      	add	r3, r2
 80021e8:	817b      	strh	r3, [r7, #10]
      x--;
 80021ea:	897b      	ldrh	r3, [r7, #10]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80021f0:	8c3b      	ldrh	r3, [r7, #32]
 80021f2:	893a      	ldrh	r2, [r7, #8]
 80021f4:	8979      	ldrh	r1, [r7, #10]
 80021f6:	2001      	movs	r0, #1
 80021f8:	9000      	str	r0, [sp, #0]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f001 f982 	bl	8003504 <u8g2_DrawHVLine>
      y+=h;
 8002200:	893a      	ldrh	r2, [r7, #8]
 8002202:	8c3b      	ldrh	r3, [r7, #32]
 8002204:	4413      	add	r3, r2
 8002206:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	893a      	ldrh	r2, [r7, #8]
 800220c:	8af9      	ldrh	r1, [r7, #22]
 800220e:	2000      	movs	r0, #0
 8002210:	9000      	str	r0, [sp, #0]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f001 f976 	bl	8003504 <u8g2_DrawHVLine>
 8002218:	e000      	b.n	800221c <u8g2_DrawFrame+0xb4>
    return;
 800221a:	bf00      	nop
  }
}
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	7c1b      	ldrb	r3, [r3, #16]
 8002230:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002238:	461a      	mov	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f00a fea7 	bl	800cfa4 <memset>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af02      	add	r7, sp, #8
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	70fb      	strb	r3, [r7, #3]
 800226a:	4613      	mov	r3, r2
 800226c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	7c1b      	ldrb	r3, [r3, #16]
 8002274:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	b29b      	uxth	r3, r3
 8002284:	89ba      	ldrh	r2, [r7, #12]
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800228c:	89bb      	ldrh	r3, [r7, #12]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8002292:	89bb      	ldrh	r3, [r7, #12]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	4413      	add	r3, r2
 8002298:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800229a:	7bf9      	ldrb	r1, [r7, #15]
 800229c:	78ba      	ldrb	r2, [r7, #2]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	460b      	mov	r3, r1
 80022a4:	2100      	movs	r1, #0
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f001 ff88 	bl	80041bc <u8x8_DrawTile>
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022c6:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022ce:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	7c5b      	ldrb	r3, [r3, #17]
 80022d6:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80022d8:	7bba      	ldrb	r2, [r7, #14]
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	4619      	mov	r1, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff ffbd 	bl	800225e <u8g2_send_tile_row>
    src_row++;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	3301      	adds	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	3301      	adds	r3, #1
 80022ee:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	7b7b      	ldrb	r3, [r7, #13]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d203      	bcs.n	8002300 <u8g2_send_buffer+0x4c>
 80022f8:	7bba      	ldrb	r2, [r7, #14]
 80022fa:	7b3b      	ldrb	r3, [r7, #12]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d3eb      	bcc.n	80022d8 <u8g2_send_buffer+0x24>
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ffcf 	bl	80022b4 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f001 ffb2 	bl	8004280 <u8x8_RefreshDisplay>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff ff5b 	bl	8002222 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffd8 	bl	8002324 <u8g2_SetBufferCurrTileRow>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff95 	bl	80022b4 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002390:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	4413      	add	r3, r2
 800239c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	7c5b      	ldrb	r3, [r3, #17]
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d304      	bcc.n	80023b4 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f001 ff68 	bl	8004280 <u8x8_RefreshDisplay>
    return 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e00d      	b.n	80023d0 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ff2f 	bl	8002222 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	4619      	mov	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffab 	bl	8002324 <u8g2_SetBufferCurrTileRow>
  return 1;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 80023f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80023f4:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 80023f6:	2308      	movs	r3, #8
 80023f8:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8002408:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8002410:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002418:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 8002424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002426:	3301      	adds	r3, #1
 8002428:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 800242a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800242c:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 800242e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002430:	3301      	adds	r3, #1
 8002432:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 8002434:	897b      	ldrh	r3, [r7, #10]
 8002436:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 8002438:	8b7a      	ldrh	r2, [r7, #26]
 800243a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 8002440:	8b7a      	ldrh	r2, [r7, #26]
 8002442:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 8002448:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800244a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800244c:	4413      	add	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	8c3b      	ldrh	r3, [r7, #32]
 8002456:	4413      	add	r3, r2
 8002458:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 800245a:	893b      	ldrh	r3, [r7, #8]
 800245c:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	4798      	blx	r3
 8002466:	4603      	mov	r3, r0
 8002468:	461a      	mov	r2, r3
 800246a:	8afb      	ldrh	r3, [r7, #22]
 800246c:	4413      	add	r3, r2
 800246e:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8002470:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002474:	b29b      	uxth	r3, r3
 8002476:	8afa      	ldrh	r2, [r7, #22]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 800247c:	8afa      	ldrh	r2, [r7, #22]
 800247e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8002484:	8afa      	ldrh	r2, [r7, #22]
 8002486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 800248c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002490:	b21a      	sxth	r2, r3
 8002492:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002496:	b21b      	sxth	r3, r3
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	b21b      	sxth	r3, r3
 800249c:	b29a      	uxth	r2, r3
 800249e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80024a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80024a2:	440b      	add	r3, r1
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 80024ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d067      	beq.n	8002584 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 80024b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d109      	bne.n	80024d0 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 80024bc:	7f7b      	ldrb	r3, [r7, #29]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf0c      	ite	eq
 80024c2:	2301      	moveq	r3, #1
 80024c4:	2300      	movne	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4619      	mov	r1, r3
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f001 f90a 	bl	80036e4 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 80024d0:	8b38      	ldrh	r0, [r7, #24]
 80024d2:	8afa      	ldrh	r2, [r7, #22]
 80024d4:	8b79      	ldrh	r1, [r7, #26]
 80024d6:	8abb      	ldrh	r3, [r7, #20]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	4603      	mov	r3, r0
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff fe43 	bl	8002168 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 80024e2:	7f7b      	ldrb	r3, [r7, #29]
 80024e4:	4619      	mov	r1, r3
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f001 f8fc 	bl	80036e4 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	f003 0318 	and.w	r3, r3, #24
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d042      	beq.n	800257c <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 80024f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	429a      	cmp	r2, r3
 8002500:	d13c      	bne.n	800257c <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	10db      	asrs	r3, r3, #3
 8002506:	b29b      	uxth	r3, r3
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 800250e:	8a7b      	ldrh	r3, [r7, #18]
 8002510:	3b01      	subs	r3, #1
 8002512:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8002514:	2300      	movs	r3, #0
 8002516:	847b      	strh	r3, [r7, #34]	; 0x22
 8002518:	e02c      	b.n	8002574 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 800251a:	8b7a      	ldrh	r2, [r7, #26]
 800251c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800251e:	4413      	add	r3, r2
 8002520:	b29a      	uxth	r2, r3
 8002522:	8a7b      	ldrh	r3, [r7, #18]
 8002524:	4413      	add	r3, r2
 8002526:	b299      	uxth	r1, r3
 8002528:	8afa      	ldrh	r2, [r7, #22]
 800252a:	8abb      	ldrh	r3, [r7, #20]
 800252c:	4413      	add	r3, r2
 800252e:	b29a      	uxth	r2, r3
 8002530:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002532:	4413      	add	r3, r2
 8002534:	b29a      	uxth	r2, r3
 8002536:	8a7b      	ldrh	r3, [r7, #18]
 8002538:	4413      	add	r3, r2
 800253a:	b29a      	uxth	r2, r3
 800253c:	8b3b      	ldrh	r3, [r7, #24]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f001 f86b 	bl	800361a <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8002544:	8b7a      	ldrh	r2, [r7, #26]
 8002546:	8b3b      	ldrh	r3, [r7, #24]
 8002548:	4413      	add	r3, r2
 800254a:	b29a      	uxth	r2, r3
 800254c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800254e:	4413      	add	r3, r2
 8002550:	b29a      	uxth	r2, r3
 8002552:	8a7b      	ldrh	r3, [r7, #18]
 8002554:	4413      	add	r3, r2
 8002556:	b299      	uxth	r1, r3
 8002558:	8afa      	ldrh	r2, [r7, #22]
 800255a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800255c:	4413      	add	r3, r2
 800255e:	b29a      	uxth	r2, r3
 8002560:	8a7b      	ldrh	r3, [r7, #18]
 8002562:	4413      	add	r3, r2
 8002564:	b29a      	uxth	r2, r3
 8002566:	8abb      	ldrh	r3, [r7, #20]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f001 f86f 	bl	800364c <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 800256e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002570:	3301      	adds	r3, #1
 8002572:	847b      	strh	r3, [r7, #34]	; 0x22
 8002574:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002578:	429a      	cmp	r2, r3
 800257a:	d3ce      	bcc.n	800251a <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 800257c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800257e:	3b01      	subs	r3, #1
 8002580:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8002582:	e757      	b.n	8002434 <u8g2_DrawButtonFrame+0x5c>
      break;
 8002584:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d011      	beq.n	80025b4 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8002590:	2102      	movs	r1, #2
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f001 f8a6 	bl	80036e4 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8002598:	8b38      	ldrh	r0, [r7, #24]
 800259a:	8afa      	ldrh	r2, [r7, #22]
 800259c:	8b79      	ldrh	r1, [r7, #26]
 800259e:	8abb      	ldrh	r3, [r7, #20]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	4603      	mov	r3, r0
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff fda9 	bl	80020fc <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 80025aa:	7f7b      	ldrb	r3, [r7, #29]
 80025ac:	4619      	mov	r1, r3
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f001 f898 	bl	80036e4 <u8g2_SetDrawColor>
  }
}
 80025b4:	bf00      	nop
 80025b6:	3728      	adds	r7, #40	; 0x28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af04      	add	r7, sp, #16
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	4608      	mov	r0, r1
 80025c6:	4611      	mov	r1, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	817b      	strh	r3, [r7, #10]
 80025ce:	460b      	mov	r3, r1
 80025d0:	813b      	strh	r3, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 80025d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 ff11 	bl	8003400 <u8g2_GetUTF8Width>
 80025de:	4603      	mov	r3, r0
 80025e0:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 80025e2:	2300      	movs	r3, #0
 80025e4:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 80025f0:	8afb      	ldrh	r3, [r7, #22]
 80025f2:	3301      	adds	r3, #1
 80025f4:	0fda      	lsrs	r2, r3, #31
 80025f6:	4413      	add	r3, r2
 80025f8:	105b      	asrs	r3, r3, #1
 80025fa:	425b      	negs	r3, r3
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	897b      	ldrh	r3, [r7, #10]
 8002600:	4413      	add	r3, r2
 8002602:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8002604:	8afa      	ldrh	r2, [r7, #22]
 8002606:	8c3b      	ldrh	r3, [r7, #32]
 8002608:	429a      	cmp	r2, r3
 800260a:	d20d      	bcs.n	8002628 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 8002616:	8c3a      	ldrh	r2, [r7, #32]
 8002618:	8afb      	ldrh	r3, [r7, #22]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	0fda      	lsrs	r2, r3, #31
 800261e:	4413      	add	r3, r2
 8002620:	105b      	asrs	r3, r3, #1
 8002622:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8002624:	8c3b      	ldrh	r3, [r7, #32]
 8002626:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 8002628:	2101      	movs	r1, #1
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fcda 	bl	8002fe4 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8002630:	893a      	ldrh	r2, [r7, #8]
 8002632:	8979      	ldrh	r1, [r7, #10]
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fd92 	bl	8003160 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 800263c:	897a      	ldrh	r2, [r7, #10]
 800263e:	8abb      	ldrh	r3, [r7, #20]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	b299      	uxth	r1, r3
 8002644:	88f8      	ldrh	r0, [r7, #6]
 8002646:	893a      	ldrh	r2, [r7, #8]
 8002648:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800264a:	9302      	str	r3, [sp, #8]
 800264c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	8afb      	ldrh	r3, [r7, #22]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4603      	mov	r3, r0
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff febe 	bl	80023d8 <u8g2_DrawButtonFrame>
  
}
 800265c:	bf00      	nop
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fe71 	bl	8002354 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff fe82 	bl	800237c <u8g2_NextPage>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f9      	bne.n	8002672 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800267e:	2100      	movs	r1, #0
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff fe4f 	bl	8002324 <u8g2_SetBufferCurrTileRow>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2208      	movs	r2, #8
 800269c:	701a      	strb	r2, [r3, #0]
  return buf;
 800269e:	4b03      	ldr	r3, [pc, #12]	; (80026ac <u8g2_m_24_8_f+0x1c>)
  #endif
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	2000053c 	.word	0x2000053c

080026b0 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 80026c6:	490c      	ldr	r1, [pc, #48]	; (80026f8 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f001 fe39 	bl	8004340 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 80026ce:	f107 0313 	add.w	r3, r7, #19
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ffdc 	bl	8002690 <u8g2_m_24_8_f>
 80026d8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80026da:	7cfa      	ldrb	r2, [r7, #19]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 80026e2:	6979      	ldr	r1, [r7, #20]
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f001 f92f 	bl	8003948 <u8g2_SetupBuffer>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	08003ed9 	.word	0x08003ed9
 80026f8:	080040b9 	.word	0x080040b9
 80026fc:	080037cd 	.word	0x080037cd

08002700 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	70fb      	strb	r3, [r7, #3]
	font += offset;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	781b      	ldrb	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	81fb      	strh	r3, [r7, #14]
	font++;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3301      	adds	r3, #1
 8002740:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8002742:	89fb      	ldrh	r3, [r7, #14]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b29a      	uxth	r2, r3
 800274e:	89fb      	ldrh	r3, [r7, #14]
 8002750:	4413      	add	r3, r2
 8002752:	81fb      	strh	r3, [r7, #14]
	return pos;
 8002754:	89fb      	ldrh	r3, [r7, #14]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800276a:	2100      	movs	r1, #0
 800276c:	6838      	ldr	r0, [r7, #0]
 800276e:	f7ff ffc7 	bl	8002700 <u8g2_font_get_byte>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800277a:	2101      	movs	r1, #1
 800277c:	6838      	ldr	r0, [r7, #0]
 800277e:	f7ff ffbf 	bl	8002700 <u8g2_font_get_byte>
 8002782:	4603      	mov	r3, r0
 8002784:	461a      	mov	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800278a:	2102      	movs	r1, #2
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f7ff ffb7 	bl	8002700 <u8g2_font_get_byte>
 8002792:	4603      	mov	r3, r0
 8002794:	461a      	mov	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800279a:	2103      	movs	r1, #3
 800279c:	6838      	ldr	r0, [r7, #0]
 800279e:	f7ff ffaf 	bl	8002700 <u8g2_font_get_byte>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80027aa:	2104      	movs	r1, #4
 80027ac:	6838      	ldr	r0, [r7, #0]
 80027ae:	f7ff ffa7 	bl	8002700 <u8g2_font_get_byte>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80027ba:	2105      	movs	r1, #5
 80027bc:	6838      	ldr	r0, [r7, #0]
 80027be:	f7ff ff9f 	bl	8002700 <u8g2_font_get_byte>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80027ca:	2106      	movs	r1, #6
 80027cc:	6838      	ldr	r0, [r7, #0]
 80027ce:	f7ff ff97 	bl	8002700 <u8g2_font_get_byte>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80027da:	2107      	movs	r1, #7
 80027dc:	6838      	ldr	r0, [r7, #0]
 80027de:	f7ff ff8f 	bl	8002700 <u8g2_font_get_byte>
 80027e2:	4603      	mov	r3, r0
 80027e4:	461a      	mov	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80027ea:	2108      	movs	r1, #8
 80027ec:	6838      	ldr	r0, [r7, #0]
 80027ee:	f7ff ff87 	bl	8002700 <u8g2_font_get_byte>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80027fa:	2109      	movs	r1, #9
 80027fc:	6838      	ldr	r0, [r7, #0]
 80027fe:	f7ff ff7f 	bl	8002700 <u8g2_font_get_byte>
 8002802:	4603      	mov	r3, r0
 8002804:	b25a      	sxtb	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800280a:	210a      	movs	r1, #10
 800280c:	6838      	ldr	r0, [r7, #0]
 800280e:	f7ff ff77 	bl	8002700 <u8g2_font_get_byte>
 8002812:	4603      	mov	r3, r0
 8002814:	b25a      	sxtb	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 800281a:	210b      	movs	r1, #11
 800281c:	6838      	ldr	r0, [r7, #0]
 800281e:	f7ff ff6f 	bl	8002700 <u8g2_font_get_byte>
 8002822:	4603      	mov	r3, r0
 8002824:	b25a      	sxtb	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 800282a:	210c      	movs	r1, #12
 800282c:	6838      	ldr	r0, [r7, #0]
 800282e:	f7ff ff67 	bl	8002700 <u8g2_font_get_byte>
 8002832:	4603      	mov	r3, r0
 8002834:	b25a      	sxtb	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800283a:	210d      	movs	r1, #13
 800283c:	6838      	ldr	r0, [r7, #0]
 800283e:	f7ff ff5f 	bl	8002700 <u8g2_font_get_byte>
 8002842:	4603      	mov	r3, r0
 8002844:	b25a      	sxtb	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 800284a:	210e      	movs	r1, #14
 800284c:	6838      	ldr	r0, [r7, #0]
 800284e:	f7ff ff57 	bl	8002700 <u8g2_font_get_byte>
 8002852:	4603      	mov	r3, r0
 8002854:	b25a      	sxtb	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800285a:	210f      	movs	r1, #15
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	f7ff ff4f 	bl	8002700 <u8g2_font_get_byte>
 8002862:	4603      	mov	r3, r0
 8002864:	b25a      	sxtb	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 800286a:	2110      	movs	r1, #16
 800286c:	6838      	ldr	r0, [r7, #0]
 800286e:	f7ff ff47 	bl	8002700 <u8g2_font_get_byte>
 8002872:	4603      	mov	r3, r0
 8002874:	b25a      	sxtb	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800287a:	2111      	movs	r1, #17
 800287c:	6838      	ldr	r0, [r7, #0]
 800287e:	f7ff ff50 	bl	8002722 <u8g2_font_get_word>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 800288a:	2113      	movs	r1, #19
 800288c:	6838      	ldr	r0, [r7, #0]
 800288e:	f7ff ff48 	bl	8002722 <u8g2_font_get_word>
 8002892:	4603      	mov	r3, r0
 8002894:	461a      	mov	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 800289a:	2115      	movs	r1, #21
 800289c:	6838      	ldr	r0, [r7, #0]
 800289e:	f7ff ff40 	bl	8002722 <u8g2_font_get_word>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461a      	mov	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	82da      	strh	r2, [r3, #22]
#endif
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 80028b2:	b480      	push	{r7}
 80028b4:	b085      	sub	sp, #20
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7b1b      	ldrb	r3, [r3, #12]
 80028c2:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 80028cc:	7bfa      	ldrb	r2, [r7, #15]
 80028ce:	7b7b      	ldrb	r3, [r7, #13]
 80028d0:	fa42 f303 	asr.w	r3, r2, r3
 80028d4:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 80028d6:	7b7b      	ldrb	r3, [r7, #13]
 80028d8:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 80028da:	7bba      	ldrb	r2, [r7, #14]
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	4413      	add	r3, r2
 80028e0:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 80028e2:	7bbb      	ldrb	r3, [r7, #14]
 80028e4:	2b07      	cmp	r3, #7
 80028e6:	d91a      	bls.n	800291e <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 80028e8:	2308      	movs	r3, #8
 80028ea:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 80028ec:	7b3a      	ldrb	r2, [r7, #12]
 80028ee:	7b7b      	ldrb	r3, [r7, #13]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	7b3b      	ldrb	r3, [r7, #12]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	b25a      	sxtb	r2, r3
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	4313      	orrs	r3, r2
 8002914:	b25b      	sxtb	r3, r3
 8002916:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 8002918:	7bbb      	ldrb	r3, [r7, #14]
 800291a:	3b08      	subs	r3, #8
 800291c:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	b2da      	uxtb	r2, r3
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	4013      	ands	r3, r2
 8002932:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7bba      	ldrb	r2, [r7, #14]
 8002938:	731a      	strb	r2, [r3, #12]
	return val;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	4619      	mov	r1, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffab 	bl	80028b2 <u8g2_font_decode_get_unsigned_bits>
 800295c:	4603      	mov	r3, r0
 800295e:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8002960:	2301      	movs	r3, #1
 8002962:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	3b01      	subs	r3, #1
 8002968:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 800296a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	73bb      	strb	r3, [r7, #14]
	v -= d;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	7bbb      	ldrb	r3, [r7, #14]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	b2db      	uxtb	r3, r3
 800297e:	73fb      	strb	r3, [r7, #15]
	return v;
 8002980:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 800298c:	b490      	push	{r4, r7}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4604      	mov	r4, r0
 8002994:	4608      	mov	r0, r1
 8002996:	4611      	mov	r1, r2
 8002998:	461a      	mov	r2, r3
 800299a:	4623      	mov	r3, r4
 800299c:	80fb      	strh	r3, [r7, #6]
 800299e:	4603      	mov	r3, r0
 80029a0:	717b      	strb	r3, [r7, #5]
 80029a2:	460b      	mov	r3, r1
 80029a4:	713b      	strb	r3, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d014      	beq.n	80029da <u8g2_add_vector_y+0x4e>
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	dc19      	bgt.n	80029e8 <u8g2_add_vector_y+0x5c>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <u8g2_add_vector_y+0x32>
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d007      	beq.n	80029cc <u8g2_add_vector_y+0x40>
 80029bc:	e014      	b.n	80029e8 <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 80029be:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	4413      	add	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
		break;
 80029ca:	e014      	b.n	80029f6 <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 80029cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	4413      	add	r3, r2
 80029d6:	80fb      	strh	r3, [r7, #6]
		break;
 80029d8:	e00d      	b.n	80029f6 <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 80029da:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	88fa      	ldrh	r2, [r7, #6]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	80fb      	strh	r3, [r7, #6]
		break;
 80029e6:	e006      	b.n	80029f6 <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 80029e8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	80fb      	strh	r3, [r7, #6]
		break;
 80029f4:	bf00      	nop
	}
	return dy;
 80029f6:	88fb      	ldrh	r3, [r7, #6]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc90      	pop	{r4, r7}
 8002a00:	4770      	bx	lr

08002a02 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8002a02:	b490      	push	{r4, r7}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4604      	mov	r4, r0
 8002a0a:	4608      	mov	r0, r1
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4623      	mov	r3, r4
 8002a12:	80fb      	strh	r3, [r7, #6]
 8002a14:	4603      	mov	r3, r0
 8002a16:	717b      	strb	r3, [r7, #5]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	713b      	strb	r3, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d014      	beq.n	8002a50 <u8g2_add_vector_x+0x4e>
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	dc19      	bgt.n	8002a5e <u8g2_add_vector_x+0x5c>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <u8g2_add_vector_x+0x32>
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d007      	beq.n	8002a42 <u8g2_add_vector_x+0x40>
 8002a32:	e014      	b.n	8002a5e <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8002a34:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	80fb      	strh	r3, [r7, #6]
		break;
 8002a40:	e014      	b.n	8002a6c <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8002a42:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	80fb      	strh	r3, [r7, #6]
		break;
 8002a4e:	e00d      	b.n	8002a6c <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8002a50:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	80fb      	strh	r3, [r7, #6]
		break;
 8002a5c:	e006      	b.n	8002a6c <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 8002a5e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	4413      	add	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
		break;
 8002a6a:	bf00      	nop
	}
	return dx;
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc90      	pop	{r4, r7}
 8002a76:	4770      	bx	lr

08002a78 <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
 8002a84:	4613      	mov	r3, r2
 8002a86:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3360      	adds	r3, #96	; 0x60
 8002a8c:	613b      	str	r3, [r7, #16]

	cnt = len;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002a98:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002aa0:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002aa8:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	7d7b      	ldrb	r3, [r7, #21]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 8002ab6:	7dfa      	ldrb	r2, [r7, #23]
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d201      	bcs.n	8002ac2 <u8g2_font_decode_len+0x4a>
			current = cnt;
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	889b      	ldrh	r3, [r3, #4]
 8002ac6:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	88db      	ldrh	r3, [r3, #6]
 8002acc:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002ace:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002ad2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	7c1b      	ldrb	r3, [r3, #16]
 8002ada:	89b8      	ldrh	r0, [r7, #12]
 8002adc:	f7ff ff91 	bl	8002a02 <u8g2_add_vector_x>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002ae4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002ae8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	7c1b      	ldrb	r3, [r3, #16]
 8002af0:	8978      	ldrh	r0, [r7, #10]
 8002af2:	f7ff ff4b 	bl	800298c <u8g2_add_vector_y>
 8002af6:	4603      	mov	r3, r0
 8002af8:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 8002afa:	78bb      	ldrb	r3, [r7, #2]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d010      	beq.n	8002b22 <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	7b9a      	ldrb	r2, [r3, #14]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8002b0a:	7dbb      	ldrb	r3, [r7, #22]
 8002b0c:	b298      	uxth	r0, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	7c1b      	ldrb	r3, [r3, #16]
 8002b12:	897a      	ldrh	r2, [r7, #10]
 8002b14:	89b9      	ldrh	r1, [r7, #12]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4603      	mov	r3, r0
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fcf2 	bl	8003504 <u8g2_DrawHVLine>
 8002b20:	e013      	b.n	8002b4a <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	7b5b      	ldrb	r3, [r3, #13]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10f      	bne.n	8002b4a <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	7bda      	ldrb	r2, [r3, #15]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8002b34:	7dbb      	ldrb	r3, [r7, #22]
 8002b36:	b298      	uxth	r0, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	7c1b      	ldrb	r3, [r3, #16]
 8002b3c:	897a      	ldrh	r2, [r7, #10]
 8002b3e:	89b9      	ldrh	r1, [r7, #12]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	4603      	mov	r3, r0
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fcdd 	bl	8003504 <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 8002b4a:	7dfa      	ldrb	r2, [r7, #23]
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d309      	bcc.n	8002b66 <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 8002b52:	7dfa      	ldrb	r2, [r7, #23]
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	757b      	strb	r3, [r7, #21]
		ly++;
 8002b5e:	7d3b      	ldrb	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8002b64:	e79d      	b.n	8002aa2 <u8g2_font_decode_len+0x2a>
			break;
 8002b66:	bf00      	nop
	}
	lx += cnt;
 8002b68:	7d7a      	ldrb	r2, [r7, #21]
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8002b70:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8002b78:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	725a      	strb	r2, [r3, #9]

}
 8002b80:	bf00      	nop
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3360      	adds	r3, #96	; 0x60
 8002b96:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002baa:	4619      	mov	r1, r3
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f7ff fe80 	bl	80028b2 <u8g2_font_decode_get_unsigned_bits>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	b25a      	sxtb	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f7ff fe75 	bl	80028b2 <u8g2_font_decode_get_unsigned_bits>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	b25a      	sxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	7b9b      	ldrb	r3, [r3, #14]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	73da      	strb	r2, [r3, #15]
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3360      	adds	r3, #96	; 0x60
 8002c06:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 8002c08:	6839      	ldr	r1, [r7, #0]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffbc 	bl	8002b88 <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002c16:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6978      	ldr	r0, [r7, #20]
 8002c22:	f7ff fe90 	bl	8002946 <u8g2_font_decode_get_signed_bits>
 8002c26:	4603      	mov	r3, r0
 8002c28:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002c30:	4619      	mov	r1, r3
 8002c32:	6978      	ldr	r0, [r7, #20]
 8002c34:	f7ff fe87 	bl	8002946 <u8g2_font_decode_get_signed_bits>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002c42:	4619      	mov	r1, r3
 8002c44:	6978      	ldr	r0, [r7, #20]
 8002c46:	f7ff fe7e 	bl	8002946 <u8g2_font_decode_get_signed_bits>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f340 80d7 	ble.w	8002e08 <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	8898      	ldrh	r0, [r3, #4]
 8002c5e:	7cfa      	ldrb	r2, [r7, #19]
 8002c60:	7c7b      	ldrb	r3, [r7, #17]
 8002c62:	4413      	add	r3, r2
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	425b      	negs	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	b25a      	sxtb	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	7c1b      	ldrb	r3, [r3, #16]
 8002c70:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002c74:	f7ff fec5 	bl	8002a02 <u8g2_add_vector_x>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	88d8      	ldrh	r0, [r3, #6]
 8002c84:	7cfa      	ldrb	r2, [r7, #19]
 8002c86:	7c7b      	ldrb	r3, [r7, #17]
 8002c88:	4413      	add	r3, r2
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	425b      	negs	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	b25a      	sxtb	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	7c1b      	ldrb	r3, [r3, #16]
 8002c96:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002c9a:	f7ff fe77 	bl	800298c <u8g2_add_vector_y>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	889b      	ldrh	r3, [r3, #4]
 8002caa:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	88db      	ldrh	r3, [r3, #6]
 8002cb0:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 8002cb2:	8bfb      	ldrh	r3, [r7, #30]
 8002cb4:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 8002cb6:	8b7b      	ldrh	r3, [r7, #26]
 8002cb8:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	7c1b      	ldrb	r3, [r3, #16]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d85a      	bhi.n	8002d78 <u8g2_font_decode_glyph+0x180>
 8002cc2:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <u8g2_font_decode_glyph+0xd0>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002cd9 	.word	0x08002cd9
 8002ccc:	08002cf5 	.word	0x08002cf5
 8002cd0:	08002d1d 	.word	0x08002d1d
 8002cd4:	08002d51 	.word	0x08002d51
			case 0:
				x1 += decode->glyph_width;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	8bbb      	ldrh	r3, [r7, #28]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 8002ce6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	8b3b      	ldrh	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	833b      	strh	r3, [r7, #24]
				break;
 8002cf2:	e041      	b.n	8002d78 <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 8002cf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	8bfa      	ldrh	r2, [r7, #30]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002d00:	8bfb      	ldrh	r3, [r7, #30]
 8002d02:	3301      	adds	r3, #1
 8002d04:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002d06:	8bbb      	ldrh	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	8b3b      	ldrh	r3, [r7, #24]
 8002d16:	4413      	add	r3, r2
 8002d18:	833b      	strh	r3, [r7, #24]
				break;
 8002d1a:	e02d      	b.n	8002d78 <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	8bfa      	ldrh	r2, [r7, #30]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002d2a:	8bfb      	ldrh	r3, [r7, #30]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002d30:	8bbb      	ldrh	r3, [r7, #28]
 8002d32:	3301      	adds	r3, #1
 8002d34:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 8002d36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	8b7a      	ldrh	r2, [r7, #26]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002d42:	8b7b      	ldrh	r3, [r7, #26]
 8002d44:	3301      	adds	r3, #1
 8002d46:	837b      	strh	r3, [r7, #26]
				y1++;
 8002d48:	8b3b      	ldrh	r3, [r7, #24]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	833b      	strh	r3, [r7, #24]
				break;
 8002d4e:	e013      	b.n	8002d78 <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 8002d50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	8bbb      	ldrh	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	8b7a      	ldrh	r2, [r7, #26]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002d6a:	8b7b      	ldrh	r3, [r7, #26]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	837b      	strh	r3, [r7, #26]
				y1++;
 8002d70:	8b3b      	ldrh	r3, [r7, #24]
 8002d72:	3301      	adds	r3, #1
 8002d74:	833b      	strh	r3, [r7, #24]
				break;
 8002d76:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8002d78:	8bb8      	ldrh	r0, [r7, #28]
 8002d7a:	8b7a      	ldrh	r2, [r7, #26]
 8002d7c:	8bf9      	ldrh	r1, [r7, #30]
 8002d7e:	8b3b      	ldrh	r3, [r7, #24]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	4603      	mov	r3, r0
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fcf6 	bl	8003776 <u8g2_IsIntersection>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <u8g2_font_decode_glyph+0x19e>
				return d;
 8002d90:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002d94:	e03a      	b.n	8002e0c <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002da8:	4619      	mov	r1, r3
 8002daa:	6978      	ldr	r0, [r7, #20]
 8002dac:	f7ff fd81 	bl	80028b2 <u8g2_font_decode_get_unsigned_bits>
 8002db0:	4603      	mov	r3, r0
 8002db2:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6978      	ldr	r0, [r7, #20]
 8002dbe:	f7ff fd78 	bl	80028b2 <u8g2_font_decode_get_unsigned_bits>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff fe53 	bl	8002a78 <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 8002dd2:	7bbb      	ldrb	r3, [r7, #14]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff fe4d 	bl	8002a78 <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 8002dde:	2101      	movs	r1, #1
 8002de0:	6978      	ldr	r0, [r7, #20]
 8002de2:	f7ff fd66 	bl	80028b2 <u8g2_font_decode_get_unsigned_bits>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1ec      	bne.n	8002dc6 <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002df2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	dd00      	ble.n	8002dfc <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002dfa:	e7d2      	b.n	8002da2 <u8g2_font_decode_glyph+0x1aa>
				break;
 8002dfc:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	7b9a      	ldrb	r2, [r3, #14]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 8002e08:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3317      	adds	r3, #23
 8002e2a:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	2bff      	cmp	r3, #255	; 0xff
 8002e30:	d82a      	bhi.n	8002e88 <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	2b60      	cmp	r3, #96	; 0x60
 8002e36:	d907      	bls.n	8002e48 <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002e3e:	461a      	mov	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	4413      	add	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	e009      	b.n	8002e5c <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 8002e48:	887b      	ldrh	r3, [r7, #2]
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d906      	bls.n	8002e5c <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002e54:	461a      	mov	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	4413      	add	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d04e      	beq.n	8002f04 <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	887a      	ldrh	r2, [r7, #2]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d102      	bne.n	8002e78 <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3302      	adds	r3, #2
 8002e76:	e049      	b.n	8002f0c <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	4413      	add	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002e86:	e7e9      	b.n	8002e5c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002e8e:	461a      	mov	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	4413      	add	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	6938      	ldr	r0, [r7, #16]
 8002e9e:	f7ff fc40 	bl	8002722 <u8g2_font_get_word>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002eac:	2102      	movs	r1, #2
 8002eae:	6938      	ldr	r0, [r7, #16]
 8002eb0:	f7ff fc37 	bl	8002722 <u8g2_font_get_word>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 8002ebe:	89fa      	ldrh	r2, [r7, #14]
 8002ec0:	887b      	ldrh	r3, [r7, #2]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d3e9      	bcc.n	8002e9a <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 8002ecc:	89fb      	ldrh	r3, [r7, #14]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002ee0:	89fb      	ldrh	r3, [r7, #14]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 8002ee6:	89fa      	ldrh	r2, [r7, #14]
 8002ee8:	887b      	ldrh	r3, [r7, #2]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d102      	bne.n	8002ef4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3303      	adds	r3, #3
 8002ef2:	e00b      	b.n	8002f0c <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	4413      	add	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 8002f02:	e7e0      	b.n	8002ec6 <u8g2_font_get_glyph_data+0xb2>
				break;
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <u8g2_font_get_glyph_data+0xf6>
				break;
 8002f08:	bf00      	nop
		}
	}
#endif

	return NULL;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	4608      	mov	r0, r1
 8002f1e:	4611      	mov	r1, r2
 8002f20:	461a      	mov	r2, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	817b      	strh	r3, [r7, #10]
 8002f26:	460b      	mov	r3, r1
 8002f28:	813b      	strh	r3, [r7, #8]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	897a      	ldrh	r2, [r7, #10]
 8002f36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	893a      	ldrh	r2, [r7, #8]
 8002f3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	4619      	mov	r1, r3
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f7ff ff64 	bl	8002e14 <u8g2_font_get_glyph_data>
 8002f4c:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002f54:	6939      	ldr	r1, [r7, #16]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff fe4e 	bl	8002bf8 <u8g2_font_decode_glyph>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 8002f60:	8afb      	ldrh	r3, [r7, #22]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 8002f76:	887b      	ldrh	r3, [r7, #2]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff4a 	bl	8002e14 <u8g2_font_get_glyph_data>
 8002f80:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <u8g2_GetGlyphWidth+0x22>
		return 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e027      	b.n	8002fdc <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 8002f8c:	68f9      	ldr	r1, [r7, #12]
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fdfa 	bl	8002b88 <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f7ff fccf 	bl	8002946 <u8g2_font_decode_get_signed_bits>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	461a      	mov	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f7ff fcc0 	bl	8002946 <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f7ff fcb6 	bl	8002946 <u8g2_font_decode_get_signed_bits>
 8002fda:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
	...

08003004 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	4608      	mov	r0, r1
 800300e:	4611      	mov	r1, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4603      	mov	r3, r0
 8003014:	817b      	strh	r3, [r7, #10]
 8003016:	460b      	mov	r3, r1
 8003018:	813b      	strh	r3, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003024:	2b03      	cmp	r3, #3
 8003026:	d833      	bhi.n	8003090 <u8g2_DrawGlyph+0x8c>
 8003028:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <u8g2_DrawGlyph+0x2c>)
 800302a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302e:	bf00      	nop
 8003030:	08003041 	.word	0x08003041
 8003034:	08003055 	.word	0x08003055
 8003038:	08003069 	.word	0x08003069
 800303c:	0800307d 	.word	0x0800307d
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	4798      	blx	r3
 8003048:	4603      	mov	r3, r0
 800304a:	461a      	mov	r2, r3
 800304c:	893b      	ldrh	r3, [r7, #8]
 800304e:	4413      	add	r3, r2
 8003050:	813b      	strh	r3, [r7, #8]
		break;
 8003052:	e01d      	b.n	8003090 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	4798      	blx	r3
 800305c:	4603      	mov	r3, r0
 800305e:	461a      	mov	r2, r3
 8003060:	897b      	ldrh	r3, [r7, #10]
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	817b      	strh	r3, [r7, #10]
		break;
 8003066:	e013      	b.n	8003090 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	4798      	blx	r3
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	893b      	ldrh	r3, [r7, #8]
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	813b      	strh	r3, [r7, #8]
		break;
 800307a:	e009      	b.n	8003090 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	4798      	blx	r3
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	897b      	ldrh	r3, [r7, #10]
 800308a:	4413      	add	r3, r2
 800308c:	817b      	strh	r3, [r7, #10]
		break;
 800308e:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	893a      	ldrh	r2, [r7, #8]
 8003094:	8979      	ldrh	r1, [r7, #10]
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f7ff ff3c 	bl	8002f14 <u8g2_font_draw_glyph>
 800309c:	4603      	mov	r3, r0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop

080030a8 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	4613      	mov	r3, r2
 80030b8:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fd86 	bl	8003bcc <u8x8_utf8_init>
	sum = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	7812      	ldrb	r2, [r2, #0]
 80030cc:	4611      	mov	r1, r2
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	4798      	blx	r3
 80030d2:	4603      	mov	r3, r0
 80030d4:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 80030d6:	8abb      	ldrh	r3, [r7, #20]
 80030d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030dc:	4293      	cmp	r3, r2
 80030de:	d038      	beq.n	8003152 <u8g2_draw_string+0xaa>
			break;
		str++;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3301      	adds	r3, #1
 80030e4:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 80030e6:	8abb      	ldrh	r3, [r7, #20]
 80030e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d0e9      	beq.n	80030c4 <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80030f0:	8abb      	ldrh	r3, [r7, #20]
 80030f2:	893a      	ldrh	r2, [r7, #8]
 80030f4:	8979      	ldrh	r1, [r7, #10]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7ff ff84 	bl	8003004 <u8g2_DrawGlyph>
 80030fc:	4603      	mov	r3, r0
 80030fe:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003106:	2b03      	cmp	r3, #3
 8003108:	d81e      	bhi.n	8003148 <u8g2_draw_string+0xa0>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <u8g2_draw_string+0x68>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	08003121 	.word	0x08003121
 8003114:	0800312b 	.word	0x0800312b
 8003118:	08003135 	.word	0x08003135
 800311c:	0800313f 	.word	0x0800313f
			case 0:
				x += delta;
 8003120:	897a      	ldrh	r2, [r7, #10]
 8003122:	8a7b      	ldrh	r3, [r7, #18]
 8003124:	4413      	add	r3, r2
 8003126:	817b      	strh	r3, [r7, #10]
				break;
 8003128:	e00e      	b.n	8003148 <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 800312a:	893a      	ldrh	r2, [r7, #8]
 800312c:	8a7b      	ldrh	r3, [r7, #18]
 800312e:	4413      	add	r3, r2
 8003130:	813b      	strh	r3, [r7, #8]
				break;
 8003132:	e009      	b.n	8003148 <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 8003134:	897a      	ldrh	r2, [r7, #10]
 8003136:	8a7b      	ldrh	r3, [r7, #18]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	817b      	strh	r3, [r7, #10]
				break;
 800313c:	e004      	b.n	8003148 <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 800313e:	893a      	ldrh	r2, [r7, #8]
 8003140:	8a7b      	ldrh	r3, [r7, #18]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	813b      	strh	r3, [r7, #8]
				break;
 8003146:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 8003148:	8afa      	ldrh	r2, [r7, #22]
 800314a:	8a7b      	ldrh	r3, [r7, #18]
 800314c:	4413      	add	r3, r2
 800314e:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003150:	e7b8      	b.n	80030c4 <u8g2_draw_string+0x1c>
			break;
 8003152:	bf00      	nop
		}
	}
	return sum;
 8003154:	8afb      	ldrh	r3, [r7, #22]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop

08003160 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	817b      	strh	r3, [r7, #10]
 800316e:	4613      	mov	r3, r2
 8003170:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a06      	ldr	r2, [pc, #24]	; (8003190 <u8g2_DrawUTF8+0x30>)
 8003176:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 8003178:	893a      	ldrh	r2, [r7, #8]
 800317a:	8979      	ldrh	r1, [r7, #10]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7ff ff92 	bl	80030a8 <u8g2_draw_string>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	08003c13 	.word	0x08003c13

08003194 <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d05d      	beq.n	8003260 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d04d      	beq.n	8003262 <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d11c      	bne.n	800320a <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80031dc:	429a      	cmp	r2, r3
 80031de:	da05      	bge.n	80031ec <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80031f8:	429a      	cmp	r2, r3
 80031fa:	dd32      	ble.n	8003262 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003208:	e02b      	b.n	8003262 <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8003210:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003218:	4619      	mov	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003220:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 8003222:	429a      	cmp	r2, r3
 8003224:	da0d      	bge.n	8003242 <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800322c:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003234:	b2db      	uxtb	r3, r3
 8003236:	4413      	add	r3, r2
 8003238:	b2db      	uxtb	r3, r3
 800323a:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800324e:	429a      	cmp	r2, r3
 8003250:	dd07      	ble.n	8003262 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800325e:	e000      	b.n	8003262 <u8g2_UpdateRefHeight+0xce>
		return;
 8003260:	bf00      	nop
	}
}
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
	return 0;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr
	...

08003280 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a03      	ldr	r2, [pc, #12]	; (8003298 <u8g2_SetFontPosBaseline+0x18>)
 800328c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	0800326b 	.word	0x0800326b

0800329c <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80032aa:	81fb      	strh	r3, [r7, #14]
	tmp++;
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	3301      	adds	r3, #1
 80032b0:	81fb      	strh	r3, [r7, #14]
	return tmp;
 80032b2:	89fb      	ldrh	r3, [r7, #14]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
	...

080032c0 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a03      	ldr	r2, [pc, #12]	; (80032d8 <u8g2_SetFontPosTop+0x18>)
 80032cc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	0800329d 	.word	0x0800329d

080032dc <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d00b      	beq.n	8003308 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3374      	adds	r3, #116	; 0x74
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fa2f 	bl	8002760 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff46 	bl	8003194 <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 800331a:	23c0      	movs	r3, #192	; 0xc0
 800331c:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fc50 	bl	8003bcc <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	7812      	ldrb	r2, [r2, #0]
 800333c:	4611      	mov	r1, r2
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
 8003342:	4603      	mov	r3, r0
 8003344:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 8003346:	893b      	ldrh	r3, [r7, #8]
 8003348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800334c:	4293      	cmp	r3, r2
 800334e:	d01c      	beq.n	800338a <u8g2_string_width+0x7a>
			break;
		str++;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 8003356:	893b      	ldrh	r3, [r7, #8]
 8003358:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800335c:	4293      	cmp	r3, r2
 800335e:	d0e9      	beq.n	8003334 <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 8003360:	893b      	ldrh	r3, [r7, #8]
 8003362:	4619      	mov	r1, r3
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff fe00 	bl	8002f6a <u8g2_GetGlyphWidth>
 800336a:	4603      	mov	r3, r0
 800336c:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 800336e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003372:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8003376:	d103      	bne.n	8003380 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800337e:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 8003380:	89fa      	ldrh	r2, [r7, #14]
 8003382:	89bb      	ldrh	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003388:	e7d4      	b.n	8003334 <u8g2_string_width+0x24>
			break;
 800338a:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01b      	beq.n	80033ce <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 8003396:	89fa      	ldrh	r2, [r7, #14]
 8003398:	89bb      	ldrh	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	89fb      	ldrh	r3, [r7, #14]
 80033a8:	4413      	add	r3, r2
 80033aa:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	89fb      	ldrh	r3, [r7, #14]
 80033b6:	4413      	add	r3, r2
 80033b8:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 80033ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	dd05      	ble.n	80033ce <u8g2_string_width+0xbe>
			w += initial_x_offset;
 80033c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	89fb      	ldrh	r3, [r7, #14]
 80033ca:	4413      	add	r3, r2
 80033cc:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 80033ce:	89fb      	ldrh	r3, [r7, #14]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a05      	ldr	r2, [pc, #20]	; (80033fc <u8g2_GetStrWidth+0x24>)
 80033e6:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ff90 	bl	8003310 <u8g2_string_width>
 80033f0:	4603      	mov	r3, r0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	08003be7 	.word	0x08003be7

08003400 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a05      	ldr	r2, [pc, #20]	; (8003424 <u8g2_GetUTF8Width+0x24>)
 800340e:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 8003410:	6839      	ldr	r1, [r7, #0]
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ff7c 	bl	8003310 <u8g2_string_width>
 8003418:	4603      	mov	r3, r0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	08003c13 	.word	0x08003c13

08003428 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	4611      	mov	r1, r2
 8003434:	461a      	mov	r2, r3
 8003436:	460b      	mov	r3, r1
 8003438:	80fb      	strh	r3, [r7, #6]
 800343a:	4613      	mov	r3, r2
 800343c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003444:	8afb      	ldrh	r3, [r7, #22]
 8003446:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	881a      	ldrh	r2, [r3, #0]
 800344c:	8abb      	ldrh	r3, [r7, #20]
 800344e:	4413      	add	r3, r2
 8003450:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003452:	8afa      	ldrh	r2, [r7, #22]
 8003454:	8abb      	ldrh	r3, [r7, #20]
 8003456:	429a      	cmp	r2, r3
 8003458:	d90b      	bls.n	8003472 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800345a:	8afa      	ldrh	r2, [r7, #22]
 800345c:	88bb      	ldrh	r3, [r7, #4]
 800345e:	429a      	cmp	r2, r3
 8003460:	d205      	bcs.n	800346e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003462:	88bb      	ldrh	r3, [r7, #4]
 8003464:	82bb      	strh	r3, [r7, #20]
      b--;
 8003466:	8abb      	ldrh	r3, [r7, #20]
 8003468:	3b01      	subs	r3, #1
 800346a:	82bb      	strh	r3, [r7, #20]
 800346c:	e001      	b.n	8003472 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003472:	8afa      	ldrh	r2, [r7, #22]
 8003474:	88bb      	ldrh	r3, [r7, #4]
 8003476:	429a      	cmp	r2, r3
 8003478:	d301      	bcc.n	800347e <u8g2_clip_intersection2+0x56>
    return 0;
 800347a:	2300      	movs	r3, #0
 800347c:	e01c      	b.n	80034b8 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800347e:	8aba      	ldrh	r2, [r7, #20]
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	429a      	cmp	r2, r3
 8003484:	d801      	bhi.n	800348a <u8g2_clip_intersection2+0x62>
    return 0;
 8003486:	2300      	movs	r3, #0
 8003488:	e016      	b.n	80034b8 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800348a:	8afa      	ldrh	r2, [r7, #22]
 800348c:	88fb      	ldrh	r3, [r7, #6]
 800348e:	429a      	cmp	r2, r3
 8003490:	d201      	bcs.n	8003496 <u8g2_clip_intersection2+0x6e>
    a = c;
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8003496:	8aba      	ldrh	r2, [r7, #20]
 8003498:	88bb      	ldrh	r3, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d901      	bls.n	80034a2 <u8g2_clip_intersection2+0x7a>
    b = d;
 800349e:	88bb      	ldrh	r3, [r7, #4]
 80034a0:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8afa      	ldrh	r2, [r7, #22]
 80034a6:	801a      	strh	r2, [r3, #0]
  b -= a;
 80034a8:	8aba      	ldrh	r2, [r7, #20]
 80034aa:	8afb      	ldrh	r3, [r7, #22]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	8aba      	ldrh	r2, [r7, #20]
 80034b4:	801a      	strh	r2, [r3, #0]
  return 1;
 80034b6:	2301      	movs	r3, #1
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr

080034c2 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80034c2:	b590      	push	{r4, r7, lr}
 80034c4:	b087      	sub	sp, #28
 80034c6:	af02      	add	r7, sp, #8
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	4608      	mov	r0, r1
 80034cc:	4611      	mov	r1, r2
 80034ce:	461a      	mov	r2, r3
 80034d0:	4603      	mov	r3, r0
 80034d2:	817b      	strh	r3, [r7, #10]
 80034d4:	460b      	mov	r3, r1
 80034d6:	813b      	strh	r3, [r7, #8]
 80034d8:	4613      	mov	r3, r2
 80034da:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e0:	893a      	ldrh	r2, [r7, #8]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80034ea:	88f8      	ldrh	r0, [r7, #6]
 80034ec:	893a      	ldrh	r2, [r7, #8]
 80034ee:	8979      	ldrh	r1, [r7, #10]
 80034f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	4603      	mov	r3, r0
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	47a0      	blx	r4
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	bd90      	pop	{r4, r7, pc}

08003504 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b087      	sub	sp, #28
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	4608      	mov	r0, r1
 800350e:	4611      	mov	r1, r2
 8003510:	461a      	mov	r2, r3
 8003512:	4603      	mov	r3, r0
 8003514:	817b      	strh	r3, [r7, #10]
 8003516:	460b      	mov	r3, r1
 8003518:	813b      	strh	r3, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d075      	beq.n	8003614 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d072      	beq.n	8003614 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800352e:	88fb      	ldrh	r3, [r7, #6]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d91a      	bls.n	800356a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003534:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d109      	bne.n	8003550 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800353c:	897a      	ldrh	r2, [r7, #10]
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	b29b      	uxth	r3, r3
 8003544:	817b      	strh	r3, [r7, #10]
	  x++;
 8003546:	897b      	ldrh	r3, [r7, #10]
 8003548:	3301      	adds	r3, #1
 800354a:	b29b      	uxth	r3, r3
 800354c:	817b      	strh	r3, [r7, #10]
 800354e:	e00c      	b.n	800356a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8003550:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003554:	2b03      	cmp	r3, #3
 8003556:	d108      	bne.n	800356a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8003558:	893a      	ldrh	r2, [r7, #8]
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	813b      	strh	r3, [r7, #8]
	  y++;
 8003562:	893b      	ldrh	r3, [r7, #8]
 8003564:	3301      	adds	r3, #1
 8003566:	b29b      	uxth	r3, r3
 8003568:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800356a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003576:	f897 3020 	ldrb.w	r3, [r7, #32]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d11a      	bne.n	80035b4 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003584:	893b      	ldrh	r3, [r7, #8]
 8003586:	429a      	cmp	r2, r3
 8003588:	d83b      	bhi.n	8003602 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003590:	893b      	ldrh	r3, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d937      	bls.n	8003606 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80035a2:	1db9      	adds	r1, r7, #6
 80035a4:	f107 000a 	add.w	r0, r7, #10
 80035a8:	f7ff ff3e 	bl	8003428 <u8g2_clip_intersection2>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11a      	bne.n	80035e8 <u8g2_DrawHVLine+0xe4>
	  return;
 80035b2:	e02f      	b.n	8003614 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d824      	bhi.n	800360a <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80035c6:	897b      	ldrh	r3, [r7, #10]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d920      	bls.n	800360e <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80035d8:	1db9      	adds	r1, r7, #6
 80035da:	f107 0008 	add.w	r0, r7, #8
 80035de:	f7ff ff23 	bl	8003428 <u8g2_clip_intersection2>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d014      	beq.n	8003612 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ec:	689c      	ldr	r4, [r3, #8]
 80035ee:	8979      	ldrh	r1, [r7, #10]
 80035f0:	893a      	ldrh	r2, [r7, #8]
 80035f2:	88f8      	ldrh	r0, [r7, #6]
 80035f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	4603      	mov	r3, r0
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	47a0      	blx	r4
 8003600:	e008      	b.n	8003614 <u8g2_DrawHVLine+0x110>
	  return;
 8003602:	bf00      	nop
 8003604:	e006      	b.n	8003614 <u8g2_DrawHVLine+0x110>
	  return;
 8003606:	bf00      	nop
 8003608:	e004      	b.n	8003614 <u8g2_DrawHVLine+0x110>
	  return;
 800360a:	bf00      	nop
 800360c:	e002      	b.n	8003614 <u8g2_DrawHVLine+0x110>
	  return;
 800360e:	bf00      	nop
 8003610:	e000      	b.n	8003614 <u8g2_DrawHVLine+0x110>
	  return;
 8003612:	bf00      	nop
    }
}
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bd90      	pop	{r4, r7, pc}

0800361a <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af02      	add	r7, sp, #8
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	4608      	mov	r0, r1
 8003624:	4611      	mov	r1, r2
 8003626:	461a      	mov	r2, r3
 8003628:	4603      	mov	r3, r0
 800362a:	817b      	strh	r3, [r7, #10]
 800362c:	460b      	mov	r3, r1
 800362e:	813b      	strh	r3, [r7, #8]
 8003630:	4613      	mov	r3, r2
 8003632:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	893a      	ldrh	r2, [r7, #8]
 8003638:	8979      	ldrh	r1, [r7, #10]
 800363a:	2000      	movs	r0, #0
 800363c:	9000      	str	r0, [sp, #0]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f7ff ff60 	bl	8003504 <u8g2_DrawHVLine>
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4603      	mov	r3, r0
 800365c:	817b      	strh	r3, [r7, #10]
 800365e:	460b      	mov	r3, r1
 8003660:	813b      	strh	r3, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	893a      	ldrh	r2, [r7, #8]
 800366a:	8979      	ldrh	r1, [r7, #10]
 800366c:	2001      	movs	r0, #1
 800366e:	9000      	str	r0, [sp, #0]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff ff47 	bl	8003504 <u8g2_DrawHVLine>
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af02      	add	r7, sp, #8
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	807b      	strh	r3, [r7, #2]
 800368a:	4613      	mov	r3, r2
 800368c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8003694:	883a      	ldrh	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d31a      	bcc.n	80036d0 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80036a0:	883a      	ldrh	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d216      	bcs.n	80036d4 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80036ac:	887a      	ldrh	r2, [r7, #2]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d312      	bcc.n	80036d8 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80036b8:	887a      	ldrh	r2, [r7, #2]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d20e      	bcs.n	80036dc <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80036be:	883a      	ldrh	r2, [r7, #0]
 80036c0:	8879      	ldrh	r1, [r7, #2]
 80036c2:	2300      	movs	r3, #0
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2301      	movs	r3, #1
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ff1b 	bl	8003504 <u8g2_DrawHVLine>
 80036ce:	e006      	b.n	80036de <u8g2_DrawPixel+0x60>
    return;
 80036d0:	bf00      	nop
 80036d2:	e004      	b.n	80036de <u8g2_DrawPixel+0x60>
    return;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <u8g2_DrawPixel+0x60>
    return;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <u8g2_DrawPixel+0x60>
    return;
 80036dc:	bf00      	nop
}
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d903      	bls.n	8003706 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003710:	b490      	push	{r4, r7}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	461a      	mov	r2, r3
 800371e:	4623      	mov	r3, r4
 8003720:	80fb      	strh	r3, [r7, #6]
 8003722:	4603      	mov	r3, r0
 8003724:	80bb      	strh	r3, [r7, #4]
 8003726:	460b      	mov	r3, r1
 8003728:	807b      	strh	r3, [r7, #2]
 800372a:	4613      	mov	r3, r2
 800372c:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	88bb      	ldrh	r3, [r7, #4]
 8003732:	429a      	cmp	r2, r3
 8003734:	d20d      	bcs.n	8003752 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8003736:	883a      	ldrh	r2, [r7, #0]
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	429a      	cmp	r2, r3
 800373c:	d901      	bls.n	8003742 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800373e:	2301      	movs	r3, #1
 8003740:	e014      	b.n	800376c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	883b      	ldrh	r3, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d901      	bls.n	800374e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800374a:	2301      	movs	r3, #1
 800374c:	e00e      	b.n	800376c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800374e:	2300      	movs	r3, #0
 8003750:	e00c      	b.n	800376c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003752:	883a      	ldrh	r2, [r7, #0]
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	429a      	cmp	r2, r3
 8003758:	d907      	bls.n	800376a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	883b      	ldrh	r3, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d901      	bls.n	8003766 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003762:	2301      	movs	r3, #1
 8003764:	e002      	b.n	800376c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800376a:	2300      	movs	r3, #0
    }
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bc90      	pop	{r4, r7}
 8003774:	4770      	bx	lr

08003776 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	4608      	mov	r0, r1
 8003780:	4611      	mov	r1, r2
 8003782:	461a      	mov	r2, r3
 8003784:	4603      	mov	r3, r0
 8003786:	817b      	strh	r3, [r7, #10]
 8003788:	460b      	mov	r3, r1
 800378a:	813b      	strh	r3, [r7, #8]
 800378c:	4613      	mov	r3, r2
 800378e:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800379c:	8b3b      	ldrh	r3, [r7, #24]
 800379e:	893a      	ldrh	r2, [r7, #8]
 80037a0:	f7ff ffb6 	bl	8003710 <u8g2_is_intersection_decision_tree>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <u8g2_IsIntersection+0x38>
    return 0; 
 80037aa:	2300      	movs	r3, #0
 80037ac:	e00a      	b.n	80037c4 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	897a      	ldrh	r2, [r7, #10]
 80037be:	f7ff ffa7 	bl	8003710 <u8g2_is_intersection_decision_tree>
 80037c2:	4603      	mov	r3, r0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	817b      	strh	r3, [r7, #10]
 80037de:	460b      	mov	r3, r1
 80037e0:	813b      	strh	r3, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80037e6:	893b      	ldrh	r3, [r7, #8]
 80037e8:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80037ea:	7efb      	ldrb	r3, [r7, #27]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80037f2:	2301      	movs	r3, #1
 80037f4:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80037f6:	7e3a      	ldrb	r2, [r7, #24]
 80037f8:	7efb      	ldrb	r3, [r7, #27]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800380e:	2b01      	cmp	r3, #1
 8003810:	d801      	bhi.n	8003816 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8003812:	7e3b      	ldrb	r3, [r7, #24]
 8003814:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800381c:	2b01      	cmp	r3, #1
 800381e:	d001      	beq.n	8003824 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003820:	7e3b      	ldrb	r3, [r7, #24]
 8003822:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003824:	893b      	ldrh	r3, [r7, #8]
 8003826:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8003828:	8afb      	ldrh	r3, [r7, #22]
 800382a:	f023 0307 	bic.w	r3, r3, #7
 800382e:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	7c1b      	ldrb	r3, [r3, #16]
 8003836:	b29b      	uxth	r3, r3
 8003838:	8afa      	ldrh	r2, [r7, #22]
 800383a:	fb02 f303 	mul.w	r3, r2, r3
 800383e:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003844:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8003846:	8afb      	ldrh	r3, [r7, #22]
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800384e:	897b      	ldrh	r3, [r7, #10]
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	4413      	add	r3, r2
 8003854:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8003856:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d117      	bne.n	800388e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	7ebb      	ldrb	r3, [r7, #26]
 8003864:	4313      	orrs	r3, r2
 8003866:	b2da      	uxtb	r2, r3
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	781a      	ldrb	r2, [r3, #0]
 8003870:	7e7b      	ldrb	r3, [r7, #25]
 8003872:	4053      	eors	r3, r2
 8003874:	b2da      	uxtb	r2, r3
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	701a      	strb	r2, [r3, #0]
	ptr++;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
	len--;
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	3b01      	subs	r3, #1
 8003884:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e8      	bne.n	800385e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800388c:	e038      	b.n	8003900 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	7ebb      	ldrb	r3, [r7, #26]
 8003894:	4313      	orrs	r3, r2
 8003896:	b2da      	uxtb	r2, r3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	781a      	ldrb	r2, [r3, #0]
 80038a0:	7e7b      	ldrb	r3, [r7, #25]
 80038a2:	4053      	eors	r3, r2
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80038aa:	7efb      	ldrb	r3, [r7, #27]
 80038ac:	3301      	adds	r3, #1
 80038ae:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80038b0:	7efb      	ldrb	r3, [r7, #27]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	76fb      	strb	r3, [r7, #27]
      len--;
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80038be:	7efb      	ldrb	r3, [r7, #27]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d114      	bne.n	80038ee <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80038c8:	461a      	mov	r2, r3
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d801      	bhi.n	80038de <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80038da:	2301      	movs	r3, #1
 80038dc:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d008      	beq.n	80038fa <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80038e8:	2301      	movs	r3, #1
 80038ea:	767b      	strb	r3, [r7, #25]
 80038ec:	e005      	b.n	80038fa <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80038ee:	7ebb      	ldrb	r3, [r7, #26]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80038f4:	7e7b      	ldrb	r3, [r7, #25]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1c6      	bne.n	800388e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003900:	bf00      	nop
 8003902:	3724      	adds	r7, #36	; 0x24
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003928:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003932:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	4613      	mov	r3, r2
 8003956:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	79fa      	ldrb	r2, [r7, #7]
 800396e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff ffad 	bl	800390a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f7ff fc65 	bl	8003280 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b085      	sub	sp, #20
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039da:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80039dc:	89fb      	ldrh	r3, [r7, #14]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	89fa      	ldrh	r2, [r7, #14]
 80039e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	7c1b      	ldrb	r3, [r3, #16]
 80039ec:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80039ee:	89fb      	ldrh	r3, [r7, #14]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	89fa      	ldrh	r2, [r7, #14]
 80039f8:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a00:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003a02:	89fb      	ldrh	r3, [r7, #14]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	89fa      	ldrh	r2, [r7, #14]
 8003a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a14:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8003a16:	89fb      	ldrh	r3, [r7, #14]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003a1e:	4413      	add	r3, r2
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	7c52      	ldrb	r2, [r2, #17]
 8003a24:	4293      	cmp	r3, r2
 8003a26:	dd08      	ble.n	8003a3a <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	7c5b      	ldrb	r3, [r3, #17]
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003a3a:	89fb      	ldrh	r3, [r7, #14]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003a5c:	89fb      	ldrh	r3, [r7, #14]
 8003a5e:	4413      	add	r3, r2
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	8a9a      	ldrh	r2, [r3, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	8ada      	ldrh	r2, [r3, #22]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af02      	add	r7, sp, #8
 8003a8c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fe63 	bl	8003776 <u8g2_IsIntersection>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d104      	bne.n	8003ac0 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003abe:	e03b      	b.n	8003b38 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d205      	bcs.n	8003ae4 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d905      	bls.n	8003b00 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d205      	bcs.n	8003b1c <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d905      	bls.n	8003b38 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff3c 	bl	80039c6 <u8g2_update_dimension_common>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b082      	sub	sp, #8
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ff7b 	bl	8003a86 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	817b      	strh	r3, [r7, #10]
 8003baa:	460b      	mov	r3, r1
 8003bac:	813b      	strh	r3, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003bb2:	88f8      	ldrh	r0, [r7, #6]
 8003bb4:	893a      	ldrh	r2, [r7, #8]
 8003bb6:	8979      	ldrh	r1, [r7, #10]
 8003bb8:	7e3b      	ldrb	r3, [r7, #24]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff fc7f 	bl	80034c2 <u8g2_draw_hv_line_2dir>
}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <u8x8_ascii_next+0x18>
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	2b0a      	cmp	r3, #10
 8003bfc:	d102      	bne.n	8003c04 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c02:	e001      	b.n	8003c08 <u8x8_ascii_next+0x22>
  return b;
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	b29b      	uxth	r3, r3
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <u8x8_utf8_next+0x18>
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	2b0a      	cmp	r3, #10
 8003c28:	d102      	bne.n	8003c30 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8003c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c2e:	e06e      	b.n	8003d0e <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d145      	bne.n	8003cc6 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	2bfb      	cmp	r3, #251	; 0xfb
 8003c3e:	d908      	bls.n	8003c52 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2205      	movs	r2, #5
 8003c44:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	70fb      	strb	r3, [r7, #3]
 8003c50:	e032      	b.n	8003cb8 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	2bf7      	cmp	r3, #247	; 0xf7
 8003c56:	d908      	bls.n	8003c6a <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	70fb      	strb	r3, [r7, #3]
 8003c68:	e026      	b.n	8003cb8 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	2bef      	cmp	r3, #239	; 0xef
 8003c6e:	d908      	bls.n	8003c82 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2203      	movs	r2, #3
 8003c74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	70fb      	strb	r3, [r7, #3]
 8003c80:	e01a      	b.n	8003cb8 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	2bdf      	cmp	r3, #223	; 0xdf
 8003c86:	d908      	bls.n	8003c9a <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	70fb      	strb	r3, [r7, #3]
 8003c98:	e00e      	b.n	8003cb8 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	2bbf      	cmp	r3, #191	; 0xbf
 8003c9e:	d908      	bls.n	8003cb2 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	70fb      	strb	r3, [r7, #3]
 8003cb0:	e002      	b.n	8003cb8 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	e02a      	b.n	8003d0e <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003cc0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003cc4:	e023      	b.n	8003d0e <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	8c1b      	ldrh	r3, [r3, #32]
 8003cda:	019b      	lsls	r3, r3, #6
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce8:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8c1a      	ldrh	r2, [r3, #32]
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8003d04:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003d08:	e001      	b.n	8003d0e <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8c1b      	ldrh	r3, [r3, #32]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691c      	ldr	r4, [r3, #16]
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	2120      	movs	r1, #32
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	47a0      	blx	r4
 8003d32:	4603      	mov	r3, r0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd90      	pop	{r4, r7, pc}

08003d3c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	460b      	mov	r3, r1
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	691c      	ldr	r4, [r3, #16]
 8003d4e:	7afa      	ldrb	r2, [r7, #11]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2117      	movs	r1, #23
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	47a0      	blx	r4
 8003d58:	4603      	mov	r3, r0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd90      	pop	{r4, r7, pc}

08003d62 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003d6e:	1cfb      	adds	r3, r7, #3
 8003d70:	461a      	mov	r2, r3
 8003d72:	2101      	movs	r1, #1
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ffe1 	bl	8003d3c <u8x8_byte_SendBytes>
 8003d7a:	4603      	mov	r3, r0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68dc      	ldr	r4, [r3, #12]
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	2300      	movs	r3, #0
 8003d98:	2115      	movs	r1, #21
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	47a0      	blx	r4
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd90      	pop	{r4, r7, pc}

08003da8 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68dc      	ldr	r4, [r3, #12]
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2116      	movs	r1, #22
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	47a0      	blx	r4
 8003dc2:	4603      	mov	r3, r0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd90      	pop	{r4, r7, pc}

08003dcc <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003dcc:	b590      	push	{r4, r7, lr}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	68dc      	ldr	r4, [r3, #12]
 8003dde:	7afa      	ldrb	r2, [r7, #11]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2117      	movs	r1, #23
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	47a0      	blx	r4
 8003de8:	4603      	mov	r3, r0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd90      	pop	{r4, r7, pc}

08003df2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003df2:	b590      	push	{r4, r7, lr}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68dc      	ldr	r4, [r3, #12]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	2200      	movs	r2, #0
 8003e02:	2118      	movs	r1, #24
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	47a0      	blx	r4
 8003e08:	4603      	mov	r3, r0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd90      	pop	{r4, r7, pc}

08003e12 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003e12:	b590      	push	{r4, r7, lr}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68dc      	ldr	r4, [r3, #12]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2200      	movs	r2, #0
 8003e22:	2119      	movs	r1, #25
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	47a0      	blx	r4
 8003e28:	4603      	mov	r3, r0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd90      	pop	{r4, r7, pc}

08003e32 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003e32:	b590      	push	{r4, r7, lr}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	73fb      	strb	r3, [r7, #15]
    data++;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2bfe      	cmp	r3, #254	; 0xfe
 8003e4c:	d031      	beq.n	8003eb2 <u8x8_cad_SendSequence+0x80>
 8003e4e:	2bfe      	cmp	r3, #254	; 0xfe
 8003e50:	dc3d      	bgt.n	8003ece <u8x8_cad_SendSequence+0x9c>
 8003e52:	2b19      	cmp	r3, #25
 8003e54:	dc3b      	bgt.n	8003ece <u8x8_cad_SendSequence+0x9c>
 8003e56:	2b18      	cmp	r3, #24
 8003e58:	da23      	bge.n	8003ea2 <u8x8_cad_SendSequence+0x70>
 8003e5a:	2b16      	cmp	r3, #22
 8003e5c:	dc02      	bgt.n	8003e64 <u8x8_cad_SendSequence+0x32>
 8003e5e:	2b15      	cmp	r3, #21
 8003e60:	da03      	bge.n	8003e6a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003e62:	e034      	b.n	8003ece <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003e64:	2b17      	cmp	r3, #23
 8003e66:	d00e      	beq.n	8003e86 <u8x8_cad_SendSequence+0x54>
	return;
 8003e68:	e031      	b.n	8003ece <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68dc      	ldr	r4, [r3, #12]
 8003e74:	7bba      	ldrb	r2, [r7, #14]
 8003e76:	7bf9      	ldrb	r1, [r7, #15]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	47a0      	blx	r4
	  data++;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	3301      	adds	r3, #1
 8003e82:	603b      	str	r3, [r7, #0]
	  break;
 8003e84:	e022      	b.n	8003ecc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003e8c:	f107 030e 	add.w	r3, r7, #14
 8003e90:	461a      	mov	r2, r3
 8003e92:	2101      	movs	r1, #1
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff ff99 	bl	8003dcc <u8x8_cad_SendData>
	  data++;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	603b      	str	r3, [r7, #0]
	  break;
 8003ea0:	e014      	b.n	8003ecc <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68dc      	ldr	r4, [r3, #12]
 8003ea6:	7bf9      	ldrb	r1, [r7, #15]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	2200      	movs	r2, #0
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	47a0      	blx	r4
	  break;
 8003eb0:	e00c      	b.n	8003ecc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003eb8:	7bbb      	ldrb	r3, [r7, #14]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2129      	movs	r1, #41	; 0x29
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9ed 	bl	800429e <u8x8_gpio_call>
	  data++;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	603b      	str	r3, [r7, #0]
	  break;
 8003eca:	bf00      	nop
    cmd = *data;
 8003ecc:	e7b6      	b.n	8003e3c <u8x8_cad_SendSequence+0xa>
	return;
 8003ece:	bf00      	nop
    }
  }
}
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd90      	pop	{r4, r7, pc}
	...

08003ed8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	72fb      	strb	r3, [r7, #11]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003eea:	7afb      	ldrb	r3, [r7, #11]
 8003eec:	3b14      	subs	r3, #20
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d82f      	bhi.n	8003f52 <u8x8_cad_001+0x7a>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <u8x8_cad_001+0x20>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f41 	.word	0x08003f41
 8003efc:	08003f11 	.word	0x08003f11
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f39 	.word	0x08003f39
 8003f08:	08003f41 	.word	0x08003f41
 8003f0c:	08003f41 	.word	0x08003f41
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003f10:	2100      	movs	r1, #0
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7ff ff00 	bl	8003d18 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003f18:	7abb      	ldrb	r3, [r7, #10]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff ff20 	bl	8003d62 <u8x8_byte_SendByte>
      break;
 8003f22:	e018      	b.n	8003f56 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003f24:	2100      	movs	r1, #0
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f7ff fef6 	bl	8003d18 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003f2c:	7abb      	ldrb	r3, [r7, #10]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff ff16 	bl	8003d62 <u8x8_byte_SendByte>
      break;
 8003f36:	e00e      	b.n	8003f56 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003f38:	2101      	movs	r1, #1
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff feec 	bl	8003d18 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	691c      	ldr	r4, [r3, #16]
 8003f44:	7aba      	ldrb	r2, [r7, #10]
 8003f46:	7af9      	ldrb	r1, [r7, #11]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	47a0      	blx	r4
 8003f4e:	4603      	mov	r3, r0
 8003f50:	e002      	b.n	8003f58 <u8x8_cad_001+0x80>
    default:
      return 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	e000      	b.n	8003f58 <u8x8_cad_001+0x80>
  }
  return 1;
 8003f56:	2301      	movs	r3, #1
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd90      	pop	{r4, r7, pc}

08003f60 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	72fb      	strb	r3, [r7, #11]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8003f72:	7afb      	ldrb	r3, [r7, #11]
 8003f74:	3b0b      	subs	r3, #11
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	f200 808e 	bhi.w	8004098 <u8x8_d_uc1604_common+0x138>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <u8x8_d_uc1604_common+0x24>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	0800402d 	.word	0x0800402d
 8003f88:	08004099 	.word	0x08004099
 8003f8c:	08004047 	.word	0x08004047
 8003f90:	08004079 	.word	0x08004079
 8003f94:	08003f99 	.word	0x08003f99
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7ff ff2a 	bl	8003df2 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	795b      	ldrb	r3, [r3, #5]
 8003fa2:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff fee5 	bl	8003d84 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f043 0310 	orr.w	r3, r3, #16
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff fedb 	bl	8003d84 <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	799b      	ldrb	r3, [r3, #6]
 8003fd2:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003fda:	7dbb      	ldrb	r3, [r7, #22]
 8003fdc:	4413      	add	r3, r2
 8003fde:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8003fe0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003fee:	b25b      	sxtb	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff fec5 	bl	8003d84 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	791b      	ldrb	r3, [r3, #4]
 8003ffe:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8004000:	7d7b      	ldrb	r3, [r7, #21]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800400c:	7d7b      	ldrb	r3, [r7, #21]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4619      	mov	r1, r3
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff feda 	bl	8003dcc <u8x8_cad_SendData>
	arg_int--;
 8004018:	7abb      	ldrb	r3, [r7, #10]
 800401a:	3b01      	subs	r3, #1
 800401c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800401e:	7abb      	ldrb	r3, [r7, #10]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f3      	bne.n	800400c <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fef4 	bl	8003e12 <u8x8_cad_EndTransfer>
      break;
 800402a:	e037      	b.n	800409c <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800402c:	7abb      	ldrb	r3, [r7, #10]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d104      	bne.n	800403c <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 8004032:	491d      	ldr	r1, [pc, #116]	; (80040a8 <u8x8_d_uc1604_common+0x148>)
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f7ff fefc 	bl	8003e32 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 800403a:	e02f      	b.n	800409c <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 800403c:	491b      	ldr	r1, [pc, #108]	; (80040ac <u8x8_d_uc1604_common+0x14c>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f7ff fef7 	bl	8003e32 <u8x8_cad_SendSequence>
      break;
 8004044:	e02a      	b.n	800409c <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8004046:	7abb      	ldrb	r3, [r7, #10]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 800404c:	4918      	ldr	r1, [pc, #96]	; (80040b0 <u8x8_d_uc1604_common+0x150>)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff feef 	bl	8003e32 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	7c9a      	ldrb	r2, [r3, #18]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8004060:	e01c      	b.n	800409c <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 8004062:	4914      	ldr	r1, [pc, #80]	; (80040b4 <u8x8_d_uc1604_common+0x154>)
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7ff fee4 	bl	8003e32 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	7cda      	ldrb	r2, [r3, #19]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8004076:	e011      	b.n	800409c <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff feba 	bl	8003df2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800407e:	2181      	movs	r1, #129	; 0x81
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff fe7f 	bl	8003d84 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 8004086:	7abb      	ldrb	r3, [r7, #10]
 8004088:	4619      	mov	r1, r3
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f7ff fe8c 	bl	8003da8 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff febe 	bl	8003e12 <u8x8_cad_EndTransfer>
      break;
 8004096:	e001      	b.n	800409c <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 800409c:	2301      	movs	r3, #1
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	0800e7dc 	.word	0x0800e7dc
 80040ac:	0800e7ec 	.word	0x0800e7ec
 80040b0:	0800e7f4 	.word	0x0800e7f4
 80040b4:	0800e7fc 	.word	0x0800e7fc

080040b8 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	72fb      	strb	r3, [r7, #11]
 80040c6:	4613      	mov	r3, r2
 80040c8:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80040ca:	7aba      	ldrb	r2, [r7, #10]
 80040cc:	7af9      	ldrb	r1, [r7, #11]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f7ff ff45 	bl	8003f60 <u8x8_d_uc1604_common>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d114      	bne.n	8004106 <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 80040dc:	7afb      	ldrb	r3, [r7, #11]
 80040de:	2b09      	cmp	r3, #9
 80040e0:	d002      	beq.n	80040e8 <u8x8_d_uc1604_jlx19264+0x30>
 80040e2:	2b0a      	cmp	r3, #10
 80040e4:	d005      	beq.n	80040f2 <u8x8_d_uc1604_jlx19264+0x3a>
 80040e6:	e00c      	b.n	8004102 <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 80040e8:	490a      	ldr	r1, [pc, #40]	; (8004114 <u8x8_d_uc1604_jlx19264+0x5c>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f816 	bl	800411c <u8x8_d_helper_display_setup_memory>
	break;
 80040f0:	e00a      	b.n	8004108 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f825 	bl	8004142 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 80040f8:	4907      	ldr	r1, [pc, #28]	; (8004118 <u8x8_d_uc1604_jlx19264+0x60>)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7ff fe99 	bl	8003e32 <u8x8_cad_SendSequence>
	break;
 8004100:	e002      	b.n	8004108 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 8004102:	2300      	movs	r3, #0
 8004104:	e001      	b.n	800410a <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 8004106:	bf00      	nop
  return 1;
 8004108:	2301      	movs	r3, #1
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	0800e804 	.word	0x0800e804
 8004118:	0800e81c 	.word	0x0800e81c

0800411c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	7c9a      	ldrb	r2, [r3, #18]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004142:	b590      	push	{r4, r7, lr}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695c      	ldr	r4, [r3, #20]
 800414e:	2300      	movs	r3, #0
 8004150:	2200      	movs	r2, #0
 8004152:	2128      	movs	r1, #40	; 0x28
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68dc      	ldr	r4, [r3, #12]
 800415c:	2300      	movs	r3, #0
 800415e:	2200      	movs	r2, #0
 8004160:	2114      	movs	r1, #20
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004166:	2201      	movs	r2, #1
 8004168:	214b      	movs	r1, #75	; 0x4b
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f897 	bl	800429e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	791b      	ldrb	r3, [r3, #4]
 8004176:	461a      	mov	r2, r3
 8004178:	2129      	movs	r1, #41	; 0x29
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f88f 	bl	800429e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004180:	2200      	movs	r2, #0
 8004182:	214b      	movs	r1, #75	; 0x4b
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f88a 	bl	800429e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	791b      	ldrb	r3, [r3, #4]
 8004190:	461a      	mov	r2, r3
 8004192:	2129      	movs	r1, #41	; 0x29
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f882 	bl	800429e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800419a:	2201      	movs	r2, #1
 800419c:	214b      	movs	r1, #75	; 0x4b
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f87d 	bl	800429e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	795b      	ldrb	r3, [r3, #5]
 80041aa:	461a      	mov	r2, r3
 80041ac:	2129      	movs	r1, #41	; 0x29
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f875 	bl	800429e <u8x8_gpio_call>
}    
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd90      	pop	{r4, r7, pc}

080041bc <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	70fb      	strb	r3, [r7, #3]
 80041ce:	460b      	mov	r3, r1
 80041d0:	70bb      	strb	r3, [r7, #2]
 80041d2:	4613      	mov	r3, r2
 80041d4:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80041da:	78bb      	ldrb	r3, [r7, #2]
 80041dc:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80041de:	787b      	ldrb	r3, [r7, #1]
 80041e0:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689c      	ldr	r4, [r3, #8]
 80041ea:	f107 0308 	add.w	r3, r7, #8
 80041ee:	2201      	movs	r2, #1
 80041f0:	210f      	movs	r1, #15
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	47a0      	blx	r4
 80041f6:	4603      	mov	r3, r0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd90      	pop	{r4, r7, pc}

08004200 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004200:	b590      	push	{r4, r7, lr}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689c      	ldr	r4, [r3, #8]
 800420c:	2300      	movs	r3, #0
 800420e:	2200      	movs	r2, #0
 8004210:	2109      	movs	r1, #9
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	47a0      	blx	r4
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bd90      	pop	{r4, r7, pc}

0800421e <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800421e:	b590      	push	{r4, r7, lr}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689c      	ldr	r4, [r3, #8]
 800422a:	2300      	movs	r3, #0
 800422c:	2200      	movs	r2, #0
 800422e:	210a      	movs	r1, #10
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	47a0      	blx	r4
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bd90      	pop	{r4, r7, pc}

0800423c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800423c:	b590      	push	{r4, r7, lr}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689c      	ldr	r4, [r3, #8]
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	2300      	movs	r3, #0
 8004250:	210b      	movs	r1, #11
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	47a0      	blx	r4
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	bd90      	pop	{r4, r7, pc}

0800425e <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 800425e:	b590      	push	{r4, r7, lr}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689c      	ldr	r4, [r3, #8]
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	2300      	movs	r3, #0
 8004272:	210e      	movs	r1, #14
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	47a0      	blx	r4
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	bd90      	pop	{r4, r7, pc}

08004280 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689c      	ldr	r4, [r3, #8]
 800428c:	2300      	movs	r3, #0
 800428e:	2200      	movs	r2, #0
 8004290:	2110      	movs	r1, #16
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	47a0      	blx	r4
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bd90      	pop	{r4, r7, pc}

0800429e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800429e:	b590      	push	{r4, r7, lr}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	460b      	mov	r3, r1
 80042a8:	70fb      	strb	r3, [r7, #3]
 80042aa:	4613      	mov	r3, r2
 80042ac:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695c      	ldr	r4, [r3, #20]
 80042b2:	78ba      	ldrb	r2, [r7, #2]
 80042b4:	78f9      	ldrb	r1, [r7, #3]
 80042b6:	2300      	movs	r3, #0
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	47a0      	blx	r4
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd90      	pop	{r4, r7, pc}

080042c4 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	607b      	str	r3, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	72fb      	strb	r3, [r7, #11]
 80042d2:	4613      	mov	r3, r2
 80042d4:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
	...

080042e4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a11      	ldr	r2, [pc, #68]	; (800433c <u8x8_SetupDefaults+0x58>)
 80042f6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a10      	ldr	r2, [pc, #64]	; (800433c <u8x8_SetupDefaults+0x58>)
 80042fc:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a0e      	ldr	r2, [pc, #56]	; (800433c <u8x8_SetupDefaults+0x58>)
 8004302:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a0d      	ldr	r2, [pc, #52]	; (800433c <u8x8_SetupDefaults+0x58>)
 8004308:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	22ff      	movs	r2, #255	; 0xff
 8004324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	22ff      	movs	r2, #255	; 0xff
 800432c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	080042c5 	.word	0x080042c5

08004340 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f7ff ffc8 	bl	80042e4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f7ff ff47 	bl	8004200 <u8x8_SetupMemory>
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800437c:	480c      	ldr	r0, [pc, #48]	; (80043b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800437e:	490d      	ldr	r1, [pc, #52]	; (80043b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004380:	4a0d      	ldr	r2, [pc, #52]	; (80043b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004384:	e002      	b.n	800438c <LoopCopyDataInit>

08004386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800438a:	3304      	adds	r3, #4

0800438c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800438c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800438e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004390:	d3f9      	bcc.n	8004386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004392:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004394:	4c0a      	ldr	r4, [pc, #40]	; (80043c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004398:	e001      	b.n	800439e <LoopFillZerobss>

0800439a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800439a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800439c:	3204      	adds	r2, #4

0800439e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800439e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043a0:	d3fb      	bcc.n	800439a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80043a2:	f7fd fde5 	bl	8001f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043a6:	f008 fdcb 	bl	800cf40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043aa:	f7fd fa0b 	bl	80017c4 <main>
  bx lr
 80043ae:	4770      	bx	lr
  ldr r0, =_sdata
 80043b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043b4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80043b8:	0800e87c 	.word	0x0800e87c
  ldr r2, =_sbss
 80043bc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80043c0:	20001cf4 	.word	0x20001cf4

080043c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043c4:	e7fe      	b.n	80043c4 <ADC1_2_IRQHandler>
	...

080043c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043cc:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <HAL_Init+0x28>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <HAL_Init+0x28>)
 80043d2:	f043 0310 	orr.w	r3, r3, #16
 80043d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043d8:	2003      	movs	r0, #3
 80043da:	f000 f981 	bl	80046e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043de:	200f      	movs	r0, #15
 80043e0:	f000 f808 	bl	80043f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043e4:	f7fd fc38 	bl	8001c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40022000 	.word	0x40022000

080043f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_InitTick+0x54>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_InitTick+0x58>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	4619      	mov	r1, r3
 8004406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800440a:	fbb3 f3f1 	udiv	r3, r3, r1
 800440e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004412:	4618      	mov	r0, r3
 8004414:	f000 f9ab 	bl	800476e <HAL_SYSTICK_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e00e      	b.n	8004440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b0f      	cmp	r3, #15
 8004426:	d80a      	bhi.n	800443e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004428:	2200      	movs	r2, #0
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004430:	f000 f961 	bl	80046f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004434:	4a06      	ldr	r2, [pc, #24]	; (8004450 <HAL_InitTick+0x5c>)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e000      	b.n	8004440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
}
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20000008 	.word	0x20000008
 800444c:	20000010 	.word	0x20000010
 8004450:	2000000c 	.word	0x2000000c

08004454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_IncTick+0x1c>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_IncTick+0x20>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4413      	add	r3, r2
 8004464:	4a03      	ldr	r2, [pc, #12]	; (8004474 <HAL_IncTick+0x20>)
 8004466:	6013      	str	r3, [r2, #0]
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr
 8004470:	20000010 	.word	0x20000010
 8004474:	20000b3c 	.word	0x20000b3c

08004478 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return uwTick;
 800447c:	4b02      	ldr	r3, [pc, #8]	; (8004488 <HAL_GetTick+0x10>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr
 8004488:	20000b3c 	.word	0x20000b3c

0800448c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004494:	f7ff fff0 	bl	8004478 <HAL_GetTick>
 8004498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a4:	d005      	beq.n	80044b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <HAL_Delay+0x44>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	461a      	mov	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044b2:	bf00      	nop
 80044b4:	f7ff ffe0 	bl	8004478 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d8f7      	bhi.n	80044b4 <HAL_Delay+0x28>
  {
  }
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000010 	.word	0x20000010

080044d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <__NVIC_SetPriorityGrouping+0x44>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f0:	4013      	ands	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004506:	4a04      	ldr	r2, [pc, #16]	; (8004518 <__NVIC_SetPriorityGrouping+0x44>)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	60d3      	str	r3, [r2, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <__NVIC_GetPriorityGrouping+0x18>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	0a1b      	lsrs	r3, r3, #8
 8004526:	f003 0307 	and.w	r3, r3, #7
}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	2b00      	cmp	r3, #0
 8004548:	db0b      	blt.n	8004562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	f003 021f 	and.w	r2, r3, #31
 8004550:	4906      	ldr	r1, [pc, #24]	; (800456c <__NVIC_EnableIRQ+0x34>)
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2001      	movs	r0, #1
 800455a:	fa00 f202 	lsl.w	r2, r0, r2
 800455e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	e000e100 	.word	0xe000e100

08004570 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800457a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	db12      	blt.n	80045a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	f003 021f 	and.w	r2, r3, #31
 8004588:	490a      	ldr	r1, [pc, #40]	; (80045b4 <__NVIC_DisableIRQ+0x44>)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2001      	movs	r0, #1
 8004592:	fa00 f202 	lsl.w	r2, r0, r2
 8004596:	3320      	adds	r3, #32
 8004598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800459c:	f3bf 8f4f 	dsb	sy
}
 80045a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045a2:	f3bf 8f6f 	isb	sy
}
 80045a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	e000e100 	.word	0xe000e100

080045b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db0a      	blt.n	80045e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	490c      	ldr	r1, [pc, #48]	; (8004604 <__NVIC_SetPriority+0x4c>)
 80045d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d6:	0112      	lsls	r2, r2, #4
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	440b      	add	r3, r1
 80045dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e0:	e00a      	b.n	80045f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4908      	ldr	r1, [pc, #32]	; (8004608 <__NVIC_SetPriority+0x50>)
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	f003 030f 	and.w	r3, r3, #15
 80045ee:	3b04      	subs	r3, #4
 80045f0:	0112      	lsls	r2, r2, #4
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	440b      	add	r3, r1
 80045f6:	761a      	strb	r2, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	e000e100 	.word	0xe000e100
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800460c:	b480      	push	{r7}
 800460e:	b089      	sub	sp, #36	; 0x24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f1c3 0307 	rsb	r3, r3, #7
 8004626:	2b04      	cmp	r3, #4
 8004628:	bf28      	it	cs
 800462a:	2304      	movcs	r3, #4
 800462c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3304      	adds	r3, #4
 8004632:	2b06      	cmp	r3, #6
 8004634:	d902      	bls.n	800463c <NVIC_EncodePriority+0x30>
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3b03      	subs	r3, #3
 800463a:	e000      	b.n	800463e <NVIC_EncodePriority+0x32>
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43da      	mvns	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	401a      	ands	r2, r3
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	43d9      	mvns	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004664:	4313      	orrs	r3, r2
         );
}
 8004666:	4618      	mov	r0, r3
 8004668:	3724      	adds	r7, #36	; 0x24
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004674:	f3bf 8f4f 	dsb	sy
}
 8004678:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <__NVIC_SystemReset+0x24>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004682:	4904      	ldr	r1, [pc, #16]	; (8004694 <__NVIC_SystemReset+0x24>)
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <__NVIC_SystemReset+0x28>)
 8004686:	4313      	orrs	r3, r2
 8004688:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800468a:	f3bf 8f4f 	dsb	sy
}
 800468e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004690:	bf00      	nop
 8004692:	e7fd      	b.n	8004690 <__NVIC_SystemReset+0x20>
 8004694:	e000ed00 	.word	0xe000ed00
 8004698:	05fa0004 	.word	0x05fa0004

0800469c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ac:	d301      	bcc.n	80046b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b2:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <SysTick_Config+0x40>)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046ba:	210f      	movs	r1, #15
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c0:	f7ff ff7a 	bl	80045b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <SysTick_Config+0x40>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ca:	4b04      	ldr	r3, [pc, #16]	; (80046dc <SysTick_Config+0x40>)
 80046cc:	2207      	movs	r2, #7
 80046ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	e000e010 	.word	0xe000e010

080046e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff fef3 	bl	80044d4 <__NVIC_SetPriorityGrouping>
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	4603      	mov	r3, r0
 80046fe:	60b9      	str	r1, [r7, #8]
 8004700:	607a      	str	r2, [r7, #4]
 8004702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004708:	f7ff ff08 	bl	800451c <__NVIC_GetPriorityGrouping>
 800470c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	f7ff ff7a 	bl	800460c <NVIC_EncodePriority>
 8004718:	4602      	mov	r2, r0
 800471a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff ff49 	bl	80045b8 <__NVIC_SetPriority>
}
 8004726:	bf00      	nop
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	4603      	mov	r3, r0
 8004736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fefb 	bl	8004538 <__NVIC_EnableIRQ>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	4603      	mov	r3, r0
 8004752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff09 	bl	8004570 <__NVIC_DisableIRQ>
}
 800475e:	bf00      	nop
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800476a:	f7ff ff81 	bl	8004670 <__NVIC_SystemReset>

0800476e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff ff90 	bl	800469c <SysTick_Config>
 800477c:	4603      	mov	r3, r0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004788:	b480      	push	{r7}
 800478a:	b08b      	sub	sp, #44	; 0x2c
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004792:	2300      	movs	r3, #0
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004796:	2300      	movs	r3, #0
 8004798:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800479a:	e169      	b.n	8004a70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800479c:	2201      	movs	r2, #1
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	f040 8158 	bne.w	8004a6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4a9a      	ldr	r2, [pc, #616]	; (8004a28 <HAL_GPIO_Init+0x2a0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d05e      	beq.n	8004882 <HAL_GPIO_Init+0xfa>
 80047c4:	4a98      	ldr	r2, [pc, #608]	; (8004a28 <HAL_GPIO_Init+0x2a0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d875      	bhi.n	80048b6 <HAL_GPIO_Init+0x12e>
 80047ca:	4a98      	ldr	r2, [pc, #608]	; (8004a2c <HAL_GPIO_Init+0x2a4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d058      	beq.n	8004882 <HAL_GPIO_Init+0xfa>
 80047d0:	4a96      	ldr	r2, [pc, #600]	; (8004a2c <HAL_GPIO_Init+0x2a4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d86f      	bhi.n	80048b6 <HAL_GPIO_Init+0x12e>
 80047d6:	4a96      	ldr	r2, [pc, #600]	; (8004a30 <HAL_GPIO_Init+0x2a8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d052      	beq.n	8004882 <HAL_GPIO_Init+0xfa>
 80047dc:	4a94      	ldr	r2, [pc, #592]	; (8004a30 <HAL_GPIO_Init+0x2a8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d869      	bhi.n	80048b6 <HAL_GPIO_Init+0x12e>
 80047e2:	4a94      	ldr	r2, [pc, #592]	; (8004a34 <HAL_GPIO_Init+0x2ac>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d04c      	beq.n	8004882 <HAL_GPIO_Init+0xfa>
 80047e8:	4a92      	ldr	r2, [pc, #584]	; (8004a34 <HAL_GPIO_Init+0x2ac>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d863      	bhi.n	80048b6 <HAL_GPIO_Init+0x12e>
 80047ee:	4a92      	ldr	r2, [pc, #584]	; (8004a38 <HAL_GPIO_Init+0x2b0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d046      	beq.n	8004882 <HAL_GPIO_Init+0xfa>
 80047f4:	4a90      	ldr	r2, [pc, #576]	; (8004a38 <HAL_GPIO_Init+0x2b0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d85d      	bhi.n	80048b6 <HAL_GPIO_Init+0x12e>
 80047fa:	2b12      	cmp	r3, #18
 80047fc:	d82a      	bhi.n	8004854 <HAL_GPIO_Init+0xcc>
 80047fe:	2b12      	cmp	r3, #18
 8004800:	d859      	bhi.n	80048b6 <HAL_GPIO_Init+0x12e>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <HAL_GPIO_Init+0x80>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	08004883 	.word	0x08004883
 800480c:	0800485d 	.word	0x0800485d
 8004810:	0800486f 	.word	0x0800486f
 8004814:	080048b1 	.word	0x080048b1
 8004818:	080048b7 	.word	0x080048b7
 800481c:	080048b7 	.word	0x080048b7
 8004820:	080048b7 	.word	0x080048b7
 8004824:	080048b7 	.word	0x080048b7
 8004828:	080048b7 	.word	0x080048b7
 800482c:	080048b7 	.word	0x080048b7
 8004830:	080048b7 	.word	0x080048b7
 8004834:	080048b7 	.word	0x080048b7
 8004838:	080048b7 	.word	0x080048b7
 800483c:	080048b7 	.word	0x080048b7
 8004840:	080048b7 	.word	0x080048b7
 8004844:	080048b7 	.word	0x080048b7
 8004848:	080048b7 	.word	0x080048b7
 800484c:	08004865 	.word	0x08004865
 8004850:	08004879 	.word	0x08004879
 8004854:	4a79      	ldr	r2, [pc, #484]	; (8004a3c <HAL_GPIO_Init+0x2b4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800485a:	e02c      	b.n	80048b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	623b      	str	r3, [r7, #32]
          break;
 8004862:	e029      	b.n	80048b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	3304      	adds	r3, #4
 800486a:	623b      	str	r3, [r7, #32]
          break;
 800486c:	e024      	b.n	80048b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	3308      	adds	r3, #8
 8004874:	623b      	str	r3, [r7, #32]
          break;
 8004876:	e01f      	b.n	80048b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	330c      	adds	r3, #12
 800487e:	623b      	str	r3, [r7, #32]
          break;
 8004880:	e01a      	b.n	80048b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800488a:	2304      	movs	r3, #4
 800488c:	623b      	str	r3, [r7, #32]
          break;
 800488e:	e013      	b.n	80048b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d105      	bne.n	80048a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004898:	2308      	movs	r3, #8
 800489a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	611a      	str	r2, [r3, #16]
          break;
 80048a2:	e009      	b.n	80048b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048a4:	2308      	movs	r3, #8
 80048a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69fa      	ldr	r2, [r7, #28]
 80048ac:	615a      	str	r2, [r3, #20]
          break;
 80048ae:	e003      	b.n	80048b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80048b0:	2300      	movs	r3, #0
 80048b2:	623b      	str	r3, [r7, #32]
          break;
 80048b4:	e000      	b.n	80048b8 <HAL_GPIO_Init+0x130>
          break;
 80048b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2bff      	cmp	r3, #255	; 0xff
 80048bc:	d801      	bhi.n	80048c2 <HAL_GPIO_Init+0x13a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	e001      	b.n	80048c6 <HAL_GPIO_Init+0x13e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2bff      	cmp	r3, #255	; 0xff
 80048cc:	d802      	bhi.n	80048d4 <HAL_GPIO_Init+0x14c>
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	e002      	b.n	80048da <HAL_GPIO_Init+0x152>
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	3b08      	subs	r3, #8
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	210f      	movs	r1, #15
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	401a      	ands	r2, r3
 80048ec:	6a39      	ldr	r1, [r7, #32]
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	fa01 f303 	lsl.w	r3, r1, r3
 80048f4:	431a      	orrs	r2, r3
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80b1 	beq.w	8004a6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004908:	4b4d      	ldr	r3, [pc, #308]	; (8004a40 <HAL_GPIO_Init+0x2b8>)
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	4a4c      	ldr	r2, [pc, #304]	; (8004a40 <HAL_GPIO_Init+0x2b8>)
 800490e:	f043 0301 	orr.w	r3, r3, #1
 8004912:	6193      	str	r3, [r2, #24]
 8004914:	4b4a      	ldr	r3, [pc, #296]	; (8004a40 <HAL_GPIO_Init+0x2b8>)
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004920:	4a48      	ldr	r2, [pc, #288]	; (8004a44 <HAL_GPIO_Init+0x2bc>)
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	3302      	adds	r3, #2
 8004928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	220f      	movs	r2, #15
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4013      	ands	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a40      	ldr	r2, [pc, #256]	; (8004a48 <HAL_GPIO_Init+0x2c0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <HAL_GPIO_Init+0x1ec>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3f      	ldr	r2, [pc, #252]	; (8004a4c <HAL_GPIO_Init+0x2c4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00d      	beq.n	8004970 <HAL_GPIO_Init+0x1e8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3e      	ldr	r2, [pc, #248]	; (8004a50 <HAL_GPIO_Init+0x2c8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <HAL_GPIO_Init+0x1e4>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3d      	ldr	r2, [pc, #244]	; (8004a54 <HAL_GPIO_Init+0x2cc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d101      	bne.n	8004968 <HAL_GPIO_Init+0x1e0>
 8004964:	2303      	movs	r3, #3
 8004966:	e006      	b.n	8004976 <HAL_GPIO_Init+0x1ee>
 8004968:	2304      	movs	r3, #4
 800496a:	e004      	b.n	8004976 <HAL_GPIO_Init+0x1ee>
 800496c:	2302      	movs	r3, #2
 800496e:	e002      	b.n	8004976 <HAL_GPIO_Init+0x1ee>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <HAL_GPIO_Init+0x1ee>
 8004974:	2300      	movs	r3, #0
 8004976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004978:	f002 0203 	and.w	r2, r2, #3
 800497c:	0092      	lsls	r2, r2, #2
 800497e:	4093      	lsls	r3, r2
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004986:	492f      	ldr	r1, [pc, #188]	; (8004a44 <HAL_GPIO_Init+0x2bc>)
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	089b      	lsrs	r3, r3, #2
 800498c:	3302      	adds	r3, #2
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d006      	beq.n	80049ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049a0:	4b2d      	ldr	r3, [pc, #180]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	492c      	ldr	r1, [pc, #176]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	600b      	str	r3, [r1, #0]
 80049ac:	e006      	b.n	80049bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049ae:	4b2a      	ldr	r3, [pc, #168]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	4928      	ldr	r1, [pc, #160]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d006      	beq.n	80049d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80049c8:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	4922      	ldr	r1, [pc, #136]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]
 80049d4:	e006      	b.n	80049e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80049d6:	4b20      	ldr	r3, [pc, #128]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	43db      	mvns	r3, r3
 80049de:	491e      	ldr	r1, [pc, #120]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d006      	beq.n	80049fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80049f0:	4b19      	ldr	r3, [pc, #100]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	4918      	ldr	r1, [pc, #96]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]
 80049fc:	e006      	b.n	8004a0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049fe:	4b16      	ldr	r3, [pc, #88]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	4914      	ldr	r1, [pc, #80]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d021      	beq.n	8004a5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	490e      	ldr	r1, [pc, #56]	; (8004a58 <HAL_GPIO_Init+0x2d0>)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]
 8004a24:	e021      	b.n	8004a6a <HAL_GPIO_Init+0x2e2>
 8004a26:	bf00      	nop
 8004a28:	10320000 	.word	0x10320000
 8004a2c:	10310000 	.word	0x10310000
 8004a30:	10220000 	.word	0x10220000
 8004a34:	10210000 	.word	0x10210000
 8004a38:	10120000 	.word	0x10120000
 8004a3c:	10110000 	.word	0x10110000
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40010800 	.word	0x40010800
 8004a4c:	40010c00 	.word	0x40010c00
 8004a50:	40011000 	.word	0x40011000
 8004a54:	40011400 	.word	0x40011400
 8004a58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <HAL_GPIO_Init+0x304>)
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	4909      	ldr	r1, [pc, #36]	; (8004a8c <HAL_GPIO_Init+0x304>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	fa22 f303 	lsr.w	r3, r2, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f47f ae8e 	bne.w	800479c <HAL_GPIO_Init+0x14>
  }
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	372c      	adds	r7, #44	; 0x2c
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	40010400 	.word	0x40010400

08004a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aa0:	787b      	ldrb	r3, [r7, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004aac:	e003      	b.n	8004ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004aae:	887b      	ldrh	r3, [r7, #2]
 8004ab0:	041a      	lsls	r2, r3, #16
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	611a      	str	r2, [r3, #16]
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	041a      	lsls	r2, r3, #16
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	43d9      	mvns	r1, r3
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	400b      	ands	r3, r1
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	611a      	str	r2, [r3, #16]
}
 8004ae8:	bf00      	nop
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004afe:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b0a:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fc fe38 	bl	8001788 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b18:	bf00      	nop
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40010400 	.word	0x40010400

08004b24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b26:	b08b      	sub	sp, #44	; 0x2c
 8004b28:	af06      	add	r7, sp, #24
 8004b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e0fd      	b.n	8004d32 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f007 ff40 	bl	800c9d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2203      	movs	r2, #3
 8004b54:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f003 fc10 	bl	8008382 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	603b      	str	r3, [r7, #0]
 8004b68:	687e      	ldr	r6, [r7, #4]
 8004b6a:	466d      	mov	r5, sp
 8004b6c:	f106 0410 	add.w	r4, r6, #16
 8004b70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	602b      	str	r3, [r5, #0]
 8004b78:	1d33      	adds	r3, r6, #4
 8004b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b7c:	6838      	ldr	r0, [r7, #0]
 8004b7e:	f003 fbda 	bl	8008336 <USB_CoreInit>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0ce      	b.n	8004d32 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 fc0b 	bl	80083b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]
 8004ba4:	e04c      	b.n	8004c40 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	2201      	movs	r2, #1
 8004bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	440b      	add	r3, r1
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004bd0:	7bfa      	ldrb	r2, [r7, #15]
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
 8004bd4:	b298      	uxth	r0, r3
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	440b      	add	r3, r1
 8004be2:	3336      	adds	r3, #54	; 0x36
 8004be4:	4602      	mov	r2, r0
 8004be6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3303      	adds	r3, #3
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004bfe:	7bfa      	ldrb	r2, [r7, #15]
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3338      	adds	r3, #56	; 0x38
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	440b      	add	r3, r1
 8004c20:	333c      	adds	r3, #60	; 0x3c
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c26:	7bfa      	ldrb	r2, [r7, #15]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	440b      	add	r3, r1
 8004c34:	3340      	adds	r3, #64	; 0x40
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
 8004c40:	7bfa      	ldrb	r2, [r7, #15]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d3ad      	bcc.n	8004ba6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
 8004c4e:	e044      	b.n	8004cda <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c50:	7bfa      	ldrb	r2, [r7, #15]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	440b      	add	r3, r1
 8004c5e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004c62:	2200      	movs	r2, #0
 8004c64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c66:	7bfa      	ldrb	r2, [r7, #15]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	440b      	add	r3, r1
 8004c74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c78:	7bfa      	ldrb	r2, [r7, #15]
 8004c7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c7c:	7bfa      	ldrb	r2, [r7, #15]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4413      	add	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	440b      	add	r3, r1
 8004c8a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c92:	7bfa      	ldrb	r2, [r7, #15]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	440b      	add	r3, r1
 8004ca0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ca8:	7bfa      	ldrb	r2, [r7, #15]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	440b      	add	r3, r1
 8004cb6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cbe:	7bfa      	ldrb	r2, [r7, #15]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	440b      	add	r3, r1
 8004ccc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d3b5      	bcc.n	8004c50 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	687e      	ldr	r6, [r7, #4]
 8004cec:	466d      	mov	r5, sp
 8004cee:	f106 0410 	add.w	r4, r6, #16
 8004cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	602b      	str	r3, [r5, #0]
 8004cfa:	1d33      	adds	r3, r6, #4
 8004cfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cfe:	6838      	ldr	r0, [r7, #0]
 8004d00:	f003 fb65 	bl	80083ce <USB_DevInit>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e00d      	b.n	8004d32 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f006 f818 	bl	800ad60 <USB_DevDisconnect>

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_PCD_Start+0x16>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e016      	b.n	8004d7e <HAL_PCD_Start+0x44>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f003 fafa 	bl	8008356 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004d62:	2101      	movs	r1, #1
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f008 f8ae 	bl	800cec6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f005 ffec 	bl	800ad4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b088      	sub	sp, #32
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f005 ffee 	bl	800ad74 <USB_ReadInterrupts>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da2:	d102      	bne.n	8004daa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fb5f 	bl	8005468 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f005 ffe0 	bl	800ad74 <USB_ReadInterrupts>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbe:	d112      	bne.n	8004de6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd2:	b292      	uxth	r2, r2
 8004dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f007 fe7c 	bl	800cad6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004dde:	2100      	movs	r1, #0
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f923 	bl	800502c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f005 ffc2 	bl	800ad74 <USB_ReadInterrupts>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dfa:	d10b      	bne.n	8004e14 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e0e:	b292      	uxth	r2, r2
 8004e10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f005 ffab 	bl	800ad74 <USB_ReadInterrupts>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e28:	d10b      	bne.n	8004e42 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e3c:	b292      	uxth	r2, r2
 8004e3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f005 ff94 	bl	800ad74 <USB_ReadInterrupts>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e56:	d126      	bne.n	8004ea6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0204 	bic.w	r2, r2, #4
 8004e6a:	b292      	uxth	r2, r2
 8004e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0208 	bic.w	r2, r2, #8
 8004e82:	b292      	uxth	r2, r2
 8004e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f007 fe5d 	bl	800cb48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ea0:	b292      	uxth	r2, r2
 8004ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f005 ff62 	bl	800ad74 <USB_ReadInterrupts>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eba:	f040 8082 	bne.w	8004fc2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e010      	b.n	8004ee6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	7ffb      	ldrb	r3, [r7, #31]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	441a      	add	r2, r3
 8004ed0:	7ffb      	ldrb	r3, [r7, #31]
 8004ed2:	8812      	ldrh	r2, [r2, #0]
 8004ed4:	b292      	uxth	r2, r2
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	3320      	adds	r3, #32
 8004eda:	443b      	add	r3, r7
 8004edc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004ee0:	7ffb      	ldrb	r3, [r7, #31]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	7ffb      	ldrb	r3, [r7, #31]
 8004ee8:	2b07      	cmp	r3, #7
 8004eea:	d9eb      	bls.n	8004ec4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	b292      	uxth	r2, r2
 8004f00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0201 	bic.w	r2, r2, #1
 8004f16:	b292      	uxth	r2, r2
 8004f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004f1c:	bf00      	nop
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f6      	beq.n	8004f1e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f42:	b292      	uxth	r2, r2
 8004f44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004f48:	2300      	movs	r3, #0
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e00f      	b.n	8004f6e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004f4e:	7ffb      	ldrb	r3, [r7, #31]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	4611      	mov	r1, r2
 8004f56:	7ffa      	ldrb	r2, [r7, #31]
 8004f58:	0092      	lsls	r2, r2, #2
 8004f5a:	440a      	add	r2, r1
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	3320      	adds	r3, #32
 8004f60:	443b      	add	r3, r7
 8004f62:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004f66:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004f68:	7ffb      	ldrb	r3, [r7, #31]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	77fb      	strb	r3, [r7, #31]
 8004f6e:	7ffb      	ldrb	r3, [r7, #31]
 8004f70:	2b07      	cmp	r3, #7
 8004f72:	d9ec      	bls.n	8004f4e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0208 	orr.w	r2, r2, #8
 8004f86:	b292      	uxth	r2, r2
 8004f88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f9e:	b292      	uxth	r2, r2
 8004fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0204 	orr.w	r2, r2, #4
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f007 fda9 	bl	800cb14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f005 fed4 	bl	800ad74 <USB_ReadInterrupts>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd6:	d10e      	bne.n	8004ff6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fea:	b292      	uxth	r2, r2
 8004fec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f007 fd62 	bl	800caba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f005 feba 	bl	800ad74 <USB_ReadInterrupts>
 8005000:	4603      	mov	r3, r0
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500a:	d10b      	bne.n	8005024 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005014:	b29a      	uxth	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800501e:	b292      	uxth	r2, r2
 8005020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005024:	bf00      	nop
 8005026:	3720      	adds	r7, #32
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_PCD_SetAddress+0x1a>
 8005042:	2302      	movs	r3, #2
 8005044:	e013      	b.n	800506e <HAL_PCD_SetAddress+0x42>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	78fa      	ldrb	r2, [r7, #3]
 8005052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f005 fe61 	bl	800ad26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	4608      	mov	r0, r1
 8005080:	4611      	mov	r1, r2
 8005082:	461a      	mov	r2, r3
 8005084:	4603      	mov	r3, r0
 8005086:	70fb      	strb	r3, [r7, #3]
 8005088:	460b      	mov	r3, r1
 800508a:	803b      	strh	r3, [r7, #0]
 800508c:	4613      	mov	r3, r2
 800508e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005098:	2b00      	cmp	r3, #0
 800509a:	da0e      	bge.n	80050ba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4413      	add	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	705a      	strb	r2, [r3, #1]
 80050b8:	e00e      	b.n	80050d8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	f003 0207 	and.w	r2, r3, #7
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	4413      	add	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050e4:	883a      	ldrh	r2, [r7, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	78ba      	ldrb	r2, [r7, #2]
 80050ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005102:	78bb      	ldrb	r3, [r7, #2]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d102      	bne.n	800510e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_PCD_EP_Open+0xa6>
 8005118:	2302      	movs	r3, #2
 800511a:	e00e      	b.n	800513a <HAL_PCD_EP_Open+0xc4>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68f9      	ldr	r1, [r7, #12]
 800512a:	4618      	mov	r0, r3
 800512c:	f003 f970 	bl	8008410 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005138:	7afb      	ldrb	r3, [r7, #11]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800514e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005152:	2b00      	cmp	r3, #0
 8005154:	da0e      	bge.n	8005174 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	4413      	add	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	705a      	strb	r2, [r3, #1]
 8005172:	e00e      	b.n	8005192 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	f003 0207 	and.w	r2, r3, #7
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	4413      	add	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005192:	78fb      	ldrb	r3, [r7, #3]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	b2da      	uxtb	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_PCD_EP_Close+0x6a>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e00e      	b.n	80051ca <HAL_PCD_EP_Close+0x88>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68f9      	ldr	r1, [r7, #12]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f003 fc92 	bl	8008ae4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	460b      	mov	r3, r1
 80051e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051e2:	7afb      	ldrb	r3, [r7, #11]
 80051e4:	f003 0207 	and.w	r2, r3, #7
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2200      	movs	r2, #0
 800520a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2200      	movs	r2, #0
 8005210:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005212:	7afb      	ldrb	r3, [r7, #11]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	b2da      	uxtb	r2, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800521e:	7afb      	ldrb	r3, [r7, #11]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	2b00      	cmp	r3, #0
 8005226:	d106      	bne.n	8005236 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6979      	ldr	r1, [r7, #20]
 800522e:	4618      	mov	r0, r3
 8005230:	f003 fe44 	bl	8008ebc <USB_EPStartXfer>
 8005234:	e005      	b.n	8005242 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6979      	ldr	r1, [r7, #20]
 800523c:	4618      	mov	r0, r3
 800523e:	f003 fe3d 	bl	8008ebc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	460b      	mov	r3, r1
 8005256:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	f003 0207 	and.w	r2, r3, #7
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	440b      	add	r3, r1
 800526a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800526e:	681b      	ldr	r3, [r3, #0]
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b086      	sub	sp, #24
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
 8005286:	460b      	mov	r3, r1
 8005288:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800528a:	7afb      	ldrb	r3, [r7, #11]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2200      	movs	r2, #0
 80052be:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2201      	movs	r2, #1
 80052c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052c6:	7afb      	ldrb	r3, [r7, #11]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052d2:	7afb      	ldrb	r3, [r7, #11]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6979      	ldr	r1, [r7, #20]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f003 fdea 	bl	8008ebc <USB_EPStartXfer>
 80052e8:	e005      	b.n	80052f6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6979      	ldr	r1, [r7, #20]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f003 fde3 	bl	8008ebc <USB_EPStartXfer>
  }

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	f003 0207 	and.w	r2, r3, #7
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d901      	bls.n	800531e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e04c      	b.n	80053b8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800531e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005322:	2b00      	cmp	r3, #0
 8005324:	da0e      	bge.n	8005344 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	00db      	lsls	r3, r3, #3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4413      	add	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	705a      	strb	r2, [r3, #1]
 8005342:	e00c      	b.n	800535e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005344:	78fa      	ldrb	r2, [r7, #3]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	4413      	add	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	b2da      	uxtb	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_PCD_EP_SetStall+0x7e>
 800537a:	2302      	movs	r3, #2
 800537c:	e01c      	b.n	80053b8 <HAL_PCD_EP_SetStall+0xb8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	4618      	mov	r0, r3
 800538e:	f005 fbcd 	bl	800ab2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	2b00      	cmp	r3, #0
 800539a:	d108      	bne.n	80053ae <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80053a6:	4619      	mov	r1, r3
 80053a8:	4610      	mov	r0, r2
 80053aa:	f005 fcf2 	bl	800ad92 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	f003 020f 	and.w	r2, r3, #15
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d901      	bls.n	80053de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e040      	b.n	8005460 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	da0e      	bge.n	8005404 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4413      	add	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2201      	movs	r2, #1
 8005400:	705a      	strb	r2, [r3, #1]
 8005402:	e00e      	b.n	8005422 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	f003 0207 	and.w	r2, r3, #7
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4413      	add	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	b2da      	uxtb	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_PCD_EP_ClrStall+0x82>
 800543e:	2302      	movs	r3, #2
 8005440:	e00e      	b.n	8005460 <HAL_PCD_EP_ClrStall+0xa0>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68f9      	ldr	r1, [r7, #12]
 8005450:	4618      	mov	r0, r3
 8005452:	f005 fbbb 	bl	800abcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08e      	sub	sp, #56	; 0x38
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005470:	e2ec      	b.n	8005a4c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800547a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800547c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005488:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800548c:	2b00      	cmp	r3, #0
 800548e:	f040 8161 	bne.w	8005754 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d152      	bne.n	8005542 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80054a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ac:	81fb      	strh	r3, [r7, #14]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	89fb      	ldrh	r3, [r7, #14]
 80054b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054bc:	b29b      	uxth	r3, r3
 80054be:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3328      	adds	r3, #40	; 0x28
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	3302      	adds	r3, #2
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	441a      	add	r2, r3
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005500:	2100      	movs	r1, #0
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f007 fabf 	bl	800ca86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 829b 	beq.w	8005a4c <PCD_EP_ISR_Handler+0x5e4>
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f040 8296 	bne.w	8005a4c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800552c:	b2da      	uxtb	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b292      	uxth	r2, r2
 8005534:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005540:	e284      	b.n	8005a4c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005552:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005558:	2b00      	cmp	r3, #0
 800555a:	d034      	beq.n	80055c6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005564:	b29b      	uxth	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4413      	add	r3, r2
 8005570:	3306      	adds	r3, #6
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800559a:	b29b      	uxth	r3, r3
 800559c:	f005 fc49 	bl	800ae32 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80055ac:	4013      	ands	r3, r2
 80055ae:	823b      	strh	r3, [r7, #16]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	8a3a      	ldrh	r2, [r7, #16]
 80055b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055ba:	b292      	uxth	r2, r2
 80055bc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f007 fa34 	bl	800ca2c <HAL_PCD_SetupStageCallback>
 80055c4:	e242      	b.n	8005a4c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80055c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f280 823e 	bge.w	8005a4c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80055dc:	4013      	ands	r3, r2
 80055de:	83bb      	strh	r3, [r7, #28]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	8bba      	ldrh	r2, [r7, #28]
 80055e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055ea:	b292      	uxth	r2, r2
 80055ec:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	4413      	add	r3, r2
 8005602:	3306      	adds	r3, #6
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d019      	beq.n	8005656 <PCD_EP_ISR_Handler+0x1ee>
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d015      	beq.n	8005656 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	6959      	ldr	r1, [r3, #20]
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800563a:	b29b      	uxth	r3, r3
 800563c:	f005 fbf9 	bl	800ae32 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	695a      	ldr	r2, [r3, #20]
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	441a      	add	r2, r3
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800564e:	2100      	movs	r1, #0
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f007 f9fd 	bl	800ca50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b29b      	uxth	r3, r3
 800565e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005662:	2b00      	cmp	r3, #0
 8005664:	f040 81f2 	bne.w	8005a4c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005676:	b29b      	uxth	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	4413      	add	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d112      	bne.n	80056b6 <PCD_EP_ISR_Handler+0x24e>
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800569a:	b29a      	uxth	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	801a      	strh	r2, [r3, #0]
 80056b4:	e02f      	b.n	8005716 <PCD_EP_ISR_Handler+0x2ae>
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b3e      	cmp	r3, #62	; 0x3e
 80056bc:	d813      	bhi.n	80056e6 <PCD_EP_ISR_Handler+0x27e>
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	633b      	str	r3, [r7, #48]	; 0x30
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <PCD_EP_ISR_Handler+0x270>
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	3301      	adds	r3, #1
 80056d6:	633b      	str	r3, [r7, #48]	; 0x30
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	b29b      	uxth	r3, r3
 80056dc:	029b      	lsls	r3, r3, #10
 80056de:	b29a      	uxth	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	801a      	strh	r2, [r3, #0]
 80056e4:	e017      	b.n	8005716 <PCD_EP_ISR_Handler+0x2ae>
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	633b      	str	r3, [r7, #48]	; 0x30
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <PCD_EP_ISR_Handler+0x298>
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	3b01      	subs	r3, #1
 80056fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	b29b      	uxth	r3, r3
 8005704:	029b      	lsls	r3, r3, #10
 8005706:	b29b      	uxth	r3, r3
 8005708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005710:	b29a      	uxth	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	827b      	strh	r3, [r7, #18]
 8005728:	8a7b      	ldrh	r3, [r7, #18]
 800572a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800572e:	827b      	strh	r3, [r7, #18]
 8005730:	8a7b      	ldrh	r3, [r7, #18]
 8005732:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005736:	827b      	strh	r3, [r7, #18]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	8a7b      	ldrh	r3, [r7, #18]
 800573e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574e:	b29b      	uxth	r3, r3
 8005750:	8013      	strh	r3, [r2, #0]
 8005752:	e17b      	b.n	8005a4c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005766:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800576a:	2b00      	cmp	r3, #0
 800576c:	f280 80ea 	bge.w	8005944 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29a      	uxth	r2, r3
 8005782:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005786:	4013      	ands	r3, r2
 8005788:	853b      	strh	r3, [r7, #40]	; 0x28
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800579a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800579e:	b292      	uxth	r2, r2
 80057a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80057a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	4413      	add	r3, r2
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	7b1b      	ldrb	r3, [r3, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d122      	bne.n	8005806 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	4413      	add	r3, r2
 80057d4:	3306      	adds	r3, #6
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057e8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80057ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8087 	beq.w	8005900 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	6959      	ldr	r1, [r3, #20]
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	88da      	ldrh	r2, [r3, #6]
 80057fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005800:	f005 fb17 	bl	800ae32 <USB_ReadPMA>
 8005804:	e07c      	b.n	8005900 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	78db      	ldrb	r3, [r3, #3]
 800580a:	2b02      	cmp	r3, #2
 800580c:	d108      	bne.n	8005820 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800580e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005810:	461a      	mov	r2, r3
 8005812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f927 	bl	8005a68 <HAL_PCD_EP_DB_Receive>
 800581a:	4603      	mov	r3, r0
 800581c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800581e:	e06f      	b.n	8005900 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	881b      	ldrh	r3, [r3, #0]
 8005830:	b29b      	uxth	r3, r3
 8005832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	847b      	strh	r3, [r7, #34]	; 0x22
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	441a      	add	r2, r3
 800584a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800584c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005858:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800585c:	b29b      	uxth	r3, r3
 800585e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d021      	beq.n	80058be <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005882:	b29b      	uxth	r3, r3
 8005884:	461a      	mov	r2, r3
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	3302      	adds	r3, #2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6812      	ldr	r2, [r2, #0]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80058a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d02a      	beq.n	8005900 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	6959      	ldr	r1, [r3, #20]
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	891a      	ldrh	r2, [r3, #8]
 80058b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058b8:	f005 fabb 	bl	800ae32 <USB_ReadPMA>
 80058bc:	e020      	b.n	8005900 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	3306      	adds	r3, #6
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058e6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80058e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d008      	beq.n	8005900 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	6959      	ldr	r1, [r3, #20]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	895a      	ldrh	r2, [r3, #10]
 80058fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058fc:	f005 fa99 	bl	800ae32 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	69da      	ldr	r2, [r3, #28]
 8005904:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005906:	441a      	add	r2, r3
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	695a      	ldr	r2, [r3, #20]
 8005910:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005912:	441a      	add	r2, r3
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <PCD_EP_ISR_Handler+0x4c2>
 8005920:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	429a      	cmp	r2, r3
 8005928:	d206      	bcs.n	8005938 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f007 f88d 	bl	800ca50 <HAL_PCD_DataOutStageCallback>
 8005936:	e005      	b.n	8005944 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800593e:	4618      	mov	r0, r3
 8005940:	f003 fabc 	bl	8008ebc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005944:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	2b00      	cmp	r3, #0
 800594c:	d07e      	beq.n	8005a4c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800594e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	4413      	add	r3, r2
 8005960:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597c:	843b      	strh	r3, [r7, #32]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	8c3b      	ldrh	r3, [r7, #32]
 800598e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005996:	b29b      	uxth	r3, r3
 8005998:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	78db      	ldrb	r3, [r3, #3]
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d00c      	beq.n	80059bc <PCD_EP_ISR_Handler+0x554>
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	78db      	ldrb	r3, [r3, #3]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d146      	bne.n	8005a40 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80059b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d141      	bne.n	8005a40 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4413      	add	r3, r2
 80059d0:	3302      	adds	r3, #2
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059e4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	8bfb      	ldrh	r3, [r7, #30]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d906      	bls.n	80059fe <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	699a      	ldr	r2, [r3, #24]
 80059f4:	8bfb      	ldrh	r3, [r7, #30]
 80059f6:	1ad2      	subs	r2, r2, r3
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	619a      	str	r2, [r3, #24]
 80059fc:	e002      	b.n	8005a04 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	2200      	movs	r2, #0
 8005a02:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f007 f837 	bl	800ca86 <HAL_PCD_DataInStageCallback>
 8005a18:	e018      	b.n	8005a4c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	8bfb      	ldrh	r3, [r7, #30]
 8005a20:	441a      	add	r2, r3
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	69da      	ldr	r2, [r3, #28]
 8005a2a:	8bfb      	ldrh	r3, [r7, #30]
 8005a2c:	441a      	add	r2, r3
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f003 fa3f 	bl	8008ebc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005a3e:	e005      	b.n	8005a4c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005a40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a42:	461a      	mov	r2, r3
 8005a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f91b 	bl	8005c82 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	b21b      	sxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f6ff ad0a 	blt.w	8005472 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3738      	adds	r7, #56	; 0x38
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d07e      	beq.n	8005b7e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4413      	add	r3, r2
 8005a94:	3302      	adds	r3, #2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aa8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	8b7b      	ldrh	r3, [r7, #26]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d306      	bcc.n	8005ac2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	699a      	ldr	r2, [r3, #24]
 8005ab8:	8b7b      	ldrh	r3, [r7, #26]
 8005aba:	1ad2      	subs	r2, r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	619a      	str	r2, [r3, #24]
 8005ac0:	e002      	b.n	8005ac8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d123      	bne.n	8005b18 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aea:	833b      	strh	r3, [r7, #24]
 8005aec:	8b3b      	ldrh	r3, [r7, #24]
 8005aee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005af2:	833b      	strh	r3, [r7, #24]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	8b3b      	ldrh	r3, [r7, #24]
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d01f      	beq.n	8005b62 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3c:	82fb      	strh	r3, [r7, #22]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	441a      	add	r2, r3
 8005b4c:	8afb      	ldrh	r3, [r7, #22]
 8005b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005b62:	8b7b      	ldrh	r3, [r7, #26]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8087 	beq.w	8005c78 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6959      	ldr	r1, [r3, #20]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	891a      	ldrh	r2, [r3, #8]
 8005b76:	8b7b      	ldrh	r3, [r7, #26]
 8005b78:	f005 f95b 	bl	800ae32 <USB_ReadPMA>
 8005b7c:	e07c      	b.n	8005c78 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	4413      	add	r3, r2
 8005b92:	3306      	adds	r3, #6
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	699a      	ldr	r2, [r3, #24]
 8005bac:	8b7b      	ldrh	r3, [r7, #26]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d306      	bcc.n	8005bc0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	8b7b      	ldrh	r3, [r7, #26]
 8005bb8:	1ad2      	subs	r2, r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	619a      	str	r2, [r3, #24]
 8005bbe:	e002      	b.n	8005bc6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d123      	bne.n	8005c16 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	83fb      	strh	r3, [r7, #30]
 8005bea:	8bfb      	ldrh	r3, [r7, #30]
 8005bec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bf0:	83fb      	strh	r3, [r7, #30]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	441a      	add	r2, r3
 8005c00:	8bfb      	ldrh	r3, [r7, #30]
 8005c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d11f      	bne.n	8005c60 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3a:	83bb      	strh	r3, [r7, #28]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	461a      	mov	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	441a      	add	r2, r3
 8005c4a:	8bbb      	ldrh	r3, [r7, #28]
 8005c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005c60:	8b7b      	ldrh	r3, [r7, #26]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d008      	beq.n	8005c78 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	6959      	ldr	r1, [r3, #20]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	895a      	ldrh	r2, [r3, #10]
 8005c72:	8b7b      	ldrh	r3, [r7, #26]
 8005c74:	f005 f8dd 	bl	800ae32 <USB_ReadPMA>
    }
  }

  return count;
 8005c78:	8b7b      	ldrh	r3, [r7, #26]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3720      	adds	r7, #32
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b0a2      	sub	sp, #136	; 0x88
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 81c7 	beq.w	800602a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	4413      	add	r3, r2
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d907      	bls.n	8005ce4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cdc:	1ad2      	subs	r2, r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	619a      	str	r2, [r3, #24]
 8005ce2:	e002      	b.n	8005cea <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f040 80b9 	bne.w	8005e66 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d126      	bne.n	8005d4a <HAL_PCD_EP_DB_Transmit+0xc8>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d10:	4413      	add	r3, r2
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	011a      	lsls	r2, r3, #4
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	801a      	strh	r2, [r3, #0]
 8005d48:	e01a      	b.n	8005d80 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d116      	bne.n	8005d80 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	633b      	str	r3, [r7, #48]	; 0x30
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	4413      	add	r3, r2
 8005d68:	633b      	str	r3, [r7, #48]	; 0x30
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	011a      	lsls	r2, r3, #4
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	4413      	add	r3, r2
 8005d74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	623b      	str	r3, [r7, #32]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	785b      	ldrb	r3, [r3, #1]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d126      	bne.n	8005ddc <HAL_PCD_EP_DB_Transmit+0x15a>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	4413      	add	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	011a      	lsls	r2, r3, #4
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	4413      	add	r3, r2
 8005db0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e017      	b.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	785b      	ldrb	r3, [r3, #1]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d113      	bne.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	4413      	add	r3, r2
 8005df4:	623b      	str	r3, [r7, #32]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	011a      	lsls	r2, r3, #4
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	4619      	mov	r1, r3
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f006 fe37 	bl	800ca86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 82d4 	beq.w	80063cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	827b      	strh	r3, [r7, #18]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	8a7b      	ldrh	r3, [r7, #18]
 8005e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	8013      	strh	r3, [r2, #0]
 8005e64:	e2b2      	b.n	80063cc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005e66:	88fb      	ldrh	r3, [r7, #6]
 8005e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d021      	beq.n	8005eb4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	441a      	add	r2, r3
 8005e9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	f040 8286 	bne.w	80063cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	695a      	ldr	r2, [r3, #20]
 8005ec4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ec8:	441a      	add	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	69da      	ldr	r2, [r3, #28]
 8005ed2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ed6:	441a      	add	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6a1a      	ldr	r2, [r3, #32]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d309      	bcc.n	8005efc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	6a1a      	ldr	r2, [r3, #32]
 8005ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef4:	1ad2      	subs	r2, r2, r3
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	621a      	str	r2, [r3, #32]
 8005efa:	e015      	b.n	8005f28 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d107      	bne.n	8005f14 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005f04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f08:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f12:	e009      	b.n	8005f28 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d155      	bne.n	8005fdc <HAL_PCD_EP_DB_Transmit+0x35a>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	461a      	mov	r2, r3
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	4413      	add	r3, r2
 8005f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	011a      	lsls	r2, r3, #4
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	4413      	add	r3, r2
 8005f52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f56:	637b      	str	r3, [r7, #52]	; 0x34
 8005f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d112      	bne.n	8005f84 <HAL_PCD_EP_DB_Transmit+0x302>
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6c:	801a      	strh	r2, [r3, #0]
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	e047      	b.n	8006014 <HAL_PCD_EP_DB_Transmit+0x392>
 8005f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f86:	2b3e      	cmp	r3, #62	; 0x3e
 8005f88:	d811      	bhi.n	8005fae <HAL_PCD_EP_DB_Transmit+0x32c>
 8005f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	029b      	lsls	r3, r3, #10
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	e032      	b.n	8006014 <HAL_PCD_EP_DB_Transmit+0x392>
 8005fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d102      	bne.n	8005fc4 <HAL_PCD_EP_DB_Transmit+0x342>
 8005fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	029b      	lsls	r3, r3, #10
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd8:	801a      	strh	r2, [r3, #0]
 8005fda:	e01b      	b.n	8006014 <HAL_PCD_EP_DB_Transmit+0x392>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d117      	bne.n	8006014 <HAL_PCD_EP_DB_Transmit+0x392>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff8:	4413      	add	r3, r2
 8005ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	011a      	lsls	r2, r3, #4
 8006002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006004:	4413      	add	r3, r2
 8006006:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600e:	b29a      	uxth	r2, r3
 8006010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006012:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6959      	ldr	r1, [r3, #20]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	891a      	ldrh	r2, [r3, #8]
 8006020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006022:	b29b      	uxth	r3, r3
 8006024:	f004 fec0 	bl	800ada8 <USB_WritePMA>
 8006028:	e1d0      	b.n	80063cc <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006032:	b29b      	uxth	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	4413      	add	r3, r2
 800603e:	3306      	adds	r3, #6
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006052:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800605e:	429a      	cmp	r2, r3
 8006060:	d307      	bcc.n	8006072 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800606a:	1ad2      	subs	r2, r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	619a      	str	r2, [r3, #24]
 8006070:	e002      	b.n	8006078 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 80c4 	bne.w	800620a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	785b      	ldrb	r3, [r3, #1]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d126      	bne.n	80060d8 <HAL_PCD_EP_DB_Transmit+0x456>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006098:	b29b      	uxth	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609e:	4413      	add	r3, r2
 80060a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	011a      	lsls	r2, r3, #4
 80060a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060aa:	4413      	add	r3, r2
 80060ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	e01a      	b.n	800610e <HAL_PCD_EP_DB_Transmit+0x48c>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d116      	bne.n	800610e <HAL_PCD_EP_DB_Transmit+0x48c>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	677b      	str	r3, [r7, #116]	; 0x74
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f4:	4413      	add	r3, r2
 80060f6:	677b      	str	r3, [r7, #116]	; 0x74
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	011a      	lsls	r2, r3, #4
 80060fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006100:	4413      	add	r3, r2
 8006102:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006106:	673b      	str	r3, [r7, #112]	; 0x70
 8006108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800610a:	2200      	movs	r2, #0
 800610c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	67bb      	str	r3, [r7, #120]	; 0x78
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d12f      	bne.n	800617c <HAL_PCD_EP_DB_Transmit+0x4fa>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612c:	b29b      	uxth	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006134:	4413      	add	r3, r2
 8006136:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	011a      	lsls	r2, r3, #4
 8006140:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006144:	4413      	add	r3, r2
 8006146:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800614a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800614e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800615a:	b29a      	uxth	r2, r3
 800615c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800616e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006172:	b29a      	uxth	r2, r3
 8006174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	e017      	b.n	80061ac <HAL_PCD_EP_DB_Transmit+0x52a>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	785b      	ldrb	r3, [r3, #1]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d113      	bne.n	80061ac <HAL_PCD_EP_DB_Transmit+0x52a>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618c:	b29b      	uxth	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006192:	4413      	add	r3, r2
 8006194:	67bb      	str	r3, [r7, #120]	; 0x78
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	011a      	lsls	r2, r3, #4
 800619c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800619e:	4413      	add	r3, r2
 80061a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061a8:	2200      	movs	r2, #0
 80061aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	4619      	mov	r1, r3
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f006 fc67 	bl	800ca86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 8104 	bne.w	80063cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061de:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	441a      	add	r2, r3
 80061f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80061f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006204:	b29b      	uxth	r3, r3
 8006206:	8013      	strh	r3, [r2, #0]
 8006208:	e0e0      	b.n	80063cc <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d121      	bne.n	8006258 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	b29b      	uxth	r3, r3
 8006226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006254:	b29b      	uxth	r3, r3
 8006256:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800625e:	2b01      	cmp	r3, #1
 8006260:	f040 80b4 	bne.w	80063cc <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800626c:	441a      	add	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	69da      	ldr	r2, [r3, #28]
 8006276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800627a:	441a      	add	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6a1a      	ldr	r2, [r3, #32]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	429a      	cmp	r2, r3
 800628a:	d309      	bcc.n	80062a0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6a1a      	ldr	r2, [r3, #32]
 8006296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006298:	1ad2      	subs	r2, r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	621a      	str	r2, [r3, #32]
 800629e:	e015      	b.n	80062cc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d107      	bne.n	80062b8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80062a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80062ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80062b6:	e009      	b.n	80062cc <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2200      	movs	r2, #0
 80062c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	667b      	str	r3, [r7, #100]	; 0x64
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	785b      	ldrb	r3, [r3, #1]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d155      	bne.n	8006386 <HAL_PCD_EP_DB_Transmit+0x704>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	461a      	mov	r2, r3
 80062ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ee:	4413      	add	r3, r2
 80062f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	011a      	lsls	r2, r3, #4
 80062f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062fa:	4413      	add	r3, r2
 80062fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006300:	65bb      	str	r3, [r7, #88]	; 0x58
 8006302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006304:	2b00      	cmp	r3, #0
 8006306:	d112      	bne.n	800632e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006312:	b29a      	uxth	r2, r3
 8006314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006326:	b29a      	uxth	r2, r3
 8006328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800632a:	801a      	strh	r2, [r3, #0]
 800632c:	e044      	b.n	80063b8 <HAL_PCD_EP_DB_Transmit+0x736>
 800632e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006330:	2b3e      	cmp	r3, #62	; 0x3e
 8006332:	d811      	bhi.n	8006358 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006336:	085b      	lsrs	r3, r3, #1
 8006338:	657b      	str	r3, [r7, #84]	; 0x54
 800633a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006346:	3301      	adds	r3, #1
 8006348:	657b      	str	r3, [r7, #84]	; 0x54
 800634a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800634c:	b29b      	uxth	r3, r3
 800634e:	029b      	lsls	r3, r3, #10
 8006350:	b29a      	uxth	r2, r3
 8006352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006354:	801a      	strh	r2, [r3, #0]
 8006356:	e02f      	b.n	80063b8 <HAL_PCD_EP_DB_Transmit+0x736>
 8006358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	657b      	str	r3, [r7, #84]	; 0x54
 800635e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006360:	f003 031f 	and.w	r3, r3, #31
 8006364:	2b00      	cmp	r3, #0
 8006366:	d102      	bne.n	800636e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636a:	3b01      	subs	r3, #1
 800636c:	657b      	str	r3, [r7, #84]	; 0x54
 800636e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006370:	b29b      	uxth	r3, r3
 8006372:	029b      	lsls	r3, r3, #10
 8006374:	b29b      	uxth	r3, r3
 8006376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800637a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637e:	b29a      	uxth	r2, r3
 8006380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e018      	b.n	80063b8 <HAL_PCD_EP_DB_Transmit+0x736>
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d114      	bne.n	80063b8 <HAL_PCD_EP_DB_Transmit+0x736>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800639c:	4413      	add	r3, r2
 800639e:	667b      	str	r3, [r7, #100]	; 0x64
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	011a      	lsls	r2, r3, #4
 80063a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063a8:	4413      	add	r3, r2
 80063aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063ae:	663b      	str	r3, [r7, #96]	; 0x60
 80063b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	6959      	ldr	r1, [r3, #20]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	895a      	ldrh	r2, [r3, #10]
 80063c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f004 fcee 	bl	800ada8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e6:	823b      	strh	r3, [r7, #16]
 80063e8:	8a3b      	ldrh	r3, [r7, #16]
 80063ea:	f083 0310 	eor.w	r3, r3, #16
 80063ee:	823b      	strh	r3, [r7, #16]
 80063f0:	8a3b      	ldrh	r3, [r7, #16]
 80063f2:	f083 0320 	eor.w	r3, r3, #32
 80063f6:	823b      	strh	r3, [r7, #16]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	461a      	mov	r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	441a      	add	r2, r3
 8006406:	8a3b      	ldrh	r3, [r7, #16]
 8006408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800640c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006418:	b29b      	uxth	r3, r3
 800641a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3788      	adds	r7, #136	; 0x88
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006426:	b480      	push	{r7}
 8006428:	b087      	sub	sp, #28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	607b      	str	r3, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	817b      	strh	r3, [r7, #10]
 8006434:	4613      	mov	r3, r2
 8006436:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006438:	897b      	ldrh	r3, [r7, #10]
 800643a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006444:	897b      	ldrh	r3, [r7, #10]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4413      	add	r3, r2
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	e009      	b.n	8006470 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800645c:	897a      	ldrh	r2, [r7, #10]
 800645e:	4613      	mov	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006470:	893b      	ldrh	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d107      	bne.n	8006486 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2200      	movs	r2, #0
 800647a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	b29a      	uxth	r2, r3
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	80da      	strh	r2, [r3, #6]
 8006484:	e00b      	b.n	800649e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2201      	movs	r2, #1
 800648a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	b29a      	uxth	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	b29a      	uxth	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr
	...

080064ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e272      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 8087 	beq.w	80065da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064cc:	4b92      	ldr	r3, [pc, #584]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f003 030c 	and.w	r3, r3, #12
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	d00c      	beq.n	80064f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80064d8:	4b8f      	ldr	r3, [pc, #572]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 030c 	and.w	r3, r3, #12
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d112      	bne.n	800650a <HAL_RCC_OscConfig+0x5e>
 80064e4:	4b8c      	ldr	r3, [pc, #560]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f0:	d10b      	bne.n	800650a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f2:	4b89      	ldr	r3, [pc, #548]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d06c      	beq.n	80065d8 <HAL_RCC_OscConfig+0x12c>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d168      	bne.n	80065d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e24c      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006512:	d106      	bne.n	8006522 <HAL_RCC_OscConfig+0x76>
 8006514:	4b80      	ldr	r3, [pc, #512]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a7f      	ldr	r2, [pc, #508]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800651a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	e02e      	b.n	8006580 <HAL_RCC_OscConfig+0xd4>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10c      	bne.n	8006544 <HAL_RCC_OscConfig+0x98>
 800652a:	4b7b      	ldr	r3, [pc, #492]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a7a      	ldr	r2, [pc, #488]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	4b78      	ldr	r3, [pc, #480]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a77      	ldr	r2, [pc, #476]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800653c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	e01d      	b.n	8006580 <HAL_RCC_OscConfig+0xd4>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800654c:	d10c      	bne.n	8006568 <HAL_RCC_OscConfig+0xbc>
 800654e:	4b72      	ldr	r3, [pc, #456]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a71      	ldr	r2, [pc, #452]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	4b6f      	ldr	r3, [pc, #444]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a6e      	ldr	r2, [pc, #440]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	e00b      	b.n	8006580 <HAL_RCC_OscConfig+0xd4>
 8006568:	4b6b      	ldr	r3, [pc, #428]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a6a      	ldr	r2, [pc, #424]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800656e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	4b68      	ldr	r3, [pc, #416]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a67      	ldr	r2, [pc, #412]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800657a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800657e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d013      	beq.n	80065b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006588:	f7fd ff76 	bl	8004478 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006590:	f7fd ff72 	bl	8004478 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b64      	cmp	r3, #100	; 0x64
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e200      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065a2:	4b5d      	ldr	r3, [pc, #372]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f0      	beq.n	8006590 <HAL_RCC_OscConfig+0xe4>
 80065ae:	e014      	b.n	80065da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b0:	f7fd ff62 	bl	8004478 <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065b8:	f7fd ff5e 	bl	8004478 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b64      	cmp	r3, #100	; 0x64
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e1ec      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ca:	4b53      	ldr	r3, [pc, #332]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0x10c>
 80065d6:	e000      	b.n	80065da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d063      	beq.n	80066ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065e6:	4b4c      	ldr	r3, [pc, #304]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f003 030c 	and.w	r3, r3, #12
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00b      	beq.n	800660a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065f2:	4b49      	ldr	r3, [pc, #292]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f003 030c 	and.w	r3, r3, #12
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d11c      	bne.n	8006638 <HAL_RCC_OscConfig+0x18c>
 80065fe:	4b46      	ldr	r3, [pc, #280]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d116      	bne.n	8006638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800660a:	4b43      	ldr	r3, [pc, #268]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <HAL_RCC_OscConfig+0x176>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d001      	beq.n	8006622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e1c0      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006622:	4b3d      	ldr	r3, [pc, #244]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	4939      	ldr	r1, [pc, #228]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006632:	4313      	orrs	r3, r2
 8006634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006636:	e03a      	b.n	80066ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d020      	beq.n	8006682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006640:	4b36      	ldr	r3, [pc, #216]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006642:	2201      	movs	r2, #1
 8006644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006646:	f7fd ff17 	bl	8004478 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800664e:	f7fd ff13 	bl	8004478 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e1a1      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006660:	4b2d      	ldr	r3, [pc, #180]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0f0      	beq.n	800664e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666c:	4b2a      	ldr	r3, [pc, #168]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4927      	ldr	r1, [pc, #156]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 800667c:	4313      	orrs	r3, r2
 800667e:	600b      	str	r3, [r1, #0]
 8006680:	e015      	b.n	80066ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006682:	4b26      	ldr	r3, [pc, #152]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006688:	f7fd fef6 	bl	8004478 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006690:	f7fd fef2 	bl	8004478 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e180      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066a2:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f0      	bne.n	8006690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d03a      	beq.n	8006730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d019      	beq.n	80066f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066c2:	4b17      	ldr	r3, [pc, #92]	; (8006720 <HAL_RCC_OscConfig+0x274>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066c8:	f7fd fed6 	bl	8004478 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066d0:	f7fd fed2 	bl	8004478 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e160      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066e2:	4b0d      	ldr	r3, [pc, #52]	; (8006718 <HAL_RCC_OscConfig+0x26c>)
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80066ee:	2001      	movs	r0, #1
 80066f0:	f000 faa6 	bl	8006c40 <RCC_Delay>
 80066f4:	e01c      	b.n	8006730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066f6:	4b0a      	ldr	r3, [pc, #40]	; (8006720 <HAL_RCC_OscConfig+0x274>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066fc:	f7fd febc 	bl	8004478 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006702:	e00f      	b.n	8006724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006704:	f7fd feb8 	bl	8004478 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d908      	bls.n	8006724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e146      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
 8006716:	bf00      	nop
 8006718:	40021000 	.word	0x40021000
 800671c:	42420000 	.word	0x42420000
 8006720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006724:	4b92      	ldr	r3, [pc, #584]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e9      	bne.n	8006704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 80a6 	beq.w	800688a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800673e:	2300      	movs	r3, #0
 8006740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006742:	4b8b      	ldr	r3, [pc, #556]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10d      	bne.n	800676a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800674e:	4b88      	ldr	r3, [pc, #544]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	4a87      	ldr	r2, [pc, #540]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006758:	61d3      	str	r3, [r2, #28]
 800675a:	4b85      	ldr	r3, [pc, #532]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006762:	60bb      	str	r3, [r7, #8]
 8006764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006766:	2301      	movs	r3, #1
 8006768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800676a:	4b82      	ldr	r3, [pc, #520]	; (8006974 <HAL_RCC_OscConfig+0x4c8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006772:	2b00      	cmp	r3, #0
 8006774:	d118      	bne.n	80067a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006776:	4b7f      	ldr	r3, [pc, #508]	; (8006974 <HAL_RCC_OscConfig+0x4c8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a7e      	ldr	r2, [pc, #504]	; (8006974 <HAL_RCC_OscConfig+0x4c8>)
 800677c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006782:	f7fd fe79 	bl	8004478 <HAL_GetTick>
 8006786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800678a:	f7fd fe75 	bl	8004478 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b64      	cmp	r3, #100	; 0x64
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e103      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679c:	4b75      	ldr	r3, [pc, #468]	; (8006974 <HAL_RCC_OscConfig+0x4c8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f0      	beq.n	800678a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d106      	bne.n	80067be <HAL_RCC_OscConfig+0x312>
 80067b0:	4b6f      	ldr	r3, [pc, #444]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	4a6e      	ldr	r2, [pc, #440]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	6213      	str	r3, [r2, #32]
 80067bc:	e02d      	b.n	800681a <HAL_RCC_OscConfig+0x36e>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10c      	bne.n	80067e0 <HAL_RCC_OscConfig+0x334>
 80067c6:	4b6a      	ldr	r3, [pc, #424]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	4a69      	ldr	r2, [pc, #420]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	6213      	str	r3, [r2, #32]
 80067d2:	4b67      	ldr	r3, [pc, #412]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	4a66      	ldr	r2, [pc, #408]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80067d8:	f023 0304 	bic.w	r3, r3, #4
 80067dc:	6213      	str	r3, [r2, #32]
 80067de:	e01c      	b.n	800681a <HAL_RCC_OscConfig+0x36e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b05      	cmp	r3, #5
 80067e6:	d10c      	bne.n	8006802 <HAL_RCC_OscConfig+0x356>
 80067e8:	4b61      	ldr	r3, [pc, #388]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	4a60      	ldr	r2, [pc, #384]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80067ee:	f043 0304 	orr.w	r3, r3, #4
 80067f2:	6213      	str	r3, [r2, #32]
 80067f4:	4b5e      	ldr	r3, [pc, #376]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	4a5d      	ldr	r2, [pc, #372]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	6213      	str	r3, [r2, #32]
 8006800:	e00b      	b.n	800681a <HAL_RCC_OscConfig+0x36e>
 8006802:	4b5b      	ldr	r3, [pc, #364]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	4a5a      	ldr	r2, [pc, #360]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	6213      	str	r3, [r2, #32]
 800680e:	4b58      	ldr	r3, [pc, #352]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	4a57      	ldr	r2, [pc, #348]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006814:	f023 0304 	bic.w	r3, r3, #4
 8006818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d015      	beq.n	800684e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006822:	f7fd fe29 	bl	8004478 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006828:	e00a      	b.n	8006840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800682a:	f7fd fe25 	bl	8004478 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	f241 3288 	movw	r2, #5000	; 0x1388
 8006838:	4293      	cmp	r3, r2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e0b1      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006840:	4b4b      	ldr	r3, [pc, #300]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0ee      	beq.n	800682a <HAL_RCC_OscConfig+0x37e>
 800684c:	e014      	b.n	8006878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800684e:	f7fd fe13 	bl	8004478 <HAL_GetTick>
 8006852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006854:	e00a      	b.n	800686c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006856:	f7fd fe0f 	bl	8004478 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	f241 3288 	movw	r2, #5000	; 0x1388
 8006864:	4293      	cmp	r3, r2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e09b      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800686c:	4b40      	ldr	r3, [pc, #256]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1ee      	bne.n	8006856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d105      	bne.n	800688a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800687e:	4b3c      	ldr	r3, [pc, #240]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	4a3b      	ldr	r2, [pc, #236]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8087 	beq.w	80069a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006894:	4b36      	ldr	r3, [pc, #216]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f003 030c 	and.w	r3, r3, #12
 800689c:	2b08      	cmp	r3, #8
 800689e:	d061      	beq.n	8006964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d146      	bne.n	8006936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a8:	4b33      	ldr	r3, [pc, #204]	; (8006978 <HAL_RCC_OscConfig+0x4cc>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ae:	f7fd fde3 	bl	8004478 <HAL_GetTick>
 80068b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068b4:	e008      	b.n	80068c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b6:	f7fd fddf 	bl	8004478 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e06d      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068c8:	4b29      	ldr	r3, [pc, #164]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f0      	bne.n	80068b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068dc:	d108      	bne.n	80068f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80068de:	4b24      	ldr	r3, [pc, #144]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	4921      	ldr	r1, [pc, #132]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068f0:	4b1f      	ldr	r3, [pc, #124]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a19      	ldr	r1, [r3, #32]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	430b      	orrs	r3, r1
 8006902:	491b      	ldr	r1, [pc, #108]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006904:	4313      	orrs	r3, r2
 8006906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006908:	4b1b      	ldr	r3, [pc, #108]	; (8006978 <HAL_RCC_OscConfig+0x4cc>)
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800690e:	f7fd fdb3 	bl	8004478 <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006916:	f7fd fdaf 	bl	8004478 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e03d      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006928:	4b11      	ldr	r3, [pc, #68]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0f0      	beq.n	8006916 <HAL_RCC_OscConfig+0x46a>
 8006934:	e035      	b.n	80069a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006936:	4b10      	ldr	r3, [pc, #64]	; (8006978 <HAL_RCC_OscConfig+0x4cc>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800693c:	f7fd fd9c 	bl	8004478 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006944:	f7fd fd98 	bl	8004478 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e026      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006956:	4b06      	ldr	r3, [pc, #24]	; (8006970 <HAL_RCC_OscConfig+0x4c4>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f0      	bne.n	8006944 <HAL_RCC_OscConfig+0x498>
 8006962:	e01e      	b.n	80069a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d107      	bne.n	800697c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e019      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
 8006970:	40021000 	.word	0x40021000
 8006974:	40007000 	.word	0x40007000
 8006978:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800697c:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <HAL_RCC_OscConfig+0x500>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a1b      	ldr	r3, [r3, #32]
 800698c:	429a      	cmp	r2, r3
 800698e:	d106      	bne.n	800699e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800699a:	429a      	cmp	r2, r3
 800699c:	d001      	beq.n	80069a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e000      	b.n	80069a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	40021000 	.word	0x40021000

080069b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e0d0      	b.n	8006b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069c4:	4b6a      	ldr	r3, [pc, #424]	; (8006b70 <HAL_RCC_ClockConfig+0x1c0>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d910      	bls.n	80069f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069d2:	4b67      	ldr	r3, [pc, #412]	; (8006b70 <HAL_RCC_ClockConfig+0x1c0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f023 0207 	bic.w	r2, r3, #7
 80069da:	4965      	ldr	r1, [pc, #404]	; (8006b70 <HAL_RCC_ClockConfig+0x1c0>)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	4313      	orrs	r3, r2
 80069e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e2:	4b63      	ldr	r3, [pc, #396]	; (8006b70 <HAL_RCC_ClockConfig+0x1c0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d001      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e0b8      	b.n	8006b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d020      	beq.n	8006a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0304 	and.w	r3, r3, #4
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a0c:	4b59      	ldr	r3, [pc, #356]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4a58      	ldr	r2, [pc, #352]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d005      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a24:	4b53      	ldr	r3, [pc, #332]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	4a52      	ldr	r2, [pc, #328]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a30:	4b50      	ldr	r3, [pc, #320]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	494d      	ldr	r1, [pc, #308]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d040      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d107      	bne.n	8006a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a56:	4b47      	ldr	r3, [pc, #284]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d115      	bne.n	8006a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e07f      	b.n	8006b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d107      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a6e:	4b41      	ldr	r3, [pc, #260]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d109      	bne.n	8006a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e073      	b.n	8006b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a7e:	4b3d      	ldr	r3, [pc, #244]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e06b      	b.n	8006b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a8e:	4b39      	ldr	r3, [pc, #228]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f023 0203 	bic.w	r2, r3, #3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	4936      	ldr	r1, [pc, #216]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006aa0:	f7fd fcea 	bl	8004478 <HAL_GetTick>
 8006aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aa6:	e00a      	b.n	8006abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aa8:	f7fd fce6 	bl	8004478 <HAL_GetTick>
 8006aac:	4602      	mov	r2, r0
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e053      	b.n	8006b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006abe:	4b2d      	ldr	r3, [pc, #180]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f003 020c 	and.w	r2, r3, #12
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d1eb      	bne.n	8006aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ad0:	4b27      	ldr	r3, [pc, #156]	; (8006b70 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d210      	bcs.n	8006b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ade:	4b24      	ldr	r3, [pc, #144]	; (8006b70 <HAL_RCC_ClockConfig+0x1c0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f023 0207 	bic.w	r2, r3, #7
 8006ae6:	4922      	ldr	r1, [pc, #136]	; (8006b70 <HAL_RCC_ClockConfig+0x1c0>)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aee:	4b20      	ldr	r3, [pc, #128]	; (8006b70 <HAL_RCC_ClockConfig+0x1c0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	683a      	ldr	r2, [r7, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d001      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e032      	b.n	8006b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d008      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b0c:	4b19      	ldr	r3, [pc, #100]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	4916      	ldr	r1, [pc, #88]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b2a:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	490e      	ldr	r1, [pc, #56]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b3e:	f000 f821 	bl	8006b84 <HAL_RCC_GetSysClockFreq>
 8006b42:	4602      	mov	r2, r0
 8006b44:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <HAL_RCC_ClockConfig+0x1c4>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	091b      	lsrs	r3, r3, #4
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	490a      	ldr	r1, [pc, #40]	; (8006b78 <HAL_RCC_ClockConfig+0x1c8>)
 8006b50:	5ccb      	ldrb	r3, [r1, r3]
 8006b52:	fa22 f303 	lsr.w	r3, r2, r3
 8006b56:	4a09      	ldr	r2, [pc, #36]	; (8006b7c <HAL_RCC_ClockConfig+0x1cc>)
 8006b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b5a:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <HAL_RCC_ClockConfig+0x1d0>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fd fc48 	bl	80043f4 <HAL_InitTick>

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	40022000 	.word	0x40022000
 8006b74:	40021000 	.word	0x40021000
 8006b78:	0800d9dc 	.word	0x0800d9dc
 8006b7c:	20000008 	.word	0x20000008
 8006b80:	2000000c 	.word	0x2000000c

08006b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b84:	b490      	push	{r4, r7}
 8006b86:	b08a      	sub	sp, #40	; 0x28
 8006b88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b8a:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <HAL_RCC_GetSysClockFreq+0xac>)
 8006b8c:	1d3c      	adds	r4, r7, #4
 8006b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b94:	f240 2301 	movw	r3, #513	; 0x201
 8006b98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006baa:	2300      	movs	r3, #0
 8006bac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006bae:	4b21      	ldr	r3, [pc, #132]	; (8006c34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d002      	beq.n	8006bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d003      	beq.n	8006bca <HAL_RCC_GetSysClockFreq+0x46>
 8006bc2:	e02b      	b.n	8006c1c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006bc4:	4b1c      	ldr	r3, [pc, #112]	; (8006c38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006bc6:	623b      	str	r3, [r7, #32]
      break;
 8006bc8:	e02b      	b.n	8006c22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	0c9b      	lsrs	r3, r3, #18
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	3328      	adds	r3, #40	; 0x28
 8006bd4:	443b      	add	r3, r7
 8006bd6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006bda:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d012      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006be6:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	0c5b      	lsrs	r3, r3, #17
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	3328      	adds	r3, #40	; 0x28
 8006bf2:	443b      	add	r3, r7
 8006bf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006bf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	4a0e      	ldr	r2, [pc, #56]	; (8006c38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006bfe:	fb03 f202 	mul.w	r2, r3, r2
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0a:	e004      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4a0b      	ldr	r2, [pc, #44]	; (8006c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c10:	fb02 f303 	mul.w	r3, r2, r3
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	623b      	str	r3, [r7, #32]
      break;
 8006c1a:	e002      	b.n	8006c22 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c1c:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006c1e:	623b      	str	r3, [r7, #32]
      break;
 8006c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c22:	6a3b      	ldr	r3, [r7, #32]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3728      	adds	r7, #40	; 0x28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc90      	pop	{r4, r7}
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	0800d994 	.word	0x0800d994
 8006c34:	40021000 	.word	0x40021000
 8006c38:	007a1200 	.word	0x007a1200
 8006c3c:	003d0900 	.word	0x003d0900

08006c40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <RCC_Delay+0x34>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a0a      	ldr	r2, [pc, #40]	; (8006c78 <RCC_Delay+0x38>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	0a5b      	lsrs	r3, r3, #9
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c5c:	bf00      	nop
  }
  while (Delay --);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	60fa      	str	r2, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1f9      	bne.n	8006c5c <RCC_Delay+0x1c>
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr
 8006c74:	20000008 	.word	0x20000008
 8006c78:	10624dd3 	.word	0x10624dd3

08006c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d07d      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c9c:	4b4f      	ldr	r3, [pc, #316]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10d      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ca8:	4b4c      	ldr	r3, [pc, #304]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	4a4b      	ldr	r2, [pc, #300]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb2:	61d3      	str	r3, [r2, #28]
 8006cb4:	4b49      	ldr	r3, [pc, #292]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc4:	4b46      	ldr	r3, [pc, #280]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d118      	bne.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cd0:	4b43      	ldr	r3, [pc, #268]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a42      	ldr	r2, [pc, #264]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cdc:	f7fd fbcc 	bl	8004478 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce4:	f7fd fbc8 	bl	8004478 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b64      	cmp	r3, #100	; 0x64
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e06d      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf6:	4b3a      	ldr	r3, [pc, #232]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f0      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d02:	4b36      	ldr	r3, [pc, #216]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d02e      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d027      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d20:	4b2e      	ldr	r3, [pc, #184]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d28:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d2a:	4b2e      	ldr	r3, [pc, #184]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d30:	4b2c      	ldr	r3, [pc, #176]	; (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006d36:	4a29      	ldr	r2, [pc, #164]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d014      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d46:	f7fd fb97 	bl	8004478 <HAL_GetTick>
 8006d4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d4c:	e00a      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4e:	f7fd fb93 	bl	8004478 <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e036      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d64:	4b1d      	ldr	r3, [pc, #116]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0ee      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d70:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	4917      	ldr	r1, [pc, #92]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d82:	7dfb      	ldrb	r3, [r7, #23]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d105      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d88:	4b14      	ldr	r3, [pc, #80]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	4a13      	ldr	r2, [pc, #76]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d92:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d008      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006da0:	4b0e      	ldr	r3, [pc, #56]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	490b      	ldr	r1, [pc, #44]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0310 	and.w	r3, r3, #16
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d008      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006dbe:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	4904      	ldr	r1, [pc, #16]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	40007000 	.word	0x40007000
 8006de4:	42420440 	.word	0x42420440

08006de8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e076      	b.n	8006ee8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d108      	bne.n	8006e14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e0a:	d009      	beq.n	8006e20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	61da      	str	r2, [r3, #28]
 8006e12:	e005      	b.n	8006e20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fa ff4e 	bl	8001cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e72:	431a      	orrs	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ea4:	ea42 0103 	orr.w	r1, r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	0c1a      	lsrs	r2, r3, #16
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f002 0204 	and.w	r2, r2, #4
 8006ec6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69da      	ldr	r2, [r3, #28]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ed6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	603b      	str	r3, [r7, #0]
 8006efc:	4613      	mov	r3, r2
 8006efe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_SPI_Transmit+0x22>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e126      	b.n	8007160 <HAL_SPI_Transmit+0x270>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f1a:	f7fd faad 	bl	8004478 <HAL_GetTick>
 8006f1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f20:	88fb      	ldrh	r3, [r7, #6]
 8006f22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d002      	beq.n	8006f36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
 8006f32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f34:	e10b      	b.n	800714e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <HAL_SPI_Transmit+0x52>
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f46:	e102      	b.n	800714e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	88fa      	ldrh	r2, [r7, #6]
 8006f60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	88fa      	ldrh	r2, [r7, #6]
 8006f66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8e:	d10f      	bne.n	8006fb0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fba:	2b40      	cmp	r3, #64	; 0x40
 8006fbc:	d007      	beq.n	8006fce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd6:	d14b      	bne.n	8007070 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_SPI_Transmit+0xf6>
 8006fe0:	8afb      	ldrh	r3, [r7, #22]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d13e      	bne.n	8007064 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	881a      	ldrh	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	1c9a      	adds	r2, r3, #2
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800700a:	e02b      	b.n	8007064 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b02      	cmp	r3, #2
 8007018:	d112      	bne.n	8007040 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	881a      	ldrh	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702a:	1c9a      	adds	r2, r3, #2
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	b29a      	uxth	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	86da      	strh	r2, [r3, #54]	; 0x36
 800703e:	e011      	b.n	8007064 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007040:	f7fd fa1a 	bl	8004478 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d803      	bhi.n	8007058 <HAL_SPI_Transmit+0x168>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007056:	d102      	bne.n	800705e <HAL_SPI_Transmit+0x16e>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007062:	e074      	b.n	800714e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1ce      	bne.n	800700c <HAL_SPI_Transmit+0x11c>
 800706e:	e04c      	b.n	800710a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SPI_Transmit+0x18e>
 8007078:	8afb      	ldrh	r3, [r7, #22]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d140      	bne.n	8007100 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	330c      	adds	r3, #12
 8007088:	7812      	ldrb	r2, [r2, #0]
 800708a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800709a:	b29b      	uxth	r3, r3
 800709c:	3b01      	subs	r3, #1
 800709e:	b29a      	uxth	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070a4:	e02c      	b.n	8007100 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d113      	bne.n	80070dc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80070da:	e011      	b.n	8007100 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070dc:	f7fd f9cc 	bl	8004478 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d803      	bhi.n	80070f4 <HAL_SPI_Transmit+0x204>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f2:	d102      	bne.n	80070fa <HAL_SPI_Transmit+0x20a>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070fe:	e026      	b.n	800714e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1cd      	bne.n	80070a6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f8b2 	bl	8007278 <SPI_EndRxTxTransaction>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d002      	beq.n	8007120 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	613b      	str	r3, [r7, #16]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	77fb      	strb	r3, [r7, #31]
 800714a:	e000      	b.n	800714e <HAL_SPI_Transmit+0x25e>
  }

error:
 800714c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800715e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3720      	adds	r7, #32
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007178:	f7fd f97e 	bl	8004478 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	1a9b      	subs	r3, r3, r2
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	4413      	add	r3, r2
 8007186:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007188:	f7fd f976 	bl	8004478 <HAL_GetTick>
 800718c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800718e:	4b39      	ldr	r3, [pc, #228]	; (8007274 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	015b      	lsls	r3, r3, #5
 8007194:	0d1b      	lsrs	r3, r3, #20
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	fb02 f303 	mul.w	r3, r2, r3
 800719c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800719e:	e054      	b.n	800724a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a6:	d050      	beq.n	800724a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071a8:	f7fd f966 	bl	8004478 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d902      	bls.n	80071be <SPI_WaitFlagStateUntilTimeout+0x56>
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d13d      	bne.n	800723a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071d6:	d111      	bne.n	80071fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e0:	d004      	beq.n	80071ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ea:	d107      	bne.n	80071fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007204:	d10f      	bne.n	8007226 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007224:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e017      	b.n	800726a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d101      	bne.n	8007244 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	3b01      	subs	r3, #1
 8007248:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	4013      	ands	r3, r2
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	429a      	cmp	r2, r3
 8007258:	bf0c      	ite	eq
 800725a:	2301      	moveq	r3, #1
 800725c:	2300      	movne	r3, #0
 800725e:	b2db      	uxtb	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	429a      	cmp	r2, r3
 8007266:	d19b      	bne.n	80071a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3720      	adds	r7, #32
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000008 	.word	0x20000008

08007278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af02      	add	r7, sp, #8
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2200      	movs	r2, #0
 800728c:	2180      	movs	r1, #128	; 0x80
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff ff6a 	bl	8007168 <SPI_WaitFlagStateUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d007      	beq.n	80072aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729e:	f043 0220 	orr.w	r2, r3, #32
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e000      	b.n	80072ac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e041      	b.n	800734a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d106      	bne.n	80072e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fa fd3c 	bl	8001d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f000 fcba 	bl	8007c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b01      	cmp	r3, #1
 8007366:	d001      	beq.n	800736c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e03a      	b.n	80073e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a18      	ldr	r2, [pc, #96]	; (80073ec <HAL_TIM_Base_Start_IT+0x98>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00e      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x58>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007396:	d009      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x58>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a14      	ldr	r2, [pc, #80]	; (80073f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d004      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x58>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a13      	ldr	r2, [pc, #76]	; (80073f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d111      	bne.n	80073d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b06      	cmp	r3, #6
 80073bc:	d010      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0201 	orr.w	r2, r2, #1
 80073cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ce:	e007      	b.n	80073e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr
 80073ec:	40012c00 	.word	0x40012c00
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800

080073f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0201 	bic.w	r2, r2, #1
 800740e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6a1a      	ldr	r2, [r3, #32]
 8007416:	f241 1311 	movw	r3, #4369	; 0x1111
 800741a:	4013      	ands	r3, r2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10f      	bne.n	8007440 <HAL_TIM_Base_Stop_IT+0x48>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6a1a      	ldr	r2, [r3, #32]
 8007426:	f240 4344 	movw	r3, #1092	; 0x444
 800742a:	4013      	ands	r3, r2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d107      	bne.n	8007440 <HAL_TIM_Base_Stop_IT+0x48>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	bc80      	pop	{r7}
 8007452:	4770      	bx	lr

08007454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e041      	b.n	80074ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f839 	bl	80074f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3304      	adds	r3, #4
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f000 fbea 	bl	8007c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr

08007504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <HAL_TIM_PWM_Start+0x24>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b01      	cmp	r3, #1
 800751e:	bf14      	ite	ne
 8007520:	2301      	movne	r3, #1
 8007522:	2300      	moveq	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	e022      	b.n	800756e <HAL_TIM_PWM_Start+0x6a>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b04      	cmp	r3, #4
 800752c:	d109      	bne.n	8007542 <HAL_TIM_PWM_Start+0x3e>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b01      	cmp	r3, #1
 8007538:	bf14      	ite	ne
 800753a:	2301      	movne	r3, #1
 800753c:	2300      	moveq	r3, #0
 800753e:	b2db      	uxtb	r3, r3
 8007540:	e015      	b.n	800756e <HAL_TIM_PWM_Start+0x6a>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b08      	cmp	r3, #8
 8007546:	d109      	bne.n	800755c <HAL_TIM_PWM_Start+0x58>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b01      	cmp	r3, #1
 8007552:	bf14      	ite	ne
 8007554:	2301      	movne	r3, #1
 8007556:	2300      	moveq	r3, #0
 8007558:	b2db      	uxtb	r3, r3
 800755a:	e008      	b.n	800756e <HAL_TIM_PWM_Start+0x6a>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	bf14      	ite	ne
 8007568:	2301      	movne	r3, #1
 800756a:	2300      	moveq	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e05e      	b.n	8007634 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d104      	bne.n	8007586 <HAL_TIM_PWM_Start+0x82>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007584:	e013      	b.n	80075ae <HAL_TIM_PWM_Start+0xaa>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b04      	cmp	r3, #4
 800758a:	d104      	bne.n	8007596 <HAL_TIM_PWM_Start+0x92>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007594:	e00b      	b.n	80075ae <HAL_TIM_PWM_Start+0xaa>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b08      	cmp	r3, #8
 800759a:	d104      	bne.n	80075a6 <HAL_TIM_PWM_Start+0xa2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075a4:	e003      	b.n	80075ae <HAL_TIM_PWM_Start+0xaa>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2202      	movs	r2, #2
 80075aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2201      	movs	r2, #1
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fdd8 	bl	800816c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1e      	ldr	r2, [pc, #120]	; (800763c <HAL_TIM_PWM_Start+0x138>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d107      	bne.n	80075d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a18      	ldr	r2, [pc, #96]	; (800763c <HAL_TIM_PWM_Start+0x138>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00e      	beq.n	80075fe <HAL_TIM_PWM_Start+0xfa>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e8:	d009      	beq.n	80075fe <HAL_TIM_PWM_Start+0xfa>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a14      	ldr	r2, [pc, #80]	; (8007640 <HAL_TIM_PWM_Start+0x13c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d004      	beq.n	80075fe <HAL_TIM_PWM_Start+0xfa>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a12      	ldr	r2, [pc, #72]	; (8007644 <HAL_TIM_PWM_Start+0x140>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d111      	bne.n	8007622 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b06      	cmp	r3, #6
 800760e:	d010      	beq.n	8007632 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007620:	e007      	b.n	8007632 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0201 	orr.w	r2, r2, #1
 8007630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40012c00 	.word	0x40012c00
 8007640:	40000400 	.word	0x40000400
 8007644:	40000800 	.word	0x40000800

08007648 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2200      	movs	r2, #0
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fd86 	bl	800816c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a29      	ldr	r2, [pc, #164]	; (800770c <HAL_TIM_PWM_Stop+0xc4>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d117      	bne.n	800769a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6a1a      	ldr	r2, [r3, #32]
 8007670:	f241 1311 	movw	r3, #4369	; 0x1111
 8007674:	4013      	ands	r3, r2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10f      	bne.n	800769a <HAL_TIM_PWM_Stop+0x52>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6a1a      	ldr	r2, [r3, #32]
 8007680:	f240 4344 	movw	r3, #1092	; 0x444
 8007684:	4013      	ands	r3, r2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d107      	bne.n	800769a <HAL_TIM_PWM_Stop+0x52>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007698:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6a1a      	ldr	r2, [r3, #32]
 80076a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80076a4:	4013      	ands	r3, r2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10f      	bne.n	80076ca <HAL_TIM_PWM_Stop+0x82>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6a1a      	ldr	r2, [r3, #32]
 80076b0:	f240 4344 	movw	r3, #1092	; 0x444
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d107      	bne.n	80076ca <HAL_TIM_PWM_Stop+0x82>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0201 	bic.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <HAL_TIM_PWM_Stop+0x92>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d8:	e013      	b.n	8007702 <HAL_TIM_PWM_Stop+0xba>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d104      	bne.n	80076ea <HAL_TIM_PWM_Stop+0xa2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076e8:	e00b      	b.n	8007702 <HAL_TIM_PWM_Stop+0xba>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	2b08      	cmp	r3, #8
 80076ee:	d104      	bne.n	80076fa <HAL_TIM_PWM_Stop+0xb2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f8:	e003      	b.n	8007702 <HAL_TIM_PWM_Stop+0xba>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40012c00 	.word	0x40012c00

08007710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b02      	cmp	r3, #2
 8007724:	d122      	bne.n	800776c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b02      	cmp	r3, #2
 8007732:	d11b      	bne.n	800776c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0202 	mvn.w	r2, #2
 800773c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa6f 	bl	8007c36 <HAL_TIM_IC_CaptureCallback>
 8007758:	e005      	b.n	8007766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa62 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fa71 	bl	8007c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f003 0304 	and.w	r3, r3, #4
 8007776:	2b04      	cmp	r3, #4
 8007778:	d122      	bne.n	80077c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	2b04      	cmp	r3, #4
 8007786:	d11b      	bne.n	80077c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f06f 0204 	mvn.w	r2, #4
 8007790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa45 	bl	8007c36 <HAL_TIM_IC_CaptureCallback>
 80077ac:	e005      	b.n	80077ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa38 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fa47 	bl	8007c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b08      	cmp	r3, #8
 80077cc:	d122      	bne.n	8007814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f003 0308 	and.w	r3, r3, #8
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d11b      	bne.n	8007814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0208 	mvn.w	r2, #8
 80077e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2204      	movs	r2, #4
 80077ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa1b 	bl	8007c36 <HAL_TIM_IC_CaptureCallback>
 8007800:	e005      	b.n	800780e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fa0e 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fa1d 	bl	8007c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0310 	and.w	r3, r3, #16
 800781e:	2b10      	cmp	r3, #16
 8007820:	d122      	bne.n	8007868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f003 0310 	and.w	r3, r3, #16
 800782c:	2b10      	cmp	r3, #16
 800782e:	d11b      	bne.n	8007868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f06f 0210 	mvn.w	r2, #16
 8007838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2208      	movs	r2, #8
 800783e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f9f1 	bl	8007c36 <HAL_TIM_IC_CaptureCallback>
 8007854:	e005      	b.n	8007862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f9e4 	bl	8007c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f9f3 	bl	8007c48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b01      	cmp	r3, #1
 8007874:	d10e      	bne.n	8007894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b01      	cmp	r3, #1
 8007882:	d107      	bne.n	8007894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0201 	mvn.w	r2, #1
 800788c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7f8 fd38 	bl	8000304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789e:	2b80      	cmp	r3, #128	; 0x80
 80078a0:	d10e      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ac:	2b80      	cmp	r3, #128	; 0x80
 80078ae:	d107      	bne.n	80078c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fd32 	bl	8008324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d10e      	bne.n	80078ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	d107      	bne.n	80078ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f9b7 	bl	8007c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d10e      	bne.n	8007918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b20      	cmp	r3, #32
 8007906:	d107      	bne.n	8007918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f06f 0220 	mvn.w	r2, #32
 8007910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fcfd 	bl	8008312 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007918:	bf00      	nop
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007936:	2302      	movs	r3, #2
 8007938:	e0ac      	b.n	8007a94 <HAL_TIM_PWM_ConfigChannel+0x174>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b0c      	cmp	r3, #12
 8007946:	f200 809f 	bhi.w	8007a88 <HAL_TIM_PWM_ConfigChannel+0x168>
 800794a:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	08007985 	.word	0x08007985
 8007954:	08007a89 	.word	0x08007a89
 8007958:	08007a89 	.word	0x08007a89
 800795c:	08007a89 	.word	0x08007a89
 8007960:	080079c5 	.word	0x080079c5
 8007964:	08007a89 	.word	0x08007a89
 8007968:	08007a89 	.word	0x08007a89
 800796c:	08007a89 	.word	0x08007a89
 8007970:	08007a07 	.word	0x08007a07
 8007974:	08007a89 	.word	0x08007a89
 8007978:	08007a89 	.word	0x08007a89
 800797c:	08007a89 	.word	0x08007a89
 8007980:	08007a47 	.word	0x08007a47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68b9      	ldr	r1, [r7, #8]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 f9d0 	bl	8007d30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	699a      	ldr	r2, [r3, #24]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0208 	orr.w	r2, r2, #8
 800799e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	699a      	ldr	r2, [r3, #24]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0204 	bic.w	r2, r2, #4
 80079ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6999      	ldr	r1, [r3, #24]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	691a      	ldr	r2, [r3, #16]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	619a      	str	r2, [r3, #24]
      break;
 80079c2:	e062      	b.n	8007a8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fa16 	bl	8007dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	699a      	ldr	r2, [r3, #24]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6999      	ldr	r1, [r3, #24]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	021a      	lsls	r2, r3, #8
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	619a      	str	r2, [r3, #24]
      break;
 8007a04:	e041      	b.n	8007a8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fa5f 	bl	8007ed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69da      	ldr	r2, [r3, #28]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0208 	orr.w	r2, r2, #8
 8007a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69da      	ldr	r2, [r3, #28]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0204 	bic.w	r2, r2, #4
 8007a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69d9      	ldr	r1, [r3, #28]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	61da      	str	r2, [r3, #28]
      break;
 8007a44:	e021      	b.n	8007a8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 faa9 	bl	8007fa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69da      	ldr	r2, [r3, #28]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69da      	ldr	r2, [r3, #28]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	69d9      	ldr	r1, [r3, #28]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	021a      	lsls	r2, r3, #8
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	61da      	str	r2, [r3, #28]
      break;
 8007a86:	e000      	b.n	8007a8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007a88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_TIM_ConfigClockSource+0x18>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e0b3      	b.n	8007c1c <HAL_TIM_ConfigClockSource+0x180>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ada:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aec:	d03e      	beq.n	8007b6c <HAL_TIM_ConfigClockSource+0xd0>
 8007aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af2:	f200 8087 	bhi.w	8007c04 <HAL_TIM_ConfigClockSource+0x168>
 8007af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afa:	f000 8085 	beq.w	8007c08 <HAL_TIM_ConfigClockSource+0x16c>
 8007afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b02:	d87f      	bhi.n	8007c04 <HAL_TIM_ConfigClockSource+0x168>
 8007b04:	2b70      	cmp	r3, #112	; 0x70
 8007b06:	d01a      	beq.n	8007b3e <HAL_TIM_ConfigClockSource+0xa2>
 8007b08:	2b70      	cmp	r3, #112	; 0x70
 8007b0a:	d87b      	bhi.n	8007c04 <HAL_TIM_ConfigClockSource+0x168>
 8007b0c:	2b60      	cmp	r3, #96	; 0x60
 8007b0e:	d050      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0x116>
 8007b10:	2b60      	cmp	r3, #96	; 0x60
 8007b12:	d877      	bhi.n	8007c04 <HAL_TIM_ConfigClockSource+0x168>
 8007b14:	2b50      	cmp	r3, #80	; 0x50
 8007b16:	d03c      	beq.n	8007b92 <HAL_TIM_ConfigClockSource+0xf6>
 8007b18:	2b50      	cmp	r3, #80	; 0x50
 8007b1a:	d873      	bhi.n	8007c04 <HAL_TIM_ConfigClockSource+0x168>
 8007b1c:	2b40      	cmp	r3, #64	; 0x40
 8007b1e:	d058      	beq.n	8007bd2 <HAL_TIM_ConfigClockSource+0x136>
 8007b20:	2b40      	cmp	r3, #64	; 0x40
 8007b22:	d86f      	bhi.n	8007c04 <HAL_TIM_ConfigClockSource+0x168>
 8007b24:	2b30      	cmp	r3, #48	; 0x30
 8007b26:	d064      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0x156>
 8007b28:	2b30      	cmp	r3, #48	; 0x30
 8007b2a:	d86b      	bhi.n	8007c04 <HAL_TIM_ConfigClockSource+0x168>
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d060      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0x156>
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d867      	bhi.n	8007c04 <HAL_TIM_ConfigClockSource+0x168>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d05c      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0x156>
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d05a      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007b3c:	e062      	b.n	8007c04 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	6899      	ldr	r1, [r3, #8]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f000 faee 	bl	800812e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	609a      	str	r2, [r3, #8]
      break;
 8007b6a:	e04e      	b.n	8007c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	6899      	ldr	r1, [r3, #8]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f000 fad7 	bl	800812e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b8e:	609a      	str	r2, [r3, #8]
      break;
 8007b90:	e03b      	b.n	8007c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6818      	ldr	r0, [r3, #0]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	6859      	ldr	r1, [r3, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f000 fa4e 	bl	8008040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2150      	movs	r1, #80	; 0x50
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 faa5 	bl	80080fa <TIM_ITRx_SetConfig>
      break;
 8007bb0:	e02b      	b.n	8007c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	6859      	ldr	r1, [r3, #4]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f000 fa6c 	bl	800809c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2160      	movs	r1, #96	; 0x60
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 fa95 	bl	80080fa <TIM_ITRx_SetConfig>
      break;
 8007bd0:	e01b      	b.n	8007c0a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6818      	ldr	r0, [r3, #0]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6859      	ldr	r1, [r3, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f000 fa2e 	bl	8008040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2140      	movs	r1, #64	; 0x40
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fa85 	bl	80080fa <TIM_ITRx_SetConfig>
      break;
 8007bf0:	e00b      	b.n	8007c0a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	f000 fa7c 	bl	80080fa <TIM_ITRx_SetConfig>
        break;
 8007c02:	e002      	b.n	8007c0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007c04:	bf00      	nop
 8007c06:	e000      	b.n	8007c0a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007c08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr

08007c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bc80      	pop	{r7}
 8007c46:	4770      	bx	lr

08007c48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr

08007c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr

08007c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a29      	ldr	r2, [pc, #164]	; (8007d24 <TIM_Base_SetConfig+0xb8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00b      	beq.n	8007c9c <TIM_Base_SetConfig+0x30>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8a:	d007      	beq.n	8007c9c <TIM_Base_SetConfig+0x30>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a26      	ldr	r2, [pc, #152]	; (8007d28 <TIM_Base_SetConfig+0xbc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d003      	beq.n	8007c9c <TIM_Base_SetConfig+0x30>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a25      	ldr	r2, [pc, #148]	; (8007d2c <TIM_Base_SetConfig+0xc0>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d108      	bne.n	8007cae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a1c      	ldr	r2, [pc, #112]	; (8007d24 <TIM_Base_SetConfig+0xb8>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d00b      	beq.n	8007cce <TIM_Base_SetConfig+0x62>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cbc:	d007      	beq.n	8007cce <TIM_Base_SetConfig+0x62>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a19      	ldr	r2, [pc, #100]	; (8007d28 <TIM_Base_SetConfig+0xbc>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d003      	beq.n	8007cce <TIM_Base_SetConfig+0x62>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a18      	ldr	r2, [pc, #96]	; (8007d2c <TIM_Base_SetConfig+0xc0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d108      	bne.n	8007ce0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	695b      	ldr	r3, [r3, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a07      	ldr	r2, [pc, #28]	; (8007d24 <TIM_Base_SetConfig+0xb8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d103      	bne.n	8007d14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	615a      	str	r2, [r3, #20]
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr
 8007d24:	40012c00 	.word	0x40012c00
 8007d28:	40000400 	.word	0x40000400
 8007d2c:	40000800 	.word	0x40000800

08007d30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	f023 0201 	bic.w	r2, r3, #1
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0303 	bic.w	r3, r3, #3
 8007d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f023 0302 	bic.w	r3, r3, #2
 8007d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a1c      	ldr	r2, [pc, #112]	; (8007df8 <TIM_OC1_SetConfig+0xc8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d10c      	bne.n	8007da6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f023 0308 	bic.w	r3, r3, #8
 8007d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f023 0304 	bic.w	r3, r3, #4
 8007da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a13      	ldr	r2, [pc, #76]	; (8007df8 <TIM_OC1_SetConfig+0xc8>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d111      	bne.n	8007dd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	621a      	str	r2, [r3, #32]
}
 8007dec:	bf00      	nop
 8007dee:	371c      	adds	r7, #28
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	40012c00 	.word	0x40012c00

08007dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	f023 0210 	bic.w	r2, r3, #16
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f023 0320 	bic.w	r3, r3, #32
 8007e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	011b      	lsls	r3, r3, #4
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a1d      	ldr	r2, [pc, #116]	; (8007ecc <TIM_OC2_SetConfig+0xd0>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d10d      	bne.n	8007e78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a14      	ldr	r2, [pc, #80]	; (8007ecc <TIM_OC2_SetConfig+0xd0>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d113      	bne.n	8007ea8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	621a      	str	r2, [r3, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	40012c00 	.word	0x40012c00

08007ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f023 0303 	bic.w	r3, r3, #3
 8007f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	021b      	lsls	r3, r3, #8
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a1d      	ldr	r2, [pc, #116]	; (8007fa0 <TIM_OC3_SetConfig+0xd0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d10d      	bne.n	8007f4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	021b      	lsls	r3, r3, #8
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a14      	ldr	r2, [pc, #80]	; (8007fa0 <TIM_OC3_SetConfig+0xd0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d113      	bne.n	8007f7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	011b      	lsls	r3, r3, #4
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	621a      	str	r2, [r3, #32]
}
 8007f94:	bf00      	nop
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	40012c00 	.word	0x40012c00

08007fa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	031b      	lsls	r3, r3, #12
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a0f      	ldr	r2, [pc, #60]	; (800803c <TIM_OC4_SetConfig+0x98>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d109      	bne.n	8008018 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800800a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	019b      	lsls	r3, r3, #6
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	621a      	str	r2, [r3, #32]
}
 8008032:	bf00      	nop
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr
 800803c:	40012c00 	.word	0x40012c00

08008040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	f023 0201 	bic.w	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800806a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	011b      	lsls	r3, r3, #4
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f023 030a 	bic.w	r3, r3, #10
 800807c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	621a      	str	r2, [r3, #32]
}
 8008092:	bf00      	nop
 8008094:	371c      	adds	r7, #28
 8008096:	46bd      	mov	sp, r7
 8008098:	bc80      	pop	{r7}
 800809a:	4770      	bx	lr

0800809c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	f023 0210 	bic.w	r2, r3, #16
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	031b      	lsls	r3, r3, #12
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	621a      	str	r2, [r3, #32]
}
 80080f0:	bf00      	nop
 80080f2:	371c      	adds	r7, #28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr

080080fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008110:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4313      	orrs	r3, r2
 8008118:	f043 0307 	orr.w	r3, r3, #7
 800811c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	609a      	str	r2, [r3, #8]
}
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr

0800812e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800812e:	b480      	push	{r7}
 8008130:	b087      	sub	sp, #28
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	607a      	str	r2, [r7, #4]
 800813a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008148:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	021a      	lsls	r2, r3, #8
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	431a      	orrs	r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4313      	orrs	r3, r2
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4313      	orrs	r3, r2
 800815a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	609a      	str	r2, [r3, #8]
}
 8008162:	bf00      	nop
 8008164:	371c      	adds	r7, #28
 8008166:	46bd      	mov	sp, r7
 8008168:	bc80      	pop	{r7}
 800816a:	4770      	bx	lr

0800816c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f003 031f 	and.w	r3, r3, #31
 800817e:	2201      	movs	r2, #1
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a1a      	ldr	r2, [r3, #32]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	43db      	mvns	r3, r3
 800818e:	401a      	ands	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a1a      	ldr	r2, [r3, #32]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	fa01 f303 	lsl.w	r3, r1, r3
 80081a4:	431a      	orrs	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bc80      	pop	{r7}
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081c8:	2302      	movs	r3, #2
 80081ca:	e046      	b.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a16      	ldr	r2, [pc, #88]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00e      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008218:	d009      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a12      	ldr	r2, [pc, #72]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d004      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a10      	ldr	r2, [pc, #64]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d10c      	bne.n	8008248 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	4313      	orrs	r3, r2
 800823e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr
 8008264:	40012c00 	.word	0x40012c00
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800

08008270 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008284:	2b01      	cmp	r3, #1
 8008286:	d101      	bne.n	800828c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008288:	2302      	movs	r3, #2
 800828a:	e03d      	b.n	8008308 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	bc80      	pop	{r7}
 8008310:	4770      	bx	lr

08008312 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	bc80      	pop	{r7}
 8008334:	4770      	bx	lr

08008336 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008336:	b084      	sub	sp, #16
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	f107 0014 	add.w	r0, r7, #20
 8008344:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	b004      	add	sp, #16
 8008354:	4770      	bx	lr

08008356 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008366:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800836a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr

08008382 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008382:	b480      	push	{r7}
 8008384:	b085      	sub	sp, #20
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800838a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800838e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008396:	b29a      	uxth	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	b29b      	uxth	r3, r3
 800839c:	43db      	mvns	r3, r3
 800839e:	b29b      	uxth	r3, r3
 80083a0:	4013      	ands	r3, r2
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bc80      	pop	{r7}
 80083b4:	4770      	bx	lr

080083b6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr

080083ce <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80083ce:	b084      	sub	sp, #16
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	f107 0014 	add.w	r0, r7, #20
 80083dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	bc80      	pop	{r7}
 800840a:	b004      	add	sp, #16
 800840c:	4770      	bx	lr
	...

08008410 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008410:	b480      	push	{r7}
 8008412:	b09b      	sub	sp, #108	; 0x6c
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008436:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	78db      	ldrb	r3, [r3, #3]
 800843e:	2b03      	cmp	r3, #3
 8008440:	d81f      	bhi.n	8008482 <USB_ActivateEndpoint+0x72>
 8008442:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <USB_ActivateEndpoint+0x38>)
 8008444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008448:	08008459 	.word	0x08008459
 800844c:	08008475 	.word	0x08008475
 8008450:	0800848b 	.word	0x0800848b
 8008454:	08008467 	.word	0x08008467
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008458:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800845c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008460:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008464:	e012      	b.n	800848c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008466:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800846a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800846e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008472:	e00b      	b.n	800848c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008474:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800847c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008480:	e004      	b.n	800848c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008488:	e000      	b.n	800848c <USB_ActivateEndpoint+0x7c>
      break;
 800848a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	441a      	add	r2, r3
 8008496:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800849a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	4313      	orrs	r3, r2
 80084ce:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	441a      	add	r2, r3
 80084dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80084e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	7b1b      	ldrb	r3, [r3, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f040 8149 	bne.w	8008790 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 8084 	beq.w	8008610 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008512:	b29b      	uxth	r3, r3
 8008514:	461a      	mov	r2, r3
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	4413      	add	r3, r2
 800851a:	617b      	str	r3, [r7, #20]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	011a      	lsls	r2, r3, #4
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800852a:	613b      	str	r3, [r7, #16]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	88db      	ldrh	r3, [r3, #6]
 8008530:	085b      	lsrs	r3, r3, #1
 8008532:	b29b      	uxth	r3, r3
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	81fb      	strh	r3, [r7, #14]
 800854a:	89fb      	ldrh	r3, [r7, #14]
 800854c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01b      	beq.n	800858c <USB_ActivateEndpoint+0x17c>
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	b29b      	uxth	r3, r3
 8008562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856a:	81bb      	strh	r3, [r7, #12]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	441a      	add	r2, r3
 8008576:	89bb      	ldrh	r3, [r7, #12]
 8008578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800857c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008584:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008588:	b29b      	uxth	r3, r3
 800858a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	78db      	ldrb	r3, [r3, #3]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d020      	beq.n	80085d6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085aa:	813b      	strh	r3, [r7, #8]
 80085ac:	893b      	ldrh	r3, [r7, #8]
 80085ae:	f083 0320 	eor.w	r3, r3, #32
 80085b2:	813b      	strh	r3, [r7, #8]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	441a      	add	r2, r3
 80085be:	893b      	ldrh	r3, [r7, #8]
 80085c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	8013      	strh	r3, [r2, #0]
 80085d4:	e27f      	b.n	8008ad6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ec:	817b      	strh	r3, [r7, #10]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	441a      	add	r2, r3
 80085f8:	897b      	ldrh	r3, [r7, #10]
 80085fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800860a:	b29b      	uxth	r3, r3
 800860c:	8013      	strh	r3, [r2, #0]
 800860e:	e262      	b.n	8008ad6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800861a:	b29b      	uxth	r3, r3
 800861c:	461a      	mov	r2, r3
 800861e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008620:	4413      	add	r3, r2
 8008622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	011a      	lsls	r2, r3, #4
 800862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862c:	4413      	add	r3, r2
 800862e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008632:	62bb      	str	r3, [r7, #40]	; 0x28
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	88db      	ldrh	r3, [r3, #6]
 8008638:	085b      	lsrs	r3, r3, #1
 800863a:	b29b      	uxth	r3, r3
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	b29a      	uxth	r2, r3
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800864e:	b29b      	uxth	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	4413      	add	r3, r2
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	011a      	lsls	r2, r3, #4
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	4413      	add	r3, r2
 8008662:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008666:	623b      	str	r3, [r7, #32]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d112      	bne.n	8008696 <USB_ActivateEndpoint+0x286>
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	b29b      	uxth	r3, r3
 8008676:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800867a:	b29a      	uxth	r2, r3
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	801a      	strh	r2, [r3, #0]
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	b29b      	uxth	r3, r3
 8008686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800868a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800868e:	b29a      	uxth	r2, r3
 8008690:	6a3b      	ldr	r3, [r7, #32]
 8008692:	801a      	strh	r2, [r3, #0]
 8008694:	e02f      	b.n	80086f6 <USB_ActivateEndpoint+0x2e6>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	2b3e      	cmp	r3, #62	; 0x3e
 800869c:	d813      	bhi.n	80086c6 <USB_ActivateEndpoint+0x2b6>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	085b      	lsrs	r3, r3, #1
 80086a4:	663b      	str	r3, [r7, #96]	; 0x60
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <USB_ActivateEndpoint+0x2a8>
 80086b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086b4:	3301      	adds	r3, #1
 80086b6:	663b      	str	r3, [r7, #96]	; 0x60
 80086b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	029b      	lsls	r3, r3, #10
 80086be:	b29a      	uxth	r2, r3
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	801a      	strh	r2, [r3, #0]
 80086c4:	e017      	b.n	80086f6 <USB_ActivateEndpoint+0x2e6>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	095b      	lsrs	r3, r3, #5
 80086cc:	663b      	str	r3, [r7, #96]	; 0x60
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d102      	bne.n	80086e0 <USB_ActivateEndpoint+0x2d0>
 80086da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086dc:	3b01      	subs	r3, #1
 80086de:	663b      	str	r3, [r7, #96]	; 0x60
 80086e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	029b      	lsls	r3, r3, #10
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	83fb      	strh	r3, [r7, #30]
 8008704:	8bfb      	ldrh	r3, [r7, #30]
 8008706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d01b      	beq.n	8008746 <USB_ActivateEndpoint+0x336>
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	b29b      	uxth	r3, r3
 800871c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008724:	83bb      	strh	r3, [r7, #28]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	441a      	add	r2, r3
 8008730:	8bbb      	ldrh	r3, [r7, #28]
 8008732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800873a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800873e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008742:	b29b      	uxth	r3, r3
 8008744:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	b29b      	uxth	r3, r3
 8008754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875c:	837b      	strh	r3, [r7, #26]
 800875e:	8b7b      	ldrh	r3, [r7, #26]
 8008760:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008764:	837b      	strh	r3, [r7, #26]
 8008766:	8b7b      	ldrh	r3, [r7, #26]
 8008768:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800876c:	837b      	strh	r3, [r7, #26]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	441a      	add	r2, r3
 8008778:	8b7b      	ldrh	r3, [r7, #26]
 800877a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800877e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878a:	b29b      	uxth	r3, r3
 800878c:	8013      	strh	r3, [r2, #0]
 800878e:	e1a2      	b.n	8008ad6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	b29b      	uxth	r3, r3
 800879e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	441a      	add	r2, r3
 80087b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80087b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80087c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	461a      	mov	r2, r3
 80087da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087dc:	4413      	add	r3, r2
 80087de:	65bb      	str	r3, [r7, #88]	; 0x58
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	011a      	lsls	r2, r3, #4
 80087e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ee:	657b      	str	r3, [r7, #84]	; 0x54
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	891b      	ldrh	r3, [r3, #8]
 80087f4:	085b      	lsrs	r3, r3, #1
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	653b      	str	r3, [r7, #80]	; 0x50
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800880a:	b29b      	uxth	r3, r3
 800880c:	461a      	mov	r2, r3
 800880e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008810:	4413      	add	r3, r2
 8008812:	653b      	str	r3, [r7, #80]	; 0x50
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	011a      	lsls	r2, r3, #4
 800881a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800881c:	4413      	add	r3, r2
 800881e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	895b      	ldrh	r3, [r3, #10]
 8008828:	085b      	lsrs	r3, r3, #1
 800882a:	b29b      	uxth	r3, r3
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008832:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	785b      	ldrb	r3, [r3, #1]
 8008838:	2b00      	cmp	r3, #0
 800883a:	f040 8091 	bne.w	8008960 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800884c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800884e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d01b      	beq.n	800888e <USB_ActivateEndpoint+0x47e>
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	b29b      	uxth	r3, r3
 8008864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800886c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	441a      	add	r2, r3
 8008878:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800887a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800887e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888a:	b29b      	uxth	r3, r3
 800888c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	881b      	ldrh	r3, [r3, #0]
 800889a:	873b      	strh	r3, [r7, #56]	; 0x38
 800889c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800889e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d01b      	beq.n	80088de <USB_ActivateEndpoint+0x4ce>
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	441a      	add	r2, r3
 80088c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088da:	b29b      	uxth	r3, r3
 80088dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80088f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80088f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80088fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008900:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008904:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	441a      	add	r2, r3
 8008910:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008912:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008916:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800891a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008922:	b29b      	uxth	r3, r3
 8008924:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800893c:	867b      	strh	r3, [r7, #50]	; 0x32
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	441a      	add	r2, r3
 8008948:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800894a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800894e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895a:	b29b      	uxth	r3, r3
 800895c:	8013      	strh	r3, [r2, #0]
 800895e:	e0ba      	b.n	8008ad6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008970:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01d      	beq.n	80089b8 <USB_ActivateEndpoint+0x5a8>
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	b29b      	uxth	r3, r3
 800898a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800898e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008992:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	441a      	add	r2, r3
 80089a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80089a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	881b      	ldrh	r3, [r3, #0]
 80089c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80089c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80089cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01d      	beq.n	8008a10 <USB_ActivateEndpoint+0x600>
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	441a      	add	r2, r3
 80089f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80089fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	78db      	ldrb	r3, [r3, #3]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d024      	beq.n	8008a62 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	881b      	ldrh	r3, [r3, #0]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008a32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008a36:	f083 0320 	eor.w	r3, r3, #32
 8008a3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	441a      	add	r2, r3
 8008a48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	8013      	strh	r3, [r2, #0]
 8008a60:	e01d      	b.n	8008a9e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	441a      	add	r2, r3
 8008a86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	441a      	add	r2, r3
 8008ac0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008ad6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	376c      	adds	r7, #108	; 0x6c
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bc80      	pop	{r7}
 8008ae2:	4770      	bx	lr

08008ae4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b08d      	sub	sp, #52	; 0x34
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	7b1b      	ldrb	r3, [r3, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f040 808e 	bne.w	8008c14 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d044      	beq.n	8008b8a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	881b      	ldrh	r3, [r3, #0]
 8008b0c:	81bb      	strh	r3, [r7, #12]
 8008b0e:	89bb      	ldrh	r3, [r7, #12]
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01b      	beq.n	8008b50 <USB_DeactivateEndpoint+0x6c>
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b2e:	817b      	strh	r3, [r7, #10]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	441a      	add	r2, r3
 8008b3a:	897b      	ldrh	r3, [r7, #10]
 8008b3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b66:	813b      	strh	r3, [r7, #8]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	441a      	add	r2, r3
 8008b72:	893b      	ldrh	r3, [r7, #8]
 8008b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	8013      	strh	r3, [r2, #0]
 8008b88:	e192      	b.n	8008eb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	827b      	strh	r3, [r7, #18]
 8008b98:	8a7b      	ldrh	r3, [r7, #18]
 8008b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d01b      	beq.n	8008bda <USB_DeactivateEndpoint+0xf6>
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb8:	823b      	strh	r3, [r7, #16]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	441a      	add	r2, r3
 8008bc4:	8a3b      	ldrh	r3, [r7, #16]
 8008bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf0:	81fb      	strh	r3, [r7, #14]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	441a      	add	r2, r3
 8008bfc:	89fb      	ldrh	r3, [r7, #14]
 8008bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	8013      	strh	r3, [r2, #0]
 8008c12:	e14d      	b.n	8008eb0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	785b      	ldrb	r3, [r3, #1]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f040 80a5 	bne.w	8008d68 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	843b      	strh	r3, [r7, #32]
 8008c2c:	8c3b      	ldrh	r3, [r7, #32]
 8008c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d01b      	beq.n	8008c6e <USB_DeactivateEndpoint+0x18a>
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c4c:	83fb      	strh	r3, [r7, #30]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	009b      	lsls	r3, r3, #2
 8008c56:	441a      	add	r2, r3
 8008c58:	8bfb      	ldrh	r3, [r7, #30]
 8008c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	83bb      	strh	r3, [r7, #28]
 8008c7c:	8bbb      	ldrh	r3, [r7, #28]
 8008c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d01b      	beq.n	8008cbe <USB_DeactivateEndpoint+0x1da>
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9c:	837b      	strh	r3, [r7, #26]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	441a      	add	r2, r3
 8008ca8:	8b7b      	ldrh	r3, [r7, #26]
 8008caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd4:	833b      	strh	r3, [r7, #24]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	441a      	add	r2, r3
 8008ce0:	8b3b      	ldrh	r3, [r7, #24]
 8008ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0c:	82fb      	strh	r3, [r7, #22]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	441a      	add	r2, r3
 8008d18:	8afb      	ldrh	r3, [r7, #22]
 8008d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d44:	82bb      	strh	r3, [r7, #20]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	441a      	add	r2, r3
 8008d50:	8abb      	ldrh	r3, [r7, #20]
 8008d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	8013      	strh	r3, [r2, #0]
 8008d66:	e0a3      	b.n	8008eb0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	881b      	ldrh	r3, [r3, #0]
 8008d74:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008d76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01b      	beq.n	8008db8 <USB_DeactivateEndpoint+0x2d4>
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d96:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	441a      	add	r2, r3
 8008da2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008dc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d01b      	beq.n	8008e08 <USB_DeactivateEndpoint+0x324>
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	881b      	ldrh	r3, [r3, #0]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de6:	853b      	strh	r3, [r7, #40]	; 0x28
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	441a      	add	r2, r3
 8008df2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	441a      	add	r2, r3
 8008e2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e56:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	441a      	add	r2, r3
 8008e62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	441a      	add	r2, r3
 8008e9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3734      	adds	r7, #52	; 0x34
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr

08008ebc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b0cc      	sub	sp, #304	; 0x130
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008eca:	6018      	str	r0, [r3, #0]
 8008ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ed4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	f041 817d 	bne.w	800a1e2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	699a      	ldr	r2, [r3, #24]
 8008ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d908      	bls.n	8008f16 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008f14:	e007      	b.n	8008f26 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	7b1b      	ldrb	r3, [r3, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d152      	bne.n	8008fdc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6959      	ldr	r1, [r3, #20]
 8008f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	88da      	ldrh	r2, [r3, #6]
 8008f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008f58:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008f5c:	6800      	ldr	r0, [r0, #0]
 8008f5e:	f001 ff23 	bl	800ada8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008f6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f6e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008f72:	6812      	ldr	r2, [r2, #0]
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	4619      	mov	r1, r3
 8008f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f8c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008f90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f94:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	440a      	add	r2, r1
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	011a      	lsls	r2, r3, #4
 8008fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	801a      	strh	r2, [r3, #0]
 8008fd8:	f001 b8b5 	b.w	800a146 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	78db      	ldrb	r3, [r3, #3]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	f040 84c6 	bne.w	800997a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6a1a      	ldr	r2, [r3, #32]
 8008ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	429a      	cmp	r2, r3
 8009008:	f240 8443 	bls.w	8009892 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800900c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800901a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	b29b      	uxth	r3, r3
 800902a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800902e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009032:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800903a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	441a      	add	r2, r3
 8009050:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800905c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009064:	b29b      	uxth	r3, r3
 8009066:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800906c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6a1a      	ldr	r2, [r3, #32]
 8009074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009078:	1ad2      	subs	r2, r2, r3
 800907a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800907e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 823e 	beq.w	800952a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80090ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80090b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090ba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80090be:	6812      	ldr	r2, [r2, #0]
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f040 809a 	bne.w	8009208 <USB_EPStartXfer+0x34c>
 80090d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80090e4:	6812      	ldr	r2, [r2, #0]
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	4619      	mov	r1, r3
 80090fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009102:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009106:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800910a:	6812      	ldr	r2, [r2, #0]
 800910c:	440a      	add	r2, r1
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	011a      	lsls	r2, r3, #4
 800911e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4413      	add	r3, r2
 800912a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800912e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009132:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d122      	bne.n	8009186 <USB_EPStartXfer+0x2ca>
 8009140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009144:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	b29b      	uxth	r3, r3
 800914e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009152:	b29a      	uxth	r2, r3
 8009154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009158:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	801a      	strh	r2, [r3, #0]
 8009160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009164:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	b29b      	uxth	r3, r3
 800916e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009172:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009176:	b29a      	uxth	r2, r3
 8009178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800917c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	801a      	strh	r2, [r3, #0]
 8009184:	e079      	b.n	800927a <USB_EPStartXfer+0x3be>
 8009186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800918a:	2b3e      	cmp	r3, #62	; 0x3e
 800918c:	d81b      	bhi.n	80091c6 <USB_EPStartXfer+0x30a>
 800918e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009192:	085b      	lsrs	r3, r3, #1
 8009194:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d004      	beq.n	80091ae <USB_EPStartXfer+0x2f2>
 80091a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091a8:	3301      	adds	r3, #1
 80091aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80091ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	029b      	lsls	r3, r3, #10
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	801a      	strh	r2, [r3, #0]
 80091c4:	e059      	b.n	800927a <USB_EPStartXfer+0x3be>
 80091c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80091d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <USB_EPStartXfer+0x32a>
 80091dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091e0:	3b01      	subs	r3, #1
 80091e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80091e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	029b      	lsls	r3, r3, #10
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	e038      	b.n	800927a <USB_EPStartXfer+0x3be>
 8009208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800920c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d130      	bne.n	800927a <USB_EPStartXfer+0x3be>
 8009218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800921c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009226:	b29b      	uxth	r3, r3
 8009228:	4619      	mov	r1, r3
 800922a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800922e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009232:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009236:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800923a:	6812      	ldr	r2, [r2, #0]
 800923c:	440a      	add	r2, r1
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	011a      	lsls	r2, r3, #4
 800924e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009252:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4413      	add	r3, r2
 800925a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800925e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800926c:	b29a      	uxth	r2, r3
 800926e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800927a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800927e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	895b      	ldrh	r3, [r3, #10]
 8009286:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800928a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6959      	ldr	r1, [r3, #20]
 8009296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800929a:	b29b      	uxth	r3, r3
 800929c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80092a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80092a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80092a8:	6800      	ldr	r0, [r0, #0]
 80092aa:	f001 fd7d 	bl	800ada8 <USB_WritePMA>
            ep->xfer_buff += len;
 80092ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	695a      	ldr	r2, [r3, #20]
 80092ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092be:	441a      	add	r2, r3
 80092c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80092cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6a1a      	ldr	r2, [r3, #32]
 80092d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d90f      	bls.n	8009308 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80092e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6a1a      	ldr	r2, [r3, #32]
 80092f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092f8:	1ad2      	subs	r2, r2, r3
 80092fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	621a      	str	r2, [r3, #32]
 8009306:	e00e      	b.n	8009326 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8009308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800930c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2200      	movs	r2, #0
 8009324:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800932a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	785b      	ldrb	r3, [r3, #1]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f040 809a 	bne.w	800946c <USB_EPStartXfer+0x5b0>
 8009338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800933c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009340:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009344:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009348:	6812      	ldr	r2, [r2, #0]
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009350:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800935a:	b29b      	uxth	r3, r3
 800935c:	4619      	mov	r1, r3
 800935e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009362:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009366:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800936a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800936e:	6812      	ldr	r2, [r2, #0]
 8009370:	440a      	add	r2, r1
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	011a      	lsls	r2, r3, #4
 8009382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009386:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4413      	add	r3, r2
 800938e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009396:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d122      	bne.n	80093ea <USB_EPStartXfer+0x52e>
 80093a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	801a      	strh	r2, [r3, #0]
 80093c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093da:	b29a      	uxth	r2, r3
 80093dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	801a      	strh	r2, [r3, #0]
 80093e8:	e083      	b.n	80094f2 <USB_EPStartXfer+0x636>
 80093ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ee:	2b3e      	cmp	r3, #62	; 0x3e
 80093f0:	d81b      	bhi.n	800942a <USB_EPStartXfer+0x56e>
 80093f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80093fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b00      	cmp	r3, #0
 8009406:	d004      	beq.n	8009412 <USB_EPStartXfer+0x556>
 8009408:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800940c:	3301      	adds	r3, #1
 800940e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009412:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009416:	b29b      	uxth	r3, r3
 8009418:	029b      	lsls	r3, r3, #10
 800941a:	b29a      	uxth	r2, r3
 800941c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009420:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	801a      	strh	r2, [r3, #0]
 8009428:	e063      	b.n	80094f2 <USB_EPStartXfer+0x636>
 800942a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009438:	f003 031f 	and.w	r3, r3, #31
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <USB_EPStartXfer+0x58e>
 8009440:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009444:	3b01      	subs	r3, #1
 8009446:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800944a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800944e:	b29b      	uxth	r3, r3
 8009450:	029b      	lsls	r3, r3, #10
 8009452:	b29b      	uxth	r3, r3
 8009454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800945c:	b29a      	uxth	r2, r3
 800945e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009462:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	801a      	strh	r2, [r3, #0]
 800946a:	e042      	b.n	80094f2 <USB_EPStartXfer+0x636>
 800946c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	785b      	ldrb	r3, [r3, #1]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d13a      	bne.n	80094f2 <USB_EPStartXfer+0x636>
 800947c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009480:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009484:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009488:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800948c:	6812      	ldr	r2, [r2, #0]
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800949e:	b29b      	uxth	r3, r3
 80094a0:	4619      	mov	r1, r3
 80094a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80094aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094ae:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80094b2:	6812      	ldr	r2, [r2, #0]
 80094b4:	440a      	add	r2, r1
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	011a      	lsls	r2, r3, #4
 80094c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4413      	add	r3, r2
 80094d2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80094d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80094f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	891b      	ldrh	r3, [r3, #8]
 80094fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	6959      	ldr	r1, [r3, #20]
 800950e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009512:	b29b      	uxth	r3, r3
 8009514:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009518:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800951c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009520:	6800      	ldr	r0, [r0, #0]
 8009522:	f001 fc41 	bl	800ada8 <USB_WritePMA>
 8009526:	f000 be0e 	b.w	800a146 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800952a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800952e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d16d      	bne.n	8009616 <USB_EPStartXfer+0x75a>
 800953a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800953e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	64bb      	str	r3, [r7, #72]	; 0x48
 8009546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800954a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009554:	b29b      	uxth	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800955a:	4413      	add	r3, r2
 800955c:	64bb      	str	r3, [r7, #72]	; 0x48
 800955e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	011a      	lsls	r2, r3, #4
 800956c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800956e:	4413      	add	r3, r2
 8009570:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009574:	647b      	str	r3, [r7, #68]	; 0x44
 8009576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800957a:	2b00      	cmp	r3, #0
 800957c:	d112      	bne.n	80095a4 <USB_EPStartXfer+0x6e8>
 800957e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	b29b      	uxth	r3, r3
 8009584:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009588:	b29a      	uxth	r2, r3
 800958a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800958c:	801a      	strh	r2, [r3, #0]
 800958e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29b      	uxth	r3, r3
 8009594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800959c:	b29a      	uxth	r2, r3
 800959e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095a0:	801a      	strh	r2, [r3, #0]
 80095a2:	e063      	b.n	800966c <USB_EPStartXfer+0x7b0>
 80095a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a8:	2b3e      	cmp	r3, #62	; 0x3e
 80095aa:	d817      	bhi.n	80095dc <USB_EPStartXfer+0x720>
 80095ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b0:	085b      	lsrs	r3, r3, #1
 80095b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80095b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d004      	beq.n	80095cc <USB_EPStartXfer+0x710>
 80095c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80095c6:	3301      	adds	r3, #1
 80095c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80095cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	029b      	lsls	r3, r3, #10
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095d8:	801a      	strh	r2, [r3, #0]
 80095da:	e047      	b.n	800966c <USB_EPStartXfer+0x7b0>
 80095dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e0:	095b      	lsrs	r3, r3, #5
 80095e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80095e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ea:	f003 031f 	and.w	r3, r3, #31
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d104      	bne.n	80095fc <USB_EPStartXfer+0x740>
 80095f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80095f6:	3b01      	subs	r3, #1
 80095f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80095fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009600:	b29b      	uxth	r3, r3
 8009602:	029b      	lsls	r3, r3, #10
 8009604:	b29b      	uxth	r3, r3
 8009606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800960a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800960e:	b29a      	uxth	r2, r3
 8009610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009612:	801a      	strh	r2, [r3, #0]
 8009614:	e02a      	b.n	800966c <USB_EPStartXfer+0x7b0>
 8009616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	785b      	ldrb	r3, [r3, #1]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d122      	bne.n	800966c <USB_EPStartXfer+0x7b0>
 8009626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800962a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	653b      	str	r3, [r7, #80]	; 0x50
 8009632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009636:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009640:	b29b      	uxth	r3, r3
 8009642:	461a      	mov	r2, r3
 8009644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009646:	4413      	add	r3, r2
 8009648:	653b      	str	r3, [r7, #80]	; 0x50
 800964a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	011a      	lsls	r2, r3, #4
 8009658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800965a:	4413      	add	r3, r2
 800965c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009660:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009666:	b29a      	uxth	r2, r3
 8009668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800966a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800966c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	891b      	ldrh	r3, [r3, #8]
 8009678:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800967c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6959      	ldr	r1, [r3, #20]
 8009688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968c:	b29b      	uxth	r3, r3
 800968e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009692:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009696:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800969a:	6800      	ldr	r0, [r0, #0]
 800969c:	f001 fb84 	bl	800ada8 <USB_WritePMA>
            ep->xfer_buff += len;
 80096a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	695a      	ldr	r2, [r3, #20]
 80096ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096b0:	441a      	add	r2, r3
 80096b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80096be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6a1a      	ldr	r2, [r3, #32]
 80096ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d90f      	bls.n	80096fa <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80096da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ea:	1ad2      	subs	r2, r2, r3
 80096ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	621a      	str	r2, [r3, #32]
 80096f8:	e00e      	b.n	8009718 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80096fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800970a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800970e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2200      	movs	r2, #0
 8009716:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800971c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	643b      	str	r3, [r7, #64]	; 0x40
 8009724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009728:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	785b      	ldrb	r3, [r3, #1]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d16d      	bne.n	8009810 <USB_EPStartXfer+0x954>
 8009734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009738:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800974e:	b29b      	uxth	r3, r3
 8009750:	461a      	mov	r2, r3
 8009752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009754:	4413      	add	r3, r2
 8009756:	63bb      	str	r3, [r7, #56]	; 0x38
 8009758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800975c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	011a      	lsls	r2, r3, #4
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	4413      	add	r3, r2
 800976a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800976e:	637b      	str	r3, [r7, #52]	; 0x34
 8009770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009774:	2b00      	cmp	r3, #0
 8009776:	d112      	bne.n	800979e <USB_EPStartXfer+0x8e2>
 8009778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	b29b      	uxth	r3, r3
 800977e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009782:	b29a      	uxth	r2, r3
 8009784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009786:	801a      	strh	r2, [r3, #0]
 8009788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009796:	b29a      	uxth	r2, r3
 8009798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979a:	801a      	strh	r2, [r3, #0]
 800979c:	e05d      	b.n	800985a <USB_EPStartXfer+0x99e>
 800979e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a2:	2b3e      	cmp	r3, #62	; 0x3e
 80097a4:	d817      	bhi.n	80097d6 <USB_EPStartXfer+0x91a>
 80097a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097aa:	085b      	lsrs	r3, r3, #1
 80097ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80097b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097b4:	f003 0301 	and.w	r3, r3, #1
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d004      	beq.n	80097c6 <USB_EPStartXfer+0x90a>
 80097bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80097c0:	3301      	adds	r3, #1
 80097c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80097c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	029b      	lsls	r3, r3, #10
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d2:	801a      	strh	r2, [r3, #0]
 80097d4:	e041      	b.n	800985a <USB_EPStartXfer+0x99e>
 80097d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097da:	095b      	lsrs	r3, r3, #5
 80097dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80097e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e4:	f003 031f 	and.w	r3, r3, #31
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d104      	bne.n	80097f6 <USB_EPStartXfer+0x93a>
 80097ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80097f0:	3b01      	subs	r3, #1
 80097f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80097f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	029b      	lsls	r3, r3, #10
 80097fe:	b29b      	uxth	r3, r3
 8009800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009808:	b29a      	uxth	r2, r3
 800980a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980c:	801a      	strh	r2, [r3, #0]
 800980e:	e024      	b.n	800985a <USB_EPStartXfer+0x99e>
 8009810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	785b      	ldrb	r3, [r3, #1]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d11c      	bne.n	800985a <USB_EPStartXfer+0x99e>
 8009820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009824:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800982e:	b29b      	uxth	r3, r3
 8009830:	461a      	mov	r2, r3
 8009832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009834:	4413      	add	r3, r2
 8009836:	643b      	str	r3, [r7, #64]	; 0x40
 8009838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800983c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	011a      	lsls	r2, r3, #4
 8009846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009848:	4413      	add	r3, r2
 800984a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009854:	b29a      	uxth	r2, r3
 8009856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009858:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800985a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800985e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	895b      	ldrh	r3, [r3, #10]
 8009866:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800986a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800986e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6959      	ldr	r1, [r3, #20]
 8009876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800987a:	b29b      	uxth	r3, r3
 800987c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009880:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009884:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009888:	6800      	ldr	r0, [r0, #0]
 800988a:	f001 fa8d 	bl	800ada8 <USB_WritePMA>
 800988e:	f000 bc5a 	b.w	800a146 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6a1b      	ldr	r3, [r3, #32]
 800989e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80098a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80098c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80098cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	441a      	add	r2, r3
 80098e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80098ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80098fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009902:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800990a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800990e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009918:	b29b      	uxth	r3, r3
 800991a:	461a      	mov	r2, r3
 800991c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800991e:	4413      	add	r3, r2
 8009920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	011a      	lsls	r2, r3, #4
 8009930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009932:	4413      	add	r3, r2
 8009934:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009938:	65bb      	str	r3, [r7, #88]	; 0x58
 800993a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800993e:	b29a      	uxth	r2, r3
 8009940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009942:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	891b      	ldrh	r3, [r3, #8]
 8009950:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6959      	ldr	r1, [r3, #20]
 8009960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009964:	b29b      	uxth	r3, r3
 8009966:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800996a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800996e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009972:	6800      	ldr	r0, [r0, #0]
 8009974:	f001 fa18 	bl	800ada8 <USB_WritePMA>
 8009978:	e3e5      	b.n	800a146 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800997a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800997e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	b29b      	uxth	r3, r3
 8009998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800999c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80099a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	441a      	add	r2, r3
 80099be:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80099c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80099ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80099d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6a1a      	ldr	r2, [r3, #32]
 80099e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e6:	1ad2      	subs	r2, r2, r3
 80099e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80099f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	4413      	add	r3, r2
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 81bc 	beq.w	8009d94 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	785b      	ldrb	r3, [r3, #1]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d16d      	bne.n	8009b16 <USB_EPStartXfer+0xc5a>
 8009a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a54:	b29b      	uxth	r3, r3
 8009a56:	461a      	mov	r2, r3
 8009a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a5a:	4413      	add	r3, r2
 8009a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	011a      	lsls	r2, r3, #4
 8009a6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a6e:	4413      	add	r3, r2
 8009a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a74:	677b      	str	r3, [r7, #116]	; 0x74
 8009a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d112      	bne.n	8009aa4 <USB_EPStartXfer+0xbe8>
 8009a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a80:	881b      	ldrh	r3, [r3, #0]
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a90:	881b      	ldrh	r3, [r3, #0]
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009aa0:	801a      	strh	r2, [r3, #0]
 8009aa2:	e060      	b.n	8009b66 <USB_EPStartXfer+0xcaa>
 8009aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa8:	2b3e      	cmp	r3, #62	; 0x3e
 8009aaa:	d817      	bhi.n	8009adc <USB_EPStartXfer+0xc20>
 8009aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab0:	085b      	lsrs	r3, r3, #1
 8009ab2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d004      	beq.n	8009acc <USB_EPStartXfer+0xc10>
 8009ac2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009acc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	029b      	lsls	r3, r3, #10
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ad8:	801a      	strh	r2, [r3, #0]
 8009ada:	e044      	b.n	8009b66 <USB_EPStartXfer+0xcaa>
 8009adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ae0:	095b      	lsrs	r3, r3, #5
 8009ae2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aea:	f003 031f 	and.w	r3, r3, #31
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <USB_EPStartXfer+0xc40>
 8009af2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009af6:	3b01      	subs	r3, #1
 8009af8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009afc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	029b      	lsls	r3, r3, #10
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b12:	801a      	strh	r2, [r3, #0]
 8009b14:	e027      	b.n	8009b66 <USB_EPStartXfer+0xcaa>
 8009b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	785b      	ldrb	r3, [r3, #1]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d11f      	bne.n	8009b66 <USB_EPStartXfer+0xcaa>
 8009b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	461a      	mov	r2, r3
 8009b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	011a      	lsls	r2, r3, #4
 8009b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b54:	4413      	add	r3, r2
 8009b56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	895b      	ldrh	r3, [r3, #10]
 8009b72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6959      	ldr	r1, [r3, #20]
 8009b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009b90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009b94:	6800      	ldr	r0, [r0, #0]
 8009b96:	f001 f907 	bl	800ada8 <USB_WritePMA>
          ep->xfer_buff += len;
 8009b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	695a      	ldr	r2, [r3, #20]
 8009ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009baa:	441a      	add	r2, r3
 8009bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	6a1a      	ldr	r2, [r3, #32]
 8009bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d90f      	bls.n	8009bf4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6a1a      	ldr	r2, [r3, #32]
 8009be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009be4:	1ad2      	subs	r2, r2, r3
 8009be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	621a      	str	r2, [r3, #32]
 8009bf2:	e00e      	b.n	8009c12 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 8295 	beq.w	800a146 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	785b      	ldrb	r3, [r3, #1]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d16d      	bne.n	8009d08 <USB_EPStartXfer+0xe4c>
 8009c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	461a      	mov	r2, r3
 8009c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c4c:	4413      	add	r3, r2
 8009c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	011a      	lsls	r2, r3, #4
 8009c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c60:	4413      	add	r3, r2
 8009c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c66:	667b      	str	r3, [r7, #100]	; 0x64
 8009c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d112      	bne.n	8009c96 <USB_EPStartXfer+0xdda>
 8009c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c7e:	801a      	strh	r2, [r3, #0]
 8009c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c82:	881b      	ldrh	r3, [r3, #0]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	e063      	b.n	8009d5e <USB_EPStartXfer+0xea2>
 8009c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c9a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c9c:	d817      	bhi.n	8009cce <USB_EPStartXfer+0xe12>
 8009c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ca2:	085b      	lsrs	r3, r3, #1
 8009ca4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d004      	beq.n	8009cbe <USB_EPStartXfer+0xe02>
 8009cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb8:	3301      	adds	r3, #1
 8009cba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	029b      	lsls	r3, r3, #10
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cca:	801a      	strh	r2, [r3, #0]
 8009ccc:	e047      	b.n	8009d5e <USB_EPStartXfer+0xea2>
 8009cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd2:	095b      	lsrs	r3, r3, #5
 8009cd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cdc:	f003 031f 	and.w	r3, r3, #31
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d104      	bne.n	8009cee <USB_EPStartXfer+0xe32>
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	029b      	lsls	r3, r3, #10
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d04:	801a      	strh	r2, [r3, #0]
 8009d06:	e02a      	b.n	8009d5e <USB_EPStartXfer+0xea2>
 8009d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	785b      	ldrb	r3, [r3, #1]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d122      	bne.n	8009d5e <USB_EPStartXfer+0xea2>
 8009d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	673b      	str	r3, [r7, #112]	; 0x70
 8009d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	461a      	mov	r2, r3
 8009d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d38:	4413      	add	r3, r2
 8009d3a:	673b      	str	r3, [r7, #112]	; 0x70
 8009d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	011a      	lsls	r2, r3, #4
 8009d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	891b      	ldrh	r3, [r3, #8]
 8009d6a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6959      	ldr	r1, [r3, #20]
 8009d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009d84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009d88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009d8c:	6800      	ldr	r0, [r0, #0]
 8009d8e:	f001 f80b 	bl	800ada8 <USB_WritePMA>
 8009d92:	e1d8      	b.n	800a146 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d178      	bne.n	8009e96 <USB_EPStartXfer+0xfda>
 8009da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dc8:	4413      	add	r3, r2
 8009dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	011a      	lsls	r2, r3, #4
 8009ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009de0:	4413      	add	r3, r2
 8009de2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009de6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d116      	bne.n	8009e20 <USB_EPStartXfer+0xf64>
 8009df2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e04:	801a      	strh	r2, [r3, #0]
 8009e06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e1c:	801a      	strh	r2, [r3, #0]
 8009e1e:	e06b      	b.n	8009ef8 <USB_EPStartXfer+0x103c>
 8009e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e24:	2b3e      	cmp	r3, #62	; 0x3e
 8009e26:	d818      	bhi.n	8009e5a <USB_EPStartXfer+0xf9e>
 8009e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e2c:	085b      	lsrs	r3, r3, #1
 8009e2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d004      	beq.n	8009e48 <USB_EPStartXfer+0xf8c>
 8009e3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e42:	3301      	adds	r3, #1
 8009e44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009e48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	029b      	lsls	r3, r3, #10
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e56:	801a      	strh	r2, [r3, #0]
 8009e58:	e04e      	b.n	8009ef8 <USB_EPStartXfer+0x103c>
 8009e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e5e:	095b      	lsrs	r3, r3, #5
 8009e60:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009e64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e68:	f003 031f 	and.w	r3, r3, #31
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d104      	bne.n	8009e7a <USB_EPStartXfer+0xfbe>
 8009e70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e74:	3b01      	subs	r3, #1
 8009e76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009e7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	029b      	lsls	r3, r3, #10
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e92:	801a      	strh	r2, [r3, #0]
 8009e94:	e030      	b.n	8009ef8 <USB_EPStartXfer+0x103c>
 8009e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	785b      	ldrb	r3, [r3, #1]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d128      	bne.n	8009ef8 <USB_EPStartXfer+0x103c>
 8009ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009eca:	4413      	add	r3, r2
 8009ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	011a      	lsls	r2, r3, #4
 8009ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ef6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	891b      	ldrh	r3, [r3, #8]
 8009f04:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6959      	ldr	r1, [r3, #20]
 8009f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009f1e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009f22:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009f26:	6800      	ldr	r0, [r0, #0]
 8009f28:	f000 ff3e 	bl	800ada8 <USB_WritePMA>
          ep->xfer_buff += len;
 8009f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	695a      	ldr	r2, [r3, #20]
 8009f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f3c:	441a      	add	r2, r3
 8009f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6a1a      	ldr	r2, [r3, #32]
 8009f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d90f      	bls.n	8009f86 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6a1a      	ldr	r2, [r3, #32]
 8009f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	621a      	str	r2, [r3, #32]
 8009f84:	e00e      	b.n	8009fa4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6a1b      	ldr	r3, [r3, #32]
 8009f92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80cc 	beq.w	800a146 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d178      	bne.n	800a0be <USB_EPStartXfer+0x1202>
 8009fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	011a      	lsls	r2, r3, #4
 800a004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a008:	4413      	add	r3, r2
 800a00a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a00e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a016:	2b00      	cmp	r3, #0
 800a018:	d116      	bne.n	800a048 <USB_EPStartXfer+0x118c>
 800a01a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	b29b      	uxth	r3, r3
 800a022:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a026:	b29a      	uxth	r2, r3
 800a028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a02c:	801a      	strh	r2, [r3, #0]
 800a02e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	b29b      	uxth	r3, r3
 800a036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a03a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a03e:	b29a      	uxth	r2, r3
 800a040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a044:	801a      	strh	r2, [r3, #0]
 800a046:	e064      	b.n	800a112 <USB_EPStartXfer+0x1256>
 800a048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a04c:	2b3e      	cmp	r3, #62	; 0x3e
 800a04e:	d818      	bhi.n	800a082 <USB_EPStartXfer+0x11c6>
 800a050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a054:	085b      	lsrs	r3, r3, #1
 800a056:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a05a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <USB_EPStartXfer+0x11b4>
 800a066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a06a:	3301      	adds	r3, #1
 800a06c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a074:	b29b      	uxth	r3, r3
 800a076:	029b      	lsls	r3, r3, #10
 800a078:	b29a      	uxth	r2, r3
 800a07a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a07e:	801a      	strh	r2, [r3, #0]
 800a080:	e047      	b.n	800a112 <USB_EPStartXfer+0x1256>
 800a082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a086:	095b      	lsrs	r3, r3, #5
 800a088:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a08c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a090:	f003 031f 	and.w	r3, r3, #31
 800a094:	2b00      	cmp	r3, #0
 800a096:	d104      	bne.n	800a0a2 <USB_EPStartXfer+0x11e6>
 800a098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a09c:	3b01      	subs	r3, #1
 800a09e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a0a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	029b      	lsls	r3, r3, #10
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0ba:	801a      	strh	r2, [r3, #0]
 800a0bc:	e029      	b.n	800a112 <USB_EPStartXfer+0x1256>
 800a0be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d121      	bne.n	800a112 <USB_EPStartXfer+0x1256>
 800a0ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	011a      	lsls	r2, r3, #4
 800a0f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a110:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	895b      	ldrh	r3, [r3, #10]
 800a11e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6959      	ldr	r1, [r3, #20]
 800a12e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a132:	b29b      	uxth	r3, r3
 800a134:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a138:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a13c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a140:	6800      	ldr	r0, [r0, #0]
 800a142:	f000 fe31 	bl	800ada8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a14a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	b29b      	uxth	r3, r3
 800a164:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a168:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a16c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a174:	8013      	strh	r3, [r2, #0]
 800a176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a17a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a17e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a182:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a186:	8812      	ldrh	r2, [r2, #0]
 800a188:	f082 0210 	eor.w	r2, r2, #16
 800a18c:	801a      	strh	r2, [r3, #0]
 800a18e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a192:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a196:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a19a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a19e:	8812      	ldrh	r2, [r2, #0]
 800a1a0:	f082 0220 	eor.w	r2, r2, #32
 800a1a4:	801a      	strh	r2, [r3, #0]
 800a1a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	441a      	add	r2, r3
 800a1c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	8013      	strh	r3, [r2, #0]
 800a1de:	f000 bc9f 	b.w	800ab20 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a1e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	7b1b      	ldrb	r3, [r3, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f040 80ae 	bne.w	800a350 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a1f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	699a      	ldr	r2, [r3, #24]
 800a200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d917      	bls.n	800a240 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800a210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	699a      	ldr	r2, [r3, #24]
 800a22c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a230:	1ad2      	subs	r2, r2, r3
 800a232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	619a      	str	r2, [r3, #24]
 800a23e:	e00e      	b.n	800a25e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800a240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2200      	movs	r2, #0
 800a25c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a25e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a26c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	461a      	mov	r2, r3
 800a27e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a282:	4413      	add	r3, r2
 800a284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a28c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	011a      	lsls	r2, r3, #4
 800a296:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a29a:	4413      	add	r3, r2
 800a29c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a2a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d116      	bne.n	800a2da <USB_EPStartXfer+0x141e>
 800a2ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2b0:	881b      	ldrh	r3, [r3, #0]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2be:	801a      	strh	r2, [r3, #0]
 800a2c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2d6:	801a      	strh	r2, [r3, #0]
 800a2d8:	e3e8      	b.n	800aaac <USB_EPStartXfer+0x1bf0>
 800a2da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2de:	2b3e      	cmp	r3, #62	; 0x3e
 800a2e0:	d818      	bhi.n	800a314 <USB_EPStartXfer+0x1458>
 800a2e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2e6:	085b      	lsrs	r3, r3, #1
 800a2e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a2ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d004      	beq.n	800a302 <USB_EPStartXfer+0x1446>
 800a2f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a302:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a306:	b29b      	uxth	r3, r3
 800a308:	029b      	lsls	r3, r3, #10
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a310:	801a      	strh	r2, [r3, #0]
 800a312:	e3cb      	b.n	800aaac <USB_EPStartXfer+0x1bf0>
 800a314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a318:	095b      	lsrs	r3, r3, #5
 800a31a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a31e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a322:	f003 031f 	and.w	r3, r3, #31
 800a326:	2b00      	cmp	r3, #0
 800a328:	d104      	bne.n	800a334 <USB_EPStartXfer+0x1478>
 800a32a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a32e:	3b01      	subs	r3, #1
 800a330:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a334:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a338:	b29b      	uxth	r3, r3
 800a33a:	029b      	lsls	r3, r3, #10
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a346:	b29a      	uxth	r2, r3
 800a348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a34c:	801a      	strh	r2, [r3, #0]
 800a34e:	e3ad      	b.n	800aaac <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	78db      	ldrb	r3, [r3, #3]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	f040 8200 	bne.w	800a762 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	785b      	ldrb	r3, [r3, #1]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f040 8091 	bne.w	800a496 <USB_EPStartXfer+0x15da>
 800a374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a378:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a390:	b29b      	uxth	r3, r3
 800a392:	461a      	mov	r2, r3
 800a394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a398:	4413      	add	r3, r2
 800a39a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a39e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	011a      	lsls	r2, r3, #4
 800a3ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3b0:	4413      	add	r3, r2
 800a3b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d116      	bne.n	800a3f8 <USB_EPStartXfer+0x153c>
 800a3ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3dc:	801a      	strh	r2, [r3, #0]
 800a3de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a3f4:	801a      	strh	r2, [r3, #0]
 800a3f6:	e083      	b.n	800a500 <USB_EPStartXfer+0x1644>
 800a3f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	2b3e      	cmp	r3, #62	; 0x3e
 800a406:	d820      	bhi.n	800a44a <USB_EPStartXfer+0x158e>
 800a408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a40c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	085b      	lsrs	r3, r3, #1
 800a416:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a41a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a41e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d004      	beq.n	800a438 <USB_EPStartXfer+0x157c>
 800a42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a432:	3301      	adds	r3, #1
 800a434:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	029b      	lsls	r3, r3, #10
 800a440:	b29a      	uxth	r2, r3
 800a442:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a446:	801a      	strh	r2, [r3, #0]
 800a448:	e05a      	b.n	800a500 <USB_EPStartXfer+0x1644>
 800a44a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a44e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	095b      	lsrs	r3, r3, #5
 800a458:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a45c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a460:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	f003 031f 	and.w	r3, r3, #31
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d104      	bne.n	800a47a <USB_EPStartXfer+0x15be>
 800a470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a474:	3b01      	subs	r3, #1
 800a476:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47e:	b29b      	uxth	r3, r3
 800a480:	029b      	lsls	r3, r3, #10
 800a482:	b29b      	uxth	r3, r3
 800a484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a492:	801a      	strh	r2, [r3, #0]
 800a494:	e034      	b.n	800a500 <USB_EPStartXfer+0x1644>
 800a496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a49a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	785b      	ldrb	r3, [r3, #1]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d12c      	bne.n	800a500 <USB_EPStartXfer+0x1644>
 800a4a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a4b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a4d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	011a      	lsls	r2, r3, #4
 800a4de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a4e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a4ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a4fe:	801a      	strh	r2, [r3, #0]
 800a500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a50e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	785b      	ldrb	r3, [r3, #1]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f040 8091 	bne.w	800a642 <USB_EPStartXfer+0x1786>
 800a520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a52e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a532:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	461a      	mov	r2, r3
 800a540:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a544:	4413      	add	r3, r2
 800a546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a54a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a54e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	011a      	lsls	r2, r3, #4
 800a558:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a55c:	4413      	add	r3, r2
 800a55e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a56a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d116      	bne.n	800a5a4 <USB_EPStartXfer+0x16e8>
 800a576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a57a:	881b      	ldrh	r3, [r3, #0]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a582:	b29a      	uxth	r2, r3
 800a584:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a588:	801a      	strh	r2, [r3, #0]
 800a58a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	b29b      	uxth	r3, r3
 800a592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5a0:	801a      	strh	r2, [r3, #0]
 800a5a2:	e07c      	b.n	800a69e <USB_EPStartXfer+0x17e2>
 800a5a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	2b3e      	cmp	r3, #62	; 0x3e
 800a5b2:	d820      	bhi.n	800a5f6 <USB_EPStartXfer+0x173a>
 800a5b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	085b      	lsrs	r3, r3, #1
 800a5c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a5c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d004      	beq.n	800a5e4 <USB_EPStartXfer+0x1728>
 800a5da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a5de:	3301      	adds	r3, #1
 800a5e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a5e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	029b      	lsls	r3, r3, #10
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5f2:	801a      	strh	r2, [r3, #0]
 800a5f4:	e053      	b.n	800a69e <USB_EPStartXfer+0x17e2>
 800a5f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	691b      	ldr	r3, [r3, #16]
 800a602:	095b      	lsrs	r3, r3, #5
 800a604:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a60c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	f003 031f 	and.w	r3, r3, #31
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d104      	bne.n	800a626 <USB_EPStartXfer+0x176a>
 800a61c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a620:	3b01      	subs	r3, #1
 800a622:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a626:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	029b      	lsls	r3, r3, #10
 800a62e:	b29b      	uxth	r3, r3
 800a630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a638:	b29a      	uxth	r2, r3
 800a63a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a63e:	801a      	strh	r2, [r3, #0]
 800a640:	e02d      	b.n	800a69e <USB_EPStartXfer+0x17e2>
 800a642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	785b      	ldrb	r3, [r3, #1]
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d125      	bne.n	800a69e <USB_EPStartXfer+0x17e2>
 800a652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a660:	b29b      	uxth	r3, r3
 800a662:	461a      	mov	r2, r3
 800a664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a668:	4413      	add	r3, r2
 800a66a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a66e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	011a      	lsls	r2, r3, #4
 800a67c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a680:	4413      	add	r3, r2
 800a682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a68a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a68e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	b29a      	uxth	r2, r3
 800a698:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a69c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a69e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	69db      	ldr	r3, [r3, #28]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 81fe 	beq.w	800aaac <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a6b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4413      	add	r3, r2
 800a6ca:	881b      	ldrh	r3, [r3, #0]
 800a6cc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a6d0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a6d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d005      	beq.n	800a6e8 <USB_EPStartXfer+0x182c>
 800a6dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a6e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10d      	bne.n	800a704 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a6e8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a6ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f040 81db 	bne.w	800aaac <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a6f6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f040 81d4 	bne.w	800aaac <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	b29b      	uxth	r3, r3
 800a722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a72a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a72e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a73c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	441a      	add	r2, r3
 800a748:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a74c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a758:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	8013      	strh	r3, [r2, #0]
 800a760:	e1a4      	b.n	800aaac <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	78db      	ldrb	r3, [r3, #3]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	f040 819a 	bne.w	800aaa8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	699a      	ldr	r2, [r3, #24]
 800a780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d917      	bls.n	800a7c0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a7a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	699a      	ldr	r2, [r3, #24]
 800a7ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7b0:	1ad2      	subs	r2, r2, r3
 800a7b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	619a      	str	r2, [r3, #24]
 800a7be:	e00e      	b.n	800a7de <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a7c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a7d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a7de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	785b      	ldrb	r3, [r3, #1]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d178      	bne.n	800a8e0 <USB_EPStartXfer+0x1a24>
 800a7ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a7fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	461a      	mov	r2, r3
 800a80e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a812:	4413      	add	r3, r2
 800a814:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a81c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	011a      	lsls	r2, r3, #4
 800a826:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a82a:	4413      	add	r3, r2
 800a82c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a830:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d116      	bne.n	800a86a <USB_EPStartXfer+0x19ae>
 800a83c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a840:	881b      	ldrh	r3, [r3, #0]
 800a842:	b29b      	uxth	r3, r3
 800a844:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a848:	b29a      	uxth	r2, r3
 800a84a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a84e:	801a      	strh	r2, [r3, #0]
 800a850:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	b29b      	uxth	r3, r3
 800a858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a85c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a860:	b29a      	uxth	r2, r3
 800a862:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a866:	801a      	strh	r2, [r3, #0]
 800a868:	e06b      	b.n	800a942 <USB_EPStartXfer+0x1a86>
 800a86a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a86e:	2b3e      	cmp	r3, #62	; 0x3e
 800a870:	d818      	bhi.n	800a8a4 <USB_EPStartXfer+0x19e8>
 800a872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a876:	085b      	lsrs	r3, r3, #1
 800a878:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a87c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d004      	beq.n	800a892 <USB_EPStartXfer+0x19d6>
 800a888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a88c:	3301      	adds	r3, #1
 800a88e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a896:	b29b      	uxth	r3, r3
 800a898:	029b      	lsls	r3, r3, #10
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8a0:	801a      	strh	r2, [r3, #0]
 800a8a2:	e04e      	b.n	800a942 <USB_EPStartXfer+0x1a86>
 800a8a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8a8:	095b      	lsrs	r3, r3, #5
 800a8aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8b2:	f003 031f 	and.w	r3, r3, #31
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d104      	bne.n	800a8c4 <USB_EPStartXfer+0x1a08>
 800a8ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	029b      	lsls	r3, r3, #10
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8dc:	801a      	strh	r2, [r3, #0]
 800a8de:	e030      	b.n	800a942 <USB_EPStartXfer+0x1a86>
 800a8e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	785b      	ldrb	r3, [r3, #1]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d128      	bne.n	800a942 <USB_EPStartXfer+0x1a86>
 800a8f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a902:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	461a      	mov	r2, r3
 800a910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a914:	4413      	add	r3, r2
 800a916:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a91a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a91e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	011a      	lsls	r2, r3, #4
 800a928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a92c:	4413      	add	r3, r2
 800a92e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a932:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a940:	801a      	strh	r2, [r3, #0]
 800a942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	785b      	ldrb	r3, [r3, #1]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d178      	bne.n	800aa52 <USB_EPStartXfer+0x1b96>
 800a960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a96e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a972:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	461a      	mov	r2, r3
 800a980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a984:	4413      	add	r3, r2
 800a986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a98a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a98e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	011a      	lsls	r2, r3, #4
 800a998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a99c:	4413      	add	r3, r2
 800a99e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a9a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d116      	bne.n	800a9dc <USB_EPStartXfer+0x1b20>
 800a9ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9c0:	801a      	strh	r2, [r3, #0]
 800a9c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9d8:	801a      	strh	r2, [r3, #0]
 800a9da:	e067      	b.n	800aaac <USB_EPStartXfer+0x1bf0>
 800a9dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9e0:	2b3e      	cmp	r3, #62	; 0x3e
 800a9e2:	d818      	bhi.n	800aa16 <USB_EPStartXfer+0x1b5a>
 800a9e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9e8:	085b      	lsrs	r3, r3, #1
 800a9ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d004      	beq.n	800aa04 <USB_EPStartXfer+0x1b48>
 800a9fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a9fe:	3301      	adds	r3, #1
 800aa00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	029b      	lsls	r3, r3, #10
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa12:	801a      	strh	r2, [r3, #0]
 800aa14:	e04a      	b.n	800aaac <USB_EPStartXfer+0x1bf0>
 800aa16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa1a:	095b      	lsrs	r3, r3, #5
 800aa1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa24:	f003 031f 	and.w	r3, r3, #31
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d104      	bne.n	800aa36 <USB_EPStartXfer+0x1b7a>
 800aa2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa30:	3b01      	subs	r3, #1
 800aa32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	029b      	lsls	r3, r3, #10
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa4e:	801a      	strh	r2, [r3, #0]
 800aa50:	e02c      	b.n	800aaac <USB_EPStartXfer+0x1bf0>
 800aa52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	785b      	ldrb	r3, [r3, #1]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d124      	bne.n	800aaac <USB_EPStartXfer+0x1bf0>
 800aa62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	461a      	mov	r2, r3
 800aa74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa78:	4413      	add	r3, r2
 800aa7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	011a      	lsls	r2, r3, #4
 800aa8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa90:	4413      	add	r3, r2
 800aa92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aa96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaa4:	801a      	strh	r2, [r3, #0]
 800aaa6:	e001      	b.n	800aaac <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e03a      	b.n	800ab22 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aaac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aab0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aad2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800aad6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800aada:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aade:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800aae2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800aae6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aaea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800aaee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aafc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	441a      	add	r2, r3
 800ab08:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ab0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	785b      	ldrb	r3, [r3, #1]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d020      	beq.n	800ab80 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab54:	81bb      	strh	r3, [r7, #12]
 800ab56:	89bb      	ldrh	r3, [r7, #12]
 800ab58:	f083 0310 	eor.w	r3, r3, #16
 800ab5c:	81bb      	strh	r3, [r7, #12]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	441a      	add	r2, r3
 800ab68:	89bb      	ldrh	r3, [r7, #12]
 800ab6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	8013      	strh	r3, [r2, #0]
 800ab7e:	e01f      	b.n	800abc0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab96:	81fb      	strh	r3, [r7, #14]
 800ab98:	89fb      	ldrh	r3, [r7, #14]
 800ab9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab9e:	81fb      	strh	r3, [r7, #14]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	441a      	add	r2, r3
 800abaa:	89fb      	ldrh	r3, [r7, #14]
 800abac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bc80      	pop	{r7}
 800abca:	4770      	bx	lr

0800abcc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800abcc:	b480      	push	{r7}
 800abce:	b087      	sub	sp, #28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	7b1b      	ldrb	r3, [r3, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f040 809d 	bne.w	800ad1a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	785b      	ldrb	r3, [r3, #1]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d04c      	beq.n	800ac82 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	823b      	strh	r3, [r7, #16]
 800abf6:	8a3b      	ldrh	r3, [r7, #16]
 800abf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d01b      	beq.n	800ac38 <USB_EPClearStall+0x6c>
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	881b      	ldrh	r3, [r3, #0]
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac16:	81fb      	strh	r3, [r7, #14]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	441a      	add	r2, r3
 800ac22:	89fb      	ldrh	r3, [r7, #14]
 800ac24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	78db      	ldrb	r3, [r3, #3]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d06c      	beq.n	800ad1a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac56:	81bb      	strh	r3, [r7, #12]
 800ac58:	89bb      	ldrh	r3, [r7, #12]
 800ac5a:	f083 0320 	eor.w	r3, r3, #32
 800ac5e:	81bb      	strh	r3, [r7, #12]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	441a      	add	r2, r3
 800ac6a:	89bb      	ldrh	r3, [r7, #12]
 800ac6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	8013      	strh	r3, [r2, #0]
 800ac80:	e04b      	b.n	800ad1a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	82fb      	strh	r3, [r7, #22]
 800ac90:	8afb      	ldrh	r3, [r7, #22]
 800ac92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d01b      	beq.n	800acd2 <USB_EPClearStall+0x106>
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	009b      	lsls	r3, r3, #2
 800aca2:	4413      	add	r3, r2
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acb0:	82bb      	strh	r3, [r7, #20]
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	441a      	add	r2, r3
 800acbc:	8abb      	ldrh	r3, [r7, #20]
 800acbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acce:	b29b      	uxth	r3, r3
 800acd0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	881b      	ldrh	r3, [r3, #0]
 800acde:	b29b      	uxth	r3, r3
 800ace0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ace4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ace8:	827b      	strh	r3, [r7, #18]
 800acea:	8a7b      	ldrh	r3, [r7, #18]
 800acec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800acf0:	827b      	strh	r3, [r7, #18]
 800acf2:	8a7b      	ldrh	r3, [r7, #18]
 800acf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800acf8:	827b      	strh	r3, [r7, #18]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	441a      	add	r2, r3
 800ad04:	8a7b      	ldrh	r3, [r7, #18]
 800ad06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	371c      	adds	r7, #28
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bc80      	pop	{r7}
 800ad24:	4770      	bx	lr

0800ad26 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b083      	sub	sp, #12
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	460b      	mov	r3, r1
 800ad30:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ad32:	78fb      	ldrb	r3, [r7, #3]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d103      	bne.n	800ad40 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2280      	movs	r2, #128	; 0x80
 800ad3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bc80      	pop	{r7}
 800ad4a:	4770      	bx	lr

0800ad4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bc80      	pop	{r7}
 800ad5e:	4770      	bx	lr

0800ad60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bc80      	pop	{r7}
 800ad72:	4770      	bx	lr

0800ad74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ad86:	68fb      	ldr	r3, [r7, #12]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3714      	adds	r7, #20
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bc80      	pop	{r7}
 800ad90:	4770      	bx	lr

0800ad92 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bc80      	pop	{r7}
 800ada6:	4770      	bx	lr

0800ada8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b08d      	sub	sp, #52	; 0x34
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	4611      	mov	r1, r2
 800adb4:	461a      	mov	r2, r3
 800adb6:	460b      	mov	r3, r1
 800adb8:	80fb      	strh	r3, [r7, #6]
 800adba:	4613      	mov	r3, r2
 800adbc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800adbe:	88bb      	ldrh	r3, [r7, #4]
 800adc0:	3301      	adds	r3, #1
 800adc2:	085b      	lsrs	r3, r3, #1
 800adc4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800adce:	88fb      	ldrh	r3, [r7, #6]
 800add0:	005a      	lsls	r2, r3, #1
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	4413      	add	r3, r2
 800add6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adda:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ade0:	e01e      	b.n	800ae20 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adea:	3301      	adds	r3, #1
 800adec:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	021b      	lsls	r3, r3, #8
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	461a      	mov	r2, r3
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae06:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	3302      	adds	r3, #2
 800ae0c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	3302      	adds	r3, #2
 800ae12:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae16:	3301      	adds	r3, #1
 800ae18:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ae1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1dd      	bne.n	800ade2 <USB_WritePMA+0x3a>
  }
}
 800ae26:	bf00      	nop
 800ae28:	bf00      	nop
 800ae2a:	3734      	adds	r7, #52	; 0x34
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bc80      	pop	{r7}
 800ae30:	4770      	bx	lr

0800ae32 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b08b      	sub	sp, #44	; 0x2c
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	60f8      	str	r0, [r7, #12]
 800ae3a:	60b9      	str	r1, [r7, #8]
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	461a      	mov	r2, r3
 800ae40:	460b      	mov	r3, r1
 800ae42:	80fb      	strh	r3, [r7, #6]
 800ae44:	4613      	mov	r3, r2
 800ae46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ae48:	88bb      	ldrh	r3, [r7, #4]
 800ae4a:	085b      	lsrs	r3, r3, #1
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae58:	88fb      	ldrh	r3, [r7, #6]
 800ae5a:	005a      	lsls	r2, r3, #1
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae64:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	627b      	str	r3, [r7, #36]	; 0x24
 800ae6a:	e01b      	b.n	800aea4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	3302      	adds	r3, #2
 800ae78:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	3301      	adds	r3, #1
 800ae86:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	0a1b      	lsrs	r3, r3, #8
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	3301      	adds	r3, #1
 800ae96:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ae98:	6a3b      	ldr	r3, [r7, #32]
 800ae9a:	3302      	adds	r3, #2
 800ae9c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea0:	3b01      	subs	r3, #1
 800aea2:	627b      	str	r3, [r7, #36]	; 0x24
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1e0      	bne.n	800ae6c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800aeaa:	88bb      	ldrh	r3, [r7, #4]
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d007      	beq.n	800aec6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	b2da      	uxtb	r2, r3
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	701a      	strb	r2, [r3, #0]
  }
}
 800aec6:	bf00      	nop
 800aec8:	372c      	adds	r7, #44	; 0x2c
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bc80      	pop	{r7}
 800aece:	4770      	bx	lr

0800aed0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	7c1b      	ldrb	r3, [r3, #16]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d115      	bne.n	800af14 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aeec:	2202      	movs	r2, #2
 800aeee:	2181      	movs	r1, #129	; 0x81
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f001 feac 	bl	800cc4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aefc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af00:	2202      	movs	r2, #2
 800af02:	2101      	movs	r1, #1
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f001 fea2 	bl	800cc4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800af12:	e012      	b.n	800af3a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af14:	2340      	movs	r3, #64	; 0x40
 800af16:	2202      	movs	r2, #2
 800af18:	2181      	movs	r1, #129	; 0x81
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f001 fe97 	bl	800cc4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af26:	2340      	movs	r3, #64	; 0x40
 800af28:	2202      	movs	r2, #2
 800af2a:	2101      	movs	r1, #1
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f001 fe8e 	bl	800cc4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af3a:	2308      	movs	r3, #8
 800af3c:	2203      	movs	r2, #3
 800af3e:	2182      	movs	r1, #130	; 0x82
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f001 fe84 	bl	800cc4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2201      	movs	r2, #1
 800af4a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800af50:	f001 ffa4 	bl	800ce9c <USBD_static_malloc>
 800af54:	4602      	mov	r2, r0
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af62:	2b00      	cmp	r3, #0
 800af64:	d102      	bne.n	800af6c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800af66:	2301      	movs	r3, #1
 800af68:	73fb      	strb	r3, [r7, #15]
 800af6a:	e026      	b.n	800afba <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af72:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	2200      	movs	r2, #0
 800af8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	7c1b      	ldrb	r3, [r3, #16]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d109      	bne.n	800afaa <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afa0:	2101      	movs	r1, #1
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f001 ff44 	bl	800ce30 <USBD_LL_PrepareReceive>
 800afa8:	e007      	b.n	800afba <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afb0:	2340      	movs	r3, #64	; 0x40
 800afb2:	2101      	movs	r1, #1
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f001 ff3b 	bl	800ce30 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800afba:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800afd4:	2181      	movs	r1, #129	; 0x81
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f001 fe5f 	bl	800cc9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800afe2:	2101      	movs	r1, #1
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 fe58 	bl	800cc9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aff2:	2182      	movs	r1, #130	; 0x82
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 fe50 	bl	800cc9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00e      	beq.n	800b028 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 ff4a 	bl	800ceb4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b028:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b086      	sub	sp, #24
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b042:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b048:	2300      	movs	r3, #0
 800b04a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d039      	beq.n	800b0d0 <USBD_CDC_Setup+0x9e>
 800b05c:	2b20      	cmp	r3, #32
 800b05e:	d17f      	bne.n	800b160 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	88db      	ldrh	r3, [r3, #6]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d029      	beq.n	800b0bc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	b25b      	sxtb	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	da11      	bge.n	800b096 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b07e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	88d2      	ldrh	r2, [r2, #6]
 800b084:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b086:	6939      	ldr	r1, [r7, #16]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	88db      	ldrh	r3, [r3, #6]
 800b08c:	461a      	mov	r2, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f001 fa09 	bl	800c4a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b094:	e06b      	b.n	800b16e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	785a      	ldrb	r2, [r3, #1]
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	88db      	ldrh	r3, [r3, #6]
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b0ac:	6939      	ldr	r1, [r7, #16]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	88db      	ldrh	r3, [r3, #6]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f001 fa24 	bl	800c502 <USBD_CtlPrepareRx>
      break;
 800b0ba:	e058      	b.n	800b16e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	7850      	ldrb	r0, [r2, #1]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	4798      	blx	r3
      break;
 800b0ce:	e04e      	b.n	800b16e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	785b      	ldrb	r3, [r3, #1]
 800b0d4:	2b0b      	cmp	r3, #11
 800b0d6:	d02e      	beq.n	800b136 <USBD_CDC_Setup+0x104>
 800b0d8:	2b0b      	cmp	r3, #11
 800b0da:	dc38      	bgt.n	800b14e <USBD_CDC_Setup+0x11c>
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d002      	beq.n	800b0e6 <USBD_CDC_Setup+0xb4>
 800b0e0:	2b0a      	cmp	r3, #10
 800b0e2:	d014      	beq.n	800b10e <USBD_CDC_Setup+0xdc>
 800b0e4:	e033      	b.n	800b14e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d107      	bne.n	800b100 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b0f0:	f107 030c 	add.w	r3, r7, #12
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f001 f9d4 	bl	800c4a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0fe:	e02e      	b.n	800b15e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f001 f965 	bl	800c3d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b108:	2302      	movs	r3, #2
 800b10a:	75fb      	strb	r3, [r7, #23]
          break;
 800b10c:	e027      	b.n	800b15e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b114:	2b03      	cmp	r3, #3
 800b116:	d107      	bne.n	800b128 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b118:	f107 030f 	add.w	r3, r7, #15
 800b11c:	2201      	movs	r2, #1
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f001 f9c0 	bl	800c4a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b126:	e01a      	b.n	800b15e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 f951 	bl	800c3d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b130:	2302      	movs	r3, #2
 800b132:	75fb      	strb	r3, [r7, #23]
          break;
 800b134:	e013      	b.n	800b15e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d00d      	beq.n	800b15c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b140:	6839      	ldr	r1, [r7, #0]
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 f945 	bl	800c3d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b148:	2302      	movs	r3, #2
 800b14a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b14c:	e006      	b.n	800b15c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f001 f93e 	bl	800c3d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b156:	2302      	movs	r3, #2
 800b158:	75fb      	strb	r3, [r7, #23]
          break;
 800b15a:	e000      	b.n	800b15e <USBD_CDC_Setup+0x12c>
          break;
 800b15c:	bf00      	nop
      }
      break;
 800b15e:	e006      	b.n	800b16e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f001 f935 	bl	800c3d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b168:	2302      	movs	r3, #2
 800b16a:	75fb      	strb	r3, [r7, #23]
      break;
 800b16c:	bf00      	nop
  }

  return ret;
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b18a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b192:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d03a      	beq.n	800b214 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b19e:	78fa      	ldrb	r2, [r7, #3]
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4413      	add	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	440b      	add	r3, r1
 800b1ac:	331c      	adds	r3, #28
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d029      	beq.n	800b208 <USBD_CDC_DataIn+0x90>
 800b1b4:	78fa      	ldrb	r2, [r7, #3]
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	440b      	add	r3, r1
 800b1c2:	331c      	adds	r3, #28
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	78f9      	ldrb	r1, [r7, #3]
 800b1c8:	68b8      	ldr	r0, [r7, #8]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	440b      	add	r3, r1
 800b1d0:	00db      	lsls	r3, r3, #3
 800b1d2:	4403      	add	r3, r0
 800b1d4:	3338      	adds	r3, #56	; 0x38
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1dc:	fb01 f303 	mul.w	r3, r1, r3
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d110      	bne.n	800b208 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b1e6:	78fa      	ldrb	r2, [r7, #3]
 800b1e8:	6879      	ldr	r1, [r7, #4]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	440b      	add	r3, r1
 800b1f4:	331c      	adds	r3, #28
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1fa:	78f9      	ldrb	r1, [r7, #3]
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2200      	movs	r2, #0
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f001 fdf2 	bl	800cdea <USBD_LL_Transmit>
 800b206:	e003      	b.n	800b210 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	e000      	b.n	800b216 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b214:	2302      	movs	r3, #2
  }
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	460b      	mov	r3, r1
 800b228:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b230:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b232:	78fb      	ldrb	r3, [r7, #3]
 800b234:	4619      	mov	r1, r3
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 fe1d 	bl	800ce76 <USBD_LL_GetRxDataSize>
 800b23c:	4602      	mov	r2, r0
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00d      	beq.n	800b26a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b262:	4611      	mov	r1, r2
 800b264:	4798      	blx	r3

    return USBD_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	e000      	b.n	800b26c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b26a:	2302      	movs	r3, #2
  }
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b282:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d015      	beq.n	800b2ba <USBD_CDC_EP0_RxReady+0x46>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b294:	2bff      	cmp	r3, #255	; 0xff
 800b296:	d010      	beq.n	800b2ba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b2a6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b2ae:	b292      	uxth	r2, r2
 800b2b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	22ff      	movs	r2, #255	; 0xff
 800b2b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2243      	movs	r2, #67	; 0x43
 800b2d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b2d2:	4b03      	ldr	r3, [pc, #12]	; (800b2e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	2000009c 	.word	0x2000009c

0800b2e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2243      	movs	r2, #67	; 0x43
 800b2f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b2f2:	4b03      	ldr	r3, [pc, #12]	; (800b300 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bc80      	pop	{r7}
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	20000058 	.word	0x20000058

0800b304 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2243      	movs	r2, #67	; 0x43
 800b310:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b312:	4b03      	ldr	r3, [pc, #12]	; (800b320 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b314:	4618      	mov	r0, r3
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	bc80      	pop	{r7}
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	200000e0 	.word	0x200000e0

0800b324 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	220a      	movs	r2, #10
 800b330:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b332:	4b03      	ldr	r3, [pc, #12]	; (800b340 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	bc80      	pop	{r7}
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	20000014 	.word	0x20000014

0800b344 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b34e:	2302      	movs	r3, #2
 800b350:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d005      	beq.n	800b364 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b364:	7bfb      	ldrb	r3, [r7, #15]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bc80      	pop	{r7}
 800b36e:	4770      	bx	lr

0800b370 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b370:	b480      	push	{r7}
 800b372:	b087      	sub	sp, #28
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	4613      	mov	r3, r2
 800b37c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b384:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	68ba      	ldr	r2, [r7, #8]
 800b38a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b38e:	88fa      	ldrh	r2, [r7, #6]
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	371c      	adds	r7, #28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr

0800b3a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b085      	sub	sp, #20
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
 800b3aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bc80      	pop	{r7}
 800b3c6:	4770      	bx	lr

0800b3c8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d01c      	beq.n	800b41c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d115      	bne.n	800b418 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	2181      	movs	r1, #129	; 0x81
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f001 fceb 	bl	800cdea <USBD_LL_Transmit>

      return USBD_OK;
 800b414:	2300      	movs	r3, #0
 800b416:	e002      	b.n	800b41e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b418:	2301      	movs	r3, #1
 800b41a:	e000      	b.n	800b41e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b41c:	2302      	movs	r3, #2
  }
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b434:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d017      	beq.n	800b470 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	7c1b      	ldrb	r3, [r3, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d109      	bne.n	800b45c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b44e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b452:	2101      	movs	r1, #1
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f001 fceb 	bl	800ce30 <USBD_LL_PrepareReceive>
 800b45a:	e007      	b.n	800b46c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b462:	2340      	movs	r3, #64	; 0x40
 800b464:	2101      	movs	r1, #1
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f001 fce2 	bl	800ce30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	e000      	b.n	800b472 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b470:	2302      	movs	r3, #2
  }
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	60f8      	str	r0, [r7, #12]
 800b482:	60b9      	str	r1, [r7, #8]
 800b484:	4613      	mov	r3, r2
 800b486:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b48e:	2302      	movs	r3, #2
 800b490:	e01a      	b.n	800b4c8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d003      	beq.n	800b4a4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	79fa      	ldrb	r2, [r7, #7]
 800b4be:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f001 fb4f 	bl	800cb64 <USBD_LL_Init>

  return USBD_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d006      	beq.n	800b4f2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	73fb      	strb	r3, [r7, #15]
 800b4f0:	e001      	b.n	800b4f6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bc80      	pop	{r7}
 800b500:	4770      	bx	lr

0800b502 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b082      	sub	sp, #8
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f001 fb84 	bl	800cc18 <USBD_LL_Start>

  return USBD_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b51a:	b480      	push	{r7}
 800b51c:	b083      	sub	sp, #12
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	bc80      	pop	{r7}
 800b52c:	4770      	bx	lr

0800b52e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	460b      	mov	r3, r1
 800b538:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b53a:	2302      	movs	r3, #2
 800b53c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00c      	beq.n	800b562 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	78fa      	ldrb	r2, [r7, #3]
 800b552:	4611      	mov	r1, r2
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	4798      	blx	r3
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b55e:	2300      	movs	r3, #0
 800b560:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b562:	7bfb      	ldrb	r3, [r7, #15]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	78fa      	ldrb	r2, [r7, #3]
 800b582:	4611      	mov	r1, r2
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	4798      	blx	r3

  return USBD_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b082      	sub	sp, #8
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 fed8 	bl	800c35a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b5c6:	f003 031f 	and.w	r3, r3, #31
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d016      	beq.n	800b5fc <USBD_LL_SetupStage+0x6a>
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	d81c      	bhi.n	800b60c <USBD_LL_SetupStage+0x7a>
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <USBD_LL_SetupStage+0x4a>
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d008      	beq.n	800b5ec <USBD_LL_SetupStage+0x5a>
 800b5da:	e017      	b.n	800b60c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f9cb 	bl	800b980 <USBD_StdDevReq>
      break;
 800b5ea:	e01a      	b.n	800b622 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 fa2d 	bl	800ba54 <USBD_StdItfReq>
      break;
 800b5fa:	e012      	b.n	800b622 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fa6d 	bl	800bae4 <USBD_StdEPReq>
      break;
 800b60a:	e00a      	b.n	800b622 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b612:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b616:	b2db      	uxtb	r3, r3
 800b618:	4619      	mov	r1, r3
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f001 fb5c 	bl	800ccd8 <USBD_LL_StallEP>
      break;
 800b620:	bf00      	nop
  }

  return USBD_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	460b      	mov	r3, r1
 800b636:	607a      	str	r2, [r7, #4]
 800b638:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b63a:	7afb      	ldrb	r3, [r7, #11]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d14b      	bne.n	800b6d8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b646:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b64e:	2b03      	cmp	r3, #3
 800b650:	d134      	bne.n	800b6bc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	68da      	ldr	r2, [r3, #12]
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d919      	bls.n	800b692 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	68da      	ldr	r2, [r3, #12]
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	1ad2      	subs	r2, r2, r3
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b674:	429a      	cmp	r2, r3
 800b676:	d203      	bcs.n	800b680 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	e002      	b.n	800b686 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b684:	b29b      	uxth	r3, r3
 800b686:	461a      	mov	r2, r3
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f000 ff57 	bl	800c53e <USBD_CtlContinueRx>
 800b690:	e038      	b.n	800b704 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00a      	beq.n	800b6b4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b6a4:	2b03      	cmp	r3, #3
 800b6a6:	d105      	bne.n	800b6b4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f000 ff54 	bl	800c562 <USBD_CtlSendStatus>
 800b6ba:	e023      	b.n	800b704 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6c2:	2b05      	cmp	r3, #5
 800b6c4:	d11e      	bne.n	800b704 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f001 fb01 	bl	800ccd8 <USBD_LL_StallEP>
 800b6d6:	e015      	b.n	800b704 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d00d      	beq.n	800b700 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d108      	bne.n	800b700 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6f4:	699b      	ldr	r3, [r3, #24]
 800b6f6:	7afa      	ldrb	r2, [r7, #11]
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	4798      	blx	r3
 800b6fe:	e001      	b.n	800b704 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b700:	2302      	movs	r3, #2
 800b702:	e000      	b.n	800b706 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b086      	sub	sp, #24
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	460b      	mov	r3, r1
 800b718:	607a      	str	r2, [r7, #4]
 800b71a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b71c:	7afb      	ldrb	r3, [r7, #11]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d17f      	bne.n	800b822 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	3314      	adds	r3, #20
 800b726:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d15c      	bne.n	800b7ec <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	68da      	ldr	r2, [r3, #12]
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	691b      	ldr	r3, [r3, #16]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d915      	bls.n	800b76a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	1ad2      	subs	r2, r2, r3
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	b29b      	uxth	r3, r3
 800b752:	461a      	mov	r2, r3
 800b754:	6879      	ldr	r1, [r7, #4]
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f000 fec1 	bl	800c4de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b75c:	2300      	movs	r3, #0
 800b75e:	2200      	movs	r2, #0
 800b760:	2100      	movs	r1, #0
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f001 fb64 	bl	800ce30 <USBD_LL_PrepareReceive>
 800b768:	e04e      	b.n	800b808 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	6912      	ldr	r2, [r2, #16]
 800b772:	fbb3 f1f2 	udiv	r1, r3, r2
 800b776:	fb01 f202 	mul.w	r2, r1, r2
 800b77a:	1a9b      	subs	r3, r3, r2
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d11c      	bne.n	800b7ba <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	689a      	ldr	r2, [r3, #8]
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b788:	429a      	cmp	r2, r3
 800b78a:	d316      	bcc.n	800b7ba <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	689a      	ldr	r2, [r3, #8]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b796:	429a      	cmp	r2, r3
 800b798:	d20f      	bcs.n	800b7ba <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b79a:	2200      	movs	r2, #0
 800b79c:	2100      	movs	r1, #0
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f000 fe9d 	bl	800c4de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f001 fb3c 	bl	800ce30 <USBD_LL_PrepareReceive>
 800b7b8:	e026      	b.n	800b808 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00a      	beq.n	800b7dc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	d105      	bne.n	800b7dc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b7dc:	2180      	movs	r1, #128	; 0x80
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f001 fa7a 	bl	800ccd8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f000 fecf 	bl	800c588 <USBD_CtlReceiveStatus>
 800b7ea:	e00d      	b.n	800b808 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7f2:	2b04      	cmp	r3, #4
 800b7f4:	d004      	beq.n	800b800 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d103      	bne.n	800b808 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b800:	2180      	movs	r1, #128	; 0x80
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f001 fa68 	bl	800ccd8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d11d      	bne.n	800b84e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f7ff fe81 	bl	800b51a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b820:	e015      	b.n	800b84e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00d      	beq.n	800b84a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b834:	2b03      	cmp	r3, #3
 800b836:	d108      	bne.n	800b84a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83e:	695b      	ldr	r3, [r3, #20]
 800b840:	7afa      	ldrb	r2, [r7, #11]
 800b842:	4611      	mov	r1, r2
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	4798      	blx	r3
 800b848:	e001      	b.n	800b84e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b84a:	2302      	movs	r3, #2
 800b84c:	e000      	b.n	800b850 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b860:	2340      	movs	r3, #64	; 0x40
 800b862:	2200      	movs	r2, #0
 800b864:	2100      	movs	r1, #0
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f001 f9f1 	bl	800cc4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2240      	movs	r2, #64	; 0x40
 800b878:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b87c:	2340      	movs	r3, #64	; 0x40
 800b87e:	2200      	movs	r2, #0
 800b880:	2180      	movs	r1, #128	; 0x80
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f001 f9e3 	bl	800cc4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2240      	movs	r2, #64	; 0x40
 800b892:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d009      	beq.n	800b8d0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	6852      	ldr	r2, [r2, #4]
 800b8c8:	b2d2      	uxtb	r2, r2
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	4798      	blx	r3
  }

  return USBD_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b083      	sub	sp, #12
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	78fa      	ldrb	r2, [r7, #3]
 800b8ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bc80      	pop	{r7}
 800b8f6:	4770      	bx	lr

0800b8f8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2204      	movs	r2, #4
 800b910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bc80      	pop	{r7}
 800b91e:	4770      	bx	lr

0800b920 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b92e:	2b04      	cmp	r3, #4
 800b930:	d105      	bne.n	800b93e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	bc80      	pop	{r7}
 800b948:	4770      	bx	lr

0800b94a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b958:	2b03      	cmp	r3, #3
 800b95a:	d10b      	bne.n	800b974 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b962:	69db      	ldr	r3, [r3, #28]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d005      	beq.n	800b974 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b96e:	69db      	ldr	r3, [r3, #28]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b996:	2b40      	cmp	r3, #64	; 0x40
 800b998:	d005      	beq.n	800b9a6 <USBD_StdDevReq+0x26>
 800b99a:	2b40      	cmp	r3, #64	; 0x40
 800b99c:	d84f      	bhi.n	800ba3e <USBD_StdDevReq+0xbe>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d009      	beq.n	800b9b6 <USBD_StdDevReq+0x36>
 800b9a2:	2b20      	cmp	r3, #32
 800b9a4:	d14b      	bne.n	800ba3e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	6839      	ldr	r1, [r7, #0]
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	4798      	blx	r3
      break;
 800b9b4:	e048      	b.n	800ba48 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	785b      	ldrb	r3, [r3, #1]
 800b9ba:	2b09      	cmp	r3, #9
 800b9bc:	d839      	bhi.n	800ba32 <USBD_StdDevReq+0xb2>
 800b9be:	a201      	add	r2, pc, #4	; (adr r2, 800b9c4 <USBD_StdDevReq+0x44>)
 800b9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c4:	0800ba15 	.word	0x0800ba15
 800b9c8:	0800ba29 	.word	0x0800ba29
 800b9cc:	0800ba33 	.word	0x0800ba33
 800b9d0:	0800ba1f 	.word	0x0800ba1f
 800b9d4:	0800ba33 	.word	0x0800ba33
 800b9d8:	0800b9f7 	.word	0x0800b9f7
 800b9dc:	0800b9ed 	.word	0x0800b9ed
 800b9e0:	0800ba33 	.word	0x0800ba33
 800b9e4:	0800ba0b 	.word	0x0800ba0b
 800b9e8:	0800ba01 	.word	0x0800ba01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f9dc 	bl	800bdac <USBD_GetDescriptor>
          break;
 800b9f4:	e022      	b.n	800ba3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fb3f 	bl	800c07c <USBD_SetAddress>
          break;
 800b9fe:	e01d      	b.n	800ba3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fb7e 	bl	800c104 <USBD_SetConfig>
          break;
 800ba08:	e018      	b.n	800ba3c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba0a:	6839      	ldr	r1, [r7, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fc07 	bl	800c220 <USBD_GetConfig>
          break;
 800ba12:	e013      	b.n	800ba3c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ba14:	6839      	ldr	r1, [r7, #0]
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fc37 	bl	800c28a <USBD_GetStatus>
          break;
 800ba1c:	e00e      	b.n	800ba3c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fc65 	bl	800c2f0 <USBD_SetFeature>
          break;
 800ba26:	e009      	b.n	800ba3c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fc74 	bl	800c318 <USBD_ClrFeature>
          break;
 800ba30:	e004      	b.n	800ba3c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 fccc 	bl	800c3d2 <USBD_CtlError>
          break;
 800ba3a:	bf00      	nop
      }
      break;
 800ba3c:	e004      	b.n	800ba48 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fcc6 	bl	800c3d2 <USBD_CtlError>
      break;
 800ba46:	bf00      	nop
  }

  return ret;
 800ba48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop

0800ba54 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba6a:	2b40      	cmp	r3, #64	; 0x40
 800ba6c:	d005      	beq.n	800ba7a <USBD_StdItfReq+0x26>
 800ba6e:	2b40      	cmp	r3, #64	; 0x40
 800ba70:	d82e      	bhi.n	800bad0 <USBD_StdItfReq+0x7c>
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <USBD_StdItfReq+0x26>
 800ba76:	2b20      	cmp	r3, #32
 800ba78:	d12a      	bne.n	800bad0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba80:	3b01      	subs	r3, #1
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d81d      	bhi.n	800bac2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	889b      	ldrh	r3, [r3, #4]
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d813      	bhi.n	800bab8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	4798      	blx	r3
 800ba9e:	4603      	mov	r3, r0
 800baa0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	88db      	ldrh	r3, [r3, #6]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d110      	bne.n	800bacc <USBD_StdItfReq+0x78>
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d10d      	bne.n	800bacc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 fd56 	bl	800c562 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bab6:	e009      	b.n	800bacc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bab8:	6839      	ldr	r1, [r7, #0]
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fc89 	bl	800c3d2 <USBD_CtlError>
          break;
 800bac0:	e004      	b.n	800bacc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fc84 	bl	800c3d2 <USBD_CtlError>
          break;
 800baca:	e000      	b.n	800bace <USBD_StdItfReq+0x7a>
          break;
 800bacc:	bf00      	nop
      }
      break;
 800bace:	e004      	b.n	800bada <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fc7d 	bl	800c3d2 <USBD_CtlError>
      break;
 800bad8:	bf00      	nop
  }

  return USBD_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	889b      	ldrh	r3, [r3, #4]
 800baf6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb00:	2b40      	cmp	r3, #64	; 0x40
 800bb02:	d007      	beq.n	800bb14 <USBD_StdEPReq+0x30>
 800bb04:	2b40      	cmp	r3, #64	; 0x40
 800bb06:	f200 8146 	bhi.w	800bd96 <USBD_StdEPReq+0x2b2>
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00a      	beq.n	800bb24 <USBD_StdEPReq+0x40>
 800bb0e:	2b20      	cmp	r3, #32
 800bb10:	f040 8141 	bne.w	800bd96 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	4798      	blx	r3
      break;
 800bb22:	e13d      	b.n	800bda0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb2c:	2b20      	cmp	r3, #32
 800bb2e:	d10a      	bne.n	800bb46 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	6839      	ldr	r1, [r7, #0]
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	4798      	blx	r3
 800bb3e:	4603      	mov	r3, r0
 800bb40:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
 800bb44:	e12d      	b.n	800bda2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	785b      	ldrb	r3, [r3, #1]
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d007      	beq.n	800bb5e <USBD_StdEPReq+0x7a>
 800bb4e:	2b03      	cmp	r3, #3
 800bb50:	f300 811b 	bgt.w	800bd8a <USBD_StdEPReq+0x2a6>
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d072      	beq.n	800bc3e <USBD_StdEPReq+0x15a>
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d03a      	beq.n	800bbd2 <USBD_StdEPReq+0xee>
 800bb5c:	e115      	b.n	800bd8a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb64:	2b02      	cmp	r3, #2
 800bb66:	d002      	beq.n	800bb6e <USBD_StdEPReq+0x8a>
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d015      	beq.n	800bb98 <USBD_StdEPReq+0xb4>
 800bb6c:	e02b      	b.n	800bbc6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb6e:	7bbb      	ldrb	r3, [r7, #14]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00c      	beq.n	800bb8e <USBD_StdEPReq+0xaa>
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	2b80      	cmp	r3, #128	; 0x80
 800bb78:	d009      	beq.n	800bb8e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f001 f8aa 	bl	800ccd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bb84:	2180      	movs	r1, #128	; 0x80
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f001 f8a6 	bl	800ccd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb8c:	e020      	b.n	800bbd0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fc1e 	bl	800c3d2 <USBD_CtlError>
              break;
 800bb96:	e01b      	b.n	800bbd0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	885b      	ldrh	r3, [r3, #2]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d10e      	bne.n	800bbbe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00b      	beq.n	800bbbe <USBD_StdEPReq+0xda>
 800bba6:	7bbb      	ldrb	r3, [r7, #14]
 800bba8:	2b80      	cmp	r3, #128	; 0x80
 800bbaa:	d008      	beq.n	800bbbe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	88db      	ldrh	r3, [r3, #6]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d104      	bne.n	800bbbe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bbb4:	7bbb      	ldrb	r3, [r7, #14]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f001 f88d 	bl	800ccd8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fccf 	bl	800c562 <USBD_CtlSendStatus>

              break;
 800bbc4:	e004      	b.n	800bbd0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bbc6:	6839      	ldr	r1, [r7, #0]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fc02 	bl	800c3d2 <USBD_CtlError>
              break;
 800bbce:	bf00      	nop
          }
          break;
 800bbd0:	e0e0      	b.n	800bd94 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbd8:	2b02      	cmp	r3, #2
 800bbda:	d002      	beq.n	800bbe2 <USBD_StdEPReq+0xfe>
 800bbdc:	2b03      	cmp	r3, #3
 800bbde:	d015      	beq.n	800bc0c <USBD_StdEPReq+0x128>
 800bbe0:	e026      	b.n	800bc30 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbe2:	7bbb      	ldrb	r3, [r7, #14]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00c      	beq.n	800bc02 <USBD_StdEPReq+0x11e>
 800bbe8:	7bbb      	ldrb	r3, [r7, #14]
 800bbea:	2b80      	cmp	r3, #128	; 0x80
 800bbec:	d009      	beq.n	800bc02 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f001 f870 	bl	800ccd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bbf8:	2180      	movs	r1, #128	; 0x80
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f001 f86c 	bl	800ccd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc00:	e01c      	b.n	800bc3c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bc02:	6839      	ldr	r1, [r7, #0]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fbe4 	bl	800c3d2 <USBD_CtlError>
              break;
 800bc0a:	e017      	b.n	800bc3c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	885b      	ldrh	r3, [r3, #2]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d112      	bne.n	800bc3a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc14:	7bbb      	ldrb	r3, [r7, #14]
 800bc16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d004      	beq.n	800bc28 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc1e:	7bbb      	ldrb	r3, [r7, #14]
 800bc20:	4619      	mov	r1, r3
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 f877 	bl	800cd16 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 fc9a 	bl	800c562 <USBD_CtlSendStatus>
              }
              break;
 800bc2e:	e004      	b.n	800bc3a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fbcd 	bl	800c3d2 <USBD_CtlError>
              break;
 800bc38:	e000      	b.n	800bc3c <USBD_StdEPReq+0x158>
              break;
 800bc3a:	bf00      	nop
          }
          break;
 800bc3c:	e0aa      	b.n	800bd94 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d002      	beq.n	800bc4e <USBD_StdEPReq+0x16a>
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d032      	beq.n	800bcb2 <USBD_StdEPReq+0x1ce>
 800bc4c:	e097      	b.n	800bd7e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc4e:	7bbb      	ldrb	r3, [r7, #14]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d007      	beq.n	800bc64 <USBD_StdEPReq+0x180>
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	2b80      	cmp	r3, #128	; 0x80
 800bc58:	d004      	beq.n	800bc64 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fbb8 	bl	800c3d2 <USBD_CtlError>
                break;
 800bc62:	e091      	b.n	800bd88 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	da0b      	bge.n	800bc84 <USBD_StdEPReq+0x1a0>
 800bc6c:	7bbb      	ldrb	r3, [r7, #14]
 800bc6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc72:	4613      	mov	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4413      	add	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	3310      	adds	r3, #16
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	4413      	add	r3, r2
 800bc80:	3304      	adds	r3, #4
 800bc82:	e00b      	b.n	800bc9c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc84:	7bbb      	ldrb	r3, [r7, #14]
 800bc86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	4413      	add	r3, r2
 800bc9a:	3304      	adds	r3, #4
 800bc9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	2200      	movs	r2, #0
 800bca2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2202      	movs	r2, #2
 800bca8:	4619      	mov	r1, r3
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fbfb 	bl	800c4a6 <USBD_CtlSendData>
              break;
 800bcb0:	e06a      	b.n	800bd88 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bcb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	da11      	bge.n	800bcde <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bcba:	7bbb      	ldrb	r3, [r7, #14]
 800bcbc:	f003 020f 	and.w	r2, r3, #15
 800bcc0:	6879      	ldr	r1, [r7, #4]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	4413      	add	r3, r2
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	440b      	add	r3, r1
 800bccc:	3318      	adds	r3, #24
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d117      	bne.n	800bd04 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bcd4:	6839      	ldr	r1, [r7, #0]
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 fb7b 	bl	800c3d2 <USBD_CtlError>
                  break;
 800bcdc:	e054      	b.n	800bd88 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bcde:	7bbb      	ldrb	r3, [r7, #14]
 800bce0:	f003 020f 	and.w	r2, r3, #15
 800bce4:	6879      	ldr	r1, [r7, #4]
 800bce6:	4613      	mov	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	440b      	add	r3, r1
 800bcf0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d104      	bne.n	800bd04 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bcfa:	6839      	ldr	r1, [r7, #0]
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fb68 	bl	800c3d2 <USBD_CtlError>
                  break;
 800bd02:	e041      	b.n	800bd88 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	da0b      	bge.n	800bd24 <USBD_StdEPReq+0x240>
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd12:	4613      	mov	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4413      	add	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	3310      	adds	r3, #16
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	4413      	add	r3, r2
 800bd20:	3304      	adds	r3, #4
 800bd22:	e00b      	b.n	800bd3c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd24:	7bbb      	ldrb	r3, [r7, #14]
 800bd26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	4413      	add	r3, r2
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd3e:	7bbb      	ldrb	r3, [r7, #14]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d002      	beq.n	800bd4a <USBD_StdEPReq+0x266>
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
 800bd46:	2b80      	cmp	r3, #128	; 0x80
 800bd48:	d103      	bne.n	800bd52 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	601a      	str	r2, [r3, #0]
 800bd50:	e00e      	b.n	800bd70 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bd52:	7bbb      	ldrb	r3, [r7, #14]
 800bd54:	4619      	mov	r1, r3
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fffc 	bl	800cd54 <USBD_LL_IsStallEP>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d003      	beq.n	800bd6a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	2201      	movs	r2, #1
 800bd66:	601a      	str	r2, [r3, #0]
 800bd68:	e002      	b.n	800bd70 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2202      	movs	r2, #2
 800bd74:	4619      	mov	r1, r3
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 fb95 	bl	800c4a6 <USBD_CtlSendData>
              break;
 800bd7c:	e004      	b.n	800bd88 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fb26 	bl	800c3d2 <USBD_CtlError>
              break;
 800bd86:	bf00      	nop
          }
          break;
 800bd88:	e004      	b.n	800bd94 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bd8a:	6839      	ldr	r1, [r7, #0]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f000 fb20 	bl	800c3d2 <USBD_CtlError>
          break;
 800bd92:	bf00      	nop
      }
      break;
 800bd94:	e004      	b.n	800bda0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bd96:	6839      	ldr	r1, [r7, #0]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fb1a 	bl	800c3d2 <USBD_CtlError>
      break;
 800bd9e:	bf00      	nop
  }

  return ret;
 800bda0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3710      	adds	r7, #16
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
	...

0800bdac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	885b      	ldrh	r3, [r3, #2]
 800bdc6:	0a1b      	lsrs	r3, r3, #8
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	2b06      	cmp	r3, #6
 800bdce:	f200 8128 	bhi.w	800c022 <USBD_GetDescriptor+0x276>
 800bdd2:	a201      	add	r2, pc, #4	; (adr r2, 800bdd8 <USBD_GetDescriptor+0x2c>)
 800bdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd8:	0800bdf5 	.word	0x0800bdf5
 800bddc:	0800be0d 	.word	0x0800be0d
 800bde0:	0800be4d 	.word	0x0800be4d
 800bde4:	0800c023 	.word	0x0800c023
 800bde8:	0800c023 	.word	0x0800c023
 800bdec:	0800bfc3 	.word	0x0800bfc3
 800bdf0:	0800bfef 	.word	0x0800bfef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	7c12      	ldrb	r2, [r2, #16]
 800be00:	f107 0108 	add.w	r1, r7, #8
 800be04:	4610      	mov	r0, r2
 800be06:	4798      	blx	r3
 800be08:	60f8      	str	r0, [r7, #12]
      break;
 800be0a:	e112      	b.n	800c032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	7c1b      	ldrb	r3, [r3, #16]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d10d      	bne.n	800be30 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1c:	f107 0208 	add.w	r2, r7, #8
 800be20:	4610      	mov	r0, r2
 800be22:	4798      	blx	r3
 800be24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3301      	adds	r3, #1
 800be2a:	2202      	movs	r2, #2
 800be2c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be2e:	e100      	b.n	800c032 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be38:	f107 0208 	add.w	r2, r7, #8
 800be3c:	4610      	mov	r0, r2
 800be3e:	4798      	blx	r3
 800be40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3301      	adds	r3, #1
 800be46:	2202      	movs	r2, #2
 800be48:	701a      	strb	r2, [r3, #0]
      break;
 800be4a:	e0f2      	b.n	800c032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	885b      	ldrh	r3, [r3, #2]
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b05      	cmp	r3, #5
 800be54:	f200 80ac 	bhi.w	800bfb0 <USBD_GetDescriptor+0x204>
 800be58:	a201      	add	r2, pc, #4	; (adr r2, 800be60 <USBD_GetDescriptor+0xb4>)
 800be5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5e:	bf00      	nop
 800be60:	0800be79 	.word	0x0800be79
 800be64:	0800bead 	.word	0x0800bead
 800be68:	0800bee1 	.word	0x0800bee1
 800be6c:	0800bf15 	.word	0x0800bf15
 800be70:	0800bf49 	.word	0x0800bf49
 800be74:	0800bf7d 	.word	0x0800bf7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00b      	beq.n	800be9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	7c12      	ldrb	r2, [r2, #16]
 800be90:	f107 0108 	add.w	r1, r7, #8
 800be94:	4610      	mov	r0, r2
 800be96:	4798      	blx	r3
 800be98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be9a:	e091      	b.n	800bfc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be9c:	6839      	ldr	r1, [r7, #0]
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fa97 	bl	800c3d2 <USBD_CtlError>
            err++;
 800bea4:	7afb      	ldrb	r3, [r7, #11]
 800bea6:	3301      	adds	r3, #1
 800bea8:	72fb      	strb	r3, [r7, #11]
          break;
 800beaa:	e089      	b.n	800bfc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800beb2:	689b      	ldr	r3, [r3, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00b      	beq.n	800bed0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	7c12      	ldrb	r2, [r2, #16]
 800bec4:	f107 0108 	add.w	r1, r7, #8
 800bec8:	4610      	mov	r0, r2
 800beca:	4798      	blx	r3
 800becc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bece:	e077      	b.n	800bfc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fa7d 	bl	800c3d2 <USBD_CtlError>
            err++;
 800bed8:	7afb      	ldrb	r3, [r7, #11]
 800beda:	3301      	adds	r3, #1
 800bedc:	72fb      	strb	r3, [r7, #11]
          break;
 800bede:	e06f      	b.n	800bfc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00b      	beq.n	800bf04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	7c12      	ldrb	r2, [r2, #16]
 800bef8:	f107 0108 	add.w	r1, r7, #8
 800befc:	4610      	mov	r0, r2
 800befe:	4798      	blx	r3
 800bf00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf02:	e05d      	b.n	800bfc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf04:	6839      	ldr	r1, [r7, #0]
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fa63 	bl	800c3d2 <USBD_CtlError>
            err++;
 800bf0c:	7afb      	ldrb	r3, [r7, #11]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	72fb      	strb	r3, [r7, #11]
          break;
 800bf12:	e055      	b.n	800bfc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00b      	beq.n	800bf38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	7c12      	ldrb	r2, [r2, #16]
 800bf2c:	f107 0108 	add.w	r1, r7, #8
 800bf30:	4610      	mov	r0, r2
 800bf32:	4798      	blx	r3
 800bf34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf36:	e043      	b.n	800bfc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa49 	bl	800c3d2 <USBD_CtlError>
            err++;
 800bf40:	7afb      	ldrb	r3, [r7, #11]
 800bf42:	3301      	adds	r3, #1
 800bf44:	72fb      	strb	r3, [r7, #11]
          break;
 800bf46:	e03b      	b.n	800bfc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00b      	beq.n	800bf6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bf5a:	695b      	ldr	r3, [r3, #20]
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	7c12      	ldrb	r2, [r2, #16]
 800bf60:	f107 0108 	add.w	r1, r7, #8
 800bf64:	4610      	mov	r0, r2
 800bf66:	4798      	blx	r3
 800bf68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf6a:	e029      	b.n	800bfc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fa2f 	bl	800c3d2 <USBD_CtlError>
            err++;
 800bf74:	7afb      	ldrb	r3, [r7, #11]
 800bf76:	3301      	adds	r3, #1
 800bf78:	72fb      	strb	r3, [r7, #11]
          break;
 800bf7a:	e021      	b.n	800bfc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bf82:	699b      	ldr	r3, [r3, #24]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00b      	beq.n	800bfa0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	7c12      	ldrb	r2, [r2, #16]
 800bf94:	f107 0108 	add.w	r1, r7, #8
 800bf98:	4610      	mov	r0, r2
 800bf9a:	4798      	blx	r3
 800bf9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf9e:	e00f      	b.n	800bfc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 fa15 	bl	800c3d2 <USBD_CtlError>
            err++;
 800bfa8:	7afb      	ldrb	r3, [r7, #11]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	72fb      	strb	r3, [r7, #11]
          break;
 800bfae:	e007      	b.n	800bfc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fa0d 	bl	800c3d2 <USBD_CtlError>
          err++;
 800bfb8:	7afb      	ldrb	r3, [r7, #11]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bfbe:	e038      	b.n	800c032 <USBD_GetDescriptor+0x286>
 800bfc0:	e037      	b.n	800c032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	7c1b      	ldrb	r3, [r3, #16]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d109      	bne.n	800bfde <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfd2:	f107 0208 	add.w	r2, r7, #8
 800bfd6:	4610      	mov	r0, r2
 800bfd8:	4798      	blx	r3
 800bfda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfdc:	e029      	b.n	800c032 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bfde:	6839      	ldr	r1, [r7, #0]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f9f6 	bl	800c3d2 <USBD_CtlError>
        err++;
 800bfe6:	7afb      	ldrb	r3, [r7, #11]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	72fb      	strb	r3, [r7, #11]
      break;
 800bfec:	e021      	b.n	800c032 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	7c1b      	ldrb	r3, [r3, #16]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10d      	bne.n	800c012 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	f107 0208 	add.w	r2, r7, #8
 800c002:	4610      	mov	r0, r2
 800c004:	4798      	blx	r3
 800c006:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3301      	adds	r3, #1
 800c00c:	2207      	movs	r2, #7
 800c00e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c010:	e00f      	b.n	800c032 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f9dc 	bl	800c3d2 <USBD_CtlError>
        err++;
 800c01a:	7afb      	ldrb	r3, [r7, #11]
 800c01c:	3301      	adds	r3, #1
 800c01e:	72fb      	strb	r3, [r7, #11]
      break;
 800c020:	e007      	b.n	800c032 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c022:	6839      	ldr	r1, [r7, #0]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 f9d4 	bl	800c3d2 <USBD_CtlError>
      err++;
 800c02a:	7afb      	ldrb	r3, [r7, #11]
 800c02c:	3301      	adds	r3, #1
 800c02e:	72fb      	strb	r3, [r7, #11]
      break;
 800c030:	bf00      	nop
  }

  if (err != 0U)
 800c032:	7afb      	ldrb	r3, [r7, #11]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d11c      	bne.n	800c072 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c038:	893b      	ldrh	r3, [r7, #8]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d011      	beq.n	800c062 <USBD_GetDescriptor+0x2b6>
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	88db      	ldrh	r3, [r3, #6]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00d      	beq.n	800c062 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	88da      	ldrh	r2, [r3, #6]
 800c04a:	893b      	ldrh	r3, [r7, #8]
 800c04c:	4293      	cmp	r3, r2
 800c04e:	bf28      	it	cs
 800c050:	4613      	movcs	r3, r2
 800c052:	b29b      	uxth	r3, r3
 800c054:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c056:	893b      	ldrh	r3, [r7, #8]
 800c058:	461a      	mov	r2, r3
 800c05a:	68f9      	ldr	r1, [r7, #12]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fa22 	bl	800c4a6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	88db      	ldrh	r3, [r3, #6]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d104      	bne.n	800c074 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fa79 	bl	800c562 <USBD_CtlSendStatus>
 800c070:	e000      	b.n	800c074 <USBD_GetDescriptor+0x2c8>
    return;
 800c072:	bf00      	nop
    }
  }
}
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop

0800c07c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	889b      	ldrh	r3, [r3, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d130      	bne.n	800c0f0 <USBD_SetAddress+0x74>
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	88db      	ldrh	r3, [r3, #6]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d12c      	bne.n	800c0f0 <USBD_SetAddress+0x74>
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	885b      	ldrh	r3, [r3, #2]
 800c09a:	2b7f      	cmp	r3, #127	; 0x7f
 800c09c:	d828      	bhi.n	800c0f0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	885b      	ldrh	r3, [r3, #2]
 800c0a2:	b2db      	uxtb	r3, r3
 800c0a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0b0:	2b03      	cmp	r3, #3
 800c0b2:	d104      	bne.n	800c0be <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f98b 	bl	800c3d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0bc:	e01d      	b.n	800c0fa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	7bfa      	ldrb	r2, [r7, #15]
 800c0c2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c0c6:	7bfb      	ldrb	r3, [r7, #15]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 fe6e 	bl	800cdac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fa46 	bl	800c562 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c0d6:	7bfb      	ldrb	r3, [r7, #15]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d004      	beq.n	800c0e6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2202      	movs	r2, #2
 800c0e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0e4:	e009      	b.n	800c0fa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ee:	e004      	b.n	800c0fa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f96d 	bl	800c3d2 <USBD_CtlError>
  }
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	885b      	ldrh	r3, [r3, #2]
 800c112:	b2da      	uxtb	r2, r3
 800c114:	4b41      	ldr	r3, [pc, #260]	; (800c21c <USBD_SetConfig+0x118>)
 800c116:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c118:	4b40      	ldr	r3, [pc, #256]	; (800c21c <USBD_SetConfig+0x118>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d904      	bls.n	800c12a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f955 	bl	800c3d2 <USBD_CtlError>
 800c128:	e075      	b.n	800c216 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c130:	2b02      	cmp	r3, #2
 800c132:	d002      	beq.n	800c13a <USBD_SetConfig+0x36>
 800c134:	2b03      	cmp	r3, #3
 800c136:	d023      	beq.n	800c180 <USBD_SetConfig+0x7c>
 800c138:	e062      	b.n	800c200 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c13a:	4b38      	ldr	r3, [pc, #224]	; (800c21c <USBD_SetConfig+0x118>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d01a      	beq.n	800c178 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c142:	4b36      	ldr	r3, [pc, #216]	; (800c21c <USBD_SetConfig+0x118>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2203      	movs	r2, #3
 800c150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c154:	4b31      	ldr	r3, [pc, #196]	; (800c21c <USBD_SetConfig+0x118>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	4619      	mov	r1, r3
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7ff f9e7 	bl	800b52e <USBD_SetClassConfig>
 800c160:	4603      	mov	r3, r0
 800c162:	2b02      	cmp	r3, #2
 800c164:	d104      	bne.n	800c170 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c166:	6839      	ldr	r1, [r7, #0]
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 f932 	bl	800c3d2 <USBD_CtlError>
            return;
 800c16e:	e052      	b.n	800c216 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 f9f6 	bl	800c562 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c176:	e04e      	b.n	800c216 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 f9f2 	bl	800c562 <USBD_CtlSendStatus>
        break;
 800c17e:	e04a      	b.n	800c216 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c180:	4b26      	ldr	r3, [pc, #152]	; (800c21c <USBD_SetConfig+0x118>)
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d112      	bne.n	800c1ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2202      	movs	r2, #2
 800c18c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c190:	4b22      	ldr	r3, [pc, #136]	; (800c21c <USBD_SetConfig+0x118>)
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	461a      	mov	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c19a:	4b20      	ldr	r3, [pc, #128]	; (800c21c <USBD_SetConfig+0x118>)
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7ff f9e3 	bl	800b56c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f9db 	bl	800c562 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c1ac:	e033      	b.n	800c216 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c1ae:	4b1b      	ldr	r3, [pc, #108]	; (800c21c <USBD_SetConfig+0x118>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d01d      	beq.n	800c1f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7ff f9d1 	bl	800b56c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c1ca:	4b14      	ldr	r3, [pc, #80]	; (800c21c <USBD_SetConfig+0x118>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c1d4:	4b11      	ldr	r3, [pc, #68]	; (800c21c <USBD_SetConfig+0x118>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff f9a7 	bl	800b52e <USBD_SetClassConfig>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d104      	bne.n	800c1f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c1e6:	6839      	ldr	r1, [r7, #0]
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f8f2 	bl	800c3d2 <USBD_CtlError>
            return;
 800c1ee:	e012      	b.n	800c216 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f9b6 	bl	800c562 <USBD_CtlSendStatus>
        break;
 800c1f6:	e00e      	b.n	800c216 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f9b2 	bl	800c562 <USBD_CtlSendStatus>
        break;
 800c1fe:	e00a      	b.n	800c216 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f8e5 	bl	800c3d2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c208:	4b04      	ldr	r3, [pc, #16]	; (800c21c <USBD_SetConfig+0x118>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	4619      	mov	r1, r3
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7ff f9ac 	bl	800b56c <USBD_ClrClassConfig>
        break;
 800c214:	bf00      	nop
    }
  }
}
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	20000b40 	.word	0x20000b40

0800c220 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	88db      	ldrh	r3, [r3, #6]
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d004      	beq.n	800c23c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f8cc 	bl	800c3d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c23a:	e022      	b.n	800c282 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c242:	2b02      	cmp	r3, #2
 800c244:	dc02      	bgt.n	800c24c <USBD_GetConfig+0x2c>
 800c246:	2b00      	cmp	r3, #0
 800c248:	dc03      	bgt.n	800c252 <USBD_GetConfig+0x32>
 800c24a:	e015      	b.n	800c278 <USBD_GetConfig+0x58>
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d00b      	beq.n	800c268 <USBD_GetConfig+0x48>
 800c250:	e012      	b.n	800c278 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	3308      	adds	r3, #8
 800c25c:	2201      	movs	r2, #1
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f920 	bl	800c4a6 <USBD_CtlSendData>
        break;
 800c266:	e00c      	b.n	800c282 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	3304      	adds	r3, #4
 800c26c:	2201      	movs	r2, #1
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f918 	bl	800c4a6 <USBD_CtlSendData>
        break;
 800c276:	e004      	b.n	800c282 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f8a9 	bl	800c3d2 <USBD_CtlError>
        break;
 800c280:	bf00      	nop
}
 800c282:	bf00      	nop
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b082      	sub	sp, #8
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c29a:	3b01      	subs	r3, #1
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d81e      	bhi.n	800c2de <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	88db      	ldrh	r3, [r3, #6]
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d004      	beq.n	800c2b2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f891 	bl	800c3d2 <USBD_CtlError>
        break;
 800c2b0:	e01a      	b.n	800c2e8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d005      	beq.n	800c2ce <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	f043 0202 	orr.w	r2, r3, #2
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	330c      	adds	r3, #12
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f8e5 	bl	800c4a6 <USBD_CtlSendData>
      break;
 800c2dc:	e004      	b.n	800c2e8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 f876 	bl	800c3d2 <USBD_CtlError>
      break;
 800c2e6:	bf00      	nop
  }
}
 800c2e8:	bf00      	nop
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	885b      	ldrh	r3, [r3, #2]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d106      	bne.n	800c310 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2201      	movs	r2, #1
 800c306:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f929 	bl	800c562 <USBD_CtlSendStatus>
  }
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c328:	3b01      	subs	r3, #1
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	d80b      	bhi.n	800c346 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	885b      	ldrh	r3, [r3, #2]
 800c332:	2b01      	cmp	r3, #1
 800c334:	d10c      	bne.n	800c350 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f90f 	bl	800c562 <USBD_CtlSendStatus>
      }
      break;
 800c344:	e004      	b.n	800c350 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f842 	bl	800c3d2 <USBD_CtlError>
      break;
 800c34e:	e000      	b.n	800c352 <USBD_ClrFeature+0x3a>
      break;
 800c350:	bf00      	nop
  }
}
 800c352:	bf00      	nop
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c35a:	b480      	push	{r7}
 800c35c:	b083      	sub	sp, #12
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	781a      	ldrb	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	785a      	ldrb	r2, [r3, #1]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	3302      	adds	r3, #2
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	3303      	adds	r3, #3
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b29b      	uxth	r3, r3
 800c384:	021b      	lsls	r3, r3, #8
 800c386:	b29b      	uxth	r3, r3
 800c388:	4413      	add	r3, r2
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	3304      	adds	r3, #4
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	b29a      	uxth	r2, r3
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	3305      	adds	r3, #5
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	021b      	lsls	r3, r3, #8
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	4413      	add	r3, r2
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	3306      	adds	r3, #6
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	3307      	adds	r3, #7
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	021b      	lsls	r3, r3, #8
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	4413      	add	r3, r2
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	80da      	strh	r2, [r3, #6]

}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bc80      	pop	{r7}
 800c3d0:	4770      	bx	lr

0800c3d2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c3dc:	2180      	movs	r1, #128	; 0x80
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fc7a 	bl	800ccd8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fc76 	bl	800ccd8 <USBD_LL_StallEP>
}
 800c3ec:	bf00      	nop
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b086      	sub	sp, #24
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c400:	2300      	movs	r3, #0
 800c402:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d032      	beq.n	800c470 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f000 f834 	bl	800c478 <USBD_GetLen>
 800c410:	4603      	mov	r3, r0
 800c412:	3301      	adds	r3, #1
 800c414:	b29b      	uxth	r3, r3
 800c416:	005b      	lsls	r3, r3, #1
 800c418:	b29a      	uxth	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	75fa      	strb	r2, [r7, #23]
 800c424:	461a      	mov	r2, r3
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	4413      	add	r3, r2
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	7812      	ldrb	r2, [r2, #0]
 800c42e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c430:	7dfb      	ldrb	r3, [r7, #23]
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	75fa      	strb	r2, [r7, #23]
 800c436:	461a      	mov	r2, r3
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	4413      	add	r3, r2
 800c43c:	2203      	movs	r2, #3
 800c43e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c440:	e012      	b.n	800c468 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	1c5a      	adds	r2, r3, #1
 800c446:	60fa      	str	r2, [r7, #12]
 800c448:	7dfa      	ldrb	r2, [r7, #23]
 800c44a:	1c51      	adds	r1, r2, #1
 800c44c:	75f9      	strb	r1, [r7, #23]
 800c44e:	4611      	mov	r1, r2
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	440a      	add	r2, r1
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c458:	7dfb      	ldrb	r3, [r7, #23]
 800c45a:	1c5a      	adds	r2, r3, #1
 800c45c:	75fa      	strb	r2, [r7, #23]
 800c45e:	461a      	mov	r2, r3
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	4413      	add	r3, r2
 800c464:	2200      	movs	r2, #0
 800c466:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1e8      	bne.n	800c442 <USBD_GetString+0x4e>
    }
  }
}
 800c470:	bf00      	nop
 800c472:	3718      	adds	r7, #24
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c480:	2300      	movs	r3, #0
 800c482:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c484:	e005      	b.n	800c492 <USBD_GetLen+0x1a>
  {
    len++;
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	3301      	adds	r3, #1
 800c48a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	3301      	adds	r3, #1
 800c490:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1f5      	bne.n	800c486 <USBD_GetLen+0xe>
  }

  return len;
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bc80      	pop	{r7}
 800c4a4:	4770      	bx	lr

0800c4a6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b084      	sub	sp, #16
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	60f8      	str	r0, [r7, #12]
 800c4ae:	60b9      	str	r1, [r7, #8]
 800c4b0:	4613      	mov	r3, r2
 800c4b2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2202      	movs	r2, #2
 800c4b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c4bc:	88fa      	ldrh	r2, [r7, #6]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c4c2:	88fa      	ldrh	r2, [r7, #6]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4c8:	88fb      	ldrh	r3, [r7, #6]
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f000 fc8b 	bl	800cdea <USBD_LL_Transmit>

  return USBD_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b084      	sub	sp, #16
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	60f8      	str	r0, [r7, #12]
 800c4e6:	60b9      	str	r1, [r7, #8]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4ec:	88fb      	ldrh	r3, [r7, #6]
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 fc79 	bl	800cdea <USBD_LL_Transmit>

  return USBD_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b084      	sub	sp, #16
 800c506:	af00      	add	r7, sp, #0
 800c508:	60f8      	str	r0, [r7, #12]
 800c50a:	60b9      	str	r1, [r7, #8]
 800c50c:	4613      	mov	r3, r2
 800c50e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2203      	movs	r2, #3
 800c514:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c518:	88fa      	ldrh	r2, [r7, #6]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c520:	88fa      	ldrh	r2, [r7, #6]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c528:	88fb      	ldrh	r3, [r7, #6]
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	2100      	movs	r1, #0
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 fc7e 	bl	800ce30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b084      	sub	sp, #16
 800c542:	af00      	add	r7, sp, #0
 800c544:	60f8      	str	r0, [r7, #12]
 800c546:	60b9      	str	r1, [r7, #8]
 800c548:	4613      	mov	r3, r2
 800c54a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c54c:	88fb      	ldrh	r3, [r7, #6]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	2100      	movs	r1, #0
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f000 fc6c 	bl	800ce30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b082      	sub	sp, #8
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2204      	movs	r2, #4
 800c56e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c572:	2300      	movs	r3, #0
 800c574:	2200      	movs	r2, #0
 800c576:	2100      	movs	r1, #0
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fc36 	bl	800cdea <USBD_LL_Transmit>

  return USBD_OK;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2205      	movs	r2, #5
 800c594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c598:	2300      	movs	r3, #0
 800c59a:	2200      	movs	r2, #0
 800c59c:	2100      	movs	r1, #0
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fc46 	bl	800ce30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
	...

0800c5b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	4912      	ldr	r1, [pc, #72]	; (800c600 <MX_USB_DEVICE_Init+0x50>)
 800c5b8:	4812      	ldr	r0, [pc, #72]	; (800c604 <MX_USB_DEVICE_Init+0x54>)
 800c5ba:	f7fe ff5e 	bl	800b47a <USBD_Init>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c5c4:	f7f5 fb42 	bl	8001c4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c5c8:	490f      	ldr	r1, [pc, #60]	; (800c608 <MX_USB_DEVICE_Init+0x58>)
 800c5ca:	480e      	ldr	r0, [pc, #56]	; (800c604 <MX_USB_DEVICE_Init+0x54>)
 800c5cc:	f7fe ff80 	bl	800b4d0 <USBD_RegisterClass>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c5d6:	f7f5 fb39 	bl	8001c4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c5da:	490c      	ldr	r1, [pc, #48]	; (800c60c <MX_USB_DEVICE_Init+0x5c>)
 800c5dc:	4809      	ldr	r0, [pc, #36]	; (800c604 <MX_USB_DEVICE_Init+0x54>)
 800c5de:	f7fe feb1 	bl	800b344 <USBD_CDC_RegisterInterface>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d001      	beq.n	800c5ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c5e8:	f7f5 fb30 	bl	8001c4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c5ec:	4805      	ldr	r0, [pc, #20]	; (800c604 <MX_USB_DEVICE_Init+0x54>)
 800c5ee:	f7fe ff88 	bl	800b502 <USBD_Start>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d001      	beq.n	800c5fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c5f8:	f7f5 fb28 	bl	8001c4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c5fc:	bf00      	nop
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	2000013c 	.word	0x2000013c
 800c604:	20000b44 	.word	0x20000b44
 800c608:	20000020 	.word	0x20000020
 800c60c:	2000012c 	.word	0x2000012c

0800c610 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c614:	2200      	movs	r2, #0
 800c616:	4905      	ldr	r1, [pc, #20]	; (800c62c <CDC_Init_FS+0x1c>)
 800c618:	4805      	ldr	r0, [pc, #20]	; (800c630 <CDC_Init_FS+0x20>)
 800c61a:	f7fe fea9 	bl	800b370 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c61e:	4905      	ldr	r1, [pc, #20]	; (800c634 <CDC_Init_FS+0x24>)
 800c620:	4803      	ldr	r0, [pc, #12]	; (800c630 <CDC_Init_FS+0x20>)
 800c622:	f7fe febe 	bl	800b3a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c626:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c628:	4618      	mov	r0, r3
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	200011f0 	.word	0x200011f0
 800c630:	20000b44 	.word	0x20000b44
 800c634:	20000e08 	.word	0x20000e08

0800c638 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c638:	b480      	push	{r7}
 800c63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c63c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c63e:	4618      	mov	r0, r3
 800c640:	46bd      	mov	sp, r7
 800c642:	bc80      	pop	{r7}
 800c644:	4770      	bx	lr
	...

0800c648 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	4603      	mov	r3, r0
 800c650:	6039      	str	r1, [r7, #0]
 800c652:	71fb      	strb	r3, [r7, #7]
 800c654:	4613      	mov	r3, r2
 800c656:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c658:	79fb      	ldrb	r3, [r7, #7]
 800c65a:	2b23      	cmp	r3, #35	; 0x23
 800c65c:	d85c      	bhi.n	800c718 <CDC_Control_FS+0xd0>
 800c65e:	a201      	add	r2, pc, #4	; (adr r2, 800c664 <CDC_Control_FS+0x1c>)
 800c660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c664:	0800c719 	.word	0x0800c719
 800c668:	0800c719 	.word	0x0800c719
 800c66c:	0800c719 	.word	0x0800c719
 800c670:	0800c719 	.word	0x0800c719
 800c674:	0800c719 	.word	0x0800c719
 800c678:	0800c719 	.word	0x0800c719
 800c67c:	0800c719 	.word	0x0800c719
 800c680:	0800c719 	.word	0x0800c719
 800c684:	0800c719 	.word	0x0800c719
 800c688:	0800c719 	.word	0x0800c719
 800c68c:	0800c719 	.word	0x0800c719
 800c690:	0800c719 	.word	0x0800c719
 800c694:	0800c719 	.word	0x0800c719
 800c698:	0800c719 	.word	0x0800c719
 800c69c:	0800c719 	.word	0x0800c719
 800c6a0:	0800c719 	.word	0x0800c719
 800c6a4:	0800c719 	.word	0x0800c719
 800c6a8:	0800c719 	.word	0x0800c719
 800c6ac:	0800c719 	.word	0x0800c719
 800c6b0:	0800c719 	.word	0x0800c719
 800c6b4:	0800c719 	.word	0x0800c719
 800c6b8:	0800c719 	.word	0x0800c719
 800c6bc:	0800c719 	.word	0x0800c719
 800c6c0:	0800c719 	.word	0x0800c719
 800c6c4:	0800c719 	.word	0x0800c719
 800c6c8:	0800c719 	.word	0x0800c719
 800c6cc:	0800c719 	.word	0x0800c719
 800c6d0:	0800c719 	.word	0x0800c719
 800c6d4:	0800c719 	.word	0x0800c719
 800c6d8:	0800c719 	.word	0x0800c719
 800c6dc:	0800c719 	.word	0x0800c719
 800c6e0:	0800c719 	.word	0x0800c719
 800c6e4:	0800c6f5 	.word	0x0800c6f5
 800c6e8:	0800c707 	.word	0x0800c707
 800c6ec:	0800c719 	.word	0x0800c719
 800c6f0:	0800c719 	.word	0x0800c719
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800c6f4:	4b0c      	ldr	r3, [pc, #48]	; (800c728 <CDC_Control_FS+0xe0>)
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	6810      	ldr	r0, [r2, #0]
 800c6fa:	6018      	str	r0, [r3, #0]
 800c6fc:	8891      	ldrh	r1, [r2, #4]
 800c6fe:	7992      	ldrb	r2, [r2, #6]
 800c700:	8099      	strh	r1, [r3, #4]
 800c702:	719a      	strb	r2, [r3, #6]
    break;
 800c704:	e009      	b.n	800c71a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	4a07      	ldr	r2, [pc, #28]	; (800c728 <CDC_Control_FS+0xe0>)
 800c70a:	6810      	ldr	r0, [r2, #0]
 800c70c:	6018      	str	r0, [r3, #0]
 800c70e:	8891      	ldrh	r1, [r2, #4]
 800c710:	7992      	ldrb	r2, [r2, #6]
 800c712:	8099      	strh	r1, [r3, #4]
 800c714:	719a      	strb	r2, [r3, #6]
    break;
 800c716:	e000      	b.n	800c71a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c718:	bf00      	nop
  }

  return (USBD_OK);
 800c71a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	bc80      	pop	{r7}
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	20000124 	.word	0x20000124

0800c72c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d005      	beq.n	800c74a <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7f3 ff9f 	bl	8000688 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c74a:	6879      	ldr	r1, [r7, #4]
 800c74c:	4805      	ldr	r0, [pc, #20]	; (800c764 <CDC_Receive_FS+0x38>)
 800c74e:	f7fe fe28 	bl	800b3a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c752:	4804      	ldr	r0, [pc, #16]	; (800c764 <CDC_Receive_FS+0x38>)
 800c754:	f7fe fe67 	bl	800b426 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c758:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	20000b44 	.word	0x20000b44

0800c768 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	460b      	mov	r3, r1
 800c772:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c774:	2300      	movs	r3, #0
 800c776:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c778:	4b0d      	ldr	r3, [pc, #52]	; (800c7b0 <CDC_Transmit_FS+0x48>)
 800c77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c77e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c786:	2b00      	cmp	r3, #0
 800c788:	d001      	beq.n	800c78e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c78a:	2301      	movs	r3, #1
 800c78c:	e00b      	b.n	800c7a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c78e:	887b      	ldrh	r3, [r7, #2]
 800c790:	461a      	mov	r2, r3
 800c792:	6879      	ldr	r1, [r7, #4]
 800c794:	4806      	ldr	r0, [pc, #24]	; (800c7b0 <CDC_Transmit_FS+0x48>)
 800c796:	f7fe fdeb 	bl	800b370 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c79a:	4805      	ldr	r0, [pc, #20]	; (800c7b0 <CDC_Transmit_FS+0x48>)
 800c79c:	f7fe fe14 	bl	800b3c8 <USBD_CDC_TransmitPacket>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20000b44 	.word	0x20000b44

0800c7b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	6039      	str	r1, [r7, #0]
 800c7be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	2212      	movs	r2, #18
 800c7c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c7c6:	4b03      	ldr	r3, [pc, #12]	; (800c7d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bc80      	pop	{r7}
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	20000158 	.word	0x20000158

0800c7d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	4603      	mov	r3, r0
 800c7e0:	6039      	str	r1, [r7, #0]
 800c7e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	2204      	movs	r2, #4
 800c7e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c7ea:	4b03      	ldr	r3, [pc, #12]	; (800c7f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bc80      	pop	{r7}
 800c7f4:	4770      	bx	lr
 800c7f6:	bf00      	nop
 800c7f8:	2000016c 	.word	0x2000016c

0800c7fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	4603      	mov	r3, r0
 800c804:	6039      	str	r1, [r7, #0]
 800c806:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c808:	79fb      	ldrb	r3, [r7, #7]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d105      	bne.n	800c81a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	4907      	ldr	r1, [pc, #28]	; (800c830 <USBD_FS_ProductStrDescriptor+0x34>)
 800c812:	4808      	ldr	r0, [pc, #32]	; (800c834 <USBD_FS_ProductStrDescriptor+0x38>)
 800c814:	f7ff fdee 	bl	800c3f4 <USBD_GetString>
 800c818:	e004      	b.n	800c824 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	4904      	ldr	r1, [pc, #16]	; (800c830 <USBD_FS_ProductStrDescriptor+0x34>)
 800c81e:	4805      	ldr	r0, [pc, #20]	; (800c834 <USBD_FS_ProductStrDescriptor+0x38>)
 800c820:	f7ff fde8 	bl	800c3f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c824:	4b02      	ldr	r3, [pc, #8]	; (800c830 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c826:	4618      	mov	r0, r3
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	200015d8 	.word	0x200015d8
 800c834:	0800d9a4 	.word	0x0800d9a4

0800c838 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	6039      	str	r1, [r7, #0]
 800c842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c844:	683a      	ldr	r2, [r7, #0]
 800c846:	4904      	ldr	r1, [pc, #16]	; (800c858 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c848:	4804      	ldr	r0, [pc, #16]	; (800c85c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c84a:	f7ff fdd3 	bl	800c3f4 <USBD_GetString>
  return USBD_StrDesc;
 800c84e:	4b02      	ldr	r3, [pc, #8]	; (800c858 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c850:	4618      	mov	r0, r3
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	200015d8 	.word	0x200015d8
 800c85c:	0800d9b8 	.word	0x0800d9b8

0800c860 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	4603      	mov	r3, r0
 800c868:	6039      	str	r1, [r7, #0]
 800c86a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	221a      	movs	r2, #26
 800c870:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c872:	f000 f843 	bl	800c8fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c876:	4b02      	ldr	r3, [pc, #8]	; (800c880 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3708      	adds	r7, #8
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	20000170 	.word	0x20000170

0800c884 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	4603      	mov	r3, r0
 800c88c:	6039      	str	r1, [r7, #0]
 800c88e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c890:	79fb      	ldrb	r3, [r7, #7]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d105      	bne.n	800c8a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c896:	683a      	ldr	r2, [r7, #0]
 800c898:	4907      	ldr	r1, [pc, #28]	; (800c8b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c89a:	4808      	ldr	r0, [pc, #32]	; (800c8bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c89c:	f7ff fdaa 	bl	800c3f4 <USBD_GetString>
 800c8a0:	e004      	b.n	800c8ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	4904      	ldr	r1, [pc, #16]	; (800c8b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c8a6:	4805      	ldr	r0, [pc, #20]	; (800c8bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c8a8:	f7ff fda4 	bl	800c3f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8ac:	4b02      	ldr	r3, [pc, #8]	; (800c8b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	200015d8 	.word	0x200015d8
 800c8bc:	0800d9c0 	.word	0x0800d9c0

0800c8c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	6039      	str	r1, [r7, #0]
 800c8ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8cc:	79fb      	ldrb	r3, [r7, #7]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d105      	bne.n	800c8de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	4907      	ldr	r1, [pc, #28]	; (800c8f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8d6:	4808      	ldr	r0, [pc, #32]	; (800c8f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8d8:	f7ff fd8c 	bl	800c3f4 <USBD_GetString>
 800c8dc:	e004      	b.n	800c8e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c8de:	683a      	ldr	r2, [r7, #0]
 800c8e0:	4904      	ldr	r1, [pc, #16]	; (800c8f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c8e2:	4805      	ldr	r0, [pc, #20]	; (800c8f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c8e4:	f7ff fd86 	bl	800c3f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8e8:	4b02      	ldr	r3, [pc, #8]	; (800c8f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	200015d8 	.word	0x200015d8
 800c8f8:	0800d9cc 	.word	0x0800d9cc

0800c8fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c902:	4b0f      	ldr	r3, [pc, #60]	; (800c940 <Get_SerialNum+0x44>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c908:	4b0e      	ldr	r3, [pc, #56]	; (800c944 <Get_SerialNum+0x48>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c90e:	4b0e      	ldr	r3, [pc, #56]	; (800c948 <Get_SerialNum+0x4c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4413      	add	r3, r2
 800c91a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d009      	beq.n	800c936 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c922:	2208      	movs	r2, #8
 800c924:	4909      	ldr	r1, [pc, #36]	; (800c94c <Get_SerialNum+0x50>)
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f000 f814 	bl	800c954 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c92c:	2204      	movs	r2, #4
 800c92e:	4908      	ldr	r1, [pc, #32]	; (800c950 <Get_SerialNum+0x54>)
 800c930:	68b8      	ldr	r0, [r7, #8]
 800c932:	f000 f80f 	bl	800c954 <IntToUnicode>
  }
}
 800c936:	bf00      	nop
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	1ffff7e8 	.word	0x1ffff7e8
 800c944:	1ffff7ec 	.word	0x1ffff7ec
 800c948:	1ffff7f0 	.word	0x1ffff7f0
 800c94c:	20000172 	.word	0x20000172
 800c950:	20000182 	.word	0x20000182

0800c954 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c954:	b480      	push	{r7}
 800c956:	b087      	sub	sp, #28
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	4613      	mov	r3, r2
 800c960:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c966:	2300      	movs	r3, #0
 800c968:	75fb      	strb	r3, [r7, #23]
 800c96a:	e027      	b.n	800c9bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	0f1b      	lsrs	r3, r3, #28
 800c970:	2b09      	cmp	r3, #9
 800c972:	d80b      	bhi.n	800c98c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	0f1b      	lsrs	r3, r3, #28
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
 800c97c:	005b      	lsls	r3, r3, #1
 800c97e:	4619      	mov	r1, r3
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	440b      	add	r3, r1
 800c984:	3230      	adds	r2, #48	; 0x30
 800c986:	b2d2      	uxtb	r2, r2
 800c988:	701a      	strb	r2, [r3, #0]
 800c98a:	e00a      	b.n	800c9a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	0f1b      	lsrs	r3, r3, #28
 800c990:	b2da      	uxtb	r2, r3
 800c992:	7dfb      	ldrb	r3, [r7, #23]
 800c994:	005b      	lsls	r3, r3, #1
 800c996:	4619      	mov	r1, r3
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	440b      	add	r3, r1
 800c99c:	3237      	adds	r2, #55	; 0x37
 800c99e:	b2d2      	uxtb	r2, r2
 800c9a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	011b      	lsls	r3, r3, #4
 800c9a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	005b      	lsls	r3, r3, #1
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c9b6:	7dfb      	ldrb	r3, [r7, #23]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	75fb      	strb	r3, [r7, #23]
 800c9bc:	7dfa      	ldrb	r2, [r7, #23]
 800c9be:	79fb      	ldrb	r3, [r7, #7]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d3d3      	bcc.n	800c96c <IntToUnicode+0x18>
  }
}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop
 800c9c8:	371c      	adds	r7, #28
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bc80      	pop	{r7}
 800c9ce:	4770      	bx	lr

0800c9d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a11      	ldr	r2, [pc, #68]	; (800ca24 <HAL_PCD_MspInit+0x54>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d11b      	bne.n	800ca1a <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c9e2:	4b11      	ldr	r3, [pc, #68]	; (800ca28 <HAL_PCD_MspInit+0x58>)
 800c9e4:	69db      	ldr	r3, [r3, #28]
 800c9e6:	4a10      	ldr	r2, [pc, #64]	; (800ca28 <HAL_PCD_MspInit+0x58>)
 800c9e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c9ec:	61d3      	str	r3, [r2, #28]
 800c9ee:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <HAL_PCD_MspInit+0x58>)
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9f6:	60fb      	str	r3, [r7, #12]
 800c9f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	2013      	movs	r0, #19
 800ca00:	f7f7 fe79 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800ca04:	2013      	movs	r0, #19
 800ca06:	f7f7 fe92 	bl	800472e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	2014      	movs	r0, #20
 800ca10:	f7f7 fe71 	bl	80046f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ca14:	2014      	movs	r0, #20
 800ca16:	f7f7 fe8a 	bl	800472e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ca1a:	bf00      	nop
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	40005c00 	.word	0x40005c00
 800ca28:	40021000 	.word	0x40021000

0800ca2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ca40:	4619      	mov	r1, r3
 800ca42:	4610      	mov	r0, r2
 800ca44:	f7fe fda5 	bl	800b592 <USBD_LL_SetupStage>
}
 800ca48:	bf00      	nop
 800ca4a:	3708      	adds	r7, #8
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
 800ca58:	460b      	mov	r3, r1
 800ca5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ca62:	78fa      	ldrb	r2, [r7, #3]
 800ca64:	6879      	ldr	r1, [r7, #4]
 800ca66:	4613      	mov	r3, r2
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	4413      	add	r3, r2
 800ca6c:	00db      	lsls	r3, r3, #3
 800ca6e:	440b      	add	r3, r1
 800ca70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	78fb      	ldrb	r3, [r7, #3]
 800ca78:	4619      	mov	r1, r3
 800ca7a:	f7fe fdd7 	bl	800b62c <USBD_LL_DataOutStage>
}
 800ca7e:	bf00      	nop
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b082      	sub	sp, #8
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	460b      	mov	r3, r1
 800ca90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ca98:	78fa      	ldrb	r2, [r7, #3]
 800ca9a:	6879      	ldr	r1, [r7, #4]
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	4413      	add	r3, r2
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	440b      	add	r3, r1
 800caa6:	333c      	adds	r3, #60	; 0x3c
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	78fb      	ldrb	r3, [r7, #3]
 800caac:	4619      	mov	r1, r3
 800caae:	f7fe fe2e 	bl	800b70e <USBD_LL_DataInStage>
}
 800cab2:	bf00      	nop
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b082      	sub	sp, #8
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cac8:	4618      	mov	r0, r3
 800caca:	f7fe ff3e 	bl	800b94a <USBD_LL_SOF>
}
 800cace:	bf00      	nop
 800cad0:	3708      	adds	r7, #8
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b084      	sub	sp, #16
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cade:	2301      	movs	r3, #1
 800cae0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	689b      	ldr	r3, [r3, #8]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d001      	beq.n	800caee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800caea:	f7f5 f8af 	bl	8001c4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800caf4:	7bfa      	ldrb	r2, [r7, #15]
 800caf6:	4611      	mov	r1, r2
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7fe feee 	bl	800b8da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fe fea7 	bl	800b858 <USBD_LL_Reset>
}
 800cb0a:	bf00      	nop
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
	...

0800cb14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fe fee8 	bl	800b8f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	699b      	ldr	r3, [r3, #24]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d005      	beq.n	800cb3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb30:	4b04      	ldr	r3, [pc, #16]	; (800cb44 <HAL_PCD_SuspendCallback+0x30>)
 800cb32:	691b      	ldr	r3, [r3, #16]
 800cb34:	4a03      	ldr	r2, [pc, #12]	; (800cb44 <HAL_PCD_SuspendCallback+0x30>)
 800cb36:	f043 0306 	orr.w	r3, r3, #6
 800cb3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cb3c:	bf00      	nop
 800cb3e:	3708      	adds	r7, #8
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	e000ed00 	.word	0xe000ed00

0800cb48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7fe fee2 	bl	800b920 <USBD_LL_Resume>
}
 800cb5c:	bf00      	nop
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cb6c:	4a28      	ldr	r2, [pc, #160]	; (800cc10 <USBD_LL_Init+0xac>)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a26      	ldr	r2, [pc, #152]	; (800cc10 <USBD_LL_Init+0xac>)
 800cb78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cb7c:	4b24      	ldr	r3, [pc, #144]	; (800cc10 <USBD_LL_Init+0xac>)
 800cb7e:	4a25      	ldr	r2, [pc, #148]	; (800cc14 <USBD_LL_Init+0xb0>)
 800cb80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cb82:	4b23      	ldr	r3, [pc, #140]	; (800cc10 <USBD_LL_Init+0xac>)
 800cb84:	2208      	movs	r2, #8
 800cb86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cb88:	4b21      	ldr	r3, [pc, #132]	; (800cc10 <USBD_LL_Init+0xac>)
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cb8e:	4b20      	ldr	r3, [pc, #128]	; (800cc10 <USBD_LL_Init+0xac>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cb94:	4b1e      	ldr	r3, [pc, #120]	; (800cc10 <USBD_LL_Init+0xac>)
 800cb96:	2200      	movs	r2, #0
 800cb98:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cb9a:	4b1d      	ldr	r3, [pc, #116]	; (800cc10 <USBD_LL_Init+0xac>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cba0:	481b      	ldr	r0, [pc, #108]	; (800cc10 <USBD_LL_Init+0xac>)
 800cba2:	f7f7 ffbf 	bl	8004b24 <HAL_PCD_Init>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cbac:	f7f5 f84e 	bl	8001c4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cbb6:	2318      	movs	r3, #24
 800cbb8:	2200      	movs	r2, #0
 800cbba:	2100      	movs	r1, #0
 800cbbc:	f7f9 fc33 	bl	8006426 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cbc6:	2358      	movs	r3, #88	; 0x58
 800cbc8:	2200      	movs	r2, #0
 800cbca:	2180      	movs	r1, #128	; 0x80
 800cbcc:	f7f9 fc2b 	bl	8006426 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cbd6:	23c0      	movs	r3, #192	; 0xc0
 800cbd8:	2200      	movs	r2, #0
 800cbda:	2181      	movs	r1, #129	; 0x81
 800cbdc:	f7f9 fc23 	bl	8006426 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cbe6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cbea:	2200      	movs	r2, #0
 800cbec:	2101      	movs	r1, #1
 800cbee:	f7f9 fc1a 	bl	8006426 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cbf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	2182      	movs	r1, #130	; 0x82
 800cc00:	f7f9 fc11 	bl	8006426 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	200017d8 	.word	0x200017d8
 800cc14:	40005c00 	.word	0x40005c00

0800cc18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc20:	2300      	movs	r3, #0
 800cc22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7f8 f883 	bl	8004d3a <HAL_PCD_Start>
 800cc34:	4603      	mov	r3, r0
 800cc36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 f94e 	bl	800cedc <USBD_Get_USB_Status>
 800cc40:	4603      	mov	r3, r0
 800cc42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc44:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3710      	adds	r7, #16
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b084      	sub	sp, #16
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	4608      	mov	r0, r1
 800cc58:	4611      	mov	r1, r2
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	70fb      	strb	r3, [r7, #3]
 800cc60:	460b      	mov	r3, r1
 800cc62:	70bb      	strb	r3, [r7, #2]
 800cc64:	4613      	mov	r3, r2
 800cc66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc76:	78bb      	ldrb	r3, [r7, #2]
 800cc78:	883a      	ldrh	r2, [r7, #0]
 800cc7a:	78f9      	ldrb	r1, [r7, #3]
 800cc7c:	f7f8 f9fb 	bl	8005076 <HAL_PCD_EP_Open>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 f928 	bl	800cedc <USBD_Get_USB_Status>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc90:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	460b      	mov	r3, r1
 800cca4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ccb4:	78fa      	ldrb	r2, [r7, #3]
 800ccb6:	4611      	mov	r1, r2
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7f8 fa42 	bl	8005142 <HAL_PCD_EP_Close>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 f909 	bl	800cedc <USBD_Get_USB_Status>
 800ccca:	4603      	mov	r3, r0
 800cccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccce:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	460b      	mov	r3, r1
 800cce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce8:	2300      	movs	r3, #0
 800ccea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ccf2:	78fa      	ldrb	r2, [r7, #3]
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7f8 fb02 	bl	8005300 <HAL_PCD_EP_SetStall>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd00:	7bfb      	ldrb	r3, [r7, #15]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 f8ea 	bl	800cedc <USBD_Get_USB_Status>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b084      	sub	sp, #16
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	460b      	mov	r3, r1
 800cd20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd26:	2300      	movs	r3, #0
 800cd28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd30:	78fa      	ldrb	r2, [r7, #3]
 800cd32:	4611      	mov	r1, r2
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7f8 fb43 	bl	80053c0 <HAL_PCD_EP_ClrStall>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd3e:	7bfb      	ldrb	r3, [r7, #15]
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 f8cb 	bl	800cedc <USBD_Get_USB_Status>
 800cd46:	4603      	mov	r3, r0
 800cd48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	da0c      	bge.n	800cd8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd70:	78fb      	ldrb	r3, [r7, #3]
 800cd72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd76:	68f9      	ldr	r1, [r7, #12]
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	4413      	add	r3, r2
 800cd80:	00db      	lsls	r3, r3, #3
 800cd82:	440b      	add	r3, r1
 800cd84:	3302      	adds	r3, #2
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	e00b      	b.n	800cda2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd8a:	78fb      	ldrb	r3, [r7, #3]
 800cd8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd90:	68f9      	ldr	r1, [r7, #12]
 800cd92:	4613      	mov	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4413      	add	r3, r2
 800cd98:	00db      	lsls	r3, r3, #3
 800cd9a:	440b      	add	r3, r1
 800cd9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cda0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bc80      	pop	{r7}
 800cdaa:	4770      	bx	lr

0800cdac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdc6:	78fa      	ldrb	r2, [r7, #3]
 800cdc8:	4611      	mov	r1, r2
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7f8 f92e 	bl	800502c <HAL_PCD_SetAddress>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f000 f880 	bl	800cedc <USBD_Get_USB_Status>
 800cddc:	4603      	mov	r3, r0
 800cdde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cde0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b086      	sub	sp, #24
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	60f8      	str	r0, [r7, #12]
 800cdf2:	607a      	str	r2, [r7, #4]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	72fb      	strb	r3, [r7, #11]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce02:	2300      	movs	r3, #0
 800ce04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce0c:	893b      	ldrh	r3, [r7, #8]
 800ce0e:	7af9      	ldrb	r1, [r7, #11]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	f7f8 fa32 	bl	800527a <HAL_PCD_EP_Transmit>
 800ce16:	4603      	mov	r3, r0
 800ce18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 f85d 	bl	800cedc <USBD_Get_USB_Status>
 800ce22:	4603      	mov	r3, r0
 800ce24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce26:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	607a      	str	r2, [r7, #4]
 800ce3a:	461a      	mov	r2, r3
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	72fb      	strb	r3, [r7, #11]
 800ce40:	4613      	mov	r3, r2
 800ce42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce44:	2300      	movs	r3, #0
 800ce46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ce52:	893b      	ldrh	r3, [r7, #8]
 800ce54:	7af9      	ldrb	r1, [r7, #11]
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	f7f8 f9bb 	bl	80051d2 <HAL_PCD_EP_Receive>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 f83a 	bl	800cedc <USBD_Get_USB_Status>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3718      	adds	r7, #24
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	460b      	mov	r3, r1
 800ce80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce88:	78fa      	ldrb	r2, [r7, #3]
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7f8 f9dd 	bl	800524c <HAL_PCD_EP_GetRxCount>
 800ce92:	4603      	mov	r3, r0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cea4:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <USBD_static_malloc+0x14>)
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bc80      	pop	{r7}
 800ceae:	4770      	bx	lr
 800ceb0:	20001ac4 	.word	0x20001ac4

0800ceb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]

}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bc80      	pop	{r7}
 800cec4:	4770      	bx	lr

0800cec6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec6:	b480      	push	{r7}
 800cec8:	b083      	sub	sp, #12
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	460b      	mov	r3, r1
 800ced0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ced2:	bf00      	nop
 800ced4:	370c      	adds	r7, #12
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bc80      	pop	{r7}
 800ceda:	4770      	bx	lr

0800cedc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	4603      	mov	r3, r0
 800cee4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee6:	2300      	movs	r3, #0
 800cee8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ceea:	79fb      	ldrb	r3, [r7, #7]
 800ceec:	2b03      	cmp	r3, #3
 800ceee:	d817      	bhi.n	800cf20 <USBD_Get_USB_Status+0x44>
 800cef0:	a201      	add	r2, pc, #4	; (adr r2, 800cef8 <USBD_Get_USB_Status+0x1c>)
 800cef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef6:	bf00      	nop
 800cef8:	0800cf09 	.word	0x0800cf09
 800cefc:	0800cf0f 	.word	0x0800cf0f
 800cf00:	0800cf15 	.word	0x0800cf15
 800cf04:	0800cf1b 	.word	0x0800cf1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf0c:	e00b      	b.n	800cf26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf0e:	2302      	movs	r3, #2
 800cf10:	73fb      	strb	r3, [r7, #15]
    break;
 800cf12:	e008      	b.n	800cf26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf14:	2301      	movs	r3, #1
 800cf16:	73fb      	strb	r3, [r7, #15]
    break;
 800cf18:	e005      	b.n	800cf26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf1a:	2302      	movs	r3, #2
 800cf1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf1e:	e002      	b.n	800cf26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf20:	2302      	movs	r3, #2
 800cf22:	73fb      	strb	r3, [r7, #15]
    break;
 800cf24:	bf00      	nop
  }
  return usb_status;
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3714      	adds	r7, #20
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bc80      	pop	{r7}
 800cf30:	4770      	bx	lr
 800cf32:	bf00      	nop

0800cf34 <__errno>:
 800cf34:	4b01      	ldr	r3, [pc, #4]	; (800cf3c <__errno+0x8>)
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	2000018c 	.word	0x2000018c

0800cf40 <__libc_init_array>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	2600      	movs	r6, #0
 800cf44:	4d0c      	ldr	r5, [pc, #48]	; (800cf78 <__libc_init_array+0x38>)
 800cf46:	4c0d      	ldr	r4, [pc, #52]	; (800cf7c <__libc_init_array+0x3c>)
 800cf48:	1b64      	subs	r4, r4, r5
 800cf4a:	10a4      	asrs	r4, r4, #2
 800cf4c:	42a6      	cmp	r6, r4
 800cf4e:	d109      	bne.n	800cf64 <__libc_init_array+0x24>
 800cf50:	f000 fcd6 	bl	800d900 <_init>
 800cf54:	2600      	movs	r6, #0
 800cf56:	4d0a      	ldr	r5, [pc, #40]	; (800cf80 <__libc_init_array+0x40>)
 800cf58:	4c0a      	ldr	r4, [pc, #40]	; (800cf84 <__libc_init_array+0x44>)
 800cf5a:	1b64      	subs	r4, r4, r5
 800cf5c:	10a4      	asrs	r4, r4, #2
 800cf5e:	42a6      	cmp	r6, r4
 800cf60:	d105      	bne.n	800cf6e <__libc_init_array+0x2e>
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf68:	4798      	blx	r3
 800cf6a:	3601      	adds	r6, #1
 800cf6c:	e7ee      	b.n	800cf4c <__libc_init_array+0xc>
 800cf6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf72:	4798      	blx	r3
 800cf74:	3601      	adds	r6, #1
 800cf76:	e7f2      	b.n	800cf5e <__libc_init_array+0x1e>
 800cf78:	0800e874 	.word	0x0800e874
 800cf7c:	0800e874 	.word	0x0800e874
 800cf80:	0800e874 	.word	0x0800e874
 800cf84:	0800e878 	.word	0x0800e878

0800cf88 <memcpy>:
 800cf88:	440a      	add	r2, r1
 800cf8a:	4291      	cmp	r1, r2
 800cf8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cf90:	d100      	bne.n	800cf94 <memcpy+0xc>
 800cf92:	4770      	bx	lr
 800cf94:	b510      	push	{r4, lr}
 800cf96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf9a:	4291      	cmp	r1, r2
 800cf9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfa0:	d1f9      	bne.n	800cf96 <memcpy+0xe>
 800cfa2:	bd10      	pop	{r4, pc}

0800cfa4 <memset>:
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	4402      	add	r2, r0
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d100      	bne.n	800cfae <memset+0xa>
 800cfac:	4770      	bx	lr
 800cfae:	f803 1b01 	strb.w	r1, [r3], #1
 800cfb2:	e7f9      	b.n	800cfa8 <memset+0x4>

0800cfb4 <sniprintf>:
 800cfb4:	b40c      	push	{r2, r3}
 800cfb6:	b530      	push	{r4, r5, lr}
 800cfb8:	4b17      	ldr	r3, [pc, #92]	; (800d018 <sniprintf+0x64>)
 800cfba:	1e0c      	subs	r4, r1, #0
 800cfbc:	681d      	ldr	r5, [r3, #0]
 800cfbe:	b09d      	sub	sp, #116	; 0x74
 800cfc0:	da08      	bge.n	800cfd4 <sniprintf+0x20>
 800cfc2:	238b      	movs	r3, #139	; 0x8b
 800cfc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfc8:	602b      	str	r3, [r5, #0]
 800cfca:	b01d      	add	sp, #116	; 0x74
 800cfcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfd0:	b002      	add	sp, #8
 800cfd2:	4770      	bx	lr
 800cfd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cfd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cfdc:	bf0c      	ite	eq
 800cfde:	4623      	moveq	r3, r4
 800cfe0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cfe4:	9304      	str	r3, [sp, #16]
 800cfe6:	9307      	str	r3, [sp, #28]
 800cfe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cfec:	9002      	str	r0, [sp, #8]
 800cfee:	9006      	str	r0, [sp, #24]
 800cff0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cff4:	4628      	mov	r0, r5
 800cff6:	ab21      	add	r3, sp, #132	; 0x84
 800cff8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cffa:	a902      	add	r1, sp, #8
 800cffc:	9301      	str	r3, [sp, #4]
 800cffe:	f000 f88f 	bl	800d120 <_svfiprintf_r>
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	bfbc      	itt	lt
 800d006:	238b      	movlt	r3, #139	; 0x8b
 800d008:	602b      	strlt	r3, [r5, #0]
 800d00a:	2c00      	cmp	r4, #0
 800d00c:	d0dd      	beq.n	800cfca <sniprintf+0x16>
 800d00e:	2200      	movs	r2, #0
 800d010:	9b02      	ldr	r3, [sp, #8]
 800d012:	701a      	strb	r2, [r3, #0]
 800d014:	e7d9      	b.n	800cfca <sniprintf+0x16>
 800d016:	bf00      	nop
 800d018:	2000018c 	.word	0x2000018c

0800d01c <strncmp>:
 800d01c:	4603      	mov	r3, r0
 800d01e:	b510      	push	{r4, lr}
 800d020:	b172      	cbz	r2, 800d040 <strncmp+0x24>
 800d022:	3901      	subs	r1, #1
 800d024:	1884      	adds	r4, r0, r2
 800d026:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d02a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d02e:	4290      	cmp	r0, r2
 800d030:	d101      	bne.n	800d036 <strncmp+0x1a>
 800d032:	42a3      	cmp	r3, r4
 800d034:	d101      	bne.n	800d03a <strncmp+0x1e>
 800d036:	1a80      	subs	r0, r0, r2
 800d038:	bd10      	pop	{r4, pc}
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d1f3      	bne.n	800d026 <strncmp+0xa>
 800d03e:	e7fa      	b.n	800d036 <strncmp+0x1a>
 800d040:	4610      	mov	r0, r2
 800d042:	e7f9      	b.n	800d038 <strncmp+0x1c>

0800d044 <strncpy>:
 800d044:	4603      	mov	r3, r0
 800d046:	b510      	push	{r4, lr}
 800d048:	3901      	subs	r1, #1
 800d04a:	b132      	cbz	r2, 800d05a <strncpy+0x16>
 800d04c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d050:	3a01      	subs	r2, #1
 800d052:	f803 4b01 	strb.w	r4, [r3], #1
 800d056:	2c00      	cmp	r4, #0
 800d058:	d1f7      	bne.n	800d04a <strncpy+0x6>
 800d05a:	2100      	movs	r1, #0
 800d05c:	441a      	add	r2, r3
 800d05e:	4293      	cmp	r3, r2
 800d060:	d100      	bne.n	800d064 <strncpy+0x20>
 800d062:	bd10      	pop	{r4, pc}
 800d064:	f803 1b01 	strb.w	r1, [r3], #1
 800d068:	e7f9      	b.n	800d05e <strncpy+0x1a>

0800d06a <__ssputs_r>:
 800d06a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d06e:	688e      	ldr	r6, [r1, #8]
 800d070:	4682      	mov	sl, r0
 800d072:	429e      	cmp	r6, r3
 800d074:	460c      	mov	r4, r1
 800d076:	4690      	mov	r8, r2
 800d078:	461f      	mov	r7, r3
 800d07a:	d838      	bhi.n	800d0ee <__ssputs_r+0x84>
 800d07c:	898a      	ldrh	r2, [r1, #12]
 800d07e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d082:	d032      	beq.n	800d0ea <__ssputs_r+0x80>
 800d084:	6825      	ldr	r5, [r4, #0]
 800d086:	6909      	ldr	r1, [r1, #16]
 800d088:	3301      	adds	r3, #1
 800d08a:	eba5 0901 	sub.w	r9, r5, r1
 800d08e:	6965      	ldr	r5, [r4, #20]
 800d090:	444b      	add	r3, r9
 800d092:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d096:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d09a:	106d      	asrs	r5, r5, #1
 800d09c:	429d      	cmp	r5, r3
 800d09e:	bf38      	it	cc
 800d0a0:	461d      	movcc	r5, r3
 800d0a2:	0553      	lsls	r3, r2, #21
 800d0a4:	d531      	bpl.n	800d10a <__ssputs_r+0xa0>
 800d0a6:	4629      	mov	r1, r5
 800d0a8:	f000 fb60 	bl	800d76c <_malloc_r>
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	b950      	cbnz	r0, 800d0c6 <__ssputs_r+0x5c>
 800d0b0:	230c      	movs	r3, #12
 800d0b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0b6:	f8ca 3000 	str.w	r3, [sl]
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0c0:	81a3      	strh	r3, [r4, #12]
 800d0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c6:	464a      	mov	r2, r9
 800d0c8:	6921      	ldr	r1, [r4, #16]
 800d0ca:	f7ff ff5d 	bl	800cf88 <memcpy>
 800d0ce:	89a3      	ldrh	r3, [r4, #12]
 800d0d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0d8:	81a3      	strh	r3, [r4, #12]
 800d0da:	6126      	str	r6, [r4, #16]
 800d0dc:	444e      	add	r6, r9
 800d0de:	6026      	str	r6, [r4, #0]
 800d0e0:	463e      	mov	r6, r7
 800d0e2:	6165      	str	r5, [r4, #20]
 800d0e4:	eba5 0509 	sub.w	r5, r5, r9
 800d0e8:	60a5      	str	r5, [r4, #8]
 800d0ea:	42be      	cmp	r6, r7
 800d0ec:	d900      	bls.n	800d0f0 <__ssputs_r+0x86>
 800d0ee:	463e      	mov	r6, r7
 800d0f0:	4632      	mov	r2, r6
 800d0f2:	4641      	mov	r1, r8
 800d0f4:	6820      	ldr	r0, [r4, #0]
 800d0f6:	f000 fab7 	bl	800d668 <memmove>
 800d0fa:	68a3      	ldr	r3, [r4, #8]
 800d0fc:	2000      	movs	r0, #0
 800d0fe:	1b9b      	subs	r3, r3, r6
 800d100:	60a3      	str	r3, [r4, #8]
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	4433      	add	r3, r6
 800d106:	6023      	str	r3, [r4, #0]
 800d108:	e7db      	b.n	800d0c2 <__ssputs_r+0x58>
 800d10a:	462a      	mov	r2, r5
 800d10c:	f000 fba2 	bl	800d854 <_realloc_r>
 800d110:	4606      	mov	r6, r0
 800d112:	2800      	cmp	r0, #0
 800d114:	d1e1      	bne.n	800d0da <__ssputs_r+0x70>
 800d116:	4650      	mov	r0, sl
 800d118:	6921      	ldr	r1, [r4, #16]
 800d11a:	f000 fabf 	bl	800d69c <_free_r>
 800d11e:	e7c7      	b.n	800d0b0 <__ssputs_r+0x46>

0800d120 <_svfiprintf_r>:
 800d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d124:	4698      	mov	r8, r3
 800d126:	898b      	ldrh	r3, [r1, #12]
 800d128:	4607      	mov	r7, r0
 800d12a:	061b      	lsls	r3, r3, #24
 800d12c:	460d      	mov	r5, r1
 800d12e:	4614      	mov	r4, r2
 800d130:	b09d      	sub	sp, #116	; 0x74
 800d132:	d50e      	bpl.n	800d152 <_svfiprintf_r+0x32>
 800d134:	690b      	ldr	r3, [r1, #16]
 800d136:	b963      	cbnz	r3, 800d152 <_svfiprintf_r+0x32>
 800d138:	2140      	movs	r1, #64	; 0x40
 800d13a:	f000 fb17 	bl	800d76c <_malloc_r>
 800d13e:	6028      	str	r0, [r5, #0]
 800d140:	6128      	str	r0, [r5, #16]
 800d142:	b920      	cbnz	r0, 800d14e <_svfiprintf_r+0x2e>
 800d144:	230c      	movs	r3, #12
 800d146:	603b      	str	r3, [r7, #0]
 800d148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d14c:	e0d1      	b.n	800d2f2 <_svfiprintf_r+0x1d2>
 800d14e:	2340      	movs	r3, #64	; 0x40
 800d150:	616b      	str	r3, [r5, #20]
 800d152:	2300      	movs	r3, #0
 800d154:	9309      	str	r3, [sp, #36]	; 0x24
 800d156:	2320      	movs	r3, #32
 800d158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d15c:	2330      	movs	r3, #48	; 0x30
 800d15e:	f04f 0901 	mov.w	r9, #1
 800d162:	f8cd 800c 	str.w	r8, [sp, #12]
 800d166:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d30c <_svfiprintf_r+0x1ec>
 800d16a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d16e:	4623      	mov	r3, r4
 800d170:	469a      	mov	sl, r3
 800d172:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d176:	b10a      	cbz	r2, 800d17c <_svfiprintf_r+0x5c>
 800d178:	2a25      	cmp	r2, #37	; 0x25
 800d17a:	d1f9      	bne.n	800d170 <_svfiprintf_r+0x50>
 800d17c:	ebba 0b04 	subs.w	fp, sl, r4
 800d180:	d00b      	beq.n	800d19a <_svfiprintf_r+0x7a>
 800d182:	465b      	mov	r3, fp
 800d184:	4622      	mov	r2, r4
 800d186:	4629      	mov	r1, r5
 800d188:	4638      	mov	r0, r7
 800d18a:	f7ff ff6e 	bl	800d06a <__ssputs_r>
 800d18e:	3001      	adds	r0, #1
 800d190:	f000 80aa 	beq.w	800d2e8 <_svfiprintf_r+0x1c8>
 800d194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d196:	445a      	add	r2, fp
 800d198:	9209      	str	r2, [sp, #36]	; 0x24
 800d19a:	f89a 3000 	ldrb.w	r3, [sl]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f000 80a2 	beq.w	800d2e8 <_svfiprintf_r+0x1c8>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1ae:	f10a 0a01 	add.w	sl, sl, #1
 800d1b2:	9304      	str	r3, [sp, #16]
 800d1b4:	9307      	str	r3, [sp, #28]
 800d1b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1ba:	931a      	str	r3, [sp, #104]	; 0x68
 800d1bc:	4654      	mov	r4, sl
 800d1be:	2205      	movs	r2, #5
 800d1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1c4:	4851      	ldr	r0, [pc, #324]	; (800d30c <_svfiprintf_r+0x1ec>)
 800d1c6:	f000 fa41 	bl	800d64c <memchr>
 800d1ca:	9a04      	ldr	r2, [sp, #16]
 800d1cc:	b9d8      	cbnz	r0, 800d206 <_svfiprintf_r+0xe6>
 800d1ce:	06d0      	lsls	r0, r2, #27
 800d1d0:	bf44      	itt	mi
 800d1d2:	2320      	movmi	r3, #32
 800d1d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1d8:	0711      	lsls	r1, r2, #28
 800d1da:	bf44      	itt	mi
 800d1dc:	232b      	movmi	r3, #43	; 0x2b
 800d1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800d1e8:	d015      	beq.n	800d216 <_svfiprintf_r+0xf6>
 800d1ea:	4654      	mov	r4, sl
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	f04f 0c0a 	mov.w	ip, #10
 800d1f2:	9a07      	ldr	r2, [sp, #28]
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1fa:	3b30      	subs	r3, #48	; 0x30
 800d1fc:	2b09      	cmp	r3, #9
 800d1fe:	d94e      	bls.n	800d29e <_svfiprintf_r+0x17e>
 800d200:	b1b0      	cbz	r0, 800d230 <_svfiprintf_r+0x110>
 800d202:	9207      	str	r2, [sp, #28]
 800d204:	e014      	b.n	800d230 <_svfiprintf_r+0x110>
 800d206:	eba0 0308 	sub.w	r3, r0, r8
 800d20a:	fa09 f303 	lsl.w	r3, r9, r3
 800d20e:	4313      	orrs	r3, r2
 800d210:	46a2      	mov	sl, r4
 800d212:	9304      	str	r3, [sp, #16]
 800d214:	e7d2      	b.n	800d1bc <_svfiprintf_r+0x9c>
 800d216:	9b03      	ldr	r3, [sp, #12]
 800d218:	1d19      	adds	r1, r3, #4
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	9103      	str	r1, [sp, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	bfbb      	ittet	lt
 800d222:	425b      	neglt	r3, r3
 800d224:	f042 0202 	orrlt.w	r2, r2, #2
 800d228:	9307      	strge	r3, [sp, #28]
 800d22a:	9307      	strlt	r3, [sp, #28]
 800d22c:	bfb8      	it	lt
 800d22e:	9204      	strlt	r2, [sp, #16]
 800d230:	7823      	ldrb	r3, [r4, #0]
 800d232:	2b2e      	cmp	r3, #46	; 0x2e
 800d234:	d10c      	bne.n	800d250 <_svfiprintf_r+0x130>
 800d236:	7863      	ldrb	r3, [r4, #1]
 800d238:	2b2a      	cmp	r3, #42	; 0x2a
 800d23a:	d135      	bne.n	800d2a8 <_svfiprintf_r+0x188>
 800d23c:	9b03      	ldr	r3, [sp, #12]
 800d23e:	3402      	adds	r4, #2
 800d240:	1d1a      	adds	r2, r3, #4
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	9203      	str	r2, [sp, #12]
 800d246:	2b00      	cmp	r3, #0
 800d248:	bfb8      	it	lt
 800d24a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d24e:	9305      	str	r3, [sp, #20]
 800d250:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d310 <_svfiprintf_r+0x1f0>
 800d254:	2203      	movs	r2, #3
 800d256:	4650      	mov	r0, sl
 800d258:	7821      	ldrb	r1, [r4, #0]
 800d25a:	f000 f9f7 	bl	800d64c <memchr>
 800d25e:	b140      	cbz	r0, 800d272 <_svfiprintf_r+0x152>
 800d260:	2340      	movs	r3, #64	; 0x40
 800d262:	eba0 000a 	sub.w	r0, r0, sl
 800d266:	fa03 f000 	lsl.w	r0, r3, r0
 800d26a:	9b04      	ldr	r3, [sp, #16]
 800d26c:	3401      	adds	r4, #1
 800d26e:	4303      	orrs	r3, r0
 800d270:	9304      	str	r3, [sp, #16]
 800d272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d276:	2206      	movs	r2, #6
 800d278:	4826      	ldr	r0, [pc, #152]	; (800d314 <_svfiprintf_r+0x1f4>)
 800d27a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d27e:	f000 f9e5 	bl	800d64c <memchr>
 800d282:	2800      	cmp	r0, #0
 800d284:	d038      	beq.n	800d2f8 <_svfiprintf_r+0x1d8>
 800d286:	4b24      	ldr	r3, [pc, #144]	; (800d318 <_svfiprintf_r+0x1f8>)
 800d288:	bb1b      	cbnz	r3, 800d2d2 <_svfiprintf_r+0x1b2>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	3307      	adds	r3, #7
 800d28e:	f023 0307 	bic.w	r3, r3, #7
 800d292:	3308      	adds	r3, #8
 800d294:	9303      	str	r3, [sp, #12]
 800d296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d298:	4433      	add	r3, r6
 800d29a:	9309      	str	r3, [sp, #36]	; 0x24
 800d29c:	e767      	b.n	800d16e <_svfiprintf_r+0x4e>
 800d29e:	460c      	mov	r4, r1
 800d2a0:	2001      	movs	r0, #1
 800d2a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2a6:	e7a5      	b.n	800d1f4 <_svfiprintf_r+0xd4>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	f04f 0c0a 	mov.w	ip, #10
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	3401      	adds	r4, #1
 800d2b2:	9305      	str	r3, [sp, #20]
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2ba:	3a30      	subs	r2, #48	; 0x30
 800d2bc:	2a09      	cmp	r2, #9
 800d2be:	d903      	bls.n	800d2c8 <_svfiprintf_r+0x1a8>
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d0c5      	beq.n	800d250 <_svfiprintf_r+0x130>
 800d2c4:	9105      	str	r1, [sp, #20]
 800d2c6:	e7c3      	b.n	800d250 <_svfiprintf_r+0x130>
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2d0:	e7f0      	b.n	800d2b4 <_svfiprintf_r+0x194>
 800d2d2:	ab03      	add	r3, sp, #12
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	462a      	mov	r2, r5
 800d2d8:	4638      	mov	r0, r7
 800d2da:	4b10      	ldr	r3, [pc, #64]	; (800d31c <_svfiprintf_r+0x1fc>)
 800d2dc:	a904      	add	r1, sp, #16
 800d2de:	f3af 8000 	nop.w
 800d2e2:	1c42      	adds	r2, r0, #1
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	d1d6      	bne.n	800d296 <_svfiprintf_r+0x176>
 800d2e8:	89ab      	ldrh	r3, [r5, #12]
 800d2ea:	065b      	lsls	r3, r3, #25
 800d2ec:	f53f af2c 	bmi.w	800d148 <_svfiprintf_r+0x28>
 800d2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2f2:	b01d      	add	sp, #116	; 0x74
 800d2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f8:	ab03      	add	r3, sp, #12
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	462a      	mov	r2, r5
 800d2fe:	4638      	mov	r0, r7
 800d300:	4b06      	ldr	r3, [pc, #24]	; (800d31c <_svfiprintf_r+0x1fc>)
 800d302:	a904      	add	r1, sp, #16
 800d304:	f000 f87c 	bl	800d400 <_printf_i>
 800d308:	e7eb      	b.n	800d2e2 <_svfiprintf_r+0x1c2>
 800d30a:	bf00      	nop
 800d30c:	0800e83f 	.word	0x0800e83f
 800d310:	0800e845 	.word	0x0800e845
 800d314:	0800e849 	.word	0x0800e849
 800d318:	00000000 	.word	0x00000000
 800d31c:	0800d06b 	.word	0x0800d06b

0800d320 <_printf_common>:
 800d320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d324:	4616      	mov	r6, r2
 800d326:	4699      	mov	r9, r3
 800d328:	688a      	ldr	r2, [r1, #8]
 800d32a:	690b      	ldr	r3, [r1, #16]
 800d32c:	4607      	mov	r7, r0
 800d32e:	4293      	cmp	r3, r2
 800d330:	bfb8      	it	lt
 800d332:	4613      	movlt	r3, r2
 800d334:	6033      	str	r3, [r6, #0]
 800d336:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d33a:	460c      	mov	r4, r1
 800d33c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d340:	b10a      	cbz	r2, 800d346 <_printf_common+0x26>
 800d342:	3301      	adds	r3, #1
 800d344:	6033      	str	r3, [r6, #0]
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	0699      	lsls	r1, r3, #26
 800d34a:	bf42      	ittt	mi
 800d34c:	6833      	ldrmi	r3, [r6, #0]
 800d34e:	3302      	addmi	r3, #2
 800d350:	6033      	strmi	r3, [r6, #0]
 800d352:	6825      	ldr	r5, [r4, #0]
 800d354:	f015 0506 	ands.w	r5, r5, #6
 800d358:	d106      	bne.n	800d368 <_printf_common+0x48>
 800d35a:	f104 0a19 	add.w	sl, r4, #25
 800d35e:	68e3      	ldr	r3, [r4, #12]
 800d360:	6832      	ldr	r2, [r6, #0]
 800d362:	1a9b      	subs	r3, r3, r2
 800d364:	42ab      	cmp	r3, r5
 800d366:	dc28      	bgt.n	800d3ba <_printf_common+0x9a>
 800d368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d36c:	1e13      	subs	r3, r2, #0
 800d36e:	6822      	ldr	r2, [r4, #0]
 800d370:	bf18      	it	ne
 800d372:	2301      	movne	r3, #1
 800d374:	0692      	lsls	r2, r2, #26
 800d376:	d42d      	bmi.n	800d3d4 <_printf_common+0xb4>
 800d378:	4649      	mov	r1, r9
 800d37a:	4638      	mov	r0, r7
 800d37c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d380:	47c0      	blx	r8
 800d382:	3001      	adds	r0, #1
 800d384:	d020      	beq.n	800d3c8 <_printf_common+0xa8>
 800d386:	6823      	ldr	r3, [r4, #0]
 800d388:	68e5      	ldr	r5, [r4, #12]
 800d38a:	f003 0306 	and.w	r3, r3, #6
 800d38e:	2b04      	cmp	r3, #4
 800d390:	bf18      	it	ne
 800d392:	2500      	movne	r5, #0
 800d394:	6832      	ldr	r2, [r6, #0]
 800d396:	f04f 0600 	mov.w	r6, #0
 800d39a:	68a3      	ldr	r3, [r4, #8]
 800d39c:	bf08      	it	eq
 800d39e:	1aad      	subeq	r5, r5, r2
 800d3a0:	6922      	ldr	r2, [r4, #16]
 800d3a2:	bf08      	it	eq
 800d3a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	bfc4      	itt	gt
 800d3ac:	1a9b      	subgt	r3, r3, r2
 800d3ae:	18ed      	addgt	r5, r5, r3
 800d3b0:	341a      	adds	r4, #26
 800d3b2:	42b5      	cmp	r5, r6
 800d3b4:	d11a      	bne.n	800d3ec <_printf_common+0xcc>
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	e008      	b.n	800d3cc <_printf_common+0xac>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	4652      	mov	r2, sl
 800d3be:	4649      	mov	r1, r9
 800d3c0:	4638      	mov	r0, r7
 800d3c2:	47c0      	blx	r8
 800d3c4:	3001      	adds	r0, #1
 800d3c6:	d103      	bne.n	800d3d0 <_printf_common+0xb0>
 800d3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d0:	3501      	adds	r5, #1
 800d3d2:	e7c4      	b.n	800d35e <_printf_common+0x3e>
 800d3d4:	2030      	movs	r0, #48	; 0x30
 800d3d6:	18e1      	adds	r1, r4, r3
 800d3d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3dc:	1c5a      	adds	r2, r3, #1
 800d3de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3e2:	4422      	add	r2, r4
 800d3e4:	3302      	adds	r3, #2
 800d3e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3ea:	e7c5      	b.n	800d378 <_printf_common+0x58>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	4622      	mov	r2, r4
 800d3f0:	4649      	mov	r1, r9
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	47c0      	blx	r8
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	d0e6      	beq.n	800d3c8 <_printf_common+0xa8>
 800d3fa:	3601      	adds	r6, #1
 800d3fc:	e7d9      	b.n	800d3b2 <_printf_common+0x92>
	...

0800d400 <_printf_i>:
 800d400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d404:	7e0f      	ldrb	r7, [r1, #24]
 800d406:	4691      	mov	r9, r2
 800d408:	2f78      	cmp	r7, #120	; 0x78
 800d40a:	4680      	mov	r8, r0
 800d40c:	460c      	mov	r4, r1
 800d40e:	469a      	mov	sl, r3
 800d410:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d416:	d807      	bhi.n	800d428 <_printf_i+0x28>
 800d418:	2f62      	cmp	r7, #98	; 0x62
 800d41a:	d80a      	bhi.n	800d432 <_printf_i+0x32>
 800d41c:	2f00      	cmp	r7, #0
 800d41e:	f000 80d9 	beq.w	800d5d4 <_printf_i+0x1d4>
 800d422:	2f58      	cmp	r7, #88	; 0x58
 800d424:	f000 80a4 	beq.w	800d570 <_printf_i+0x170>
 800d428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d42c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d430:	e03a      	b.n	800d4a8 <_printf_i+0xa8>
 800d432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d436:	2b15      	cmp	r3, #21
 800d438:	d8f6      	bhi.n	800d428 <_printf_i+0x28>
 800d43a:	a101      	add	r1, pc, #4	; (adr r1, 800d440 <_printf_i+0x40>)
 800d43c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d440:	0800d499 	.word	0x0800d499
 800d444:	0800d4ad 	.word	0x0800d4ad
 800d448:	0800d429 	.word	0x0800d429
 800d44c:	0800d429 	.word	0x0800d429
 800d450:	0800d429 	.word	0x0800d429
 800d454:	0800d429 	.word	0x0800d429
 800d458:	0800d4ad 	.word	0x0800d4ad
 800d45c:	0800d429 	.word	0x0800d429
 800d460:	0800d429 	.word	0x0800d429
 800d464:	0800d429 	.word	0x0800d429
 800d468:	0800d429 	.word	0x0800d429
 800d46c:	0800d5bb 	.word	0x0800d5bb
 800d470:	0800d4dd 	.word	0x0800d4dd
 800d474:	0800d59d 	.word	0x0800d59d
 800d478:	0800d429 	.word	0x0800d429
 800d47c:	0800d429 	.word	0x0800d429
 800d480:	0800d5dd 	.word	0x0800d5dd
 800d484:	0800d429 	.word	0x0800d429
 800d488:	0800d4dd 	.word	0x0800d4dd
 800d48c:	0800d429 	.word	0x0800d429
 800d490:	0800d429 	.word	0x0800d429
 800d494:	0800d5a5 	.word	0x0800d5a5
 800d498:	682b      	ldr	r3, [r5, #0]
 800d49a:	1d1a      	adds	r2, r3, #4
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	602a      	str	r2, [r5, #0]
 800d4a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e0a4      	b.n	800d5f6 <_printf_i+0x1f6>
 800d4ac:	6820      	ldr	r0, [r4, #0]
 800d4ae:	6829      	ldr	r1, [r5, #0]
 800d4b0:	0606      	lsls	r6, r0, #24
 800d4b2:	f101 0304 	add.w	r3, r1, #4
 800d4b6:	d50a      	bpl.n	800d4ce <_printf_i+0xce>
 800d4b8:	680e      	ldr	r6, [r1, #0]
 800d4ba:	602b      	str	r3, [r5, #0]
 800d4bc:	2e00      	cmp	r6, #0
 800d4be:	da03      	bge.n	800d4c8 <_printf_i+0xc8>
 800d4c0:	232d      	movs	r3, #45	; 0x2d
 800d4c2:	4276      	negs	r6, r6
 800d4c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4c8:	230a      	movs	r3, #10
 800d4ca:	485e      	ldr	r0, [pc, #376]	; (800d644 <_printf_i+0x244>)
 800d4cc:	e019      	b.n	800d502 <_printf_i+0x102>
 800d4ce:	680e      	ldr	r6, [r1, #0]
 800d4d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	bf18      	it	ne
 800d4d8:	b236      	sxthne	r6, r6
 800d4da:	e7ef      	b.n	800d4bc <_printf_i+0xbc>
 800d4dc:	682b      	ldr	r3, [r5, #0]
 800d4de:	6820      	ldr	r0, [r4, #0]
 800d4e0:	1d19      	adds	r1, r3, #4
 800d4e2:	6029      	str	r1, [r5, #0]
 800d4e4:	0601      	lsls	r1, r0, #24
 800d4e6:	d501      	bpl.n	800d4ec <_printf_i+0xec>
 800d4e8:	681e      	ldr	r6, [r3, #0]
 800d4ea:	e002      	b.n	800d4f2 <_printf_i+0xf2>
 800d4ec:	0646      	lsls	r6, r0, #25
 800d4ee:	d5fb      	bpl.n	800d4e8 <_printf_i+0xe8>
 800d4f0:	881e      	ldrh	r6, [r3, #0]
 800d4f2:	2f6f      	cmp	r7, #111	; 0x6f
 800d4f4:	bf0c      	ite	eq
 800d4f6:	2308      	moveq	r3, #8
 800d4f8:	230a      	movne	r3, #10
 800d4fa:	4852      	ldr	r0, [pc, #328]	; (800d644 <_printf_i+0x244>)
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d502:	6865      	ldr	r5, [r4, #4]
 800d504:	2d00      	cmp	r5, #0
 800d506:	bfa8      	it	ge
 800d508:	6821      	ldrge	r1, [r4, #0]
 800d50a:	60a5      	str	r5, [r4, #8]
 800d50c:	bfa4      	itt	ge
 800d50e:	f021 0104 	bicge.w	r1, r1, #4
 800d512:	6021      	strge	r1, [r4, #0]
 800d514:	b90e      	cbnz	r6, 800d51a <_printf_i+0x11a>
 800d516:	2d00      	cmp	r5, #0
 800d518:	d04d      	beq.n	800d5b6 <_printf_i+0x1b6>
 800d51a:	4615      	mov	r5, r2
 800d51c:	fbb6 f1f3 	udiv	r1, r6, r3
 800d520:	fb03 6711 	mls	r7, r3, r1, r6
 800d524:	5dc7      	ldrb	r7, [r0, r7]
 800d526:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d52a:	4637      	mov	r7, r6
 800d52c:	42bb      	cmp	r3, r7
 800d52e:	460e      	mov	r6, r1
 800d530:	d9f4      	bls.n	800d51c <_printf_i+0x11c>
 800d532:	2b08      	cmp	r3, #8
 800d534:	d10b      	bne.n	800d54e <_printf_i+0x14e>
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	07de      	lsls	r6, r3, #31
 800d53a:	d508      	bpl.n	800d54e <_printf_i+0x14e>
 800d53c:	6923      	ldr	r3, [r4, #16]
 800d53e:	6861      	ldr	r1, [r4, #4]
 800d540:	4299      	cmp	r1, r3
 800d542:	bfde      	ittt	le
 800d544:	2330      	movle	r3, #48	; 0x30
 800d546:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d54a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d54e:	1b52      	subs	r2, r2, r5
 800d550:	6122      	str	r2, [r4, #16]
 800d552:	464b      	mov	r3, r9
 800d554:	4621      	mov	r1, r4
 800d556:	4640      	mov	r0, r8
 800d558:	f8cd a000 	str.w	sl, [sp]
 800d55c:	aa03      	add	r2, sp, #12
 800d55e:	f7ff fedf 	bl	800d320 <_printf_common>
 800d562:	3001      	adds	r0, #1
 800d564:	d14c      	bne.n	800d600 <_printf_i+0x200>
 800d566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d56a:	b004      	add	sp, #16
 800d56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d570:	4834      	ldr	r0, [pc, #208]	; (800d644 <_printf_i+0x244>)
 800d572:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d576:	6829      	ldr	r1, [r5, #0]
 800d578:	6823      	ldr	r3, [r4, #0]
 800d57a:	f851 6b04 	ldr.w	r6, [r1], #4
 800d57e:	6029      	str	r1, [r5, #0]
 800d580:	061d      	lsls	r5, r3, #24
 800d582:	d514      	bpl.n	800d5ae <_printf_i+0x1ae>
 800d584:	07df      	lsls	r7, r3, #31
 800d586:	bf44      	itt	mi
 800d588:	f043 0320 	orrmi.w	r3, r3, #32
 800d58c:	6023      	strmi	r3, [r4, #0]
 800d58e:	b91e      	cbnz	r6, 800d598 <_printf_i+0x198>
 800d590:	6823      	ldr	r3, [r4, #0]
 800d592:	f023 0320 	bic.w	r3, r3, #32
 800d596:	6023      	str	r3, [r4, #0]
 800d598:	2310      	movs	r3, #16
 800d59a:	e7af      	b.n	800d4fc <_printf_i+0xfc>
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	f043 0320 	orr.w	r3, r3, #32
 800d5a2:	6023      	str	r3, [r4, #0]
 800d5a4:	2378      	movs	r3, #120	; 0x78
 800d5a6:	4828      	ldr	r0, [pc, #160]	; (800d648 <_printf_i+0x248>)
 800d5a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5ac:	e7e3      	b.n	800d576 <_printf_i+0x176>
 800d5ae:	0659      	lsls	r1, r3, #25
 800d5b0:	bf48      	it	mi
 800d5b2:	b2b6      	uxthmi	r6, r6
 800d5b4:	e7e6      	b.n	800d584 <_printf_i+0x184>
 800d5b6:	4615      	mov	r5, r2
 800d5b8:	e7bb      	b.n	800d532 <_printf_i+0x132>
 800d5ba:	682b      	ldr	r3, [r5, #0]
 800d5bc:	6826      	ldr	r6, [r4, #0]
 800d5be:	1d18      	adds	r0, r3, #4
 800d5c0:	6961      	ldr	r1, [r4, #20]
 800d5c2:	6028      	str	r0, [r5, #0]
 800d5c4:	0635      	lsls	r5, r6, #24
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	d501      	bpl.n	800d5ce <_printf_i+0x1ce>
 800d5ca:	6019      	str	r1, [r3, #0]
 800d5cc:	e002      	b.n	800d5d4 <_printf_i+0x1d4>
 800d5ce:	0670      	lsls	r0, r6, #25
 800d5d0:	d5fb      	bpl.n	800d5ca <_printf_i+0x1ca>
 800d5d2:	8019      	strh	r1, [r3, #0]
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	4615      	mov	r5, r2
 800d5d8:	6123      	str	r3, [r4, #16]
 800d5da:	e7ba      	b.n	800d552 <_printf_i+0x152>
 800d5dc:	682b      	ldr	r3, [r5, #0]
 800d5de:	2100      	movs	r1, #0
 800d5e0:	1d1a      	adds	r2, r3, #4
 800d5e2:	602a      	str	r2, [r5, #0]
 800d5e4:	681d      	ldr	r5, [r3, #0]
 800d5e6:	6862      	ldr	r2, [r4, #4]
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	f000 f82f 	bl	800d64c <memchr>
 800d5ee:	b108      	cbz	r0, 800d5f4 <_printf_i+0x1f4>
 800d5f0:	1b40      	subs	r0, r0, r5
 800d5f2:	6060      	str	r0, [r4, #4]
 800d5f4:	6863      	ldr	r3, [r4, #4]
 800d5f6:	6123      	str	r3, [r4, #16]
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5fe:	e7a8      	b.n	800d552 <_printf_i+0x152>
 800d600:	462a      	mov	r2, r5
 800d602:	4649      	mov	r1, r9
 800d604:	4640      	mov	r0, r8
 800d606:	6923      	ldr	r3, [r4, #16]
 800d608:	47d0      	blx	sl
 800d60a:	3001      	adds	r0, #1
 800d60c:	d0ab      	beq.n	800d566 <_printf_i+0x166>
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	079b      	lsls	r3, r3, #30
 800d612:	d413      	bmi.n	800d63c <_printf_i+0x23c>
 800d614:	68e0      	ldr	r0, [r4, #12]
 800d616:	9b03      	ldr	r3, [sp, #12]
 800d618:	4298      	cmp	r0, r3
 800d61a:	bfb8      	it	lt
 800d61c:	4618      	movlt	r0, r3
 800d61e:	e7a4      	b.n	800d56a <_printf_i+0x16a>
 800d620:	2301      	movs	r3, #1
 800d622:	4632      	mov	r2, r6
 800d624:	4649      	mov	r1, r9
 800d626:	4640      	mov	r0, r8
 800d628:	47d0      	blx	sl
 800d62a:	3001      	adds	r0, #1
 800d62c:	d09b      	beq.n	800d566 <_printf_i+0x166>
 800d62e:	3501      	adds	r5, #1
 800d630:	68e3      	ldr	r3, [r4, #12]
 800d632:	9903      	ldr	r1, [sp, #12]
 800d634:	1a5b      	subs	r3, r3, r1
 800d636:	42ab      	cmp	r3, r5
 800d638:	dcf2      	bgt.n	800d620 <_printf_i+0x220>
 800d63a:	e7eb      	b.n	800d614 <_printf_i+0x214>
 800d63c:	2500      	movs	r5, #0
 800d63e:	f104 0619 	add.w	r6, r4, #25
 800d642:	e7f5      	b.n	800d630 <_printf_i+0x230>
 800d644:	0800e850 	.word	0x0800e850
 800d648:	0800e861 	.word	0x0800e861

0800d64c <memchr>:
 800d64c:	4603      	mov	r3, r0
 800d64e:	b510      	push	{r4, lr}
 800d650:	b2c9      	uxtb	r1, r1
 800d652:	4402      	add	r2, r0
 800d654:	4293      	cmp	r3, r2
 800d656:	4618      	mov	r0, r3
 800d658:	d101      	bne.n	800d65e <memchr+0x12>
 800d65a:	2000      	movs	r0, #0
 800d65c:	e003      	b.n	800d666 <memchr+0x1a>
 800d65e:	7804      	ldrb	r4, [r0, #0]
 800d660:	3301      	adds	r3, #1
 800d662:	428c      	cmp	r4, r1
 800d664:	d1f6      	bne.n	800d654 <memchr+0x8>
 800d666:	bd10      	pop	{r4, pc}

0800d668 <memmove>:
 800d668:	4288      	cmp	r0, r1
 800d66a:	b510      	push	{r4, lr}
 800d66c:	eb01 0402 	add.w	r4, r1, r2
 800d670:	d902      	bls.n	800d678 <memmove+0x10>
 800d672:	4284      	cmp	r4, r0
 800d674:	4623      	mov	r3, r4
 800d676:	d807      	bhi.n	800d688 <memmove+0x20>
 800d678:	1e43      	subs	r3, r0, #1
 800d67a:	42a1      	cmp	r1, r4
 800d67c:	d008      	beq.n	800d690 <memmove+0x28>
 800d67e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d682:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d686:	e7f8      	b.n	800d67a <memmove+0x12>
 800d688:	4601      	mov	r1, r0
 800d68a:	4402      	add	r2, r0
 800d68c:	428a      	cmp	r2, r1
 800d68e:	d100      	bne.n	800d692 <memmove+0x2a>
 800d690:	bd10      	pop	{r4, pc}
 800d692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d69a:	e7f7      	b.n	800d68c <memmove+0x24>

0800d69c <_free_r>:
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	4605      	mov	r5, r0
 800d6a0:	2900      	cmp	r1, #0
 800d6a2:	d040      	beq.n	800d726 <_free_r+0x8a>
 800d6a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6a8:	1f0c      	subs	r4, r1, #4
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	bfb8      	it	lt
 800d6ae:	18e4      	addlt	r4, r4, r3
 800d6b0:	f000 f910 	bl	800d8d4 <__malloc_lock>
 800d6b4:	4a1c      	ldr	r2, [pc, #112]	; (800d728 <_free_r+0x8c>)
 800d6b6:	6813      	ldr	r3, [r2, #0]
 800d6b8:	b933      	cbnz	r3, 800d6c8 <_free_r+0x2c>
 800d6ba:	6063      	str	r3, [r4, #4]
 800d6bc:	6014      	str	r4, [r2, #0]
 800d6be:	4628      	mov	r0, r5
 800d6c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6c4:	f000 b90c 	b.w	800d8e0 <__malloc_unlock>
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	d908      	bls.n	800d6de <_free_r+0x42>
 800d6cc:	6820      	ldr	r0, [r4, #0]
 800d6ce:	1821      	adds	r1, r4, r0
 800d6d0:	428b      	cmp	r3, r1
 800d6d2:	bf01      	itttt	eq
 800d6d4:	6819      	ldreq	r1, [r3, #0]
 800d6d6:	685b      	ldreq	r3, [r3, #4]
 800d6d8:	1809      	addeq	r1, r1, r0
 800d6da:	6021      	streq	r1, [r4, #0]
 800d6dc:	e7ed      	b.n	800d6ba <_free_r+0x1e>
 800d6de:	461a      	mov	r2, r3
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	b10b      	cbz	r3, 800d6e8 <_free_r+0x4c>
 800d6e4:	42a3      	cmp	r3, r4
 800d6e6:	d9fa      	bls.n	800d6de <_free_r+0x42>
 800d6e8:	6811      	ldr	r1, [r2, #0]
 800d6ea:	1850      	adds	r0, r2, r1
 800d6ec:	42a0      	cmp	r0, r4
 800d6ee:	d10b      	bne.n	800d708 <_free_r+0x6c>
 800d6f0:	6820      	ldr	r0, [r4, #0]
 800d6f2:	4401      	add	r1, r0
 800d6f4:	1850      	adds	r0, r2, r1
 800d6f6:	4283      	cmp	r3, r0
 800d6f8:	6011      	str	r1, [r2, #0]
 800d6fa:	d1e0      	bne.n	800d6be <_free_r+0x22>
 800d6fc:	6818      	ldr	r0, [r3, #0]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	4401      	add	r1, r0
 800d702:	6011      	str	r1, [r2, #0]
 800d704:	6053      	str	r3, [r2, #4]
 800d706:	e7da      	b.n	800d6be <_free_r+0x22>
 800d708:	d902      	bls.n	800d710 <_free_r+0x74>
 800d70a:	230c      	movs	r3, #12
 800d70c:	602b      	str	r3, [r5, #0]
 800d70e:	e7d6      	b.n	800d6be <_free_r+0x22>
 800d710:	6820      	ldr	r0, [r4, #0]
 800d712:	1821      	adds	r1, r4, r0
 800d714:	428b      	cmp	r3, r1
 800d716:	bf01      	itttt	eq
 800d718:	6819      	ldreq	r1, [r3, #0]
 800d71a:	685b      	ldreq	r3, [r3, #4]
 800d71c:	1809      	addeq	r1, r1, r0
 800d71e:	6021      	streq	r1, [r4, #0]
 800d720:	6063      	str	r3, [r4, #4]
 800d722:	6054      	str	r4, [r2, #4]
 800d724:	e7cb      	b.n	800d6be <_free_r+0x22>
 800d726:	bd38      	pop	{r3, r4, r5, pc}
 800d728:	20001ce4 	.word	0x20001ce4

0800d72c <sbrk_aligned>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	4e0e      	ldr	r6, [pc, #56]	; (800d768 <sbrk_aligned+0x3c>)
 800d730:	460c      	mov	r4, r1
 800d732:	6831      	ldr	r1, [r6, #0]
 800d734:	4605      	mov	r5, r0
 800d736:	b911      	cbnz	r1, 800d73e <sbrk_aligned+0x12>
 800d738:	f000 f8bc 	bl	800d8b4 <_sbrk_r>
 800d73c:	6030      	str	r0, [r6, #0]
 800d73e:	4621      	mov	r1, r4
 800d740:	4628      	mov	r0, r5
 800d742:	f000 f8b7 	bl	800d8b4 <_sbrk_r>
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	d00a      	beq.n	800d760 <sbrk_aligned+0x34>
 800d74a:	1cc4      	adds	r4, r0, #3
 800d74c:	f024 0403 	bic.w	r4, r4, #3
 800d750:	42a0      	cmp	r0, r4
 800d752:	d007      	beq.n	800d764 <sbrk_aligned+0x38>
 800d754:	1a21      	subs	r1, r4, r0
 800d756:	4628      	mov	r0, r5
 800d758:	f000 f8ac 	bl	800d8b4 <_sbrk_r>
 800d75c:	3001      	adds	r0, #1
 800d75e:	d101      	bne.n	800d764 <sbrk_aligned+0x38>
 800d760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d764:	4620      	mov	r0, r4
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	20001ce8 	.word	0x20001ce8

0800d76c <_malloc_r>:
 800d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d770:	1ccd      	adds	r5, r1, #3
 800d772:	f025 0503 	bic.w	r5, r5, #3
 800d776:	3508      	adds	r5, #8
 800d778:	2d0c      	cmp	r5, #12
 800d77a:	bf38      	it	cc
 800d77c:	250c      	movcc	r5, #12
 800d77e:	2d00      	cmp	r5, #0
 800d780:	4607      	mov	r7, r0
 800d782:	db01      	blt.n	800d788 <_malloc_r+0x1c>
 800d784:	42a9      	cmp	r1, r5
 800d786:	d905      	bls.n	800d794 <_malloc_r+0x28>
 800d788:	230c      	movs	r3, #12
 800d78a:	2600      	movs	r6, #0
 800d78c:	603b      	str	r3, [r7, #0]
 800d78e:	4630      	mov	r0, r6
 800d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d794:	4e2e      	ldr	r6, [pc, #184]	; (800d850 <_malloc_r+0xe4>)
 800d796:	f000 f89d 	bl	800d8d4 <__malloc_lock>
 800d79a:	6833      	ldr	r3, [r6, #0]
 800d79c:	461c      	mov	r4, r3
 800d79e:	bb34      	cbnz	r4, 800d7ee <_malloc_r+0x82>
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f7ff ffc2 	bl	800d72c <sbrk_aligned>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	d14d      	bne.n	800d84a <_malloc_r+0xde>
 800d7ae:	6834      	ldr	r4, [r6, #0]
 800d7b0:	4626      	mov	r6, r4
 800d7b2:	2e00      	cmp	r6, #0
 800d7b4:	d140      	bne.n	800d838 <_malloc_r+0xcc>
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	4631      	mov	r1, r6
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	eb04 0803 	add.w	r8, r4, r3
 800d7c0:	f000 f878 	bl	800d8b4 <_sbrk_r>
 800d7c4:	4580      	cmp	r8, r0
 800d7c6:	d13a      	bne.n	800d83e <_malloc_r+0xd2>
 800d7c8:	6821      	ldr	r1, [r4, #0]
 800d7ca:	3503      	adds	r5, #3
 800d7cc:	1a6d      	subs	r5, r5, r1
 800d7ce:	f025 0503 	bic.w	r5, r5, #3
 800d7d2:	3508      	adds	r5, #8
 800d7d4:	2d0c      	cmp	r5, #12
 800d7d6:	bf38      	it	cc
 800d7d8:	250c      	movcc	r5, #12
 800d7da:	4638      	mov	r0, r7
 800d7dc:	4629      	mov	r1, r5
 800d7de:	f7ff ffa5 	bl	800d72c <sbrk_aligned>
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	d02b      	beq.n	800d83e <_malloc_r+0xd2>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	442b      	add	r3, r5
 800d7ea:	6023      	str	r3, [r4, #0]
 800d7ec:	e00e      	b.n	800d80c <_malloc_r+0xa0>
 800d7ee:	6822      	ldr	r2, [r4, #0]
 800d7f0:	1b52      	subs	r2, r2, r5
 800d7f2:	d41e      	bmi.n	800d832 <_malloc_r+0xc6>
 800d7f4:	2a0b      	cmp	r2, #11
 800d7f6:	d916      	bls.n	800d826 <_malloc_r+0xba>
 800d7f8:	1961      	adds	r1, r4, r5
 800d7fa:	42a3      	cmp	r3, r4
 800d7fc:	6025      	str	r5, [r4, #0]
 800d7fe:	bf18      	it	ne
 800d800:	6059      	strne	r1, [r3, #4]
 800d802:	6863      	ldr	r3, [r4, #4]
 800d804:	bf08      	it	eq
 800d806:	6031      	streq	r1, [r6, #0]
 800d808:	5162      	str	r2, [r4, r5]
 800d80a:	604b      	str	r3, [r1, #4]
 800d80c:	4638      	mov	r0, r7
 800d80e:	f104 060b 	add.w	r6, r4, #11
 800d812:	f000 f865 	bl	800d8e0 <__malloc_unlock>
 800d816:	f026 0607 	bic.w	r6, r6, #7
 800d81a:	1d23      	adds	r3, r4, #4
 800d81c:	1af2      	subs	r2, r6, r3
 800d81e:	d0b6      	beq.n	800d78e <_malloc_r+0x22>
 800d820:	1b9b      	subs	r3, r3, r6
 800d822:	50a3      	str	r3, [r4, r2]
 800d824:	e7b3      	b.n	800d78e <_malloc_r+0x22>
 800d826:	6862      	ldr	r2, [r4, #4]
 800d828:	42a3      	cmp	r3, r4
 800d82a:	bf0c      	ite	eq
 800d82c:	6032      	streq	r2, [r6, #0]
 800d82e:	605a      	strne	r2, [r3, #4]
 800d830:	e7ec      	b.n	800d80c <_malloc_r+0xa0>
 800d832:	4623      	mov	r3, r4
 800d834:	6864      	ldr	r4, [r4, #4]
 800d836:	e7b2      	b.n	800d79e <_malloc_r+0x32>
 800d838:	4634      	mov	r4, r6
 800d83a:	6876      	ldr	r6, [r6, #4]
 800d83c:	e7b9      	b.n	800d7b2 <_malloc_r+0x46>
 800d83e:	230c      	movs	r3, #12
 800d840:	4638      	mov	r0, r7
 800d842:	603b      	str	r3, [r7, #0]
 800d844:	f000 f84c 	bl	800d8e0 <__malloc_unlock>
 800d848:	e7a1      	b.n	800d78e <_malloc_r+0x22>
 800d84a:	6025      	str	r5, [r4, #0]
 800d84c:	e7de      	b.n	800d80c <_malloc_r+0xa0>
 800d84e:	bf00      	nop
 800d850:	20001ce4 	.word	0x20001ce4

0800d854 <_realloc_r>:
 800d854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d858:	4680      	mov	r8, r0
 800d85a:	4614      	mov	r4, r2
 800d85c:	460e      	mov	r6, r1
 800d85e:	b921      	cbnz	r1, 800d86a <_realloc_r+0x16>
 800d860:	4611      	mov	r1, r2
 800d862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d866:	f7ff bf81 	b.w	800d76c <_malloc_r>
 800d86a:	b92a      	cbnz	r2, 800d878 <_realloc_r+0x24>
 800d86c:	f7ff ff16 	bl	800d69c <_free_r>
 800d870:	4625      	mov	r5, r4
 800d872:	4628      	mov	r0, r5
 800d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d878:	f000 f838 	bl	800d8ec <_malloc_usable_size_r>
 800d87c:	4284      	cmp	r4, r0
 800d87e:	4607      	mov	r7, r0
 800d880:	d802      	bhi.n	800d888 <_realloc_r+0x34>
 800d882:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d886:	d812      	bhi.n	800d8ae <_realloc_r+0x5a>
 800d888:	4621      	mov	r1, r4
 800d88a:	4640      	mov	r0, r8
 800d88c:	f7ff ff6e 	bl	800d76c <_malloc_r>
 800d890:	4605      	mov	r5, r0
 800d892:	2800      	cmp	r0, #0
 800d894:	d0ed      	beq.n	800d872 <_realloc_r+0x1e>
 800d896:	42bc      	cmp	r4, r7
 800d898:	4622      	mov	r2, r4
 800d89a:	4631      	mov	r1, r6
 800d89c:	bf28      	it	cs
 800d89e:	463a      	movcs	r2, r7
 800d8a0:	f7ff fb72 	bl	800cf88 <memcpy>
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	f7ff fef8 	bl	800d69c <_free_r>
 800d8ac:	e7e1      	b.n	800d872 <_realloc_r+0x1e>
 800d8ae:	4635      	mov	r5, r6
 800d8b0:	e7df      	b.n	800d872 <_realloc_r+0x1e>
	...

0800d8b4 <_sbrk_r>:
 800d8b4:	b538      	push	{r3, r4, r5, lr}
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	4d05      	ldr	r5, [pc, #20]	; (800d8d0 <_sbrk_r+0x1c>)
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	4608      	mov	r0, r1
 800d8be:	602b      	str	r3, [r5, #0]
 800d8c0:	f7f4 fb20 	bl	8001f04 <_sbrk>
 800d8c4:	1c43      	adds	r3, r0, #1
 800d8c6:	d102      	bne.n	800d8ce <_sbrk_r+0x1a>
 800d8c8:	682b      	ldr	r3, [r5, #0]
 800d8ca:	b103      	cbz	r3, 800d8ce <_sbrk_r+0x1a>
 800d8cc:	6023      	str	r3, [r4, #0]
 800d8ce:	bd38      	pop	{r3, r4, r5, pc}
 800d8d0:	20001cec 	.word	0x20001cec

0800d8d4 <__malloc_lock>:
 800d8d4:	4801      	ldr	r0, [pc, #4]	; (800d8dc <__malloc_lock+0x8>)
 800d8d6:	f000 b811 	b.w	800d8fc <__retarget_lock_acquire_recursive>
 800d8da:	bf00      	nop
 800d8dc:	20001cf0 	.word	0x20001cf0

0800d8e0 <__malloc_unlock>:
 800d8e0:	4801      	ldr	r0, [pc, #4]	; (800d8e8 <__malloc_unlock+0x8>)
 800d8e2:	f000 b80c 	b.w	800d8fe <__retarget_lock_release_recursive>
 800d8e6:	bf00      	nop
 800d8e8:	20001cf0 	.word	0x20001cf0

0800d8ec <_malloc_usable_size_r>:
 800d8ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8f0:	1f18      	subs	r0, r3, #4
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	bfbc      	itt	lt
 800d8f6:	580b      	ldrlt	r3, [r1, r0]
 800d8f8:	18c0      	addlt	r0, r0, r3
 800d8fa:	4770      	bx	lr

0800d8fc <__retarget_lock_acquire_recursive>:
 800d8fc:	4770      	bx	lr

0800d8fe <__retarget_lock_release_recursive>:
 800d8fe:	4770      	bx	lr

0800d900 <_init>:
 800d900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d902:	bf00      	nop
 800d904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d906:	bc08      	pop	{r3}
 800d908:	469e      	mov	lr, r3
 800d90a:	4770      	bx	lr

0800d90c <_fini>:
 800d90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90e:	bf00      	nop
 800d910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d912:	bc08      	pop	{r3}
 800d914:	469e      	mov	lr, r3
 800d916:	4770      	bx	lr
