
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .img_def      00000228  0800f000  0800f000  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000d6f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000f5c  0800d7fc  0800d7fc  0001d7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800e758  0800e758  0002f228  2**0
                  CONTENTS
  5 .ARM          00000000  0800e758  0800e758  0002f228  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800e758  0800e758  0002f228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800e758  0800e758  0001e758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800e75c  0800e75c  0001e75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001f0  20000000  0800e760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001b04  200001f0  0800e950  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001cf4  0800e950  00021cf4  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002f228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ecdc  00000000  00000000  0002f251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b72  00000000  00000000  0006df2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022f8  00000000  00000000  00073aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002000  00000000  00000000  00075d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001df48  00000000  00000000  00077d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000232b5  00000000  00000000  00095ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fc05  00000000  00000000  000b8f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158b9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009644  00000000  00000000  00158bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d7e4 	.word	0x0800d7e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	0800d7e4 	.word	0x0800d7e4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern TIM_HandleTypeDef htim1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f004 f8f0 	bl	8004370 <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f004 f8eb 	bl	8004370 <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f004 fbe6 	bl	8004974 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f004 fbdf 	bl	8004974 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f006 fdd2 	bl	8006dd4 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f004 fb9b 	bl	8004974 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000450 	.word	0x20000450
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Kpd_Irqv_Init();
 800025c:	f001 f9ae 	bl	80015bc <Kpd_Irqv_Init>
	init_custom_character_db();
 8000260:	f000 fc4c 	bl	8000afc <init_custom_character_db>
	enable_backlight(true);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fecf 	bl	8001008 <enable_backlight>
	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <Start_APP+0x6c>)
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <Start_APP+0x70>)
 800026e:	4917      	ldr	r1, [pc, #92]	; (80002cc <Start_APP+0x74>)
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <Start_APP+0x78>)
 8000272:	f002 f98f 	bl	8002594 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 8000276:	4816      	ldr	r0, [pc, #88]	; (80002d0 <Start_APP+0x78>)
 8000278:	f003 ff43 	bl	8004102 <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 800027c:	2100      	movs	r1, #0
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <Start_APP+0x78>)
 8000280:	f003 ff4e 	bl	8004120 <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 8000284:	2004      	movs	r0, #4
 8000286:	f000 ff11 	bl	80010ac <set_contrast>

		u8g2_SetBitmapMode(&u8g2,0);
 800028a:	2100      	movs	r1, #0
 800028c:	4810      	ldr	r0, [pc, #64]	; (80002d0 <Start_APP+0x78>)
 800028e:	f001 fde7 	bl	8001e60 <u8g2_SetBitmapMode>


		u8g2_SetDrawColor(&u8g2, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	480e      	ldr	r0, [pc, #56]	; (80002d0 <Start_APP+0x78>)
 8000296:	f003 f997 	bl	80035c8 <u8g2_SetDrawColor>
		u8g2_SetFontMode(&u8g2, 0);
 800029a:	2100      	movs	r1, #0
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <Start_APP+0x78>)
 800029e:	f002 fe13 	bl	8002ec8 <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <Start_APP+0x78>)
 80002a4:	f002 ff7e 	bl	80031a4 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_crox2c_mf);
 80002a8:	490a      	ldr	r1, [pc, #40]	; (80002d4 <Start_APP+0x7c>)
 80002aa:	4809      	ldr	r0, [pc, #36]	; (80002d0 <Start_APP+0x78>)
 80002ac:	f002 ff88 	bl	80031c0 <u8g2_SetFont>
		disp_splash();
 80002b0:	f000 ff10 	bl	80010d4 <disp_splash>
		text_insertion_point(0 , 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fc3c 	bl	8000b34 <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002bc:	f000 face 	bl	800085c <monitor_begin>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	0800015d 	.word	0x0800015d
 80002c8:	080001cd 	.word	0x080001cd
 80002cc:	0800e6b4 	.word	0x0800e6b4
 80002d0:	2000020c 	.word	0x2000020c
 80002d4:	0800d8d0 	.word	0x0800d8d0

080002d8 <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	uint8_t RxBuf[3];
	while (CDC_Transmit_FS(buf, strlen(buf)) == USBD_OK);
 80002e0:	bf00      	nop
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f7ff ff32 	bl	800014c <strlen>
 80002e8:	4603      	mov	r3, r0
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f00c f9ac 	bl	800c64c <CDC_Transmit_FS>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f3      	beq.n	80002e2 <monitor_send_string+0xa>
/*	buf[2] = '\0';
	Flash_Read_Data (0x800f800, RxBuf, 2);
	Flash_Write_Data (0x800f800, buf, 2);
	RxBuf[2] = '\0';
	while (CDC_Transmit_FS(RxBuf, strlen(RxBuf)) == USBD_OK);*/
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800030e:	2201      	movs	r2, #1
 8000310:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000312:	4805      	ldr	r0, [pc, #20]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000314:	f006 ffe2 	bl	80072dc <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 8000318:	f000 f9bc 	bl	8000694 <monitor_interrupt>
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	200003c8 	.word	0x200003c8
 8000328:	200004f0 	.word	0x200004f0

0800032c <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af02      	add	r7, sp, #8
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 8000336:	2204      	movs	r2, #4
 8000338:	499f      	ldr	r1, [pc, #636]	; (80005b8 <monitor_check_cmd+0x28c>)
 800033a:	6878      	ldr	r0, [r7, #4]
 800033c:	f00c fde0 	bl	800cf00 <strncmp>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d108      	bne.n	8000358 <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 8000346:	4a9d      	ldr	r2, [pc, #628]	; (80005bc <monitor_check_cmd+0x290>)
 8000348:	21c8      	movs	r1, #200	; 0xc8
 800034a:	489d      	ldr	r0, [pc, #628]	; (80005c0 <monitor_check_cmd+0x294>)
 800034c:	f00c fda4 	bl	800ce98 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000350:	489b      	ldr	r0, [pc, #620]	; (80005c0 <monitor_check_cmd+0x294>)
 8000352:	f7ff ffc1 	bl	80002d8 <monitor_send_string>
			put_Ucursor(true,cmd[2], cmd[3],'R');
		}


	}
}
 8000356:	e16e      	b.n	8000636 <monitor_check_cmd+0x30a>
	else if (cmd[0] == LCD_CMD) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2bfe      	cmp	r3, #254	; 0xfe
 800035e:	f040 816a 	bne.w	8000636 <monitor_check_cmd+0x30a>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3301      	adds	r3, #1
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b31      	cmp	r3, #49	; 0x31
 800036a:	d109      	bne.n	8000380 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 800036c:	4b95      	ldr	r3, [pc, #596]	; (80005c4 <monitor_check_cmd+0x298>)
 800036e:	4a96      	ldr	r2, [pc, #600]	; (80005c8 <monitor_check_cmd+0x29c>)
 8000370:	21c8      	movs	r1, #200	; 0xc8
 8000372:	4893      	ldr	r0, [pc, #588]	; (80005c0 <monitor_check_cmd+0x294>)
 8000374:	f00c fd90 	bl	800ce98 <sniprintf>
			monitor_send_string(ans);
 8000378:	4891      	ldr	r0, [pc, #580]	; (80005c0 <monitor_check_cmd+0x294>)
 800037a:	f7ff ffad 	bl	80002d8 <monitor_send_string>
}
 800037e:	e15a      	b.n	8000636 <monitor_check_cmd+0x30a>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3301      	adds	r3, #1
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b30      	cmp	r3, #48	; 0x30
 8000388:	d109      	bne.n	800039e <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 800038a:	4b8e      	ldr	r3, [pc, #568]	; (80005c4 <monitor_check_cmd+0x298>)
 800038c:	4a8f      	ldr	r2, [pc, #572]	; (80005cc <monitor_check_cmd+0x2a0>)
 800038e:	21c8      	movs	r1, #200	; 0xc8
 8000390:	488b      	ldr	r0, [pc, #556]	; (80005c0 <monitor_check_cmd+0x294>)
 8000392:	f00c fd81 	bl	800ce98 <sniprintf>
			monitor_send_string(ans);
 8000396:	488a      	ldr	r0, [pc, #552]	; (80005c0 <monitor_check_cmd+0x294>)
 8000398:	f7ff ff9e 	bl	80002d8 <monitor_send_string>
}
 800039c:	e14b      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_SOFT_RESET) {
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b56      	cmp	r3, #86	; 0x56
 80003a6:	d102      	bne.n	80003ae <monitor_check_cmd+0x82>
			lcd_soft_reset();
 80003a8:	f000 fe1a 	bl	8000fe0 <lcd_soft_reset>
}
 80003ac:	e143      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3301      	adds	r3, #1
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	2b42      	cmp	r3, #66	; 0x42
 80003b6:	d103      	bne.n	80003c0 <monitor_check_cmd+0x94>
			enable_backlight(true);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 fe25 	bl	8001008 <enable_backlight>
}
 80003be:	e13a      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3301      	adds	r3, #1
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b46      	cmp	r3, #70	; 0x46
 80003c8:	d103      	bne.n	80003d2 <monitor_check_cmd+0xa6>
			enable_backlight(false);
 80003ca:	2000      	movs	r0, #0
 80003cc:	f000 fe1c 	bl	8001008 <enable_backlight>
}
 80003d0:	e131      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_BACKLIGHT_BRIGHTNESS) {
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3301      	adds	r3, #1
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2b41      	cmp	r3, #65	; 0x41
 80003da:	d106      	bne.n	80003ea <monitor_check_cmd+0xbe>
			set_backlight_brightness(cmd[2]);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3302      	adds	r3, #2
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 fe3a 	bl	800105c <set_backlight_brightness>
}
 80003e8:	e125      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3301      	adds	r3, #1
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b66      	cmp	r3, #102	; 0x66
 80003f2:	d103      	bne.n	80003fc <monitor_check_cmd+0xd0>
			inverse_text(true);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fca5 	bl	8000d44 <inverse_text>
}
 80003fa:	e11c      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b67      	cmp	r3, #103	; 0x67
 8000404:	d103      	bne.n	800040e <monitor_check_cmd+0xe2>
			inverse_text(false);
 8000406:	2000      	movs	r0, #0
 8000408:	f000 fc9c 	bl	8000d44 <inverse_text>
}
 800040c:	e113      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_CLEAR) {
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3301      	adds	r3, #1
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b58      	cmp	r3, #88	; 0x58
 8000416:	d102      	bne.n	800041e <monitor_check_cmd+0xf2>
			clear_display();
 8000418:	f000 fde8 	bl	8000fec <clear_display>
}
 800041c:	e10b      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	3301      	adds	r3, #1
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b70      	cmp	r3, #112	; 0x70
 8000426:	d10a      	bne.n	800043e <monitor_check_cmd+0x112>
			put_pixel(cmd[3], cmd[2]);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	3303      	adds	r3, #3
 800042c:	781a      	ldrb	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3302      	adds	r3, #2
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4619      	mov	r1, r3
 8000436:	4610      	mov	r0, r2
 8000438:	f000 fd4c 	bl	8000ed4 <put_pixel>
}
 800043c:	e0fb      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3301      	adds	r3, #1
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b71      	cmp	r3, #113	; 0x71
 8000446:	d10a      	bne.n	800045e <monitor_check_cmd+0x132>
			erase_pixel(cmd[3], cmd[2]);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3303      	adds	r3, #3
 800044c:	781a      	ldrb	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3302      	adds	r3, #2
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	4610      	mov	r0, r2
 8000458:	f000 fd5a 	bl	8000f10 <erase_pixel>
}
 800045c:	e0eb      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_PUT_BYTE) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	3301      	adds	r3, #1
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b3e      	cmp	r3, #62	; 0x3e
 8000466:	d10c      	bne.n	8000482 <monitor_check_cmd+0x156>
			put_byte(cmd[2],cmd[3], cmd[4]);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3302      	adds	r3, #2
 800046c:	7818      	ldrb	r0, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3303      	adds	r3, #3
 8000472:	7819      	ldrb	r1, [r3, #0]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3304      	adds	r3, #4
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	461a      	mov	r2, r3
 800047c:	f000 fd66 	bl	8000f4c <put_byte>
}
 8000480:	e0d9      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_DEFINE_CUSTOM_CHARACTER) {
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	3301      	adds	r3, #1
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b4e      	cmp	r3, #78	; 0x4e
 800048a:	d103      	bne.n	8000494 <monitor_check_cmd+0x168>
					define_custom_character(cmd);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f000 fc7f 	bl	8000d90 <define_custom_character>
}
 8000492:	e0d0      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3301      	adds	r3, #1
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b43      	cmp	r3, #67	; 0x43
 800049c:	d103      	bne.n	80004a6 <monitor_check_cmd+0x17a>
			auto_line_wrap(true);
 800049e:	2001      	movs	r0, #1
 80004a0:	f000 fb38 	bl	8000b14 <auto_line_wrap>
}
 80004a4:	e0c7      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3301      	adds	r3, #1
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b44      	cmp	r3, #68	; 0x44
 80004ae:	d103      	bne.n	80004b8 <monitor_check_cmd+0x18c>
			auto_line_wrap(false);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fb2f 	bl	8000b14 <auto_line_wrap>
}
 80004b6:	e0be      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_SET_INSERT) {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3301      	adds	r3, #1
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b47      	cmp	r3, #71	; 0x47
 80004c0:	d10a      	bne.n	80004d8 <monitor_check_cmd+0x1ac>
			text_insertion_point(cmd[2], cmd[3]);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3302      	adds	r3, #2
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3303      	adds	r3, #3
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	4619      	mov	r1, r3
 80004d0:	4610      	mov	r0, r2
 80004d2:	f000 fb2f 	bl	8000b34 <text_insertion_point>
}
 80004d6:	e0ae      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_HOME_INSERT) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3301      	adds	r3, #1
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b48      	cmp	r3, #72	; 0x48
 80004e0:	d104      	bne.n	80004ec <monitor_check_cmd+0x1c0>
			text_insertion_point(0, 0);
 80004e2:	2100      	movs	r1, #0
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fb25 	bl	8000b34 <text_insertion_point>
}
 80004ea:	e0a4      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_READ_GPI) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b65      	cmp	r3, #101	; 0x65
 80004f4:	d115      	bne.n	8000522 <monitor_check_cmd+0x1f6>
			if (cmd[2] == '0') {
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3302      	adds	r3, #2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b30      	cmp	r3, #48	; 0x30
 80004fe:	f040 809a 	bne.w	8000636 <monitor_check_cmd+0x30a>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000502:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <monitor_check_cmd+0x2a4>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
						ddp[1]);
 8000508:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <monitor_check_cmd+0x2a4>)
 800050a:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	4613      	mov	r3, r2
 8000510:	4a30      	ldr	r2, [pc, #192]	; (80005d4 <monitor_check_cmd+0x2a8>)
 8000512:	21c8      	movs	r1, #200	; 0xc8
 8000514:	482a      	ldr	r0, [pc, #168]	; (80005c0 <monitor_check_cmd+0x294>)
 8000516:	f00c fcbf 	bl	800ce98 <sniprintf>
				monitor_send_string(ans);
 800051a:	4829      	ldr	r0, [pc, #164]	; (80005c0 <monitor_check_cmd+0x294>)
 800051c:	f7ff fedc 	bl	80002d8 <monitor_send_string>
}
 8000520:	e089      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b69      	cmp	r3, #105	; 0x69
 800052a:	d102      	bne.n	8000532 <monitor_check_cmd+0x206>
			disp_splash();
 800052c:	f000 fdd2 	bl	80010d4 <disp_splash>
}
 8000530:	e081      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3301      	adds	r3, #1
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b76      	cmp	r3, #118	; 0x76
 800053a:	d103      	bne.n	8000544 <monitor_check_cmd+0x218>
			def_v_bar_thickness(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f000 fc11 	bl	8000d64 <def_v_bar_thickness>
}
 8000542:	e078      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b73      	cmp	r3, #115	; 0x73
 800054c:	d103      	bne.n	8000556 <monitor_check_cmd+0x22a>
			def_v_bar_thickness(0);
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fc08 	bl	8000d64 <def_v_bar_thickness>
}
 8000554:	e06f      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3301      	adds	r3, #1
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b3d      	cmp	r3, #61	; 0x3d
 800055e:	d10a      	bne.n	8000576 <monitor_check_cmd+0x24a>
			draw_un_v_bar_graph(cmd[2], cmd[3], false);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3302      	adds	r3, #2
 8000564:	7818      	ldrb	r0, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3303      	adds	r3, #3
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2200      	movs	r2, #0
 800056e:	4619      	mov	r1, r3
 8000570:	f000 fc38 	bl	8000de4 <draw_un_v_bar_graph>
}
 8000574:	e05f      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_ERASE_VERTICAL_BAR_GRAPH ) {
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3301      	adds	r3, #1
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b2d      	cmp	r3, #45	; 0x2d
 800057e:	d10a      	bne.n	8000596 <monitor_check_cmd+0x26a>
			draw_un_v_bar_graph(cmd[2], cmd[3], true);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3302      	adds	r3, #2
 8000584:	7818      	ldrb	r0, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	3303      	adds	r3, #3
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	f000 fc28 	bl	8000de4 <draw_un_v_bar_graph>
}
 8000594:	e04f      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_UNDERLINE_CURSOR_ON) {
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3301      	adds	r3, #1
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b4a      	cmp	r3, #74	; 0x4a
 800059e:	d11b      	bne.n	80005d8 <monitor_check_cmd+0x2ac>
			put_Ucursor(true,cmd[2], cmd[3],0);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3302      	adds	r3, #2
 80005a4:	7819      	ldrb	r1, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3303      	adds	r3, #3
 80005aa:	781a      	ldrb	r2, [r3, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 faec 	bl	8000b8c <put_Ucursor>
}
 80005b4:	e03f      	b.n	8000636 <monitor_check_cmd+0x30a>
 80005b6:	bf00      	nop
 80005b8:	0800d7fc 	.word	0x0800d7fc
 80005bc:	0800d804 	.word	0x0800d804
 80005c0:	20000368 	.word	0x20000368
 80005c4:	0800d83c 	.word	0x0800d83c
 80005c8:	0800d840 	.word	0x0800d840
 80005cc:	0800d858 	.word	0x0800d858
 80005d0:	20000000 	.word	0x20000000
 80005d4:	0800d86c 	.word	0x0800d86c
		else if (cmd[1] == LCD_UNDERLINE_CURSOR_OFF) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3301      	adds	r3, #1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b4b      	cmp	r3, #75	; 0x4b
 80005e0:	d10a      	bne.n	80005f8 <monitor_check_cmd+0x2cc>
			put_Ucursor(false,cmd[2], cmd[3],0);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	3302      	adds	r3, #2
 80005e6:	7819      	ldrb	r1, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3303      	adds	r3, #3
 80005ec:	781a      	ldrb	r2, [r3, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 facb 	bl	8000b8c <put_Ucursor>
}
 80005f6:	e01e      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_MOVE_CURSOR_LEFT ) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3301      	adds	r3, #1
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b4c      	cmp	r3, #76	; 0x4c
 8000600:	d10a      	bne.n	8000618 <monitor_check_cmd+0x2ec>
			put_Ucursor(true,cmd[2], cmd[3],'L');
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	3302      	adds	r3, #2
 8000606:	7819      	ldrb	r1, [r3, #0]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3303      	adds	r3, #3
 800060c:	781a      	ldrb	r2, [r3, #0]
 800060e:	234c      	movs	r3, #76	; 0x4c
 8000610:	2001      	movs	r0, #1
 8000612:	f000 fabb 	bl	8000b8c <put_Ucursor>
}
 8000616:	e00e      	b.n	8000636 <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_MOVE_CURSOR_RIGHT ) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b4d      	cmp	r3, #77	; 0x4d
 8000620:	d109      	bne.n	8000636 <monitor_check_cmd+0x30a>
			put_Ucursor(true,cmd[2], cmd[3],'R');
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3302      	adds	r3, #2
 8000626:	7819      	ldrb	r1, [r3, #0]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3303      	adds	r3, #3
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	2352      	movs	r3, #82	; 0x52
 8000630:	2001      	movs	r0, #1
 8000632:	f000 faab 	bl	8000b8c <put_Ucursor>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop

08000640 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]

	memcpy(cmd + size, buf, len);
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <app_usb_cbk+0x44>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <app_usb_cbk+0x48>)
 8000650:	4413      	add	r3, r2
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	6879      	ldr	r1, [r7, #4]
 8000656:	4618      	mov	r0, r3
 8000658:	f00c fc08 	bl	800ce6c <memcpy>
	size += len;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <app_usb_cbk+0x44>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <app_usb_cbk+0x44>)
 8000666:	6013      	str	r3, [r2, #0]

	if (size >= CMD_BUF_SIZE) {
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <app_usb_cbk+0x44>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2bc7      	cmp	r3, #199	; 0xc7
 800066e:	d902      	bls.n	8000676 <app_usb_cbk+0x36>
		new_cmd = true;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <app_usb_cbk+0x4c>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <app_usb_cbk+0x50>)
 8000678:	f006 fdde 	bl	8007238 <HAL_TIM_Base_Start_IT>

}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200003c4 	.word	0x200003c4
 8000688:	200002a0 	.word	0x200002a0
 800068c:	200003c8 	.word	0x200003c8
 8000690:	200004f0 	.word	0x200004f0

08000694 <monitor_interrupt>:

void monitor_interrupt(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	if (new_cmd) {
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <monitor_interrupt+0x1b8>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	f000 80d0 	beq.w	8000844 <monitor_interrupt+0x1b0>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 80006a8:	4b69      	ldr	r3, [pc, #420]	; (8000850 <monitor_interrupt+0x1bc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 80006ae:	2300      	movs	r3, #0
 80006b0:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 80006b2:	2300      	movs	r3, #0
 80006b4:	70fb      	strb	r3, [r7, #3]

//		o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
//		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
//		 começa o inicializador

		for (offset = 0; offset < size; offset++) {
 80006b6:	2300      	movs	r3, #0
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	e0a6      	b.n	800080a <monitor_interrupt+0x176>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD && *(cmd + offset + 1) != 20) {
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4a65      	ldr	r2, [pc, #404]	; (8000854 <monitor_interrupt+0x1c0>)
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2bfd      	cmp	r3, #253	; 0xfd
 80006c6:	d110      	bne.n	80006ea <monitor_interrupt+0x56>
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a61      	ldr	r2, [pc, #388]	; (8000854 <monitor_interrupt+0x1c0>)
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2bfe      	cmp	r3, #254	; 0xfe
 80006d4:	d009      	beq.n	80006ea <monitor_interrupt+0x56>
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a5e      	ldr	r2, [pc, #376]	; (8000854 <monitor_interrupt+0x1c0>)
 80006dc:	4413      	add	r3, r2
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b14      	cmp	r3, #20
 80006e2:	d002      	beq.n	80006ea <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	3301      	adds	r3, #1
 80006e8:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD && *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00c      	beq.n	800070a <monitor_interrupt+0x76>
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4a58      	ldr	r2, [pc, #352]	; (8000854 <monitor_interrupt+0x1c0>)
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2bfe      	cmp	r3, #254	; 0xfe
 80006fa:	d106      	bne.n	800070a <monitor_interrupt+0x76>
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a54      	ldr	r2, [pc, #336]	; (8000854 <monitor_interrupt+0x1c0>)
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2bfd      	cmp	r3, #253	; 0xfd
 8000708:	d104      	bne.n	8000714 <monitor_interrupt+0x80>
 800070a:	79fa      	ldrb	r2, [r7, #7]
 800070c:	4b50      	ldr	r3, [pc, #320]	; (8000850 <monitor_interrupt+0x1bc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	d103      	bne.n	800071c <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o fim de outro
				printable = true;
 8000714:	2301      	movs	r3, #1
 8000716:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	717b      	strb	r3, [r7, #5]
			}
			if(offset+1 == size && bgn_print>end_print  || offset+1 == size &&bgn_print< end_print){
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	3301      	adds	r3, #1
 8000720:	4a4b      	ldr	r2, [pc, #300]	; (8000850 <monitor_interrupt+0x1bc>)
 8000722:	6812      	ldr	r2, [r2, #0]
 8000724:	4293      	cmp	r3, r2
 8000726:	d103      	bne.n	8000730 <monitor_interrupt+0x9c>
 8000728:	79ba      	ldrb	r2, [r7, #6]
 800072a:	797b      	ldrb	r3, [r7, #5]
 800072c:	429a      	cmp	r2, r3
 800072e:	d809      	bhi.n	8000744 <monitor_interrupt+0xb0>
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	3301      	adds	r3, #1
 8000734:	4a46      	ldr	r2, [pc, #280]	; (8000850 <monitor_interrupt+0x1bc>)
 8000736:	6812      	ldr	r2, [r2, #0]
 8000738:	4293      	cmp	r3, r2
 800073a:	d108      	bne.n	800074e <monitor_interrupt+0xba>
 800073c:	79ba      	ldrb	r2, [r7, #6]
 800073e:	797b      	ldrb	r3, [r7, #5]
 8000740:	429a      	cmp	r2, r3
 8000742:	d204      	bcs.n	800074e <monitor_interrupt+0xba>
				printable = true;
 8000744:	2301      	movs	r3, #1
 8000746:	70fb      	strb	r3, [r7, #3]
				end_print = offset+1;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3301      	adds	r3, #1
 800074c:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 800074e:	78fb      	ldrb	r3, [r7, #3]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d022      	beq.n	800079a <monitor_interrupt+0x106>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	4a3f      	ldr	r2, [pc, #252]	; (8000854 <monitor_interrupt+0x1c0>)
 8000758:	1899      	adds	r1, r3, r2
 800075a:	797a      	ldrb	r2, [r7, #5]
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	461a      	mov	r2, r3
 8000762:	483d      	ldr	r0, [pc, #244]	; (8000858 <monitor_interrupt+0x1c4>)
 8000764:	f00c fbe0 	bl	800cf28 <strncpy>
				monitor_send_string(ans);
 8000768:	483b      	ldr	r0, [pc, #236]	; (8000858 <monitor_interrupt+0x1c4>)
 800076a:	f7ff fdb5 	bl	80002d8 <monitor_send_string>
//				CDC_Transmit_FS(ans, end_print - bgn_print);
				lcd_print(ans);
 800076e:	483a      	ldr	r0, [pc, #232]	; (8000858 <monitor_interrupt+0x1c4>)
 8000770:	f000 fe04 	bl	800137c <lcd_print>
				memset(ans, 0, ANS_BUF_SIZE);
 8000774:	225a      	movs	r2, #90	; 0x5a
 8000776:	2100      	movs	r1, #0
 8000778:	4837      	ldr	r0, [pc, #220]	; (8000858 <monitor_interrupt+0x1c4>)
 800077a:	f00c fb85 	bl	800ce88 <memset>
				printable = !printable;
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	2b00      	cmp	r3, #0
 8000782:	bf14      	ite	ne
 8000784:	2301      	movne	r3, #1
 8000786:	2300      	moveq	r3, #0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	f083 0301 	eor.w	r3, r3, #1
 800078e:	b2db      	uxtb	r3, r3
 8000790:	70fb      	strb	r3, [r7, #3]
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	70fb      	strb	r3, [r7, #3]
			}

			if (*(cmd + offset) == LCD_CMD) {
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	4a2d      	ldr	r2, [pc, #180]	; (8000854 <monitor_interrupt+0x1c0>)
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2bfe      	cmp	r3, #254	; 0xfe
 80007a4:	d117      	bne.n	80007d6 <monitor_interrupt+0x142>
				monitor_check_cmd((char*) cmd + offset, size);
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <monitor_interrupt+0x1c0>)
 80007aa:	4413      	add	r3, r2
 80007ac:	4a28      	ldr	r2, [pc, #160]	; (8000850 <monitor_interrupt+0x1bc>)
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fdba 	bl	800032c <monitor_check_cmd>
				is_cmd = !is_cmd;
 80007b8:	793b      	ldrb	r3, [r7, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bf14      	ite	ne
 80007be:	2301      	movne	r3, #1
 80007c0:	2300      	moveq	r3, #0
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f083 0301 	eor.w	r3, r3, #1
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	713b      	strb	r3, [r7, #4]
 80007cc:	793b      	ldrb	r3, [r7, #4]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	713b      	strb	r3, [r7, #4]
 80007d4:	e013      	b.n	80007fe <monitor_interrupt+0x16a>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <monitor_interrupt+0x1c0>)
 80007da:	4413      	add	r3, r2
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2bfd      	cmp	r3, #253	; 0xfd
 80007e0:	d10d      	bne.n	80007fe <monitor_interrupt+0x16a>
				is_cmd = !is_cmd;
 80007e2:	793b      	ldrb	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	bf14      	ite	ne
 80007e8:	2301      	movne	r3, #1
 80007ea:	2300      	moveq	r3, #0
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f083 0301 	eor.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	713b      	strb	r3, [r7, #4]
 80007f6:	793b      	ldrb	r3, [r7, #4]
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	713b      	strb	r3, [r7, #4]
			}
			if(bgn_print>end_print && offset+1 > size){
 80007fe:	79ba      	ldrb	r2, [r7, #6]
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	429a      	cmp	r2, r3
		for (offset = 0; offset < size; offset++) {
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	3301      	adds	r3, #1
 8000808:	71fb      	strb	r3, [r7, #7]
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <monitor_interrupt+0x1bc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	f4ff af53 	bcc.w	80006bc <monitor_interrupt+0x28>

			}
		}
		size = 0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <monitor_interrupt+0x1bc>)
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 800081c:	22c8      	movs	r2, #200	; 0xc8
 800081e:	2100      	movs	r1, #0
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <monitor_interrupt+0x1c0>)
 8000822:	f00c fb31 	bl	800ce88 <memset>
		new_cmd = !new_cmd;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <monitor_interrupt+0x1b8>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	bf14      	ite	ne
 800082e:	2301      	movne	r3, #1
 8000830:	2300      	moveq	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	f083 0301 	eor.w	r3, r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <monitor_interrupt+0x1b8>)
 8000842:	701a      	strb	r2, [r3, #0]
	}
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200003c8 	.word	0x200003c8
 8000850:	200003c4 	.word	0x200003c4
 8000854:	200002a0 	.word	0x200002a0
 8000858:	20000368 	.word	0x20000368

0800085c <monitor_begin>:

void monitor_begin(void) {
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 8000860:	4b04      	ldr	r3, [pc, #16]	; (8000874 <monitor_begin+0x18>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <monitor_begin+0x1c>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	200003c4 	.word	0x200003c4
 8000878:	200003c8 	.word	0x200003c8

0800087c <exp>:

/**@brief	Exponentiate [value] , at the [pot] level
 * eu redefini a funcão de exponenciação manualmente por não poder importar a biblioteca matematica inteira apenas por uma função :D
*
*/
uint16_t exp(uint16_t val,uint16_t pot ){
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	80fb      	strh	r3, [r7, #6]
 8000888:	4613      	mov	r3, r2
 800088a:	80bb      	strh	r3, [r7, #4]
    uint16_t ans = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	81fb      	strh	r3, [r7, #14]
    while(pot){
 8000890:	e007      	b.n	80008a2 <exp+0x26>
        ans *=val;
 8000892:	89fb      	ldrh	r3, [r7, #14]
 8000894:	88fa      	ldrh	r2, [r7, #6]
 8000896:	fb02 f303 	mul.w	r3, r2, r3
 800089a:	81fb      	strh	r3, [r7, #14]
        pot--;
 800089c:	88bb      	ldrh	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	80bb      	strh	r3, [r7, #4]
    while(pot){
 80008a2:	88bb      	ldrh	r3, [r7, #4]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1f4      	bne.n	8000892 <exp+0x16>
    }
    return ans;
 80008a8:	89fb      	ldrh	r3, [r7, #14]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <decode_convert_expand_encode>:
/**@brief	Decode Convert  Expand Rotate Encode
 * Esta função decodifica um caracter em hexadecimal dado, amplifica ele para o tamanho da memoria do novo display, rotaciona ele e recodifica
 * de maneira que no banco de dados eu só vou salvar o caractere definido pelo usuario em hexadecimal e o indice
*
*/
void decode_convert_expand_encode(uint8_t *hex_char){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
uint8_t mat[N][N]= {0};
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2240      	movs	r2, #64	; 0x40
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f00c fadf 	bl	800ce88 <memset>
uint8_t i,j,k, hex, temp;


//decode_expand
    for(i=3; *(hex_char+i) != 0xFD ; i++){
 80008ca:	2303      	movs	r3, #3
 80008cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80008d0:	e02e      	b.n	8000930 <decode_convert_expand_encode+0x7c>
        hex = *(hex_char+i);
 80008d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

        for(j=7;j>=0 && j<8;j--)
 80008e0:	2307      	movs	r3, #7
 80008e2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80008e6:	e01a      	b.n	800091e <decode_convert_expand_encode+0x6a>
        {
            mat[i-3][j] =hex%2;
 80008e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008ec:	1eda      	subs	r2, r3, #3
 80008ee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80008f2:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 80008f6:	f001 0101 	and.w	r1, r1, #1
 80008fa:	b2c9      	uxtb	r1, r1
 80008fc:	00d2      	lsls	r2, r2, #3
 80008fe:	3250      	adds	r2, #80	; 0x50
 8000900:	443a      	add	r2, r7
 8000902:	4413      	add	r3, r2
 8000904:	3b48      	subs	r3, #72	; 0x48
 8000906:	460a      	mov	r2, r1
 8000908:	701a      	strb	r2, [r3, #0]
            hex=hex/2;
 800090a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800090e:	085b      	lsrs	r3, r3, #1
 8000910:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        for(j=7;j>=0 && j<8;j--)
 8000914:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000918:	3b01      	subs	r3, #1
 800091a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800091e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000922:	2b07      	cmp	r3, #7
 8000924:	d9e0      	bls.n	80008e8 <decode_convert_expand_encode+0x34>
    for(i=3; *(hex_char+i) != 0xFD ; i++){
 8000926:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800092a:	3301      	adds	r3, #1
 800092c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000930:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2bfd      	cmp	r3, #253	; 0xfd
 800093c:	d1c9      	bne.n	80008d2 <decode_convert_expand_encode+0x1e>
        }
    }
//rotate
        // Consider all squares one by one
	for (i = 0; i < N / 2; i++) {
 800093e:	2300      	movs	r3, #0
 8000940:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000944:	e07d      	b.n	8000a42 <decode_convert_expand_encode+0x18e>
		// Consider elements in group
		// of 4 in current square
		for (j = i; j < N - i - 1; j++) {
 8000946:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800094a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800094e:	e06b      	b.n	8000a28 <decode_convert_expand_encode+0x174>
			// Store current cell in
			// temp variable
			temp = mat[i][j];
 8000950:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000954:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	3250      	adds	r2, #80	; 0x50
 800095c:	443a      	add	r2, r7
 800095e:	4413      	add	r3, r2
 8000960:	3b48      	subs	r3, #72	; 0x48
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			// Move values from right to top
			mat[i][j] = mat[j][N - 1 - i];
 8000968:	f897 004e 	ldrb.w	r0, [r7, #78]	; 0x4e
 800096c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000970:	f1c3 0107 	rsb	r1, r3, #7
 8000974:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000978:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800097c:	00c0      	lsls	r0, r0, #3
 800097e:	3050      	adds	r0, #80	; 0x50
 8000980:	4438      	add	r0, r7
 8000982:	4401      	add	r1, r0
 8000984:	3948      	subs	r1, #72	; 0x48
 8000986:	7809      	ldrb	r1, [r1, #0]
 8000988:	00d2      	lsls	r2, r2, #3
 800098a:	3250      	adds	r2, #80	; 0x50
 800098c:	443a      	add	r2, r7
 800098e:	4413      	add	r3, r2
 8000990:	3b48      	subs	r3, #72	; 0x48
 8000992:	460a      	mov	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]

			// Move values from bottom to right
			mat[j][N - 1 - i]
				= mat[N - 1 - i][N - 1 - j];
 8000996:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800099a:	f1c3 0007 	rsb	r0, r3, #7
 800099e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009a2:	f1c3 0107 	rsb	r1, r3, #7
			mat[j][N - 1 - i]
 80009a6:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80009aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
				= mat[N - 1 - i][N - 1 - j];
 80009b2:	00c0      	lsls	r0, r0, #3
 80009b4:	3050      	adds	r0, #80	; 0x50
 80009b6:	4438      	add	r0, r7
 80009b8:	4401      	add	r1, r0
 80009ba:	3948      	subs	r1, #72	; 0x48
 80009bc:	7809      	ldrb	r1, [r1, #0]
 80009be:	00d2      	lsls	r2, r2, #3
 80009c0:	3250      	adds	r2, #80	; 0x50
 80009c2:	443a      	add	r2, r7
 80009c4:	4413      	add	r3, r2
 80009c6:	3b48      	subs	r3, #72	; 0x48
 80009c8:	460a      	mov	r2, r1
 80009ca:	701a      	strb	r2, [r3, #0]

			// Move values from left to bottom
			mat[N - 1 - i][N - 1 - j]
				= mat[N - 1 - j][i];
 80009cc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009d0:	f1c3 0007 	rsb	r0, r3, #7
 80009d4:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
			mat[N - 1 - i][N - 1 - j]
 80009d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009dc:	f1c3 0207 	rsb	r2, r3, #7
 80009e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009e4:	f1c3 0307 	rsb	r3, r3, #7
				= mat[N - 1 - j][i];
 80009e8:	00c0      	lsls	r0, r0, #3
 80009ea:	3050      	adds	r0, #80	; 0x50
 80009ec:	4438      	add	r0, r7
 80009ee:	4401      	add	r1, r0
 80009f0:	3948      	subs	r1, #72	; 0x48
 80009f2:	7809      	ldrb	r1, [r1, #0]
 80009f4:	00d2      	lsls	r2, r2, #3
 80009f6:	3250      	adds	r2, #80	; 0x50
 80009f8:	443a      	add	r2, r7
 80009fa:	4413      	add	r3, r2
 80009fc:	3b48      	subs	r3, #72	; 0x48
 80009fe:	460a      	mov	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]

			// Assign temp to left
			mat[N - 1 - j][i] = temp;
 8000a02:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a06:	f1c3 0207 	rsb	r2, r3, #7
 8000a0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a0e:	00d2      	lsls	r2, r2, #3
 8000a10:	3250      	adds	r2, #80	; 0x50
 8000a12:	443a      	add	r2, r7
 8000a14:	4413      	add	r3, r2
 8000a16:	3b48      	subs	r3, #72	; 0x48
 8000a18:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000a1c:	701a      	strb	r2, [r3, #0]
		for (j = i; j < N - i - 1; j++) {
 8000a1e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a22:	3301      	adds	r3, #1
 8000a24:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000a28:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000a2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a30:	f1c3 0307 	rsb	r3, r3, #7
 8000a34:	429a      	cmp	r2, r3
 8000a36:	db8b      	blt.n	8000950 <decode_convert_expand_encode+0x9c>
	for (i = 0; i < N / 2; i++) {
 8000a38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	f67f af7d 	bls.w	8000946 <decode_convert_expand_encode+0x92>
		}
	}
//encode
    for(i=0,k=0;i<N;i++){
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a52:	2300      	movs	r3, #0
 8000a54:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000a58:	e047      	b.n	8000aea <decode_convert_expand_encode+0x236>
        temp=0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        for(j=0;j<N;j++){
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000a66:	e022      	b.n	8000aae <decode_convert_expand_encode+0x1fa>
            temp += exp(2,N-j) * mat[i][j];
 8000a68:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	f1c3 0308 	rsb	r3, r3, #8
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	4619      	mov	r1, r3
 8000a76:	2002      	movs	r0, #2
 8000a78:	f7ff ff00 	bl	800087c <exp>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000a84:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a88:	00d2      	lsls	r2, r2, #3
 8000a8a:	3250      	adds	r2, #80	; 0x50
 8000a8c:	443a      	add	r2, r7
 8000a8e:	4413      	add	r3, r2
 8000a90:	3b48      	subs	r3, #72	; 0x48
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	fb01 f303 	mul.w	r3, r1, r3
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a9e:	4413      	add	r3, r2
 8000aa0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        for(j=0;j<N;j++){
 8000aa4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000aae:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	d9d8      	bls.n	8000a68 <decode_convert_expand_encode+0x1b4>
        }
        //save on the database
        if(i>1 && k<CUSTOM_CHARACTER_SIZE){
 8000ab6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d910      	bls.n	8000ae0 <decode_convert_expand_encode+0x22c>
 8000abe:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ac2:	2b05      	cmp	r3, #5
 8000ac4:	d80c      	bhi.n	8000ae0 <decode_convert_expand_encode+0x22c>
        	hex_char[k+3] = temp;
 8000ac6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000aca:	3303      	adds	r3, #3
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	4413      	add	r3, r2
 8000ad0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000ad4:	701a      	strb	r2, [r3, #0]
        	k++;
 8000ad6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ada:	3301      	adds	r3, #1
 8000adc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    for(i=0,k=0;i<N;i++){
 8000ae0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000aea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000aee:	2b07      	cmp	r3, #7
 8000af0:	d9b3      	bls.n	8000a5a <decode_convert_expand_encode+0x1a6>
        }
    }
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3750      	adds	r7, #80	; 0x50
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <init_custom_character_db>:
*	inicializa o banco de caracteres com o que foi salvo na memoria do equipamento
*	por hora ele seta todos os valores salvos para zero mas pode um dia buscar na
*	memoria persistente pelos valores gravados
*
*/
void init_custom_character_db(void){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	memset(custom_character_db,0,sizeof(custom_character_db));
 8000b00:	2270      	movs	r2, #112	; 0x70
 8000b02:	2100      	movs	r1, #0
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <init_custom_character_db+0x14>)
 8000b06:	f00c f9bf 	bl	800ce88 <memset>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200003d0 	.word	0x200003d0

08000b14 <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 8000b1e:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <auto_line_wrap+0x1c>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	7013      	strb	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200003ca 	.word	0x200003ca

08000b34 <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	4613      	mov	r3, r2
 8000b42:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <text_insertion_point+0x4c>)
 8000b46:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	79fa      	ldrb	r2, [r7, #7]
 8000b4e:	fb02 f303 	mul.w	r3, r2, r3
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <text_insertion_point+0x50>)
 8000b56:	701a      	strb	r2, [r3, #0]
	cursor[1] = row
			* (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <text_insertion_point+0x4c>)
 8000b5a:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <text_insertion_point+0x54>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	1ad3      	subs	r3, r2, r3
	cursor[1] = row
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	79ba      	ldrb	r2, [r7, #6]
 8000b6a:	fb02 f303 	mul.w	r3, r2, r3
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <text_insertion_point+0x50>)
 8000b72:	705a      	strb	r2, [r3, #1]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2000020c 	.word	0x2000020c
 8000b84:	200003cc 	.word	0x200003cc
 8000b88:	20000005 	.word	0x20000005

08000b8c <put_Ucursor>:
 *	caso o usuario utiluze a função de apagar o cursor, sem antes telo escrito, o codigo vai de fato criar um cursor em uma posição lixo
 *	de memoria tanto para linha quanto para coluna
 */


void put_Ucursor(bool enable,uint8_t col, uint8_t row,uint8_t hoover) {
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	4604      	mov	r4, r0
 8000b94:	4608      	mov	r0, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71bb      	strb	r3, [r7, #6]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	717b      	strb	r3, [r7, #5]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	713b      	strb	r3, [r7, #4]
	static uint8_t ucursor[2];
	u8g2_SetDrawColor(&u8g2, 2);
 8000baa:	2102      	movs	r1, #2
 8000bac:	4863      	ldr	r0, [pc, #396]	; (8000d3c <put_Ucursor+0x1b0>)
 8000bae:	f002 fd0b 	bl	80035c8 <u8g2_SetDrawColor>
	if(enable){
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 80a7 	beq.w	8000d08 <put_Ucursor+0x17c>
		if(hoover){
 8000bba:	793b      	ldrb	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d07b      	beq.n	8000cb8 <put_Ucursor+0x12c>
			if(hoover == 'R'){
 8000bc0:	793b      	ldrb	r3, [r7, #4]
 8000bc2:	2b52      	cmp	r3, #82	; 0x52
 8000bc4:	d13b      	bne.n	8000c3e <put_Ucursor+0xb2>
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000bc6:	4b5e      	ldr	r3, [pc, #376]	; (8000d40 <put_Ucursor+0x1b4>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b299      	uxth	r1, r3
 8000bcc:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <put_Ucursor+0x1b4>)
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	4b5a      	ldr	r3, [pc, #360]	; (8000d3c <put_Ucursor+0x1b0>)
 8000bd4:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	2001      	movs	r0, #1
 8000bdc:	9000      	str	r0, [sp, #0]
 8000bde:	4857      	ldr	r0, [pc, #348]	; (8000d3c <put_Ucursor+0x1b0>)
 8000be0:	f001 fa34 	bl	800204c <u8g2_DrawFrame>
				ucursor[0] = (ucursor[0] + u8g2_GetMaxCharWidth(&u8g2)) >  u8g2_GetDisplayWidth(&u8g2) - u8g2_GetMaxCharWidth(&u8g2) ? 0 : ucursor[0] + u8g2_GetMaxCharWidth(&u8g2);
 8000be4:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <put_Ucursor+0x1b4>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b54      	ldr	r3, [pc, #336]	; (8000d3c <put_Ucursor+0x1b0>)
 8000bec:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000bf0:	441a      	add	r2, r3
 8000bf2:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <put_Ucursor+0x1b0>)
 8000bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4b50      	ldr	r3, [pc, #320]	; (8000d3c <put_Ucursor+0x1b0>)
 8000bfc:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dc08      	bgt.n	8000c18 <put_Ucursor+0x8c>
 8000c06:	4b4e      	ldr	r3, [pc, #312]	; (8000d40 <put_Ucursor+0x1b4>)
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	4b4c      	ldr	r3, [pc, #304]	; (8000d3c <put_Ucursor+0x1b0>)
 8000c0c:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4413      	add	r3, r2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	e000      	b.n	8000c1a <put_Ucursor+0x8e>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	4a49      	ldr	r2, [pc, #292]	; (8000d40 <put_Ucursor+0x1b4>)
 8000c1c:	7013      	strb	r3, [r2, #0]
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000c1e:	4b48      	ldr	r3, [pc, #288]	; (8000d40 <put_Ucursor+0x1b4>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b299      	uxth	r1, r3
 8000c24:	4b46      	ldr	r3, [pc, #280]	; (8000d40 <put_Ucursor+0x1b4>)
 8000c26:	785b      	ldrb	r3, [r3, #1]
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b44      	ldr	r3, [pc, #272]	; (8000d3c <put_Ucursor+0x1b0>)
 8000c2c:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	9000      	str	r0, [sp, #0]
 8000c36:	4841      	ldr	r0, [pc, #260]	; (8000d3c <put_Ucursor+0x1b0>)
 8000c38:	f001 fa08 	bl	800204c <u8g2_DrawFrame>
 8000c3c:	e073      	b.n	8000d26 <put_Ucursor+0x19a>
			}else{
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000c3e:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <put_Ucursor+0x1b4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b299      	uxth	r1, r3
 8000c44:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <put_Ucursor+0x1b4>)
 8000c46:	785b      	ldrb	r3, [r3, #1]
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b3c      	ldr	r3, [pc, #240]	; (8000d3c <put_Ucursor+0x1b0>)
 8000c4c:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	9000      	str	r0, [sp, #0]
 8000c56:	4839      	ldr	r0, [pc, #228]	; (8000d3c <put_Ucursor+0x1b0>)
 8000c58:	f001 f9f8 	bl	800204c <u8g2_DrawFrame>
				ucursor[0] = (ucursor[0] - u8g2_GetMaxCharWidth(&u8g2)) < 0 ? u8g2_GetDisplayWidth(&u8g2) - u8g2_GetMaxCharWidth(&u8g2) : ucursor[0] - u8g2_GetMaxCharWidth(&u8g2);
 8000c5c:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <put_Ucursor+0x1b4>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <put_Ucursor+0x1b0>)
 8000c64:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	da0a      	bge.n	8000c84 <put_Ucursor+0xf8>
 8000c6e:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <put_Ucursor+0x1b0>)
 8000c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b31      	ldr	r3, [pc, #196]	; (8000d3c <put_Ucursor+0x1b0>)
 8000c78:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	e007      	b.n	8000c94 <put_Ucursor+0x108>
 8000c84:	4b2e      	ldr	r3, [pc, #184]	; (8000d40 <put_Ucursor+0x1b4>)
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <put_Ucursor+0x1b0>)
 8000c8a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4a2a      	ldr	r2, [pc, #168]	; (8000d40 <put_Ucursor+0x1b4>)
 8000c96:	7013      	strb	r3, [r2, #0]
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <put_Ucursor+0x1b4>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <put_Ucursor+0x1b4>)
 8000ca0:	785b      	ldrb	r3, [r3, #1]
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <put_Ucursor+0x1b0>)
 8000ca6:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	9000      	str	r0, [sp, #0]
 8000cb0:	4822      	ldr	r0, [pc, #136]	; (8000d3c <put_Ucursor+0x1b0>)
 8000cb2:	f001 f9cb 	bl	800204c <u8g2_DrawFrame>
 8000cb6:	e036      	b.n	8000d26 <put_Ucursor+0x19a>
			}
		} else{
			ucursor[0] = col*u8g2_GetMaxCharWidth(&u8g2);
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <put_Ucursor+0x1b0>)
 8000cba:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	79ba      	ldrb	r2, [r7, #6]
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <put_Ucursor+0x1b4>)
 8000cca:	701a      	strb	r2, [r3, #0]
			ucursor[1] = (row+1)*u8g2_GetMaxCharWidth(&u8g2)+2;
 8000ccc:	797b      	ldrb	r3, [r7, #5]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <put_Ucursor+0x1b0>)
 8000cd4:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <put_Ucursor+0x1b4>)
 8000ce6:	705a      	strb	r2, [r3, #1]
			u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <put_Ucursor+0x1b4>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b299      	uxth	r1, r3
 8000cee:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <put_Ucursor+0x1b4>)
 8000cf0:	785b      	ldrb	r3, [r3, #1]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <put_Ucursor+0x1b0>)
 8000cf6:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	9000      	str	r0, [sp, #0]
 8000d00:	480e      	ldr	r0, [pc, #56]	; (8000d3c <put_Ucursor+0x1b0>)
 8000d02:	f001 f9a3 	bl	800204c <u8g2_DrawFrame>
 8000d06:	e00e      	b.n	8000d26 <put_Ucursor+0x19a>
		}
	}else{
		u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <put_Ucursor+0x1b4>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b299      	uxth	r1, r3
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <put_Ucursor+0x1b4>)
 8000d10:	785b      	ldrb	r3, [r3, #1]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <put_Ucursor+0x1b0>)
 8000d16:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	9000      	str	r0, [sp, #0]
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <put_Ucursor+0x1b0>)
 8000d22:	f001 f993 	bl	800204c <u8g2_DrawFrame>
	}
	u8g2_SendBuffer(&u8g2);
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <put_Ucursor+0x1b0>)
 8000d28:	f001 fa60 	bl	80021ec <u8g2_SendBuffer>
	u8g2_SetDrawColor(&u8g2, 1);
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <put_Ucursor+0x1b0>)
 8000d30:	f002 fc4a 	bl	80035c8 <u8g2_SetDrawColor>
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	2000020c 	.word	0x2000020c
 8000d40:	20000440 	.word	0x20000440

08000d44 <inverse_text>:
 */
void test_font(void) {
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}
void inverse_text(bool state) {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <inverse_text+0x1c>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	7013      	strb	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200003c9 	.word	0x200003c9

08000d64 <def_v_bar_thickness>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_v_bar_thickness(uint8_t thick){
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	if(thick){
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <def_v_bar_thickness+0x18>
		vertical_bar_width = 10;//5 no original
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <def_v_bar_thickness+0x28>)
 8000d76:	220a      	movs	r2, #10
 8000d78:	701a      	strb	r2, [r3, #0]
	}else{
		vertical_bar_width = 4;//2 no original
	}
}
 8000d7a:	e002      	b.n	8000d82 <def_v_bar_thickness+0x1e>
		vertical_bar_width = 4;//2 no original
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <def_v_bar_thickness+0x28>)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	701a      	strb	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000004 	.word	0x20000004

08000d90 <define_custom_character>:
 *	Os 6 bytes variam da seguinte forma:
 *	FE 4E [cc] [6bytes] FD
 *	254 104 [cc] [6bytes] 253
 *	254 `N` [cc] [6bytes] 253
 */
void define_custom_character(uint8_t *cmd){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
		decode_convert_expand_encode(cmd);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff fd8b 	bl	80008b4 <decode_convert_expand_encode>
		memcpy(custom_character_db[*(cmd+2)].custom_caracter,cmd+3,6);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3302      	adds	r3, #2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4613      	mov	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	1a9b      	subs	r3, r3, r2
 8000dac:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <define_custom_character+0x50>)
 8000dae:	1898      	adds	r0, r3, r2
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3303      	adds	r3, #3
 8000db4:	2206      	movs	r2, #6
 8000db6:	4619      	mov	r1, r3
 8000db8:	f00c f858 	bl	800ce6c <memcpy>
		custom_character_db[*(cmd+2)].custo_character_index = *(cmd+2);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7898      	ldrb	r0, [r3, #2]
 8000dc8:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <define_custom_character+0x50>)
 8000dca:	460b      	mov	r3, r1
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	1a5b      	subs	r3, r3, r1
 8000dd0:	4413      	add	r3, r2
 8000dd2:	3306      	adds	r3, #6
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	701a      	strb	r2, [r3, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200003d0 	.word	0x200003d0

08000de4 <draw_un_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_un_v_bar_graph(uint8_t col, uint8_t height, bool erase) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af02      	add	r7, sp, #8
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
 8000dee:	460b      	mov	r3, r1
 8000df0:	71bb      	strb	r3, [r7, #6]
 8000df2:	4613      	mov	r3, r2
 8000df4:	717b      	strb	r3, [r7, #5]
	static uint8_t vcursor, temp_height = 200 , temp_col=200;

	vcursor = col*u8g2_GetMaxCharWidth(&u8g2);
 8000df6:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000df8:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	fb02 f303 	mul.w	r3, r2, r3
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <draw_un_v_bar_graph+0xe0>)
 8000e08:	701a      	strb	r2, [r3, #0]
	height = u8g2_GetDisplayHeight(&u8g2) - height*2;
 8000e0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	79bb      	ldrb	r3, [r7, #6]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	71bb      	strb	r3, [r7, #6]



	if(!erase){
 8000e1c:	797b      	ldrb	r3, [r7, #5]
 8000e1e:	f083 0301 	eor.w	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d030      	beq.n	8000e8a <draw_un_v_bar_graph+0xa6>
		u8g2_SetDrawColor(&u8g2, 0);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4825      	ldr	r0, [pc, #148]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000e2c:	f002 fbcc 	bl	80035c8 <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, temp_col, temp_height, vertical_bar_width, u8g2_GetDisplayHeight(&u8g2));
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <draw_un_v_bar_graph+0xe4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b299      	uxth	r1, r3
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <draw_un_v_bar_graph+0xe8>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <draw_un_v_bar_graph+0xec>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b298      	uxth	r0, r3
 8000e42:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000e44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	481c      	ldr	r0, [pc, #112]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000e4e:	f001 f8c7 	bl	8001fe0 <u8g2_DrawBox>
		u8g2_SetDrawColor(&u8g2, 1);
 8000e52:	2101      	movs	r1, #1
 8000e54:	481a      	ldr	r0, [pc, #104]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000e56:	f002 fbb7 	bl	80035c8 <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, vcursor, height, vertical_bar_width, u8g2_GetDisplayHeight(&u8g2));
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <draw_un_v_bar_graph+0xe0>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b299      	uxth	r1, r3
 8000e60:	79bb      	ldrb	r3, [r7, #6]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <draw_un_v_bar_graph+0xec>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b298      	uxth	r0, r3
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	4603      	mov	r3, r0
 8000e74:	4812      	ldr	r0, [pc, #72]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000e76:	f001 f8b3 	bl	8001fe0 <u8g2_DrawBox>

		temp_height = height;
 8000e7a:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <draw_un_v_bar_graph+0xe8>)
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	7013      	strb	r3, [r2, #0]
		temp_col = vcursor;
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <draw_un_v_bar_graph+0xe0>)
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <draw_un_v_bar_graph+0xe4>)
 8000e86:	701a      	strb	r2, [r3, #0]
 8000e88:	e013      	b.n	8000eb2 <draw_un_v_bar_graph+0xce>

	}else{
		u8g2_SetDrawColor(&u8g2, 0);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000e8e:	f002 fb9b 	bl	80035c8 <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, vcursor, height, vertical_bar_width, u8g2_GetDisplayHeight(&u8g2));
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <draw_un_v_bar_graph+0xe0>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	b299      	uxth	r1, r3
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <draw_un_v_bar_graph+0xec>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b298      	uxth	r0, r3
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000eae:	f001 f897 	bl	8001fe0 <u8g2_DrawBox>
	}

	u8g2_SendBuffer(&u8g2);
 8000eb2:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <draw_un_v_bar_graph+0xdc>)
 8000eb4:	f001 f99a 	bl	80021ec <u8g2_SendBuffer>

}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000020c 	.word	0x2000020c
 8000ec4:	20000442 	.word	0x20000442
 8000ec8:	20000006 	.word	0x20000006
 8000ecc:	20000007 	.word	0x20000007
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	460a      	mov	r2, r1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4809      	ldr	r0, [pc, #36]	; (8000f0c <put_pixel+0x38>)
 8000ee8:	f002 fb6e 	bl	80035c8 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	79ba      	ldrb	r2, [r7, #6]
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <put_pixel+0x38>)
 8000ef8:	f002 fb33 	bl	8003562 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <put_pixel+0x38>)
 8000efe:	f001 f975 	bl	80021ec <u8g2_SendBuffer>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000020c 	.word	0x2000020c

08000f10 <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	4809      	ldr	r0, [pc, #36]	; (8000f48 <erase_pixel+0x38>)
 8000f24:	f002 fb50 	bl	80035c8 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	79ba      	ldrb	r2, [r7, #6]
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <erase_pixel+0x38>)
 8000f34:	f002 fb15 	bl	8003562 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <erase_pixel+0x38>)
 8000f3a:	f001 f957 	bl	80021ec <u8g2_SendBuffer>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000020c 	.word	0x2000020c

08000f4c <put_byte>:
 *	Desenha um byte na posição [x,row] onde x varia de 0-121 e y varia de 0-3
 *	FE 3E [x] [row] [byte] [4 dummy bytes] FD
 *	254 62 [x] [row] [byte] [4 dummy bytes]  253
 *	254 `>` [x] [row] [byte] [4 dummy bytes]  253
 */
void put_byte(uint8_t x, uint8_t row, uint8_t byte){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
 8000f56:	460b      	mov	r3, r1
 8000f58:	71bb      	strb	r3, [r7, #6]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	717b      	strb	r3, [r7, #5]
	char arr[8], i;
	memset(arr, 0, 8);
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2208      	movs	r2, #8
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00b ff8e 	bl	800ce88 <memset>
	for(i=0; byte > 0; i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	75fb      	strb	r3, [r7, #23]
 8000f70:	e00e      	b.n	8000f90 <put_byte+0x44>
	  {
	    arr[i] = byte%2;
 8000f72:	7dfb      	ldrb	r3, [r7, #23]
 8000f74:	797a      	ldrb	r2, [r7, #5]
 8000f76:	f002 0201 	and.w	r2, r2, #1
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	3318      	adds	r3, #24
 8000f7e:	443b      	add	r3, r7
 8000f80:	f803 2c0c 	strb.w	r2, [r3, #-12]
	    byte = byte/2;
 8000f84:	797b      	ldrb	r3, [r7, #5]
 8000f86:	085b      	lsrs	r3, r3, #1
 8000f88:	717b      	strb	r3, [r7, #5]
	for(i=0; byte > 0; i++)
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	75fb      	strb	r3, [r7, #23]
 8000f90:	797b      	ldrb	r3, [r7, #5]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1ed      	bne.n	8000f72 <put_byte+0x26>
	  }
	row = row * ((u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS);
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <put_byte+0x8c>)
 8000f98:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <put_byte+0x90>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	79ba      	ldrb	r2, [r7, #6]
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	71bb      	strb	r3, [r7, #6]
	u8g2_DrawXBM(&u8g2 , x, row, 1, 8, arr);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <put_byte+0x8c>)
 8000fc4:	f000 ffc9 	bl	8001f5a <u8g2_DrawXBM>
	u8g2_SendBuffer(&u8g2);
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <put_byte+0x8c>)
 8000fca:	f001 f90f 	bl	80021ec <u8g2_SendBuffer>

}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000020c 	.word	0x2000020c
 8000fdc:	20000005 	.word	0x20000005

08000fe0 <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8000fe4:	f003 fb31 	bl	800464a <HAL_NVIC_SystemReset>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	text_insertion_point(0, 0);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fd9e 	bl	8000b34 <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <clear_display+0x18>)
 8000ffa:	f001 faa5 	bl	8002548 <u8g2_ClearDisplay>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000020c 	.word	0x2000020c

08001008 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	if(enable){
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00e      	beq.n	8001036 <enable_backlight+0x2e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2110      	movs	r1, #16
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <enable_backlight+0x48>)
 800101e:	f003 fca9 	bl	8004974 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001022:	2100      	movs	r1, #0
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <enable_backlight+0x4c>)
 8001026:	f006 f9df 	bl	80073e8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT );
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <enable_backlight+0x50>)
 800102c:	881a      	ldrh	r2, [r3, #0]
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <enable_backlight+0x4c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	}
}
 8001034:	e008      	b.n	8001048 <enable_backlight+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2110      	movs	r1, #16
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <enable_backlight+0x48>)
 800103c:	f003 fc9a 	bl	8004974 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001040:	2100      	movs	r1, #0
 8001042:	4804      	ldr	r0, [pc, #16]	; (8001054 <enable_backlight+0x4c>)
 8001044:	f006 fa72 	bl	800752c <HAL_TIM_PWM_Stop>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40010800 	.word	0x40010800
 8001054:	200004a8 	.word	0x200004a8
 8001058:	20000002 	.word	0x20000002

0800105c <set_backlight_brightness>:
 * Define o brlho do backlight em um dos niveis pre-configurados, [bright] varia de 1-7
 *   	FE 41 [bright] FD
 *		254 64 [bright] 253
 *		254 'A' [bright] 253
 */
void set_backlight_brightness(uint8_t bright){
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	if(bright){
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d016      	beq.n	800109a <set_backlight_brightness+0x3e>
	LCD_BRIGHT = (7/bright)*59999;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2207      	movs	r2, #7
 8001070:	fb92 f3f3 	sdiv	r3, r2, r3
 8001074:	b29b      	uxth	r3, r3
 8001076:	461a      	mov	r2, r3
 8001078:	0152      	lsls	r2, r2, #5
 800107a:	1ad2      	subs	r2, r2, r3
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	441a      	add	r2, r3
 8001080:	4611      	mov	r1, r2
 8001082:	0109      	lsls	r1, r1, #4
 8001084:	1a8a      	subs	r2, r1, r2
 8001086:	0152      	lsls	r2, r2, #5
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <set_backlight_brightness+0x48>)
 800108e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT);
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <set_backlight_brightness+0x48>)
 8001092:	881a      	ldrh	r2, [r3, #0]
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <set_backlight_brightness+0x4c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000002 	.word	0x20000002
 80010a8:	200004a8 	.word	0x200004a8

080010ac <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast) * 9);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	461a      	mov	r2, r3
 80010ba:	00d2      	lsls	r2, r2, #3
 80010bc:	4413      	add	r3, r2
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <set_contrast+0x24>)
 80010c4:	f003 f83d 	bl	8004142 <u8x8_SetContrast>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000020c 	.word	0x2000020c

080010d4 <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <disp_splash+0x28>)
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	2318      	movs	r3, #24
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	23b4      	movs	r3, #180	; 0xb4
 80010e4:	2214      	movs	r2, #20
 80010e6:	2106      	movs	r1, #6
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <disp_splash+0x2c>)
 80010ea:	f000 ff36 	bl	8001f5a <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 80010ee:	4804      	ldr	r0, [pc, #16]	; (8001100 <disp_splash+0x2c>)
 80010f0:	f001 f87c 	bl	80021ec <u8g2_SendBuffer>

}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0800f000 	.word	0x0800f000
 8001100:	2000020c 	.word	0x2000020c

08001104 <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap_t *wrap, uint8_t *txt) {
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux;
 800110e:	2300      	movs	r3, #0
 8001110:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	737b      	strb	r3, [r7, #13]

	index = strlen(txt);
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f7ff f818 	bl	800014c <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	73bb      	strb	r3, [r7, #14]
	wrap->wrap_times = index / MAX_CHARS_ONSCREEN;
 8001120:	7bba      	ldrb	r2, [r7, #14]
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <str_warper+0x12c>)
 8001124:	fba3 1302 	umull	r1, r3, r3, r2
 8001128:	1ad2      	subs	r2, r2, r3
 800112a:	0852      	lsrs	r2, r2, #1
 800112c:	4413      	add	r3, r2
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	b2da      	uxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	if (wrap->wrap_times) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800113e:	2b00      	cmp	r3, #0
 8001140:	d071      	beq.n	8001226 <str_warper+0x122>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e068      	b.n	800121a <str_warper+0x116>
			if (aux < N_LINES) {
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d82f      	bhi.n	80011ae <str_warper+0xaa>

				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	461a      	mov	r2, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
						1 : 0;
 8001160:	2b20      	cmp	r3, #32
 8001162:	bf0c      	ite	eq
 8001164:	2301      	moveq	r3, #1
 8001166:	2300      	movne	r3, #0
 8001168:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 800116a:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	4613      	mov	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	4413      	add	r3, r2
 8001174:	00da      	lsls	r2, r3, #3
 8001176:	1ad2      	subs	r2, r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1898      	adds	r0, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)),
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	00da      	lsls	r2, r3, #3
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	461a      	mov	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 800118e:	2214      	movs	r2, #20
 8001190:	4619      	mov	r1, r3
 8001192:	f00b fec9 	bl	800cf28 <strncpy>
						MAX_CHARS_ONSCREEN - 1);
				wrap->wrap_str[aux][MAX_CHARS_ONSCREEN - 1] = '\0';
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	00da      	lsls	r2, r3, #3
 80011a2:	1ad2      	subs	r2, r2, r3
 80011a4:	188b      	adds	r3, r1, r2
 80011a6:	3314      	adds	r3, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e032      	b.n	8001214 <str_warper+0x110>
			} else {
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 80011ae:	7bfa      	ldrb	r2, [r7, #15]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	461a      	mov	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	4413      	add	r3, r2
 80011be:	781b      	ldrb	r3, [r3, #0]
						0 : 1;
 80011c0:	2b20      	cmp	r3, #32
 80011c2:	bf14      	ite	ne
 80011c4:	2301      	movne	r3, #1
 80011c6:	2300      	moveq	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 80011ca:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	00da      	lsls	r2, r3, #3
 80011d6:	1ad2      	subs	r2, r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	189c      	adds	r4, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)) + shift,
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	00da      	lsls	r2, r3, #3
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	7b7b      	ldrb	r3, [r7, #13]
 80011ec:	4413      	add	r3, r2
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	18d5      	adds	r5, r2, r3
						strlen(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))));
 80011f2:	7bfa      	ldrb	r2, [r7, #15]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	461a      	mov	r2, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8001202:	4618      	mov	r0, r3
 8001204:	f7fe ffa2 	bl	800014c <strlen>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4629      	mov	r1, r5
 800120e:	4620      	mov	r0, r4
 8001210:	f00b fe8a 	bl	800cf28 <strncpy>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	3301      	adds	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	429a      	cmp	r2, r3
 8001224:	d990      	bls.n	8001148 <str_warper+0x44>
			}
		}
	}
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bdb0      	pop	{r4, r5, r7, pc}
 800122e:	bf00      	nop
 8001230:	86186187 	.word	0x86186187

08001234 <Custom_Character_masker>:


bool Custom_Character_masker(uint8_t *txt,uint8_t * mask, uint8_t *v_cursor){
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	uint8_t index;
	bool enable;
	strncpy(mask,txt,MASK_BUFFER);
 8001240:	2269      	movs	r2, #105	; 0x69
 8001242:	68f9      	ldr	r1, [r7, #12]
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f00b fe6f 	bl	800cf28 <strncpy>
	*(mask+MASK_BUFFER-1) = '\0';
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3368      	adds	r3, #104	; 0x68
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]

	*(v_cursor+0) = cursor[0];
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <Custom_Character_masker+0x6c>)
 8001254:	781a      	ldrb	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	701a      	strb	r2, [r3, #0]
	*(v_cursor+1) = cursor[1];
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3301      	adds	r3, #1
 800125e:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <Custom_Character_masker+0x6c>)
 8001260:	7852      	ldrb	r2, [r2, #1]
 8001262:	701a      	strb	r2, [r3, #0]

	for(index=0;*(mask+index) != '\0';index++){
 8001264:	2300      	movs	r3, #0
 8001266:	75fb      	strb	r3, [r7, #23]
 8001268:	e00f      	b.n	800128a <Custom_Character_masker+0x56>
		if(*(mask+index)>=0 && *(mask+index)<=16){
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b10      	cmp	r3, #16
 8001274:	d806      	bhi.n	8001284 <Custom_Character_masker+0x50>
			*(mask+index) =32;
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	4413      	add	r3, r2
 800127c:	2220      	movs	r2, #32
 800127e:	701a      	strb	r2, [r3, #0]
			enable = true;
 8001280:	2301      	movs	r3, #1
 8001282:	75bb      	strb	r3, [r7, #22]
	for(index=0;*(mask+index) != '\0';index++){
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	3301      	adds	r3, #1
 8001288:	75fb      	strb	r3, [r7, #23]
 800128a:	7dfb      	ldrb	r3, [r7, #23]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1e9      	bne.n	800126a <Custom_Character_masker+0x36>
		}
	}
return enable;
 8001296:	7dbb      	ldrb	r3, [r7, #22]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200003cc 	.word	0x200003cc

080012a4 <clean_it>:
void clean_it(uint8_t *str){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	memset(str, 0, sizeof(str));
 80012ac:	2204      	movs	r2, #4
 80012ae:	2100      	movs	r1, #0
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f00b fde9 	bl	800ce88 <memset>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <custom_character_dealer>:
void custom_character_dealer( uint8_t *txt){
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6078      	str	r0, [r7, #4]
	uint8_t char_w = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	737b      	strb	r3, [r7, #13]
	uint8_t char_h = 6;
 80012cc:	2306      	movs	r3, #6
 80012ce:	733b      	strb	r3, [r7, #12]
	uint8_t offset,temp_x,temp_y,index;
	temp_x = cursor[0];
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <custom_character_dealer+0xb0>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	73bb      	strb	r3, [r7, #14]
	temp_y = cursor[1];
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <custom_character_dealer+0xb0>)
 80012d8:	785b      	ldrb	r3, [r3, #1]
 80012da:	72fb      	strb	r3, [r7, #11]
	for(offset = 0;*(txt+offset) !='\0';offset++){
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e03b      	b.n	800135a <custom_character_dealer+0x9a>
		index = *(txt+offset);
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	72bb      	strb	r3, [r7, #10]
		if((custom_character_db[index].custo_character_index)){
 80012ec:	7aba      	ldrb	r2, [r7, #10]
 80012ee:	4921      	ldr	r1, [pc, #132]	; (8001374 <custom_character_dealer+0xb4>)
 80012f0:	4613      	mov	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	3306      	adds	r3, #6
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d022      	beq.n	8001346 <custom_character_dealer+0x86>
				u8g2_DrawXBM(&u8g2 , temp_x, temp_y+4, char_w, char_h, custom_character_db[index].custom_caracter);
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	b298      	uxth	r0, r3
 8001304:	7afb      	ldrb	r3, [r7, #11]
 8001306:	b29b      	uxth	r3, r3
 8001308:	3304      	adds	r3, #4
 800130a:	b29c      	uxth	r4, r3
 800130c:	7b7b      	ldrb	r3, [r7, #13]
 800130e:	b29d      	uxth	r5, r3
 8001310:	7b3b      	ldrb	r3, [r7, #12]
 8001312:	b299      	uxth	r1, r3
 8001314:	7aba      	ldrb	r2, [r7, #10]
 8001316:	4613      	mov	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	1a9b      	subs	r3, r3, r2
 800131c:	4a15      	ldr	r2, [pc, #84]	; (8001374 <custom_character_dealer+0xb4>)
 800131e:	4413      	add	r3, r2
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	9100      	str	r1, [sp, #0]
 8001324:	462b      	mov	r3, r5
 8001326:	4622      	mov	r2, r4
 8001328:	4601      	mov	r1, r0
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <custom_character_dealer+0xb8>)
 800132c:	f000 fe15 	bl	8001f5a <u8g2_DrawXBM>
				u8g2_SendBuffer(&u8g2);
 8001330:	4811      	ldr	r0, [pc, #68]	; (8001378 <custom_character_dealer+0xb8>)
 8001332:	f000 ff5b 	bl	80021ec <u8g2_SendBuffer>
				temp_x += u8g2_GetMaxCharWidth(&u8g2);
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <custom_character_dealer+0xb8>)
 8001338:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800133c:	b2da      	uxtb	r2, r3
 800133e:	7bbb      	ldrb	r3, [r7, #14]
 8001340:	4413      	add	r3, r2
 8001342:	73bb      	strb	r3, [r7, #14]
 8001344:	e006      	b.n	8001354 <custom_character_dealer+0x94>
				//trocando os caracteres especiais por um espaço em branco pra bater com a conta de espaço em tela
				//é um custom caracter
				//ele foi definido pelo usuario
				//ele deve ser impresso
			}else{
				temp_x += u8g2_GetMaxCharWidth(&u8g2);
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <custom_character_dealer+0xb8>)
 8001348:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800134c:	b2da      	uxtb	r2, r3
 800134e:	7bbb      	ldrb	r3, [r7, #14]
 8001350:	4413      	add	r3, r2
 8001352:	73bb      	strb	r3, [r7, #14]
	for(offset = 0;*(txt+offset) !='\0';offset++){
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	3301      	adds	r3, #1
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1bd      	bne.n	80012e2 <custom_character_dealer+0x22>
			}
	}

}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bdb0      	pop	{r4, r5, r7, pc}
 8001370:	200003cc 	.word	0x200003cc
 8001374:	200003d0 	.word	0x200003d0
 8001378:	2000020c 	.word	0x2000020c

0800137c <lcd_print>:


void lcd_print(uint8_t *txt) {
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b0bf      	sub	sp, #252	; 0xfc
 8001380:	af04      	add	r7, sp, #16
 8001382:	6078      	str	r0, [r7, #4]
	txt_wrap_t wrap;
	uint8_t aux = 0, i;
 8001384:	2300      	movs	r3, #0
 8001386:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t v_cursor[2];
	uint8_t mask[MASK_BUFFER];
	bool enable;


	if (text_invertion) {
 800138a:	4b87      	ldr	r3, [pc, #540]	; (80015a8 <lcd_print+0x22c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d061      	beq.n	8001456 <lcd_print+0xda>
		if (text_wrap) {
 8001392:	4b86      	ldr	r3, [pc, #536]	; (80015ac <lcd_print+0x230>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d03a      	beq.n	8001410 <lcd_print+0x94>
			str_warper(&wrap, txt);
 800139a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff feaf 	bl	8001104 <str_warper>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80013ac:	e024      	b.n	80013f8 <lcd_print+0x7c>
				//cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));

				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80013ae:	4b80      	ldr	r3, [pc, #512]	; (80015b0 <lcd_print+0x234>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b298      	uxth	r0, r3
 80013b4:	4b7e      	ldr	r3, [pc, #504]	; (80015b0 <lcd_print+0x234>)
 80013b6:	785b      	ldrb	r3, [r3, #1]
 80013b8:	b29c      	uxth	r4, r3
						0, 0, 0, wrap.wrap_str[aux]);
 80013ba:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80013be:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	00da      	lsls	r2, r3, #3
 80013ca:	1ad2      	subs	r2, r2, r3
 80013cc:	188b      	adds	r3, r1, r2
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80013ce:	9303      	str	r3, [sp, #12]
 80013d0:	2300      	movs	r3, #0
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	2300      	movs	r3, #0
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	2300      	movs	r3, #0
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2320      	movs	r3, #32
 80013de:	4622      	mov	r2, r4
 80013e0:	4601      	mov	r1, r0
 80013e2:	4874      	ldr	r0, [pc, #464]	; (80015b4 <lcd_print+0x238>)
 80013e4:	f001 f85c 	bl	80024a0 <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 80013e8:	4872      	ldr	r0, [pc, #456]	; (80015b4 <lcd_print+0x238>)
 80013ea:	f000 feff 	bl	80021ec <u8g2_SendBuffer>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 80013ee:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80013f2:	3301      	adds	r3, #1
 80013f4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80013f8:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80013fc:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001400:	429a      	cmp	r2, r3
 8001402:	d9d4      	bls.n	80013ae <lcd_print+0x32>
				 } else {
				 cursor[0] += u8g2_GetStrWidth(&u8g2,
				 wrap.wrap_str[aux - 1]);
				 }*/
			}
			clean_it(wrap.wrap_str);
 8001404:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff4b 	bl	80012a4 <clean_it>
				custom_character_dealer(txt);
			}
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
		}
	}
}
 800140e:	e0c6      	b.n	800159e <lcd_print+0x222>
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 8001410:	4b67      	ldr	r3, [pc, #412]	; (80015b0 <lcd_print+0x234>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b299      	uxth	r1, r3
 8001416:	4b66      	ldr	r3, [pc, #408]	; (80015b0 <lcd_print+0x234>)
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	b29a      	uxth	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	9303      	str	r3, [sp, #12]
 8001420:	2300      	movs	r3, #0
 8001422:	9302      	str	r3, [sp, #8]
 8001424:	2300      	movs	r3, #0
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	2300      	movs	r3, #0
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2320      	movs	r3, #32
 800142e:	4861      	ldr	r0, [pc, #388]	; (80015b4 <lcd_print+0x238>)
 8001430:	f001 f836 	bl	80024a0 <u8g2_DrawButtonUTF8>
			u8g2_SendBuffer(&u8g2);
 8001434:	485f      	ldr	r0, [pc, #380]	; (80015b4 <lcd_print+0x238>)
 8001436:	f000 fed9 	bl	80021ec <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	485d      	ldr	r0, [pc, #372]	; (80015b4 <lcd_print+0x238>)
 800143e:	f001 ff3d 	bl	80032bc <u8g2_GetStrWidth>
 8001442:	4603      	mov	r3, r0
 8001444:	4619      	mov	r1, r3
 8001446:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <lcd_print+0x234>)
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	b2cb      	uxtb	r3, r1
 800144c:	4413      	add	r3, r2
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <lcd_print+0x234>)
 8001452:	701a      	strb	r2, [r3, #0]
}
 8001454:	e0a3      	b.n	800159e <lcd_print+0x222>
		if (text_wrap) {
 8001456:	4b55      	ldr	r3, [pc, #340]	; (80015ac <lcd_print+0x230>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d072      	beq.n	8001544 <lcd_print+0x1c8>
			str_warper(&wrap, txt);
 800145e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fe4d 	bl	8001104 <str_warper>
			if (wrap.wrap_times) {
 800146a:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800146e:	2b00      	cmp	r3, #0
 8001470:	d05a      	beq.n	8001528 <lcd_print+0x1ac>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8001472:	2300      	movs	r3, #0
 8001474:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001478:	e04a      	b.n	8001510 <lcd_print+0x194>
					clean_it(mask);
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff10 	bl	80012a4 <clean_it>
					enable = Custom_Character_masker(wrap.wrap_str[aux],mask,v_cursor);
 8001484:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001488:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	00da      	lsls	r2, r3, #3
 8001494:	1ad2      	subs	r2, r2, r3
 8001496:	188b      	adds	r3, r1, r2
 8001498:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800149c:	f107 010c 	add.w	r1, r7, #12
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fec7 	bl	8001234 <Custom_Character_masker>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					u8g2_DrawUTF8(&u8g2, v_cursor[0], v_cursor[1], mask);
 80014ac:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80014b0:	b299      	uxth	r1, r3
 80014b2:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	483d      	ldr	r0, [pc, #244]	; (80015b4 <lcd_print+0x238>)
 80014be:	f001 fdc1 	bl	8003044 <u8g2_DrawUTF8>
					u8g2_SendBuffer(&u8g2);
 80014c2:	483c      	ldr	r0, [pc, #240]	; (80015b4 <lcd_print+0x238>)
 80014c4:	f000 fe92 	bl	80021ec <u8g2_SendBuffer>
					if(enable){
 80014c8:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00c      	beq.n	80014ea <lcd_print+0x16e>
						custom_character_dealer(wrap.wrap_str[aux]);
 80014d0:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80014d4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	00da      	lsls	r2, r3, #3
 80014e0:	1ad2      	subs	r2, r2, r3
 80014e2:	188b      	adds	r3, r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff feeb 	bl	80012c0 <custom_character_dealer>
					cursor[1] += (u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS;
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <lcd_print+0x234>)
 80014ec:	785a      	ldrb	r2, [r3, #1]
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <lcd_print+0x238>)
 80014f0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80014f4:	b2d9      	uxtb	r1, r3
 80014f6:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <lcd_print+0x23c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	1acb      	subs	r3, r1, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4413      	add	r3, r2
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <lcd_print+0x234>)
 8001504:	705a      	strb	r2, [r3, #1]
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8001506:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800150a:	3301      	adds	r3, #1
 800150c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001510:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001514:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001518:	429a      	cmp	r2, r3
 800151a:	d9ae      	bls.n	800147a <lcd_print+0xfe>
				clean_it(wrap.wrap_str);
 800151c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff febf 	bl	80012a4 <clean_it>
}
 8001526:	e03a      	b.n	800159e <lcd_print+0x222>
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <lcd_print+0x234>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b299      	uxth	r1, r3
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <lcd_print+0x234>)
 8001530:	785b      	ldrb	r3, [r3, #1]
 8001532:	b29a      	uxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	481f      	ldr	r0, [pc, #124]	; (80015b4 <lcd_print+0x238>)
 8001538:	f001 fd84 	bl	8003044 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 800153c:	481d      	ldr	r0, [pc, #116]	; (80015b4 <lcd_print+0x238>)
 800153e:	f000 fe55 	bl	80021ec <u8g2_SendBuffer>
}
 8001542:	e02c      	b.n	800159e <lcd_print+0x222>
			enable = Custom_Character_masker(txt,mask,v_cursor);
 8001544:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4619      	mov	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fe70 	bl	8001234 <Custom_Character_masker>
 8001554:	4603      	mov	r3, r0
 8001556:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			u8g2_DrawUTF8(&u8g2, v_cursor[0], v_cursor[1], mask);
 800155a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800155e:	b299      	uxth	r1, r3
 8001560:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001564:	b29a      	uxth	r2, r3
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4812      	ldr	r0, [pc, #72]	; (80015b4 <lcd_print+0x238>)
 800156c:	f001 fd6a 	bl	8003044 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 8001570:	4810      	ldr	r0, [pc, #64]	; (80015b4 <lcd_print+0x238>)
 8001572:	f000 fe3b 	bl	80021ec <u8g2_SendBuffer>
			if(enable){
 8001576:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <lcd_print+0x208>
				custom_character_dealer(txt);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fe9e 	bl	80012c0 <custom_character_dealer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	480b      	ldr	r0, [pc, #44]	; (80015b4 <lcd_print+0x238>)
 8001588:	f001 fe98 	bl	80032bc <u8g2_GetStrWidth>
 800158c:	4603      	mov	r3, r0
 800158e:	4619      	mov	r1, r3
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <lcd_print+0x234>)
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	b2cb      	uxtb	r3, r1
 8001596:	4413      	add	r3, r2
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <lcd_print+0x234>)
 800159c:	701a      	strb	r2, [r3, #0]
}
 800159e:	bf00      	nop
 80015a0:	37ec      	adds	r7, #236	; 0xec
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200003c9 	.word	0x200003c9
 80015ac:	200003ca 	.word	0x200003ca
 80015b0:	200003cc 	.word	0x200003cc
 80015b4:	2000020c 	.word	0x2000020c
 80015b8:	20000005 	.word	0x20000005

080015bc <Kpd_Irqv_Init>:
#include "usbd_cdc_if.h"

//{set,reset,up,down,left,right}
key_ih IRQ_VECTOR[6];

void Kpd_Irqv_Init(void) {
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
	//
	IRQ_VECTOR[0].IRQn_p = SET_P_EXTI_IRQn;
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015c2:	220a      	movs	r2, #10
 80015c4:	705a      	strb	r2, [r3, #1]
	IRQ_VECTOR[0].deb_counter = 0;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
	//
	IRQ_VECTOR[1].IRQn_p = RESET_P_EXTI_IRQn;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015ce:	2217      	movs	r2, #23
 80015d0:	70da      	strb	r2, [r3, #3]
	IRQ_VECTOR[1].deb_counter = 0;
 80015d2:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	709a      	strb	r2, [r3, #2]
	//
	IRQ_VECTOR[2].IRQn_p = UP_P_EXTI_IRQn;
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015da:	2217      	movs	r2, #23
 80015dc:	715a      	strb	r2, [r3, #5]
	IRQ_VECTOR[2].deb_counter = 0;
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	711a      	strb	r2, [r3, #4]
	//
	IRQ_VECTOR[3].IRQn_p = DOWN_P_EXTI_IRQn;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015e6:	2217      	movs	r2, #23
 80015e8:	71da      	strb	r2, [r3, #7]
	IRQ_VECTOR[3].deb_counter = 0;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	719a      	strb	r2, [r3, #6]
	//
	IRQ_VECTOR[4].IRQn_p = LEFT_P_EXTI_IRQn;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015f2:	2217      	movs	r2, #23
 80015f4:	725a      	strb	r2, [r3, #9]
	IRQ_VECTOR[4].deb_counter = 0;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	721a      	strb	r2, [r3, #8]
	//
	IRQ_VECTOR[5].IRQn_p = RIGHT_P_EXTI_IRQn;
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <Kpd_Irqv_Init+0x54>)
 80015fe:	2217      	movs	r2, #23
 8001600:	72da      	strb	r2, [r3, #11]
	IRQ_VECTOR[5].deb_counter = 0;
 8001602:	4b03      	ldr	r3, [pc, #12]	; (8001610 <Kpd_Irqv_Init+0x54>)
 8001604:	2200      	movs	r2, #0
 8001606:	729a      	strb	r2, [r3, #10]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	20000444 	.word	0x20000444

08001614 <SystickCallback>:

void SystickCallback(void) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 6; i++) {
 800161a:	2300      	movs	r3, #0
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	e01b      	b.n	8001658 <SystickCallback+0x44>
		if (IRQ_VECTOR[i].deb_counter == 0) {
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <SystickCallback+0x54>)
 8001624:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d109      	bne.n	8001640 <SystickCallback+0x2c>
			HAL_NVIC_EnableIRQ(IRQ_VECTOR[i].IRQn_p);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <SystickCallback+0x54>)
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001638:	4618      	mov	r0, r3
 800163a:	f002 ffea 	bl	8004612 <HAL_NVIC_EnableIRQ>
 800163e:	e008      	b.n	8001652 <SystickCallback+0x3e>
		} else {
			IRQ_VECTOR[i].deb_counter--;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	4a09      	ldr	r2, [pc, #36]	; (8001668 <SystickCallback+0x54>)
 8001644:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001648:	3a01      	subs	r2, #1
 800164a:	b2d1      	uxtb	r1, r2
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <SystickCallback+0x54>)
 800164e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 6; i++) {
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	3301      	adds	r3, #1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d9e0      	bls.n	8001620 <SystickCallback+0xc>
		}
	}
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000444 	.word	0x20000444

0800166c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SET_P_Pin) {
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	2b10      	cmp	r3, #16
 800167a:	d10d      	bne.n	8001698 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_NVIC_DisableIRQ(IRQ_VECTOR[0].IRQn_p);
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x34>)
 800167e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001682:	4618      	mov	r0, r3
 8001684:	f002 ffd3 	bl	800462e <HAL_NVIC_DisableIRQ>
		IRQ_VECTOR[0].deb_counter = DEBOUNCE_TIME;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x34>)
 800168a:	22f4      	movs	r2, #244	; 0xf4
 800168c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800168e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x38>)
 8001694:	f003 f986 	bl	80049a4 <HAL_GPIO_TogglePin>
	}
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000444 	.word	0x20000444
 80016a4:	40011000 	.word	0x40011000

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ac:	f002 fdfe 	bl	80042ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 f80e 	bl	80016d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f000 f988 	bl	80019c8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80016b8:	f00a feec 	bl	800c494 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80016bc:	f000 f862 	bl	8001784 <MX_SPI1_Init>
  MX_TIM2_Init();
 80016c0:	f000 f936 	bl	8001930 <MX_TIM2_Init>
  MX_TIM1_Init();
 80016c4:	f000 f894 	bl	80017f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 80016c8:	f7fe fdc6 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 80016cc:	bf30      	wfi
 80016ce:	e7fd      	b.n	80016cc <main+0x24>

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b094      	sub	sp, #80	; 0x50
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016da:	2228      	movs	r2, #40	; 0x28
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f00b fbd2 	bl	800ce88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001700:	2301      	movs	r3, #1
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800170e:	2301      	movs	r3, #1
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001712:	2302      	movs	r3, #2
 8001714:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800171c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001726:	4618      	mov	r0, r3
 8001728:	f004 fe32 	bl	8006390 <HAL_RCC_OscConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001732:	f000 f9fd 	bl	8001b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001736:	230f      	movs	r3, #15
 8001738:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001746:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2102      	movs	r1, #2
 8001752:	4618      	mov	r0, r3
 8001754:	f005 f89e 	bl	8006894 <HAL_RCC_ClockConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800175e:	f000 f9e7 	bl	8001b30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001762:	2310      	movs	r3, #16
 8001764:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4618      	mov	r0, r3
 800176e:	f005 f9f7 	bl	8006b60 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001778:	f000 f9da 	bl	8001b30 <Error_Handler>
  }
}
 800177c:	bf00      	nop
 800177e:	3750      	adds	r7, #80	; 0x50
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_SPI1_Init+0x64>)
 800178a:	4a18      	ldr	r2, [pc, #96]	; (80017ec <MX_SPI1_Init+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <MX_SPI1_Init+0x64>)
 8001790:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001794:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MX_SPI1_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_SPI1_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017b8:	2208      	movs	r2, #8
 80017ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017d0:	220a      	movs	r2, #10
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017d6:	f005 fa79 	bl	8006ccc <HAL_SPI_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017e0:	f000 f9a6 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000450 	.word	0x20000450
 80017ec:	40013000 	.word	0x40013000

080017f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b096      	sub	sp, #88	; 0x58
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2220      	movs	r2, #32
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f00b fb2d 	bl	800ce88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800182e:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <MX_TIM1_Init+0x138>)
 8001830:	4a3e      	ldr	r2, [pc, #248]	; (800192c <MX_TIM1_Init+0x13c>)
 8001832:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001834:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <MX_TIM1_Init+0x138>)
 8001836:	2200      	movs	r2, #0
 8001838:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <MX_TIM1_Init+0x138>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001840:	4b39      	ldr	r3, [pc, #228]	; (8001928 <MX_TIM1_Init+0x138>)
 8001842:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001846:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	4b37      	ldr	r3, [pc, #220]	; (8001928 <MX_TIM1_Init+0x138>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800184e:	4b36      	ldr	r3, [pc, #216]	; (8001928 <MX_TIM1_Init+0x138>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b34      	ldr	r3, [pc, #208]	; (8001928 <MX_TIM1_Init+0x138>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800185a:	4833      	ldr	r0, [pc, #204]	; (8001928 <MX_TIM1_Init+0x138>)
 800185c:	f005 fc9c 	bl	8007198 <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001866:	f000 f963 	bl	8001b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001870:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001874:	4619      	mov	r1, r3
 8001876:	482c      	ldr	r0, [pc, #176]	; (8001928 <MX_TIM1_Init+0x138>)
 8001878:	f006 f882 	bl	8007980 <HAL_TIM_ConfigClockSource>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001882:	f000 f955 	bl	8001b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001886:	4828      	ldr	r0, [pc, #160]	; (8001928 <MX_TIM1_Init+0x138>)
 8001888:	f005 fd56 	bl	8007338 <HAL_TIM_PWM_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001892:	f000 f94d 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800189e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018a2:	4619      	mov	r1, r3
 80018a4:	4820      	ldr	r0, [pc, #128]	; (8001928 <MX_TIM1_Init+0x138>)
 80018a6:	f006 fbf7 	bl	8008098 <HAL_TIMEx_MasterConfigSynchronization>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018b0:	f000 f93e 	bl	8001b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b4:	2360      	movs	r3, #96	; 0x60
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c0:	2300      	movs	r3, #0
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	4813      	ldr	r0, [pc, #76]	; (8001928 <MX_TIM1_Init+0x138>)
 80018da:	f005 ff93 	bl	8007804 <HAL_TIM_PWM_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018e4:	f000 f924 	bl	8001b30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001900:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	4619      	mov	r1, r3
 800190a:	4807      	ldr	r0, [pc, #28]	; (8001928 <MX_TIM1_Init+0x138>)
 800190c:	f006 fc22 	bl	8008154 <HAL_TIMEx_ConfigBreakDeadTime>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001916:	f000 f90b 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800191a:	4803      	ldr	r0, [pc, #12]	; (8001928 <MX_TIM1_Init+0x138>)
 800191c:	f000 f9c6 	bl	8001cac <HAL_TIM_MspPostInit>

}
 8001920:	bf00      	nop
 8001922:	3758      	adds	r7, #88	; 0x58
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200004a8 	.word	0x200004a8
 800192c:	40012c00 	.word	0x40012c00

08001930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001944:	463b      	mov	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <MX_TIM2_Init+0x94>)
 800194e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001952:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <MX_TIM2_Init+0x94>)
 8001956:	f64e 2260 	movw	r2, #60000	; 0xea60
 800195a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <MX_TIM2_Init+0x94>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_TIM2_Init+0x94>)
 8001964:	221d      	movs	r2, #29
 8001966:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_TIM2_Init+0x94>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_TIM2_Init+0x94>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001974:	4813      	ldr	r0, [pc, #76]	; (80019c4 <MX_TIM2_Init+0x94>)
 8001976:	f005 fc0f 	bl	8007198 <HAL_TIM_Base_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001980:	f000 f8d6 	bl	8001b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4619      	mov	r1, r3
 8001990:	480c      	ldr	r0, [pc, #48]	; (80019c4 <MX_TIM2_Init+0x94>)
 8001992:	f005 fff5 	bl	8007980 <HAL_TIM_ConfigClockSource>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800199c:	f000 f8c8 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a8:	463b      	mov	r3, r7
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_TIM2_Init+0x94>)
 80019ae:	f006 fb73 	bl	8008098 <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019b8:	f000 f8ba 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200004f0 	.word	0x200004f0

080019c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <MX_GPIO_Init+0x154>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a4e      	ldr	r2, [pc, #312]	; (8001b1c <MX_GPIO_Init+0x154>)
 80019e2:	f043 0310 	orr.w	r3, r3, #16
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <MX_GPIO_Init+0x154>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f4:	4b49      	ldr	r3, [pc, #292]	; (8001b1c <MX_GPIO_Init+0x154>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a48      	ldr	r2, [pc, #288]	; (8001b1c <MX_GPIO_Init+0x154>)
 80019fa:	f043 0320 	orr.w	r3, r3, #32
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b46      	ldr	r3, [pc, #280]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a42      	ldr	r2, [pc, #264]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a12:	f043 0304 	orr.w	r3, r3, #4
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a3c      	ldr	r2, [pc, #240]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <MX_GPIO_Init+0x154>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a42:	4837      	ldr	r0, [pc, #220]	; (8001b20 <MX_GPIO_Init+0x158>)
 8001a44:	f002 ff96 	bl	8004974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	4835      	ldr	r0, [pc, #212]	; (8001b24 <MX_GPIO_Init+0x15c>)
 8001a4e:	f002 ff91 	bl	8004974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2140      	movs	r1, #64	; 0x40
 8001a56:	4833      	ldr	r0, [pc, #204]	; (8001b24 <MX_GPIO_Init+0x15c>)
 8001a58:	f002 ff8c 	bl	8004974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2103      	movs	r1, #3
 8001a60:	4831      	ldr	r0, [pc, #196]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001a62:	f002 ff87 	bl	8004974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4828      	ldr	r0, [pc, #160]	; (8001b20 <MX_GPIO_Init+0x158>)
 8001a80:	f002 fdf4 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a84:	2310      	movs	r3, #16
 8001a86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2302      	movs	r3, #2
 8001a92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4822      	ldr	r0, [pc, #136]	; (8001b24 <MX_GPIO_Init+0x15c>)
 8001a9c:	f002 fde6 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aa0:	2340      	movs	r3, #64	; 0x40
 8001aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481b      	ldr	r0, [pc, #108]	; (8001b24 <MX_GPIO_Init+0x15c>)
 8001ab8:	f002 fdd8 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001abc:	2303      	movs	r3, #3
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4815      	ldr	r0, [pc, #84]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001ad4:	f002 fdca 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_P_Pin RESET_P_Pin UP_P_Pin DOWN_P_Pin
                           LEFT_P_Pin RIGHT_P_Pin */
  GPIO_InitStruct.Pin = SET_P_Pin|RESET_P_Pin|UP_P_Pin|DOWN_P_Pin
 8001ad8:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001adc:	613b      	str	r3, [r7, #16]
                          |LEFT_P_Pin|RIGHT_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <MX_GPIO_Init+0x164>)
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	4619      	mov	r1, r3
 8001aec:	480e      	ldr	r0, [pc, #56]	; (8001b28 <MX_GPIO_Init+0x160>)
 8001aee:	f002 fdbd 	bl	800466c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	200a      	movs	r0, #10
 8001af8:	f002 fd6f 	bl	80045da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001afc:	200a      	movs	r0, #10
 8001afe:	f002 fd88 	bl	8004612 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2017      	movs	r0, #23
 8001b08:	f002 fd67 	bl	80045da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b0c:	2017      	movs	r0, #23
 8001b0e:	f002 fd80 	bl	8004612 <HAL_NVIC_EnableIRQ>

}
 8001b12:	bf00      	nop
 8001b14:	3720      	adds	r7, #32
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40011000 	.word	0x40011000
 8001b24:	40010800 	.word	0x40010800
 8001b28:	40010c00 	.word	0x40010c00
 8001b2c:	10210000 	.word	0x10210000

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <Error_Handler+0x8>
	...

08001b3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	4a1c      	ldr	r2, [pc, #112]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6193      	str	r3, [r2, #24]
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_MspInit+0x7c>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2005      	movs	r0, #5
 8001b78:	f002 fd2f 	bl	80045da <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b7c:	2005      	movs	r0, #5
 8001b7e:	f002 fd48 	bl	8004612 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2005      	movs	r0, #5
 8001b88:	f002 fd27 	bl	80045da <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b8c:	2005      	movs	r0, #5
 8001b8e:	f002 fd40 	bl	8004612 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_MspInit+0x80>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_MspInit+0x80>)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <HAL_SPI_MspInit+0x70>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d123      	bne.n	8001c28 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_SPI_MspInit+0x74>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <HAL_SPI_MspInit+0x74>)
 8001be6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_SPI_MspInit+0x74>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <HAL_SPI_MspInit+0x74>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <HAL_SPI_MspInit+0x74>)
 8001bfe:	f043 0304 	orr.w	r3, r3, #4
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_SPI_MspInit+0x74>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c10:	23a0      	movs	r3, #160	; 0xa0
 8001c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <HAL_SPI_MspInit+0x78>)
 8001c24:	f002 fd22 	bl	800466c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40013000 	.word	0x40013000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010800 	.word	0x40010800

08001c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_TIM_Base_MspInit+0x68>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10c      	bne.n	8001c68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c58:	6193      	str	r3, [r2, #24]
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c66:	e018      	b.n	8001c9a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d113      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_TIM_Base_MspInit+0x6c>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	201c      	movs	r0, #28
 8001c90:	f002 fca3 	bl	80045da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c94:	201c      	movs	r0, #28
 8001c96:	f002 fcbc 	bl	8004612 <HAL_NVIC_EnableIRQ>
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40012c00 	.word	0x40012c00
 8001ca8:	40021000 	.word	0x40021000

08001cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_TIM_MspPostInit+0x5c>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d118      	bne.n	8001cfe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_TIM_MspPostInit+0x60>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <HAL_TIM_MspPostInit+0x60>)
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_TIM_MspPostInit+0x60>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_TIM_MspPostInit+0x64>)
 8001cfa:	f002 fcb7 	bl	800466c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40012c00 	.word	0x40012c00
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40010800 	.word	0x40010800

08001d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <NMI_Handler+0x4>

08001d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler+0x4>

08001d26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickCallback();
 8001d5a:	f7ff fc5b 	bl	8001614 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5e:	f002 faeb 	bl	8004338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_P_Pin);
 8001d76:	2010      	movs	r0, #16
 8001d78:	f002 fe2e 	bl	80049d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001d86:	f002 ff70 	bl	8004c6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200017d8 	.word	0x200017d8

08001d94 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d9a:	f002 ff66 	bl	8004c6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200017d8 	.word	0x200017d8

08001da8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_P_Pin);
 8001dac:	2020      	movs	r0, #32
 8001dae:	f002 fe13 	bl	80049d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_P_Pin);
 8001db2:	2040      	movs	r0, #64	; 0x40
 8001db4:	f002 fe10 	bl	80049d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_P_Pin);
 8001db8:	2080      	movs	r0, #128	; 0x80
 8001dba:	f002 fe0d 	bl	80049d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_P_Pin);
 8001dbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dc2:	f002 fe09 	bl	80049d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_P_Pin);
 8001dc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dca:	f002 fe05 	bl	80049d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <TIM2_IRQHandler+0x10>)
 8001dda:	f005 fc0b 	bl	80075f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200004f0 	.word	0x200004f0

08001de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <_sbrk+0x5c>)
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <_sbrk+0x60>)
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <_sbrk+0x64>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <_sbrk+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d207      	bcs.n	8001e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e18:	f00a fffe 	bl	800ce18 <__errno>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	220c      	movs	r2, #12
 8001e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e26:	e009      	b.n	8001e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <_sbrk+0x64>)
 8001e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20005000 	.word	0x20005000
 8001e48:	00000400 	.word	0x00000400
 8001e4c:	20000538 	.word	0x20000538
 8001e50:	20001cf8 	.word	0x20001cf8

08001e54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b088      	sub	sp, #32
 8001e82:	af02      	add	r7, sp, #8
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	4608      	mov	r0, r1
 8001e88:	4611      	mov	r1, r2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	817b      	strh	r3, [r7, #10]
 8001e90:	460b      	mov	r3, r1
 8001e92:	813b      	strh	r3, [r7, #8]
 8001e94:	4613      	mov	r3, r2
 8001e96:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001e9e:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001ea0:	7dbb      	ldrb	r3, [r7, #22]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2301      	moveq	r3, #1
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001eae:	897a      	ldrh	r2, [r7, #10]
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b298      	uxth	r0, r3
 8001eb6:	893b      	ldrh	r3, [r7, #8]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	893a      	ldrh	r2, [r7, #8]
 8001ebe:	8979      	ldrh	r1, [r7, #10]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f001 fbc8 	bl	800365a <u8g2_IsIntersection>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d040      	beq.n	8001f52 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001ed4:	e035      	b.n	8001f42 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	4013      	ands	r3, r2
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00c      	beq.n	8001efe <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	7dba      	ldrb	r2, [r7, #22]
 8001ee8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001eec:	893a      	ldrh	r2, [r7, #8]
 8001eee:	8979      	ldrh	r1, [r7, #10]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f001 fa76 	bl	80033e8 <u8g2_DrawHVLine>
 8001efc:	e010      	b.n	8001f20 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10b      	bne.n	8001f20 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	7d7a      	ldrb	r2, [r7, #21]
 8001f0c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001f10:	893a      	ldrh	r2, [r7, #8]
 8001f12:	8979      	ldrh	r1, [r7, #10]
 8001f14:	2300      	movs	r3, #0
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f001 fa64 	bl	80033e8 <u8g2_DrawHVLine>
    }
    x++;
 8001f20:	897b      	ldrh	r3, [r7, #10]
 8001f22:	3301      	adds	r3, #1
 8001f24:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001f26:	7dfb      	ldrb	r3, [r7, #23]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d104      	bne.n	8001f3c <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
      b++;
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1c6      	bne.n	8001ed6 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	7dba      	ldrb	r2, [r7, #22]
 8001f4c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001f50:	e000      	b.n	8001f54 <u8g2_DrawHXBM+0xd6>
    return;
 8001f52:	bf00      	nop
}
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b088      	sub	sp, #32
 8001f5e:	af02      	add	r7, sp, #8
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	4608      	mov	r0, r1
 8001f64:	4611      	mov	r1, r2
 8001f66:	461a      	mov	r2, r3
 8001f68:	4603      	mov	r3, r0
 8001f6a:	817b      	strh	r3, [r7, #10]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	813b      	strh	r3, [r7, #8]
 8001f70:	4613      	mov	r3, r2
 8001f72:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001f78:	8afb      	ldrh	r3, [r7, #22]
 8001f7a:	3307      	adds	r3, #7
 8001f7c:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001f7e:	8afb      	ldrh	r3, [r7, #22]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001f84:	897a      	ldrh	r2, [r7, #10]
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b298      	uxth	r0, r3
 8001f8c:	893a      	ldrh	r2, [r7, #8]
 8001f8e:	8c3b      	ldrh	r3, [r7, #32]
 8001f90:	4413      	add	r3, r2
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	893a      	ldrh	r2, [r7, #8]
 8001f96:	8979      	ldrh	r1, [r7, #10]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f001 fb5c 	bl	800365a <u8g2_IsIntersection>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d017      	beq.n	8001fd8 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001fa8:	e012      	b.n	8001fd0 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001faa:	88f8      	ldrh	r0, [r7, #6]
 8001fac:	893a      	ldrh	r2, [r7, #8]
 8001fae:	8979      	ldrh	r1, [r7, #10]
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff ff61 	bl	8001e7e <u8g2_DrawHXBM>
    bitmap += blen;
 8001fbc:	8afb      	ldrh	r3, [r7, #22]
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc0:	4413      	add	r3, r2
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001fc4:	893b      	ldrh	r3, [r7, #8]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	813b      	strh	r3, [r7, #8]
    h--;
 8001fca:	8c3b      	ldrh	r3, [r7, #32]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001fd0:	8c3b      	ldrh	r3, [r7, #32]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1e9      	bne.n	8001faa <u8g2_DrawXBM+0x50>
 8001fd6:	e000      	b.n	8001fda <u8g2_DrawXBM+0x80>
    return;
 8001fd8:	bf00      	nop
  }
}
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	4608      	mov	r0, r1
 8001fea:	4611      	mov	r1, r2
 8001fec:	461a      	mov	r2, r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	817b      	strh	r3, [r7, #10]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	813b      	strh	r3, [r7, #8]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001ffa:	897a      	ldrh	r2, [r7, #10]
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	4413      	add	r3, r2
 8002000:	b298      	uxth	r0, r3
 8002002:	893a      	ldrh	r2, [r7, #8]
 8002004:	8b3b      	ldrh	r3, [r7, #24]
 8002006:	4413      	add	r3, r2
 8002008:	b29b      	uxth	r3, r3
 800200a:	893a      	ldrh	r2, [r7, #8]
 800200c:	8979      	ldrh	r1, [r7, #10]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4603      	mov	r3, r0
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f001 fb21 	bl	800365a <u8g2_IsIntersection>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d012      	beq.n	8002044 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800201e:	e00d      	b.n	800203c <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	893a      	ldrh	r2, [r7, #8]
 8002024:	8979      	ldrh	r1, [r7, #10]
 8002026:	2000      	movs	r0, #0
 8002028:	9000      	str	r0, [sp, #0]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f001 f9dc 	bl	80033e8 <u8g2_DrawHVLine>
    y++;    
 8002030:	893b      	ldrh	r3, [r7, #8]
 8002032:	3301      	adds	r3, #1
 8002034:	813b      	strh	r3, [r7, #8]
    h--;
 8002036:	8b3b      	ldrh	r3, [r7, #24]
 8002038:	3b01      	subs	r3, #1
 800203a:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 800203c:	8b3b      	ldrh	r3, [r7, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ee      	bne.n	8002020 <u8g2_DrawBox+0x40>
 8002042:	e000      	b.n	8002046 <u8g2_DrawBox+0x66>
    return;
 8002044:	bf00      	nop
  }
}
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	4608      	mov	r0, r1
 8002056:	4611      	mov	r1, r2
 8002058:	461a      	mov	r2, r3
 800205a:	4603      	mov	r3, r0
 800205c:	817b      	strh	r3, [r7, #10]
 800205e:	460b      	mov	r3, r1
 8002060:	813b      	strh	r3, [r7, #8]
 8002062:	4613      	mov	r3, r2
 8002064:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8002066:	897b      	ldrh	r3, [r7, #10]
 8002068:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800206a:	897a      	ldrh	r2, [r7, #10]
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	4413      	add	r3, r2
 8002070:	b298      	uxth	r0, r3
 8002072:	893a      	ldrh	r2, [r7, #8]
 8002074:	8c3b      	ldrh	r3, [r7, #32]
 8002076:	4413      	add	r3, r2
 8002078:	b29b      	uxth	r3, r3
 800207a:	893a      	ldrh	r2, [r7, #8]
 800207c:	8979      	ldrh	r1, [r7, #10]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	4603      	mov	r3, r0
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f001 fae9 	bl	800365a <u8g2_IsIntersection>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d037      	beq.n	80020fe <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	893a      	ldrh	r2, [r7, #8]
 8002092:	8979      	ldrh	r1, [r7, #10]
 8002094:	2000      	movs	r0, #0
 8002096:	9000      	str	r0, [sp, #0]
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f001 f9a5 	bl	80033e8 <u8g2_DrawHVLine>
  if (h >= 2) {
 800209e:	8c3b      	ldrh	r3, [r7, #32]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d92d      	bls.n	8002100 <u8g2_DrawFrame+0xb4>
    h-=2;
 80020a4:	8c3b      	ldrh	r3, [r7, #32]
 80020a6:	3b02      	subs	r3, #2
 80020a8:	843b      	strh	r3, [r7, #32]
    y++;
 80020aa:	893b      	ldrh	r3, [r7, #8]
 80020ac:	3301      	adds	r3, #1
 80020ae:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 80020b0:	8c3b      	ldrh	r3, [r7, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01a      	beq.n	80020ec <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80020b6:	8c3b      	ldrh	r3, [r7, #32]
 80020b8:	893a      	ldrh	r2, [r7, #8]
 80020ba:	8979      	ldrh	r1, [r7, #10]
 80020bc:	2001      	movs	r0, #1
 80020be:	9000      	str	r0, [sp, #0]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f001 f991 	bl	80033e8 <u8g2_DrawHVLine>
      x+=w;
 80020c6:	897a      	ldrh	r2, [r7, #10]
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	4413      	add	r3, r2
 80020cc:	817b      	strh	r3, [r7, #10]
      x--;
 80020ce:	897b      	ldrh	r3, [r7, #10]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80020d4:	8c3b      	ldrh	r3, [r7, #32]
 80020d6:	893a      	ldrh	r2, [r7, #8]
 80020d8:	8979      	ldrh	r1, [r7, #10]
 80020da:	2001      	movs	r0, #1
 80020dc:	9000      	str	r0, [sp, #0]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f001 f982 	bl	80033e8 <u8g2_DrawHVLine>
      y+=h;
 80020e4:	893a      	ldrh	r2, [r7, #8]
 80020e6:	8c3b      	ldrh	r3, [r7, #32]
 80020e8:	4413      	add	r3, r2
 80020ea:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	893a      	ldrh	r2, [r7, #8]
 80020f0:	8af9      	ldrh	r1, [r7, #22]
 80020f2:	2000      	movs	r0, #0
 80020f4:	9000      	str	r0, [sp, #0]
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f001 f976 	bl	80033e8 <u8g2_DrawHVLine>
 80020fc:	e000      	b.n	8002100 <u8g2_DrawFrame+0xb4>
    return;
 80020fe:	bf00      	nop
  }
}
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	7c1b      	ldrb	r3, [r3, #16]
 8002114:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f00a fea7 	bl	800ce88 <memset>
}
 800213a:	bf00      	nop
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af02      	add	r7, sp, #8
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	70fb      	strb	r3, [r7, #3]
 800214e:	4613      	mov	r3, r2
 8002150:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	7c1b      	ldrb	r3, [r3, #16]
 8002158:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	b29b      	uxth	r3, r3
 8002168:	89ba      	ldrh	r2, [r7, #12]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8002170:	89bb      	ldrh	r3, [r7, #12]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8002176:	89bb      	ldrh	r3, [r7, #12]
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	4413      	add	r3, r2
 800217c:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800217e:	7bf9      	ldrb	r1, [r7, #15]
 8002180:	78ba      	ldrb	r2, [r7, #2]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	460b      	mov	r3, r1
 8002188:	2100      	movs	r1, #0
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f001 ff88 	bl	80040a0 <u8x8_DrawTile>
}
 8002190:	bf00      	nop
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021aa:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021b2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	7c5b      	ldrb	r3, [r3, #17]
 80021ba:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80021bc:	7bba      	ldrb	r2, [r7, #14]
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffbd 	bl	8002142 <u8g2_send_tile_row>
    src_row++;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80021ce:	7bbb      	ldrb	r3, [r7, #14]
 80021d0:	3301      	adds	r3, #1
 80021d2:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	7b7b      	ldrb	r3, [r7, #13]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d203      	bcs.n	80021e4 <u8g2_send_buffer+0x4c>
 80021dc:	7bba      	ldrb	r2, [r7, #14]
 80021de:	7b3b      	ldrb	r3, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3eb      	bcc.n	80021bc <u8g2_send_buffer+0x24>
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ffcf 	bl	8002198 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f001 ffb2 	bl	8004164 <u8x8_RefreshDisplay>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ff5b 	bl	8002106 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002250:	2100      	movs	r1, #0
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffd8 	bl	8002208 <u8g2_SetBufferCurrTileRow>
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff95 	bl	8002198 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002274:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	4413      	add	r3, r2
 8002280:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	7c5b      	ldrb	r3, [r3, #17]
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	429a      	cmp	r2, r3
 800228c:	d304      	bcc.n	8002298 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f001 ff68 	bl	8004164 <u8x8_RefreshDisplay>
    return 0;
 8002294:	2300      	movs	r3, #0
 8002296:	e00d      	b.n	80022b4 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ff2f 	bl	8002106 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4619      	mov	r1, r3
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ffab 	bl	8002208 <u8g2_SetBufferCurrTileRow>
  return 1;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08c      	sub	sp, #48	; 0x30
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	817b      	strh	r3, [r7, #10]
 80022ce:	460b      	mov	r3, r1
 80022d0:	813b      	strh	r3, [r7, #8]
 80022d2:	4613      	mov	r3, r2
 80022d4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 80022d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80022d8:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 80022da:	2308      	movs	r3, #8
 80022dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 80022de:	88fb      	ldrh	r3, [r7, #6]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80022ec:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80022f4:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80022fc:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 8002308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800230a:	3301      	adds	r3, #1
 800230c:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 800230e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002310:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 8002312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002314:	3301      	adds	r3, #1
 8002316:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 8002318:	897b      	ldrh	r3, [r7, #10]
 800231a:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 800231c:	8b7a      	ldrh	r2, [r7, #26]
 800231e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 8002324:	8b7a      	ldrh	r2, [r7, #26]
 8002326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 800232c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800232e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002330:	4413      	add	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	8c3b      	ldrh	r3, [r7, #32]
 800233a:	4413      	add	r3, r2
 800233c:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 800233e:	893b      	ldrh	r3, [r7, #8]
 8002340:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	4798      	blx	r3
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	8afb      	ldrh	r3, [r7, #22]
 8002350:	4413      	add	r3, r2
 8002352:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8002354:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002358:	b29b      	uxth	r3, r3
 800235a:	8afa      	ldrh	r2, [r7, #22]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 8002360:	8afa      	ldrh	r2, [r7, #22]
 8002362:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8002368:	8afa      	ldrh	r2, [r7, #22]
 800236a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 8002370:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002374:	b21a      	sxth	r2, r3
 8002376:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800237a:	b21b      	sxth	r3, r3
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	b21b      	sxth	r3, r3
 8002380:	b29a      	uxth	r2, r3
 8002382:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002384:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002386:	440b      	add	r3, r1
 8002388:	b29b      	uxth	r3, r3
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	b29b      	uxth	r3, r3
 800238e:	4413      	add	r3, r2
 8002390:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 8002392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002394:	2b00      	cmp	r3, #0
 8002396:	d067      	beq.n	8002468 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8002398:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800239a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800239c:	429a      	cmp	r2, r3
 800239e:	d109      	bne.n	80023b4 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 80023a0:	7f7b      	ldrb	r3, [r7, #29]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4619      	mov	r1, r3
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f001 f90a 	bl	80035c8 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 80023b4:	8b38      	ldrh	r0, [r7, #24]
 80023b6:	8afa      	ldrh	r2, [r7, #22]
 80023b8:	8b79      	ldrh	r1, [r7, #26]
 80023ba:	8abb      	ldrh	r3, [r7, #20]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4603      	mov	r3, r0
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fe43 	bl	800204c <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 80023c6:	7f7b      	ldrb	r3, [r7, #29]
 80023c8:	4619      	mov	r1, r3
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f001 f8fc 	bl	80035c8 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	f003 0318 	and.w	r3, r3, #24
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d042      	beq.n	8002460 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 80023da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d13c      	bne.n	8002460 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	10db      	asrs	r3, r3, #3
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 80023f2:	8a7b      	ldrh	r3, [r7, #18]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 80023f8:	2300      	movs	r3, #0
 80023fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80023fc:	e02c      	b.n	8002458 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 80023fe:	8b7a      	ldrh	r2, [r7, #26]
 8002400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002402:	4413      	add	r3, r2
 8002404:	b29a      	uxth	r2, r3
 8002406:	8a7b      	ldrh	r3, [r7, #18]
 8002408:	4413      	add	r3, r2
 800240a:	b299      	uxth	r1, r3
 800240c:	8afa      	ldrh	r2, [r7, #22]
 800240e:	8abb      	ldrh	r3, [r7, #20]
 8002410:	4413      	add	r3, r2
 8002412:	b29a      	uxth	r2, r3
 8002414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002416:	4413      	add	r3, r2
 8002418:	b29a      	uxth	r2, r3
 800241a:	8a7b      	ldrh	r3, [r7, #18]
 800241c:	4413      	add	r3, r2
 800241e:	b29a      	uxth	r2, r3
 8002420:	8b3b      	ldrh	r3, [r7, #24]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f001 f86b 	bl	80034fe <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8002428:	8b7a      	ldrh	r2, [r7, #26]
 800242a:	8b3b      	ldrh	r3, [r7, #24]
 800242c:	4413      	add	r3, r2
 800242e:	b29a      	uxth	r2, r3
 8002430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002432:	4413      	add	r3, r2
 8002434:	b29a      	uxth	r2, r3
 8002436:	8a7b      	ldrh	r3, [r7, #18]
 8002438:	4413      	add	r3, r2
 800243a:	b299      	uxth	r1, r3
 800243c:	8afa      	ldrh	r2, [r7, #22]
 800243e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002440:	4413      	add	r3, r2
 8002442:	b29a      	uxth	r2, r3
 8002444:	8a7b      	ldrh	r3, [r7, #18]
 8002446:	4413      	add	r3, r2
 8002448:	b29a      	uxth	r2, r3
 800244a:	8abb      	ldrh	r3, [r7, #20]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f001 f86f 	bl	8003530 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8002452:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002454:	3301      	adds	r3, #1
 8002456:	847b      	strh	r3, [r7, #34]	; 0x22
 8002458:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800245a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800245c:	429a      	cmp	r2, r3
 800245e:	d3ce      	bcc.n	80023fe <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 8002460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002462:	3b01      	subs	r3, #1
 8002464:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8002466:	e757      	b.n	8002318 <u8g2_DrawButtonFrame+0x5c>
      break;
 8002468:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d011      	beq.n	8002498 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8002474:	2102      	movs	r1, #2
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f001 f8a6 	bl	80035c8 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 800247c:	8b38      	ldrh	r0, [r7, #24]
 800247e:	8afa      	ldrh	r2, [r7, #22]
 8002480:	8b79      	ldrh	r1, [r7, #26]
 8002482:	8abb      	ldrh	r3, [r7, #20]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	4603      	mov	r3, r0
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff fda9 	bl	8001fe0 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 800248e:	7f7b      	ldrb	r3, [r7, #29]
 8002490:	4619      	mov	r1, r3
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f001 f898 	bl	80035c8 <u8g2_SetDrawColor>
  }
}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	; 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	; 0x28
 80024a4:	af04      	add	r7, sp, #16
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	817b      	strh	r3, [r7, #10]
 80024b2:	460b      	mov	r3, r1
 80024b4:	813b      	strh	r3, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 80024ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 ff11 	bl	80032e4 <u8g2_GetUTF8Width>
 80024c2:	4603      	mov	r3, r0
 80024c4:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 80024c6:	2300      	movs	r3, #0
 80024c8:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 80024d4:	8afb      	ldrh	r3, [r7, #22]
 80024d6:	3301      	adds	r3, #1
 80024d8:	0fda      	lsrs	r2, r3, #31
 80024da:	4413      	add	r3, r2
 80024dc:	105b      	asrs	r3, r3, #1
 80024de:	425b      	negs	r3, r3
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	897b      	ldrh	r3, [r7, #10]
 80024e4:	4413      	add	r3, r2
 80024e6:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 80024e8:	8afa      	ldrh	r2, [r7, #22]
 80024ea:	8c3b      	ldrh	r3, [r7, #32]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d20d      	bcs.n	800250c <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 80024fa:	8c3a      	ldrh	r2, [r7, #32]
 80024fc:	8afb      	ldrh	r3, [r7, #22]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	0fda      	lsrs	r2, r3, #31
 8002502:	4413      	add	r3, r2
 8002504:	105b      	asrs	r3, r3, #1
 8002506:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8002508:	8c3b      	ldrh	r3, [r7, #32]
 800250a:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 800250c:	2101      	movs	r1, #1
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fcda 	bl	8002ec8 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8002514:	893a      	ldrh	r2, [r7, #8]
 8002516:	8979      	ldrh	r1, [r7, #10]
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fd92 	bl	8003044 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8002520:	897a      	ldrh	r2, [r7, #10]
 8002522:	8abb      	ldrh	r3, [r7, #20]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	b299      	uxth	r1, r3
 8002528:	88f8      	ldrh	r0, [r7, #6]
 800252a:	893a      	ldrh	r2, [r7, #8]
 800252c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	8afb      	ldrh	r3, [r7, #22]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	4603      	mov	r3, r0
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f7ff febe 	bl	80022bc <u8g2_DrawButtonFrame>
  
}
 8002540:	bf00      	nop
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fe71 	bl	8002238 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fe82 	bl	8002260 <u8g2_NextPage>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f9      	bne.n	8002556 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002562:	2100      	movs	r1, #0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fe4f 	bl	8002208 <u8g2_SetBufferCurrTileRow>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2208      	movs	r2, #8
 8002580:	701a      	strb	r2, [r3, #0]
  return buf;
 8002582:	4b03      	ldr	r3, [pc, #12]	; (8002590 <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	2000053c 	.word	0x2000053c

08002594 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 80025aa:	490c      	ldr	r1, [pc, #48]	; (80025dc <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f001 fe39 	bl	8004224 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 80025b2:	f107 0313 	add.w	r3, r7, #19
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffdc 	bl	8002574 <u8g2_m_24_8_f>
 80025bc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80025be:	7cfa      	ldrb	r2, [r7, #19]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 80025c6:	6979      	ldr	r1, [r7, #20]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f001 f92f 	bl	800382c <u8g2_SetupBuffer>
}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	08003dbd 	.word	0x08003dbd
 80025dc:	08003f9d 	.word	0x08003f9d
 80025e0:	080036b1 	.word	0x080036b1

080025e4 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	70fb      	strb	r3, [r7, #3]
	font += offset;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	781b      	ldrb	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4413      	add	r3, r2
 8002618:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	81fb      	strh	r3, [r7, #14]
	font++;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3301      	adds	r3, #1
 8002624:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8002626:	89fb      	ldrh	r3, [r7, #14]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b29a      	uxth	r2, r3
 8002632:	89fb      	ldrh	r3, [r7, #14]
 8002634:	4413      	add	r3, r2
 8002636:	81fb      	strh	r3, [r7, #14]
	return pos;
 8002638:	89fb      	ldrh	r3, [r7, #14]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800264e:	2100      	movs	r1, #0
 8002650:	6838      	ldr	r0, [r7, #0]
 8002652:	f7ff ffc7 	bl	80025e4 <u8g2_font_get_byte>
 8002656:	4603      	mov	r3, r0
 8002658:	461a      	mov	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800265e:	2101      	movs	r1, #1
 8002660:	6838      	ldr	r0, [r7, #0]
 8002662:	f7ff ffbf 	bl	80025e4 <u8g2_font_get_byte>
 8002666:	4603      	mov	r3, r0
 8002668:	461a      	mov	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800266e:	2102      	movs	r1, #2
 8002670:	6838      	ldr	r0, [r7, #0]
 8002672:	f7ff ffb7 	bl	80025e4 <u8g2_font_get_byte>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800267e:	2103      	movs	r1, #3
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	f7ff ffaf 	bl	80025e4 <u8g2_font_get_byte>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800268e:	2104      	movs	r1, #4
 8002690:	6838      	ldr	r0, [r7, #0]
 8002692:	f7ff ffa7 	bl	80025e4 <u8g2_font_get_byte>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800269e:	2105      	movs	r1, #5
 80026a0:	6838      	ldr	r0, [r7, #0]
 80026a2:	f7ff ff9f 	bl	80025e4 <u8g2_font_get_byte>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80026ae:	2106      	movs	r1, #6
 80026b0:	6838      	ldr	r0, [r7, #0]
 80026b2:	f7ff ff97 	bl	80025e4 <u8g2_font_get_byte>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80026be:	2107      	movs	r1, #7
 80026c0:	6838      	ldr	r0, [r7, #0]
 80026c2:	f7ff ff8f 	bl	80025e4 <u8g2_font_get_byte>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80026ce:	2108      	movs	r1, #8
 80026d0:	6838      	ldr	r0, [r7, #0]
 80026d2:	f7ff ff87 	bl	80025e4 <u8g2_font_get_byte>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80026de:	2109      	movs	r1, #9
 80026e0:	6838      	ldr	r0, [r7, #0]
 80026e2:	f7ff ff7f 	bl	80025e4 <u8g2_font_get_byte>
 80026e6:	4603      	mov	r3, r0
 80026e8:	b25a      	sxtb	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80026ee:	210a      	movs	r1, #10
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	f7ff ff77 	bl	80025e4 <u8g2_font_get_byte>
 80026f6:	4603      	mov	r3, r0
 80026f8:	b25a      	sxtb	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 80026fe:	210b      	movs	r1, #11
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	f7ff ff6f 	bl	80025e4 <u8g2_font_get_byte>
 8002706:	4603      	mov	r3, r0
 8002708:	b25a      	sxtb	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 800270e:	210c      	movs	r1, #12
 8002710:	6838      	ldr	r0, [r7, #0]
 8002712:	f7ff ff67 	bl	80025e4 <u8g2_font_get_byte>
 8002716:	4603      	mov	r3, r0
 8002718:	b25a      	sxtb	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800271e:	210d      	movs	r1, #13
 8002720:	6838      	ldr	r0, [r7, #0]
 8002722:	f7ff ff5f 	bl	80025e4 <u8g2_font_get_byte>
 8002726:	4603      	mov	r3, r0
 8002728:	b25a      	sxtb	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 800272e:	210e      	movs	r1, #14
 8002730:	6838      	ldr	r0, [r7, #0]
 8002732:	f7ff ff57 	bl	80025e4 <u8g2_font_get_byte>
 8002736:	4603      	mov	r3, r0
 8002738:	b25a      	sxtb	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800273e:	210f      	movs	r1, #15
 8002740:	6838      	ldr	r0, [r7, #0]
 8002742:	f7ff ff4f 	bl	80025e4 <u8g2_font_get_byte>
 8002746:	4603      	mov	r3, r0
 8002748:	b25a      	sxtb	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 800274e:	2110      	movs	r1, #16
 8002750:	6838      	ldr	r0, [r7, #0]
 8002752:	f7ff ff47 	bl	80025e4 <u8g2_font_get_byte>
 8002756:	4603      	mov	r3, r0
 8002758:	b25a      	sxtb	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800275e:	2111      	movs	r1, #17
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f7ff ff50 	bl	8002606 <u8g2_font_get_word>
 8002766:	4603      	mov	r3, r0
 8002768:	461a      	mov	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 800276e:	2113      	movs	r1, #19
 8002770:	6838      	ldr	r0, [r7, #0]
 8002772:	f7ff ff48 	bl	8002606 <u8g2_font_get_word>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 800277e:	2115      	movs	r1, #21
 8002780:	6838      	ldr	r0, [r7, #0]
 8002782:	f7ff ff40 	bl	8002606 <u8g2_font_get_word>
 8002786:	4603      	mov	r3, r0
 8002788:	461a      	mov	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	82da      	strh	r2, [r3, #22]
#endif
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7b1b      	ldrb	r3, [r3, #12]
 80027a6:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	7b7b      	ldrb	r3, [r7, #13]
 80027b4:	fa42 f303 	asr.w	r3, r2, r3
 80027b8:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 80027be:	7bba      	ldrb	r2, [r7, #14]
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	4413      	add	r3, r2
 80027c4:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 80027c6:	7bbb      	ldrb	r3, [r7, #14]
 80027c8:	2b07      	cmp	r3, #7
 80027ca:	d91a      	bls.n	8002802 <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 80027cc:	2308      	movs	r3, #8
 80027ce:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 80027d0:	7b3a      	ldrb	r2, [r7, #12]
 80027d2:	7b7b      	ldrb	r3, [r7, #13]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	7b3b      	ldrb	r3, [r7, #12]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	b25a      	sxtb	r2, r3
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 80027fc:	7bbb      	ldrb	r3, [r7, #14]
 80027fe:	3b08      	subs	r3, #8
 8002800:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	b2da      	uxtb	r2, r3
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	4013      	ands	r3, r2
 8002816:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7bba      	ldrb	r2, [r7, #14]
 800281c:	731a      	strb	r2, [r3, #12]
	return val;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	4619      	mov	r1, r3
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff ffab 	bl	8002796 <u8g2_font_decode_get_unsigned_bits>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8002844:	2301      	movs	r3, #1
 8002846:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	3b01      	subs	r3, #1
 800284c:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 800284e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	73bb      	strb	r3, [r7, #14]
	v -= d;
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	7bbb      	ldrb	r3, [r7, #14]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	73fb      	strb	r3, [r7, #15]
	return v;
 8002864:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 8002870:	b490      	push	{r4, r7}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	4604      	mov	r4, r0
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	461a      	mov	r2, r3
 800287e:	4623      	mov	r3, r4
 8002880:	80fb      	strh	r3, [r7, #6]
 8002882:	4603      	mov	r3, r0
 8002884:	717b      	strb	r3, [r7, #5]
 8002886:	460b      	mov	r3, r1
 8002888:	713b      	strb	r3, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d014      	beq.n	80028be <u8g2_add_vector_y+0x4e>
 8002894:	2b02      	cmp	r3, #2
 8002896:	dc19      	bgt.n	80028cc <u8g2_add_vector_y+0x5c>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <u8g2_add_vector_y+0x32>
 800289c:	2b01      	cmp	r3, #1
 800289e:	d007      	beq.n	80028b0 <u8g2_add_vector_y+0x40>
 80028a0:	e014      	b.n	80028cc <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 80028a2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	4413      	add	r3, r2
 80028ac:	80fb      	strh	r3, [r7, #6]
		break;
 80028ae:	e014      	b.n	80028da <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 80028b0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	4413      	add	r3, r2
 80028ba:	80fb      	strh	r3, [r7, #6]
		break;
 80028bc:	e00d      	b.n	80028da <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 80028be:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	88fa      	ldrh	r2, [r7, #6]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	80fb      	strh	r3, [r7, #6]
		break;
 80028ca:	e006      	b.n	80028da <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 80028cc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	80fb      	strh	r3, [r7, #6]
		break;
 80028d8:	bf00      	nop
	}
	return dy;
 80028da:	88fb      	ldrh	r3, [r7, #6]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc90      	pop	{r4, r7}
 80028e4:	4770      	bx	lr

080028e6 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 80028e6:	b490      	push	{r4, r7}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4604      	mov	r4, r0
 80028ee:	4608      	mov	r0, r1
 80028f0:	4611      	mov	r1, r2
 80028f2:	461a      	mov	r2, r3
 80028f4:	4623      	mov	r3, r4
 80028f6:	80fb      	strh	r3, [r7, #6]
 80028f8:	4603      	mov	r3, r0
 80028fa:	717b      	strb	r3, [r7, #5]
 80028fc:	460b      	mov	r3, r1
 80028fe:	713b      	strb	r3, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d014      	beq.n	8002934 <u8g2_add_vector_x+0x4e>
 800290a:	2b02      	cmp	r3, #2
 800290c:	dc19      	bgt.n	8002942 <u8g2_add_vector_x+0x5c>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <u8g2_add_vector_x+0x32>
 8002912:	2b01      	cmp	r3, #1
 8002914:	d007      	beq.n	8002926 <u8g2_add_vector_x+0x40>
 8002916:	e014      	b.n	8002942 <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8002918:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800291c:	b29a      	uxth	r2, r3
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	4413      	add	r3, r2
 8002922:	80fb      	strh	r3, [r7, #6]
		break;
 8002924:	e014      	b.n	8002950 <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8002926:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800292a:	b29b      	uxth	r3, r3
 800292c:	88fa      	ldrh	r2, [r7, #6]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	80fb      	strh	r3, [r7, #6]
		break;
 8002932:	e00d      	b.n	8002950 <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8002934:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002938:	b29b      	uxth	r3, r3
 800293a:	88fa      	ldrh	r2, [r7, #6]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	80fb      	strh	r3, [r7, #6]
		break;
 8002940:	e006      	b.n	8002950 <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 8002942:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002946:	b29a      	uxth	r2, r3
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	4413      	add	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
		break;
 800294e:	bf00      	nop
	}
	return dx;
 8002950:	88fb      	ldrh	r3, [r7, #6]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bc90      	pop	{r4, r7}
 800295a:	4770      	bx	lr

0800295c <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	70fb      	strb	r3, [r7, #3]
 8002968:	4613      	mov	r3, r2
 800296a:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3360      	adds	r3, #96	; 0x60
 8002970:	613b      	str	r3, [r7, #16]

	cnt = len;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800297c:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002984:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800298c:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	7d7b      	ldrb	r3, [r7, #21]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 800299a:	7dfa      	ldrb	r2, [r7, #23]
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d201      	bcs.n	80029a6 <u8g2_font_decode_len+0x4a>
			current = cnt;
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
 80029a4:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	889b      	ldrh	r3, [r3, #4]
 80029aa:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	88db      	ldrh	r3, [r3, #6]
 80029b0:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80029b2:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80029b6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	7c1b      	ldrb	r3, [r3, #16]
 80029be:	89b8      	ldrh	r0, [r7, #12]
 80029c0:	f7ff ff91 	bl	80028e6 <u8g2_add_vector_x>
 80029c4:	4603      	mov	r3, r0
 80029c6:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80029c8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80029cc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	7c1b      	ldrb	r3, [r3, #16]
 80029d4:	8978      	ldrh	r0, [r7, #10]
 80029d6:	f7ff ff4b 	bl	8002870 <u8g2_add_vector_y>
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 80029de:	78bb      	ldrb	r3, [r7, #2]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	7b9a      	ldrb	r2, [r3, #14]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 80029ee:	7dbb      	ldrb	r3, [r7, #22]
 80029f0:	b298      	uxth	r0, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	7c1b      	ldrb	r3, [r3, #16]
 80029f6:	897a      	ldrh	r2, [r7, #10]
 80029f8:	89b9      	ldrh	r1, [r7, #12]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	4603      	mov	r3, r0
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fcf2 	bl	80033e8 <u8g2_DrawHVLine>
 8002a04:	e013      	b.n	8002a2e <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	7b5b      	ldrb	r3, [r3, #13]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10f      	bne.n	8002a2e <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	7bda      	ldrb	r2, [r3, #15]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8002a18:	7dbb      	ldrb	r3, [r7, #22]
 8002a1a:	b298      	uxth	r0, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	7c1b      	ldrb	r3, [r3, #16]
 8002a20:	897a      	ldrh	r2, [r7, #10]
 8002a22:	89b9      	ldrh	r1, [r7, #12]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	4603      	mov	r3, r0
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fcdd 	bl	80033e8 <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 8002a2e:	7dfa      	ldrb	r2, [r7, #23]
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d309      	bcc.n	8002a4a <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 8002a36:	7dfa      	ldrb	r2, [r7, #23]
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	757b      	strb	r3, [r7, #21]
		ly++;
 8002a42:	7d3b      	ldrb	r3, [r7, #20]
 8002a44:	3301      	adds	r3, #1
 8002a46:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8002a48:	e79d      	b.n	8002986 <u8g2_font_decode_len+0x2a>
			break;
 8002a4a:	bf00      	nop
	}
	lx += cnt;
 8002a4c:	7d7a      	ldrb	r2, [r7, #21]
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	4413      	add	r3, r2
 8002a52:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8002a54:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8002a5c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	725a      	strb	r2, [r3, #9]

}
 8002a64:	bf00      	nop
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3360      	adds	r3, #96	; 0x60
 8002a7a:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002a8e:	4619      	mov	r1, r3
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff fe80 	bl	8002796 <u8g2_font_decode_get_unsigned_bits>
 8002a96:	4603      	mov	r3, r0
 8002a98:	b25a      	sxtb	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff fe75 	bl	8002796 <u8g2_font_decode_get_unsigned_bits>
 8002aac:	4603      	mov	r3, r0
 8002aae:	b25a      	sxtb	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	7b9b      	ldrb	r3, [r3, #14]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bf0c      	ite	eq
 8002ac6:	2301      	moveq	r3, #1
 8002ac8:	2300      	movne	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	73da      	strb	r2, [r3, #15]
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3360      	adds	r3, #96	; 0x60
 8002aea:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffbc 	bl	8002a6c <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002afa:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002b02:	4619      	mov	r1, r3
 8002b04:	6978      	ldr	r0, [r7, #20]
 8002b06:	f7ff fe90 	bl	800282a <u8g2_font_decode_get_signed_bits>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002b14:	4619      	mov	r1, r3
 8002b16:	6978      	ldr	r0, [r7, #20]
 8002b18:	f7ff fe87 	bl	800282a <u8g2_font_decode_get_signed_bits>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002b26:	4619      	mov	r1, r3
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f7ff fe7e 	bl	800282a <u8g2_font_decode_get_signed_bits>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f340 80d7 	ble.w	8002cec <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	8898      	ldrh	r0, [r3, #4]
 8002b42:	7cfa      	ldrb	r2, [r7, #19]
 8002b44:	7c7b      	ldrb	r3, [r7, #17]
 8002b46:	4413      	add	r3, r2
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	425b      	negs	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	b25a      	sxtb	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	7c1b      	ldrb	r3, [r3, #16]
 8002b54:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002b58:	f7ff fec5 	bl	80028e6 <u8g2_add_vector_x>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	88d8      	ldrh	r0, [r3, #6]
 8002b68:	7cfa      	ldrb	r2, [r7, #19]
 8002b6a:	7c7b      	ldrb	r3, [r7, #17]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	425b      	negs	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	b25a      	sxtb	r2, r3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	7c1b      	ldrb	r3, [r3, #16]
 8002b7a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002b7e:	f7ff fe77 	bl	8002870 <u8g2_add_vector_y>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	889b      	ldrh	r3, [r3, #4]
 8002b8e:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	88db      	ldrh	r3, [r3, #6]
 8002b94:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 8002b96:	8bfb      	ldrh	r3, [r7, #30]
 8002b98:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 8002b9a:	8b7b      	ldrh	r3, [r7, #26]
 8002b9c:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	7c1b      	ldrb	r3, [r3, #16]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d85a      	bhi.n	8002c5c <u8g2_font_decode_glyph+0x180>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <u8g2_font_decode_glyph+0xd0>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002bd9 	.word	0x08002bd9
 8002bb4:	08002c01 	.word	0x08002c01
 8002bb8:	08002c35 	.word	0x08002c35
			case 0:
				x1 += decode->glyph_width;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	8bbb      	ldrh	r3, [r7, #28]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 8002bca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	8b3b      	ldrh	r3, [r7, #24]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	833b      	strh	r3, [r7, #24]
				break;
 8002bd6:	e041      	b.n	8002c5c <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 8002bd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	8bfa      	ldrh	r2, [r7, #30]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002be4:	8bfb      	ldrh	r3, [r7, #30]
 8002be6:	3301      	adds	r3, #1
 8002be8:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002bea:	8bbb      	ldrh	r3, [r7, #28]
 8002bec:	3301      	adds	r3, #1
 8002bee:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	8b3b      	ldrh	r3, [r7, #24]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	833b      	strh	r3, [r7, #24]
				break;
 8002bfe:	e02d      	b.n	8002c5c <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	8bfa      	ldrh	r2, [r7, #30]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002c0e:	8bfb      	ldrh	r3, [r7, #30]
 8002c10:	3301      	adds	r3, #1
 8002c12:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002c14:	8bbb      	ldrh	r3, [r7, #28]
 8002c16:	3301      	adds	r3, #1
 8002c18:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 8002c1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	8b7a      	ldrh	r2, [r7, #26]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	837b      	strh	r3, [r7, #26]
				y1++;
 8002c2c:	8b3b      	ldrh	r3, [r7, #24]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	833b      	strh	r3, [r7, #24]
				break;
 8002c32:	e013      	b.n	8002c5c <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 8002c34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	8bbb      	ldrh	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8b7a      	ldrh	r2, [r7, #26]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002c4e:	8b7b      	ldrh	r3, [r7, #26]
 8002c50:	3301      	adds	r3, #1
 8002c52:	837b      	strh	r3, [r7, #26]
				y1++;
 8002c54:	8b3b      	ldrh	r3, [r7, #24]
 8002c56:	3301      	adds	r3, #1
 8002c58:	833b      	strh	r3, [r7, #24]
				break;
 8002c5a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8002c5c:	8bb8      	ldrh	r0, [r7, #28]
 8002c5e:	8b7a      	ldrh	r2, [r7, #26]
 8002c60:	8bf9      	ldrh	r1, [r7, #30]
 8002c62:	8b3b      	ldrh	r3, [r7, #24]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	4603      	mov	r3, r0
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fcf6 	bl	800365a <u8g2_IsIntersection>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <u8g2_font_decode_glyph+0x19e>
				return d;
 8002c74:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002c78:	e03a      	b.n	8002cf0 <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2200      	movs	r2, #0
 8002c84:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6978      	ldr	r0, [r7, #20]
 8002c90:	f7ff fd81 	bl	8002796 <u8g2_font_decode_get_unsigned_bits>
 8002c94:	4603      	mov	r3, r0
 8002c96:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6978      	ldr	r0, [r7, #20]
 8002ca2:	f7ff fd78 	bl	8002796 <u8g2_font_decode_get_unsigned_bits>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	2200      	movs	r2, #0
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff fe53 	bl	800295c <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 8002cb6:	7bbb      	ldrb	r3, [r7, #14]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fe4d 	bl	800295c <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f7ff fd66 	bl	8002796 <u8g2_font_decode_get_unsigned_bits>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ec      	bne.n	8002caa <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002cd6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	dd00      	ble.n	8002ce0 <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002cde:	e7d2      	b.n	8002c86 <u8g2_font_decode_glyph+0x1aa>
				break;
 8002ce0:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	7b9a      	ldrb	r2, [r3, #14]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 8002cec:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3720      	adds	r7, #32
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d08:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3317      	adds	r3, #23
 8002d0e:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	2bff      	cmp	r3, #255	; 0xff
 8002d14:	d82a      	bhi.n	8002d6c <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	2b60      	cmp	r3, #96	; 0x60
 8002d1a:	d907      	bls.n	8002d2c <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002d22:	461a      	mov	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	4413      	add	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	e009      	b.n	8002d40 <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d906      	bls.n	8002d40 <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002d38:	461a      	mov	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3301      	adds	r3, #1
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d04e      	beq.n	8002de8 <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	887a      	ldrh	r2, [r7, #2]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d102      	bne.n	8002d5c <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	e049      	b.n	8002df0 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	4413      	add	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002d6a:	e7e9      	b.n	8002d40 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002d72:	461a      	mov	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	4413      	add	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002d7e:	2100      	movs	r1, #0
 8002d80:	6938      	ldr	r0, [r7, #16]
 8002d82:	f7ff fc40 	bl	8002606 <u8g2_font_get_word>
 8002d86:	4603      	mov	r3, r0
 8002d88:	461a      	mov	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002d90:	2102      	movs	r1, #2
 8002d92:	6938      	ldr	r0, [r7, #16]
 8002d94:	f7ff fc37 	bl	8002606 <u8g2_font_get_word>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 8002da2:	89fa      	ldrh	r2, [r7, #14]
 8002da4:	887b      	ldrh	r3, [r7, #2]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d3e9      	bcc.n	8002d7e <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 8002db0:	89fb      	ldrh	r3, [r7, #14]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	3301      	adds	r3, #1
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	89fb      	ldrh	r3, [r7, #14]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002dc4:	89fb      	ldrh	r3, [r7, #14]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d010      	beq.n	8002dec <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 8002dca:	89fa      	ldrh	r2, [r7, #14]
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d102      	bne.n	8002dd8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3303      	adds	r3, #3
 8002dd6:	e00b      	b.n	8002df0 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3302      	adds	r3, #2
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	4413      	add	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 8002de6:	e7e0      	b.n	8002daa <u8g2_font_get_glyph_data+0xb2>
				break;
 8002de8:	bf00      	nop
 8002dea:	e000      	b.n	8002dee <u8g2_font_get_glyph_data+0xf6>
				break;
 8002dec:	bf00      	nop
		}
	}
#endif

	return NULL;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	817b      	strh	r3, [r7, #10]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	813b      	strh	r3, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 8002e12:	2300      	movs	r3, #0
 8002e14:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	897a      	ldrh	r2, [r7, #10]
 8002e1a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	893a      	ldrh	r2, [r7, #8]
 8002e22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f7ff ff64 	bl	8002cf8 <u8g2_font_get_glyph_data>
 8002e30:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002e38:	6939      	ldr	r1, [r7, #16]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f7ff fe4e 	bl	8002adc <u8g2_font_decode_glyph>
 8002e40:	4603      	mov	r3, r0
 8002e42:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 8002e44:	8afb      	ldrh	r3, [r7, #22]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ff4a 	bl	8002cf8 <u8g2_font_get_glyph_data>
 8002e64:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <u8g2_GetGlyphWidth+0x22>
		return 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e027      	b.n	8002ec0 <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fdfa 	bl	8002a6c <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f7ff fccf 	bl	800282a <u8g2_font_decode_get_signed_bits>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f7ff fcc0 	bl	800282a <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4610      	mov	r0, r2
 8002eba:	f7ff fcb6 	bl	800282a <u8g2_font_decode_get_signed_bits>
 8002ebe:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
	...

08002ee8 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	817b      	strh	r3, [r7, #10]
 8002efa:	460b      	mov	r3, r1
 8002efc:	813b      	strh	r3, [r7, #8]
 8002efe:	4613      	mov	r3, r2
 8002f00:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d833      	bhi.n	8002f74 <u8g2_DrawGlyph+0x8c>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <u8g2_DrawGlyph+0x2c>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f25 	.word	0x08002f25
 8002f18:	08002f39 	.word	0x08002f39
 8002f1c:	08002f4d 	.word	0x08002f4d
 8002f20:	08002f61 	.word	0x08002f61
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	4798      	blx	r3
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	893b      	ldrh	r3, [r7, #8]
 8002f32:	4413      	add	r3, r2
 8002f34:	813b      	strh	r3, [r7, #8]
		break;
 8002f36:	e01d      	b.n	8002f74 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	4798      	blx	r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	897b      	ldrh	r3, [r7, #10]
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	817b      	strh	r3, [r7, #10]
		break;
 8002f4a:	e013      	b.n	8002f74 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	4798      	blx	r3
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	893b      	ldrh	r3, [r7, #8]
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	813b      	strh	r3, [r7, #8]
		break;
 8002f5e:	e009      	b.n	8002f74 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	4798      	blx	r3
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	897b      	ldrh	r3, [r7, #10]
 8002f6e:	4413      	add	r3, r2
 8002f70:	817b      	strh	r3, [r7, #10]
		break;
 8002f72:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	893a      	ldrh	r2, [r7, #8]
 8002f78:	8979      	ldrh	r1, [r7, #10]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff ff3c 	bl	8002df8 <u8g2_font_draw_glyph>
 8002f80:	4603      	mov	r3, r0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop

08002f8c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	817b      	strh	r3, [r7, #10]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fd86 	bl	8003ab0 <u8x8_utf8_init>
	sum = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	4798      	blx	r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 8002fba:	8abb      	ldrh	r3, [r7, #20]
 8002fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d038      	beq.n	8003036 <u8g2_draw_string+0xaa>
			break;
		str++;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 8002fca:	8abb      	ldrh	r3, [r7, #20]
 8002fcc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d0e9      	beq.n	8002fa8 <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002fd4:	8abb      	ldrh	r3, [r7, #20]
 8002fd6:	893a      	ldrh	r2, [r7, #8]
 8002fd8:	8979      	ldrh	r1, [r7, #10]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff ff84 	bl	8002ee8 <u8g2_DrawGlyph>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d81e      	bhi.n	800302c <u8g2_draw_string+0xa0>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <u8g2_draw_string+0x68>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	0800300f 	.word	0x0800300f
 8002ffc:	08003019 	.word	0x08003019
 8003000:	08003023 	.word	0x08003023
			case 0:
				x += delta;
 8003004:	897a      	ldrh	r2, [r7, #10]
 8003006:	8a7b      	ldrh	r3, [r7, #18]
 8003008:	4413      	add	r3, r2
 800300a:	817b      	strh	r3, [r7, #10]
				break;
 800300c:	e00e      	b.n	800302c <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 800300e:	893a      	ldrh	r2, [r7, #8]
 8003010:	8a7b      	ldrh	r3, [r7, #18]
 8003012:	4413      	add	r3, r2
 8003014:	813b      	strh	r3, [r7, #8]
				break;
 8003016:	e009      	b.n	800302c <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 8003018:	897a      	ldrh	r2, [r7, #10]
 800301a:	8a7b      	ldrh	r3, [r7, #18]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	817b      	strh	r3, [r7, #10]
				break;
 8003020:	e004      	b.n	800302c <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 8003022:	893a      	ldrh	r2, [r7, #8]
 8003024:	8a7b      	ldrh	r3, [r7, #18]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	813b      	strh	r3, [r7, #8]
				break;
 800302a:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 800302c:	8afa      	ldrh	r2, [r7, #22]
 800302e:	8a7b      	ldrh	r3, [r7, #18]
 8003030:	4413      	add	r3, r2
 8003032:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003034:	e7b8      	b.n	8002fa8 <u8g2_draw_string+0x1c>
			break;
 8003036:	bf00      	nop
		}
	}
	return sum;
 8003038:	8afb      	ldrh	r3, [r7, #22]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop

08003044 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	817b      	strh	r3, [r7, #10]
 8003052:	4613      	mov	r3, r2
 8003054:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4a06      	ldr	r2, [pc, #24]	; (8003074 <u8g2_DrawUTF8+0x30>)
 800305a:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 800305c:	893a      	ldrh	r2, [r7, #8]
 800305e:	8979      	ldrh	r1, [r7, #10]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff ff92 	bl	8002f8c <u8g2_draw_string>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	08003af7 	.word	0x08003af7

08003078 <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	2b00      	cmp	r3, #0
 8003086:	d05d      	beq.n	8003144 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d04d      	beq.n	8003146 <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d11c      	bne.n	80030ee <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80030c0:	429a      	cmp	r2, r3
 80030c2:	da05      	bge.n	80030d0 <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80030dc:	429a      	cmp	r2, r3
 80030de:	dd32      	ble.n	8003146 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80030ec:	e02b      	b.n	8003146 <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80030f4:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80030fc:	4619      	mov	r1, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003104:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 8003106:	429a      	cmp	r2, r3
 8003108:	da0d      	bge.n	8003126 <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003110:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003118:	b2db      	uxtb	r3, r3
 800311a:	4413      	add	r3, r2
 800311c:	b2db      	uxtb	r3, r3
 800311e:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003132:	429a      	cmp	r2, r3
 8003134:	dd07      	ble.n	8003146 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003142:	e000      	b.n	8003146 <u8g2_UpdateRefHeight+0xce>
		return;
 8003144:	bf00      	nop
	}
}
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
	return 0;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr
	...

08003164 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a03      	ldr	r2, [pc, #12]	; (800317c <u8g2_SetFontPosBaseline+0x18>)
 8003170:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	0800314f 	.word	0x0800314f

08003180 <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 800318e:	81fb      	strh	r3, [r7, #14]
	tmp++;
 8003190:	89fb      	ldrh	r3, [r7, #14]
 8003192:	3301      	adds	r3, #1
 8003194:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8003196:	89fb      	ldrh	r3, [r7, #14]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
	...

080031a4 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a03      	ldr	r2, [pc, #12]	; (80031bc <u8g2_SetFontPosTop+0x18>)
 80031b0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	08003181 	.word	0x08003181

080031c0 <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d00b      	beq.n	80031ec <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3374      	adds	r3, #116	; 0x74
 80031de:	6839      	ldr	r1, [r7, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fa2f 	bl	8002644 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ff46 	bl	8003078 <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 80031fe:	23c0      	movs	r3, #192	; 0xc0
 8003200:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fc50 	bl	8003ab0 <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	7812      	ldrb	r2, [r2, #0]
 8003220:	4611      	mov	r1, r2
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
 8003226:	4603      	mov	r3, r0
 8003228:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 800322a:	893b      	ldrh	r3, [r7, #8]
 800322c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003230:	4293      	cmp	r3, r2
 8003232:	d01c      	beq.n	800326e <u8g2_string_width+0x7a>
			break;
		str++;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 800323a:	893b      	ldrh	r3, [r7, #8]
 800323c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003240:	4293      	cmp	r3, r2
 8003242:	d0e9      	beq.n	8003218 <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 8003244:	893b      	ldrh	r3, [r7, #8]
 8003246:	4619      	mov	r1, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fe00 	bl	8002e4e <u8g2_GetGlyphWidth>
 800324e:	4603      	mov	r3, r0
 8003250:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 8003252:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003256:	f113 0f40 	cmn.w	r3, #64	; 0x40
 800325a:	d103      	bne.n	8003264 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003262:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 8003264:	89fa      	ldrh	r2, [r7, #14]
 8003266:	89bb      	ldrh	r3, [r7, #12]
 8003268:	4413      	add	r3, r2
 800326a:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 800326c:	e7d4      	b.n	8003218 <u8g2_string_width+0x24>
			break;
 800326e:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01b      	beq.n	80032b2 <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 800327a:	89fa      	ldrh	r2, [r7, #14]
 800327c:	89bb      	ldrh	r3, [r7, #12]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8003288:	b29a      	uxth	r2, r3
 800328a:	89fb      	ldrh	r3, [r7, #14]
 800328c:	4413      	add	r3, r2
 800328e:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8003296:	b29a      	uxth	r2, r3
 8003298:	89fb      	ldrh	r3, [r7, #14]
 800329a:	4413      	add	r3, r2
 800329c:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 800329e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	dd05      	ble.n	80032b2 <u8g2_string_width+0xbe>
			w += initial_x_offset;
 80032a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	89fb      	ldrh	r3, [r7, #14]
 80032ae:	4413      	add	r3, r2
 80032b0:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 80032b2:	89fb      	ldrh	r3, [r7, #14]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a05      	ldr	r2, [pc, #20]	; (80032e0 <u8g2_GetStrWidth+0x24>)
 80032ca:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 80032cc:	6839      	ldr	r1, [r7, #0]
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff90 	bl	80031f4 <u8g2_string_width>
 80032d4:	4603      	mov	r3, r0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	08003acb 	.word	0x08003acb

080032e4 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a05      	ldr	r2, [pc, #20]	; (8003308 <u8g2_GetUTF8Width+0x24>)
 80032f2:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ff7c 	bl	80031f4 <u8g2_string_width>
 80032fc:	4603      	mov	r3, r0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	08003af7 	.word	0x08003af7

0800330c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	4611      	mov	r1, r2
 8003318:	461a      	mov	r2, r3
 800331a:	460b      	mov	r3, r1
 800331c:	80fb      	strh	r3, [r7, #6]
 800331e:	4613      	mov	r3, r2
 8003320:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003328:	8afb      	ldrh	r3, [r7, #22]
 800332a:	82bb      	strh	r3, [r7, #20]
  b += *len;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	881a      	ldrh	r2, [r3, #0]
 8003330:	8abb      	ldrh	r3, [r7, #20]
 8003332:	4413      	add	r3, r2
 8003334:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003336:	8afa      	ldrh	r2, [r7, #22]
 8003338:	8abb      	ldrh	r3, [r7, #20]
 800333a:	429a      	cmp	r2, r3
 800333c:	d90b      	bls.n	8003356 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800333e:	8afa      	ldrh	r2, [r7, #22]
 8003340:	88bb      	ldrh	r3, [r7, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	d205      	bcs.n	8003352 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003346:	88bb      	ldrh	r3, [r7, #4]
 8003348:	82bb      	strh	r3, [r7, #20]
      b--;
 800334a:	8abb      	ldrh	r3, [r7, #20]
 800334c:	3b01      	subs	r3, #1
 800334e:	82bb      	strh	r3, [r7, #20]
 8003350:	e001      	b.n	8003356 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003356:	8afa      	ldrh	r2, [r7, #22]
 8003358:	88bb      	ldrh	r3, [r7, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	d301      	bcc.n	8003362 <u8g2_clip_intersection2+0x56>
    return 0;
 800335e:	2300      	movs	r3, #0
 8003360:	e01c      	b.n	800339c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8003362:	8aba      	ldrh	r2, [r7, #20]
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	429a      	cmp	r2, r3
 8003368:	d801      	bhi.n	800336e <u8g2_clip_intersection2+0x62>
    return 0;
 800336a:	2300      	movs	r3, #0
 800336c:	e016      	b.n	800339c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800336e:	8afa      	ldrh	r2, [r7, #22]
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	429a      	cmp	r2, r3
 8003374:	d201      	bcs.n	800337a <u8g2_clip_intersection2+0x6e>
    a = c;
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800337a:	8aba      	ldrh	r2, [r7, #20]
 800337c:	88bb      	ldrh	r3, [r7, #4]
 800337e:	429a      	cmp	r2, r3
 8003380:	d901      	bls.n	8003386 <u8g2_clip_intersection2+0x7a>
    b = d;
 8003382:	88bb      	ldrh	r3, [r7, #4]
 8003384:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8afa      	ldrh	r2, [r7, #22]
 800338a:	801a      	strh	r2, [r3, #0]
  b -= a;
 800338c:	8aba      	ldrh	r2, [r7, #20]
 800338e:	8afb      	ldrh	r3, [r7, #22]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	8aba      	ldrh	r2, [r7, #20]
 8003398:	801a      	strh	r2, [r3, #0]
  return 1;
 800339a:	2301      	movs	r3, #1
}
 800339c:	4618      	mov	r0, r3
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80033a6:	b590      	push	{r4, r7, lr}
 80033a8:	b087      	sub	sp, #28
 80033aa:	af02      	add	r7, sp, #8
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	4608      	mov	r0, r1
 80033b0:	4611      	mov	r1, r2
 80033b2:	461a      	mov	r2, r3
 80033b4:	4603      	mov	r3, r0
 80033b6:	817b      	strh	r3, [r7, #10]
 80033b8:	460b      	mov	r3, r1
 80033ba:	813b      	strh	r3, [r7, #8]
 80033bc:	4613      	mov	r3, r2
 80033be:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c4:	893a      	ldrh	r2, [r7, #8]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80033ce:	88f8      	ldrh	r0, [r7, #6]
 80033d0:	893a      	ldrh	r2, [r7, #8]
 80033d2:	8979      	ldrh	r1, [r7, #10]
 80033d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	4603      	mov	r3, r0
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	47a0      	blx	r4
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd90      	pop	{r4, r7, pc}

080033e8 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d075      	beq.n	80034f8 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d072      	beq.n	80034f8 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d91a      	bls.n	800344e <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003418:	f897 3020 	ldrb.w	r3, [r7, #32]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d109      	bne.n	8003434 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8003420:	897a      	ldrh	r2, [r7, #10]
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	b29b      	uxth	r3, r3
 8003428:	817b      	strh	r3, [r7, #10]
	  x++;
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	3301      	adds	r3, #1
 800342e:	b29b      	uxth	r3, r3
 8003430:	817b      	strh	r3, [r7, #10]
 8003432:	e00c      	b.n	800344e <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8003434:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d108      	bne.n	800344e <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800343c:	893a      	ldrh	r2, [r7, #8]
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	b29b      	uxth	r3, r3
 8003444:	813b      	strh	r3, [r7, #8]
	  y++;
 8003446:	893b      	ldrh	r3, [r7, #8]
 8003448:	3301      	adds	r3, #1
 800344a:	b29b      	uxth	r3, r3
 800344c:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800344e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800345a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d11a      	bne.n	8003498 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003468:	893b      	ldrh	r3, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d83b      	bhi.n	80034e6 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003474:	893b      	ldrh	r3, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	d937      	bls.n	80034ea <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003486:	1db9      	adds	r1, r7, #6
 8003488:	f107 000a 	add.w	r0, r7, #10
 800348c:	f7ff ff3e 	bl	800330c <u8g2_clip_intersection2>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d11a      	bne.n	80034cc <u8g2_DrawHVLine+0xe4>
	  return;
 8003496:	e02f      	b.n	80034f8 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800349e:	897b      	ldrh	r3, [r7, #10]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d824      	bhi.n	80034ee <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80034aa:	897b      	ldrh	r3, [r7, #10]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d920      	bls.n	80034f2 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80034bc:	1db9      	adds	r1, r7, #6
 80034be:	f107 0008 	add.w	r0, r7, #8
 80034c2:	f7ff ff23 	bl	800330c <u8g2_clip_intersection2>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d014      	beq.n	80034f6 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	689c      	ldr	r4, [r3, #8]
 80034d2:	8979      	ldrh	r1, [r7, #10]
 80034d4:	893a      	ldrh	r2, [r7, #8]
 80034d6:	88f8      	ldrh	r0, [r7, #6]
 80034d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	4603      	mov	r3, r0
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	47a0      	blx	r4
 80034e4:	e008      	b.n	80034f8 <u8g2_DrawHVLine+0x110>
	  return;
 80034e6:	bf00      	nop
 80034e8:	e006      	b.n	80034f8 <u8g2_DrawHVLine+0x110>
	  return;
 80034ea:	bf00      	nop
 80034ec:	e004      	b.n	80034f8 <u8g2_DrawHVLine+0x110>
	  return;
 80034ee:	bf00      	nop
 80034f0:	e002      	b.n	80034f8 <u8g2_DrawHVLine+0x110>
	  return;
 80034f2:	bf00      	nop
 80034f4:	e000      	b.n	80034f8 <u8g2_DrawHVLine+0x110>
	  return;
 80034f6:	bf00      	nop
    }
}
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd90      	pop	{r4, r7, pc}

080034fe <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af02      	add	r7, sp, #8
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	4608      	mov	r0, r1
 8003508:	4611      	mov	r1, r2
 800350a:	461a      	mov	r2, r3
 800350c:	4603      	mov	r3, r0
 800350e:	817b      	strh	r3, [r7, #10]
 8003510:	460b      	mov	r3, r1
 8003512:	813b      	strh	r3, [r7, #8]
 8003514:	4613      	mov	r3, r2
 8003516:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	893a      	ldrh	r2, [r7, #8]
 800351c:	8979      	ldrh	r1, [r7, #10]
 800351e:	2000      	movs	r0, #0
 8003520:	9000      	str	r0, [sp, #0]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7ff ff60 	bl	80033e8 <u8g2_DrawHVLine>
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	461a      	mov	r2, r3
 800353e:	4603      	mov	r3, r0
 8003540:	817b      	strh	r3, [r7, #10]
 8003542:	460b      	mov	r3, r1
 8003544:	813b      	strh	r3, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	893a      	ldrh	r2, [r7, #8]
 800354e:	8979      	ldrh	r1, [r7, #10]
 8003550:	2001      	movs	r0, #1
 8003552:	9000      	str	r0, [sp, #0]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff ff47 	bl	80033e8 <u8g2_DrawHVLine>
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af02      	add	r7, sp, #8
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	807b      	strh	r3, [r7, #2]
 800356e:	4613      	mov	r3, r2
 8003570:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8003578:	883a      	ldrh	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d31a      	bcc.n	80035b4 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003584:	883a      	ldrh	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d216      	bcs.n	80035b8 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003590:	887a      	ldrh	r2, [r7, #2]
 8003592:	429a      	cmp	r2, r3
 8003594:	d312      	bcc.n	80035bc <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800359c:	887a      	ldrh	r2, [r7, #2]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d20e      	bcs.n	80035c0 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80035a2:	883a      	ldrh	r2, [r7, #0]
 80035a4:	8879      	ldrh	r1, [r7, #2]
 80035a6:	2300      	movs	r3, #0
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2301      	movs	r3, #1
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff1b 	bl	80033e8 <u8g2_DrawHVLine>
 80035b2:	e006      	b.n	80035c2 <u8g2_DrawPixel+0x60>
    return;
 80035b4:	bf00      	nop
 80035b6:	e004      	b.n	80035c2 <u8g2_DrawPixel+0x60>
    return;
 80035b8:	bf00      	nop
 80035ba:	e002      	b.n	80035c2 <u8g2_DrawPixel+0x60>
    return;
 80035bc:	bf00      	nop
 80035be:	e000      	b.n	80035c2 <u8g2_DrawPixel+0x60>
    return;
 80035c0:	bf00      	nop
}
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d903      	bls.n	80035ea <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80035f4:	b490      	push	{r4, r7}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4604      	mov	r4, r0
 80035fc:	4608      	mov	r0, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	461a      	mov	r2, r3
 8003602:	4623      	mov	r3, r4
 8003604:	80fb      	strh	r3, [r7, #6]
 8003606:	4603      	mov	r3, r0
 8003608:	80bb      	strh	r3, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	807b      	strh	r3, [r7, #2]
 800360e:	4613      	mov	r3, r2
 8003610:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	88bb      	ldrh	r3, [r7, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d20d      	bcs.n	8003636 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800361a:	883a      	ldrh	r2, [r7, #0]
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	429a      	cmp	r2, r3
 8003620:	d901      	bls.n	8003626 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8003622:	2301      	movs	r3, #1
 8003624:	e014      	b.n	8003650 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	883b      	ldrh	r3, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d901      	bls.n	8003632 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800362e:	2301      	movs	r3, #1
 8003630:	e00e      	b.n	8003650 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003632:	2300      	movs	r3, #0
 8003634:	e00c      	b.n	8003650 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003636:	883a      	ldrh	r2, [r7, #0]
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	429a      	cmp	r2, r3
 800363c:	d907      	bls.n	800364e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	883b      	ldrh	r3, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d901      	bls.n	800364a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003646:	2301      	movs	r3, #1
 8003648:	e002      	b.n	8003650 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800364e:	2300      	movs	r3, #0
    }
  }
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bc90      	pop	{r4, r7}
 8003658:	4770      	bx	lr

0800365a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	4608      	mov	r0, r1
 8003664:	4611      	mov	r1, r2
 8003666:	461a      	mov	r2, r3
 8003668:	4603      	mov	r3, r0
 800366a:	817b      	strh	r3, [r7, #10]
 800366c:	460b      	mov	r3, r1
 800366e:	813b      	strh	r3, [r7, #8]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8003680:	8b3b      	ldrh	r3, [r7, #24]
 8003682:	893a      	ldrh	r2, [r7, #8]
 8003684:	f7ff ffb6 	bl	80035f4 <u8g2_is_intersection_decision_tree>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <u8g2_IsIntersection+0x38>
    return 0; 
 800368e:	2300      	movs	r3, #0
 8003690:	e00a      	b.n	80036a8 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	897a      	ldrh	r2, [r7, #10]
 80036a2:	f7ff ffa7 	bl	80035f4 <u8g2_is_intersection_decision_tree>
 80036a6:	4603      	mov	r3, r0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	817b      	strh	r3, [r7, #10]
 80036c2:	460b      	mov	r3, r1
 80036c4:	813b      	strh	r3, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80036ca:	893b      	ldrh	r3, [r7, #8]
 80036cc:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80036ce:	7efb      	ldrb	r3, [r7, #27]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80036da:	7e3a      	ldrb	r2, [r7, #24]
 80036dc:	7efb      	ldrb	r3, [r7, #27]
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d801      	bhi.n	80036fa <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80036f6:	7e3b      	ldrb	r3, [r7, #24]
 80036f8:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003700:	2b01      	cmp	r3, #1
 8003702:	d001      	beq.n	8003708 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003704:	7e3b      	ldrb	r3, [r7, #24]
 8003706:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003708:	893b      	ldrh	r3, [r7, #8]
 800370a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800370c:	8afb      	ldrh	r3, [r7, #22]
 800370e:	f023 0307 	bic.w	r3, r3, #7
 8003712:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	7c1b      	ldrb	r3, [r3, #16]
 800371a:	b29b      	uxth	r3, r3
 800371c:	8afa      	ldrh	r2, [r7, #22]
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003728:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800372a:	8afb      	ldrh	r3, [r7, #22]
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	4413      	add	r3, r2
 8003730:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8003732:	897b      	ldrh	r3, [r7, #10]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800373a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d117      	bne.n	8003772 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	7ebb      	ldrb	r3, [r7, #26]
 8003748:	4313      	orrs	r3, r2
 800374a:	b2da      	uxtb	r2, r3
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	781a      	ldrb	r2, [r3, #0]
 8003754:	7e7b      	ldrb	r3, [r7, #25]
 8003756:	4053      	eors	r3, r2
 8003758:	b2da      	uxtb	r2, r3
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3301      	adds	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
	len--;
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	3b01      	subs	r3, #1
 8003768:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e8      	bne.n	8003742 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003770:	e038      	b.n	80037e4 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	781a      	ldrb	r2, [r3, #0]
 8003776:	7ebb      	ldrb	r3, [r7, #26]
 8003778:	4313      	orrs	r3, r2
 800377a:	b2da      	uxtb	r2, r3
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	7e7b      	ldrb	r3, [r7, #25]
 8003786:	4053      	eors	r3, r2
 8003788:	b2da      	uxtb	r2, r3
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800378e:	7efb      	ldrb	r3, [r7, #27]
 8003790:	3301      	adds	r3, #1
 8003792:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003794:	7efb      	ldrb	r3, [r7, #27]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	76fb      	strb	r3, [r7, #27]
      len--;
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	3b01      	subs	r3, #1
 80037a0:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80037a2:	7efb      	ldrb	r3, [r7, #27]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d114      	bne.n	80037d2 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80037ac:	461a      	mov	r2, r3
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d801      	bhi.n	80037c2 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80037be:	2301      	movs	r3, #1
 80037c0:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d008      	beq.n	80037de <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80037cc:	2301      	movs	r3, #1
 80037ce:	767b      	strb	r3, [r7, #25]
 80037d0:	e005      	b.n	80037de <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80037d2:	7ebb      	ldrb	r3, [r7, #26]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80037d8:	7e7b      	ldrb	r3, [r7, #25]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1c6      	bne.n	8003772 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80037e4:	bf00      	nop
 80037e6:	3724      	adds	r7, #36	; 0x24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800380c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003816:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	79fa      	ldrb	r2, [r7, #7]
 8003852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7ff ffad 	bl	80037ee <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff fc65 	bl	8003164 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80038a2:	bf00      	nop
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b085      	sub	sp, #20
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038be:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80038c0:	89fb      	ldrh	r3, [r7, #14]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	89fa      	ldrh	r2, [r7, #14]
 80038ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	7c1b      	ldrb	r3, [r3, #16]
 80038d0:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	89fa      	ldrh	r2, [r7, #14]
 80038dc:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038e4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80038e6:	89fb      	ldrh	r3, [r7, #14]
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	89fa      	ldrh	r2, [r7, #14]
 80038f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038f8:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80038fa:	89fb      	ldrh	r3, [r7, #14]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003902:	4413      	add	r3, r2
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	7c52      	ldrb	r2, [r2, #17]
 8003908:	4293      	cmp	r3, r2
 800390a:	dd08      	ble.n	800391e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	7c5b      	ldrb	r3, [r3, #17]
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003918:	b29b      	uxth	r3, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800391e:	89fb      	ldrh	r3, [r7, #14]
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003940:	89fb      	ldrh	r3, [r7, #14]
 8003942:	4413      	add	r3, r2
 8003944:	b29a      	uxth	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	8a9a      	ldrh	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	8ada      	ldrh	r2, [r3, #22]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af02      	add	r7, sp, #8
 8003970:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	4603      	mov	r3, r0
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fe63 	bl	800365a <u8g2_IsIntersection>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d104      	bne.n	80039a4 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80039a2:	e03b      	b.n	8003a1c <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d205      	bcs.n	80039c8 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d905      	bls.n	80039e4 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d205      	bcs.n	8003a00 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d905      	bls.n	8003a1c <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff ff3c 	bl	80038aa <u8g2_update_dimension_common>
}
 8003a32:	bf00      	nop
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff7b 	bl	800396a <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	813b      	strh	r3, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003a96:	88f8      	ldrh	r0, [r7, #6]
 8003a98:	893a      	ldrh	r2, [r7, #8]
 8003a9a:	8979      	ldrh	r1, [r7, #10]
 8003a9c:	7e3b      	ldrb	r3, [r7, #24]
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff fc7f 	bl	80033a6 <u8g2_draw_hv_line_2dir>
}
 8003aa8:	bf00      	nop
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <u8x8_ascii_next+0x18>
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	2b0a      	cmp	r3, #10
 8003ae0:	d102      	bne.n	8003ae8 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ae6:	e001      	b.n	8003aec <u8x8_ascii_next+0x22>
  return b;
 8003ae8:	78fb      	ldrb	r3, [r7, #3]
 8003aea:	b29b      	uxth	r3, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <u8x8_utf8_next+0x18>
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	2b0a      	cmp	r3, #10
 8003b0c:	d102      	bne.n	8003b14 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8003b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b12:	e06e      	b.n	8003bf2 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d145      	bne.n	8003baa <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8003b1e:	78fb      	ldrb	r3, [r7, #3]
 8003b20:	2bfb      	cmp	r3, #251	; 0xfb
 8003b22:	d908      	bls.n	8003b36 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2205      	movs	r2, #5
 8003b28:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	70fb      	strb	r3, [r7, #3]
 8003b34:	e032      	b.n	8003b9c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	2bf7      	cmp	r3, #247	; 0xf7
 8003b3a:	d908      	bls.n	8003b4e <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2204      	movs	r2, #4
 8003b40:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	70fb      	strb	r3, [r7, #3]
 8003b4c:	e026      	b.n	8003b9c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	2bef      	cmp	r3, #239	; 0xef
 8003b52:	d908      	bls.n	8003b66 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2203      	movs	r2, #3
 8003b58:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	70fb      	strb	r3, [r7, #3]
 8003b64:	e01a      	b.n	8003b9c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	2bdf      	cmp	r3, #223	; 0xdf
 8003b6a:	d908      	bls.n	8003b7e <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	70fb      	strb	r3, [r7, #3]
 8003b7c:	e00e      	b.n	8003b9c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	2bbf      	cmp	r3, #191	; 0xbf
 8003b82:	d908      	bls.n	8003b96 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	70fb      	strb	r3, [r7, #3]
 8003b94:	e002      	b.n	8003b9c <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	e02a      	b.n	8003bf2 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003ba4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003ba8:	e023      	b.n	8003bf2 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8c1b      	ldrh	r3, [r3, #32]
 8003bbe:	019b      	lsls	r3, r3, #6
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bcc:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8c1a      	ldrh	r2, [r3, #32]
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8003be8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003bec:	e001      	b.n	8003bf2 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8c1b      	ldrh	r3, [r3, #32]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr

08003bfc <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691c      	ldr	r4, [r3, #16]
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2120      	movs	r1, #32
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	47a0      	blx	r4
 8003c16:	4603      	mov	r3, r0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd90      	pop	{r4, r7, pc}

08003c20 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	691c      	ldr	r4, [r3, #16]
 8003c32:	7afa      	ldrb	r2, [r7, #11]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2117      	movs	r1, #23
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	47a0      	blx	r4
 8003c3c:	4603      	mov	r3, r0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}

08003c46 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003c52:	1cfb      	adds	r3, r7, #3
 8003c54:	461a      	mov	r2, r3
 8003c56:	2101      	movs	r1, #1
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff ffe1 	bl	8003c20 <u8x8_byte_SendBytes>
 8003c5e:	4603      	mov	r3, r0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68dc      	ldr	r4, [r3, #12]
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2115      	movs	r1, #21
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	47a0      	blx	r4
 8003c82:	4603      	mov	r3, r0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}

08003c8c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003c8c:	b590      	push	{r4, r7, lr}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68dc      	ldr	r4, [r3, #12]
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2116      	movs	r1, #22
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	47a0      	blx	r4
 8003ca6:	4603      	mov	r3, r0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd90      	pop	{r4, r7, pc}

08003cb0 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003cb0:	b590      	push	{r4, r7, lr}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	68dc      	ldr	r4, [r3, #12]
 8003cc2:	7afa      	ldrb	r2, [r7, #11]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2117      	movs	r1, #23
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	47a0      	blx	r4
 8003ccc:	4603      	mov	r3, r0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd90      	pop	{r4, r7, pc}

08003cd6 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003cd6:	b590      	push	{r4, r7, lr}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68dc      	ldr	r4, [r3, #12]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2118      	movs	r1, #24
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	47a0      	blx	r4
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd90      	pop	{r4, r7, pc}

08003cf6 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003cf6:	b590      	push	{r4, r7, lr}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68dc      	ldr	r4, [r3, #12]
 8003d02:	2300      	movs	r3, #0
 8003d04:	2200      	movs	r2, #0
 8003d06:	2119      	movs	r1, #25
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	47a0      	blx	r4
 8003d0c:	4603      	mov	r3, r0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd90      	pop	{r4, r7, pc}

08003d16 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003d16:	b590      	push	{r4, r7, lr}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	73fb      	strb	r3, [r7, #15]
    data++;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2bfe      	cmp	r3, #254	; 0xfe
 8003d30:	d031      	beq.n	8003d96 <u8x8_cad_SendSequence+0x80>
 8003d32:	2bfe      	cmp	r3, #254	; 0xfe
 8003d34:	dc3d      	bgt.n	8003db2 <u8x8_cad_SendSequence+0x9c>
 8003d36:	2b19      	cmp	r3, #25
 8003d38:	dc3b      	bgt.n	8003db2 <u8x8_cad_SendSequence+0x9c>
 8003d3a:	2b18      	cmp	r3, #24
 8003d3c:	da23      	bge.n	8003d86 <u8x8_cad_SendSequence+0x70>
 8003d3e:	2b16      	cmp	r3, #22
 8003d40:	dc02      	bgt.n	8003d48 <u8x8_cad_SendSequence+0x32>
 8003d42:	2b15      	cmp	r3, #21
 8003d44:	da03      	bge.n	8003d4e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003d46:	e034      	b.n	8003db2 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003d48:	2b17      	cmp	r3, #23
 8003d4a:	d00e      	beq.n	8003d6a <u8x8_cad_SendSequence+0x54>
	return;
 8003d4c:	e031      	b.n	8003db2 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68dc      	ldr	r4, [r3, #12]
 8003d58:	7bba      	ldrb	r2, [r7, #14]
 8003d5a:	7bf9      	ldrb	r1, [r7, #15]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	47a0      	blx	r4
	  data++;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	3301      	adds	r3, #1
 8003d66:	603b      	str	r3, [r7, #0]
	  break;
 8003d68:	e022      	b.n	8003db0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003d70:	f107 030e 	add.w	r3, r7, #14
 8003d74:	461a      	mov	r2, r3
 8003d76:	2101      	movs	r1, #1
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff99 	bl	8003cb0 <u8x8_cad_SendData>
	  data++;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	603b      	str	r3, [r7, #0]
	  break;
 8003d84:	e014      	b.n	8003db0 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68dc      	ldr	r4, [r3, #12]
 8003d8a:	7bf9      	ldrb	r1, [r7, #15]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2200      	movs	r2, #0
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	47a0      	blx	r4
	  break;
 8003d94:	e00c      	b.n	8003db0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003d9c:	7bbb      	ldrb	r3, [r7, #14]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2129      	movs	r1, #41	; 0x29
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f9ed 	bl	8004182 <u8x8_gpio_call>
	  data++;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	3301      	adds	r3, #1
 8003dac:	603b      	str	r3, [r7, #0]
	  break;
 8003dae:	bf00      	nop
    cmd = *data;
 8003db0:	e7b6      	b.n	8003d20 <u8x8_cad_SendSequence+0xa>
	return;
 8003db2:	bf00      	nop
    }
  }
}
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd90      	pop	{r4, r7, pc}
	...

08003dbc <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	72fb      	strb	r3, [r7, #11]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003dce:	7afb      	ldrb	r3, [r7, #11]
 8003dd0:	3b14      	subs	r3, #20
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d82f      	bhi.n	8003e36 <u8x8_cad_001+0x7a>
 8003dd6:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <u8x8_cad_001+0x20>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003e25 	.word	0x08003e25
 8003de0:	08003df5 	.word	0x08003df5
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e1d 	.word	0x08003e1d
 8003dec:	08003e25 	.word	0x08003e25
 8003df0:	08003e25 	.word	0x08003e25
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003df4:	2100      	movs	r1, #0
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f7ff ff00 	bl	8003bfc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003dfc:	7abb      	ldrb	r3, [r7, #10]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff ff20 	bl	8003c46 <u8x8_byte_SendByte>
      break;
 8003e06:	e018      	b.n	8003e3a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003e08:	2100      	movs	r1, #0
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff fef6 	bl	8003bfc <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003e10:	7abb      	ldrb	r3, [r7, #10]
 8003e12:	4619      	mov	r1, r3
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff ff16 	bl	8003c46 <u8x8_byte_SendByte>
      break;
 8003e1a:	e00e      	b.n	8003e3a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f7ff feec 	bl	8003bfc <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	691c      	ldr	r4, [r3, #16]
 8003e28:	7aba      	ldrb	r2, [r7, #10]
 8003e2a:	7af9      	ldrb	r1, [r7, #11]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	47a0      	blx	r4
 8003e32:	4603      	mov	r3, r0
 8003e34:	e002      	b.n	8003e3c <u8x8_cad_001+0x80>
    default:
      return 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <u8x8_cad_001+0x80>
  }
  return 1;
 8003e3a:	2301      	movs	r3, #1
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd90      	pop	{r4, r7, pc}

08003e44 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	72fb      	strb	r3, [r7, #11]
 8003e52:	4613      	mov	r3, r2
 8003e54:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8003e56:	7afb      	ldrb	r3, [r7, #11]
 8003e58:	3b0b      	subs	r3, #11
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	f200 808e 	bhi.w	8003f7c <u8x8_d_uc1604_common+0x138>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <u8x8_d_uc1604_common+0x24>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003f11 	.word	0x08003f11
 8003e6c:	08003f7d 	.word	0x08003f7d
 8003e70:	08003f2b 	.word	0x08003f2b
 8003e74:	08003f5d 	.word	0x08003f5d
 8003e78:	08003e7d 	.word	0x08003e7d
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff ff2a 	bl	8003cd6 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	795b      	ldrb	r3, [r3, #5]
 8003e86:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	4619      	mov	r1, r3
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff fee5 	bl	8003c68 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f043 0310 	orr.w	r3, r3, #16
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4619      	mov	r1, r3
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff fedb 	bl	8003c68 <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	799b      	ldrb	r3, [r3, #6]
 8003eb6:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003ebe:	7dbb      	ldrb	r3, [r7, #22]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8003ec4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	b25b      	sxtb	r3, r3
 8003ece:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003ed2:	b25b      	sxtb	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff fec5 	bl	8003c68 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	791b      	ldrb	r3, [r3, #4]
 8003ee2:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8003ee4:	7d7b      	ldrb	r3, [r7, #21]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8003ef0:	7d7b      	ldrb	r3, [r7, #21]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff feda 	bl	8003cb0 <u8x8_cad_SendData>
	arg_int--;
 8003efc:	7abb      	ldrb	r3, [r7, #10]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003f02:	7abb      	ldrb	r3, [r7, #10]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1f3      	bne.n	8003ef0 <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff fef4 	bl	8003cf6 <u8x8_cad_EndTransfer>
      break;
 8003f0e:	e037      	b.n	8003f80 <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003f10:	7abb      	ldrb	r3, [r7, #10]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d104      	bne.n	8003f20 <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 8003f16:	491d      	ldr	r1, [pc, #116]	; (8003f8c <u8x8_d_uc1604_common+0x148>)
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff fefc 	bl	8003d16 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 8003f1e:	e02f      	b.n	8003f80 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 8003f20:	491b      	ldr	r1, [pc, #108]	; (8003f90 <u8x8_d_uc1604_common+0x14c>)
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff fef7 	bl	8003d16 <u8x8_cad_SendSequence>
      break;
 8003f28:	e02a      	b.n	8003f80 <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003f2a:	7abb      	ldrb	r3, [r7, #10]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 8003f30:	4918      	ldr	r1, [pc, #96]	; (8003f94 <u8x8_d_uc1604_common+0x150>)
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff feef 	bl	8003d16 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	7c9a      	ldrb	r2, [r3, #18]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8003f44:	e01c      	b.n	8003f80 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 8003f46:	4914      	ldr	r1, [pc, #80]	; (8003f98 <u8x8_d_uc1604_common+0x154>)
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff fee4 	bl	8003d16 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	7cda      	ldrb	r2, [r3, #19]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003f5a:	e011      	b.n	8003f80 <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f7ff feba 	bl	8003cd6 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003f62:	2181      	movs	r1, #129	; 0x81
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff fe7f 	bl	8003c68 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 8003f6a:	7abb      	ldrb	r3, [r7, #10]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f7ff fe8c 	bl	8003c8c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff febe 	bl	8003cf6 <u8x8_cad_EndTransfer>
      break;
 8003f7a:	e001      	b.n	8003f80 <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 8003f80:	2301      	movs	r3, #1
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	0800e6c0 	.word	0x0800e6c0
 8003f90:	0800e6d0 	.word	0x0800e6d0
 8003f94:	0800e6d8 	.word	0x0800e6d8
 8003f98:	0800e6e0 	.word	0x0800e6e0

08003f9c <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	607b      	str	r3, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	72fb      	strb	r3, [r7, #11]
 8003faa:	4613      	mov	r3, r2
 8003fac:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003fae:	7aba      	ldrb	r2, [r7, #10]
 8003fb0:	7af9      	ldrb	r1, [r7, #11]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff ff45 	bl	8003e44 <u8x8_d_uc1604_common>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d114      	bne.n	8003fea <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003fc0:	7afb      	ldrb	r3, [r7, #11]
 8003fc2:	2b09      	cmp	r3, #9
 8003fc4:	d002      	beq.n	8003fcc <u8x8_d_uc1604_jlx19264+0x30>
 8003fc6:	2b0a      	cmp	r3, #10
 8003fc8:	d005      	beq.n	8003fd6 <u8x8_d_uc1604_jlx19264+0x3a>
 8003fca:	e00c      	b.n	8003fe6 <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8003fcc:	490a      	ldr	r1, [pc, #40]	; (8003ff8 <u8x8_d_uc1604_jlx19264+0x5c>)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f816 	bl	8004000 <u8x8_d_helper_display_setup_memory>
	break;
 8003fd4:	e00a      	b.n	8003fec <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f825 	bl	8004026 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8003fdc:	4907      	ldr	r1, [pc, #28]	; (8003ffc <u8x8_d_uc1604_jlx19264+0x60>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff fe99 	bl	8003d16 <u8x8_cad_SendSequence>
	break;
 8003fe4:	e002      	b.n	8003fec <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e001      	b.n	8003fee <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 8003fea:	bf00      	nop
  return 1;
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	0800e6e8 	.word	0x0800e6e8
 8003ffc:	0800e700 	.word	0x0800e700

08004000 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	7c9a      	ldrb	r2, [r3, #18]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004026:	b590      	push	{r4, r7, lr}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695c      	ldr	r4, [r3, #20]
 8004032:	2300      	movs	r3, #0
 8004034:	2200      	movs	r2, #0
 8004036:	2128      	movs	r1, #40	; 0x28
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68dc      	ldr	r4, [r3, #12]
 8004040:	2300      	movs	r3, #0
 8004042:	2200      	movs	r2, #0
 8004044:	2114      	movs	r1, #20
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800404a:	2201      	movs	r2, #1
 800404c:	214b      	movs	r1, #75	; 0x4b
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f897 	bl	8004182 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	791b      	ldrb	r3, [r3, #4]
 800405a:	461a      	mov	r2, r3
 800405c:	2129      	movs	r1, #41	; 0x29
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f88f 	bl	8004182 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004064:	2200      	movs	r2, #0
 8004066:	214b      	movs	r1, #75	; 0x4b
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f88a 	bl	8004182 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	791b      	ldrb	r3, [r3, #4]
 8004074:	461a      	mov	r2, r3
 8004076:	2129      	movs	r1, #41	; 0x29
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f882 	bl	8004182 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800407e:	2201      	movs	r2, #1
 8004080:	214b      	movs	r1, #75	; 0x4b
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f87d 	bl	8004182 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	795b      	ldrb	r3, [r3, #5]
 800408e:	461a      	mov	r2, r3
 8004090:	2129      	movs	r1, #41	; 0x29
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f875 	bl	8004182 <u8x8_gpio_call>
}    
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bd90      	pop	{r4, r7, pc}

080040a0 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	4608      	mov	r0, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	70fb      	strb	r3, [r7, #3]
 80040b2:	460b      	mov	r3, r1
 80040b4:	70bb      	strb	r3, [r7, #2]
 80040b6:	4613      	mov	r3, r2
 80040b8:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80040be:	78bb      	ldrb	r3, [r7, #2]
 80040c0:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80040c2:	787b      	ldrb	r3, [r7, #1]
 80040c4:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689c      	ldr	r4, [r3, #8]
 80040ce:	f107 0308 	add.w	r3, r7, #8
 80040d2:	2201      	movs	r2, #1
 80040d4:	210f      	movs	r1, #15
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	47a0      	blx	r4
 80040da:	4603      	mov	r3, r0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd90      	pop	{r4, r7, pc}

080040e4 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689c      	ldr	r4, [r3, #8]
 80040f0:	2300      	movs	r3, #0
 80040f2:	2200      	movs	r2, #0
 80040f4:	2109      	movs	r1, #9
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	47a0      	blx	r4
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd90      	pop	{r4, r7, pc}

08004102 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004102:	b590      	push	{r4, r7, lr}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689c      	ldr	r4, [r3, #8]
 800410e:	2300      	movs	r3, #0
 8004110:	2200      	movs	r2, #0
 8004112:	210a      	movs	r1, #10
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	47a0      	blx	r4
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bd90      	pop	{r4, r7, pc}

08004120 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689c      	ldr	r4, [r3, #8]
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	2300      	movs	r3, #0
 8004134:	210b      	movs	r1, #11
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	47a0      	blx	r4
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bd90      	pop	{r4, r7, pc}

08004142 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8004142:	b590      	push	{r4, r7, lr}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689c      	ldr	r4, [r3, #8]
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	2300      	movs	r3, #0
 8004156:	210e      	movs	r1, #14
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	47a0      	blx	r4
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bd90      	pop	{r4, r7, pc}

08004164 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689c      	ldr	r4, [r3, #8]
 8004170:	2300      	movs	r3, #0
 8004172:	2200      	movs	r2, #0
 8004174:	2110      	movs	r1, #16
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	47a0      	blx	r4
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bd90      	pop	{r4, r7, pc}

08004182 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004182:	b590      	push	{r4, r7, lr}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	70fb      	strb	r3, [r7, #3]
 800418e:	4613      	mov	r3, r2
 8004190:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695c      	ldr	r4, [r3, #20]
 8004196:	78ba      	ldrb	r2, [r7, #2]
 8004198:	78f9      	ldrb	r1, [r7, #3]
 800419a:	2300      	movs	r3, #0
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	47a0      	blx	r4
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd90      	pop	{r4, r7, pc}

080041a8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	72fb      	strb	r3, [r7, #11]
 80041b6:	4613      	mov	r3, r2
 80041b8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
	...

080041c8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a11      	ldr	r2, [pc, #68]	; (8004220 <u8x8_SetupDefaults+0x58>)
 80041da:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <u8x8_SetupDefaults+0x58>)
 80041e0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a0e      	ldr	r2, [pc, #56]	; (8004220 <u8x8_SetupDefaults+0x58>)
 80041e6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0d      	ldr	r2, [pc, #52]	; (8004220 <u8x8_SetupDefaults+0x58>)
 80041ec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	22ff      	movs	r2, #255	; 0xff
 8004208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	22ff      	movs	r2, #255	; 0xff
 8004210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	080041a9 	.word	0x080041a9

08004224 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff ffc8 	bl	80041c8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff ff47 	bl	80040e4 <u8x8_SetupMemory>
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004260:	480c      	ldr	r0, [pc, #48]	; (8004294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004262:	490d      	ldr	r1, [pc, #52]	; (8004298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004264:	4a0d      	ldr	r2, [pc, #52]	; (800429c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004268:	e002      	b.n	8004270 <LoopCopyDataInit>

0800426a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800426a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800426c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800426e:	3304      	adds	r3, #4

08004270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004274:	d3f9      	bcc.n	800426a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004278:	4c0a      	ldr	r4, [pc, #40]	; (80042a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800427a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800427c:	e001      	b.n	8004282 <LoopFillZerobss>

0800427e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800427e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004280:	3204      	adds	r2, #4

08004282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004284:	d3fb      	bcc.n	800427e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004286:	f7fd fde5 	bl	8001e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800428a:	f008 fdcb 	bl	800ce24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800428e:	f7fd fa0b 	bl	80016a8 <main>
  bx lr
 8004292:	4770      	bx	lr
  ldr r0, =_sdata
 8004294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004298:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800429c:	0800e760 	.word	0x0800e760
  ldr r2, =_sbss
 80042a0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80042a4:	20001cf4 	.word	0x20001cf4

080042a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042a8:	e7fe      	b.n	80042a8 <ADC1_2_IRQHandler>
	...

080042ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <HAL_Init+0x28>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a07      	ldr	r2, [pc, #28]	; (80042d4 <HAL_Init+0x28>)
 80042b6:	f043 0310 	orr.w	r3, r3, #16
 80042ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042bc:	2003      	movs	r0, #3
 80042be:	f000 f981 	bl	80045c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042c2:	200f      	movs	r0, #15
 80042c4:	f000 f808 	bl	80042d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042c8:	f7fd fc38 	bl	8001b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40022000 	.word	0x40022000

080042d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <HAL_InitTick+0x54>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b12      	ldr	r3, [pc, #72]	; (8004330 <HAL_InitTick+0x58>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	4619      	mov	r1, r3
 80042ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f9ab 	bl	8004652 <HAL_SYSTICK_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e00e      	b.n	8004324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b0f      	cmp	r3, #15
 800430a:	d80a      	bhi.n	8004322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800430c:	2200      	movs	r2, #0
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004314:	f000 f961 	bl	80045da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004318:	4a06      	ldr	r2, [pc, #24]	; (8004334 <HAL_InitTick+0x5c>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	20000008 	.word	0x20000008
 8004330:	20000010 	.word	0x20000010
 8004334:	2000000c 	.word	0x2000000c

08004338 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_IncTick+0x1c>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_IncTick+0x20>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4413      	add	r3, r2
 8004348:	4a03      	ldr	r2, [pc, #12]	; (8004358 <HAL_IncTick+0x20>)
 800434a:	6013      	str	r3, [r2, #0]
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	20000010 	.word	0x20000010
 8004358:	20000b3c 	.word	0x20000b3c

0800435c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  return uwTick;
 8004360:	4b02      	ldr	r3, [pc, #8]	; (800436c <HAL_GetTick+0x10>)
 8004362:	681b      	ldr	r3, [r3, #0]
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	20000b3c 	.word	0x20000b3c

08004370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004378:	f7ff fff0 	bl	800435c <HAL_GetTick>
 800437c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004388:	d005      	beq.n	8004396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_Delay+0x44>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004396:	bf00      	nop
 8004398:	f7ff ffe0 	bl	800435c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d8f7      	bhi.n	8004398 <HAL_Delay+0x28>
  {
  }
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000010 	.word	0x20000010

080043b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <__NVIC_SetPriorityGrouping+0x44>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043d4:	4013      	ands	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043ea:	4a04      	ldr	r2, [pc, #16]	; (80043fc <__NVIC_SetPriorityGrouping+0x44>)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	60d3      	str	r3, [r2, #12]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	e000ed00 	.word	0xe000ed00

08004400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <__NVIC_GetPriorityGrouping+0x18>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	f003 0307 	and.w	r3, r3, #7
}
 800440e:	4618      	mov	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	2b00      	cmp	r3, #0
 800442c:	db0b      	blt.n	8004446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	f003 021f 	and.w	r2, r3, #31
 8004434:	4906      	ldr	r1, [pc, #24]	; (8004450 <__NVIC_EnableIRQ+0x34>)
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2001      	movs	r0, #1
 800443e:	fa00 f202 	lsl.w	r2, r0, r2
 8004442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	e000e100 	.word	0xe000e100

08004454 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800445e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004462:	2b00      	cmp	r3, #0
 8004464:	db12      	blt.n	800448c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	490a      	ldr	r1, [pc, #40]	; (8004498 <__NVIC_DisableIRQ+0x44>)
 800446e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2001      	movs	r0, #1
 8004476:	fa00 f202 	lsl.w	r2, r0, r2
 800447a:	3320      	adds	r3, #32
 800447c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004480:	f3bf 8f4f 	dsb	sy
}
 8004484:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004486:	f3bf 8f6f 	isb	sy
}
 800448a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000e100 	.word	0xe000e100

0800449c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	db0a      	blt.n	80044c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	490c      	ldr	r1, [pc, #48]	; (80044e8 <__NVIC_SetPriority+0x4c>)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	440b      	add	r3, r1
 80044c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044c4:	e00a      	b.n	80044dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	4908      	ldr	r1, [pc, #32]	; (80044ec <__NVIC_SetPriority+0x50>)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	3b04      	subs	r3, #4
 80044d4:	0112      	lsls	r2, r2, #4
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	440b      	add	r3, r1
 80044da:	761a      	strb	r2, [r3, #24]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	e000e100 	.word	0xe000e100
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f1c3 0307 	rsb	r3, r3, #7
 800450a:	2b04      	cmp	r3, #4
 800450c:	bf28      	it	cs
 800450e:	2304      	movcs	r3, #4
 8004510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3304      	adds	r3, #4
 8004516:	2b06      	cmp	r3, #6
 8004518:	d902      	bls.n	8004520 <NVIC_EncodePriority+0x30>
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3b03      	subs	r3, #3
 800451e:	e000      	b.n	8004522 <NVIC_EncodePriority+0x32>
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43da      	mvns	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	401a      	ands	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	43d9      	mvns	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004548:	4313      	orrs	r3, r2
         );
}
 800454a:	4618      	mov	r0, r3
 800454c:	3724      	adds	r7, #36	; 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004558:	f3bf 8f4f 	dsb	sy
}
 800455c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <__NVIC_SystemReset+0x24>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004566:	4904      	ldr	r1, [pc, #16]	; (8004578 <__NVIC_SystemReset+0x24>)
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <__NVIC_SystemReset+0x28>)
 800456a:	4313      	orrs	r3, r2
 800456c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800456e:	f3bf 8f4f 	dsb	sy
}
 8004572:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <__NVIC_SystemReset+0x20>
 8004578:	e000ed00 	.word	0xe000ed00
 800457c:	05fa0004 	.word	0x05fa0004

08004580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004590:	d301      	bcc.n	8004596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004592:	2301      	movs	r3, #1
 8004594:	e00f      	b.n	80045b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004596:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <SysTick_Config+0x40>)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3b01      	subs	r3, #1
 800459c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800459e:	210f      	movs	r1, #15
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045a4:	f7ff ff7a 	bl	800449c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <SysTick_Config+0x40>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ae:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <SysTick_Config+0x40>)
 80045b0:	2207      	movs	r2, #7
 80045b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	e000e010 	.word	0xe000e010

080045c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fef3 	bl	80043b8 <__NVIC_SetPriorityGrouping>
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	4603      	mov	r3, r0
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
 80045e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045ec:	f7ff ff08 	bl	8004400 <__NVIC_GetPriorityGrouping>
 80045f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	6978      	ldr	r0, [r7, #20]
 80045f8:	f7ff ff7a 	bl	80044f0 <NVIC_EncodePriority>
 80045fc:	4602      	mov	r2, r0
 80045fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004602:	4611      	mov	r1, r2
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff ff49 	bl	800449c <__NVIC_SetPriority>
}
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800461c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fefb 	bl	800441c <__NVIC_EnableIRQ>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	4603      	mov	r3, r0
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff09 	bl	8004454 <__NVIC_DisableIRQ>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800464e:	f7ff ff81 	bl	8004554 <__NVIC_SystemReset>

08004652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff ff90 	bl	8004580 <SysTick_Config>
 8004660:	4603      	mov	r3, r0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800466c:	b480      	push	{r7}
 800466e:	b08b      	sub	sp, #44	; 0x2c
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004676:	2300      	movs	r3, #0
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800467a:	2300      	movs	r3, #0
 800467c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800467e:	e169      	b.n	8004954 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004680:	2201      	movs	r2, #1
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	429a      	cmp	r2, r3
 800469a:	f040 8158 	bne.w	800494e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4a9a      	ldr	r2, [pc, #616]	; (800490c <HAL_GPIO_Init+0x2a0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d05e      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
 80046a8:	4a98      	ldr	r2, [pc, #608]	; (800490c <HAL_GPIO_Init+0x2a0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d875      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046ae:	4a98      	ldr	r2, [pc, #608]	; (8004910 <HAL_GPIO_Init+0x2a4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d058      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
 80046b4:	4a96      	ldr	r2, [pc, #600]	; (8004910 <HAL_GPIO_Init+0x2a4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d86f      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046ba:	4a96      	ldr	r2, [pc, #600]	; (8004914 <HAL_GPIO_Init+0x2a8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d052      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
 80046c0:	4a94      	ldr	r2, [pc, #592]	; (8004914 <HAL_GPIO_Init+0x2a8>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d869      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046c6:	4a94      	ldr	r2, [pc, #592]	; (8004918 <HAL_GPIO_Init+0x2ac>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d04c      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
 80046cc:	4a92      	ldr	r2, [pc, #584]	; (8004918 <HAL_GPIO_Init+0x2ac>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d863      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046d2:	4a92      	ldr	r2, [pc, #584]	; (800491c <HAL_GPIO_Init+0x2b0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d046      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
 80046d8:	4a90      	ldr	r2, [pc, #576]	; (800491c <HAL_GPIO_Init+0x2b0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d85d      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046de:	2b12      	cmp	r3, #18
 80046e0:	d82a      	bhi.n	8004738 <HAL_GPIO_Init+0xcc>
 80046e2:	2b12      	cmp	r3, #18
 80046e4:	d859      	bhi.n	800479a <HAL_GPIO_Init+0x12e>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <HAL_GPIO_Init+0x80>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	08004767 	.word	0x08004767
 80046f0:	08004741 	.word	0x08004741
 80046f4:	08004753 	.word	0x08004753
 80046f8:	08004795 	.word	0x08004795
 80046fc:	0800479b 	.word	0x0800479b
 8004700:	0800479b 	.word	0x0800479b
 8004704:	0800479b 	.word	0x0800479b
 8004708:	0800479b 	.word	0x0800479b
 800470c:	0800479b 	.word	0x0800479b
 8004710:	0800479b 	.word	0x0800479b
 8004714:	0800479b 	.word	0x0800479b
 8004718:	0800479b 	.word	0x0800479b
 800471c:	0800479b 	.word	0x0800479b
 8004720:	0800479b 	.word	0x0800479b
 8004724:	0800479b 	.word	0x0800479b
 8004728:	0800479b 	.word	0x0800479b
 800472c:	0800479b 	.word	0x0800479b
 8004730:	08004749 	.word	0x08004749
 8004734:	0800475d 	.word	0x0800475d
 8004738:	4a79      	ldr	r2, [pc, #484]	; (8004920 <HAL_GPIO_Init+0x2b4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d013      	beq.n	8004766 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800473e:	e02c      	b.n	800479a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	623b      	str	r3, [r7, #32]
          break;
 8004746:	e029      	b.n	800479c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	3304      	adds	r3, #4
 800474e:	623b      	str	r3, [r7, #32]
          break;
 8004750:	e024      	b.n	800479c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	3308      	adds	r3, #8
 8004758:	623b      	str	r3, [r7, #32]
          break;
 800475a:	e01f      	b.n	800479c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	330c      	adds	r3, #12
 8004762:	623b      	str	r3, [r7, #32]
          break;
 8004764:	e01a      	b.n	800479c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800476e:	2304      	movs	r3, #4
 8004770:	623b      	str	r3, [r7, #32]
          break;
 8004772:	e013      	b.n	800479c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d105      	bne.n	8004788 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800477c:	2308      	movs	r3, #8
 800477e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	611a      	str	r2, [r3, #16]
          break;
 8004786:	e009      	b.n	800479c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004788:	2308      	movs	r3, #8
 800478a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	615a      	str	r2, [r3, #20]
          break;
 8004792:	e003      	b.n	800479c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004794:	2300      	movs	r3, #0
 8004796:	623b      	str	r3, [r7, #32]
          break;
 8004798:	e000      	b.n	800479c <HAL_GPIO_Init+0x130>
          break;
 800479a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2bff      	cmp	r3, #255	; 0xff
 80047a0:	d801      	bhi.n	80047a6 <HAL_GPIO_Init+0x13a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	e001      	b.n	80047aa <HAL_GPIO_Init+0x13e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3304      	adds	r3, #4
 80047aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2bff      	cmp	r3, #255	; 0xff
 80047b0:	d802      	bhi.n	80047b8 <HAL_GPIO_Init+0x14c>
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	e002      	b.n	80047be <HAL_GPIO_Init+0x152>
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	3b08      	subs	r3, #8
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	210f      	movs	r1, #15
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	43db      	mvns	r3, r3
 80047ce:	401a      	ands	r2, r3
 80047d0:	6a39      	ldr	r1, [r7, #32]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	fa01 f303 	lsl.w	r3, r1, r3
 80047d8:	431a      	orrs	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 80b1 	beq.w	800494e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80047ec:	4b4d      	ldr	r3, [pc, #308]	; (8004924 <HAL_GPIO_Init+0x2b8>)
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	4a4c      	ldr	r2, [pc, #304]	; (8004924 <HAL_GPIO_Init+0x2b8>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6193      	str	r3, [r2, #24]
 80047f8:	4b4a      	ldr	r3, [pc, #296]	; (8004924 <HAL_GPIO_Init+0x2b8>)
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004804:	4a48      	ldr	r2, [pc, #288]	; (8004928 <HAL_GPIO_Init+0x2bc>)
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	3302      	adds	r3, #2
 800480c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004810:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	220f      	movs	r2, #15
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	43db      	mvns	r3, r3
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a40      	ldr	r2, [pc, #256]	; (800492c <HAL_GPIO_Init+0x2c0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <HAL_GPIO_Init+0x1ec>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a3f      	ldr	r2, [pc, #252]	; (8004930 <HAL_GPIO_Init+0x2c4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00d      	beq.n	8004854 <HAL_GPIO_Init+0x1e8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3e      	ldr	r2, [pc, #248]	; (8004934 <HAL_GPIO_Init+0x2c8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d007      	beq.n	8004850 <HAL_GPIO_Init+0x1e4>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3d      	ldr	r2, [pc, #244]	; (8004938 <HAL_GPIO_Init+0x2cc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_GPIO_Init+0x1e0>
 8004848:	2303      	movs	r3, #3
 800484a:	e006      	b.n	800485a <HAL_GPIO_Init+0x1ee>
 800484c:	2304      	movs	r3, #4
 800484e:	e004      	b.n	800485a <HAL_GPIO_Init+0x1ee>
 8004850:	2302      	movs	r3, #2
 8004852:	e002      	b.n	800485a <HAL_GPIO_Init+0x1ee>
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <HAL_GPIO_Init+0x1ee>
 8004858:	2300      	movs	r3, #0
 800485a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485c:	f002 0203 	and.w	r2, r2, #3
 8004860:	0092      	lsls	r2, r2, #2
 8004862:	4093      	lsls	r3, r2
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800486a:	492f      	ldr	r1, [pc, #188]	; (8004928 <HAL_GPIO_Init+0x2bc>)
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	3302      	adds	r3, #2
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004884:	4b2d      	ldr	r3, [pc, #180]	; (800493c <HAL_GPIO_Init+0x2d0>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	492c      	ldr	r1, [pc, #176]	; (800493c <HAL_GPIO_Init+0x2d0>)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
 8004890:	e006      	b.n	80048a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004892:	4b2a      	ldr	r3, [pc, #168]	; (800493c <HAL_GPIO_Init+0x2d0>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	43db      	mvns	r3, r3
 800489a:	4928      	ldr	r1, [pc, #160]	; (800493c <HAL_GPIO_Init+0x2d0>)
 800489c:	4013      	ands	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048ac:	4b23      	ldr	r3, [pc, #140]	; (800493c <HAL_GPIO_Init+0x2d0>)
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	4922      	ldr	r1, [pc, #136]	; (800493c <HAL_GPIO_Init+0x2d0>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048ba:	4b20      	ldr	r3, [pc, #128]	; (800493c <HAL_GPIO_Init+0x2d0>)
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	491e      	ldr	r1, [pc, #120]	; (800493c <HAL_GPIO_Init+0x2d0>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048d4:	4b19      	ldr	r3, [pc, #100]	; (800493c <HAL_GPIO_Init+0x2d0>)
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	4918      	ldr	r1, [pc, #96]	; (800493c <HAL_GPIO_Init+0x2d0>)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	608b      	str	r3, [r1, #8]
 80048e0:	e006      	b.n	80048f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <HAL_GPIO_Init+0x2d0>)
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	4914      	ldr	r1, [pc, #80]	; (800493c <HAL_GPIO_Init+0x2d0>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d021      	beq.n	8004940 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048fc:	4b0f      	ldr	r3, [pc, #60]	; (800493c <HAL_GPIO_Init+0x2d0>)
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	490e      	ldr	r1, [pc, #56]	; (800493c <HAL_GPIO_Init+0x2d0>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	4313      	orrs	r3, r2
 8004906:	60cb      	str	r3, [r1, #12]
 8004908:	e021      	b.n	800494e <HAL_GPIO_Init+0x2e2>
 800490a:	bf00      	nop
 800490c:	10320000 	.word	0x10320000
 8004910:	10310000 	.word	0x10310000
 8004914:	10220000 	.word	0x10220000
 8004918:	10210000 	.word	0x10210000
 800491c:	10120000 	.word	0x10120000
 8004920:	10110000 	.word	0x10110000
 8004924:	40021000 	.word	0x40021000
 8004928:	40010000 	.word	0x40010000
 800492c:	40010800 	.word	0x40010800
 8004930:	40010c00 	.word	0x40010c00
 8004934:	40011000 	.word	0x40011000
 8004938:	40011400 	.word	0x40011400
 800493c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_GPIO_Init+0x304>)
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	43db      	mvns	r3, r3
 8004948:	4909      	ldr	r1, [pc, #36]	; (8004970 <HAL_GPIO_Init+0x304>)
 800494a:	4013      	ands	r3, r2
 800494c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	3301      	adds	r3, #1
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	fa22 f303 	lsr.w	r3, r2, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	f47f ae8e 	bne.w	8004680 <HAL_GPIO_Init+0x14>
  }
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	372c      	adds	r7, #44	; 0x2c
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	40010400 	.word	0x40010400

08004974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	807b      	strh	r3, [r7, #2]
 8004980:	4613      	mov	r3, r2
 8004982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004984:	787b      	ldrb	r3, [r7, #1]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004990:	e003      	b.n	800499a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	041a      	lsls	r2, r3, #16
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	611a      	str	r2, [r3, #16]
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049b6:	887a      	ldrh	r2, [r7, #2]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4013      	ands	r3, r2
 80049bc:	041a      	lsls	r2, r3, #16
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	43d9      	mvns	r1, r3
 80049c2:	887b      	ldrh	r3, [r7, #2]
 80049c4:	400b      	ands	r3, r1
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	611a      	str	r2, [r3, #16]
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr
	...

080049d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049e2:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d006      	beq.n	80049fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049ee:	4a05      	ldr	r2, [pc, #20]	; (8004a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fc fe38 	bl	800166c <HAL_GPIO_EXTI_Callback>
  }
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40010400 	.word	0x40010400

08004a08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a0a:	b08b      	sub	sp, #44	; 0x2c
 8004a0c:	af06      	add	r7, sp, #24
 8004a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0fd      	b.n	8004c16 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f007 ff40 	bl	800c8b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2203      	movs	r2, #3
 8004a38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f003 fc10 	bl	8008266 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	687e      	ldr	r6, [r7, #4]
 8004a4e:	466d      	mov	r5, sp
 8004a50:	f106 0410 	add.w	r4, r6, #16
 8004a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	602b      	str	r3, [r5, #0]
 8004a5c:	1d33      	adds	r3, r6, #4
 8004a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a60:	6838      	ldr	r0, [r7, #0]
 8004a62:	f003 fbda 	bl	800821a <USB_CoreInit>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0ce      	b.n	8004c16 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f003 fc0b 	bl	800829a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	73fb      	strb	r3, [r7, #15]
 8004a88:	e04c      	b.n	8004b24 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	440b      	add	r3, r1
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	440b      	add	r3, r1
 8004ab0:	7bfa      	ldrb	r2, [r7, #15]
 8004ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ab4:	7bfa      	ldrb	r2, [r7, #15]
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	b298      	uxth	r0, r3
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3336      	adds	r3, #54	; 0x36
 8004ac8:	4602      	mov	r2, r0
 8004aca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	440b      	add	r3, r1
 8004adc:	3303      	adds	r3, #3
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ae2:	7bfa      	ldrb	r2, [r7, #15]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	440b      	add	r3, r1
 8004af0:	3338      	adds	r3, #56	; 0x38
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	440b      	add	r3, r1
 8004b04:	333c      	adds	r3, #60	; 0x3c
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	440b      	add	r3, r1
 8004b18:	3340      	adds	r3, #64	; 0x40
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	3301      	adds	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
 8004b24:	7bfa      	ldrb	r2, [r7, #15]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d3ad      	bcc.n	8004a8a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	73fb      	strb	r3, [r7, #15]
 8004b32:	e044      	b.n	8004bbe <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b34:	7bfa      	ldrb	r2, [r7, #15]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	440b      	add	r3, r1
 8004b42:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b4a:	7bfa      	ldrb	r2, [r7, #15]
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	440b      	add	r3, r1
 8004b58:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b5c:	7bfa      	ldrb	r2, [r7, #15]
 8004b5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b60:	7bfa      	ldrb	r2, [r7, #15]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	440b      	add	r3, r1
 8004b6e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b76:	7bfa      	ldrb	r2, [r7, #15]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	440b      	add	r3, r1
 8004b84:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b8c:	7bfa      	ldrb	r2, [r7, #15]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	440b      	add	r3, r1
 8004b9a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ba2:	7bfa      	ldrb	r2, [r7, #15]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	440b      	add	r3, r1
 8004bb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
 8004bbe:	7bfa      	ldrb	r2, [r7, #15]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d3b5      	bcc.n	8004b34 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	687e      	ldr	r6, [r7, #4]
 8004bd0:	466d      	mov	r5, sp
 8004bd2:	f106 0410 	add.w	r4, r6, #16
 8004bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	1d33      	adds	r3, r6, #4
 8004be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f003 fb65 	bl	80082b2 <USB_DevInit>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e00d      	b.n	8004c16 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f006 f818 	bl	800ac44 <USB_DevDisconnect>

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_PCD_Start+0x16>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e016      	b.n	8004c62 <HAL_PCD_Start+0x44>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f003 fafa 	bl	800823a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004c46:	2101      	movs	r1, #1
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f008 f8ae 	bl	800cdaa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f005 ffec 	bl	800ac30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b088      	sub	sp, #32
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f005 ffee 	bl	800ac58 <USB_ReadInterrupts>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c86:	d102      	bne.n	8004c8e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fb5f 	bl	800534c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f005 ffe0 	bl	800ac58 <USB_ReadInterrupts>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca2:	d112      	bne.n	8004cca <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb6:	b292      	uxth	r2, r2
 8004cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f007 fe7c 	bl	800c9ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f923 	bl	8004f10 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f005 ffc2 	bl	800ac58 <USB_ReadInterrupts>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cde:	d10b      	bne.n	8004cf8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cf2:	b292      	uxth	r2, r2
 8004cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f005 ffab 	bl	800ac58 <USB_ReadInterrupts>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0c:	d10b      	bne.n	8004d26 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d20:	b292      	uxth	r2, r2
 8004d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f005 ff94 	bl	800ac58 <USB_ReadInterrupts>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3a:	d126      	bne.n	8004d8a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0204 	bic.w	r2, r2, #4
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0208 	bic.w	r2, r2, #8
 8004d66:	b292      	uxth	r2, r2
 8004d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f007 fe5d 	bl	800ca2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d84:	b292      	uxth	r2, r2
 8004d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f005 ff62 	bl	800ac58 <USB_ReadInterrupts>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d9e:	f040 8082 	bne.w	8004ea6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e010      	b.n	8004dca <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	7ffb      	ldrb	r3, [r7, #31]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	441a      	add	r2, r3
 8004db4:	7ffb      	ldrb	r3, [r7, #31]
 8004db6:	8812      	ldrh	r2, [r2, #0]
 8004db8:	b292      	uxth	r2, r2
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	3320      	adds	r3, #32
 8004dbe:	443b      	add	r3, r7
 8004dc0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004dc4:	7ffb      	ldrb	r3, [r7, #31]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	7ffb      	ldrb	r3, [r7, #31]
 8004dcc:	2b07      	cmp	r3, #7
 8004dce:	d9eb      	bls.n	8004da8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	b292      	uxth	r2, r2
 8004de4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004e00:	bf00      	nop
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f6      	beq.n	8004e02 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e26:	b292      	uxth	r2, r2
 8004e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e00f      	b.n	8004e52 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004e32:	7ffb      	ldrb	r3, [r7, #31]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	7ffa      	ldrb	r2, [r7, #31]
 8004e3c:	0092      	lsls	r2, r2, #2
 8004e3e:	440a      	add	r2, r1
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	3320      	adds	r3, #32
 8004e44:	443b      	add	r3, r7
 8004e46:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004e4a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004e4c:	7ffb      	ldrb	r3, [r7, #31]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	7ffb      	ldrb	r3, [r7, #31]
 8004e54:	2b07      	cmp	r3, #7
 8004e56:	d9ec      	bls.n	8004e32 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0208 	orr.w	r2, r2, #8
 8004e6a:	b292      	uxth	r2, r2
 8004e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e82:	b292      	uxth	r2, r2
 8004e84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0204 	orr.w	r2, r2, #4
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f007 fda9 	bl	800c9f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f005 fed4 	bl	800ac58 <USB_ReadInterrupts>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eba:	d10e      	bne.n	8004eda <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ece:	b292      	uxth	r2, r2
 8004ed0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f007 fd62 	bl	800c99e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f005 feba 	bl	800ac58 <USB_ReadInterrupts>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eee:	d10b      	bne.n	8004f08 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f02:	b292      	uxth	r2, r2
 8004f04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004f08:	bf00      	nop
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_PCD_SetAddress+0x1a>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e013      	b.n	8004f52 <HAL_PCD_SetAddress+0x42>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f005 fe61 	bl	800ac0a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	4608      	mov	r0, r1
 8004f64:	4611      	mov	r1, r2
 8004f66:	461a      	mov	r2, r3
 8004f68:	4603      	mov	r3, r0
 8004f6a:	70fb      	strb	r3, [r7, #3]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	803b      	strh	r3, [r7, #0]
 8004f70:	4613      	mov	r3, r2
 8004f72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	da0e      	bge.n	8004f9e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4413      	add	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	705a      	strb	r2, [r3, #1]
 8004f9c:	e00e      	b.n	8004fbc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	f003 0207 	and.w	r2, r3, #7
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004fc8:	883a      	ldrh	r2, [r7, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	78ba      	ldrb	r2, [r7, #2]
 8004fd2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d004      	beq.n	8004fe6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fe6:	78bb      	ldrb	r3, [r7, #2]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d102      	bne.n	8004ff2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_PCD_EP_Open+0xa6>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e00e      	b.n	800501e <HAL_PCD_EP_Open+0xc4>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68f9      	ldr	r1, [r7, #12]
 800500e:	4618      	mov	r0, r3
 8005010:	f003 f970 	bl	80082f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800501c:	7afb      	ldrb	r3, [r7, #11]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005036:	2b00      	cmp	r3, #0
 8005038:	da0e      	bge.n	8005058 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	705a      	strb	r2, [r3, #1]
 8005056:	e00e      	b.n	8005076 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	f003 0207 	and.w	r2, r3, #7
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4413      	add	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005088:	2b01      	cmp	r3, #1
 800508a:	d101      	bne.n	8005090 <HAL_PCD_EP_Close+0x6a>
 800508c:	2302      	movs	r3, #2
 800508e:	e00e      	b.n	80050ae <HAL_PCD_EP_Close+0x88>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68f9      	ldr	r1, [r7, #12]
 800509e:	4618      	mov	r0, r3
 80050a0:	f003 fc92 	bl	80089c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b086      	sub	sp, #24
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	460b      	mov	r3, r1
 80050c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050c6:	7afb      	ldrb	r3, [r7, #11]
 80050c8:	f003 0207 	and.w	r2, r3, #7
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2200      	movs	r2, #0
 80050ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2200      	movs	r2, #0
 80050f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050f6:	7afb      	ldrb	r3, [r7, #11]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005102:	7afb      	ldrb	r3, [r7, #11]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6979      	ldr	r1, [r7, #20]
 8005112:	4618      	mov	r0, r3
 8005114:	f003 fe44 	bl	8008da0 <USB_EPStartXfer>
 8005118:	e005      	b.n	8005126 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	4618      	mov	r0, r3
 8005122:	f003 fe3d 	bl	8008da0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	f003 0207 	and.w	r2, r3, #7
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	440b      	add	r3, r1
 800514e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005152:	681b      	ldr	r3, [r3, #0]
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	603b      	str	r3, [r7, #0]
 800516a:	460b      	mov	r3, r1
 800516c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800516e:	7afb      	ldrb	r3, [r7, #11]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2200      	movs	r2, #0
 80051a2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2201      	movs	r2, #1
 80051a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051aa:	7afb      	ldrb	r3, [r7, #11]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051b6:	7afb      	ldrb	r3, [r7, #11]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d106      	bne.n	80051ce <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6979      	ldr	r1, [r7, #20]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f003 fdea 	bl	8008da0 <USB_EPStartXfer>
 80051cc:	e005      	b.n	80051da <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6979      	ldr	r1, [r7, #20]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f003 fde3 	bl	8008da0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	f003 0207 	and.w	r2, r3, #7
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d901      	bls.n	8005202 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e04c      	b.n	800529c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005202:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005206:	2b00      	cmp	r3, #0
 8005208:	da0e      	bge.n	8005228 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	4613      	mov	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4413      	add	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	705a      	strb	r2, [r3, #1]
 8005226:	e00c      	b.n	8005242 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_PCD_EP_SetStall+0x7e>
 800525e:	2302      	movs	r3, #2
 8005260:	e01c      	b.n	800529c <HAL_PCD_EP_SetStall+0xb8>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	4618      	mov	r0, r3
 8005272:	f005 fbcd 	bl	800aa10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	2b00      	cmp	r3, #0
 800527e:	d108      	bne.n	8005292 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f005 fcf2 	bl	800ac76 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	f003 020f 	and.w	r2, r3, #15
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d901      	bls.n	80052c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e040      	b.n	8005344 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	da0e      	bge.n	80052e8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ca:	78fb      	ldrb	r3, [r7, #3]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	705a      	strb	r2, [r3, #1]
 80052e6:	e00e      	b.n	8005306 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	f003 0207 	and.w	r2, r3, #7
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	b2da      	uxtb	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_PCD_EP_ClrStall+0x82>
 8005322:	2302      	movs	r3, #2
 8005324:	e00e      	b.n	8005344 <HAL_PCD_EP_ClrStall+0xa0>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68f9      	ldr	r1, [r7, #12]
 8005334:	4618      	mov	r0, r3
 8005336:	f005 fbbb 	bl	800aab0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08e      	sub	sp, #56	; 0x38
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005354:	e2ec      	b.n	8005930 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800535e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005360:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800536c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005370:	2b00      	cmp	r3, #0
 8005372:	f040 8161 	bne.w	8005638 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005376:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	2b00      	cmp	r3, #0
 800537e:	d152      	bne.n	8005426 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	b29b      	uxth	r3, r3
 8005388:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800538c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005390:	81fb      	strh	r3, [r7, #14]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	89fb      	ldrh	r3, [r7, #14]
 8005398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3328      	adds	r3, #40	; 0x28
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	4413      	add	r3, r2
 80053be:	3302      	adds	r3, #2
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	441a      	add	r2, r3
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80053e4:	2100      	movs	r1, #0
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f007 fabf 	bl	800c96a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 829b 	beq.w	8005930 <PCD_EP_ISR_Handler+0x5e4>
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f040 8296 	bne.w	8005930 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005410:	b2da      	uxtb	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	b292      	uxth	r2, r2
 8005418:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005424:	e284      	b.n	8005930 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005436:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800543c:	2b00      	cmp	r3, #0
 800543e:	d034      	beq.n	80054aa <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005448:	b29b      	uxth	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4413      	add	r3, r2
 8005454:	3306      	adds	r3, #6
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6818      	ldr	r0, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800547e:	b29b      	uxth	r3, r3
 8005480:	f005 fc49 	bl	800ad16 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	b29a      	uxth	r2, r3
 800548c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005490:	4013      	ands	r3, r2
 8005492:	823b      	strh	r3, [r7, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	8a3a      	ldrh	r2, [r7, #16]
 800549a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800549e:	b292      	uxth	r2, r2
 80054a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f007 fa34 	bl	800c910 <HAL_PCD_SetupStageCallback>
 80054a8:	e242      	b.n	8005930 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80054aa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f280 823e 	bge.w	8005930 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80054c0:	4013      	ands	r3, r2
 80054c2:	83bb      	strh	r3, [r7, #28]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	8bba      	ldrh	r2, [r7, #28]
 80054ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054ce:	b292      	uxth	r2, r2
 80054d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054da:	b29b      	uxth	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	3306      	adds	r3, #6
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6812      	ldr	r2, [r2, #0]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d019      	beq.n	800553a <PCD_EP_ISR_Handler+0x1ee>
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d015      	beq.n	800553a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	6959      	ldr	r1, [r3, #20]
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800551e:	b29b      	uxth	r3, r3
 8005520:	f005 fbf9 	bl	800ad16 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	695a      	ldr	r2, [r3, #20]
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	441a      	add	r2, r3
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005532:	2100      	movs	r1, #0
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f007 f9fd 	bl	800c934 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b29b      	uxth	r3, r3
 8005542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005546:	2b00      	cmp	r3, #0
 8005548:	f040 81f2 	bne.w	8005930 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555a:	b29b      	uxth	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	4413      	add	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d112      	bne.n	800559a <PCD_EP_ISR_Handler+0x24e>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800557e:	b29a      	uxth	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005592:	b29a      	uxth	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	e02f      	b.n	80055fa <PCD_EP_ISR_Handler+0x2ae>
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b3e      	cmp	r3, #62	; 0x3e
 80055a0:	d813      	bhi.n	80055ca <PCD_EP_ISR_Handler+0x27e>
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	633b      	str	r3, [r7, #48]	; 0x30
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <PCD_EP_ISR_Handler+0x270>
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	3301      	adds	r3, #1
 80055ba:	633b      	str	r3, [r7, #48]	; 0x30
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	b29b      	uxth	r3, r3
 80055c0:	029b      	lsls	r3, r3, #10
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	801a      	strh	r2, [r3, #0]
 80055c8:	e017      	b.n	80055fa <PCD_EP_ISR_Handler+0x2ae>
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	633b      	str	r3, [r7, #48]	; 0x30
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <PCD_EP_ISR_Handler+0x298>
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	3b01      	subs	r3, #1
 80055e2:	633b      	str	r3, [r7, #48]	; 0x30
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	029b      	lsls	r3, r3, #10
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	827b      	strh	r3, [r7, #18]
 800560c:	8a7b      	ldrh	r3, [r7, #18]
 800560e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005612:	827b      	strh	r3, [r7, #18]
 8005614:	8a7b      	ldrh	r3, [r7, #18]
 8005616:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800561a:	827b      	strh	r3, [r7, #18]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	8a7b      	ldrh	r3, [r7, #18]
 8005622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005632:	b29b      	uxth	r3, r3
 8005634:	8013      	strh	r3, [r2, #0]
 8005636:	e17b      	b.n	8005930 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800564a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800564e:	2b00      	cmp	r3, #0
 8005650:	f280 80ea 	bge.w	8005828 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	b29a      	uxth	r2, r3
 8005666:	f640 738f 	movw	r3, #3983	; 0xf8f
 800566a:	4013      	ands	r3, r2
 800566c:	853b      	strh	r3, [r7, #40]	; 0x28
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800567e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005682:	b292      	uxth	r2, r2
 8005684:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005686:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4413      	add	r3, r2
 800569a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	7b1b      	ldrb	r3, [r3, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d122      	bne.n	80056ea <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	4413      	add	r3, r2
 80056b8:	3306      	adds	r3, #6
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056cc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80056ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f000 8087 	beq.w	80057e4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	6959      	ldr	r1, [r3, #20]
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	88da      	ldrh	r2, [r3, #6]
 80056e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056e4:	f005 fb17 	bl	800ad16 <USB_ReadPMA>
 80056e8:	e07c      	b.n	80057e4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	78db      	ldrb	r3, [r3, #3]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d108      	bne.n	8005704 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80056f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056f4:	461a      	mov	r2, r3
 80056f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f927 	bl	800594c <HAL_PCD_EP_DB_Receive>
 80056fe:	4603      	mov	r3, r0
 8005700:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005702:	e06f      	b.n	80057e4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	461a      	mov	r2, r3
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	441a      	add	r2, r3
 800572e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d021      	beq.n	80057a2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005766:	b29b      	uxth	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4413      	add	r3, r2
 8005772:	3302      	adds	r3, #2
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005786:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005788:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800578a:	2b00      	cmp	r3, #0
 800578c:	d02a      	beq.n	80057e4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	6959      	ldr	r1, [r3, #20]
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	891a      	ldrh	r2, [r3, #8]
 800579a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800579c:	f005 fabb 	bl	800ad16 <USB_ReadPMA>
 80057a0:	e020      	b.n	80057e4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	3306      	adds	r3, #6
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6812      	ldr	r2, [r2, #0]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ca:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80057cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	6959      	ldr	r1, [r3, #20]
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	895a      	ldrh	r2, [r3, #10]
 80057de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057e0:	f005 fa99 	bl	800ad16 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057ea:	441a      	add	r2, r3
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057f6:	441a      	add	r2, r3
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <PCD_EP_ISR_Handler+0x4c2>
 8005804:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	429a      	cmp	r2, r3
 800580c:	d206      	bcs.n	800581c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f007 f88d 	bl	800c934 <HAL_PCD_DataOutStageCallback>
 800581a:	e005      	b.n	8005828 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005822:	4618      	mov	r0, r3
 8005824:	f003 fabc 	bl	8008da0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005828:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d07e      	beq.n	8005930 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005832:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4413      	add	r3, r2
 8005844:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800585c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005860:	843b      	strh	r3, [r7, #32]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	8c3b      	ldrh	r3, [r7, #32]
 8005872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587a:	b29b      	uxth	r3, r3
 800587c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	78db      	ldrb	r3, [r3, #3]
 8005882:	2b03      	cmp	r3, #3
 8005884:	d00c      	beq.n	80058a0 <PCD_EP_ISR_Handler+0x554>
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	78db      	ldrb	r3, [r3, #3]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005892:	2b02      	cmp	r3, #2
 8005894:	d146      	bne.n	8005924 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005896:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d141      	bne.n	8005924 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	4413      	add	r3, r2
 80058b4:	3302      	adds	r3, #2
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	8bfb      	ldrh	r3, [r7, #30]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d906      	bls.n	80058e2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	699a      	ldr	r2, [r3, #24]
 80058d8:	8bfb      	ldrh	r3, [r7, #30]
 80058da:	1ad2      	subs	r2, r2, r3
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	619a      	str	r2, [r3, #24]
 80058e0:	e002      	b.n	80058e8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	2200      	movs	r2, #0
 80058e6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d106      	bne.n	80058fe <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f007 f837 	bl	800c96a <HAL_PCD_DataInStageCallback>
 80058fc:	e018      	b.n	8005930 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	8bfb      	ldrh	r3, [r7, #30]
 8005904:	441a      	add	r2, r3
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	8bfb      	ldrh	r3, [r7, #30]
 8005910:	441a      	add	r2, r3
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591c:	4618      	mov	r0, r3
 800591e:	f003 fa3f 	bl	8008da0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005922:	e005      	b.n	8005930 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005924:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005926:	461a      	mov	r2, r3
 8005928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f91b 	bl	8005b66 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005938:	b29b      	uxth	r3, r3
 800593a:	b21b      	sxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	f6ff ad0a 	blt.w	8005356 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3738      	adds	r7, #56	; 0x38
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d07e      	beq.n	8005a62 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596c:	b29b      	uxth	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4413      	add	r3, r2
 8005978:	3302      	adds	r3, #2
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800598c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	699a      	ldr	r2, [r3, #24]
 8005992:	8b7b      	ldrh	r3, [r7, #26]
 8005994:	429a      	cmp	r2, r3
 8005996:	d306      	bcc.n	80059a6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	8b7b      	ldrh	r3, [r7, #26]
 800599e:	1ad2      	subs	r2, r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	619a      	str	r2, [r3, #24]
 80059a4:	e002      	b.n	80059ac <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2200      	movs	r2, #0
 80059aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d123      	bne.n	80059fc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ce:	833b      	strh	r3, [r7, #24]
 80059d0:	8b3b      	ldrh	r3, [r7, #24]
 80059d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059d6:	833b      	strh	r3, [r7, #24]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	8b3b      	ldrh	r3, [r7, #24]
 80059e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01f      	beq.n	8005a46 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a20:	82fb      	strh	r3, [r7, #22]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	8afb      	ldrh	r3, [r7, #22]
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a46:	8b7b      	ldrh	r3, [r7, #26]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8087 	beq.w	8005b5c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6959      	ldr	r1, [r3, #20]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	891a      	ldrh	r2, [r3, #8]
 8005a5a:	8b7b      	ldrh	r3, [r7, #26]
 8005a5c:	f005 f95b 	bl	800ad16 <USB_ReadPMA>
 8005a60:	e07c      	b.n	8005b5c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	4413      	add	r3, r2
 8005a76:	3306      	adds	r3, #6
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	6812      	ldr	r2, [r2, #0]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a8a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	8b7b      	ldrh	r3, [r7, #26]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d306      	bcc.n	8005aa4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	8b7b      	ldrh	r3, [r7, #26]
 8005a9c:	1ad2      	subs	r2, r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	619a      	str	r2, [r3, #24]
 8005aa2:	e002      	b.n	8005aaa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d123      	bne.n	8005afa <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005acc:	83fb      	strh	r3, [r7, #30]
 8005ace:	8bfb      	ldrh	r3, [r7, #30]
 8005ad0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ad4:	83fb      	strh	r3, [r7, #30]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	441a      	add	r2, r3
 8005ae4:	8bfb      	ldrh	r3, [r7, #30]
 8005ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d11f      	bne.n	8005b44 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	83bb      	strh	r3, [r7, #28]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	441a      	add	r2, r3
 8005b2e:	8bbb      	ldrh	r3, [r7, #28]
 8005b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005b44:	8b7b      	ldrh	r3, [r7, #26]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d008      	beq.n	8005b5c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6959      	ldr	r1, [r3, #20]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	895a      	ldrh	r2, [r3, #10]
 8005b56:	8b7b      	ldrh	r3, [r7, #26]
 8005b58:	f005 f8dd 	bl	800ad16 <USB_ReadPMA>
    }
  }

  return count;
 8005b5c:	8b7b      	ldrh	r3, [r7, #26]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b0a2      	sub	sp, #136	; 0x88
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b74:	88fb      	ldrh	r3, [r7, #6]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 81c7 	beq.w	8005f0e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4413      	add	r3, r2
 8005b94:	3302      	adds	r3, #2
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d907      	bls.n	8005bc8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bc0:	1ad2      	subs	r2, r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	619a      	str	r2, [r3, #24]
 8005bc6:	e002      	b.n	8005bce <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f040 80b9 	bne.w	8005d4a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d126      	bne.n	8005c2e <HAL_PCD_EP_DB_Transmit+0xc8>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	4413      	add	r3, r2
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	011a      	lsls	r2, r3, #4
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	4413      	add	r3, r2
 8005c02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	e01a      	b.n	8005c64 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d116      	bne.n	8005c64 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	4413      	add	r3, r2
 8005c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	011a      	lsls	r2, r3, #4
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	4413      	add	r3, r2
 8005c58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	2200      	movs	r2, #0
 8005c62:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	623b      	str	r3, [r7, #32]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d126      	bne.n	8005cc0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	4413      	add	r3, r2
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	011a      	lsls	r2, r3, #4
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	4413      	add	r3, r2
 8005c94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	801a      	strh	r2, [r3, #0]
 8005cbe:	e017      	b.n	8005cf0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	785b      	ldrb	r3, [r3, #1]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d113      	bne.n	8005cf0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	623b      	str	r3, [r7, #32]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	011a      	lsls	r2, r3, #4
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ce8:	61fb      	str	r3, [r7, #28]
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	2200      	movs	r2, #0
 8005cee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f006 fe37 	bl	800c96a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 82d4 	beq.w	80062b0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	827b      	strh	r3, [r7, #18]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	441a      	add	r2, r3
 8005d32:	8a7b      	ldrh	r3, [r7, #18]
 8005d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	8013      	strh	r3, [r2, #0]
 8005d48:	e2b2      	b.n	80062b0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d021      	beq.n	8005d98 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	441a      	add	r2, r3
 8005d80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	f040 8286 	bne.w	80062b0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005dac:	441a      	add	r2, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	69da      	ldr	r2, [r3, #28]
 8005db6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005dba:	441a      	add	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d309      	bcc.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dd8:	1ad2      	subs	r2, r2, r3
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	621a      	str	r2, [r3, #32]
 8005dde:	e015      	b.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d107      	bne.n	8005df8 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005de8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005dec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005df6:	e009      	b.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d155      	bne.n	8005ec0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e28:	4413      	add	r3, r2
 8005e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	011a      	lsls	r2, r3, #4
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	4413      	add	r3, r2
 8005e36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d112      	bne.n	8005e68 <HAL_PCD_EP_DB_Transmit+0x302>
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	e047      	b.n	8005ef8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e6c:	d811      	bhi.n	8005e92 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e70:	085b      	lsrs	r3, r3, #1
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e80:	3301      	adds	r3, #1
 8005e82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e032      	b.n	8005ef8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <HAL_PCD_EP_DB_Transmit+0x342>
 8005ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	029b      	lsls	r3, r3, #10
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebc:	801a      	strh	r2, [r3, #0]
 8005ebe:	e01b      	b.n	8005ef8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d117      	bne.n	8005ef8 <HAL_PCD_EP_DB_Transmit+0x392>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005edc:	4413      	add	r3, r2
 8005ede:	643b      	str	r3, [r7, #64]	; 0x40
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	011a      	lsls	r2, r3, #4
 8005ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee8:	4413      	add	r3, r2
 8005eea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6959      	ldr	r1, [r3, #20]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	891a      	ldrh	r2, [r3, #8]
 8005f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f004 fec0 	bl	800ac8c <USB_WritePMA>
 8005f0c:	e1d0      	b.n	80062b0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4413      	add	r3, r2
 8005f22:	3306      	adds	r3, #6
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	699a      	ldr	r2, [r3, #24]
 8005f3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d307      	bcc.n	8005f56 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	619a      	str	r2, [r3, #24]
 8005f54:	e002      	b.n	8005f5c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f040 80c4 	bne.w	80060ee <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d126      	bne.n	8005fbc <HAL_PCD_EP_DB_Transmit+0x456>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f82:	4413      	add	r3, r2
 8005f84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	011a      	lsls	r2, r3, #4
 8005f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8e:	4413      	add	r3, r2
 8005f90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f94:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	e01a      	b.n	8005ff2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	785b      	ldrb	r3, [r3, #1]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d116      	bne.n	8005ff2 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	677b      	str	r3, [r7, #116]	; 0x74
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd8:	4413      	add	r3, r2
 8005fda:	677b      	str	r3, [r7, #116]	; 0x74
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	011a      	lsls	r2, r3, #4
 8005fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fea:	673b      	str	r3, [r7, #112]	; 0x70
 8005fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fee:	2200      	movs	r2, #0
 8005ff0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	785b      	ldrb	r3, [r3, #1]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d12f      	bne.n	8006060 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006010:	b29b      	uxth	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006018:	4413      	add	r3, r2
 800601a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	011a      	lsls	r2, r3, #4
 8006024:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006028:	4413      	add	r3, r2
 800602a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800602e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006032:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800603e:	b29a      	uxth	r2, r3
 8006040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006056:	b29a      	uxth	r2, r3
 8006058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	e017      	b.n	8006090 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d113      	bne.n	8006090 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006070:	b29b      	uxth	r3, r3
 8006072:	461a      	mov	r2, r3
 8006074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006076:	4413      	add	r3, r2
 8006078:	67bb      	str	r3, [r7, #120]	; 0x78
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	011a      	lsls	r2, r3, #4
 8006080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006082:	4413      	add	r3, r2
 8006084:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006088:	67fb      	str	r3, [r7, #124]	; 0x7c
 800608a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800608c:	2200      	movs	r2, #0
 800608e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	4619      	mov	r1, r3
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f006 fc67 	bl	800c96a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 8104 	bne.w	80062b0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	441a      	add	r2, r3
 80060d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80060d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	8013      	strh	r3, [r2, #0]
 80060ec:	e0e0      	b.n	80062b0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d121      	bne.n	800613c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006112:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	441a      	add	r2, r3
 8006124:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006138:	b29b      	uxth	r3, r3
 800613a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006142:	2b01      	cmp	r3, #1
 8006144:	f040 80b4 	bne.w	80062b0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	695a      	ldr	r2, [r3, #20]
 800614c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006150:	441a      	add	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	69da      	ldr	r2, [r3, #28]
 800615a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800615e:	441a      	add	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	6a1a      	ldr	r2, [r3, #32]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	429a      	cmp	r2, r3
 800616e:	d309      	bcc.n	8006184 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	6a1a      	ldr	r2, [r3, #32]
 800617a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617c:	1ad2      	subs	r2, r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	621a      	str	r2, [r3, #32]
 8006182:	e015      	b.n	80061b0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d107      	bne.n	800619c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800618c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006190:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800619a:	e009      	b.n	80061b0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	667b      	str	r3, [r7, #100]	; 0x64
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d155      	bne.n	800626a <HAL_PCD_EP_DB_Transmit+0x704>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d2:	4413      	add	r3, r2
 80061d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	011a      	lsls	r2, r3, #4
 80061dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061de:	4413      	add	r3, r2
 80061e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80061e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d112      	bne.n	8006212 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80061ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620a:	b29a      	uxth	r2, r3
 800620c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	e044      	b.n	800629c <HAL_PCD_EP_DB_Transmit+0x736>
 8006212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006214:	2b3e      	cmp	r3, #62	; 0x3e
 8006216:	d811      	bhi.n	800623c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	657b      	str	r3, [r7, #84]	; 0x54
 800621e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800622a:	3301      	adds	r3, #1
 800622c:	657b      	str	r3, [r7, #84]	; 0x54
 800622e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006230:	b29b      	uxth	r3, r3
 8006232:	029b      	lsls	r3, r3, #10
 8006234:	b29a      	uxth	r2, r3
 8006236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	e02f      	b.n	800629c <HAL_PCD_EP_DB_Transmit+0x736>
 800623c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	657b      	str	r3, [r7, #84]	; 0x54
 8006242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	2b00      	cmp	r3, #0
 800624a:	d102      	bne.n	8006252 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800624c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800624e:	3b01      	subs	r3, #1
 8006250:	657b      	str	r3, [r7, #84]	; 0x54
 8006252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006254:	b29b      	uxth	r3, r3
 8006256:	029b      	lsls	r3, r3, #10
 8006258:	b29b      	uxth	r3, r3
 800625a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006262:	b29a      	uxth	r2, r3
 8006264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006266:	801a      	strh	r2, [r3, #0]
 8006268:	e018      	b.n	800629c <HAL_PCD_EP_DB_Transmit+0x736>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d114      	bne.n	800629c <HAL_PCD_EP_DB_Transmit+0x736>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627a:	b29b      	uxth	r3, r3
 800627c:	461a      	mov	r2, r3
 800627e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006280:	4413      	add	r3, r2
 8006282:	667b      	str	r3, [r7, #100]	; 0x64
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	011a      	lsls	r2, r3, #4
 800628a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800628c:	4413      	add	r3, r2
 800628e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006292:	663b      	str	r3, [r7, #96]	; 0x60
 8006294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006296:	b29a      	uxth	r2, r3
 8006298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800629a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	6959      	ldr	r1, [r3, #20]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	895a      	ldrh	r2, [r3, #10]
 80062a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	f004 fcee 	bl	800ac8c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	461a      	mov	r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ca:	823b      	strh	r3, [r7, #16]
 80062cc:	8a3b      	ldrh	r3, [r7, #16]
 80062ce:	f083 0310 	eor.w	r3, r3, #16
 80062d2:	823b      	strh	r3, [r7, #16]
 80062d4:	8a3b      	ldrh	r3, [r7, #16]
 80062d6:	f083 0320 	eor.w	r3, r3, #32
 80062da:	823b      	strh	r3, [r7, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	8a3b      	ldrh	r3, [r7, #16]
 80062ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3788      	adds	r7, #136	; 0x88
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800630a:	b480      	push	{r7}
 800630c:	b087      	sub	sp, #28
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	607b      	str	r3, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	817b      	strh	r3, [r7, #10]
 8006318:	4613      	mov	r3, r2
 800631a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800631c:	897b      	ldrh	r3, [r7, #10]
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00b      	beq.n	8006340 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006328:	897b      	ldrh	r3, [r7, #10]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	e009      	b.n	8006354 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006340:	897a      	ldrh	r2, [r7, #10]
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006354:	893b      	ldrh	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d107      	bne.n	800636a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2200      	movs	r2, #0
 800635e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	b29a      	uxth	r2, r3
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	80da      	strh	r2, [r3, #6]
 8006368:	e00b      	b.n	8006382 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2201      	movs	r2, #1
 800636e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	b29a      	uxth	r2, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	0c1b      	lsrs	r3, r3, #16
 800637c:	b29a      	uxth	r2, r3
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	371c      	adds	r7, #28
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
	...

08006390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e272      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 8087 	beq.w	80064be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063b0:	4b92      	ldr	r3, [pc, #584]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f003 030c 	and.w	r3, r3, #12
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d00c      	beq.n	80063d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063bc:	4b8f      	ldr	r3, [pc, #572]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f003 030c 	and.w	r3, r3, #12
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d112      	bne.n	80063ee <HAL_RCC_OscConfig+0x5e>
 80063c8:	4b8c      	ldr	r3, [pc, #560]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d4:	d10b      	bne.n	80063ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063d6:	4b89      	ldr	r3, [pc, #548]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d06c      	beq.n	80064bc <HAL_RCC_OscConfig+0x12c>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d168      	bne.n	80064bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e24c      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f6:	d106      	bne.n	8006406 <HAL_RCC_OscConfig+0x76>
 80063f8:	4b80      	ldr	r3, [pc, #512]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a7f      	ldr	r2, [pc, #508]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80063fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	e02e      	b.n	8006464 <HAL_RCC_OscConfig+0xd4>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10c      	bne.n	8006428 <HAL_RCC_OscConfig+0x98>
 800640e:	4b7b      	ldr	r3, [pc, #492]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a7a      	ldr	r2, [pc, #488]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	4b78      	ldr	r3, [pc, #480]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a77      	ldr	r2, [pc, #476]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	e01d      	b.n	8006464 <HAL_RCC_OscConfig+0xd4>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006430:	d10c      	bne.n	800644c <HAL_RCC_OscConfig+0xbc>
 8006432:	4b72      	ldr	r3, [pc, #456]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a71      	ldr	r2, [pc, #452]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	4b6f      	ldr	r3, [pc, #444]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a6e      	ldr	r2, [pc, #440]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	e00b      	b.n	8006464 <HAL_RCC_OscConfig+0xd4>
 800644c:	4b6b      	ldr	r3, [pc, #428]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a6a      	ldr	r2, [pc, #424]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	4b68      	ldr	r3, [pc, #416]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a67      	ldr	r2, [pc, #412]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 800645e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006462:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d013      	beq.n	8006494 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646c:	f7fd ff76 	bl	800435c <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006474:	f7fd ff72 	bl	800435c <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b64      	cmp	r3, #100	; 0x64
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e200      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006486:	4b5d      	ldr	r3, [pc, #372]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0xe4>
 8006492:	e014      	b.n	80064be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fd ff62 	bl	800435c <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800649c:	f7fd ff5e 	bl	800435c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	; 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e1ec      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ae:	4b53      	ldr	r3, [pc, #332]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x10c>
 80064ba:	e000      	b.n	80064be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d063      	beq.n	8006592 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064ca:	4b4c      	ldr	r3, [pc, #304]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 030c 	and.w	r3, r3, #12
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00b      	beq.n	80064ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064d6:	4b49      	ldr	r3, [pc, #292]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f003 030c 	and.w	r3, r3, #12
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d11c      	bne.n	800651c <HAL_RCC_OscConfig+0x18c>
 80064e2:	4b46      	ldr	r3, [pc, #280]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d116      	bne.n	800651c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ee:	4b43      	ldr	r3, [pc, #268]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_RCC_OscConfig+0x176>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d001      	beq.n	8006506 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e1c0      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006506:	4b3d      	ldr	r3, [pc, #244]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	4939      	ldr	r1, [pc, #228]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006516:	4313      	orrs	r3, r2
 8006518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800651a:	e03a      	b.n	8006592 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d020      	beq.n	8006566 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006524:	4b36      	ldr	r3, [pc, #216]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652a:	f7fd ff17 	bl	800435c <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006532:	f7fd ff13 	bl	800435c <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e1a1      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006544:	4b2d      	ldr	r3, [pc, #180]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0f0      	beq.n	8006532 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006550:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4927      	ldr	r1, [pc, #156]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006560:	4313      	orrs	r3, r2
 8006562:	600b      	str	r3, [r1, #0]
 8006564:	e015      	b.n	8006592 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006566:	4b26      	ldr	r3, [pc, #152]	; (8006600 <HAL_RCC_OscConfig+0x270>)
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656c:	f7fd fef6 	bl	800435c <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006574:	f7fd fef2 	bl	800435c <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e180      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006586:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0308 	and.w	r3, r3, #8
 800659a:	2b00      	cmp	r3, #0
 800659c:	d03a      	beq.n	8006614 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d019      	beq.n	80065da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <HAL_RCC_OscConfig+0x274>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ac:	f7fd fed6 	bl	800435c <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065b4:	f7fd fed2 	bl	800435c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e160      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065c6:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <HAL_RCC_OscConfig+0x26c>)
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065d2:	2001      	movs	r0, #1
 80065d4:	f000 faa6 	bl	8006b24 <RCC_Delay>
 80065d8:	e01c      	b.n	8006614 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065da:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <HAL_RCC_OscConfig+0x274>)
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e0:	f7fd febc 	bl	800435c <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e6:	e00f      	b.n	8006608 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065e8:	f7fd feb8 	bl	800435c <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d908      	bls.n	8006608 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e146      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
 80065fa:	bf00      	nop
 80065fc:	40021000 	.word	0x40021000
 8006600:	42420000 	.word	0x42420000
 8006604:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006608:	4b92      	ldr	r3, [pc, #584]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e9      	bne.n	80065e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80a6 	beq.w	800676e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006622:	2300      	movs	r3, #0
 8006624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006626:	4b8b      	ldr	r3, [pc, #556]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10d      	bne.n	800664e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006632:	4b88      	ldr	r3, [pc, #544]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	4a87      	ldr	r2, [pc, #540]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663c:	61d3      	str	r3, [r2, #28]
 800663e:	4b85      	ldr	r3, [pc, #532]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006646:	60bb      	str	r3, [r7, #8]
 8006648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664e:	4b82      	ldr	r3, [pc, #520]	; (8006858 <HAL_RCC_OscConfig+0x4c8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006656:	2b00      	cmp	r3, #0
 8006658:	d118      	bne.n	800668c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800665a:	4b7f      	ldr	r3, [pc, #508]	; (8006858 <HAL_RCC_OscConfig+0x4c8>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a7e      	ldr	r2, [pc, #504]	; (8006858 <HAL_RCC_OscConfig+0x4c8>)
 8006660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006666:	f7fd fe79 	bl	800435c <HAL_GetTick>
 800666a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	e008      	b.n	8006680 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800666e:	f7fd fe75 	bl	800435c <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b64      	cmp	r3, #100	; 0x64
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e103      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006680:	4b75      	ldr	r3, [pc, #468]	; (8006858 <HAL_RCC_OscConfig+0x4c8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0f0      	beq.n	800666e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d106      	bne.n	80066a2 <HAL_RCC_OscConfig+0x312>
 8006694:	4b6f      	ldr	r3, [pc, #444]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	4a6e      	ldr	r2, [pc, #440]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 800669a:	f043 0301 	orr.w	r3, r3, #1
 800669e:	6213      	str	r3, [r2, #32]
 80066a0:	e02d      	b.n	80066fe <HAL_RCC_OscConfig+0x36e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0x334>
 80066aa:	4b6a      	ldr	r3, [pc, #424]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	4a69      	ldr	r2, [pc, #420]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	6213      	str	r3, [r2, #32]
 80066b6:	4b67      	ldr	r3, [pc, #412]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	4a66      	ldr	r2, [pc, #408]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066bc:	f023 0304 	bic.w	r3, r3, #4
 80066c0:	6213      	str	r3, [r2, #32]
 80066c2:	e01c      	b.n	80066fe <HAL_RCC_OscConfig+0x36e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	2b05      	cmp	r3, #5
 80066ca:	d10c      	bne.n	80066e6 <HAL_RCC_OscConfig+0x356>
 80066cc:	4b61      	ldr	r3, [pc, #388]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	4a60      	ldr	r2, [pc, #384]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066d2:	f043 0304 	orr.w	r3, r3, #4
 80066d6:	6213      	str	r3, [r2, #32]
 80066d8:	4b5e      	ldr	r3, [pc, #376]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	4a5d      	ldr	r2, [pc, #372]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	6213      	str	r3, [r2, #32]
 80066e4:	e00b      	b.n	80066fe <HAL_RCC_OscConfig+0x36e>
 80066e6:	4b5b      	ldr	r3, [pc, #364]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	4a5a      	ldr	r2, [pc, #360]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	6213      	str	r3, [r2, #32]
 80066f2:	4b58      	ldr	r3, [pc, #352]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	4a57      	ldr	r2, [pc, #348]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d015      	beq.n	8006732 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006706:	f7fd fe29 	bl	800435c <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670c:	e00a      	b.n	8006724 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800670e:	f7fd fe25 	bl	800435c <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	f241 3288 	movw	r2, #5000	; 0x1388
 800671c:	4293      	cmp	r3, r2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e0b1      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006724:	4b4b      	ldr	r3, [pc, #300]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0ee      	beq.n	800670e <HAL_RCC_OscConfig+0x37e>
 8006730:	e014      	b.n	800675c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006732:	f7fd fe13 	bl	800435c <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006738:	e00a      	b.n	8006750 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fd fe0f 	bl	800435c <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f241 3288 	movw	r2, #5000	; 0x1388
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e09b      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006750:	4b40      	ldr	r3, [pc, #256]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ee      	bne.n	800673a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d105      	bne.n	800676e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006762:	4b3c      	ldr	r3, [pc, #240]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	4a3b      	ldr	r2, [pc, #236]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 8006768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800676c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 8087 	beq.w	8006886 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006778:	4b36      	ldr	r3, [pc, #216]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f003 030c 	and.w	r3, r3, #12
 8006780:	2b08      	cmp	r3, #8
 8006782:	d061      	beq.n	8006848 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d146      	bne.n	800681a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678c:	4b33      	ldr	r3, [pc, #204]	; (800685c <HAL_RCC_OscConfig+0x4cc>)
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006792:	f7fd fde3 	bl	800435c <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800679a:	f7fd fddf 	bl	800435c <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e06d      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067ac:	4b29      	ldr	r3, [pc, #164]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f0      	bne.n	800679a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c0:	d108      	bne.n	80067d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	4921      	ldr	r1, [pc, #132]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067d4:	4b1f      	ldr	r3, [pc, #124]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a19      	ldr	r1, [r3, #32]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	430b      	orrs	r3, r1
 80067e6:	491b      	ldr	r1, [pc, #108]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <HAL_RCC_OscConfig+0x4cc>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f2:	f7fd fdb3 	bl	800435c <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067f8:	e008      	b.n	800680c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067fa:	f7fd fdaf 	bl	800435c <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e03d      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800680c:	4b11      	ldr	r3, [pc, #68]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0f0      	beq.n	80067fa <HAL_RCC_OscConfig+0x46a>
 8006818:	e035      	b.n	8006886 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681a:	4b10      	ldr	r3, [pc, #64]	; (800685c <HAL_RCC_OscConfig+0x4cc>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fd fd9c 	bl	800435c <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006828:	f7fd fd98 	bl	800435c <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e026      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800683a:	4b06      	ldr	r3, [pc, #24]	; (8006854 <HAL_RCC_OscConfig+0x4c4>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x498>
 8006846:	e01e      	b.n	8006886 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d107      	bne.n	8006860 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e019      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
 8006854:	40021000 	.word	0x40021000
 8006858:	40007000 	.word	0x40007000
 800685c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006860:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <HAL_RCC_OscConfig+0x500>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a1b      	ldr	r3, [r3, #32]
 8006870:	429a      	cmp	r2, r3
 8006872:	d106      	bne.n	8006882 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d001      	beq.n	8006886 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40021000 	.word	0x40021000

08006894 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0d0      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068a8:	4b6a      	ldr	r3, [pc, #424]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d910      	bls.n	80068d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b67      	ldr	r3, [pc, #412]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 0207 	bic.w	r2, r3, #7
 80068be:	4965      	ldr	r1, [pc, #404]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068c6:	4b63      	ldr	r3, [pc, #396]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d001      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0b8      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d020      	beq.n	8006926 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068f0:	4b59      	ldr	r3, [pc, #356]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4a58      	ldr	r2, [pc, #352]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 80068f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006908:	4b53      	ldr	r3, [pc, #332]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4a52      	ldr	r2, [pc, #328]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 800690e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006912:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006914:	4b50      	ldr	r3, [pc, #320]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	494d      	ldr	r1, [pc, #308]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006922:	4313      	orrs	r3, r2
 8006924:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d040      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d107      	bne.n	800694a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693a:	4b47      	ldr	r3, [pc, #284]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d115      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e07f      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d107      	bne.n	8006962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006952:	4b41      	ldr	r3, [pc, #260]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e073      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006962:	4b3d      	ldr	r3, [pc, #244]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e06b      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006972:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f023 0203 	bic.w	r2, r3, #3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4936      	ldr	r1, [pc, #216]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006980:	4313      	orrs	r3, r2
 8006982:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006984:	f7fd fcea 	bl	800435c <HAL_GetTick>
 8006988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698a:	e00a      	b.n	80069a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800698c:	f7fd fce6 	bl	800435c <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f241 3288 	movw	r2, #5000	; 0x1388
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e053      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	4b2d      	ldr	r3, [pc, #180]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f003 020c 	and.w	r2, r3, #12
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d1eb      	bne.n	800698c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069b4:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d210      	bcs.n	80069e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b24      	ldr	r3, [pc, #144]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f023 0207 	bic.w	r2, r3, #7
 80069ca:	4922      	ldr	r1, [pc, #136]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d2:	4b20      	ldr	r3, [pc, #128]	; (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d001      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e032      	b.n	8006a4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d008      	beq.n	8006a02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f0:	4b19      	ldr	r3, [pc, #100]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4916      	ldr	r1, [pc, #88]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d009      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	490e      	ldr	r1, [pc, #56]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a22:	f000 f821 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 8006a26:	4602      	mov	r2, r0
 8006a28:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	490a      	ldr	r1, [pc, #40]	; (8006a5c <HAL_RCC_ClockConfig+0x1c8>)
 8006a34:	5ccb      	ldrb	r3, [r1, r3]
 8006a36:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3a:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <HAL_RCC_ClockConfig+0x1cc>)
 8006a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a3e:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_RCC_ClockConfig+0x1d0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fd fc48 	bl	80042d8 <HAL_InitTick>

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40022000 	.word	0x40022000
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	0800d8c0 	.word	0x0800d8c0
 8006a60:	20000008 	.word	0x20000008
 8006a64:	2000000c 	.word	0x2000000c

08006a68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a68:	b490      	push	{r4, r7}
 8006a6a:	b08a      	sub	sp, #40	; 0x28
 8006a6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a6e:	4b29      	ldr	r3, [pc, #164]	; (8006b14 <HAL_RCC_GetSysClockFreq+0xac>)
 8006a70:	1d3c      	adds	r4, r7, #4
 8006a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a78:	f240 2301 	movw	r3, #513	; 0x201
 8006a7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	2300      	movs	r3, #0
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	2300      	movs	r3, #0
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a92:	4b21      	ldr	r3, [pc, #132]	; (8006b18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f003 030c 	and.w	r3, r3, #12
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d002      	beq.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d003      	beq.n	8006aae <HAL_RCC_GetSysClockFreq+0x46>
 8006aa6:	e02b      	b.n	8006b00 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006aa8:	4b1c      	ldr	r3, [pc, #112]	; (8006b1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006aaa:	623b      	str	r3, [r7, #32]
      break;
 8006aac:	e02b      	b.n	8006b06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	0c9b      	lsrs	r3, r3, #18
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	3328      	adds	r3, #40	; 0x28
 8006ab8:	443b      	add	r3, r7
 8006aba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006abe:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d012      	beq.n	8006af0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006aca:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	0c5b      	lsrs	r3, r3, #17
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	3328      	adds	r3, #40	; 0x28
 8006ad6:	443b      	add	r3, r7
 8006ad8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006adc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	4a0e      	ldr	r2, [pc, #56]	; (8006b1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ae2:	fb03 f202 	mul.w	r2, r3, r2
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
 8006aee:	e004      	b.n	8006afa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	4a0b      	ldr	r2, [pc, #44]	; (8006b20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	623b      	str	r3, [r7, #32]
      break;
 8006afe:	e002      	b.n	8006b06 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b00:	4b06      	ldr	r3, [pc, #24]	; (8006b1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b02:	623b      	str	r3, [r7, #32]
      break;
 8006b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b06:	6a3b      	ldr	r3, [r7, #32]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3728      	adds	r7, #40	; 0x28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc90      	pop	{r4, r7}
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	0800d878 	.word	0x0800d878
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	007a1200 	.word	0x007a1200
 8006b20:	003d0900 	.word	0x003d0900

08006b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b2c:	4b0a      	ldr	r3, [pc, #40]	; (8006b58 <RCC_Delay+0x34>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <RCC_Delay+0x38>)
 8006b32:	fba2 2303 	umull	r2, r3, r2, r3
 8006b36:	0a5b      	lsrs	r3, r3, #9
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b40:	bf00      	nop
  }
  while (Delay --);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1e5a      	subs	r2, r3, #1
 8006b46:	60fa      	str	r2, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f9      	bne.n	8006b40 <RCC_Delay+0x1c>
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr
 8006b58:	20000008 	.word	0x20000008
 8006b5c:	10624dd3 	.word	0x10624dd3

08006b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d07d      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b80:	4b4f      	ldr	r3, [pc, #316]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10d      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b8c:	4b4c      	ldr	r3, [pc, #304]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	4a4b      	ldr	r2, [pc, #300]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b96:	61d3      	str	r3, [r2, #28]
 8006b98:	4b49      	ldr	r3, [pc, #292]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	4b46      	ldr	r3, [pc, #280]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d118      	bne.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bb4:	4b43      	ldr	r3, [pc, #268]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a42      	ldr	r2, [pc, #264]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bc0:	f7fd fbcc 	bl	800435c <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc6:	e008      	b.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc8:	f7fd fbc8 	bl	800435c <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b64      	cmp	r3, #100	; 0x64
 8006bd4:	d901      	bls.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e06d      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bda:	4b3a      	ldr	r3, [pc, #232]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0f0      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006be6:	4b36      	ldr	r3, [pc, #216]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d02e      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d027      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c04:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c0e:	4b2e      	ldr	r3, [pc, #184]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c14:	4b2c      	ldr	r3, [pc, #176]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c1a:	4a29      	ldr	r2, [pc, #164]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d014      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2a:	f7fd fb97 	bl	800435c <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c30:	e00a      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c32:	f7fd fb93 	bl	800435c <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e036      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c48:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0ee      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c54:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	4917      	ldr	r1, [pc, #92]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d105      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c6c:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	4a13      	ldr	r2, [pc, #76]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c84:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	490b      	ldr	r1, [pc, #44]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d008      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ca2:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	4904      	ldr	r1, [pc, #16]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40007000 	.word	0x40007000
 8006cc8:	42420440 	.word	0x42420440

08006ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e076      	b.n	8006dcc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d108      	bne.n	8006cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cee:	d009      	beq.n	8006d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	61da      	str	r2, [r3, #28]
 8006cf6:	e005      	b.n	8006d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fa ff4e 	bl	8001bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d88:	ea42 0103 	orr.w	r1, r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	0c1a      	lsrs	r2, r3, #16
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f002 0204 	and.w	r2, r2, #4
 8006daa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69da      	ldr	r2, [r3, #28]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <HAL_SPI_Transmit+0x22>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e126      	b.n	8007044 <HAL_SPI_Transmit+0x270>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dfe:	f7fd faad 	bl	800435c <HAL_GetTick>
 8006e02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e04:	88fb      	ldrh	r3, [r7, #6]
 8006e06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d002      	beq.n	8006e1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
 8006e16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e18:	e10b      	b.n	8007032 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d002      	beq.n	8006e26 <HAL_SPI_Transmit+0x52>
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e2a:	e102      	b.n	8007032 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2203      	movs	r2, #3
 8006e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	88fa      	ldrh	r2, [r7, #6]
 8006e44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	88fa      	ldrh	r2, [r7, #6]
 8006e4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e72:	d10f      	bne.n	8006e94 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9e:	2b40      	cmp	r3, #64	; 0x40
 8006ea0:	d007      	beq.n	8006eb2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eba:	d14b      	bne.n	8006f54 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <HAL_SPI_Transmit+0xf6>
 8006ec4:	8afb      	ldrh	r3, [r7, #22]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d13e      	bne.n	8006f48 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	881a      	ldrh	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	1c9a      	adds	r2, r3, #2
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006eee:	e02b      	b.n	8006f48 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d112      	bne.n	8006f24 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	881a      	ldrh	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	1c9a      	adds	r2, r3, #2
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f22:	e011      	b.n	8006f48 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f24:	f7fd fa1a 	bl	800435c <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d803      	bhi.n	8006f3c <HAL_SPI_Transmit+0x168>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f3a:	d102      	bne.n	8006f42 <HAL_SPI_Transmit+0x16e>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f46:	e074      	b.n	8007032 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1ce      	bne.n	8006ef0 <HAL_SPI_Transmit+0x11c>
 8006f52:	e04c      	b.n	8006fee <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <HAL_SPI_Transmit+0x18e>
 8006f5c:	8afb      	ldrh	r3, [r7, #22]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d140      	bne.n	8006fe4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f88:	e02c      	b.n	8006fe4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d113      	bne.n	8006fc0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	330c      	adds	r3, #12
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fbe:	e011      	b.n	8006fe4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fc0:	f7fd f9cc 	bl	800435c <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d803      	bhi.n	8006fd8 <HAL_SPI_Transmit+0x204>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fd6:	d102      	bne.n	8006fde <HAL_SPI_Transmit+0x20a>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d102      	bne.n	8006fe4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fe2:	e026      	b.n	8007032 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1cd      	bne.n	8006f8a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f8b2 	bl	800715c <SPI_EndRxTxTransaction>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2220      	movs	r2, #32
 8007002:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10a      	bne.n	8007022 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	77fb      	strb	r3, [r7, #31]
 800702e:	e000      	b.n	8007032 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007030:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007042:	7ffb      	ldrb	r3, [r7, #31]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3720      	adds	r7, #32
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800705c:	f7fd f97e 	bl	800435c <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	1a9b      	subs	r3, r3, r2
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	4413      	add	r3, r2
 800706a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800706c:	f7fd f976 	bl	800435c <HAL_GetTick>
 8007070:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007072:	4b39      	ldr	r3, [pc, #228]	; (8007158 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	015b      	lsls	r3, r3, #5
 8007078:	0d1b      	lsrs	r3, r3, #20
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	fb02 f303 	mul.w	r3, r2, r3
 8007080:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007082:	e054      	b.n	800712e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800708a:	d050      	beq.n	800712e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800708c:	f7fd f966 	bl	800435c <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	429a      	cmp	r2, r3
 800709a:	d902      	bls.n	80070a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d13d      	bne.n	800711e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ba:	d111      	bne.n	80070e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070c4:	d004      	beq.n	80070d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ce:	d107      	bne.n	80070e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e8:	d10f      	bne.n	800710a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007108:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e017      	b.n	800714e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	3b01      	subs	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	4013      	ands	r3, r2
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	429a      	cmp	r2, r3
 800713c:	bf0c      	ite	eq
 800713e:	2301      	moveq	r3, #1
 8007140:	2300      	movne	r3, #0
 8007142:	b2db      	uxtb	r3, r3
 8007144:	461a      	mov	r2, r3
 8007146:	79fb      	ldrb	r3, [r7, #7]
 8007148:	429a      	cmp	r2, r3
 800714a:	d19b      	bne.n	8007084 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3720      	adds	r7, #32
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20000008 	.word	0x20000008

0800715c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af02      	add	r7, sp, #8
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2200      	movs	r2, #0
 8007170:	2180      	movs	r1, #128	; 0x80
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff ff6a 	bl	800704c <SPI_WaitFlagStateUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d007      	beq.n	800718e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007182:	f043 0220 	orr.w	r2, r3, #32
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e000      	b.n	8007190 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e041      	b.n	800722e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fa fd3c 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	f000 fcba 	bl	8007b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d001      	beq.n	8007250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e03a      	b.n	80072c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a18      	ldr	r2, [pc, #96]	; (80072d0 <HAL_TIM_Base_Start_IT+0x98>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00e      	beq.n	8007290 <HAL_TIM_Base_Start_IT+0x58>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727a:	d009      	beq.n	8007290 <HAL_TIM_Base_Start_IT+0x58>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a14      	ldr	r2, [pc, #80]	; (80072d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d004      	beq.n	8007290 <HAL_TIM_Base_Start_IT+0x58>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a13      	ldr	r2, [pc, #76]	; (80072d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d111      	bne.n	80072b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b06      	cmp	r3, #6
 80072a0:	d010      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0201 	orr.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b2:	e007      	b.n	80072c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0201 	orr.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr
 80072d0:	40012c00 	.word	0x40012c00
 80072d4:	40000400 	.word	0x40000400
 80072d8:	40000800 	.word	0x40000800

080072dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0201 	bic.w	r2, r2, #1
 80072f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6a1a      	ldr	r2, [r3, #32]
 80072fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80072fe:	4013      	ands	r3, r2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10f      	bne.n	8007324 <HAL_TIM_Base_Stop_IT+0x48>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6a1a      	ldr	r2, [r3, #32]
 800730a:	f240 4344 	movw	r3, #1092	; 0x444
 800730e:	4013      	ands	r3, r2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d107      	bne.n	8007324 <HAL_TIM_Base_Stop_IT+0x48>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 0201 	bic.w	r2, r2, #1
 8007322:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr

08007338 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e041      	b.n	80073ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f839 	bl	80073d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3304      	adds	r3, #4
 8007374:	4619      	mov	r1, r3
 8007376:	4610      	mov	r0, r2
 8007378:	f000 fbea 	bl	8007b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr

080073e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d109      	bne.n	800740c <HAL_TIM_PWM_Start+0x24>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b01      	cmp	r3, #1
 8007402:	bf14      	ite	ne
 8007404:	2301      	movne	r3, #1
 8007406:	2300      	moveq	r3, #0
 8007408:	b2db      	uxtb	r3, r3
 800740a:	e022      	b.n	8007452 <HAL_TIM_PWM_Start+0x6a>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b04      	cmp	r3, #4
 8007410:	d109      	bne.n	8007426 <HAL_TIM_PWM_Start+0x3e>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b01      	cmp	r3, #1
 800741c:	bf14      	ite	ne
 800741e:	2301      	movne	r3, #1
 8007420:	2300      	moveq	r3, #0
 8007422:	b2db      	uxtb	r3, r3
 8007424:	e015      	b.n	8007452 <HAL_TIM_PWM_Start+0x6a>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b08      	cmp	r3, #8
 800742a:	d109      	bne.n	8007440 <HAL_TIM_PWM_Start+0x58>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b01      	cmp	r3, #1
 8007436:	bf14      	ite	ne
 8007438:	2301      	movne	r3, #1
 800743a:	2300      	moveq	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	e008      	b.n	8007452 <HAL_TIM_PWM_Start+0x6a>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b01      	cmp	r3, #1
 800744a:	bf14      	ite	ne
 800744c:	2301      	movne	r3, #1
 800744e:	2300      	moveq	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e05e      	b.n	8007518 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <HAL_TIM_PWM_Start+0x82>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007468:	e013      	b.n	8007492 <HAL_TIM_PWM_Start+0xaa>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b04      	cmp	r3, #4
 800746e:	d104      	bne.n	800747a <HAL_TIM_PWM_Start+0x92>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007478:	e00b      	b.n	8007492 <HAL_TIM_PWM_Start+0xaa>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b08      	cmp	r3, #8
 800747e:	d104      	bne.n	800748a <HAL_TIM_PWM_Start+0xa2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007488:	e003      	b.n	8007492 <HAL_TIM_PWM_Start+0xaa>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2201      	movs	r2, #1
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fdd8 	bl	8008050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1e      	ldr	r2, [pc, #120]	; (8007520 <HAL_TIM_PWM_Start+0x138>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d107      	bne.n	80074ba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a18      	ldr	r2, [pc, #96]	; (8007520 <HAL_TIM_PWM_Start+0x138>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00e      	beq.n	80074e2 <HAL_TIM_PWM_Start+0xfa>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074cc:	d009      	beq.n	80074e2 <HAL_TIM_PWM_Start+0xfa>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a14      	ldr	r2, [pc, #80]	; (8007524 <HAL_TIM_PWM_Start+0x13c>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d004      	beq.n	80074e2 <HAL_TIM_PWM_Start+0xfa>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a12      	ldr	r2, [pc, #72]	; (8007528 <HAL_TIM_PWM_Start+0x140>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d111      	bne.n	8007506 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b06      	cmp	r3, #6
 80074f2:	d010      	beq.n	8007516 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0201 	orr.w	r2, r2, #1
 8007502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007504:	e007      	b.n	8007516 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f042 0201 	orr.w	r2, r2, #1
 8007514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40012c00 	.word	0x40012c00
 8007524:	40000400 	.word	0x40000400
 8007528:	40000800 	.word	0x40000800

0800752c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2200      	movs	r2, #0
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fd86 	bl	8008050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a29      	ldr	r2, [pc, #164]	; (80075f0 <HAL_TIM_PWM_Stop+0xc4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d117      	bne.n	800757e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	f241 1311 	movw	r3, #4369	; 0x1111
 8007558:	4013      	ands	r3, r2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10f      	bne.n	800757e <HAL_TIM_PWM_Stop+0x52>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6a1a      	ldr	r2, [r3, #32]
 8007564:	f240 4344 	movw	r3, #1092	; 0x444
 8007568:	4013      	ands	r3, r2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d107      	bne.n	800757e <HAL_TIM_PWM_Stop+0x52>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800757c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6a1a      	ldr	r2, [r3, #32]
 8007584:	f241 1311 	movw	r3, #4369	; 0x1111
 8007588:	4013      	ands	r3, r2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10f      	bne.n	80075ae <HAL_TIM_PWM_Stop+0x82>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6a1a      	ldr	r2, [r3, #32]
 8007594:	f240 4344 	movw	r3, #1092	; 0x444
 8007598:	4013      	ands	r3, r2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d107      	bne.n	80075ae <HAL_TIM_PWM_Stop+0x82>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0201 	bic.w	r2, r2, #1
 80075ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <HAL_TIM_PWM_Stop+0x92>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075bc:	e013      	b.n	80075e6 <HAL_TIM_PWM_Stop+0xba>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d104      	bne.n	80075ce <HAL_TIM_PWM_Stop+0xa2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075cc:	e00b      	b.n	80075e6 <HAL_TIM_PWM_Stop+0xba>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d104      	bne.n	80075de <HAL_TIM_PWM_Stop+0xb2>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075dc:	e003      	b.n	80075e6 <HAL_TIM_PWM_Stop+0xba>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40012c00 	.word	0x40012c00

080075f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b02      	cmp	r3, #2
 8007608:	d122      	bne.n	8007650 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b02      	cmp	r3, #2
 8007616:	d11b      	bne.n	8007650 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0202 	mvn.w	r2, #2
 8007620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa6f 	bl	8007b1a <HAL_TIM_IC_CaptureCallback>
 800763c:	e005      	b.n	800764a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fa62 	bl	8007b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fa71 	bl	8007b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b04      	cmp	r3, #4
 800765c:	d122      	bne.n	80076a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b04      	cmp	r3, #4
 800766a:	d11b      	bne.n	80076a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f06f 0204 	mvn.w	r2, #4
 8007674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2202      	movs	r2, #2
 800767a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fa45 	bl	8007b1a <HAL_TIM_IC_CaptureCallback>
 8007690:	e005      	b.n	800769e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa38 	bl	8007b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fa47 	bl	8007b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0308 	and.w	r3, r3, #8
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	d122      	bne.n	80076f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d11b      	bne.n	80076f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f06f 0208 	mvn.w	r2, #8
 80076c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2204      	movs	r2, #4
 80076ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fa1b 	bl	8007b1a <HAL_TIM_IC_CaptureCallback>
 80076e4:	e005      	b.n	80076f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa0e 	bl	8007b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fa1d 	bl	8007b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f003 0310 	and.w	r3, r3, #16
 8007702:	2b10      	cmp	r3, #16
 8007704:	d122      	bne.n	800774c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f003 0310 	and.w	r3, r3, #16
 8007710:	2b10      	cmp	r3, #16
 8007712:	d11b      	bne.n	800774c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f06f 0210 	mvn.w	r2, #16
 800771c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2208      	movs	r2, #8
 8007722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9f1 	bl	8007b1a <HAL_TIM_IC_CaptureCallback>
 8007738:	e005      	b.n	8007746 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f9e4 	bl	8007b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f9f3 	bl	8007b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	2b01      	cmp	r3, #1
 8007758:	d10e      	bne.n	8007778 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b01      	cmp	r3, #1
 8007766:	d107      	bne.n	8007778 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f06f 0201 	mvn.w	r2, #1
 8007770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7f8 fdc6 	bl	8000304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007782:	2b80      	cmp	r3, #128	; 0x80
 8007784:	d10e      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007790:	2b80      	cmp	r3, #128	; 0x80
 8007792:	d107      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800779c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fd32 	bl	8008208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d10e      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077bc:	2b40      	cmp	r3, #64	; 0x40
 80077be:	d107      	bne.n	80077d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f9b7 	bl	8007b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b20      	cmp	r3, #32
 80077dc:	d10e      	bne.n	80077fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d107      	bne.n	80077fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0220 	mvn.w	r2, #32
 80077f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fcfd 	bl	80081f6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800781a:	2302      	movs	r3, #2
 800781c:	e0ac      	b.n	8007978 <HAL_TIM_PWM_ConfigChannel+0x174>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b0c      	cmp	r3, #12
 800782a:	f200 809f 	bhi.w	800796c <HAL_TIM_PWM_ConfigChannel+0x168>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007869 	.word	0x08007869
 8007838:	0800796d 	.word	0x0800796d
 800783c:	0800796d 	.word	0x0800796d
 8007840:	0800796d 	.word	0x0800796d
 8007844:	080078a9 	.word	0x080078a9
 8007848:	0800796d 	.word	0x0800796d
 800784c:	0800796d 	.word	0x0800796d
 8007850:	0800796d 	.word	0x0800796d
 8007854:	080078eb 	.word	0x080078eb
 8007858:	0800796d 	.word	0x0800796d
 800785c:	0800796d 	.word	0x0800796d
 8007860:	0800796d 	.word	0x0800796d
 8007864:	0800792b 	.word	0x0800792b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f9d0 	bl	8007c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	699a      	ldr	r2, [r3, #24]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0208 	orr.w	r2, r2, #8
 8007882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699a      	ldr	r2, [r3, #24]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0204 	bic.w	r2, r2, #4
 8007892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6999      	ldr	r1, [r3, #24]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	691a      	ldr	r2, [r3, #16]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	619a      	str	r2, [r3, #24]
      break;
 80078a6:	e062      	b.n	800796e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68b9      	ldr	r1, [r7, #8]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fa16 	bl	8007ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699a      	ldr	r2, [r3, #24]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	699a      	ldr	r2, [r3, #24]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6999      	ldr	r1, [r3, #24]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	021a      	lsls	r2, r3, #8
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	619a      	str	r2, [r3, #24]
      break;
 80078e8:	e041      	b.n	800796e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fa5f 	bl	8007db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69da      	ldr	r2, [r3, #28]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0208 	orr.w	r2, r2, #8
 8007904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69da      	ldr	r2, [r3, #28]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0204 	bic.w	r2, r2, #4
 8007914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69d9      	ldr	r1, [r3, #28]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	691a      	ldr	r2, [r3, #16]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	430a      	orrs	r2, r1
 8007926:	61da      	str	r2, [r3, #28]
      break;
 8007928:	e021      	b.n	800796e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68b9      	ldr	r1, [r7, #8]
 8007930:	4618      	mov	r0, r3
 8007932:	f000 faa9 	bl	8007e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	69da      	ldr	r2, [r3, #28]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69d9      	ldr	r1, [r3, #28]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	021a      	lsls	r2, r3, #8
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	61da      	str	r2, [r3, #28]
      break;
 800796a:	e000      	b.n	800796e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800796c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_TIM_ConfigClockSource+0x18>
 8007994:	2302      	movs	r3, #2
 8007996:	e0b3      	b.n	8007b00 <HAL_TIM_ConfigClockSource+0x180>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d0:	d03e      	beq.n	8007a50 <HAL_TIM_ConfigClockSource+0xd0>
 80079d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d6:	f200 8087 	bhi.w	8007ae8 <HAL_TIM_ConfigClockSource+0x168>
 80079da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079de:	f000 8085 	beq.w	8007aec <HAL_TIM_ConfigClockSource+0x16c>
 80079e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e6:	d87f      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x168>
 80079e8:	2b70      	cmp	r3, #112	; 0x70
 80079ea:	d01a      	beq.n	8007a22 <HAL_TIM_ConfigClockSource+0xa2>
 80079ec:	2b70      	cmp	r3, #112	; 0x70
 80079ee:	d87b      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x168>
 80079f0:	2b60      	cmp	r3, #96	; 0x60
 80079f2:	d050      	beq.n	8007a96 <HAL_TIM_ConfigClockSource+0x116>
 80079f4:	2b60      	cmp	r3, #96	; 0x60
 80079f6:	d877      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x168>
 80079f8:	2b50      	cmp	r3, #80	; 0x50
 80079fa:	d03c      	beq.n	8007a76 <HAL_TIM_ConfigClockSource+0xf6>
 80079fc:	2b50      	cmp	r3, #80	; 0x50
 80079fe:	d873      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x168>
 8007a00:	2b40      	cmp	r3, #64	; 0x40
 8007a02:	d058      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0x136>
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d86f      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x168>
 8007a08:	2b30      	cmp	r3, #48	; 0x30
 8007a0a:	d064      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x156>
 8007a0c:	2b30      	cmp	r3, #48	; 0x30
 8007a0e:	d86b      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x168>
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d060      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x156>
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	d867      	bhi.n	8007ae8 <HAL_TIM_ConfigClockSource+0x168>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d05c      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x156>
 8007a1c:	2b10      	cmp	r3, #16
 8007a1e:	d05a      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007a20:	e062      	b.n	8007ae8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	6899      	ldr	r1, [r3, #8]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f000 faee 	bl	8008012 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	609a      	str	r2, [r3, #8]
      break;
 8007a4e:	e04e      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6818      	ldr	r0, [r3, #0]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	6899      	ldr	r1, [r3, #8]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f000 fad7 	bl	8008012 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689a      	ldr	r2, [r3, #8]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a72:	609a      	str	r2, [r3, #8]
      break;
 8007a74:	e03b      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	6859      	ldr	r1, [r3, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	461a      	mov	r2, r3
 8007a84:	f000 fa4e 	bl	8007f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2150      	movs	r1, #80	; 0x50
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 faa5 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007a94:	e02b      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6859      	ldr	r1, [r3, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f000 fa6c 	bl	8007f80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2160      	movs	r1, #96	; 0x60
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 fa95 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007ab4:	e01b      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	6859      	ldr	r1, [r3, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f000 fa2e 	bl	8007f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2140      	movs	r1, #64	; 0x40
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 fa85 	bl	8007fde <TIM_ITRx_SetConfig>
      break;
 8007ad4:	e00b      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f000 fa7c 	bl	8007fde <TIM_ITRx_SetConfig>
        break;
 8007ae6:	e002      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ae8:	bf00      	nop
 8007aea:	e000      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007aec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr

08007b1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b083      	sub	sp, #12
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b22:	bf00      	nop
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr

08007b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bc80      	pop	{r7}
 8007b4e:	4770      	bx	lr

08007b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a29      	ldr	r2, [pc, #164]	; (8007c08 <TIM_Base_SetConfig+0xb8>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00b      	beq.n	8007b80 <TIM_Base_SetConfig+0x30>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6e:	d007      	beq.n	8007b80 <TIM_Base_SetConfig+0x30>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a26      	ldr	r2, [pc, #152]	; (8007c0c <TIM_Base_SetConfig+0xbc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_Base_SetConfig+0x30>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a25      	ldr	r2, [pc, #148]	; (8007c10 <TIM_Base_SetConfig+0xc0>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d108      	bne.n	8007b92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a1c      	ldr	r2, [pc, #112]	; (8007c08 <TIM_Base_SetConfig+0xb8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00b      	beq.n	8007bb2 <TIM_Base_SetConfig+0x62>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba0:	d007      	beq.n	8007bb2 <TIM_Base_SetConfig+0x62>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a19      	ldr	r2, [pc, #100]	; (8007c0c <TIM_Base_SetConfig+0xbc>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d003      	beq.n	8007bb2 <TIM_Base_SetConfig+0x62>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a18      	ldr	r2, [pc, #96]	; (8007c10 <TIM_Base_SetConfig+0xc0>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d108      	bne.n	8007bc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a07      	ldr	r2, [pc, #28]	; (8007c08 <TIM_Base_SetConfig+0xb8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d103      	bne.n	8007bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	615a      	str	r2, [r3, #20]
}
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bc80      	pop	{r7}
 8007c06:	4770      	bx	lr
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	40000400 	.word	0x40000400
 8007c10:	40000800 	.word	0x40000800

08007c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	f023 0201 	bic.w	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f023 0302 	bic.w	r3, r3, #2
 8007c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a1c      	ldr	r2, [pc, #112]	; (8007cdc <TIM_OC1_SetConfig+0xc8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d10c      	bne.n	8007c8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f023 0308 	bic.w	r3, r3, #8
 8007c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f023 0304 	bic.w	r3, r3, #4
 8007c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a13      	ldr	r2, [pc, #76]	; (8007cdc <TIM_OC1_SetConfig+0xc8>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d111      	bne.n	8007cb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	621a      	str	r2, [r3, #32]
}
 8007cd0:	bf00      	nop
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bc80      	pop	{r7}
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40012c00 	.word	0x40012c00

08007ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	f023 0210 	bic.w	r2, r3, #16
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f023 0320 	bic.w	r3, r3, #32
 8007d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a1d      	ldr	r2, [pc, #116]	; (8007db0 <TIM_OC2_SetConfig+0xd0>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d10d      	bne.n	8007d5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	011b      	lsls	r3, r3, #4
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a14      	ldr	r2, [pc, #80]	; (8007db0 <TIM_OC2_SetConfig+0xd0>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d113      	bne.n	8007d8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68fa      	ldr	r2, [r7, #12]
 8007d96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	621a      	str	r2, [r3, #32]
}
 8007da6:	bf00      	nop
 8007da8:	371c      	adds	r7, #28
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr
 8007db0:	40012c00 	.word	0x40012c00

08007db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <TIM_OC3_SetConfig+0xd0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d10d      	bne.n	8007e2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a14      	ldr	r2, [pc, #80]	; (8007e84 <TIM_OC3_SetConfig+0xd0>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d113      	bne.n	8007e5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	621a      	str	r2, [r3, #32]
}
 8007e78:	bf00      	nop
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bc80      	pop	{r7}
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	40012c00 	.word	0x40012c00

08007e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	021b      	lsls	r3, r3, #8
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	031b      	lsls	r3, r3, #12
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a0f      	ldr	r2, [pc, #60]	; (8007f20 <TIM_OC4_SetConfig+0x98>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d109      	bne.n	8007efc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	019b      	lsls	r3, r3, #6
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr
 8007f20:	40012c00 	.word	0x40012c00

08007f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	f023 0201 	bic.w	r2, r3, #1
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f023 030a 	bic.w	r3, r3, #10
 8007f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr

08007f80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	f023 0210 	bic.w	r2, r3, #16
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007faa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	031b      	lsls	r3, r3, #12
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	011b      	lsls	r3, r3, #4
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	621a      	str	r2, [r3, #32]
}
 8007fd4:	bf00      	nop
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bc80      	pop	{r7}
 8007fdc:	4770      	bx	lr

08007fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fde:	b480      	push	{r7}
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	f043 0307 	orr.w	r3, r3, #7
 8008000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	609a      	str	r2, [r3, #8]
}
 8008008:	bf00      	nop
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr

08008012 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008012:	b480      	push	{r7}
 8008014:	b087      	sub	sp, #28
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
 800801e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800802c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	021a      	lsls	r2, r3, #8
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	431a      	orrs	r2, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	4313      	orrs	r3, r2
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	609a      	str	r2, [r3, #8]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr

08008050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	2201      	movs	r2, #1
 8008064:	fa02 f303 	lsl.w	r3, r2, r3
 8008068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a1a      	ldr	r2, [r3, #32]
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	43db      	mvns	r3, r3
 8008072:	401a      	ands	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a1a      	ldr	r2, [r3, #32]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 031f 	and.w	r3, r3, #31
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	fa01 f303 	lsl.w	r3, r1, r3
 8008088:	431a      	orrs	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	621a      	str	r2, [r3, #32]
}
 800808e:	bf00      	nop
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr

08008098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e046      	b.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a16      	ldr	r2, [pc, #88]	; (8008148 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00e      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fc:	d009      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a12      	ldr	r2, [pc, #72]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a10      	ldr	r2, [pc, #64]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d10c      	bne.n	800812c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	4313      	orrs	r3, r2
 8008122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr
 8008148:	40012c00 	.word	0x40012c00
 800814c:	40000400 	.word	0x40000400
 8008150:	40000800 	.word	0x40000800

08008154 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800816c:	2302      	movs	r3, #2
 800816e:	e03d      	b.n	80081ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	4313      	orrs	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr

080081f6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081fe:	bf00      	nop
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr

08008208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	bc80      	pop	{r7}
 8008218:	4770      	bx	lr

0800821a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800821a:	b084      	sub	sp, #16
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	f107 0014 	add.w	r0, r7, #20
 8008228:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	bc80      	pop	{r7}
 8008236:	b004      	add	sp, #16
 8008238:	4770      	bx	lr

0800823a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800823a:	b480      	push	{r7}
 800823c:	b085      	sub	sp, #20
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800824a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800824e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	b29a      	uxth	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	bc80      	pop	{r7}
 8008264:	4770      	bx	lr

08008266 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008266:	b480      	push	{r7}
 8008268:	b085      	sub	sp, #20
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800826e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008272:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800827a:	b29a      	uxth	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	b29b      	uxth	r3, r3
 8008280:	43db      	mvns	r3, r3
 8008282:	b29b      	uxth	r3, r3
 8008284:	4013      	ands	r3, r2
 8008286:	b29a      	uxth	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr

0800829a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	460b      	mov	r3, r1
 80082a4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bc80      	pop	{r7}
 80082b0:	4770      	bx	lr

080082b2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082b2:	b084      	sub	sp, #16
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	f107 0014 	add.w	r0, r7, #20
 80082c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bc80      	pop	{r7}
 80082ee:	b004      	add	sp, #16
 80082f0:	4770      	bx	lr
	...

080082f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b09b      	sub	sp, #108	; 0x6c
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	78db      	ldrb	r3, [r3, #3]
 8008322:	2b03      	cmp	r3, #3
 8008324:	d81f      	bhi.n	8008366 <USB_ActivateEndpoint+0x72>
 8008326:	a201      	add	r2, pc, #4	; (adr r2, 800832c <USB_ActivateEndpoint+0x38>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	0800833d 	.word	0x0800833d
 8008330:	08008359 	.word	0x08008359
 8008334:	0800836f 	.word	0x0800836f
 8008338:	0800834b 	.word	0x0800834b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800833c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008344:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008348:	e012      	b.n	8008370 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800834a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800834e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008352:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008356:	e00b      	b.n	8008370 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008358:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800835c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008360:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008364:	e004      	b.n	8008370 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800836c:	e000      	b.n	8008370 <USB_ActivateEndpoint+0x7c>
      break;
 800836e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	441a      	add	r2, r3
 800837a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800837e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800838a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838e:	b29b      	uxth	r3, r3
 8008390:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	4313      	orrs	r3, r2
 80083b2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	441a      	add	r2, r3
 80083c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80083c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	7b1b      	ldrb	r3, [r3, #12]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f040 8149 	bne.w	8008674 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8084 	beq.w	80084f4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	617b      	str	r3, [r7, #20]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	461a      	mov	r2, r3
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	4413      	add	r3, r2
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	011a      	lsls	r2, r3, #4
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800840e:	613b      	str	r3, [r7, #16]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	88db      	ldrh	r3, [r3, #6]
 8008414:	085b      	lsrs	r3, r3, #1
 8008416:	b29b      	uxth	r3, r3
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	81fb      	strh	r3, [r7, #14]
 800842e:	89fb      	ldrh	r3, [r7, #14]
 8008430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01b      	beq.n	8008470 <USB_ActivateEndpoint+0x17c>
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	881b      	ldrh	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844e:	81bb      	strh	r3, [r7, #12]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	441a      	add	r2, r3
 800845a:	89bb      	ldrh	r3, [r7, #12]
 800845c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008468:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800846c:	b29b      	uxth	r3, r3
 800846e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	78db      	ldrb	r3, [r3, #3]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d020      	beq.n	80084ba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4413      	add	r3, r2
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b29b      	uxth	r3, r3
 8008486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800848a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800848e:	813b      	strh	r3, [r7, #8]
 8008490:	893b      	ldrh	r3, [r7, #8]
 8008492:	f083 0320 	eor.w	r3, r3, #32
 8008496:	813b      	strh	r3, [r7, #8]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	441a      	add	r2, r3
 80084a2:	893b      	ldrh	r3, [r7, #8]
 80084a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	8013      	strh	r3, [r2, #0]
 80084b8:	e27f      	b.n	80089ba <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084d0:	817b      	strh	r3, [r7, #10]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	441a      	add	r2, r3
 80084dc:	897b      	ldrh	r3, [r7, #10]
 80084de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	8013      	strh	r3, [r2, #0]
 80084f2:	e262      	b.n	80089ba <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fe:	b29b      	uxth	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	4413      	add	r3, r2
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	011a      	lsls	r2, r3, #4
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	4413      	add	r3, r2
 8008512:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008516:	62bb      	str	r3, [r7, #40]	; 0x28
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	88db      	ldrh	r3, [r3, #6]
 800851c:	085b      	lsrs	r3, r3, #1
 800851e:	b29b      	uxth	r3, r3
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	b29a      	uxth	r2, r3
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008532:	b29b      	uxth	r3, r3
 8008534:	461a      	mov	r2, r3
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	4413      	add	r3, r2
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	011a      	lsls	r2, r3, #4
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	4413      	add	r3, r2
 8008546:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800854a:	623b      	str	r3, [r7, #32]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d112      	bne.n	800857a <USB_ActivateEndpoint+0x286>
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800855e:	b29a      	uxth	r2, r3
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800856e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008572:	b29a      	uxth	r2, r3
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	801a      	strh	r2, [r3, #0]
 8008578:	e02f      	b.n	80085da <USB_ActivateEndpoint+0x2e6>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	2b3e      	cmp	r3, #62	; 0x3e
 8008580:	d813      	bhi.n	80085aa <USB_ActivateEndpoint+0x2b6>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	085b      	lsrs	r3, r3, #1
 8008588:	663b      	str	r3, [r7, #96]	; 0x60
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <USB_ActivateEndpoint+0x2a8>
 8008596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008598:	3301      	adds	r3, #1
 800859a:	663b      	str	r3, [r7, #96]	; 0x60
 800859c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800859e:	b29b      	uxth	r3, r3
 80085a0:	029b      	lsls	r3, r3, #10
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	801a      	strh	r2, [r3, #0]
 80085a8:	e017      	b.n	80085da <USB_ActivateEndpoint+0x2e6>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	095b      	lsrs	r3, r3, #5
 80085b0:	663b      	str	r3, [r7, #96]	; 0x60
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 031f 	and.w	r3, r3, #31
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d102      	bne.n	80085c4 <USB_ActivateEndpoint+0x2d0>
 80085be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085c0:	3b01      	subs	r3, #1
 80085c2:	663b      	str	r3, [r7, #96]	; 0x60
 80085c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	029b      	lsls	r3, r3, #10
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	83fb      	strh	r3, [r7, #30]
 80085e8:	8bfb      	ldrh	r3, [r7, #30]
 80085ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d01b      	beq.n	800862a <USB_ActivateEndpoint+0x336>
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	b29b      	uxth	r3, r3
 8008600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008608:	83bb      	strh	r3, [r7, #28]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	441a      	add	r2, r3
 8008614:	8bbb      	ldrh	r3, [r7, #28]
 8008616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800861a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800861e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008626:	b29b      	uxth	r3, r3
 8008628:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	881b      	ldrh	r3, [r3, #0]
 8008636:	b29b      	uxth	r3, r3
 8008638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800863c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008640:	837b      	strh	r3, [r7, #26]
 8008642:	8b7b      	ldrh	r3, [r7, #26]
 8008644:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008648:	837b      	strh	r3, [r7, #26]
 800864a:	8b7b      	ldrh	r3, [r7, #26]
 800864c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008650:	837b      	strh	r3, [r7, #26]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	441a      	add	r2, r3
 800865c:	8b7b      	ldrh	r3, [r7, #26]
 800865e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800866a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800866e:	b29b      	uxth	r3, r3
 8008670:	8013      	strh	r3, [r2, #0]
 8008672:	e1a2      	b.n	80089ba <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	881b      	ldrh	r3, [r3, #0]
 8008680:	b29b      	uxth	r3, r3
 8008682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	441a      	add	r2, r3
 8008698:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800869c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80086a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086c0:	4413      	add	r3, r2
 80086c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	011a      	lsls	r2, r3, #4
 80086ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086cc:	4413      	add	r3, r2
 80086ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086d2:	657b      	str	r3, [r7, #84]	; 0x54
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	891b      	ldrh	r3, [r3, #8]
 80086d8:	085b      	lsrs	r3, r3, #1
 80086da:	b29b      	uxth	r3, r3
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086e2:	801a      	strh	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	653b      	str	r3, [r7, #80]	; 0x50
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f4:	4413      	add	r3, r2
 80086f6:	653b      	str	r3, [r7, #80]	; 0x50
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	011a      	lsls	r2, r3, #4
 80086fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008700:	4413      	add	r3, r2
 8008702:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	895b      	ldrh	r3, [r3, #10]
 800870c:	085b      	lsrs	r3, r3, #1
 800870e:	b29b      	uxth	r3, r3
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	b29a      	uxth	r2, r3
 8008714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008716:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f040 8091 	bne.w	8008844 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	881b      	ldrh	r3, [r3, #0]
 800872e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008730:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d01b      	beq.n	8008772 <USB_ActivateEndpoint+0x47e>
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	b29b      	uxth	r3, r3
 8008748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800874c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008750:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	441a      	add	r2, r3
 800875c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800875e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800876a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800876e:	b29b      	uxth	r3, r3
 8008770:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	873b      	strh	r3, [r7, #56]	; 0x38
 8008780:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008786:	2b00      	cmp	r3, #0
 8008788:	d01b      	beq.n	80087c2 <USB_ActivateEndpoint+0x4ce>
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	b29b      	uxth	r3, r3
 8008798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800879c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	441a      	add	r2, r3
 80087ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80087ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087be:	b29b      	uxth	r3, r3
 80087c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	441a      	add	r2, r3
 80087f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008806:	b29b      	uxth	r3, r3
 8008808:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29b      	uxth	r3, r3
 8008818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800881c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008820:	867b      	strh	r3, [r7, #50]	; 0x32
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	441a      	add	r2, r3
 800882c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800882e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800883a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883e:	b29b      	uxth	r3, r3
 8008840:	8013      	strh	r3, [r2, #0]
 8008842:	e0ba      	b.n	80089ba <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008854:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01d      	beq.n	800889c <USB_ActivateEndpoint+0x5a8>
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008876:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	441a      	add	r2, r3
 8008884:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800888c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008898:	b29b      	uxth	r3, r3
 800889a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80088ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80088b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01d      	beq.n	80088f4 <USB_ActivateEndpoint+0x600>
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	441a      	add	r2, r3
 80088dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80088e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	78db      	ldrb	r3, [r3, #3]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d024      	beq.n	8008946 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29b      	uxth	r3, r3
 800890a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008912:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008916:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800891a:	f083 0320 	eor.w	r3, r3, #32
 800891e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	441a      	add	r2, r3
 800892c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800893c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008940:	b29b      	uxth	r3, r3
 8008942:	8013      	strh	r3, [r2, #0]
 8008944:	e01d      	b.n	8008982 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800895c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	441a      	add	r2, r3
 800896a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800896e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800897a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800897e:	b29b      	uxth	r3, r3
 8008980:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008998:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	781b      	ldrb	r3, [r3, #0]
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	441a      	add	r2, r3
 80089a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80089a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80089ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80089be:	4618      	mov	r0, r3
 80089c0:	376c      	adds	r7, #108	; 0x6c
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bc80      	pop	{r7}
 80089c6:	4770      	bx	lr

080089c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b08d      	sub	sp, #52	; 0x34
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	7b1b      	ldrb	r3, [r3, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f040 808e 	bne.w	8008af8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	785b      	ldrb	r3, [r3, #1]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d044      	beq.n	8008a6e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	81bb      	strh	r3, [r7, #12]
 80089f2:	89bb      	ldrh	r3, [r7, #12]
 80089f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01b      	beq.n	8008a34 <USB_DeactivateEndpoint+0x6c>
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a12:	817b      	strh	r3, [r7, #10]
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	441a      	add	r2, r3
 8008a1e:	897b      	ldrh	r3, [r7, #10]
 8008a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a4a:	813b      	strh	r3, [r7, #8]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	441a      	add	r2, r3
 8008a56:	893b      	ldrh	r3, [r7, #8]
 8008a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	8013      	strh	r3, [r2, #0]
 8008a6c:	e192      	b.n	8008d94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	827b      	strh	r3, [r7, #18]
 8008a7c:	8a7b      	ldrh	r3, [r7, #18]
 8008a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d01b      	beq.n	8008abe <USB_DeactivateEndpoint+0xf6>
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9c:	823b      	strh	r3, [r7, #16]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	441a      	add	r2, r3
 8008aa8:	8a3b      	ldrh	r3, [r7, #16]
 8008aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad4:	81fb      	strh	r3, [r7, #14]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	441a      	add	r2, r3
 8008ae0:	89fb      	ldrh	r3, [r7, #14]
 8008ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	8013      	strh	r3, [r2, #0]
 8008af6:	e14d      	b.n	8008d94 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f040 80a5 	bne.w	8008c4c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	881b      	ldrh	r3, [r3, #0]
 8008b0e:	843b      	strh	r3, [r7, #32]
 8008b10:	8c3b      	ldrh	r3, [r7, #32]
 8008b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d01b      	beq.n	8008b52 <USB_DeactivateEndpoint+0x18a>
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b30:	83fb      	strh	r3, [r7, #30]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	441a      	add	r2, r3
 8008b3c:	8bfb      	ldrh	r3, [r7, #30]
 8008b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	83bb      	strh	r3, [r7, #28]
 8008b60:	8bbb      	ldrh	r3, [r7, #28]
 8008b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d01b      	beq.n	8008ba2 <USB_DeactivateEndpoint+0x1da>
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b80:	837b      	strh	r3, [r7, #26]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	441a      	add	r2, r3
 8008b8c:	8b7b      	ldrh	r3, [r7, #26]
 8008b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb8:	833b      	strh	r3, [r7, #24]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	441a      	add	r2, r3
 8008bc4:	8b3b      	ldrh	r3, [r7, #24]
 8008bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf0:	82fb      	strh	r3, [r7, #22]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	441a      	add	r2, r3
 8008bfc:	8afb      	ldrh	r3, [r7, #22]
 8008bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c28:	82bb      	strh	r3, [r7, #20]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	441a      	add	r2, r3
 8008c34:	8abb      	ldrh	r3, [r7, #20]
 8008c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	8013      	strh	r3, [r2, #0]
 8008c4a:	e0a3      	b.n	8008d94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01b      	beq.n	8008c9c <USB_DeactivateEndpoint+0x2d4>
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	441a      	add	r2, r3
 8008c86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008caa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d01b      	beq.n	8008cec <USB_DeactivateEndpoint+0x324>
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cca:	853b      	strh	r3, [r7, #40]	; 0x28
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	441a      	add	r2, r3
 8008cd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d02:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	441a      	add	r2, r3
 8008d0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	441a      	add	r2, r3
 8008d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	881b      	ldrh	r3, [r3, #0]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d72:	847b      	strh	r3, [r7, #34]	; 0x22
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	441a      	add	r2, r3
 8008d7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3734      	adds	r7, #52	; 0x34
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bc80      	pop	{r7}
 8008d9e:	4770      	bx	lr

08008da0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b0cc      	sub	sp, #304	; 0x130
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dae:	6018      	str	r0, [r3, #0]
 8008db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008db8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	f041 817d 	bne.w	800a0c6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	699a      	ldr	r2, [r3, #24]
 8008dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d908      	bls.n	8008dfa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008df8:	e007      	b.n	8008e0a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	7b1b      	ldrb	r3, [r3, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d152      	bne.n	8008ec0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6959      	ldr	r1, [r3, #20]
 8008e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	88da      	ldrh	r2, [r3, #6]
 8008e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008e3c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008e40:	6800      	ldr	r0, [r0, #0]
 8008e42:	f001 ff23 	bl	800ac8c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e4a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e52:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008e56:	6812      	ldr	r2, [r2, #0]
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e70:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e78:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008e7c:	6812      	ldr	r2, [r2, #0]
 8008e7e:	440a      	add	r2, r1
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	011a      	lsls	r2, r3, #4
 8008e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	801a      	strh	r2, [r3, #0]
 8008ebc:	f001 b8b5 	b.w	800a02a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	78db      	ldrb	r3, [r3, #3]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	f040 84c6 	bne.w	800985e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6a1a      	ldr	r2, [r3, #32]
 8008ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	f240 8443 	bls.w	8009776 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f16:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	441a      	add	r2, r3
 8008f34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f40:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6a1a      	ldr	r2, [r3, #32]
 8008f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5c:	1ad2      	subs	r2, r2, r3
 8008f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 823e 	beq.w	800940e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f96:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008f9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f9e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008fa2:	6812      	ldr	r2, [r2, #0]
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f040 809a 	bne.w	80090ec <USB_EPStartXfer+0x34c>
 8008fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fc4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008fc8:	6812      	ldr	r2, [r2, #0]
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	4619      	mov	r1, r3
 8008fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fea:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008fee:	6812      	ldr	r2, [r2, #0]
 8008ff0:	440a      	add	r2, r1
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	011a      	lsls	r2, r3, #4
 8009002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4413      	add	r3, r2
 800900e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009016:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d122      	bne.n	800906a <USB_EPStartXfer+0x2ca>
 8009024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009028:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	b29b      	uxth	r3, r3
 8009032:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009036:	b29a      	uxth	r2, r3
 8009038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800903c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009048:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b29b      	uxth	r3, r3
 8009052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800905a:	b29a      	uxth	r2, r3
 800905c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009060:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	801a      	strh	r2, [r3, #0]
 8009068:	e079      	b.n	800915e <USB_EPStartXfer+0x3be>
 800906a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906e:	2b3e      	cmp	r3, #62	; 0x3e
 8009070:	d81b      	bhi.n	80090aa <USB_EPStartXfer+0x30a>
 8009072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009076:	085b      	lsrs	r3, r3, #1
 8009078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800907c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009080:	f003 0301 	and.w	r3, r3, #1
 8009084:	2b00      	cmp	r3, #0
 8009086:	d004      	beq.n	8009092 <USB_EPStartXfer+0x2f2>
 8009088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800908c:	3301      	adds	r3, #1
 800908e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009096:	b29b      	uxth	r3, r3
 8009098:	029b      	lsls	r3, r3, #10
 800909a:	b29a      	uxth	r2, r3
 800909c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	801a      	strh	r2, [r3, #0]
 80090a8:	e059      	b.n	800915e <USB_EPStartXfer+0x3be>
 80090aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090ae:	095b      	lsrs	r3, r3, #5
 80090b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80090b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b8:	f003 031f 	and.w	r3, r3, #31
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d104      	bne.n	80090ca <USB_EPStartXfer+0x32a>
 80090c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090c4:	3b01      	subs	r3, #1
 80090c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80090ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	029b      	lsls	r3, r3, #10
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090dc:	b29a      	uxth	r2, r3
 80090de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	801a      	strh	r2, [r3, #0]
 80090ea:	e038      	b.n	800915e <USB_EPStartXfer+0x3be>
 80090ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d130      	bne.n	800915e <USB_EPStartXfer+0x3be>
 80090fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800910a:	b29b      	uxth	r3, r3
 800910c:	4619      	mov	r1, r3
 800910e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009112:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009116:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800911a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800911e:	6812      	ldr	r2, [r2, #0]
 8009120:	440a      	add	r2, r1
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	011a      	lsls	r2, r3, #4
 8009132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009136:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4413      	add	r3, r2
 800913e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009150:	b29a      	uxth	r2, r3
 8009152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800915e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	895b      	ldrh	r3, [r3, #10]
 800916a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800916e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6959      	ldr	r1, [r3, #20]
 800917a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800917e:	b29b      	uxth	r3, r3
 8009180:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009184:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009188:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800918c:	6800      	ldr	r0, [r0, #0]
 800918e:	f001 fd7d 	bl	800ac8c <USB_WritePMA>
            ep->xfer_buff += len;
 8009192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009196:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	695a      	ldr	r2, [r3, #20]
 800919e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a2:	441a      	add	r2, r3
 80091a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6a1a      	ldr	r2, [r3, #32]
 80091bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d90f      	bls.n	80091ec <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80091cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6a1a      	ldr	r2, [r3, #32]
 80091d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091dc:	1ad2      	subs	r2, r2, r3
 80091de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	621a      	str	r2, [r3, #32]
 80091ea:	e00e      	b.n	800920a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80091ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80091fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2200      	movs	r2, #0
 8009208:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800920a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800920e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	785b      	ldrb	r3, [r3, #1]
 8009216:	2b00      	cmp	r3, #0
 8009218:	f040 809a 	bne.w	8009350 <USB_EPStartXfer+0x5b0>
 800921c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009220:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009224:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009228:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800922c:	6812      	ldr	r2, [r2, #0]
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800923e:	b29b      	uxth	r3, r3
 8009240:	4619      	mov	r1, r3
 8009242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009246:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800924a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800924e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8009252:	6812      	ldr	r2, [r2, #0]
 8009254:	440a      	add	r2, r1
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800925c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	011a      	lsls	r2, r3, #4
 8009266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800926a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4413      	add	r3, r2
 8009272:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800927a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009284:	2b00      	cmp	r3, #0
 8009286:	d122      	bne.n	80092ce <USB_EPStartXfer+0x52e>
 8009288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	b29b      	uxth	r3, r3
 8009296:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800929a:	b29a      	uxth	r2, r3
 800929c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	801a      	strh	r2, [r3, #0]
 80092a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	881b      	ldrh	r3, [r3, #0]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092be:	b29a      	uxth	r2, r3
 80092c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	801a      	strh	r2, [r3, #0]
 80092cc:	e083      	b.n	80093d6 <USB_EPStartXfer+0x636>
 80092ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d2:	2b3e      	cmp	r3, #62	; 0x3e
 80092d4:	d81b      	bhi.n	800930e <USB_EPStartXfer+0x56e>
 80092d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092da:	085b      	lsrs	r3, r3, #1
 80092dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80092e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d004      	beq.n	80092f6 <USB_EPStartXfer+0x556>
 80092ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80092f0:	3301      	adds	r3, #1
 80092f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80092f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	029b      	lsls	r3, r3, #10
 80092fe:	b29a      	uxth	r2, r3
 8009300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009304:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	801a      	strh	r2, [r3, #0]
 800930c:	e063      	b.n	80093d6 <USB_EPStartXfer+0x636>
 800930e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009312:	095b      	lsrs	r3, r3, #5
 8009314:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800931c:	f003 031f 	and.w	r3, r3, #31
 8009320:	2b00      	cmp	r3, #0
 8009322:	d104      	bne.n	800932e <USB_EPStartXfer+0x58e>
 8009324:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009328:	3b01      	subs	r3, #1
 800932a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800932e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009332:	b29b      	uxth	r3, r3
 8009334:	029b      	lsls	r3, r3, #10
 8009336:	b29b      	uxth	r3, r3
 8009338:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800933c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009340:	b29a      	uxth	r2, r3
 8009342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009346:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	801a      	strh	r2, [r3, #0]
 800934e:	e042      	b.n	80093d6 <USB_EPStartXfer+0x636>
 8009350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	785b      	ldrb	r3, [r3, #1]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d13a      	bne.n	80093d6 <USB_EPStartXfer+0x636>
 8009360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009364:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009368:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800936c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009370:	6812      	ldr	r2, [r2, #0]
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009378:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009382:	b29b      	uxth	r3, r3
 8009384:	4619      	mov	r1, r3
 8009386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800938a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800938e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009392:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8009396:	6812      	ldr	r2, [r2, #0]
 8009398:	440a      	add	r2, r1
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	011a      	lsls	r2, r3, #4
 80093aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4413      	add	r3, r2
 80093b6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80093ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80093d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	891b      	ldrh	r3, [r3, #8]
 80093e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6959      	ldr	r1, [r3, #20]
 80093f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009400:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009404:	6800      	ldr	r0, [r0, #0]
 8009406:	f001 fc41 	bl	800ac8c <USB_WritePMA>
 800940a:	f000 be0e 	b.w	800a02a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800940e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d16d      	bne.n	80094fa <USB_EPStartXfer+0x75a>
 800941e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	64bb      	str	r3, [r7, #72]	; 0x48
 800942a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800942e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009438:	b29b      	uxth	r3, r3
 800943a:	461a      	mov	r2, r3
 800943c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943e:	4413      	add	r3, r2
 8009440:	64bb      	str	r3, [r7, #72]	; 0x48
 8009442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	011a      	lsls	r2, r3, #4
 8009450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009452:	4413      	add	r3, r2
 8009454:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009458:	647b      	str	r3, [r7, #68]	; 0x44
 800945a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d112      	bne.n	8009488 <USB_EPStartXfer+0x6e8>
 8009462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	b29b      	uxth	r3, r3
 8009468:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800946c:	b29a      	uxth	r2, r3
 800946e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009470:	801a      	strh	r2, [r3, #0]
 8009472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	b29b      	uxth	r3, r3
 8009478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800947c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009480:	b29a      	uxth	r2, r3
 8009482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009484:	801a      	strh	r2, [r3, #0]
 8009486:	e063      	b.n	8009550 <USB_EPStartXfer+0x7b0>
 8009488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800948c:	2b3e      	cmp	r3, #62	; 0x3e
 800948e:	d817      	bhi.n	80094c0 <USB_EPStartXfer+0x720>
 8009490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009494:	085b      	lsrs	r3, r3, #1
 8009496:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800949a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <USB_EPStartXfer+0x710>
 80094a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094aa:	3301      	adds	r3, #1
 80094ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	029b      	lsls	r3, r3, #10
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	e047      	b.n	8009550 <USB_EPStartXfer+0x7b0>
 80094c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094c4:	095b      	lsrs	r3, r3, #5
 80094c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ce:	f003 031f 	and.w	r3, r3, #31
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <USB_EPStartXfer+0x740>
 80094d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094da:	3b01      	subs	r3, #1
 80094dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	029b      	lsls	r3, r3, #10
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094f6:	801a      	strh	r2, [r3, #0]
 80094f8:	e02a      	b.n	8009550 <USB_EPStartXfer+0x7b0>
 80094fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	785b      	ldrb	r3, [r3, #1]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d122      	bne.n	8009550 <USB_EPStartXfer+0x7b0>
 800950a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	653b      	str	r3, [r7, #80]	; 0x50
 8009516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800951a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009524:	b29b      	uxth	r3, r3
 8009526:	461a      	mov	r2, r3
 8009528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800952a:	4413      	add	r3, r2
 800952c:	653b      	str	r3, [r7, #80]	; 0x50
 800952e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	011a      	lsls	r2, r3, #4
 800953c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800953e:	4413      	add	r3, r2
 8009540:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800954a:	b29a      	uxth	r2, r3
 800954c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800954e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	891b      	ldrh	r3, [r3, #8]
 800955c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6959      	ldr	r1, [r3, #20]
 800956c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009570:	b29b      	uxth	r3, r3
 8009572:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009576:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800957a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800957e:	6800      	ldr	r0, [r0, #0]
 8009580:	f001 fb84 	bl	800ac8c <USB_WritePMA>
            ep->xfer_buff += len;
 8009584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	695a      	ldr	r2, [r3, #20]
 8009590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009594:	441a      	add	r2, r3
 8009596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800959a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80095a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6a1a      	ldr	r2, [r3, #32]
 80095ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d90f      	bls.n	80095de <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80095be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6a1a      	ldr	r2, [r3, #32]
 80095ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ce:	1ad2      	subs	r2, r2, r3
 80095d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	621a      	str	r2, [r3, #32]
 80095dc:	e00e      	b.n	80095fc <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80095de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80095ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2200      	movs	r2, #0
 80095fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009600:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	643b      	str	r3, [r7, #64]	; 0x40
 8009608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800960c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d16d      	bne.n	80096f4 <USB_EPStartXfer+0x954>
 8009618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	63bb      	str	r3, [r7, #56]	; 0x38
 8009624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009632:	b29b      	uxth	r3, r3
 8009634:	461a      	mov	r2, r3
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	4413      	add	r3, r2
 800963a:	63bb      	str	r3, [r7, #56]	; 0x38
 800963c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	011a      	lsls	r2, r3, #4
 800964a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964c:	4413      	add	r3, r2
 800964e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009652:	637b      	str	r3, [r7, #52]	; 0x34
 8009654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d112      	bne.n	8009682 <USB_EPStartXfer+0x8e2>
 800965c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009666:	b29a      	uxth	r2, r3
 8009668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966a:	801a      	strh	r2, [r3, #0]
 800966c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966e:	881b      	ldrh	r3, [r3, #0]
 8009670:	b29b      	uxth	r3, r3
 8009672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800967a:	b29a      	uxth	r2, r3
 800967c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967e:	801a      	strh	r2, [r3, #0]
 8009680:	e05d      	b.n	800973e <USB_EPStartXfer+0x99e>
 8009682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009686:	2b3e      	cmp	r3, #62	; 0x3e
 8009688:	d817      	bhi.n	80096ba <USB_EPStartXfer+0x91a>
 800968a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968e:	085b      	lsrs	r3, r3, #1
 8009690:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	2b00      	cmp	r3, #0
 800969e:	d004      	beq.n	80096aa <USB_EPStartXfer+0x90a>
 80096a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096a4:	3301      	adds	r3, #1
 80096a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80096aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	029b      	lsls	r3, r3, #10
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b6:	801a      	strh	r2, [r3, #0]
 80096b8:	e041      	b.n	800973e <USB_EPStartXfer+0x99e>
 80096ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096be:	095b      	lsrs	r3, r3, #5
 80096c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80096c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c8:	f003 031f 	and.w	r3, r3, #31
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d104      	bne.n	80096da <USB_EPStartXfer+0x93a>
 80096d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096d4:	3b01      	subs	r3, #1
 80096d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80096da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096de:	b29b      	uxth	r3, r3
 80096e0:	029b      	lsls	r3, r3, #10
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f0:	801a      	strh	r2, [r3, #0]
 80096f2:	e024      	b.n	800973e <USB_EPStartXfer+0x99e>
 80096f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	785b      	ldrb	r3, [r3, #1]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d11c      	bne.n	800973e <USB_EPStartXfer+0x99e>
 8009704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009712:	b29b      	uxth	r3, r3
 8009714:	461a      	mov	r2, r3
 8009716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009718:	4413      	add	r3, r2
 800971a:	643b      	str	r3, [r7, #64]	; 0x40
 800971c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	011a      	lsls	r2, r3, #4
 800972a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800972c:	4413      	add	r3, r2
 800972e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009738:	b29a      	uxth	r2, r3
 800973a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800973c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800973e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009742:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	895b      	ldrh	r3, [r3, #10]
 800974a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800974e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6959      	ldr	r1, [r3, #20]
 800975a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800975e:	b29b      	uxth	r3, r3
 8009760:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009764:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009768:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800976c:	6800      	ldr	r0, [r0, #0]
 800976e:	f001 fa8d 	bl	800ac8c <USB_WritePMA>
 8009772:	f000 bc5a 	b.w	800a02a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800977a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800978a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80097a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80097b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	441a      	add	r2, r3
 80097ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80097ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097de:	b29b      	uxth	r3, r3
 80097e0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80097e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	461a      	mov	r2, r3
 8009800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009802:	4413      	add	r3, r2
 8009804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800980a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	011a      	lsls	r2, r3, #4
 8009814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009816:	4413      	add	r3, r2
 8009818:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800981c:	65bb      	str	r3, [r7, #88]	; 0x58
 800981e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009822:	b29a      	uxth	r2, r3
 8009824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009826:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800982c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	891b      	ldrh	r3, [r3, #8]
 8009834:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800983c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6959      	ldr	r1, [r3, #20]
 8009844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009848:	b29b      	uxth	r3, r3
 800984a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800984e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009852:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009856:	6800      	ldr	r0, [r0, #0]
 8009858:	f001 fa18 	bl	800ac8c <USB_WritePMA>
 800985c:	e3e5      	b.n	800a02a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800985e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800986c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4413      	add	r3, r2
 8009878:	881b      	ldrh	r3, [r3, #0]
 800987a:	b29b      	uxth	r3, r3
 800987c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009884:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800988c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	441a      	add	r2, r3
 80098a2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80098a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80098b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80098ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6a1a      	ldr	r2, [r3, #32]
 80098c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098ca:	1ad2      	subs	r2, r2, r3
 80098cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80098d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 81bc 	beq.w	8009c78 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009904:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800990e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	785b      	ldrb	r3, [r3, #1]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d16d      	bne.n	80099fa <USB_EPStartXfer+0xc5a>
 800991e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	67bb      	str	r3, [r7, #120]	; 0x78
 800992a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800992e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009938:	b29b      	uxth	r3, r3
 800993a:	461a      	mov	r2, r3
 800993c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800993e:	4413      	add	r3, r2
 8009940:	67bb      	str	r3, [r7, #120]	; 0x78
 8009942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	011a      	lsls	r2, r3, #4
 8009950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009952:	4413      	add	r3, r2
 8009954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009958:	677b      	str	r3, [r7, #116]	; 0x74
 800995a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800995e:	2b00      	cmp	r3, #0
 8009960:	d112      	bne.n	8009988 <USB_EPStartXfer+0xbe8>
 8009962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	b29b      	uxth	r3, r3
 8009968:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800996c:	b29a      	uxth	r2, r3
 800996e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009970:	801a      	strh	r2, [r3, #0]
 8009972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800997c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009980:	b29a      	uxth	r2, r3
 8009982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009984:	801a      	strh	r2, [r3, #0]
 8009986:	e060      	b.n	8009a4a <USB_EPStartXfer+0xcaa>
 8009988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800998c:	2b3e      	cmp	r3, #62	; 0x3e
 800998e:	d817      	bhi.n	80099c0 <USB_EPStartXfer+0xc20>
 8009990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009994:	085b      	lsrs	r3, r3, #1
 8009996:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800999a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d004      	beq.n	80099b0 <USB_EPStartXfer+0xc10>
 80099a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099aa:	3301      	adds	r3, #1
 80099ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	029b      	lsls	r3, r3, #10
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099bc:	801a      	strh	r2, [r3, #0]
 80099be:	e044      	b.n	8009a4a <USB_EPStartXfer+0xcaa>
 80099c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099c4:	095b      	lsrs	r3, r3, #5
 80099c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ce:	f003 031f 	and.w	r3, r3, #31
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d104      	bne.n	80099e0 <USB_EPStartXfer+0xc40>
 80099d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099da:	3b01      	subs	r3, #1
 80099dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	029b      	lsls	r3, r3, #10
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099f6:	801a      	strh	r2, [r3, #0]
 80099f8:	e027      	b.n	8009a4a <USB_EPStartXfer+0xcaa>
 80099fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d11f      	bne.n	8009a4a <USB_EPStartXfer+0xcaa>
 8009a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a20:	4413      	add	r3, r2
 8009a22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	011a      	lsls	r2, r3, #4
 8009a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a38:	4413      	add	r3, r2
 8009a3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	895b      	ldrh	r3, [r3, #10]
 8009a56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6959      	ldr	r1, [r3, #20]
 8009a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a70:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009a74:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009a78:	6800      	ldr	r0, [r0, #0]
 8009a7a:	f001 f907 	bl	800ac8c <USB_WritePMA>
          ep->xfer_buff += len;
 8009a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	695a      	ldr	r2, [r3, #20]
 8009a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a8e:	441a      	add	r2, r3
 8009a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6a1a      	ldr	r2, [r3, #32]
 8009aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d90f      	bls.n	8009ad8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6a1a      	ldr	r2, [r3, #32]
 8009ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ac8:	1ad2      	subs	r2, r2, r3
 8009aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	621a      	str	r2, [r3, #32]
 8009ad6:	e00e      	b.n	8009af6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2200      	movs	r2, #0
 8009af4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	f000 8295 	beq.w	800a02a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	785b      	ldrb	r3, [r3, #1]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d16d      	bne.n	8009bec <USB_EPStartXfer+0xe4c>
 8009b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b30:	4413      	add	r3, r2
 8009b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	011a      	lsls	r2, r3, #4
 8009b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b44:	4413      	add	r3, r2
 8009b46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b4a:	667b      	str	r3, [r7, #100]	; 0x64
 8009b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d112      	bne.n	8009b7a <USB_EPStartXfer+0xdda>
 8009b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b76:	801a      	strh	r2, [r3, #0]
 8009b78:	e063      	b.n	8009c42 <USB_EPStartXfer+0xea2>
 8009b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8009b80:	d817      	bhi.n	8009bb2 <USB_EPStartXfer+0xe12>
 8009b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b86:	085b      	lsrs	r3, r3, #1
 8009b88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d004      	beq.n	8009ba2 <USB_EPStartXfer+0xe02>
 8009b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	029b      	lsls	r3, r3, #10
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bae:	801a      	strh	r2, [r3, #0]
 8009bb0:	e047      	b.n	8009c42 <USB_EPStartXfer+0xea2>
 8009bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bb6:	095b      	lsrs	r3, r3, #5
 8009bb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bc0:	f003 031f 	and.w	r3, r3, #31
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d104      	bne.n	8009bd2 <USB_EPStartXfer+0xe32>
 8009bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	029b      	lsls	r3, r3, #10
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009be8:	801a      	strh	r2, [r3, #0]
 8009bea:	e02a      	b.n	8009c42 <USB_EPStartXfer+0xea2>
 8009bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	785b      	ldrb	r3, [r3, #1]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d122      	bne.n	8009c42 <USB_EPStartXfer+0xea2>
 8009bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	673b      	str	r3, [r7, #112]	; 0x70
 8009c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c1c:	4413      	add	r3, r2
 8009c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8009c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	011a      	lsls	r2, r3, #4
 8009c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c30:	4413      	add	r3, r2
 8009c32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	891b      	ldrh	r3, [r3, #8]
 8009c4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6959      	ldr	r1, [r3, #20]
 8009c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009c68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009c6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009c70:	6800      	ldr	r0, [r0, #0]
 8009c72:	f001 f80b 	bl	800ac8c <USB_WritePMA>
 8009c76:	e1d8      	b.n	800a02a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d178      	bne.n	8009d7a <USB_EPStartXfer+0xfda>
 8009c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cac:	4413      	add	r3, r2
 8009cae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	011a      	lsls	r2, r3, #4
 8009cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009cca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d116      	bne.n	8009d04 <USB_EPStartXfer+0xf64>
 8009cd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ce8:	801a      	strh	r2, [r3, #0]
 8009cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d00:	801a      	strh	r2, [r3, #0]
 8009d02:	e06b      	b.n	8009ddc <USB_EPStartXfer+0x103c>
 8009d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d08:	2b3e      	cmp	r3, #62	; 0x3e
 8009d0a:	d818      	bhi.n	8009d3e <USB_EPStartXfer+0xf9e>
 8009d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d10:	085b      	lsrs	r3, r3, #1
 8009d12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d004      	beq.n	8009d2c <USB_EPStartXfer+0xf8c>
 8009d22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d26:	3301      	adds	r3, #1
 8009d28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	029b      	lsls	r3, r3, #10
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d3a:	801a      	strh	r2, [r3, #0]
 8009d3c:	e04e      	b.n	8009ddc <USB_EPStartXfer+0x103c>
 8009d3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d42:	095b      	lsrs	r3, r3, #5
 8009d44:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d4c:	f003 031f 	and.w	r3, r3, #31
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d104      	bne.n	8009d5e <USB_EPStartXfer+0xfbe>
 8009d54:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	029b      	lsls	r3, r3, #10
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d76:	801a      	strh	r2, [r3, #0]
 8009d78:	e030      	b.n	8009ddc <USB_EPStartXfer+0x103c>
 8009d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	785b      	ldrb	r3, [r3, #1]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d128      	bne.n	8009ddc <USB_EPStartXfer+0x103c>
 8009d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	461a      	mov	r2, r3
 8009daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dae:	4413      	add	r3, r2
 8009db0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	011a      	lsls	r2, r3, #4
 8009dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009dda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	891b      	ldrh	r3, [r3, #8]
 8009de8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6959      	ldr	r1, [r3, #20]
 8009df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009e02:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009e06:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009e0a:	6800      	ldr	r0, [r0, #0]
 8009e0c:	f000 ff3e 	bl	800ac8c <USB_WritePMA>
          ep->xfer_buff += len;
 8009e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	695a      	ldr	r2, [r3, #20]
 8009e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e20:	441a      	add	r2, r3
 8009e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6a1a      	ldr	r2, [r3, #32]
 8009e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d90f      	bls.n	8009e6a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6a1a      	ldr	r2, [r3, #32]
 8009e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e5a:	1ad2      	subs	r2, r2, r3
 8009e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	621a      	str	r2, [r3, #32]
 8009e68:	e00e      	b.n	8009e88 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2200      	movs	r2, #0
 8009e86:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 80cc 	beq.w	800a02a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	785b      	ldrb	r3, [r3, #1]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d178      	bne.n	8009fa2 <USB_EPStartXfer+0x1202>
 8009eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ec2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	011a      	lsls	r2, r3, #4
 8009ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009eec:	4413      	add	r3, r2
 8009eee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ef2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d116      	bne.n	8009f2c <USB_EPStartXfer+0x118c>
 8009efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f10:	801a      	strh	r2, [r3, #0]
 8009f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f16:	881b      	ldrh	r3, [r3, #0]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f28:	801a      	strh	r2, [r3, #0]
 8009f2a:	e064      	b.n	8009ff6 <USB_EPStartXfer+0x1256>
 8009f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f30:	2b3e      	cmp	r3, #62	; 0x3e
 8009f32:	d818      	bhi.n	8009f66 <USB_EPStartXfer+0x11c6>
 8009f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f38:	085b      	lsrs	r3, r3, #1
 8009f3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d004      	beq.n	8009f54 <USB_EPStartXfer+0x11b4>
 8009f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f4e:	3301      	adds	r3, #1
 8009f50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	029b      	lsls	r3, r3, #10
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f62:	801a      	strh	r2, [r3, #0]
 8009f64:	e047      	b.n	8009ff6 <USB_EPStartXfer+0x1256>
 8009f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f6a:	095b      	lsrs	r3, r3, #5
 8009f6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f74:	f003 031f 	and.w	r3, r3, #31
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <USB_EPStartXfer+0x11e6>
 8009f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f80:	3b01      	subs	r3, #1
 8009f82:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	029b      	lsls	r3, r3, #10
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f9e:	801a      	strh	r2, [r3, #0]
 8009fa0:	e029      	b.n	8009ff6 <USB_EPStartXfer+0x1256>
 8009fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	785b      	ldrb	r3, [r3, #1]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d121      	bne.n	8009ff6 <USB_EPStartXfer+0x1256>
 8009fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fc8:	4413      	add	r3, r2
 8009fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	011a      	lsls	r2, r3, #4
 8009fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ff4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	895b      	ldrh	r3, [r3, #10]
 800a002:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a00a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6959      	ldr	r1, [r3, #20]
 800a012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a016:	b29b      	uxth	r3, r3
 800a018:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a01c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a020:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a024:	6800      	ldr	r0, [r0, #0]
 800a026:	f000 fe31 	bl	800ac8c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a02a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a02e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	881b      	ldrh	r3, [r3, #0]
 800a046:	b29b      	uxth	r3, r3
 800a048:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a04c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a058:	8013      	strh	r3, [r2, #0]
 800a05a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a05e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a062:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a066:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a06a:	8812      	ldrh	r2, [r2, #0]
 800a06c:	f082 0210 	eor.w	r2, r2, #16
 800a070:	801a      	strh	r2, [r3, #0]
 800a072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a076:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a07a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a07e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a082:	8812      	ldrh	r2, [r2, #0]
 800a084:	f082 0220 	eor.w	r2, r2, #32
 800a088:	801a      	strh	r2, [r3, #0]
 800a08a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a08e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	441a      	add	r2, r3
 800a0a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	8013      	strh	r3, [r2, #0]
 800a0c2:	f000 bc9f 	b.w	800aa04 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a0c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	7b1b      	ldrb	r3, [r3, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f040 80ae 	bne.w	800a234 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a0d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	699a      	ldr	r2, [r3, #24]
 800a0e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d917      	bls.n	800a124 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800a0f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	699a      	ldr	r2, [r3, #24]
 800a110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a114:	1ad2      	subs	r2, r2, r3
 800a116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a11a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	619a      	str	r2, [r3, #24]
 800a122:	e00e      	b.n	800a142 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800a124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	699b      	ldr	r3, [r3, #24]
 800a130:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2200      	movs	r2, #0
 800a140:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a15e:	b29b      	uxth	r3, r3
 800a160:	461a      	mov	r2, r3
 800a162:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a166:	4413      	add	r3, r2
 800a168:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a16c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	011a      	lsls	r2, r3, #4
 800a17a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a17e:	4413      	add	r3, r2
 800a180:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d116      	bne.n	800a1be <USB_EPStartXfer+0x141e>
 800a190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	b29b      	uxth	r3, r3
 800a198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1a2:	801a      	strh	r2, [r3, #0]
 800a1a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1a8:	881b      	ldrh	r3, [r3, #0]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1ba:	801a      	strh	r2, [r3, #0]
 800a1bc:	e3e8      	b.n	800a990 <USB_EPStartXfer+0x1bf0>
 800a1be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1c2:	2b3e      	cmp	r3, #62	; 0x3e
 800a1c4:	d818      	bhi.n	800a1f8 <USB_EPStartXfer+0x1458>
 800a1c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a1d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d004      	beq.n	800a1e6 <USB_EPStartXfer+0x1446>
 800a1dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a1e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	029b      	lsls	r3, r3, #10
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1f4:	801a      	strh	r2, [r3, #0]
 800a1f6:	e3cb      	b.n	800a990 <USB_EPStartXfer+0x1bf0>
 800a1f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1fc:	095b      	lsrs	r3, r3, #5
 800a1fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a206:	f003 031f 	and.w	r3, r3, #31
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d104      	bne.n	800a218 <USB_EPStartXfer+0x1478>
 800a20e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a212:	3b01      	subs	r3, #1
 800a214:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a218:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	029b      	lsls	r3, r3, #10
 800a220:	b29b      	uxth	r3, r3
 800a222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a230:	801a      	strh	r2, [r3, #0]
 800a232:	e3ad      	b.n	800a990 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	78db      	ldrb	r3, [r3, #3]
 800a240:	2b02      	cmp	r3, #2
 800a242:	f040 8200 	bne.w	800a646 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a24a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	785b      	ldrb	r3, [r3, #1]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f040 8091 	bne.w	800a37a <USB_EPStartXfer+0x15da>
 800a258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a25c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a26a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a274:	b29b      	uxth	r3, r3
 800a276:	461a      	mov	r2, r3
 800a278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a27c:	4413      	add	r3, r2
 800a27e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	011a      	lsls	r2, r3, #4
 800a290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a294:	4413      	add	r3, r2
 800a296:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a29a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a29e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d116      	bne.n	800a2dc <USB_EPStartXfer+0x153c>
 800a2ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2c0:	801a      	strh	r2, [r3, #0]
 800a2c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2d8:	801a      	strh	r2, [r3, #0]
 800a2da:	e083      	b.n	800a3e4 <USB_EPStartXfer+0x1644>
 800a2dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a2ea:	d820      	bhi.n	800a32e <USB_EPStartXfer+0x158e>
 800a2ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	085b      	lsrs	r3, r3, #1
 800a2fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a2fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d004      	beq.n	800a31c <USB_EPStartXfer+0x157c>
 800a312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a316:	3301      	adds	r3, #1
 800a318:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a320:	b29b      	uxth	r3, r3
 800a322:	029b      	lsls	r3, r3, #10
 800a324:	b29a      	uxth	r2, r3
 800a326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a32a:	801a      	strh	r2, [r3, #0]
 800a32c:	e05a      	b.n	800a3e4 <USB_EPStartXfer+0x1644>
 800a32e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	095b      	lsrs	r3, r3, #5
 800a33c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	f003 031f 	and.w	r3, r3, #31
 800a350:	2b00      	cmp	r3, #0
 800a352:	d104      	bne.n	800a35e <USB_EPStartXfer+0x15be>
 800a354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a358:	3b01      	subs	r3, #1
 800a35a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a362:	b29b      	uxth	r3, r3
 800a364:	029b      	lsls	r3, r3, #10
 800a366:	b29b      	uxth	r3, r3
 800a368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a36c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a370:	b29a      	uxth	r2, r3
 800a372:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a376:	801a      	strh	r2, [r3, #0]
 800a378:	e034      	b.n	800a3e4 <USB_EPStartXfer+0x1644>
 800a37a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	785b      	ldrb	r3, [r3, #1]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d12c      	bne.n	800a3e4 <USB_EPStartXfer+0x1644>
 800a38a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a38e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a3b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	011a      	lsls	r2, r3, #4
 800a3c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a3e2:	801a      	strh	r2, [r3, #0]
 800a3e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	785b      	ldrb	r3, [r3, #1]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f040 8091 	bne.w	800a526 <USB_EPStartXfer+0x1786>
 800a404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a420:	b29b      	uxth	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a428:	4413      	add	r3, r2
 800a42a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a42e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	011a      	lsls	r2, r3, #4
 800a43c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a440:	4413      	add	r3, r2
 800a442:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a446:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a44a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a44e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d116      	bne.n	800a488 <USB_EPStartXfer+0x16e8>
 800a45a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a466:	b29a      	uxth	r2, r3
 800a468:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a46c:	801a      	strh	r2, [r3, #0]
 800a46e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	b29b      	uxth	r3, r3
 800a476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a47a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a47e:	b29a      	uxth	r2, r3
 800a480:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a484:	801a      	strh	r2, [r3, #0]
 800a486:	e07c      	b.n	800a582 <USB_EPStartXfer+0x17e2>
 800a488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a48c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	2b3e      	cmp	r3, #62	; 0x3e
 800a496:	d820      	bhi.n	800a4da <USB_EPStartXfer+0x173a>
 800a498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a49c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	085b      	lsrs	r3, r3, #1
 800a4a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d004      	beq.n	800a4c8 <USB_EPStartXfer+0x1728>
 800a4be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	029b      	lsls	r3, r3, #10
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4d6:	801a      	strh	r2, [r3, #0]
 800a4d8:	e053      	b.n	800a582 <USB_EPStartXfer+0x17e2>
 800a4da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	095b      	lsrs	r3, r3, #5
 800a4e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	f003 031f 	and.w	r3, r3, #31
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d104      	bne.n	800a50a <USB_EPStartXfer+0x176a>
 800a500:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a504:	3b01      	subs	r3, #1
 800a506:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a50a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a50e:	b29b      	uxth	r3, r3
 800a510:	029b      	lsls	r3, r3, #10
 800a512:	b29b      	uxth	r3, r3
 800a514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a522:	801a      	strh	r2, [r3, #0]
 800a524:	e02d      	b.n	800a582 <USB_EPStartXfer+0x17e2>
 800a526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a52a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	785b      	ldrb	r3, [r3, #1]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d125      	bne.n	800a582 <USB_EPStartXfer+0x17e2>
 800a536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a53a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a544:	b29b      	uxth	r3, r3
 800a546:	461a      	mov	r2, r3
 800a548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a54c:	4413      	add	r3, r2
 800a54e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	011a      	lsls	r2, r3, #4
 800a560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a564:	4413      	add	r3, r2
 800a566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a56a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a56e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a580:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	f000 81fe 	beq.w	800a990 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	881b      	ldrh	r3, [r3, #0]
 800a5b0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d005      	beq.n	800a5cc <USB_EPStartXfer+0x182c>
 800a5c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10d      	bne.n	800a5e8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f040 81db 	bne.w	800a990 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5da:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f040 81d4 	bne.w	800a990 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a5e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	b29b      	uxth	r3, r3
 800a606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	441a      	add	r2, r3
 800a62c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a63c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a640:	b29b      	uxth	r3, r3
 800a642:	8013      	strh	r3, [r2, #0]
 800a644:	e1a4      	b.n	800a990 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a64a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	78db      	ldrb	r3, [r3, #3]
 800a652:	2b01      	cmp	r3, #1
 800a654:	f040 819a 	bne.w	800a98c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a65c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	699a      	ldr	r2, [r3, #24]
 800a664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	429a      	cmp	r2, r3
 800a672:	d917      	bls.n	800a6a4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	699a      	ldr	r2, [r3, #24]
 800a690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a694:	1ad2      	subs	r2, r2, r3
 800a696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a69a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	619a      	str	r2, [r3, #24]
 800a6a2:	e00e      	b.n	800a6c2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a6a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a6b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a6c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	785b      	ldrb	r3, [r3, #1]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d178      	bne.n	800a7c4 <USB_EPStartXfer+0x1a24>
 800a6d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a6e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a6fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	011a      	lsls	r2, r3, #4
 800a70a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a70e:	4413      	add	r3, r2
 800a710:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a714:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d116      	bne.n	800a74e <USB_EPStartXfer+0x19ae>
 800a720:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	b29b      	uxth	r3, r3
 800a728:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a732:	801a      	strh	r2, [r3, #0]
 800a734:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a744:	b29a      	uxth	r2, r3
 800a746:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a74a:	801a      	strh	r2, [r3, #0]
 800a74c:	e06b      	b.n	800a826 <USB_EPStartXfer+0x1a86>
 800a74e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a752:	2b3e      	cmp	r3, #62	; 0x3e
 800a754:	d818      	bhi.n	800a788 <USB_EPStartXfer+0x19e8>
 800a756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a75a:	085b      	lsrs	r3, r3, #1
 800a75c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d004      	beq.n	800a776 <USB_EPStartXfer+0x19d6>
 800a76c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a770:	3301      	adds	r3, #1
 800a772:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	029b      	lsls	r3, r3, #10
 800a77e:	b29a      	uxth	r2, r3
 800a780:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a784:	801a      	strh	r2, [r3, #0]
 800a786:	e04e      	b.n	800a826 <USB_EPStartXfer+0x1a86>
 800a788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a78c:	095b      	lsrs	r3, r3, #5
 800a78e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a796:	f003 031f 	and.w	r3, r3, #31
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d104      	bne.n	800a7a8 <USB_EPStartXfer+0x1a08>
 800a79e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a7a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	029b      	lsls	r3, r3, #10
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7c0:	801a      	strh	r2, [r3, #0]
 800a7c2:	e030      	b.n	800a826 <USB_EPStartXfer+0x1a86>
 800a7c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	785b      	ldrb	r3, [r3, #1]
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d128      	bne.n	800a826 <USB_EPStartXfer+0x1a86>
 800a7d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	011a      	lsls	r2, r3, #4
 800a80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a810:	4413      	add	r3, r2
 800a812:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a816:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a81a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a81e:	b29a      	uxth	r2, r3
 800a820:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a824:	801a      	strh	r2, [r3, #0]
 800a826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a82a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	785b      	ldrb	r3, [r3, #1]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d178      	bne.n	800a936 <USB_EPStartXfer+0x1b96>
 800a844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a848:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a856:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a860:	b29b      	uxth	r3, r3
 800a862:	461a      	mov	r2, r3
 800a864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a868:	4413      	add	r3, r2
 800a86a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a86e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	011a      	lsls	r2, r3, #4
 800a87c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a880:	4413      	add	r3, r2
 800a882:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a88a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d116      	bne.n	800a8c0 <USB_EPStartXfer+0x1b20>
 800a892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	b29b      	uxth	r3, r3
 800a89a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a89e:	b29a      	uxth	r2, r3
 800a8a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8a4:	801a      	strh	r2, [r3, #0]
 800a8a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8bc:	801a      	strh	r2, [r3, #0]
 800a8be:	e067      	b.n	800a990 <USB_EPStartXfer+0x1bf0>
 800a8c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8c4:	2b3e      	cmp	r3, #62	; 0x3e
 800a8c6:	d818      	bhi.n	800a8fa <USB_EPStartXfer+0x1b5a>
 800a8c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8cc:	085b      	lsrs	r3, r3, #1
 800a8ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d004      	beq.n	800a8e8 <USB_EPStartXfer+0x1b48>
 800a8de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	029b      	lsls	r3, r3, #10
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8f6:	801a      	strh	r2, [r3, #0]
 800a8f8:	e04a      	b.n	800a990 <USB_EPStartXfer+0x1bf0>
 800a8fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8fe:	095b      	lsrs	r3, r3, #5
 800a900:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a908:	f003 031f 	and.w	r3, r3, #31
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d104      	bne.n	800a91a <USB_EPStartXfer+0x1b7a>
 800a910:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a914:	3b01      	subs	r3, #1
 800a916:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a91a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a91e:	b29b      	uxth	r3, r3
 800a920:	029b      	lsls	r3, r3, #10
 800a922:	b29b      	uxth	r3, r3
 800a924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a932:	801a      	strh	r2, [r3, #0]
 800a934:	e02c      	b.n	800a990 <USB_EPStartXfer+0x1bf0>
 800a936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a93a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	785b      	ldrb	r3, [r3, #1]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d124      	bne.n	800a990 <USB_EPStartXfer+0x1bf0>
 800a946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a94a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a954:	b29b      	uxth	r3, r3
 800a956:	461a      	mov	r2, r3
 800a958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a95c:	4413      	add	r3, r2
 800a95e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	011a      	lsls	r2, r3, #4
 800a970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a974:	4413      	add	r3, r2
 800a976:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a97a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a97e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a982:	b29a      	uxth	r2, r3
 800a984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a988:	801a      	strh	r2, [r3, #0]
 800a98a:	e001      	b.n	800a990 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	e03a      	b.n	800aa06 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a99e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a9ba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a9be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a9c6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a9ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a9ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a9d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	441a      	add	r2, r3
 800a9ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a9f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	785b      	ldrb	r3, [r3, #1]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d020      	beq.n	800aa64 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4413      	add	r3, r2
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa38:	81bb      	strh	r3, [r7, #12]
 800aa3a:	89bb      	ldrh	r3, [r7, #12]
 800aa3c:	f083 0310 	eor.w	r3, r3, #16
 800aa40:	81bb      	strh	r3, [r7, #12]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	441a      	add	r2, r3
 800aa4c:	89bb      	ldrh	r3, [r7, #12]
 800aa4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	8013      	strh	r3, [r2, #0]
 800aa62:	e01f      	b.n	800aaa4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	4413      	add	r3, r2
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa7a:	81fb      	strh	r3, [r7, #14]
 800aa7c:	89fb      	ldrh	r3, [r7, #14]
 800aa7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa82:	81fb      	strh	r3, [r7, #14]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	441a      	add	r2, r3
 800aa8e:	89fb      	ldrh	r3, [r7, #14]
 800aa90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bc80      	pop	{r7}
 800aaae:	4770      	bx	lr

0800aab0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b087      	sub	sp, #28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	7b1b      	ldrb	r3, [r3, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f040 809d 	bne.w	800abfe <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	785b      	ldrb	r3, [r3, #1]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d04c      	beq.n	800ab66 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	823b      	strh	r3, [r7, #16]
 800aada:	8a3b      	ldrh	r3, [r7, #16]
 800aadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d01b      	beq.n	800ab1c <USB_EPClearStall+0x6c>
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aafa:	81fb      	strh	r3, [r7, #14]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	441a      	add	r2, r3
 800ab06:	89fb      	ldrh	r3, [r7, #14]
 800ab08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	78db      	ldrb	r3, [r3, #3]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d06c      	beq.n	800abfe <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	881b      	ldrh	r3, [r3, #0]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab3a:	81bb      	strh	r3, [r7, #12]
 800ab3c:	89bb      	ldrh	r3, [r7, #12]
 800ab3e:	f083 0320 	eor.w	r3, r3, #32
 800ab42:	81bb      	strh	r3, [r7, #12]
 800ab44:	687a      	ldr	r2, [r7, #4]
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	441a      	add	r2, r3
 800ab4e:	89bb      	ldrh	r3, [r7, #12]
 800ab50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	8013      	strh	r3, [r2, #0]
 800ab64:	e04b      	b.n	800abfe <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4413      	add	r3, r2
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	82fb      	strh	r3, [r7, #22]
 800ab74:	8afb      	ldrh	r3, [r7, #22]
 800ab76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d01b      	beq.n	800abb6 <USB_EPClearStall+0x106>
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	4413      	add	r3, r2
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab94:	82bb      	strh	r3, [r7, #20]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	441a      	add	r2, r3
 800aba0:	8abb      	ldrh	r3, [r7, #20]
 800aba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abcc:	827b      	strh	r3, [r7, #18]
 800abce:	8a7b      	ldrh	r3, [r7, #18]
 800abd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800abd4:	827b      	strh	r3, [r7, #18]
 800abd6:	8a7b      	ldrh	r3, [r7, #18]
 800abd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800abdc:	827b      	strh	r3, [r7, #18]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	441a      	add	r2, r3
 800abe8:	8a7b      	ldrh	r3, [r7, #18]
 800abea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	371c      	adds	r7, #28
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bc80      	pop	{r7}
 800ac08:	4770      	bx	lr

0800ac0a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	460b      	mov	r3, r1
 800ac14:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ac16:	78fb      	ldrb	r3, [r7, #3]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d103      	bne.n	800ac24 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2280      	movs	r2, #128	; 0x80
 800ac20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bc80      	pop	{r7}
 800ac2e:	4770      	bx	lr

0800ac30 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bc80      	pop	{r7}
 800ac42:	4770      	bx	lr

0800ac44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bc80      	pop	{r7}
 800ac56:	4770      	bx	lr

0800ac58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bc80      	pop	{r7}
 800ac74:	4770      	bx	lr

0800ac76 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bc80      	pop	{r7}
 800ac8a:	4770      	bx	lr

0800ac8c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b08d      	sub	sp, #52	; 0x34
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	4611      	mov	r1, r2
 800ac98:	461a      	mov	r2, r3
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	80fb      	strh	r3, [r7, #6]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aca2:	88bb      	ldrh	r3, [r7, #4]
 800aca4:	3301      	adds	r3, #1
 800aca6:	085b      	lsrs	r3, r3, #1
 800aca8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acb2:	88fb      	ldrh	r3, [r7, #6]
 800acb4:	005a      	lsls	r2, r3, #1
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acbe:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800acc0:	6a3b      	ldr	r3, [r7, #32]
 800acc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acc4:	e01e      	b.n	800ad04 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	3301      	adds	r3, #1
 800acd0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	021b      	lsls	r3, r3, #8
 800acda:	b29b      	uxth	r3, r3
 800acdc:	461a      	mov	r2, r3
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800acec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acee:	3302      	adds	r3, #2
 800acf0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf4:	3302      	adds	r3, #2
 800acf6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800acf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfa:	3301      	adds	r3, #1
 800acfc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800acfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad00:	3b01      	subs	r3, #1
 800ad02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1dd      	bne.n	800acc6 <USB_WritePMA+0x3a>
  }
}
 800ad0a:	bf00      	nop
 800ad0c:	bf00      	nop
 800ad0e:	3734      	adds	r7, #52	; 0x34
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bc80      	pop	{r7}
 800ad14:	4770      	bx	lr

0800ad16 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad16:	b480      	push	{r7}
 800ad18:	b08b      	sub	sp, #44	; 0x2c
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	4611      	mov	r1, r2
 800ad22:	461a      	mov	r2, r3
 800ad24:	460b      	mov	r3, r1
 800ad26:	80fb      	strh	r3, [r7, #6]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ad2c:	88bb      	ldrh	r3, [r7, #4]
 800ad2e:	085b      	lsrs	r3, r3, #1
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad3c:	88fb      	ldrh	r3, [r7, #6]
 800ad3e:	005a      	lsls	r2, r3, #1
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad48:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad4e:	e01b      	b.n	800ad88 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ad58:	6a3b      	ldr	r3, [r7, #32]
 800ad5a:	3302      	adds	r3, #2
 800ad5c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	0a1b      	lsrs	r3, r3, #8
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ad7c:	6a3b      	ldr	r3, [r7, #32]
 800ad7e:	3302      	adds	r3, #2
 800ad80:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ad82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad84:	3b01      	subs	r3, #1
 800ad86:	627b      	str	r3, [r7, #36]	; 0x24
 800ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1e0      	bne.n	800ad50 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ad8e:	88bb      	ldrh	r3, [r7, #4]
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d007      	beq.n	800adaa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	701a      	strb	r2, [r3, #0]
  }
}
 800adaa:	bf00      	nop
 800adac:	372c      	adds	r7, #44	; 0x2c
 800adae:	46bd      	mov	sp, r7
 800adb0:	bc80      	pop	{r7}
 800adb2:	4770      	bx	lr

0800adb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800adc0:	2300      	movs	r3, #0
 800adc2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	7c1b      	ldrb	r3, [r3, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d115      	bne.n	800adf8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800adcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800add0:	2202      	movs	r2, #2
 800add2:	2181      	movs	r1, #129	; 0x81
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 feac 	bl	800cb32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ade0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ade4:	2202      	movs	r2, #2
 800ade6:	2101      	movs	r1, #1
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 fea2 	bl	800cb32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800adf6:	e012      	b.n	800ae1e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800adf8:	2340      	movs	r3, #64	; 0x40
 800adfa:	2202      	movs	r2, #2
 800adfc:	2181      	movs	r1, #129	; 0x81
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f001 fe97 	bl	800cb32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae0a:	2340      	movs	r3, #64	; 0x40
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	2101      	movs	r1, #1
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f001 fe8e 	bl	800cb32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae1e:	2308      	movs	r3, #8
 800ae20:	2203      	movs	r2, #3
 800ae22:	2182      	movs	r1, #130	; 0x82
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f001 fe84 	bl	800cb32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae34:	f001 ffa4 	bl	800cd80 <USBD_static_malloc>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d102      	bne.n	800ae50 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	73fb      	strb	r3, [r7, #15]
 800ae4e:	e026      	b.n	800ae9e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae56:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	7c1b      	ldrb	r3, [r3, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d109      	bne.n	800ae8e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae84:	2101      	movs	r1, #1
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f001 ff44 	bl	800cd14 <USBD_LL_PrepareReceive>
 800ae8c:	e007      	b.n	800ae9e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae94:	2340      	movs	r3, #64	; 0x40
 800ae96:	2101      	movs	r1, #1
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f001 ff3b 	bl	800cd14 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aeb8:	2181      	movs	r1, #129	; 0x81
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 fe5f 	bl	800cb7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aec6:	2101      	movs	r1, #1
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f001 fe58 	bl	800cb7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aed6:	2182      	movs	r1, #130	; 0x82
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 fe50 	bl	800cb7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00e      	beq.n	800af0c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefe:	4618      	mov	r0, r3
 800af00:	f001 ff4a 	bl	800cd98 <USBD_static_free>
    pdev->pClassData = NULL;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b086      	sub	sp, #24
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af26:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800af28:	2300      	movs	r3, #0
 800af2a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d039      	beq.n	800afb4 <USBD_CDC_Setup+0x9e>
 800af40:	2b20      	cmp	r3, #32
 800af42:	d17f      	bne.n	800b044 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	88db      	ldrh	r3, [r3, #6]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d029      	beq.n	800afa0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	b25b      	sxtb	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	da11      	bge.n	800af7a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800af62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	88d2      	ldrh	r2, [r2, #6]
 800af68:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800af6a:	6939      	ldr	r1, [r7, #16]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	88db      	ldrh	r3, [r3, #6]
 800af70:	461a      	mov	r2, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f001 fa09 	bl	800c38a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800af78:	e06b      	b.n	800b052 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	785a      	ldrb	r2, [r3, #1]
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	88db      	ldrh	r3, [r3, #6]
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800af90:	6939      	ldr	r1, [r7, #16]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	88db      	ldrh	r3, [r3, #6]
 800af96:	461a      	mov	r2, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 fa24 	bl	800c3e6 <USBD_CtlPrepareRx>
      break;
 800af9e:	e058      	b.n	800b052 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	7850      	ldrb	r0, [r2, #1]
 800afac:	2200      	movs	r2, #0
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	4798      	blx	r3
      break;
 800afb2:	e04e      	b.n	800b052 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	785b      	ldrb	r3, [r3, #1]
 800afb8:	2b0b      	cmp	r3, #11
 800afba:	d02e      	beq.n	800b01a <USBD_CDC_Setup+0x104>
 800afbc:	2b0b      	cmp	r3, #11
 800afbe:	dc38      	bgt.n	800b032 <USBD_CDC_Setup+0x11c>
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <USBD_CDC_Setup+0xb4>
 800afc4:	2b0a      	cmp	r3, #10
 800afc6:	d014      	beq.n	800aff2 <USBD_CDC_Setup+0xdc>
 800afc8:	e033      	b.n	800b032 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d107      	bne.n	800afe4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800afd4:	f107 030c 	add.w	r3, r7, #12
 800afd8:	2202      	movs	r2, #2
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 f9d4 	bl	800c38a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afe2:	e02e      	b.n	800b042 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 f965 	bl	800c2b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800afec:	2302      	movs	r3, #2
 800afee:	75fb      	strb	r3, [r7, #23]
          break;
 800aff0:	e027      	b.n	800b042 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff8:	2b03      	cmp	r3, #3
 800affa:	d107      	bne.n	800b00c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800affc:	f107 030f 	add.w	r3, r7, #15
 800b000:	2201      	movs	r2, #1
 800b002:	4619      	mov	r1, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f001 f9c0 	bl	800c38a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b00a:	e01a      	b.n	800b042 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b00c:	6839      	ldr	r1, [r7, #0]
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f001 f951 	bl	800c2b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b014:	2302      	movs	r3, #2
 800b016:	75fb      	strb	r3, [r7, #23]
          break;
 800b018:	e013      	b.n	800b042 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b020:	2b03      	cmp	r3, #3
 800b022:	d00d      	beq.n	800b040 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f001 f945 	bl	800c2b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b02c:	2302      	movs	r3, #2
 800b02e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b030:	e006      	b.n	800b040 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 f93e 	bl	800c2b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b03a:	2302      	movs	r3, #2
 800b03c:	75fb      	strb	r3, [r7, #23]
          break;
 800b03e:	e000      	b.n	800b042 <USBD_CDC_Setup+0x12c>
          break;
 800b040:	bf00      	nop
      }
      break;
 800b042:	e006      	b.n	800b052 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 f935 	bl	800c2b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b04c:	2302      	movs	r3, #2
 800b04e:	75fb      	strb	r3, [r7, #23]
      break;
 800b050:	bf00      	nop
  }

  return ret;
 800b052:	7dfb      	ldrb	r3, [r7, #23]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b06e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b076:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d03a      	beq.n	800b0f8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b082:	78fa      	ldrb	r2, [r7, #3]
 800b084:	6879      	ldr	r1, [r7, #4]
 800b086:	4613      	mov	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	440b      	add	r3, r1
 800b090:	331c      	adds	r3, #28
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d029      	beq.n	800b0ec <USBD_CDC_DataIn+0x90>
 800b098:	78fa      	ldrb	r2, [r7, #3]
 800b09a:	6879      	ldr	r1, [r7, #4]
 800b09c:	4613      	mov	r3, r2
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	4413      	add	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	440b      	add	r3, r1
 800b0a6:	331c      	adds	r3, #28
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	78f9      	ldrb	r1, [r7, #3]
 800b0ac:	68b8      	ldr	r0, [r7, #8]
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	440b      	add	r3, r1
 800b0b4:	00db      	lsls	r3, r3, #3
 800b0b6:	4403      	add	r3, r0
 800b0b8:	3338      	adds	r3, #56	; 0x38
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0c0:	fb01 f303 	mul.w	r3, r1, r3
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d110      	bne.n	800b0ec <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b0ca:	78fa      	ldrb	r2, [r7, #3]
 800b0cc:	6879      	ldr	r1, [r7, #4]
 800b0ce:	4613      	mov	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	440b      	add	r3, r1
 800b0d8:	331c      	adds	r3, #28
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0de:	78f9      	ldrb	r1, [r7, #3]
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f001 fdf2 	bl	800ccce <USBD_LL_Transmit>
 800b0ea:	e003      	b.n	800b0f4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e000      	b.n	800b0fa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b0f8:	2302      	movs	r3, #2
  }
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b114:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b116:	78fb      	ldrb	r3, [r7, #3]
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f001 fe1d 	bl	800cd5a <USBD_LL_GetRxDataSize>
 800b120:	4602      	mov	r2, r0
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00d      	beq.n	800b14e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b146:	4611      	mov	r1, r2
 800b148:	4798      	blx	r3

    return USBD_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	e000      	b.n	800b150 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b14e:	2302      	movs	r3, #2
  }
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b166:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d015      	beq.n	800b19e <USBD_CDC_EP0_RxReady+0x46>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b178:	2bff      	cmp	r3, #255	; 0xff
 800b17a:	d010      	beq.n	800b19e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b18a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b192:	b292      	uxth	r2, r2
 800b194:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	22ff      	movs	r2, #255	; 0xff
 800b19a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2243      	movs	r2, #67	; 0x43
 800b1b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b1b6:	4b03      	ldr	r3, [pc, #12]	; (800b1c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bc80      	pop	{r7}
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	2000009c 	.word	0x2000009c

0800b1c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2243      	movs	r2, #67	; 0x43
 800b1d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b1d6:	4b03      	ldr	r3, [pc, #12]	; (800b1e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	370c      	adds	r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bc80      	pop	{r7}
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	20000058 	.word	0x20000058

0800b1e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2243      	movs	r2, #67	; 0x43
 800b1f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b1f6:	4b03      	ldr	r3, [pc, #12]	; (800b204 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bc80      	pop	{r7}
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	200000e0 	.word	0x200000e0

0800b208 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	220a      	movs	r2, #10
 800b214:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b216:	4b03      	ldr	r3, [pc, #12]	; (800b224 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b218:	4618      	mov	r0, r3
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bc80      	pop	{r7}
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	20000014 	.word	0x20000014

0800b228 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b232:	2302      	movs	r3, #2
 800b234:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d005      	beq.n	800b248 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	683a      	ldr	r2, [r7, #0]
 800b240:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b248:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	bc80      	pop	{r7}
 800b252:	4770      	bx	lr

0800b254 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b254:	b480      	push	{r7}
 800b256:	b087      	sub	sp, #28
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	4613      	mov	r3, r2
 800b260:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b268:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b272:	88fa      	ldrh	r2, [r7, #6]
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	371c      	adds	r7, #28
 800b280:	46bd      	mov	sp, r7
 800b282:	bc80      	pop	{r7}
 800b284:	4770      	bx	lr

0800b286 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b286:	b480      	push	{r7}
 800b288:	b085      	sub	sp, #20
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b296:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bc80      	pop	{r7}
 800b2aa:	4770      	bx	lr

0800b2ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01c      	beq.n	800b300 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d115      	bne.n	800b2fc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	2181      	movs	r1, #129	; 0x81
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f001 fceb 	bl	800ccce <USBD_LL_Transmit>

      return USBD_OK;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	e002      	b.n	800b302 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e000      	b.n	800b302 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b300:	2302      	movs	r3, #2
  }
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b084      	sub	sp, #16
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b318:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b320:	2b00      	cmp	r3, #0
 800b322:	d017      	beq.n	800b354 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	7c1b      	ldrb	r3, [r3, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d109      	bne.n	800b340 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b332:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b336:	2101      	movs	r1, #1
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f001 fceb 	bl	800cd14 <USBD_LL_PrepareReceive>
 800b33e:	e007      	b.n	800b350 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b346:	2340      	movs	r3, #64	; 0x40
 800b348:	2101      	movs	r1, #1
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 fce2 	bl	800cd14 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	e000      	b.n	800b356 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b354:	2302      	movs	r3, #2
  }
}
 800b356:	4618      	mov	r0, r3
 800b358:	3710      	adds	r7, #16
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b084      	sub	sp, #16
 800b362:	af00      	add	r7, sp, #0
 800b364:	60f8      	str	r0, [r7, #12]
 800b366:	60b9      	str	r1, [r7, #8]
 800b368:	4613      	mov	r3, r2
 800b36a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b372:	2302      	movs	r3, #2
 800b374:	e01a      	b.n	800b3ac <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d003      	beq.n	800b388 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2200      	movs	r2, #0
 800b384:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d003      	beq.n	800b396 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2201      	movs	r2, #1
 800b39a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	79fa      	ldrb	r2, [r7, #7]
 800b3a2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f001 fb4f 	bl	800ca48 <USBD_LL_Init>

  return USBD_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3710      	adds	r7, #16
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d006      	beq.n	800b3d6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73fb      	strb	r3, [r7, #15]
 800b3d4:	e001      	b.n	800b3da <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b3d6:	2302      	movs	r3, #2
 800b3d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bc80      	pop	{r7}
 800b3e4:	4770      	bx	lr

0800b3e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f001 fb84 	bl	800cafc <USBD_LL_Start>

  return USBD_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b083      	sub	sp, #12
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bc80      	pop	{r7}
 800b410:	4770      	bx	lr

0800b412 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
 800b41a:	460b      	mov	r3, r1
 800b41c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b41e:	2302      	movs	r3, #2
 800b420:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00c      	beq.n	800b446 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	78fa      	ldrb	r2, [r7, #3]
 800b436:	4611      	mov	r1, r2
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	4798      	blx	r3
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d101      	bne.n	800b446 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b442:	2300      	movs	r3, #0
 800b444:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b446:	7bfb      	ldrb	r3, [r7, #15]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	460b      	mov	r3, r1
 800b45a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	78fa      	ldrb	r2, [r7, #3]
 800b466:	4611      	mov	r1, r2
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	4798      	blx	r3

  return USBD_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3708      	adds	r7, #8
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b476:	b580      	push	{r7, lr}
 800b478:	b082      	sub	sp, #8
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b486:	6839      	ldr	r1, [r7, #0]
 800b488:	4618      	mov	r0, r3
 800b48a:	f000 fed8 	bl	800c23e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2201      	movs	r2, #1
 800b492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b49c:	461a      	mov	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b4aa:	f003 031f 	and.w	r3, r3, #31
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d016      	beq.n	800b4e0 <USBD_LL_SetupStage+0x6a>
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	d81c      	bhi.n	800b4f0 <USBD_LL_SetupStage+0x7a>
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <USBD_LL_SetupStage+0x4a>
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d008      	beq.n	800b4d0 <USBD_LL_SetupStage+0x5a>
 800b4be:	e017      	b.n	800b4f0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f9cb 	bl	800b864 <USBD_StdDevReq>
      break;
 800b4ce:	e01a      	b.n	800b506 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fa2d 	bl	800b938 <USBD_StdItfReq>
      break;
 800b4de:	e012      	b.n	800b506 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fa6d 	bl	800b9c8 <USBD_StdEPReq>
      break;
 800b4ee:	e00a      	b.n	800b506 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b4f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f001 fb5c 	bl	800cbbc <USBD_LL_StallEP>
      break;
 800b504:	bf00      	nop
  }

  return USBD_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	460b      	mov	r3, r1
 800b51a:	607a      	str	r2, [r7, #4]
 800b51c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b51e:	7afb      	ldrb	r3, [r7, #11]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d14b      	bne.n	800b5bc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b52a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b532:	2b03      	cmp	r3, #3
 800b534:	d134      	bne.n	800b5a0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	68da      	ldr	r2, [r3, #12]
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	691b      	ldr	r3, [r3, #16]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d919      	bls.n	800b576 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	68da      	ldr	r2, [r3, #12]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	1ad2      	subs	r2, r2, r3
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	68da      	ldr	r2, [r3, #12]
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b558:	429a      	cmp	r2, r3
 800b55a:	d203      	bcs.n	800b564 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b560:	b29b      	uxth	r3, r3
 800b562:	e002      	b.n	800b56a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b568:	b29b      	uxth	r3, r3
 800b56a:	461a      	mov	r2, r3
 800b56c:	6879      	ldr	r1, [r7, #4]
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 ff57 	bl	800c422 <USBD_CtlContinueRx>
 800b574:	e038      	b.n	800b5e8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00a      	beq.n	800b598 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b588:	2b03      	cmp	r3, #3
 800b58a:	d105      	bne.n	800b598 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 ff54 	bl	800c446 <USBD_CtlSendStatus>
 800b59e:	e023      	b.n	800b5e8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5a6:	2b05      	cmp	r3, #5
 800b5a8:	d11e      	bne.n	800b5e8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f001 fb01 	bl	800cbbc <USBD_LL_StallEP>
 800b5ba:	e015      	b.n	800b5e8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00d      	beq.n	800b5e4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d108      	bne.n	800b5e4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	7afa      	ldrb	r2, [r7, #11]
 800b5dc:	4611      	mov	r1, r2
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	4798      	blx	r3
 800b5e2:	e001      	b.n	800b5e8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	e000      	b.n	800b5ea <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b086      	sub	sp, #24
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	60f8      	str	r0, [r7, #12]
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	607a      	str	r2, [r7, #4]
 800b5fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b600:	7afb      	ldrb	r3, [r7, #11]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d17f      	bne.n	800b706 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	3314      	adds	r3, #20
 800b60a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b612:	2b02      	cmp	r3, #2
 800b614:	d15c      	bne.n	800b6d0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d915      	bls.n	800b64e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	68da      	ldr	r2, [r3, #12]
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	1ad2      	subs	r2, r2, r3
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	b29b      	uxth	r3, r3
 800b636:	461a      	mov	r2, r3
 800b638:	6879      	ldr	r1, [r7, #4]
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f000 fec1 	bl	800c3c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b640:	2300      	movs	r3, #0
 800b642:	2200      	movs	r2, #0
 800b644:	2100      	movs	r1, #0
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f001 fb64 	bl	800cd14 <USBD_LL_PrepareReceive>
 800b64c:	e04e      	b.n	800b6ec <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	6912      	ldr	r2, [r2, #16]
 800b656:	fbb3 f1f2 	udiv	r1, r3, r2
 800b65a:	fb01 f202 	mul.w	r2, r1, r2
 800b65e:	1a9b      	subs	r3, r3, r2
 800b660:	2b00      	cmp	r3, #0
 800b662:	d11c      	bne.n	800b69e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	689a      	ldr	r2, [r3, #8]
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d316      	bcc.n	800b69e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	689a      	ldr	r2, [r3, #8]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d20f      	bcs.n	800b69e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b67e:	2200      	movs	r2, #0
 800b680:	2100      	movs	r1, #0
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f000 fe9d 	bl	800c3c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b690:	2300      	movs	r3, #0
 800b692:	2200      	movs	r2, #0
 800b694:	2100      	movs	r1, #0
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f001 fb3c 	bl	800cd14 <USBD_LL_PrepareReceive>
 800b69c:	e026      	b.n	800b6ec <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d105      	bne.n	800b6c0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b6c0:	2180      	movs	r1, #128	; 0x80
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f001 fa7a 	bl	800cbbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 fecf 	bl	800c46c <USBD_CtlReceiveStatus>
 800b6ce:	e00d      	b.n	800b6ec <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6d6:	2b04      	cmp	r3, #4
 800b6d8:	d004      	beq.n	800b6e4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d103      	bne.n	800b6ec <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b6e4:	2180      	movs	r1, #128	; 0x80
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f001 fa68 	bl	800cbbc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d11d      	bne.n	800b732 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f7ff fe81 	bl	800b3fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b704:	e015      	b.n	800b732 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00d      	beq.n	800b72e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b718:	2b03      	cmp	r3, #3
 800b71a:	d108      	bne.n	800b72e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	7afa      	ldrb	r2, [r7, #11]
 800b726:	4611      	mov	r1, r2
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	4798      	blx	r3
 800b72c:	e001      	b.n	800b732 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b72e:	2302      	movs	r3, #2
 800b730:	e000      	b.n	800b734 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b744:	2340      	movs	r3, #64	; 0x40
 800b746:	2200      	movs	r2, #0
 800b748:	2100      	movs	r1, #0
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f001 f9f1 	bl	800cb32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2240      	movs	r2, #64	; 0x40
 800b75c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b760:	2340      	movs	r3, #64	; 0x40
 800b762:	2200      	movs	r2, #0
 800b764:	2180      	movs	r1, #128	; 0x80
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f001 f9e3 	bl	800cb32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2240      	movs	r2, #64	; 0x40
 800b776:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d009      	beq.n	800b7b4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	6852      	ldr	r2, [r2, #4]
 800b7ac:	b2d2      	uxtb	r2, r2
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	4798      	blx	r3
  }

  return USBD_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b083      	sub	sp, #12
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	78fa      	ldrb	r2, [r7, #3]
 800b7ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	370c      	adds	r7, #12
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bc80      	pop	{r7}
 800b7da:	4770      	bx	lr

0800b7dc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2204      	movs	r2, #4
 800b7f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bc80      	pop	{r7}
 800b802:	4770      	bx	lr

0800b804 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b812:	2b04      	cmp	r3, #4
 800b814:	d105      	bne.n	800b822 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	bc80      	pop	{r7}
 800b82c:	4770      	bx	lr

0800b82e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b082      	sub	sp, #8
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b83c:	2b03      	cmp	r3, #3
 800b83e:	d10b      	bne.n	800b858 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b846:	69db      	ldr	r3, [r3, #28]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d005      	beq.n	800b858 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b852:	69db      	ldr	r3, [r3, #28]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
	...

0800b864 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b87a:	2b40      	cmp	r3, #64	; 0x40
 800b87c:	d005      	beq.n	800b88a <USBD_StdDevReq+0x26>
 800b87e:	2b40      	cmp	r3, #64	; 0x40
 800b880:	d84f      	bhi.n	800b922 <USBD_StdDevReq+0xbe>
 800b882:	2b00      	cmp	r3, #0
 800b884:	d009      	beq.n	800b89a <USBD_StdDevReq+0x36>
 800b886:	2b20      	cmp	r3, #32
 800b888:	d14b      	bne.n	800b922 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	4798      	blx	r3
      break;
 800b898:	e048      	b.n	800b92c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	785b      	ldrb	r3, [r3, #1]
 800b89e:	2b09      	cmp	r3, #9
 800b8a0:	d839      	bhi.n	800b916 <USBD_StdDevReq+0xb2>
 800b8a2:	a201      	add	r2, pc, #4	; (adr r2, 800b8a8 <USBD_StdDevReq+0x44>)
 800b8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a8:	0800b8f9 	.word	0x0800b8f9
 800b8ac:	0800b90d 	.word	0x0800b90d
 800b8b0:	0800b917 	.word	0x0800b917
 800b8b4:	0800b903 	.word	0x0800b903
 800b8b8:	0800b917 	.word	0x0800b917
 800b8bc:	0800b8db 	.word	0x0800b8db
 800b8c0:	0800b8d1 	.word	0x0800b8d1
 800b8c4:	0800b917 	.word	0x0800b917
 800b8c8:	0800b8ef 	.word	0x0800b8ef
 800b8cc:	0800b8e5 	.word	0x0800b8e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f9dc 	bl	800bc90 <USBD_GetDescriptor>
          break;
 800b8d8:	e022      	b.n	800b920 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fb3f 	bl	800bf60 <USBD_SetAddress>
          break;
 800b8e2:	e01d      	b.n	800b920 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fb7e 	bl	800bfe8 <USBD_SetConfig>
          break;
 800b8ec:	e018      	b.n	800b920 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fc07 	bl	800c104 <USBD_GetConfig>
          break;
 800b8f6:	e013      	b.n	800b920 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fc37 	bl	800c16e <USBD_GetStatus>
          break;
 800b900:	e00e      	b.n	800b920 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fc65 	bl	800c1d4 <USBD_SetFeature>
          break;
 800b90a:	e009      	b.n	800b920 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fc74 	bl	800c1fc <USBD_ClrFeature>
          break;
 800b914:	e004      	b.n	800b920 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fccc 	bl	800c2b6 <USBD_CtlError>
          break;
 800b91e:	bf00      	nop
      }
      break;
 800b920:	e004      	b.n	800b92c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fcc6 	bl	800c2b6 <USBD_CtlError>
      break;
 800b92a:	bf00      	nop
  }

  return ret;
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop

0800b938 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b94e:	2b40      	cmp	r3, #64	; 0x40
 800b950:	d005      	beq.n	800b95e <USBD_StdItfReq+0x26>
 800b952:	2b40      	cmp	r3, #64	; 0x40
 800b954:	d82e      	bhi.n	800b9b4 <USBD_StdItfReq+0x7c>
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <USBD_StdItfReq+0x26>
 800b95a:	2b20      	cmp	r3, #32
 800b95c:	d12a      	bne.n	800b9b4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b964:	3b01      	subs	r3, #1
 800b966:	2b02      	cmp	r3, #2
 800b968:	d81d      	bhi.n	800b9a6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	889b      	ldrh	r3, [r3, #4]
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b01      	cmp	r3, #1
 800b972:	d813      	bhi.n	800b99c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	6839      	ldr	r1, [r7, #0]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	4798      	blx	r3
 800b982:	4603      	mov	r3, r0
 800b984:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	88db      	ldrh	r3, [r3, #6]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d110      	bne.n	800b9b0 <USBD_StdItfReq+0x78>
 800b98e:	7bfb      	ldrb	r3, [r7, #15]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10d      	bne.n	800b9b0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fd56 	bl	800c446 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b99a:	e009      	b.n	800b9b0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fc89 	bl	800c2b6 <USBD_CtlError>
          break;
 800b9a4:	e004      	b.n	800b9b0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b9a6:	6839      	ldr	r1, [r7, #0]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 fc84 	bl	800c2b6 <USBD_CtlError>
          break;
 800b9ae:	e000      	b.n	800b9b2 <USBD_StdItfReq+0x7a>
          break;
 800b9b0:	bf00      	nop
      }
      break;
 800b9b2:	e004      	b.n	800b9be <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fc7d 	bl	800c2b6 <USBD_CtlError>
      break;
 800b9bc:	bf00      	nop
  }

  return USBD_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	889b      	ldrh	r3, [r3, #4]
 800b9da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9e4:	2b40      	cmp	r3, #64	; 0x40
 800b9e6:	d007      	beq.n	800b9f8 <USBD_StdEPReq+0x30>
 800b9e8:	2b40      	cmp	r3, #64	; 0x40
 800b9ea:	f200 8146 	bhi.w	800bc7a <USBD_StdEPReq+0x2b2>
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00a      	beq.n	800ba08 <USBD_StdEPReq+0x40>
 800b9f2:	2b20      	cmp	r3, #32
 800b9f4:	f040 8141 	bne.w	800bc7a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	4798      	blx	r3
      break;
 800ba06:	e13d      	b.n	800bc84 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba10:	2b20      	cmp	r3, #32
 800ba12:	d10a      	bne.n	800ba2a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	4798      	blx	r3
 800ba22:	4603      	mov	r3, r0
 800ba24:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	e12d      	b.n	800bc86 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	785b      	ldrb	r3, [r3, #1]
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d007      	beq.n	800ba42 <USBD_StdEPReq+0x7a>
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	f300 811b 	bgt.w	800bc6e <USBD_StdEPReq+0x2a6>
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d072      	beq.n	800bb22 <USBD_StdEPReq+0x15a>
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d03a      	beq.n	800bab6 <USBD_StdEPReq+0xee>
 800ba40:	e115      	b.n	800bc6e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d002      	beq.n	800ba52 <USBD_StdEPReq+0x8a>
 800ba4c:	2b03      	cmp	r3, #3
 800ba4e:	d015      	beq.n	800ba7c <USBD_StdEPReq+0xb4>
 800ba50:	e02b      	b.n	800baaa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba52:	7bbb      	ldrb	r3, [r7, #14]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00c      	beq.n	800ba72 <USBD_StdEPReq+0xaa>
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
 800ba5a:	2b80      	cmp	r3, #128	; 0x80
 800ba5c:	d009      	beq.n	800ba72 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	4619      	mov	r1, r3
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f001 f8aa 	bl	800cbbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ba68:	2180      	movs	r1, #128	; 0x80
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f001 f8a6 	bl	800cbbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba70:	e020      	b.n	800bab4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ba72:	6839      	ldr	r1, [r7, #0]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fc1e 	bl	800c2b6 <USBD_CtlError>
              break;
 800ba7a:	e01b      	b.n	800bab4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	885b      	ldrh	r3, [r3, #2]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10e      	bne.n	800baa2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ba84:	7bbb      	ldrb	r3, [r7, #14]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d00b      	beq.n	800baa2 <USBD_StdEPReq+0xda>
 800ba8a:	7bbb      	ldrb	r3, [r7, #14]
 800ba8c:	2b80      	cmp	r3, #128	; 0x80
 800ba8e:	d008      	beq.n	800baa2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	88db      	ldrh	r3, [r3, #6]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d104      	bne.n	800baa2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ba98:	7bbb      	ldrb	r3, [r7, #14]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f001 f88d 	bl	800cbbc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fccf 	bl	800c446 <USBD_CtlSendStatus>

              break;
 800baa8:	e004      	b.n	800bab4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fc02 	bl	800c2b6 <USBD_CtlError>
              break;
 800bab2:	bf00      	nop
          }
          break;
 800bab4:	e0e0      	b.n	800bc78 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800babc:	2b02      	cmp	r3, #2
 800babe:	d002      	beq.n	800bac6 <USBD_StdEPReq+0xfe>
 800bac0:	2b03      	cmp	r3, #3
 800bac2:	d015      	beq.n	800baf0 <USBD_StdEPReq+0x128>
 800bac4:	e026      	b.n	800bb14 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bac6:	7bbb      	ldrb	r3, [r7, #14]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00c      	beq.n	800bae6 <USBD_StdEPReq+0x11e>
 800bacc:	7bbb      	ldrb	r3, [r7, #14]
 800bace:	2b80      	cmp	r3, #128	; 0x80
 800bad0:	d009      	beq.n	800bae6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bad2:	7bbb      	ldrb	r3, [r7, #14]
 800bad4:	4619      	mov	r1, r3
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f001 f870 	bl	800cbbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800badc:	2180      	movs	r1, #128	; 0x80
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f001 f86c 	bl	800cbbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bae4:	e01c      	b.n	800bb20 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fbe4 	bl	800c2b6 <USBD_CtlError>
              break;
 800baee:	e017      	b.n	800bb20 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	885b      	ldrh	r3, [r3, #2]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d112      	bne.n	800bb1e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800baf8:	7bbb      	ldrb	r3, [r7, #14]
 800bafa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d004      	beq.n	800bb0c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb02:	7bbb      	ldrb	r3, [r7, #14]
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 f877 	bl	800cbfa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fc9a 	bl	800c446 <USBD_CtlSendStatus>
              }
              break;
 800bb12:	e004      	b.n	800bb1e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 fbcd 	bl	800c2b6 <USBD_CtlError>
              break;
 800bb1c:	e000      	b.n	800bb20 <USBD_StdEPReq+0x158>
              break;
 800bb1e:	bf00      	nop
          }
          break;
 800bb20:	e0aa      	b.n	800bc78 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d002      	beq.n	800bb32 <USBD_StdEPReq+0x16a>
 800bb2c:	2b03      	cmp	r3, #3
 800bb2e:	d032      	beq.n	800bb96 <USBD_StdEPReq+0x1ce>
 800bb30:	e097      	b.n	800bc62 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d007      	beq.n	800bb48 <USBD_StdEPReq+0x180>
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
 800bb3a:	2b80      	cmp	r3, #128	; 0x80
 800bb3c:	d004      	beq.n	800bb48 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bb3e:	6839      	ldr	r1, [r7, #0]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 fbb8 	bl	800c2b6 <USBD_CtlError>
                break;
 800bb46:	e091      	b.n	800bc6c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	da0b      	bge.n	800bb68 <USBD_StdEPReq+0x1a0>
 800bb50:	7bbb      	ldrb	r3, [r7, #14]
 800bb52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb56:	4613      	mov	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	3310      	adds	r3, #16
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	4413      	add	r3, r2
 800bb64:	3304      	adds	r3, #4
 800bb66:	e00b      	b.n	800bb80 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
 800bb6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb6e:	4613      	mov	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4413      	add	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	3304      	adds	r3, #4
 800bb80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	2200      	movs	r2, #0
 800bb86:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fbfb 	bl	800c38a <USBD_CtlSendData>
              break;
 800bb94:	e06a      	b.n	800bc6c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	da11      	bge.n	800bbc2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb9e:	7bbb      	ldrb	r3, [r7, #14]
 800bba0:	f003 020f 	and.w	r2, r3, #15
 800bba4:	6879      	ldr	r1, [r7, #4]
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	440b      	add	r3, r1
 800bbb0:	3318      	adds	r3, #24
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d117      	bne.n	800bbe8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fb7b 	bl	800c2b6 <USBD_CtlError>
                  break;
 800bbc0:	e054      	b.n	800bc6c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	f003 020f 	and.w	r2, r3, #15
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4413      	add	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	440b      	add	r3, r1
 800bbd4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d104      	bne.n	800bbe8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 fb68 	bl	800c2b6 <USBD_CtlError>
                  break;
 800bbe6:	e041      	b.n	800bc6c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	da0b      	bge.n	800bc08 <USBD_StdEPReq+0x240>
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
 800bbf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4413      	add	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	3310      	adds	r3, #16
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	4413      	add	r3, r2
 800bc04:	3304      	adds	r3, #4
 800bc06:	e00b      	b.n	800bc20 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc0e:	4613      	mov	r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	4413      	add	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	3304      	adds	r3, #4
 800bc20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc22:	7bbb      	ldrb	r3, [r7, #14]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d002      	beq.n	800bc2e <USBD_StdEPReq+0x266>
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
 800bc2a:	2b80      	cmp	r3, #128	; 0x80
 800bc2c:	d103      	bne.n	800bc36 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2200      	movs	r2, #0
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	e00e      	b.n	800bc54 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fffc 	bl	800cc38 <USBD_LL_IsStallEP>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d003      	beq.n	800bc4e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	e002      	b.n	800bc54 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2202      	movs	r2, #2
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fb95 	bl	800c38a <USBD_CtlSendData>
              break;
 800bc60:	e004      	b.n	800bc6c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bc62:	6839      	ldr	r1, [r7, #0]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fb26 	bl	800c2b6 <USBD_CtlError>
              break;
 800bc6a:	bf00      	nop
          }
          break;
 800bc6c:	e004      	b.n	800bc78 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 fb20 	bl	800c2b6 <USBD_CtlError>
          break;
 800bc76:	bf00      	nop
      }
      break;
 800bc78:	e004      	b.n	800bc84 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fb1a 	bl	800c2b6 <USBD_CtlError>
      break;
 800bc82:	bf00      	nop
  }

  return ret;
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3710      	adds	r7, #16
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
	...

0800bc90 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bca2:	2300      	movs	r3, #0
 800bca4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	885b      	ldrh	r3, [r3, #2]
 800bcaa:	0a1b      	lsrs	r3, r3, #8
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	2b06      	cmp	r3, #6
 800bcb2:	f200 8128 	bhi.w	800bf06 <USBD_GetDescriptor+0x276>
 800bcb6:	a201      	add	r2, pc, #4	; (adr r2, 800bcbc <USBD_GetDescriptor+0x2c>)
 800bcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcbc:	0800bcd9 	.word	0x0800bcd9
 800bcc0:	0800bcf1 	.word	0x0800bcf1
 800bcc4:	0800bd31 	.word	0x0800bd31
 800bcc8:	0800bf07 	.word	0x0800bf07
 800bccc:	0800bf07 	.word	0x0800bf07
 800bcd0:	0800bea7 	.word	0x0800bea7
 800bcd4:	0800bed3 	.word	0x0800bed3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	7c12      	ldrb	r2, [r2, #16]
 800bce4:	f107 0108 	add.w	r1, r7, #8
 800bce8:	4610      	mov	r0, r2
 800bcea:	4798      	blx	r3
 800bcec:	60f8      	str	r0, [r7, #12]
      break;
 800bcee:	e112      	b.n	800bf16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	7c1b      	ldrb	r3, [r3, #16]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10d      	bne.n	800bd14 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd00:	f107 0208 	add.w	r2, r7, #8
 800bd04:	4610      	mov	r0, r2
 800bd06:	4798      	blx	r3
 800bd08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	2202      	movs	r2, #2
 800bd10:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd12:	e100      	b.n	800bf16 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1c:	f107 0208 	add.w	r2, r7, #8
 800bd20:	4610      	mov	r0, r2
 800bd22:	4798      	blx	r3
 800bd24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3301      	adds	r3, #1
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	701a      	strb	r2, [r3, #0]
      break;
 800bd2e:	e0f2      	b.n	800bf16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	885b      	ldrh	r3, [r3, #2]
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	f200 80ac 	bhi.w	800be94 <USBD_GetDescriptor+0x204>
 800bd3c:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <USBD_GetDescriptor+0xb4>)
 800bd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd42:	bf00      	nop
 800bd44:	0800bd5d 	.word	0x0800bd5d
 800bd48:	0800bd91 	.word	0x0800bd91
 800bd4c:	0800bdc5 	.word	0x0800bdc5
 800bd50:	0800bdf9 	.word	0x0800bdf9
 800bd54:	0800be2d 	.word	0x0800be2d
 800bd58:	0800be61 	.word	0x0800be61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00b      	beq.n	800bd80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	7c12      	ldrb	r2, [r2, #16]
 800bd74:	f107 0108 	add.w	r1, r7, #8
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4798      	blx	r3
 800bd7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd7e:	e091      	b.n	800bea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fa97 	bl	800c2b6 <USBD_CtlError>
            err++;
 800bd88:	7afb      	ldrb	r3, [r7, #11]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd8e:	e089      	b.n	800bea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00b      	beq.n	800bdb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	7c12      	ldrb	r2, [r2, #16]
 800bda8:	f107 0108 	add.w	r1, r7, #8
 800bdac:	4610      	mov	r0, r2
 800bdae:	4798      	blx	r3
 800bdb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdb2:	e077      	b.n	800bea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fa7d 	bl	800c2b6 <USBD_CtlError>
            err++;
 800bdbc:	7afb      	ldrb	r3, [r7, #11]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	72fb      	strb	r3, [r7, #11]
          break;
 800bdc2:	e06f      	b.n	800bea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00b      	beq.n	800bde8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	7c12      	ldrb	r2, [r2, #16]
 800bddc:	f107 0108 	add.w	r1, r7, #8
 800bde0:	4610      	mov	r0, r2
 800bde2:	4798      	blx	r3
 800bde4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bde6:	e05d      	b.n	800bea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bde8:	6839      	ldr	r1, [r7, #0]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fa63 	bl	800c2b6 <USBD_CtlError>
            err++;
 800bdf0:	7afb      	ldrb	r3, [r7, #11]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	72fb      	strb	r3, [r7, #11]
          break;
 800bdf6:	e055      	b.n	800bea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d00b      	beq.n	800be1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	7c12      	ldrb	r2, [r2, #16]
 800be10:	f107 0108 	add.w	r1, r7, #8
 800be14:	4610      	mov	r0, r2
 800be16:	4798      	blx	r3
 800be18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be1a:	e043      	b.n	800bea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fa49 	bl	800c2b6 <USBD_CtlError>
            err++;
 800be24:	7afb      	ldrb	r3, [r7, #11]
 800be26:	3301      	adds	r3, #1
 800be28:	72fb      	strb	r3, [r7, #11]
          break;
 800be2a:	e03b      	b.n	800bea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d00b      	beq.n	800be50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be3e:	695b      	ldr	r3, [r3, #20]
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	7c12      	ldrb	r2, [r2, #16]
 800be44:	f107 0108 	add.w	r1, r7, #8
 800be48:	4610      	mov	r0, r2
 800be4a:	4798      	blx	r3
 800be4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be4e:	e029      	b.n	800bea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fa2f 	bl	800c2b6 <USBD_CtlError>
            err++;
 800be58:	7afb      	ldrb	r3, [r7, #11]
 800be5a:	3301      	adds	r3, #1
 800be5c:	72fb      	strb	r3, [r7, #11]
          break;
 800be5e:	e021      	b.n	800bea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00b      	beq.n	800be84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be72:	699b      	ldr	r3, [r3, #24]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	7c12      	ldrb	r2, [r2, #16]
 800be78:	f107 0108 	add.w	r1, r7, #8
 800be7c:	4610      	mov	r0, r2
 800be7e:	4798      	blx	r3
 800be80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be82:	e00f      	b.n	800bea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fa15 	bl	800c2b6 <USBD_CtlError>
            err++;
 800be8c:	7afb      	ldrb	r3, [r7, #11]
 800be8e:	3301      	adds	r3, #1
 800be90:	72fb      	strb	r3, [r7, #11]
          break;
 800be92:	e007      	b.n	800bea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa0d 	bl	800c2b6 <USBD_CtlError>
          err++;
 800be9c:	7afb      	ldrb	r3, [r7, #11]
 800be9e:	3301      	adds	r3, #1
 800bea0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bea2:	e038      	b.n	800bf16 <USBD_GetDescriptor+0x286>
 800bea4:	e037      	b.n	800bf16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	7c1b      	ldrb	r3, [r3, #16]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d109      	bne.n	800bec2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb6:	f107 0208 	add.w	r2, r7, #8
 800beba:	4610      	mov	r0, r2
 800bebc:	4798      	blx	r3
 800bebe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bec0:	e029      	b.n	800bf16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f9f6 	bl	800c2b6 <USBD_CtlError>
        err++;
 800beca:	7afb      	ldrb	r3, [r7, #11]
 800becc:	3301      	adds	r3, #1
 800bece:	72fb      	strb	r3, [r7, #11]
      break;
 800bed0:	e021      	b.n	800bf16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7c1b      	ldrb	r3, [r3, #16]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10d      	bne.n	800bef6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee2:	f107 0208 	add.w	r2, r7, #8
 800bee6:	4610      	mov	r0, r2
 800bee8:	4798      	blx	r3
 800beea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	3301      	adds	r3, #1
 800bef0:	2207      	movs	r2, #7
 800bef2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bef4:	e00f      	b.n	800bf16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f9dc 	bl	800c2b6 <USBD_CtlError>
        err++;
 800befe:	7afb      	ldrb	r3, [r7, #11]
 800bf00:	3301      	adds	r3, #1
 800bf02:	72fb      	strb	r3, [r7, #11]
      break;
 800bf04:	e007      	b.n	800bf16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f9d4 	bl	800c2b6 <USBD_CtlError>
      err++;
 800bf0e:	7afb      	ldrb	r3, [r7, #11]
 800bf10:	3301      	adds	r3, #1
 800bf12:	72fb      	strb	r3, [r7, #11]
      break;
 800bf14:	bf00      	nop
  }

  if (err != 0U)
 800bf16:	7afb      	ldrb	r3, [r7, #11]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d11c      	bne.n	800bf56 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bf1c:	893b      	ldrh	r3, [r7, #8]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d011      	beq.n	800bf46 <USBD_GetDescriptor+0x2b6>
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	88db      	ldrh	r3, [r3, #6]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00d      	beq.n	800bf46 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	88da      	ldrh	r2, [r3, #6]
 800bf2e:	893b      	ldrh	r3, [r7, #8]
 800bf30:	4293      	cmp	r3, r2
 800bf32:	bf28      	it	cs
 800bf34:	4613      	movcs	r3, r2
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf3a:	893b      	ldrh	r3, [r7, #8]
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	68f9      	ldr	r1, [r7, #12]
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fa22 	bl	800c38a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	88db      	ldrh	r3, [r3, #6]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d104      	bne.n	800bf58 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fa79 	bl	800c446 <USBD_CtlSendStatus>
 800bf54:	e000      	b.n	800bf58 <USBD_GetDescriptor+0x2c8>
    return;
 800bf56:	bf00      	nop
    }
  }
}
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop

0800bf60 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	889b      	ldrh	r3, [r3, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d130      	bne.n	800bfd4 <USBD_SetAddress+0x74>
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	88db      	ldrh	r3, [r3, #6]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d12c      	bne.n	800bfd4 <USBD_SetAddress+0x74>
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	885b      	ldrh	r3, [r3, #2]
 800bf7e:	2b7f      	cmp	r3, #127	; 0x7f
 800bf80:	d828      	bhi.n	800bfd4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	885b      	ldrh	r3, [r3, #2]
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	d104      	bne.n	800bfa2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f98b 	bl	800c2b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfa0:	e01d      	b.n	800bfde <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	7bfa      	ldrb	r2, [r7, #15]
 800bfa6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fe6e 	bl	800cc90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fa46 	bl	800c446 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d004      	beq.n	800bfca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2202      	movs	r2, #2
 800bfc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc8:	e009      	b.n	800bfde <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd2:	e004      	b.n	800bfde <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f96d 	bl	800c2b6 <USBD_CtlError>
  }
}
 800bfdc:	bf00      	nop
 800bfde:	bf00      	nop
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
	...

0800bfe8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	885b      	ldrh	r3, [r3, #2]
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	4b41      	ldr	r3, [pc, #260]	; (800c100 <USBD_SetConfig+0x118>)
 800bffa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bffc:	4b40      	ldr	r3, [pc, #256]	; (800c100 <USBD_SetConfig+0x118>)
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d904      	bls.n	800c00e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f955 	bl	800c2b6 <USBD_CtlError>
 800c00c:	e075      	b.n	800c0fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c014:	2b02      	cmp	r3, #2
 800c016:	d002      	beq.n	800c01e <USBD_SetConfig+0x36>
 800c018:	2b03      	cmp	r3, #3
 800c01a:	d023      	beq.n	800c064 <USBD_SetConfig+0x7c>
 800c01c:	e062      	b.n	800c0e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c01e:	4b38      	ldr	r3, [pc, #224]	; (800c100 <USBD_SetConfig+0x118>)
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d01a      	beq.n	800c05c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c026:	4b36      	ldr	r3, [pc, #216]	; (800c100 <USBD_SetConfig+0x118>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	461a      	mov	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2203      	movs	r2, #3
 800c034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c038:	4b31      	ldr	r3, [pc, #196]	; (800c100 <USBD_SetConfig+0x118>)
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	4619      	mov	r1, r3
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7ff f9e7 	bl	800b412 <USBD_SetClassConfig>
 800c044:	4603      	mov	r3, r0
 800c046:	2b02      	cmp	r3, #2
 800c048:	d104      	bne.n	800c054 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 f932 	bl	800c2b6 <USBD_CtlError>
            return;
 800c052:	e052      	b.n	800c0fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 f9f6 	bl	800c446 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c05a:	e04e      	b.n	800c0fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f9f2 	bl	800c446 <USBD_CtlSendStatus>
        break;
 800c062:	e04a      	b.n	800c0fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c064:	4b26      	ldr	r3, [pc, #152]	; (800c100 <USBD_SetConfig+0x118>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d112      	bne.n	800c092 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2202      	movs	r2, #2
 800c070:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c074:	4b22      	ldr	r3, [pc, #136]	; (800c100 <USBD_SetConfig+0x118>)
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	461a      	mov	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c07e:	4b20      	ldr	r3, [pc, #128]	; (800c100 <USBD_SetConfig+0x118>)
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	4619      	mov	r1, r3
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f7ff f9e3 	bl	800b450 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 f9db 	bl	800c446 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c090:	e033      	b.n	800c0fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c092:	4b1b      	ldr	r3, [pc, #108]	; (800c100 <USBD_SetConfig+0x118>)
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d01d      	beq.n	800c0dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7ff f9d1 	bl	800b450 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c0ae:	4b14      	ldr	r3, [pc, #80]	; (800c100 <USBD_SetConfig+0x118>)
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c0b8:	4b11      	ldr	r3, [pc, #68]	; (800c100 <USBD_SetConfig+0x118>)
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff f9a7 	bl	800b412 <USBD_SetClassConfig>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d104      	bne.n	800c0d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f8f2 	bl	800c2b6 <USBD_CtlError>
            return;
 800c0d2:	e012      	b.n	800c0fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f9b6 	bl	800c446 <USBD_CtlSendStatus>
        break;
 800c0da:	e00e      	b.n	800c0fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f9b2 	bl	800c446 <USBD_CtlSendStatus>
        break;
 800c0e2:	e00a      	b.n	800c0fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f8e5 	bl	800c2b6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c0ec:	4b04      	ldr	r3, [pc, #16]	; (800c100 <USBD_SetConfig+0x118>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff f9ac 	bl	800b450 <USBD_ClrClassConfig>
        break;
 800c0f8:	bf00      	nop
    }
  }
}
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	20000b40 	.word	0x20000b40

0800c104 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	88db      	ldrh	r3, [r3, #6]
 800c112:	2b01      	cmp	r3, #1
 800c114:	d004      	beq.n	800c120 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f8cc 	bl	800c2b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c11e:	e022      	b.n	800c166 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c126:	2b02      	cmp	r3, #2
 800c128:	dc02      	bgt.n	800c130 <USBD_GetConfig+0x2c>
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dc03      	bgt.n	800c136 <USBD_GetConfig+0x32>
 800c12e:	e015      	b.n	800c15c <USBD_GetConfig+0x58>
 800c130:	2b03      	cmp	r3, #3
 800c132:	d00b      	beq.n	800c14c <USBD_GetConfig+0x48>
 800c134:	e012      	b.n	800c15c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	3308      	adds	r3, #8
 800c140:	2201      	movs	r2, #1
 800c142:	4619      	mov	r1, r3
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 f920 	bl	800c38a <USBD_CtlSendData>
        break;
 800c14a:	e00c      	b.n	800c166 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	3304      	adds	r3, #4
 800c150:	2201      	movs	r2, #1
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f918 	bl	800c38a <USBD_CtlSendData>
        break;
 800c15a:	e004      	b.n	800c166 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f8a9 	bl	800c2b6 <USBD_CtlError>
        break;
 800c164:	bf00      	nop
}
 800c166:	bf00      	nop
 800c168:	3708      	adds	r7, #8
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b082      	sub	sp, #8
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c17e:	3b01      	subs	r3, #1
 800c180:	2b02      	cmp	r3, #2
 800c182:	d81e      	bhi.n	800c1c2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	88db      	ldrh	r3, [r3, #6]
 800c188:	2b02      	cmp	r3, #2
 800c18a:	d004      	beq.n	800c196 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f891 	bl	800c2b6 <USBD_CtlError>
        break;
 800c194:	e01a      	b.n	800c1cc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d005      	beq.n	800c1b2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	f043 0202 	orr.w	r2, r3, #2
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	330c      	adds	r3, #12
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f8e5 	bl	800c38a <USBD_CtlSendData>
      break;
 800c1c0:	e004      	b.n	800c1cc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f876 	bl	800c2b6 <USBD_CtlError>
      break;
 800c1ca:	bf00      	nop
  }
}
 800c1cc:	bf00      	nop
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	885b      	ldrh	r3, [r3, #2]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d106      	bne.n	800c1f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f929 	bl	800c446 <USBD_CtlSendStatus>
  }
}
 800c1f4:	bf00      	nop
 800c1f6:	3708      	adds	r7, #8
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c20c:	3b01      	subs	r3, #1
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d80b      	bhi.n	800c22a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	885b      	ldrh	r3, [r3, #2]
 800c216:	2b01      	cmp	r3, #1
 800c218:	d10c      	bne.n	800c234 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f90f 	bl	800c446 <USBD_CtlSendStatus>
      }
      break;
 800c228:	e004      	b.n	800c234 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c22a:	6839      	ldr	r1, [r7, #0]
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f842 	bl	800c2b6 <USBD_CtlError>
      break;
 800c232:	e000      	b.n	800c236 <USBD_ClrFeature+0x3a>
      break;
 800c234:	bf00      	nop
  }
}
 800c236:	bf00      	nop
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c23e:	b480      	push	{r7}
 800c240:	b083      	sub	sp, #12
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	781a      	ldrb	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	785a      	ldrb	r2, [r3, #1]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	3302      	adds	r3, #2
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	b29a      	uxth	r2, r3
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	3303      	adds	r3, #3
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	b29b      	uxth	r3, r3
 800c268:	021b      	lsls	r3, r3, #8
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	4413      	add	r3, r2
 800c26e:	b29a      	uxth	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	3304      	adds	r3, #4
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	3305      	adds	r3, #5
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	b29b      	uxth	r3, r3
 800c284:	021b      	lsls	r3, r3, #8
 800c286:	b29b      	uxth	r3, r3
 800c288:	4413      	add	r3, r2
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	3306      	adds	r3, #6
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	b29a      	uxth	r2, r3
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	3307      	adds	r3, #7
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	021b      	lsls	r3, r3, #8
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	4413      	add	r3, r2
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	80da      	strh	r2, [r3, #6]

}
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bc80      	pop	{r7}
 800c2b4:	4770      	bx	lr

0800c2b6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b082      	sub	sp, #8
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c2c0:	2180      	movs	r1, #128	; 0x80
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fc7a 	bl	800cbbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 fc76 	bl	800cbbc <USBD_LL_StallEP>
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b086      	sub	sp, #24
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d032      	beq.n	800c354 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f000 f834 	bl	800c35c <USBD_GetLen>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	005b      	lsls	r3, r3, #1
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c302:	7dfb      	ldrb	r3, [r7, #23]
 800c304:	1c5a      	adds	r2, r3, #1
 800c306:	75fa      	strb	r2, [r7, #23]
 800c308:	461a      	mov	r2, r3
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	4413      	add	r3, r2
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	7812      	ldrb	r2, [r2, #0]
 800c312:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c314:	7dfb      	ldrb	r3, [r7, #23]
 800c316:	1c5a      	adds	r2, r3, #1
 800c318:	75fa      	strb	r2, [r7, #23]
 800c31a:	461a      	mov	r2, r3
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	4413      	add	r3, r2
 800c320:	2203      	movs	r2, #3
 800c322:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c324:	e012      	b.n	800c34c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	60fa      	str	r2, [r7, #12]
 800c32c:	7dfa      	ldrb	r2, [r7, #23]
 800c32e:	1c51      	adds	r1, r2, #1
 800c330:	75f9      	strb	r1, [r7, #23]
 800c332:	4611      	mov	r1, r2
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	440a      	add	r2, r1
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
 800c33e:	1c5a      	adds	r2, r3, #1
 800c340:	75fa      	strb	r2, [r7, #23]
 800c342:	461a      	mov	r2, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	4413      	add	r3, r2
 800c348:	2200      	movs	r2, #0
 800c34a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1e8      	bne.n	800c326 <USBD_GetString+0x4e>
    }
  }
}
 800c354:	bf00      	nop
 800c356:	3718      	adds	r7, #24
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c364:	2300      	movs	r3, #0
 800c366:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c368:	e005      	b.n	800c376 <USBD_GetLen+0x1a>
  {
    len++;
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
 800c36c:	3301      	adds	r3, #1
 800c36e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	3301      	adds	r3, #1
 800c374:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1f5      	bne.n	800c36a <USBD_GetLen+0xe>
  }

  return len;
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	bc80      	pop	{r7}
 800c388:	4770      	bx	lr

0800c38a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	60b9      	str	r1, [r7, #8]
 800c394:	4613      	mov	r3, r2
 800c396:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2202      	movs	r2, #2
 800c39c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c3a0:	88fa      	ldrh	r2, [r7, #6]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c3a6:	88fa      	ldrh	r2, [r7, #6]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3ac:	88fb      	ldrh	r3, [r7, #6]
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f000 fc8b 	bl	800ccce <USBD_LL_Transmit>

  return USBD_OK;
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}

0800c3c2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b084      	sub	sp, #16
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3d0:	88fb      	ldrh	r3, [r7, #6]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f000 fc79 	bl	800ccce <USBD_LL_Transmit>

  return USBD_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	60f8      	str	r0, [r7, #12]
 800c3ee:	60b9      	str	r1, [r7, #8]
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2203      	movs	r2, #3
 800c3f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c3fc:	88fa      	ldrh	r2, [r7, #6]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c404:	88fa      	ldrh	r2, [r7, #6]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c40c:	88fb      	ldrh	r3, [r7, #6]
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	2100      	movs	r1, #0
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f000 fc7e 	bl	800cd14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b084      	sub	sp, #16
 800c426:	af00      	add	r7, sp, #0
 800c428:	60f8      	str	r0, [r7, #12]
 800c42a:	60b9      	str	r1, [r7, #8]
 800c42c:	4613      	mov	r3, r2
 800c42e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c430:	88fb      	ldrh	r3, [r7, #6]
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	2100      	movs	r1, #0
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f000 fc6c 	bl	800cd14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b082      	sub	sp, #8
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2204      	movs	r2, #4
 800c452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c456:	2300      	movs	r3, #0
 800c458:	2200      	movs	r2, #0
 800c45a:	2100      	movs	r1, #0
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f000 fc36 	bl	800ccce <USBD_LL_Transmit>

  return USBD_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2205      	movs	r2, #5
 800c478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c47c:	2300      	movs	r3, #0
 800c47e:	2200      	movs	r2, #0
 800c480:	2100      	movs	r1, #0
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fc46 	bl	800cd14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c498:	2200      	movs	r2, #0
 800c49a:	4912      	ldr	r1, [pc, #72]	; (800c4e4 <MX_USB_DEVICE_Init+0x50>)
 800c49c:	4812      	ldr	r0, [pc, #72]	; (800c4e8 <MX_USB_DEVICE_Init+0x54>)
 800c49e:	f7fe ff5e 	bl	800b35e <USBD_Init>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d001      	beq.n	800c4ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c4a8:	f7f5 fb42 	bl	8001b30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c4ac:	490f      	ldr	r1, [pc, #60]	; (800c4ec <MX_USB_DEVICE_Init+0x58>)
 800c4ae:	480e      	ldr	r0, [pc, #56]	; (800c4e8 <MX_USB_DEVICE_Init+0x54>)
 800c4b0:	f7fe ff80 	bl	800b3b4 <USBD_RegisterClass>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c4ba:	f7f5 fb39 	bl	8001b30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4be:	490c      	ldr	r1, [pc, #48]	; (800c4f0 <MX_USB_DEVICE_Init+0x5c>)
 800c4c0:	4809      	ldr	r0, [pc, #36]	; (800c4e8 <MX_USB_DEVICE_Init+0x54>)
 800c4c2:	f7fe feb1 	bl	800b228 <USBD_CDC_RegisterInterface>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d001      	beq.n	800c4d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c4cc:	f7f5 fb30 	bl	8001b30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c4d0:	4805      	ldr	r0, [pc, #20]	; (800c4e8 <MX_USB_DEVICE_Init+0x54>)
 800c4d2:	f7fe ff88 	bl	800b3e6 <USBD_Start>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c4dc:	f7f5 fb28 	bl	8001b30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c4e0:	bf00      	nop
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	2000013c 	.word	0x2000013c
 800c4e8:	20000b44 	.word	0x20000b44
 800c4ec:	20000020 	.word	0x20000020
 800c4f0:	2000012c 	.word	0x2000012c

0800c4f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	4905      	ldr	r1, [pc, #20]	; (800c510 <CDC_Init_FS+0x1c>)
 800c4fc:	4805      	ldr	r0, [pc, #20]	; (800c514 <CDC_Init_FS+0x20>)
 800c4fe:	f7fe fea9 	bl	800b254 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c502:	4905      	ldr	r1, [pc, #20]	; (800c518 <CDC_Init_FS+0x24>)
 800c504:	4803      	ldr	r0, [pc, #12]	; (800c514 <CDC_Init_FS+0x20>)
 800c506:	f7fe febe 	bl	800b286 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c50a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	200011f0 	.word	0x200011f0
 800c514:	20000b44 	.word	0x20000b44
 800c518:	20000e08 	.word	0x20000e08

0800c51c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c51c:	b480      	push	{r7}
 800c51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c520:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c522:	4618      	mov	r0, r3
 800c524:	46bd      	mov	sp, r7
 800c526:	bc80      	pop	{r7}
 800c528:	4770      	bx	lr
	...

0800c52c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	4603      	mov	r3, r0
 800c534:	6039      	str	r1, [r7, #0]
 800c536:	71fb      	strb	r3, [r7, #7]
 800c538:	4613      	mov	r3, r2
 800c53a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c53c:	79fb      	ldrb	r3, [r7, #7]
 800c53e:	2b23      	cmp	r3, #35	; 0x23
 800c540:	d85c      	bhi.n	800c5fc <CDC_Control_FS+0xd0>
 800c542:	a201      	add	r2, pc, #4	; (adr r2, 800c548 <CDC_Control_FS+0x1c>)
 800c544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c548:	0800c5fd 	.word	0x0800c5fd
 800c54c:	0800c5fd 	.word	0x0800c5fd
 800c550:	0800c5fd 	.word	0x0800c5fd
 800c554:	0800c5fd 	.word	0x0800c5fd
 800c558:	0800c5fd 	.word	0x0800c5fd
 800c55c:	0800c5fd 	.word	0x0800c5fd
 800c560:	0800c5fd 	.word	0x0800c5fd
 800c564:	0800c5fd 	.word	0x0800c5fd
 800c568:	0800c5fd 	.word	0x0800c5fd
 800c56c:	0800c5fd 	.word	0x0800c5fd
 800c570:	0800c5fd 	.word	0x0800c5fd
 800c574:	0800c5fd 	.word	0x0800c5fd
 800c578:	0800c5fd 	.word	0x0800c5fd
 800c57c:	0800c5fd 	.word	0x0800c5fd
 800c580:	0800c5fd 	.word	0x0800c5fd
 800c584:	0800c5fd 	.word	0x0800c5fd
 800c588:	0800c5fd 	.word	0x0800c5fd
 800c58c:	0800c5fd 	.word	0x0800c5fd
 800c590:	0800c5fd 	.word	0x0800c5fd
 800c594:	0800c5fd 	.word	0x0800c5fd
 800c598:	0800c5fd 	.word	0x0800c5fd
 800c59c:	0800c5fd 	.word	0x0800c5fd
 800c5a0:	0800c5fd 	.word	0x0800c5fd
 800c5a4:	0800c5fd 	.word	0x0800c5fd
 800c5a8:	0800c5fd 	.word	0x0800c5fd
 800c5ac:	0800c5fd 	.word	0x0800c5fd
 800c5b0:	0800c5fd 	.word	0x0800c5fd
 800c5b4:	0800c5fd 	.word	0x0800c5fd
 800c5b8:	0800c5fd 	.word	0x0800c5fd
 800c5bc:	0800c5fd 	.word	0x0800c5fd
 800c5c0:	0800c5fd 	.word	0x0800c5fd
 800c5c4:	0800c5fd 	.word	0x0800c5fd
 800c5c8:	0800c5d9 	.word	0x0800c5d9
 800c5cc:	0800c5eb 	.word	0x0800c5eb
 800c5d0:	0800c5fd 	.word	0x0800c5fd
 800c5d4:	0800c5fd 	.word	0x0800c5fd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	; (800c60c <CDC_Control_FS+0xe0>)
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	6810      	ldr	r0, [r2, #0]
 800c5de:	6018      	str	r0, [r3, #0]
 800c5e0:	8891      	ldrh	r1, [r2, #4]
 800c5e2:	7992      	ldrb	r2, [r2, #6]
 800c5e4:	8099      	strh	r1, [r3, #4]
 800c5e6:	719a      	strb	r2, [r3, #6]
    break;
 800c5e8:	e009      	b.n	800c5fe <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	4a07      	ldr	r2, [pc, #28]	; (800c60c <CDC_Control_FS+0xe0>)
 800c5ee:	6810      	ldr	r0, [r2, #0]
 800c5f0:	6018      	str	r0, [r3, #0]
 800c5f2:	8891      	ldrh	r1, [r2, #4]
 800c5f4:	7992      	ldrb	r2, [r2, #6]
 800c5f6:	8099      	strh	r1, [r3, #4]
 800c5f8:	719a      	strb	r2, [r3, #6]
    break;
 800c5fa:	e000      	b.n	800c5fe <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c5fc:	bf00      	nop
  }

  return (USBD_OK);
 800c5fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c600:	4618      	mov	r0, r3
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	bc80      	pop	{r7}
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	20000124 	.word	0x20000124

0800c610 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d005      	beq.n	800c62e <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7f4 f809 	bl	8000640 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c62e:	6879      	ldr	r1, [r7, #4]
 800c630:	4805      	ldr	r0, [pc, #20]	; (800c648 <CDC_Receive_FS+0x38>)
 800c632:	f7fe fe28 	bl	800b286 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c636:	4804      	ldr	r0, [pc, #16]	; (800c648 <CDC_Receive_FS+0x38>)
 800c638:	f7fe fe67 	bl	800b30a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c63c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3708      	adds	r7, #8
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	20000b44 	.word	0x20000b44

0800c64c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	460b      	mov	r3, r1
 800c656:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c65c:	4b0d      	ldr	r3, [pc, #52]	; (800c694 <CDC_Transmit_FS+0x48>)
 800c65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c662:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d001      	beq.n	800c672 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c66e:	2301      	movs	r3, #1
 800c670:	e00b      	b.n	800c68a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c672:	887b      	ldrh	r3, [r7, #2]
 800c674:	461a      	mov	r2, r3
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	4806      	ldr	r0, [pc, #24]	; (800c694 <CDC_Transmit_FS+0x48>)
 800c67a:	f7fe fdeb 	bl	800b254 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c67e:	4805      	ldr	r0, [pc, #20]	; (800c694 <CDC_Transmit_FS+0x48>)
 800c680:	f7fe fe14 	bl	800b2ac <USBD_CDC_TransmitPacket>
 800c684:	4603      	mov	r3, r0
 800c686:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c688:	7bfb      	ldrb	r3, [r7, #15]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	20000b44 	.word	0x20000b44

0800c698 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	6039      	str	r1, [r7, #0]
 800c6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	2212      	movs	r2, #18
 800c6a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c6aa:	4b03      	ldr	r3, [pc, #12]	; (800c6b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bc80      	pop	{r7}
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	20000158 	.word	0x20000158

0800c6bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	6039      	str	r1, [r7, #0]
 800c6c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2204      	movs	r2, #4
 800c6cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6ce:	4b03      	ldr	r3, [pc, #12]	; (800c6dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bc80      	pop	{r7}
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	2000016c 	.word	0x2000016c

0800c6e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	6039      	str	r1, [r7, #0]
 800c6ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6ec:	79fb      	ldrb	r3, [r7, #7]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d105      	bne.n	800c6fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	4907      	ldr	r1, [pc, #28]	; (800c714 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6f6:	4808      	ldr	r0, [pc, #32]	; (800c718 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6f8:	f7ff fdee 	bl	800c2d8 <USBD_GetString>
 800c6fc:	e004      	b.n	800c708 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	4904      	ldr	r1, [pc, #16]	; (800c714 <USBD_FS_ProductStrDescriptor+0x34>)
 800c702:	4805      	ldr	r0, [pc, #20]	; (800c718 <USBD_FS_ProductStrDescriptor+0x38>)
 800c704:	f7ff fde8 	bl	800c2d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c708:	4b02      	ldr	r3, [pc, #8]	; (800c714 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	200015d8 	.word	0x200015d8
 800c718:	0800d888 	.word	0x0800d888

0800c71c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	6039      	str	r1, [r7, #0]
 800c726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c728:	683a      	ldr	r2, [r7, #0]
 800c72a:	4904      	ldr	r1, [pc, #16]	; (800c73c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c72c:	4804      	ldr	r0, [pc, #16]	; (800c740 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c72e:	f7ff fdd3 	bl	800c2d8 <USBD_GetString>
  return USBD_StrDesc;
 800c732:	4b02      	ldr	r3, [pc, #8]	; (800c73c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c734:	4618      	mov	r0, r3
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	200015d8 	.word	0x200015d8
 800c740:	0800d89c 	.word	0x0800d89c

0800c744 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	4603      	mov	r3, r0
 800c74c:	6039      	str	r1, [r7, #0]
 800c74e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	221a      	movs	r2, #26
 800c754:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c756:	f000 f843 	bl	800c7e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c75a:	4b02      	ldr	r3, [pc, #8]	; (800c764 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20000170 	.word	0x20000170

0800c768 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	4603      	mov	r3, r0
 800c770:	6039      	str	r1, [r7, #0]
 800c772:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d105      	bne.n	800c786 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c77a:	683a      	ldr	r2, [r7, #0]
 800c77c:	4907      	ldr	r1, [pc, #28]	; (800c79c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c77e:	4808      	ldr	r0, [pc, #32]	; (800c7a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c780:	f7ff fdaa 	bl	800c2d8 <USBD_GetString>
 800c784:	e004      	b.n	800c790 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	4904      	ldr	r1, [pc, #16]	; (800c79c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c78a:	4805      	ldr	r0, [pc, #20]	; (800c7a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c78c:	f7ff fda4 	bl	800c2d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c790:	4b02      	ldr	r3, [pc, #8]	; (800c79c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c792:	4618      	mov	r0, r3
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	200015d8 	.word	0x200015d8
 800c7a0:	0800d8a4 	.word	0x0800d8a4

0800c7a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	6039      	str	r1, [r7, #0]
 800c7ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7b0:	79fb      	ldrb	r3, [r7, #7]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d105      	bne.n	800c7c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	4907      	ldr	r1, [pc, #28]	; (800c7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7ba:	4808      	ldr	r0, [pc, #32]	; (800c7dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7bc:	f7ff fd8c 	bl	800c2d8 <USBD_GetString>
 800c7c0:	e004      	b.n	800c7cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	4904      	ldr	r1, [pc, #16]	; (800c7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7c6:	4805      	ldr	r0, [pc, #20]	; (800c7dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7c8:	f7ff fd86 	bl	800c2d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7cc:	4b02      	ldr	r3, [pc, #8]	; (800c7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	200015d8 	.word	0x200015d8
 800c7dc:	0800d8b0 	.word	0x0800d8b0

0800c7e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7e6:	4b0f      	ldr	r3, [pc, #60]	; (800c824 <Get_SerialNum+0x44>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7ec:	4b0e      	ldr	r3, [pc, #56]	; (800c828 <Get_SerialNum+0x48>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7f2:	4b0e      	ldr	r3, [pc, #56]	; (800c82c <Get_SerialNum+0x4c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d009      	beq.n	800c81a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c806:	2208      	movs	r2, #8
 800c808:	4909      	ldr	r1, [pc, #36]	; (800c830 <Get_SerialNum+0x50>)
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	f000 f814 	bl	800c838 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c810:	2204      	movs	r2, #4
 800c812:	4908      	ldr	r1, [pc, #32]	; (800c834 <Get_SerialNum+0x54>)
 800c814:	68b8      	ldr	r0, [r7, #8]
 800c816:	f000 f80f 	bl	800c838 <IntToUnicode>
  }
}
 800c81a:	bf00      	nop
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	1ffff7e8 	.word	0x1ffff7e8
 800c828:	1ffff7ec 	.word	0x1ffff7ec
 800c82c:	1ffff7f0 	.word	0x1ffff7f0
 800c830:	20000172 	.word	0x20000172
 800c834:	20000182 	.word	0x20000182

0800c838 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c838:	b480      	push	{r7}
 800c83a:	b087      	sub	sp, #28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	4613      	mov	r3, r2
 800c844:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c84a:	2300      	movs	r3, #0
 800c84c:	75fb      	strb	r3, [r7, #23]
 800c84e:	e027      	b.n	800c8a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	0f1b      	lsrs	r3, r3, #28
 800c854:	2b09      	cmp	r3, #9
 800c856:	d80b      	bhi.n	800c870 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	0f1b      	lsrs	r3, r3, #28
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	4619      	mov	r1, r3
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	440b      	add	r3, r1
 800c868:	3230      	adds	r2, #48	; 0x30
 800c86a:	b2d2      	uxtb	r2, r2
 800c86c:	701a      	strb	r2, [r3, #0]
 800c86e:	e00a      	b.n	800c886 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	0f1b      	lsrs	r3, r3, #28
 800c874:	b2da      	uxtb	r2, r3
 800c876:	7dfb      	ldrb	r3, [r7, #23]
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	4619      	mov	r1, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	440b      	add	r3, r1
 800c880:	3237      	adds	r2, #55	; 0x37
 800c882:	b2d2      	uxtb	r2, r2
 800c884:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	011b      	lsls	r3, r3, #4
 800c88a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c88c:	7dfb      	ldrb	r3, [r7, #23]
 800c88e:	005b      	lsls	r3, r3, #1
 800c890:	3301      	adds	r3, #1
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	4413      	add	r3, r2
 800c896:	2200      	movs	r2, #0
 800c898:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
 800c89c:	3301      	adds	r3, #1
 800c89e:	75fb      	strb	r3, [r7, #23]
 800c8a0:	7dfa      	ldrb	r2, [r7, #23]
 800c8a2:	79fb      	ldrb	r3, [r7, #7]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d3d3      	bcc.n	800c850 <IntToUnicode+0x18>
  }
}
 800c8a8:	bf00      	nop
 800c8aa:	bf00      	nop
 800c8ac:	371c      	adds	r7, #28
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bc80      	pop	{r7}
 800c8b2:	4770      	bx	lr

0800c8b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a11      	ldr	r2, [pc, #68]	; (800c908 <HAL_PCD_MspInit+0x54>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d11b      	bne.n	800c8fe <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c8c6:	4b11      	ldr	r3, [pc, #68]	; (800c90c <HAL_PCD_MspInit+0x58>)
 800c8c8:	69db      	ldr	r3, [r3, #28]
 800c8ca:	4a10      	ldr	r2, [pc, #64]	; (800c90c <HAL_PCD_MspInit+0x58>)
 800c8cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c8d0:	61d3      	str	r3, [r2, #28]
 800c8d2:	4b0e      	ldr	r3, [pc, #56]	; (800c90c <HAL_PCD_MspInit+0x58>)
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8da:	60fb      	str	r3, [r7, #12]
 800c8dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800c8de:	2200      	movs	r2, #0
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	2013      	movs	r0, #19
 800c8e4:	f7f7 fe79 	bl	80045da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800c8e8:	2013      	movs	r0, #19
 800c8ea:	f7f7 fe92 	bl	8004612 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	2014      	movs	r0, #20
 800c8f4:	f7f7 fe71 	bl	80045da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c8f8:	2014      	movs	r0, #20
 800c8fa:	f7f7 fe8a 	bl	8004612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c8fe:	bf00      	nop
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	40005c00 	.word	0x40005c00
 800c90c:	40021000 	.word	0x40021000

0800c910 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c924:	4619      	mov	r1, r3
 800c926:	4610      	mov	r0, r2
 800c928:	f7fe fda5 	bl	800b476 <USBD_LL_SetupStage>
}
 800c92c:	bf00      	nop
 800c92e:	3708      	adds	r7, #8
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c946:	78fa      	ldrb	r2, [r7, #3]
 800c948:	6879      	ldr	r1, [r7, #4]
 800c94a:	4613      	mov	r3, r2
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4413      	add	r3, r2
 800c950:	00db      	lsls	r3, r3, #3
 800c952:	440b      	add	r3, r1
 800c954:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	78fb      	ldrb	r3, [r7, #3]
 800c95c:	4619      	mov	r1, r3
 800c95e:	f7fe fdd7 	bl	800b510 <USBD_LL_DataOutStage>
}
 800c962:	bf00      	nop
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b082      	sub	sp, #8
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	460b      	mov	r3, r1
 800c974:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c97c:	78fa      	ldrb	r2, [r7, #3]
 800c97e:	6879      	ldr	r1, [r7, #4]
 800c980:	4613      	mov	r3, r2
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	4413      	add	r3, r2
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	440b      	add	r3, r1
 800c98a:	333c      	adds	r3, #60	; 0x3c
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	78fb      	ldrb	r3, [r7, #3]
 800c990:	4619      	mov	r1, r3
 800c992:	f7fe fe2e 	bl	800b5f2 <USBD_LL_DataInStage>
}
 800c996:	bf00      	nop
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b082      	sub	sp, #8
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fe ff3e 	bl	800b82e <USBD_LL_SOF>
}
 800c9b2:	bf00      	nop
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b084      	sub	sp, #16
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	d001      	beq.n	800c9d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9ce:	f7f5 f8af 	bl	8001b30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c9d8:	7bfa      	ldrb	r2, [r7, #15]
 800c9da:	4611      	mov	r1, r2
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7fe feee 	bl	800b7be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fe fea7 	bl	800b73c <USBD_LL_Reset>
}
 800c9ee:	bf00      	nop
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
	...

0800c9f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fe fee8 	bl	800b7dc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d005      	beq.n	800ca20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca14:	4b04      	ldr	r3, [pc, #16]	; (800ca28 <HAL_PCD_SuspendCallback+0x30>)
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	4a03      	ldr	r2, [pc, #12]	; (800ca28 <HAL_PCD_SuspendCallback+0x30>)
 800ca1a:	f043 0306 	orr.w	r3, r3, #6
 800ca1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca20:	bf00      	nop
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	e000ed00 	.word	0xe000ed00

0800ca2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7fe fee2 	bl	800b804 <USBD_LL_Resume>
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca50:	4a28      	ldr	r2, [pc, #160]	; (800caf4 <USBD_LL_Init+0xac>)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a26      	ldr	r2, [pc, #152]	; (800caf4 <USBD_LL_Init+0xac>)
 800ca5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ca60:	4b24      	ldr	r3, [pc, #144]	; (800caf4 <USBD_LL_Init+0xac>)
 800ca62:	4a25      	ldr	r2, [pc, #148]	; (800caf8 <USBD_LL_Init+0xb0>)
 800ca64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca66:	4b23      	ldr	r3, [pc, #140]	; (800caf4 <USBD_LL_Init+0xac>)
 800ca68:	2208      	movs	r2, #8
 800ca6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca6c:	4b21      	ldr	r3, [pc, #132]	; (800caf4 <USBD_LL_Init+0xac>)
 800ca6e:	2202      	movs	r2, #2
 800ca70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca72:	4b20      	ldr	r3, [pc, #128]	; (800caf4 <USBD_LL_Init+0xac>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca78:	4b1e      	ldr	r3, [pc, #120]	; (800caf4 <USBD_LL_Init+0xac>)
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca7e:	4b1d      	ldr	r3, [pc, #116]	; (800caf4 <USBD_LL_Init+0xac>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca84:	481b      	ldr	r0, [pc, #108]	; (800caf4 <USBD_LL_Init+0xac>)
 800ca86:	f7f7 ffbf 	bl	8004a08 <HAL_PCD_Init>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d001      	beq.n	800ca94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ca90:	f7f5 f84e 	bl	8001b30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca9a:	2318      	movs	r3, #24
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	2100      	movs	r1, #0
 800caa0:	f7f9 fc33 	bl	800630a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800caaa:	2358      	movs	r3, #88	; 0x58
 800caac:	2200      	movs	r2, #0
 800caae:	2180      	movs	r1, #128	; 0x80
 800cab0:	f7f9 fc2b 	bl	800630a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800caba:	23c0      	movs	r3, #192	; 0xc0
 800cabc:	2200      	movs	r2, #0
 800cabe:	2181      	movs	r1, #129	; 0x81
 800cac0:	f7f9 fc23 	bl	800630a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800caca:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cace:	2200      	movs	r2, #0
 800cad0:	2101      	movs	r1, #1
 800cad2:	f7f9 fc1a 	bl	800630a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cadc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cae0:	2200      	movs	r2, #0
 800cae2:	2182      	movs	r1, #130	; 0x82
 800cae4:	f7f9 fc11 	bl	800630a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	200017d8 	.word	0x200017d8
 800caf8:	40005c00 	.word	0x40005c00

0800cafc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7f8 f883 	bl	8004c1e <HAL_PCD_Start>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f000 f94e 	bl	800cdc0 <USBD_Get_USB_Status>
 800cb24:	4603      	mov	r3, r0
 800cb26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb28:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	4608      	mov	r0, r1
 800cb3c:	4611      	mov	r1, r2
 800cb3e:	461a      	mov	r2, r3
 800cb40:	4603      	mov	r3, r0
 800cb42:	70fb      	strb	r3, [r7, #3]
 800cb44:	460b      	mov	r3, r1
 800cb46:	70bb      	strb	r3, [r7, #2]
 800cb48:	4613      	mov	r3, r2
 800cb4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb5a:	78bb      	ldrb	r3, [r7, #2]
 800cb5c:	883a      	ldrh	r2, [r7, #0]
 800cb5e:	78f9      	ldrb	r1, [r7, #3]
 800cb60:	f7f8 f9fb 	bl	8004f5a <HAL_PCD_EP_Open>
 800cb64:	4603      	mov	r3, r0
 800cb66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f000 f928 	bl	800cdc0 <USBD_Get_USB_Status>
 800cb70:	4603      	mov	r3, r0
 800cb72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb74:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	460b      	mov	r3, r1
 800cb88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb98:	78fa      	ldrb	r2, [r7, #3]
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7f8 fa42 	bl	8005026 <HAL_PCD_EP_Close>
 800cba2:	4603      	mov	r3, r0
 800cba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cba6:	7bfb      	ldrb	r3, [r7, #15]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f000 f909 	bl	800cdc0 <USBD_Get_USB_Status>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbd6:	78fa      	ldrb	r2, [r7, #3]
 800cbd8:	4611      	mov	r1, r2
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7f8 fb02 	bl	80051e4 <HAL_PCD_EP_SetStall>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 f8ea 	bl	800cdc0 <USBD_Get_USB_Status>
 800cbec:	4603      	mov	r3, r0
 800cbee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b084      	sub	sp, #16
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
 800cc02:	460b      	mov	r3, r1
 800cc04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc06:	2300      	movs	r3, #0
 800cc08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc14:	78fa      	ldrb	r2, [r7, #3]
 800cc16:	4611      	mov	r1, r2
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7f8 fb43 	bl	80052a4 <HAL_PCD_EP_ClrStall>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 f8cb 	bl	800cdc0 <USBD_Get_USB_Status>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	460b      	mov	r3, r1
 800cc42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	da0c      	bge.n	800cc6e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc54:	78fb      	ldrb	r3, [r7, #3]
 800cc56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc5a:	68f9      	ldr	r1, [r7, #12]
 800cc5c:	1c5a      	adds	r2, r3, #1
 800cc5e:	4613      	mov	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	440b      	add	r3, r1
 800cc68:	3302      	adds	r3, #2
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	e00b      	b.n	800cc86 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc6e:	78fb      	ldrb	r3, [r7, #3]
 800cc70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc74:	68f9      	ldr	r1, [r7, #12]
 800cc76:	4613      	mov	r3, r2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	4413      	add	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	440b      	add	r3, r1
 800cc80:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cc84:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3714      	adds	r7, #20
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bc80      	pop	{r7}
 800cc8e:	4770      	bx	lr

0800cc90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	460b      	mov	r3, r1
 800cc9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca0:	2300      	movs	r3, #0
 800cca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ccaa:	78fa      	ldrb	r2, [r7, #3]
 800ccac:	4611      	mov	r1, r2
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7f8 f92e 	bl	8004f10 <HAL_PCD_SetAddress>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccb8:	7bfb      	ldrb	r3, [r7, #15]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 f880 	bl	800cdc0 <USBD_Get_USB_Status>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3710      	adds	r7, #16
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b086      	sub	sp, #24
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	60f8      	str	r0, [r7, #12]
 800ccd6:	607a      	str	r2, [r7, #4]
 800ccd8:	461a      	mov	r2, r3
 800ccda:	460b      	mov	r3, r1
 800ccdc:	72fb      	strb	r3, [r7, #11]
 800ccde:	4613      	mov	r3, r2
 800cce0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce6:	2300      	movs	r3, #0
 800cce8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ccf0:	893b      	ldrh	r3, [r7, #8]
 800ccf2:	7af9      	ldrb	r1, [r7, #11]
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	f7f8 fa32 	bl	800515e <HAL_PCD_EP_Transmit>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f85d 	bl	800cdc0 <USBD_Get_USB_Status>
 800cd06:	4603      	mov	r3, r0
 800cd08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3718      	adds	r7, #24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b086      	sub	sp, #24
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	607a      	str	r2, [r7, #4]
 800cd1e:	461a      	mov	r2, r3
 800cd20:	460b      	mov	r3, r1
 800cd22:	72fb      	strb	r3, [r7, #11]
 800cd24:	4613      	mov	r3, r2
 800cd26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd36:	893b      	ldrh	r3, [r7, #8]
 800cd38:	7af9      	ldrb	r1, [r7, #11]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	f7f8 f9bb 	bl	80050b6 <HAL_PCD_EP_Receive>
 800cd40:	4603      	mov	r3, r0
 800cd42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd44:	7dfb      	ldrb	r3, [r7, #23]
 800cd46:	4618      	mov	r0, r3
 800cd48:	f000 f83a 	bl	800cdc0 <USBD_Get_USB_Status>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd50:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3718      	adds	r7, #24
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b082      	sub	sp, #8
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
 800cd62:	460b      	mov	r3, r1
 800cd64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd6c:	78fa      	ldrb	r2, [r7, #3]
 800cd6e:	4611      	mov	r1, r2
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7f8 f9dd 	bl	8005130 <HAL_PCD_EP_GetRxCount>
 800cd76:	4603      	mov	r3, r0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cd88:	4b02      	ldr	r3, [pc, #8]	; (800cd94 <USBD_static_malloc+0x14>)
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	370c      	adds	r7, #12
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bc80      	pop	{r7}
 800cd92:	4770      	bx	lr
 800cd94:	20001ac4 	.word	0x20001ac4

0800cd98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]

}
 800cda0:	bf00      	nop
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bc80      	pop	{r7}
 800cda8:	4770      	bx	lr

0800cdaa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdaa:	b480      	push	{r7}
 800cdac:	b083      	sub	sp, #12
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cdb6:	bf00      	nop
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bc80      	pop	{r7}
 800cdbe:	4770      	bx	lr

0800cdc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cdce:	79fb      	ldrb	r3, [r7, #7]
 800cdd0:	2b03      	cmp	r3, #3
 800cdd2:	d817      	bhi.n	800ce04 <USBD_Get_USB_Status+0x44>
 800cdd4:	a201      	add	r2, pc, #4	; (adr r2, 800cddc <USBD_Get_USB_Status+0x1c>)
 800cdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdda:	bf00      	nop
 800cddc:	0800cded 	.word	0x0800cded
 800cde0:	0800cdf3 	.word	0x0800cdf3
 800cde4:	0800cdf9 	.word	0x0800cdf9
 800cde8:	0800cdff 	.word	0x0800cdff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cdec:	2300      	movs	r3, #0
 800cdee:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf0:	e00b      	b.n	800ce0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdf2:	2302      	movs	r3, #2
 800cdf4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf6:	e008      	b.n	800ce0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	73fb      	strb	r3, [r7, #15]
    break;
 800cdfc:	e005      	b.n	800ce0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdfe:	2302      	movs	r3, #2
 800ce00:	73fb      	strb	r3, [r7, #15]
    break;
 800ce02:	e002      	b.n	800ce0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce04:	2302      	movs	r3, #2
 800ce06:	73fb      	strb	r3, [r7, #15]
    break;
 800ce08:	bf00      	nop
  }
  return usb_status;
 800ce0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3714      	adds	r7, #20
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bc80      	pop	{r7}
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop

0800ce18 <__errno>:
 800ce18:	4b01      	ldr	r3, [pc, #4]	; (800ce20 <__errno+0x8>)
 800ce1a:	6818      	ldr	r0, [r3, #0]
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	2000018c 	.word	0x2000018c

0800ce24 <__libc_init_array>:
 800ce24:	b570      	push	{r4, r5, r6, lr}
 800ce26:	2600      	movs	r6, #0
 800ce28:	4d0c      	ldr	r5, [pc, #48]	; (800ce5c <__libc_init_array+0x38>)
 800ce2a:	4c0d      	ldr	r4, [pc, #52]	; (800ce60 <__libc_init_array+0x3c>)
 800ce2c:	1b64      	subs	r4, r4, r5
 800ce2e:	10a4      	asrs	r4, r4, #2
 800ce30:	42a6      	cmp	r6, r4
 800ce32:	d109      	bne.n	800ce48 <__libc_init_array+0x24>
 800ce34:	f000 fcd6 	bl	800d7e4 <_init>
 800ce38:	2600      	movs	r6, #0
 800ce3a:	4d0a      	ldr	r5, [pc, #40]	; (800ce64 <__libc_init_array+0x40>)
 800ce3c:	4c0a      	ldr	r4, [pc, #40]	; (800ce68 <__libc_init_array+0x44>)
 800ce3e:	1b64      	subs	r4, r4, r5
 800ce40:	10a4      	asrs	r4, r4, #2
 800ce42:	42a6      	cmp	r6, r4
 800ce44:	d105      	bne.n	800ce52 <__libc_init_array+0x2e>
 800ce46:	bd70      	pop	{r4, r5, r6, pc}
 800ce48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce4c:	4798      	blx	r3
 800ce4e:	3601      	adds	r6, #1
 800ce50:	e7ee      	b.n	800ce30 <__libc_init_array+0xc>
 800ce52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce56:	4798      	blx	r3
 800ce58:	3601      	adds	r6, #1
 800ce5a:	e7f2      	b.n	800ce42 <__libc_init_array+0x1e>
 800ce5c:	0800e758 	.word	0x0800e758
 800ce60:	0800e758 	.word	0x0800e758
 800ce64:	0800e758 	.word	0x0800e758
 800ce68:	0800e75c 	.word	0x0800e75c

0800ce6c <memcpy>:
 800ce6c:	440a      	add	r2, r1
 800ce6e:	4291      	cmp	r1, r2
 800ce70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce74:	d100      	bne.n	800ce78 <memcpy+0xc>
 800ce76:	4770      	bx	lr
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce7e:	4291      	cmp	r1, r2
 800ce80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce84:	d1f9      	bne.n	800ce7a <memcpy+0xe>
 800ce86:	bd10      	pop	{r4, pc}

0800ce88 <memset>:
 800ce88:	4603      	mov	r3, r0
 800ce8a:	4402      	add	r2, r0
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d100      	bne.n	800ce92 <memset+0xa>
 800ce90:	4770      	bx	lr
 800ce92:	f803 1b01 	strb.w	r1, [r3], #1
 800ce96:	e7f9      	b.n	800ce8c <memset+0x4>

0800ce98 <sniprintf>:
 800ce98:	b40c      	push	{r2, r3}
 800ce9a:	b530      	push	{r4, r5, lr}
 800ce9c:	4b17      	ldr	r3, [pc, #92]	; (800cefc <sniprintf+0x64>)
 800ce9e:	1e0c      	subs	r4, r1, #0
 800cea0:	681d      	ldr	r5, [r3, #0]
 800cea2:	b09d      	sub	sp, #116	; 0x74
 800cea4:	da08      	bge.n	800ceb8 <sniprintf+0x20>
 800cea6:	238b      	movs	r3, #139	; 0x8b
 800cea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceac:	602b      	str	r3, [r5, #0]
 800ceae:	b01d      	add	sp, #116	; 0x74
 800ceb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ceb4:	b002      	add	sp, #8
 800ceb6:	4770      	bx	lr
 800ceb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cebc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cec0:	bf0c      	ite	eq
 800cec2:	4623      	moveq	r3, r4
 800cec4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cec8:	9304      	str	r3, [sp, #16]
 800ceca:	9307      	str	r3, [sp, #28]
 800cecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ced0:	9002      	str	r0, [sp, #8]
 800ced2:	9006      	str	r0, [sp, #24]
 800ced4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ced8:	4628      	mov	r0, r5
 800ceda:	ab21      	add	r3, sp, #132	; 0x84
 800cedc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cede:	a902      	add	r1, sp, #8
 800cee0:	9301      	str	r3, [sp, #4]
 800cee2:	f000 f88f 	bl	800d004 <_svfiprintf_r>
 800cee6:	1c43      	adds	r3, r0, #1
 800cee8:	bfbc      	itt	lt
 800ceea:	238b      	movlt	r3, #139	; 0x8b
 800ceec:	602b      	strlt	r3, [r5, #0]
 800ceee:	2c00      	cmp	r4, #0
 800cef0:	d0dd      	beq.n	800ceae <sniprintf+0x16>
 800cef2:	2200      	movs	r2, #0
 800cef4:	9b02      	ldr	r3, [sp, #8]
 800cef6:	701a      	strb	r2, [r3, #0]
 800cef8:	e7d9      	b.n	800ceae <sniprintf+0x16>
 800cefa:	bf00      	nop
 800cefc:	2000018c 	.word	0x2000018c

0800cf00 <strncmp>:
 800cf00:	4603      	mov	r3, r0
 800cf02:	b510      	push	{r4, lr}
 800cf04:	b172      	cbz	r2, 800cf24 <strncmp+0x24>
 800cf06:	3901      	subs	r1, #1
 800cf08:	1884      	adds	r4, r0, r2
 800cf0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cf12:	4290      	cmp	r0, r2
 800cf14:	d101      	bne.n	800cf1a <strncmp+0x1a>
 800cf16:	42a3      	cmp	r3, r4
 800cf18:	d101      	bne.n	800cf1e <strncmp+0x1e>
 800cf1a:	1a80      	subs	r0, r0, r2
 800cf1c:	bd10      	pop	{r4, pc}
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d1f3      	bne.n	800cf0a <strncmp+0xa>
 800cf22:	e7fa      	b.n	800cf1a <strncmp+0x1a>
 800cf24:	4610      	mov	r0, r2
 800cf26:	e7f9      	b.n	800cf1c <strncmp+0x1c>

0800cf28 <strncpy>:
 800cf28:	4603      	mov	r3, r0
 800cf2a:	b510      	push	{r4, lr}
 800cf2c:	3901      	subs	r1, #1
 800cf2e:	b132      	cbz	r2, 800cf3e <strncpy+0x16>
 800cf30:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cf34:	3a01      	subs	r2, #1
 800cf36:	f803 4b01 	strb.w	r4, [r3], #1
 800cf3a:	2c00      	cmp	r4, #0
 800cf3c:	d1f7      	bne.n	800cf2e <strncpy+0x6>
 800cf3e:	2100      	movs	r1, #0
 800cf40:	441a      	add	r2, r3
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d100      	bne.n	800cf48 <strncpy+0x20>
 800cf46:	bd10      	pop	{r4, pc}
 800cf48:	f803 1b01 	strb.w	r1, [r3], #1
 800cf4c:	e7f9      	b.n	800cf42 <strncpy+0x1a>

0800cf4e <__ssputs_r>:
 800cf4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf52:	688e      	ldr	r6, [r1, #8]
 800cf54:	4682      	mov	sl, r0
 800cf56:	429e      	cmp	r6, r3
 800cf58:	460c      	mov	r4, r1
 800cf5a:	4690      	mov	r8, r2
 800cf5c:	461f      	mov	r7, r3
 800cf5e:	d838      	bhi.n	800cfd2 <__ssputs_r+0x84>
 800cf60:	898a      	ldrh	r2, [r1, #12]
 800cf62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf66:	d032      	beq.n	800cfce <__ssputs_r+0x80>
 800cf68:	6825      	ldr	r5, [r4, #0]
 800cf6a:	6909      	ldr	r1, [r1, #16]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	eba5 0901 	sub.w	r9, r5, r1
 800cf72:	6965      	ldr	r5, [r4, #20]
 800cf74:	444b      	add	r3, r9
 800cf76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf7e:	106d      	asrs	r5, r5, #1
 800cf80:	429d      	cmp	r5, r3
 800cf82:	bf38      	it	cc
 800cf84:	461d      	movcc	r5, r3
 800cf86:	0553      	lsls	r3, r2, #21
 800cf88:	d531      	bpl.n	800cfee <__ssputs_r+0xa0>
 800cf8a:	4629      	mov	r1, r5
 800cf8c:	f000 fb60 	bl	800d650 <_malloc_r>
 800cf90:	4606      	mov	r6, r0
 800cf92:	b950      	cbnz	r0, 800cfaa <__ssputs_r+0x5c>
 800cf94:	230c      	movs	r3, #12
 800cf96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf9a:	f8ca 3000 	str.w	r3, [sl]
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfa4:	81a3      	strh	r3, [r4, #12]
 800cfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfaa:	464a      	mov	r2, r9
 800cfac:	6921      	ldr	r1, [r4, #16]
 800cfae:	f7ff ff5d 	bl	800ce6c <memcpy>
 800cfb2:	89a3      	ldrh	r3, [r4, #12]
 800cfb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	6126      	str	r6, [r4, #16]
 800cfc0:	444e      	add	r6, r9
 800cfc2:	6026      	str	r6, [r4, #0]
 800cfc4:	463e      	mov	r6, r7
 800cfc6:	6165      	str	r5, [r4, #20]
 800cfc8:	eba5 0509 	sub.w	r5, r5, r9
 800cfcc:	60a5      	str	r5, [r4, #8]
 800cfce:	42be      	cmp	r6, r7
 800cfd0:	d900      	bls.n	800cfd4 <__ssputs_r+0x86>
 800cfd2:	463e      	mov	r6, r7
 800cfd4:	4632      	mov	r2, r6
 800cfd6:	4641      	mov	r1, r8
 800cfd8:	6820      	ldr	r0, [r4, #0]
 800cfda:	f000 fab7 	bl	800d54c <memmove>
 800cfde:	68a3      	ldr	r3, [r4, #8]
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	1b9b      	subs	r3, r3, r6
 800cfe4:	60a3      	str	r3, [r4, #8]
 800cfe6:	6823      	ldr	r3, [r4, #0]
 800cfe8:	4433      	add	r3, r6
 800cfea:	6023      	str	r3, [r4, #0]
 800cfec:	e7db      	b.n	800cfa6 <__ssputs_r+0x58>
 800cfee:	462a      	mov	r2, r5
 800cff0:	f000 fba2 	bl	800d738 <_realloc_r>
 800cff4:	4606      	mov	r6, r0
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d1e1      	bne.n	800cfbe <__ssputs_r+0x70>
 800cffa:	4650      	mov	r0, sl
 800cffc:	6921      	ldr	r1, [r4, #16]
 800cffe:	f000 fabf 	bl	800d580 <_free_r>
 800d002:	e7c7      	b.n	800cf94 <__ssputs_r+0x46>

0800d004 <_svfiprintf_r>:
 800d004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d008:	4698      	mov	r8, r3
 800d00a:	898b      	ldrh	r3, [r1, #12]
 800d00c:	4607      	mov	r7, r0
 800d00e:	061b      	lsls	r3, r3, #24
 800d010:	460d      	mov	r5, r1
 800d012:	4614      	mov	r4, r2
 800d014:	b09d      	sub	sp, #116	; 0x74
 800d016:	d50e      	bpl.n	800d036 <_svfiprintf_r+0x32>
 800d018:	690b      	ldr	r3, [r1, #16]
 800d01a:	b963      	cbnz	r3, 800d036 <_svfiprintf_r+0x32>
 800d01c:	2140      	movs	r1, #64	; 0x40
 800d01e:	f000 fb17 	bl	800d650 <_malloc_r>
 800d022:	6028      	str	r0, [r5, #0]
 800d024:	6128      	str	r0, [r5, #16]
 800d026:	b920      	cbnz	r0, 800d032 <_svfiprintf_r+0x2e>
 800d028:	230c      	movs	r3, #12
 800d02a:	603b      	str	r3, [r7, #0]
 800d02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d030:	e0d1      	b.n	800d1d6 <_svfiprintf_r+0x1d2>
 800d032:	2340      	movs	r3, #64	; 0x40
 800d034:	616b      	str	r3, [r5, #20]
 800d036:	2300      	movs	r3, #0
 800d038:	9309      	str	r3, [sp, #36]	; 0x24
 800d03a:	2320      	movs	r3, #32
 800d03c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d040:	2330      	movs	r3, #48	; 0x30
 800d042:	f04f 0901 	mov.w	r9, #1
 800d046:	f8cd 800c 	str.w	r8, [sp, #12]
 800d04a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d1f0 <_svfiprintf_r+0x1ec>
 800d04e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d052:	4623      	mov	r3, r4
 800d054:	469a      	mov	sl, r3
 800d056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d05a:	b10a      	cbz	r2, 800d060 <_svfiprintf_r+0x5c>
 800d05c:	2a25      	cmp	r2, #37	; 0x25
 800d05e:	d1f9      	bne.n	800d054 <_svfiprintf_r+0x50>
 800d060:	ebba 0b04 	subs.w	fp, sl, r4
 800d064:	d00b      	beq.n	800d07e <_svfiprintf_r+0x7a>
 800d066:	465b      	mov	r3, fp
 800d068:	4622      	mov	r2, r4
 800d06a:	4629      	mov	r1, r5
 800d06c:	4638      	mov	r0, r7
 800d06e:	f7ff ff6e 	bl	800cf4e <__ssputs_r>
 800d072:	3001      	adds	r0, #1
 800d074:	f000 80aa 	beq.w	800d1cc <_svfiprintf_r+0x1c8>
 800d078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d07a:	445a      	add	r2, fp
 800d07c:	9209      	str	r2, [sp, #36]	; 0x24
 800d07e:	f89a 3000 	ldrb.w	r3, [sl]
 800d082:	2b00      	cmp	r3, #0
 800d084:	f000 80a2 	beq.w	800d1cc <_svfiprintf_r+0x1c8>
 800d088:	2300      	movs	r3, #0
 800d08a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d08e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d092:	f10a 0a01 	add.w	sl, sl, #1
 800d096:	9304      	str	r3, [sp, #16]
 800d098:	9307      	str	r3, [sp, #28]
 800d09a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d09e:	931a      	str	r3, [sp, #104]	; 0x68
 800d0a0:	4654      	mov	r4, sl
 800d0a2:	2205      	movs	r2, #5
 800d0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0a8:	4851      	ldr	r0, [pc, #324]	; (800d1f0 <_svfiprintf_r+0x1ec>)
 800d0aa:	f000 fa41 	bl	800d530 <memchr>
 800d0ae:	9a04      	ldr	r2, [sp, #16]
 800d0b0:	b9d8      	cbnz	r0, 800d0ea <_svfiprintf_r+0xe6>
 800d0b2:	06d0      	lsls	r0, r2, #27
 800d0b4:	bf44      	itt	mi
 800d0b6:	2320      	movmi	r3, #32
 800d0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0bc:	0711      	lsls	r1, r2, #28
 800d0be:	bf44      	itt	mi
 800d0c0:	232b      	movmi	r3, #43	; 0x2b
 800d0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ca:	2b2a      	cmp	r3, #42	; 0x2a
 800d0cc:	d015      	beq.n	800d0fa <_svfiprintf_r+0xf6>
 800d0ce:	4654      	mov	r4, sl
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	f04f 0c0a 	mov.w	ip, #10
 800d0d6:	9a07      	ldr	r2, [sp, #28]
 800d0d8:	4621      	mov	r1, r4
 800d0da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0de:	3b30      	subs	r3, #48	; 0x30
 800d0e0:	2b09      	cmp	r3, #9
 800d0e2:	d94e      	bls.n	800d182 <_svfiprintf_r+0x17e>
 800d0e4:	b1b0      	cbz	r0, 800d114 <_svfiprintf_r+0x110>
 800d0e6:	9207      	str	r2, [sp, #28]
 800d0e8:	e014      	b.n	800d114 <_svfiprintf_r+0x110>
 800d0ea:	eba0 0308 	sub.w	r3, r0, r8
 800d0ee:	fa09 f303 	lsl.w	r3, r9, r3
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	46a2      	mov	sl, r4
 800d0f6:	9304      	str	r3, [sp, #16]
 800d0f8:	e7d2      	b.n	800d0a0 <_svfiprintf_r+0x9c>
 800d0fa:	9b03      	ldr	r3, [sp, #12]
 800d0fc:	1d19      	adds	r1, r3, #4
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	9103      	str	r1, [sp, #12]
 800d102:	2b00      	cmp	r3, #0
 800d104:	bfbb      	ittet	lt
 800d106:	425b      	neglt	r3, r3
 800d108:	f042 0202 	orrlt.w	r2, r2, #2
 800d10c:	9307      	strge	r3, [sp, #28]
 800d10e:	9307      	strlt	r3, [sp, #28]
 800d110:	bfb8      	it	lt
 800d112:	9204      	strlt	r2, [sp, #16]
 800d114:	7823      	ldrb	r3, [r4, #0]
 800d116:	2b2e      	cmp	r3, #46	; 0x2e
 800d118:	d10c      	bne.n	800d134 <_svfiprintf_r+0x130>
 800d11a:	7863      	ldrb	r3, [r4, #1]
 800d11c:	2b2a      	cmp	r3, #42	; 0x2a
 800d11e:	d135      	bne.n	800d18c <_svfiprintf_r+0x188>
 800d120:	9b03      	ldr	r3, [sp, #12]
 800d122:	3402      	adds	r4, #2
 800d124:	1d1a      	adds	r2, r3, #4
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	9203      	str	r2, [sp, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	bfb8      	it	lt
 800d12e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d132:	9305      	str	r3, [sp, #20]
 800d134:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d1f4 <_svfiprintf_r+0x1f0>
 800d138:	2203      	movs	r2, #3
 800d13a:	4650      	mov	r0, sl
 800d13c:	7821      	ldrb	r1, [r4, #0]
 800d13e:	f000 f9f7 	bl	800d530 <memchr>
 800d142:	b140      	cbz	r0, 800d156 <_svfiprintf_r+0x152>
 800d144:	2340      	movs	r3, #64	; 0x40
 800d146:	eba0 000a 	sub.w	r0, r0, sl
 800d14a:	fa03 f000 	lsl.w	r0, r3, r0
 800d14e:	9b04      	ldr	r3, [sp, #16]
 800d150:	3401      	adds	r4, #1
 800d152:	4303      	orrs	r3, r0
 800d154:	9304      	str	r3, [sp, #16]
 800d156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d15a:	2206      	movs	r2, #6
 800d15c:	4826      	ldr	r0, [pc, #152]	; (800d1f8 <_svfiprintf_r+0x1f4>)
 800d15e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d162:	f000 f9e5 	bl	800d530 <memchr>
 800d166:	2800      	cmp	r0, #0
 800d168:	d038      	beq.n	800d1dc <_svfiprintf_r+0x1d8>
 800d16a:	4b24      	ldr	r3, [pc, #144]	; (800d1fc <_svfiprintf_r+0x1f8>)
 800d16c:	bb1b      	cbnz	r3, 800d1b6 <_svfiprintf_r+0x1b2>
 800d16e:	9b03      	ldr	r3, [sp, #12]
 800d170:	3307      	adds	r3, #7
 800d172:	f023 0307 	bic.w	r3, r3, #7
 800d176:	3308      	adds	r3, #8
 800d178:	9303      	str	r3, [sp, #12]
 800d17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d17c:	4433      	add	r3, r6
 800d17e:	9309      	str	r3, [sp, #36]	; 0x24
 800d180:	e767      	b.n	800d052 <_svfiprintf_r+0x4e>
 800d182:	460c      	mov	r4, r1
 800d184:	2001      	movs	r0, #1
 800d186:	fb0c 3202 	mla	r2, ip, r2, r3
 800d18a:	e7a5      	b.n	800d0d8 <_svfiprintf_r+0xd4>
 800d18c:	2300      	movs	r3, #0
 800d18e:	f04f 0c0a 	mov.w	ip, #10
 800d192:	4619      	mov	r1, r3
 800d194:	3401      	adds	r4, #1
 800d196:	9305      	str	r3, [sp, #20]
 800d198:	4620      	mov	r0, r4
 800d19a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d19e:	3a30      	subs	r2, #48	; 0x30
 800d1a0:	2a09      	cmp	r2, #9
 800d1a2:	d903      	bls.n	800d1ac <_svfiprintf_r+0x1a8>
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d0c5      	beq.n	800d134 <_svfiprintf_r+0x130>
 800d1a8:	9105      	str	r1, [sp, #20]
 800d1aa:	e7c3      	b.n	800d134 <_svfiprintf_r+0x130>
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1b4:	e7f0      	b.n	800d198 <_svfiprintf_r+0x194>
 800d1b6:	ab03      	add	r3, sp, #12
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	462a      	mov	r2, r5
 800d1bc:	4638      	mov	r0, r7
 800d1be:	4b10      	ldr	r3, [pc, #64]	; (800d200 <_svfiprintf_r+0x1fc>)
 800d1c0:	a904      	add	r1, sp, #16
 800d1c2:	f3af 8000 	nop.w
 800d1c6:	1c42      	adds	r2, r0, #1
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	d1d6      	bne.n	800d17a <_svfiprintf_r+0x176>
 800d1cc:	89ab      	ldrh	r3, [r5, #12]
 800d1ce:	065b      	lsls	r3, r3, #25
 800d1d0:	f53f af2c 	bmi.w	800d02c <_svfiprintf_r+0x28>
 800d1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1d6:	b01d      	add	sp, #116	; 0x74
 800d1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1dc:	ab03      	add	r3, sp, #12
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	462a      	mov	r2, r5
 800d1e2:	4638      	mov	r0, r7
 800d1e4:	4b06      	ldr	r3, [pc, #24]	; (800d200 <_svfiprintf_r+0x1fc>)
 800d1e6:	a904      	add	r1, sp, #16
 800d1e8:	f000 f87c 	bl	800d2e4 <_printf_i>
 800d1ec:	e7eb      	b.n	800d1c6 <_svfiprintf_r+0x1c2>
 800d1ee:	bf00      	nop
 800d1f0:	0800e723 	.word	0x0800e723
 800d1f4:	0800e729 	.word	0x0800e729
 800d1f8:	0800e72d 	.word	0x0800e72d
 800d1fc:	00000000 	.word	0x00000000
 800d200:	0800cf4f 	.word	0x0800cf4f

0800d204 <_printf_common>:
 800d204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d208:	4616      	mov	r6, r2
 800d20a:	4699      	mov	r9, r3
 800d20c:	688a      	ldr	r2, [r1, #8]
 800d20e:	690b      	ldr	r3, [r1, #16]
 800d210:	4607      	mov	r7, r0
 800d212:	4293      	cmp	r3, r2
 800d214:	bfb8      	it	lt
 800d216:	4613      	movlt	r3, r2
 800d218:	6033      	str	r3, [r6, #0]
 800d21a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d21e:	460c      	mov	r4, r1
 800d220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d224:	b10a      	cbz	r2, 800d22a <_printf_common+0x26>
 800d226:	3301      	adds	r3, #1
 800d228:	6033      	str	r3, [r6, #0]
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	0699      	lsls	r1, r3, #26
 800d22e:	bf42      	ittt	mi
 800d230:	6833      	ldrmi	r3, [r6, #0]
 800d232:	3302      	addmi	r3, #2
 800d234:	6033      	strmi	r3, [r6, #0]
 800d236:	6825      	ldr	r5, [r4, #0]
 800d238:	f015 0506 	ands.w	r5, r5, #6
 800d23c:	d106      	bne.n	800d24c <_printf_common+0x48>
 800d23e:	f104 0a19 	add.w	sl, r4, #25
 800d242:	68e3      	ldr	r3, [r4, #12]
 800d244:	6832      	ldr	r2, [r6, #0]
 800d246:	1a9b      	subs	r3, r3, r2
 800d248:	42ab      	cmp	r3, r5
 800d24a:	dc28      	bgt.n	800d29e <_printf_common+0x9a>
 800d24c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d250:	1e13      	subs	r3, r2, #0
 800d252:	6822      	ldr	r2, [r4, #0]
 800d254:	bf18      	it	ne
 800d256:	2301      	movne	r3, #1
 800d258:	0692      	lsls	r2, r2, #26
 800d25a:	d42d      	bmi.n	800d2b8 <_printf_common+0xb4>
 800d25c:	4649      	mov	r1, r9
 800d25e:	4638      	mov	r0, r7
 800d260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d264:	47c0      	blx	r8
 800d266:	3001      	adds	r0, #1
 800d268:	d020      	beq.n	800d2ac <_printf_common+0xa8>
 800d26a:	6823      	ldr	r3, [r4, #0]
 800d26c:	68e5      	ldr	r5, [r4, #12]
 800d26e:	f003 0306 	and.w	r3, r3, #6
 800d272:	2b04      	cmp	r3, #4
 800d274:	bf18      	it	ne
 800d276:	2500      	movne	r5, #0
 800d278:	6832      	ldr	r2, [r6, #0]
 800d27a:	f04f 0600 	mov.w	r6, #0
 800d27e:	68a3      	ldr	r3, [r4, #8]
 800d280:	bf08      	it	eq
 800d282:	1aad      	subeq	r5, r5, r2
 800d284:	6922      	ldr	r2, [r4, #16]
 800d286:	bf08      	it	eq
 800d288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d28c:	4293      	cmp	r3, r2
 800d28e:	bfc4      	itt	gt
 800d290:	1a9b      	subgt	r3, r3, r2
 800d292:	18ed      	addgt	r5, r5, r3
 800d294:	341a      	adds	r4, #26
 800d296:	42b5      	cmp	r5, r6
 800d298:	d11a      	bne.n	800d2d0 <_printf_common+0xcc>
 800d29a:	2000      	movs	r0, #0
 800d29c:	e008      	b.n	800d2b0 <_printf_common+0xac>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	4652      	mov	r2, sl
 800d2a2:	4649      	mov	r1, r9
 800d2a4:	4638      	mov	r0, r7
 800d2a6:	47c0      	blx	r8
 800d2a8:	3001      	adds	r0, #1
 800d2aa:	d103      	bne.n	800d2b4 <_printf_common+0xb0>
 800d2ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b4:	3501      	adds	r5, #1
 800d2b6:	e7c4      	b.n	800d242 <_printf_common+0x3e>
 800d2b8:	2030      	movs	r0, #48	; 0x30
 800d2ba:	18e1      	adds	r1, r4, r3
 800d2bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2c6:	4422      	add	r2, r4
 800d2c8:	3302      	adds	r3, #2
 800d2ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2ce:	e7c5      	b.n	800d25c <_printf_common+0x58>
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	4622      	mov	r2, r4
 800d2d4:	4649      	mov	r1, r9
 800d2d6:	4638      	mov	r0, r7
 800d2d8:	47c0      	blx	r8
 800d2da:	3001      	adds	r0, #1
 800d2dc:	d0e6      	beq.n	800d2ac <_printf_common+0xa8>
 800d2de:	3601      	adds	r6, #1
 800d2e0:	e7d9      	b.n	800d296 <_printf_common+0x92>
	...

0800d2e4 <_printf_i>:
 800d2e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2e8:	7e0f      	ldrb	r7, [r1, #24]
 800d2ea:	4691      	mov	r9, r2
 800d2ec:	2f78      	cmp	r7, #120	; 0x78
 800d2ee:	4680      	mov	r8, r0
 800d2f0:	460c      	mov	r4, r1
 800d2f2:	469a      	mov	sl, r3
 800d2f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2fa:	d807      	bhi.n	800d30c <_printf_i+0x28>
 800d2fc:	2f62      	cmp	r7, #98	; 0x62
 800d2fe:	d80a      	bhi.n	800d316 <_printf_i+0x32>
 800d300:	2f00      	cmp	r7, #0
 800d302:	f000 80d9 	beq.w	800d4b8 <_printf_i+0x1d4>
 800d306:	2f58      	cmp	r7, #88	; 0x58
 800d308:	f000 80a4 	beq.w	800d454 <_printf_i+0x170>
 800d30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d314:	e03a      	b.n	800d38c <_printf_i+0xa8>
 800d316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d31a:	2b15      	cmp	r3, #21
 800d31c:	d8f6      	bhi.n	800d30c <_printf_i+0x28>
 800d31e:	a101      	add	r1, pc, #4	; (adr r1, 800d324 <_printf_i+0x40>)
 800d320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d324:	0800d37d 	.word	0x0800d37d
 800d328:	0800d391 	.word	0x0800d391
 800d32c:	0800d30d 	.word	0x0800d30d
 800d330:	0800d30d 	.word	0x0800d30d
 800d334:	0800d30d 	.word	0x0800d30d
 800d338:	0800d30d 	.word	0x0800d30d
 800d33c:	0800d391 	.word	0x0800d391
 800d340:	0800d30d 	.word	0x0800d30d
 800d344:	0800d30d 	.word	0x0800d30d
 800d348:	0800d30d 	.word	0x0800d30d
 800d34c:	0800d30d 	.word	0x0800d30d
 800d350:	0800d49f 	.word	0x0800d49f
 800d354:	0800d3c1 	.word	0x0800d3c1
 800d358:	0800d481 	.word	0x0800d481
 800d35c:	0800d30d 	.word	0x0800d30d
 800d360:	0800d30d 	.word	0x0800d30d
 800d364:	0800d4c1 	.word	0x0800d4c1
 800d368:	0800d30d 	.word	0x0800d30d
 800d36c:	0800d3c1 	.word	0x0800d3c1
 800d370:	0800d30d 	.word	0x0800d30d
 800d374:	0800d30d 	.word	0x0800d30d
 800d378:	0800d489 	.word	0x0800d489
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	1d1a      	adds	r2, r3, #4
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	602a      	str	r2, [r5, #0]
 800d384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d38c:	2301      	movs	r3, #1
 800d38e:	e0a4      	b.n	800d4da <_printf_i+0x1f6>
 800d390:	6820      	ldr	r0, [r4, #0]
 800d392:	6829      	ldr	r1, [r5, #0]
 800d394:	0606      	lsls	r6, r0, #24
 800d396:	f101 0304 	add.w	r3, r1, #4
 800d39a:	d50a      	bpl.n	800d3b2 <_printf_i+0xce>
 800d39c:	680e      	ldr	r6, [r1, #0]
 800d39e:	602b      	str	r3, [r5, #0]
 800d3a0:	2e00      	cmp	r6, #0
 800d3a2:	da03      	bge.n	800d3ac <_printf_i+0xc8>
 800d3a4:	232d      	movs	r3, #45	; 0x2d
 800d3a6:	4276      	negs	r6, r6
 800d3a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3ac:	230a      	movs	r3, #10
 800d3ae:	485e      	ldr	r0, [pc, #376]	; (800d528 <_printf_i+0x244>)
 800d3b0:	e019      	b.n	800d3e6 <_printf_i+0x102>
 800d3b2:	680e      	ldr	r6, [r1, #0]
 800d3b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3b8:	602b      	str	r3, [r5, #0]
 800d3ba:	bf18      	it	ne
 800d3bc:	b236      	sxthne	r6, r6
 800d3be:	e7ef      	b.n	800d3a0 <_printf_i+0xbc>
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	6820      	ldr	r0, [r4, #0]
 800d3c4:	1d19      	adds	r1, r3, #4
 800d3c6:	6029      	str	r1, [r5, #0]
 800d3c8:	0601      	lsls	r1, r0, #24
 800d3ca:	d501      	bpl.n	800d3d0 <_printf_i+0xec>
 800d3cc:	681e      	ldr	r6, [r3, #0]
 800d3ce:	e002      	b.n	800d3d6 <_printf_i+0xf2>
 800d3d0:	0646      	lsls	r6, r0, #25
 800d3d2:	d5fb      	bpl.n	800d3cc <_printf_i+0xe8>
 800d3d4:	881e      	ldrh	r6, [r3, #0]
 800d3d6:	2f6f      	cmp	r7, #111	; 0x6f
 800d3d8:	bf0c      	ite	eq
 800d3da:	2308      	moveq	r3, #8
 800d3dc:	230a      	movne	r3, #10
 800d3de:	4852      	ldr	r0, [pc, #328]	; (800d528 <_printf_i+0x244>)
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3e6:	6865      	ldr	r5, [r4, #4]
 800d3e8:	2d00      	cmp	r5, #0
 800d3ea:	bfa8      	it	ge
 800d3ec:	6821      	ldrge	r1, [r4, #0]
 800d3ee:	60a5      	str	r5, [r4, #8]
 800d3f0:	bfa4      	itt	ge
 800d3f2:	f021 0104 	bicge.w	r1, r1, #4
 800d3f6:	6021      	strge	r1, [r4, #0]
 800d3f8:	b90e      	cbnz	r6, 800d3fe <_printf_i+0x11a>
 800d3fa:	2d00      	cmp	r5, #0
 800d3fc:	d04d      	beq.n	800d49a <_printf_i+0x1b6>
 800d3fe:	4615      	mov	r5, r2
 800d400:	fbb6 f1f3 	udiv	r1, r6, r3
 800d404:	fb03 6711 	mls	r7, r3, r1, r6
 800d408:	5dc7      	ldrb	r7, [r0, r7]
 800d40a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d40e:	4637      	mov	r7, r6
 800d410:	42bb      	cmp	r3, r7
 800d412:	460e      	mov	r6, r1
 800d414:	d9f4      	bls.n	800d400 <_printf_i+0x11c>
 800d416:	2b08      	cmp	r3, #8
 800d418:	d10b      	bne.n	800d432 <_printf_i+0x14e>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	07de      	lsls	r6, r3, #31
 800d41e:	d508      	bpl.n	800d432 <_printf_i+0x14e>
 800d420:	6923      	ldr	r3, [r4, #16]
 800d422:	6861      	ldr	r1, [r4, #4]
 800d424:	4299      	cmp	r1, r3
 800d426:	bfde      	ittt	le
 800d428:	2330      	movle	r3, #48	; 0x30
 800d42a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d42e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d432:	1b52      	subs	r2, r2, r5
 800d434:	6122      	str	r2, [r4, #16]
 800d436:	464b      	mov	r3, r9
 800d438:	4621      	mov	r1, r4
 800d43a:	4640      	mov	r0, r8
 800d43c:	f8cd a000 	str.w	sl, [sp]
 800d440:	aa03      	add	r2, sp, #12
 800d442:	f7ff fedf 	bl	800d204 <_printf_common>
 800d446:	3001      	adds	r0, #1
 800d448:	d14c      	bne.n	800d4e4 <_printf_i+0x200>
 800d44a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d44e:	b004      	add	sp, #16
 800d450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d454:	4834      	ldr	r0, [pc, #208]	; (800d528 <_printf_i+0x244>)
 800d456:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d45a:	6829      	ldr	r1, [r5, #0]
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	f851 6b04 	ldr.w	r6, [r1], #4
 800d462:	6029      	str	r1, [r5, #0]
 800d464:	061d      	lsls	r5, r3, #24
 800d466:	d514      	bpl.n	800d492 <_printf_i+0x1ae>
 800d468:	07df      	lsls	r7, r3, #31
 800d46a:	bf44      	itt	mi
 800d46c:	f043 0320 	orrmi.w	r3, r3, #32
 800d470:	6023      	strmi	r3, [r4, #0]
 800d472:	b91e      	cbnz	r6, 800d47c <_printf_i+0x198>
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	f023 0320 	bic.w	r3, r3, #32
 800d47a:	6023      	str	r3, [r4, #0]
 800d47c:	2310      	movs	r3, #16
 800d47e:	e7af      	b.n	800d3e0 <_printf_i+0xfc>
 800d480:	6823      	ldr	r3, [r4, #0]
 800d482:	f043 0320 	orr.w	r3, r3, #32
 800d486:	6023      	str	r3, [r4, #0]
 800d488:	2378      	movs	r3, #120	; 0x78
 800d48a:	4828      	ldr	r0, [pc, #160]	; (800d52c <_printf_i+0x248>)
 800d48c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d490:	e7e3      	b.n	800d45a <_printf_i+0x176>
 800d492:	0659      	lsls	r1, r3, #25
 800d494:	bf48      	it	mi
 800d496:	b2b6      	uxthmi	r6, r6
 800d498:	e7e6      	b.n	800d468 <_printf_i+0x184>
 800d49a:	4615      	mov	r5, r2
 800d49c:	e7bb      	b.n	800d416 <_printf_i+0x132>
 800d49e:	682b      	ldr	r3, [r5, #0]
 800d4a0:	6826      	ldr	r6, [r4, #0]
 800d4a2:	1d18      	adds	r0, r3, #4
 800d4a4:	6961      	ldr	r1, [r4, #20]
 800d4a6:	6028      	str	r0, [r5, #0]
 800d4a8:	0635      	lsls	r5, r6, #24
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	d501      	bpl.n	800d4b2 <_printf_i+0x1ce>
 800d4ae:	6019      	str	r1, [r3, #0]
 800d4b0:	e002      	b.n	800d4b8 <_printf_i+0x1d4>
 800d4b2:	0670      	lsls	r0, r6, #25
 800d4b4:	d5fb      	bpl.n	800d4ae <_printf_i+0x1ca>
 800d4b6:	8019      	strh	r1, [r3, #0]
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	4615      	mov	r5, r2
 800d4bc:	6123      	str	r3, [r4, #16]
 800d4be:	e7ba      	b.n	800d436 <_printf_i+0x152>
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	1d1a      	adds	r2, r3, #4
 800d4c6:	602a      	str	r2, [r5, #0]
 800d4c8:	681d      	ldr	r5, [r3, #0]
 800d4ca:	6862      	ldr	r2, [r4, #4]
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	f000 f82f 	bl	800d530 <memchr>
 800d4d2:	b108      	cbz	r0, 800d4d8 <_printf_i+0x1f4>
 800d4d4:	1b40      	subs	r0, r0, r5
 800d4d6:	6060      	str	r0, [r4, #4]
 800d4d8:	6863      	ldr	r3, [r4, #4]
 800d4da:	6123      	str	r3, [r4, #16]
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4e2:	e7a8      	b.n	800d436 <_printf_i+0x152>
 800d4e4:	462a      	mov	r2, r5
 800d4e6:	4649      	mov	r1, r9
 800d4e8:	4640      	mov	r0, r8
 800d4ea:	6923      	ldr	r3, [r4, #16]
 800d4ec:	47d0      	blx	sl
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	d0ab      	beq.n	800d44a <_printf_i+0x166>
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	079b      	lsls	r3, r3, #30
 800d4f6:	d413      	bmi.n	800d520 <_printf_i+0x23c>
 800d4f8:	68e0      	ldr	r0, [r4, #12]
 800d4fa:	9b03      	ldr	r3, [sp, #12]
 800d4fc:	4298      	cmp	r0, r3
 800d4fe:	bfb8      	it	lt
 800d500:	4618      	movlt	r0, r3
 800d502:	e7a4      	b.n	800d44e <_printf_i+0x16a>
 800d504:	2301      	movs	r3, #1
 800d506:	4632      	mov	r2, r6
 800d508:	4649      	mov	r1, r9
 800d50a:	4640      	mov	r0, r8
 800d50c:	47d0      	blx	sl
 800d50e:	3001      	adds	r0, #1
 800d510:	d09b      	beq.n	800d44a <_printf_i+0x166>
 800d512:	3501      	adds	r5, #1
 800d514:	68e3      	ldr	r3, [r4, #12]
 800d516:	9903      	ldr	r1, [sp, #12]
 800d518:	1a5b      	subs	r3, r3, r1
 800d51a:	42ab      	cmp	r3, r5
 800d51c:	dcf2      	bgt.n	800d504 <_printf_i+0x220>
 800d51e:	e7eb      	b.n	800d4f8 <_printf_i+0x214>
 800d520:	2500      	movs	r5, #0
 800d522:	f104 0619 	add.w	r6, r4, #25
 800d526:	e7f5      	b.n	800d514 <_printf_i+0x230>
 800d528:	0800e734 	.word	0x0800e734
 800d52c:	0800e745 	.word	0x0800e745

0800d530 <memchr>:
 800d530:	4603      	mov	r3, r0
 800d532:	b510      	push	{r4, lr}
 800d534:	b2c9      	uxtb	r1, r1
 800d536:	4402      	add	r2, r0
 800d538:	4293      	cmp	r3, r2
 800d53a:	4618      	mov	r0, r3
 800d53c:	d101      	bne.n	800d542 <memchr+0x12>
 800d53e:	2000      	movs	r0, #0
 800d540:	e003      	b.n	800d54a <memchr+0x1a>
 800d542:	7804      	ldrb	r4, [r0, #0]
 800d544:	3301      	adds	r3, #1
 800d546:	428c      	cmp	r4, r1
 800d548:	d1f6      	bne.n	800d538 <memchr+0x8>
 800d54a:	bd10      	pop	{r4, pc}

0800d54c <memmove>:
 800d54c:	4288      	cmp	r0, r1
 800d54e:	b510      	push	{r4, lr}
 800d550:	eb01 0402 	add.w	r4, r1, r2
 800d554:	d902      	bls.n	800d55c <memmove+0x10>
 800d556:	4284      	cmp	r4, r0
 800d558:	4623      	mov	r3, r4
 800d55a:	d807      	bhi.n	800d56c <memmove+0x20>
 800d55c:	1e43      	subs	r3, r0, #1
 800d55e:	42a1      	cmp	r1, r4
 800d560:	d008      	beq.n	800d574 <memmove+0x28>
 800d562:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d56a:	e7f8      	b.n	800d55e <memmove+0x12>
 800d56c:	4601      	mov	r1, r0
 800d56e:	4402      	add	r2, r0
 800d570:	428a      	cmp	r2, r1
 800d572:	d100      	bne.n	800d576 <memmove+0x2a>
 800d574:	bd10      	pop	{r4, pc}
 800d576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d57e:	e7f7      	b.n	800d570 <memmove+0x24>

0800d580 <_free_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4605      	mov	r5, r0
 800d584:	2900      	cmp	r1, #0
 800d586:	d040      	beq.n	800d60a <_free_r+0x8a>
 800d588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d58c:	1f0c      	subs	r4, r1, #4
 800d58e:	2b00      	cmp	r3, #0
 800d590:	bfb8      	it	lt
 800d592:	18e4      	addlt	r4, r4, r3
 800d594:	f000 f910 	bl	800d7b8 <__malloc_lock>
 800d598:	4a1c      	ldr	r2, [pc, #112]	; (800d60c <_free_r+0x8c>)
 800d59a:	6813      	ldr	r3, [r2, #0]
 800d59c:	b933      	cbnz	r3, 800d5ac <_free_r+0x2c>
 800d59e:	6063      	str	r3, [r4, #4]
 800d5a0:	6014      	str	r4, [r2, #0]
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5a8:	f000 b90c 	b.w	800d7c4 <__malloc_unlock>
 800d5ac:	42a3      	cmp	r3, r4
 800d5ae:	d908      	bls.n	800d5c2 <_free_r+0x42>
 800d5b0:	6820      	ldr	r0, [r4, #0]
 800d5b2:	1821      	adds	r1, r4, r0
 800d5b4:	428b      	cmp	r3, r1
 800d5b6:	bf01      	itttt	eq
 800d5b8:	6819      	ldreq	r1, [r3, #0]
 800d5ba:	685b      	ldreq	r3, [r3, #4]
 800d5bc:	1809      	addeq	r1, r1, r0
 800d5be:	6021      	streq	r1, [r4, #0]
 800d5c0:	e7ed      	b.n	800d59e <_free_r+0x1e>
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	b10b      	cbz	r3, 800d5cc <_free_r+0x4c>
 800d5c8:	42a3      	cmp	r3, r4
 800d5ca:	d9fa      	bls.n	800d5c2 <_free_r+0x42>
 800d5cc:	6811      	ldr	r1, [r2, #0]
 800d5ce:	1850      	adds	r0, r2, r1
 800d5d0:	42a0      	cmp	r0, r4
 800d5d2:	d10b      	bne.n	800d5ec <_free_r+0x6c>
 800d5d4:	6820      	ldr	r0, [r4, #0]
 800d5d6:	4401      	add	r1, r0
 800d5d8:	1850      	adds	r0, r2, r1
 800d5da:	4283      	cmp	r3, r0
 800d5dc:	6011      	str	r1, [r2, #0]
 800d5de:	d1e0      	bne.n	800d5a2 <_free_r+0x22>
 800d5e0:	6818      	ldr	r0, [r3, #0]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	4401      	add	r1, r0
 800d5e6:	6011      	str	r1, [r2, #0]
 800d5e8:	6053      	str	r3, [r2, #4]
 800d5ea:	e7da      	b.n	800d5a2 <_free_r+0x22>
 800d5ec:	d902      	bls.n	800d5f4 <_free_r+0x74>
 800d5ee:	230c      	movs	r3, #12
 800d5f0:	602b      	str	r3, [r5, #0]
 800d5f2:	e7d6      	b.n	800d5a2 <_free_r+0x22>
 800d5f4:	6820      	ldr	r0, [r4, #0]
 800d5f6:	1821      	adds	r1, r4, r0
 800d5f8:	428b      	cmp	r3, r1
 800d5fa:	bf01      	itttt	eq
 800d5fc:	6819      	ldreq	r1, [r3, #0]
 800d5fe:	685b      	ldreq	r3, [r3, #4]
 800d600:	1809      	addeq	r1, r1, r0
 800d602:	6021      	streq	r1, [r4, #0]
 800d604:	6063      	str	r3, [r4, #4]
 800d606:	6054      	str	r4, [r2, #4]
 800d608:	e7cb      	b.n	800d5a2 <_free_r+0x22>
 800d60a:	bd38      	pop	{r3, r4, r5, pc}
 800d60c:	20001ce4 	.word	0x20001ce4

0800d610 <sbrk_aligned>:
 800d610:	b570      	push	{r4, r5, r6, lr}
 800d612:	4e0e      	ldr	r6, [pc, #56]	; (800d64c <sbrk_aligned+0x3c>)
 800d614:	460c      	mov	r4, r1
 800d616:	6831      	ldr	r1, [r6, #0]
 800d618:	4605      	mov	r5, r0
 800d61a:	b911      	cbnz	r1, 800d622 <sbrk_aligned+0x12>
 800d61c:	f000 f8bc 	bl	800d798 <_sbrk_r>
 800d620:	6030      	str	r0, [r6, #0]
 800d622:	4621      	mov	r1, r4
 800d624:	4628      	mov	r0, r5
 800d626:	f000 f8b7 	bl	800d798 <_sbrk_r>
 800d62a:	1c43      	adds	r3, r0, #1
 800d62c:	d00a      	beq.n	800d644 <sbrk_aligned+0x34>
 800d62e:	1cc4      	adds	r4, r0, #3
 800d630:	f024 0403 	bic.w	r4, r4, #3
 800d634:	42a0      	cmp	r0, r4
 800d636:	d007      	beq.n	800d648 <sbrk_aligned+0x38>
 800d638:	1a21      	subs	r1, r4, r0
 800d63a:	4628      	mov	r0, r5
 800d63c:	f000 f8ac 	bl	800d798 <_sbrk_r>
 800d640:	3001      	adds	r0, #1
 800d642:	d101      	bne.n	800d648 <sbrk_aligned+0x38>
 800d644:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d648:	4620      	mov	r0, r4
 800d64a:	bd70      	pop	{r4, r5, r6, pc}
 800d64c:	20001ce8 	.word	0x20001ce8

0800d650 <_malloc_r>:
 800d650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d654:	1ccd      	adds	r5, r1, #3
 800d656:	f025 0503 	bic.w	r5, r5, #3
 800d65a:	3508      	adds	r5, #8
 800d65c:	2d0c      	cmp	r5, #12
 800d65e:	bf38      	it	cc
 800d660:	250c      	movcc	r5, #12
 800d662:	2d00      	cmp	r5, #0
 800d664:	4607      	mov	r7, r0
 800d666:	db01      	blt.n	800d66c <_malloc_r+0x1c>
 800d668:	42a9      	cmp	r1, r5
 800d66a:	d905      	bls.n	800d678 <_malloc_r+0x28>
 800d66c:	230c      	movs	r3, #12
 800d66e:	2600      	movs	r6, #0
 800d670:	603b      	str	r3, [r7, #0]
 800d672:	4630      	mov	r0, r6
 800d674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d678:	4e2e      	ldr	r6, [pc, #184]	; (800d734 <_malloc_r+0xe4>)
 800d67a:	f000 f89d 	bl	800d7b8 <__malloc_lock>
 800d67e:	6833      	ldr	r3, [r6, #0]
 800d680:	461c      	mov	r4, r3
 800d682:	bb34      	cbnz	r4, 800d6d2 <_malloc_r+0x82>
 800d684:	4629      	mov	r1, r5
 800d686:	4638      	mov	r0, r7
 800d688:	f7ff ffc2 	bl	800d610 <sbrk_aligned>
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	4604      	mov	r4, r0
 800d690:	d14d      	bne.n	800d72e <_malloc_r+0xde>
 800d692:	6834      	ldr	r4, [r6, #0]
 800d694:	4626      	mov	r6, r4
 800d696:	2e00      	cmp	r6, #0
 800d698:	d140      	bne.n	800d71c <_malloc_r+0xcc>
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	4631      	mov	r1, r6
 800d69e:	4638      	mov	r0, r7
 800d6a0:	eb04 0803 	add.w	r8, r4, r3
 800d6a4:	f000 f878 	bl	800d798 <_sbrk_r>
 800d6a8:	4580      	cmp	r8, r0
 800d6aa:	d13a      	bne.n	800d722 <_malloc_r+0xd2>
 800d6ac:	6821      	ldr	r1, [r4, #0]
 800d6ae:	3503      	adds	r5, #3
 800d6b0:	1a6d      	subs	r5, r5, r1
 800d6b2:	f025 0503 	bic.w	r5, r5, #3
 800d6b6:	3508      	adds	r5, #8
 800d6b8:	2d0c      	cmp	r5, #12
 800d6ba:	bf38      	it	cc
 800d6bc:	250c      	movcc	r5, #12
 800d6be:	4638      	mov	r0, r7
 800d6c0:	4629      	mov	r1, r5
 800d6c2:	f7ff ffa5 	bl	800d610 <sbrk_aligned>
 800d6c6:	3001      	adds	r0, #1
 800d6c8:	d02b      	beq.n	800d722 <_malloc_r+0xd2>
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	442b      	add	r3, r5
 800d6ce:	6023      	str	r3, [r4, #0]
 800d6d0:	e00e      	b.n	800d6f0 <_malloc_r+0xa0>
 800d6d2:	6822      	ldr	r2, [r4, #0]
 800d6d4:	1b52      	subs	r2, r2, r5
 800d6d6:	d41e      	bmi.n	800d716 <_malloc_r+0xc6>
 800d6d8:	2a0b      	cmp	r2, #11
 800d6da:	d916      	bls.n	800d70a <_malloc_r+0xba>
 800d6dc:	1961      	adds	r1, r4, r5
 800d6de:	42a3      	cmp	r3, r4
 800d6e0:	6025      	str	r5, [r4, #0]
 800d6e2:	bf18      	it	ne
 800d6e4:	6059      	strne	r1, [r3, #4]
 800d6e6:	6863      	ldr	r3, [r4, #4]
 800d6e8:	bf08      	it	eq
 800d6ea:	6031      	streq	r1, [r6, #0]
 800d6ec:	5162      	str	r2, [r4, r5]
 800d6ee:	604b      	str	r3, [r1, #4]
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	f104 060b 	add.w	r6, r4, #11
 800d6f6:	f000 f865 	bl	800d7c4 <__malloc_unlock>
 800d6fa:	f026 0607 	bic.w	r6, r6, #7
 800d6fe:	1d23      	adds	r3, r4, #4
 800d700:	1af2      	subs	r2, r6, r3
 800d702:	d0b6      	beq.n	800d672 <_malloc_r+0x22>
 800d704:	1b9b      	subs	r3, r3, r6
 800d706:	50a3      	str	r3, [r4, r2]
 800d708:	e7b3      	b.n	800d672 <_malloc_r+0x22>
 800d70a:	6862      	ldr	r2, [r4, #4]
 800d70c:	42a3      	cmp	r3, r4
 800d70e:	bf0c      	ite	eq
 800d710:	6032      	streq	r2, [r6, #0]
 800d712:	605a      	strne	r2, [r3, #4]
 800d714:	e7ec      	b.n	800d6f0 <_malloc_r+0xa0>
 800d716:	4623      	mov	r3, r4
 800d718:	6864      	ldr	r4, [r4, #4]
 800d71a:	e7b2      	b.n	800d682 <_malloc_r+0x32>
 800d71c:	4634      	mov	r4, r6
 800d71e:	6876      	ldr	r6, [r6, #4]
 800d720:	e7b9      	b.n	800d696 <_malloc_r+0x46>
 800d722:	230c      	movs	r3, #12
 800d724:	4638      	mov	r0, r7
 800d726:	603b      	str	r3, [r7, #0]
 800d728:	f000 f84c 	bl	800d7c4 <__malloc_unlock>
 800d72c:	e7a1      	b.n	800d672 <_malloc_r+0x22>
 800d72e:	6025      	str	r5, [r4, #0]
 800d730:	e7de      	b.n	800d6f0 <_malloc_r+0xa0>
 800d732:	bf00      	nop
 800d734:	20001ce4 	.word	0x20001ce4

0800d738 <_realloc_r>:
 800d738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d73c:	4680      	mov	r8, r0
 800d73e:	4614      	mov	r4, r2
 800d740:	460e      	mov	r6, r1
 800d742:	b921      	cbnz	r1, 800d74e <_realloc_r+0x16>
 800d744:	4611      	mov	r1, r2
 800d746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d74a:	f7ff bf81 	b.w	800d650 <_malloc_r>
 800d74e:	b92a      	cbnz	r2, 800d75c <_realloc_r+0x24>
 800d750:	f7ff ff16 	bl	800d580 <_free_r>
 800d754:	4625      	mov	r5, r4
 800d756:	4628      	mov	r0, r5
 800d758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d75c:	f000 f838 	bl	800d7d0 <_malloc_usable_size_r>
 800d760:	4284      	cmp	r4, r0
 800d762:	4607      	mov	r7, r0
 800d764:	d802      	bhi.n	800d76c <_realloc_r+0x34>
 800d766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d76a:	d812      	bhi.n	800d792 <_realloc_r+0x5a>
 800d76c:	4621      	mov	r1, r4
 800d76e:	4640      	mov	r0, r8
 800d770:	f7ff ff6e 	bl	800d650 <_malloc_r>
 800d774:	4605      	mov	r5, r0
 800d776:	2800      	cmp	r0, #0
 800d778:	d0ed      	beq.n	800d756 <_realloc_r+0x1e>
 800d77a:	42bc      	cmp	r4, r7
 800d77c:	4622      	mov	r2, r4
 800d77e:	4631      	mov	r1, r6
 800d780:	bf28      	it	cs
 800d782:	463a      	movcs	r2, r7
 800d784:	f7ff fb72 	bl	800ce6c <memcpy>
 800d788:	4631      	mov	r1, r6
 800d78a:	4640      	mov	r0, r8
 800d78c:	f7ff fef8 	bl	800d580 <_free_r>
 800d790:	e7e1      	b.n	800d756 <_realloc_r+0x1e>
 800d792:	4635      	mov	r5, r6
 800d794:	e7df      	b.n	800d756 <_realloc_r+0x1e>
	...

0800d798 <_sbrk_r>:
 800d798:	b538      	push	{r3, r4, r5, lr}
 800d79a:	2300      	movs	r3, #0
 800d79c:	4d05      	ldr	r5, [pc, #20]	; (800d7b4 <_sbrk_r+0x1c>)
 800d79e:	4604      	mov	r4, r0
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	602b      	str	r3, [r5, #0]
 800d7a4:	f7f4 fb20 	bl	8001de8 <_sbrk>
 800d7a8:	1c43      	adds	r3, r0, #1
 800d7aa:	d102      	bne.n	800d7b2 <_sbrk_r+0x1a>
 800d7ac:	682b      	ldr	r3, [r5, #0]
 800d7ae:	b103      	cbz	r3, 800d7b2 <_sbrk_r+0x1a>
 800d7b0:	6023      	str	r3, [r4, #0]
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}
 800d7b4:	20001cec 	.word	0x20001cec

0800d7b8 <__malloc_lock>:
 800d7b8:	4801      	ldr	r0, [pc, #4]	; (800d7c0 <__malloc_lock+0x8>)
 800d7ba:	f000 b811 	b.w	800d7e0 <__retarget_lock_acquire_recursive>
 800d7be:	bf00      	nop
 800d7c0:	20001cf0 	.word	0x20001cf0

0800d7c4 <__malloc_unlock>:
 800d7c4:	4801      	ldr	r0, [pc, #4]	; (800d7cc <__malloc_unlock+0x8>)
 800d7c6:	f000 b80c 	b.w	800d7e2 <__retarget_lock_release_recursive>
 800d7ca:	bf00      	nop
 800d7cc:	20001cf0 	.word	0x20001cf0

0800d7d0 <_malloc_usable_size_r>:
 800d7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7d4:	1f18      	subs	r0, r3, #4
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bfbc      	itt	lt
 800d7da:	580b      	ldrlt	r3, [r1, r0]
 800d7dc:	18c0      	addlt	r0, r0, r3
 800d7de:	4770      	bx	lr

0800d7e0 <__retarget_lock_acquire_recursive>:
 800d7e0:	4770      	bx	lr

0800d7e2 <__retarget_lock_release_recursive>:
 800d7e2:	4770      	bx	lr

0800d7e4 <_init>:
 800d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e6:	bf00      	nop
 800d7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ea:	bc08      	pop	{r3}
 800d7ec:	469e      	mov	lr, r3
 800d7ee:	4770      	bx	lr

0800d7f0 <_fini>:
 800d7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f2:	bf00      	nop
 800d7f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7f6:	bc08      	pop	{r3}
 800d7f8:	469e      	mov	lr, r3
 800d7fa:	4770      	bx	lr
