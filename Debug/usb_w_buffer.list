
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d470  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f5c  0800d57c  0800d57c  0001d57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4d8  0800e4d8  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4d8  0800e4d8  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4d8  0800e4d8  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4d8  0800e4d8  0001e4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4dc  0800e4dc  0001e4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0800e4e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac8  20000418  0800e8f8  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee0  0800e8f8  00021ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e9bd  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b4d  00000000  00000000  0005edfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f0  00000000  00000000  00064950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ff8  00000000  00000000  00066c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df9a  00000000  00000000  00068c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023065  00000000  00000000  00086bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb67  00000000  00000000  000a9c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014979e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009600  00000000  00000000  001497f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000418 	.word	0x20000418
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d564 	.word	0x0800d564

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000041c 	.word	0x2000041c
 8000148:	0800d564 	.word	0x0800d564

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern TIM_HandleTypeDef htim1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f003 ffb0 	bl	80040f0 <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f003 ffab 	bl	80040f0 <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f004 faa6 	bl	80046f4 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f004 fa9f 	bl	80046f4 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f006 fc92 	bl	8006b54 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f004 fa5b 	bl	80046f4 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000063c 	.word	0x2000063c
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Kpd_Irqv_Init();
 800025c:	f001 f86e 	bl	800133c <Kpd_Irqv_Init>
	init_custom_character_db();
 8000260:	f000 fc20 	bl	8000aa4 <init_custom_character_db>
	enable_backlight(true);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fdeb 	bl	8000e40 <enable_backlight>
	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <Start_APP+0x6c>)
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <Start_APP+0x70>)
 800026e:	4917      	ldr	r1, [pc, #92]	; (80002cc <Start_APP+0x74>)
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <Start_APP+0x78>)
 8000272:	f002 f84f 	bl	8002314 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 8000276:	4816      	ldr	r0, [pc, #88]	; (80002d0 <Start_APP+0x78>)
 8000278:	f003 fe03 	bl	8003e82 <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 800027c:	2100      	movs	r1, #0
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <Start_APP+0x78>)
 8000280:	f003 fe0e 	bl	8003ea0 <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 8000284:	2004      	movs	r0, #4
 8000286:	f000 fe2d 	bl	8000ee4 <set_contrast>

		u8g2_SetBitmapMode(&u8g2,0);
 800028a:	2100      	movs	r1, #0
 800028c:	4810      	ldr	r0, [pc, #64]	; (80002d0 <Start_APP+0x78>)
 800028e:	f001 fca7 	bl	8001be0 <u8g2_SetBitmapMode>


		u8g2_SetDrawColor(&u8g2, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	480e      	ldr	r0, [pc, #56]	; (80002d0 <Start_APP+0x78>)
 8000296:	f003 f857 	bl	8003348 <u8g2_SetDrawColor>
		u8g2_SetFontMode(&u8g2, 0);
 800029a:	2100      	movs	r1, #0
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <Start_APP+0x78>)
 800029e:	f002 fcd3 	bl	8002c48 <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <Start_APP+0x78>)
 80002a4:	f002 fe3e 	bl	8002f24 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_crox2c_mf);
 80002a8:	490a      	ldr	r1, [pc, #40]	; (80002d4 <Start_APP+0x7c>)
 80002aa:	4809      	ldr	r0, [pc, #36]	; (80002d0 <Start_APP+0x78>)
 80002ac:	f002 fe48 	bl	8002f40 <u8g2_SetFont>
		disp_splash();
 80002b0:	f000 fe2c 	bl	8000f0c <disp_splash>
		text_insertion_point(0 , 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fc10 	bl	8000adc <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002bc:	f000 faa2 	bl	8000804 <monitor_begin>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	0800015d 	.word	0x0800015d
 80002c8:	080001cd 	.word	0x080001cd
 80002cc:	0800e434 	.word	0x0800e434
 80002d0:	20000434 	.word	0x20000434
 80002d4:	0800d650 	.word	0x0800d650

080002d8 <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_FS(cmd, strlen(buf)) == USBD_OK)
 80002e0:	bf00      	nop
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f7ff ff32 	bl	800014c <strlen>
 80002e8:	4603      	mov	r3, r0
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <monitor_send_string+0x2c>)
 80002f0:	f00c f86c 	bl	800c3cc <CDC_Transmit_FS>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f3      	beq.n	80002e2 <monitor_send_string+0xa>
		;
	//isso é a melhor forma de try til it works que eu consegui pensar
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200004c8 	.word	0x200004c8

08000308 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000318:	f006 fea0 	bl	800705c <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 800031c:	f000 f98a 	bl	8000634 <monitor_interrupt>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200005b8 	.word	0x200005b8
 800032c:	200006dc 	.word	0x200006dc

08000330 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af02      	add	r7, sp, #8
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 800033a:	2204      	movs	r2, #4
 800033c:	49a0      	ldr	r1, [pc, #640]	; (80005c0 <monitor_check_cmd+0x290>)
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f00c fc9e 	bl	800cc80 <strncmp>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d108      	bne.n	800035c <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 800034a:	4a9e      	ldr	r2, [pc, #632]	; (80005c4 <monitor_check_cmd+0x294>)
 800034c:	2190      	movs	r1, #144	; 0x90
 800034e:	489e      	ldr	r0, [pc, #632]	; (80005c8 <monitor_check_cmd+0x298>)
 8000350:	f00c fc62 	bl	800cc18 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000354:	489c      	ldr	r0, [pc, #624]	; (80005c8 <monitor_check_cmd+0x298>)
 8000356:	f7ff ffbf 	bl	80002d8 <monitor_send_string>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
		}

	}
}
 800035a:	e12c      	b.n	80005b6 <monitor_check_cmd+0x286>
	else if (cmd[0] == LCD_CMD) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2bfe      	cmp	r3, #254	; 0xfe
 8000362:	f040 8128 	bne.w	80005b6 <monitor_check_cmd+0x286>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b31      	cmp	r3, #49	; 0x31
 800036e:	d109      	bne.n	8000384 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000370:	4b96      	ldr	r3, [pc, #600]	; (80005cc <monitor_check_cmd+0x29c>)
 8000372:	4a97      	ldr	r2, [pc, #604]	; (80005d0 <monitor_check_cmd+0x2a0>)
 8000374:	2190      	movs	r1, #144	; 0x90
 8000376:	4894      	ldr	r0, [pc, #592]	; (80005c8 <monitor_check_cmd+0x298>)
 8000378:	f00c fc4e 	bl	800cc18 <sniprintf>
			monitor_send_string(ans);
 800037c:	4892      	ldr	r0, [pc, #584]	; (80005c8 <monitor_check_cmd+0x298>)
 800037e:	f7ff ffab 	bl	80002d8 <monitor_send_string>
}
 8000382:	e118      	b.n	80005b6 <monitor_check_cmd+0x286>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b30      	cmp	r3, #48	; 0x30
 800038c:	d109      	bne.n	80003a2 <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 800038e:	4b8f      	ldr	r3, [pc, #572]	; (80005cc <monitor_check_cmd+0x29c>)
 8000390:	4a90      	ldr	r2, [pc, #576]	; (80005d4 <monitor_check_cmd+0x2a4>)
 8000392:	2190      	movs	r1, #144	; 0x90
 8000394:	488c      	ldr	r0, [pc, #560]	; (80005c8 <monitor_check_cmd+0x298>)
 8000396:	f00c fc3f 	bl	800cc18 <sniprintf>
			monitor_send_string(ans);
 800039a:	488b      	ldr	r0, [pc, #556]	; (80005c8 <monitor_check_cmd+0x298>)
 800039c:	f7ff ff9c 	bl	80002d8 <monitor_send_string>
}
 80003a0:	e109      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_SOFT_RESET) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3301      	adds	r3, #1
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b56      	cmp	r3, #86	; 0x56
 80003aa:	d102      	bne.n	80003b2 <monitor_check_cmd+0x82>
			lcd_soft_reset();
 80003ac:	f000 fd34 	bl	8000e18 <lcd_soft_reset>
}
 80003b0:	e101      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3301      	adds	r3, #1
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b42      	cmp	r3, #66	; 0x42
 80003ba:	d103      	bne.n	80003c4 <monitor_check_cmd+0x94>
			enable_backlight(true);
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 fd3f 	bl	8000e40 <enable_backlight>
}
 80003c2:	e0f8      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b46      	cmp	r3, #70	; 0x46
 80003cc:	d103      	bne.n	80003d6 <monitor_check_cmd+0xa6>
			enable_backlight(false);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 fd36 	bl	8000e40 <enable_backlight>
}
 80003d4:	e0ef      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_BACKLIGHT_BRIGHTNESS) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3301      	adds	r3, #1
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b41      	cmp	r3, #65	; 0x41
 80003de:	d106      	bne.n	80003ee <monitor_check_cmd+0xbe>
			set_backlight_brightness(cmd[2]);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3302      	adds	r3, #2
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fd54 	bl	8000e94 <set_backlight_brightness>
}
 80003ec:	e0e3      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3301      	adds	r3, #1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b66      	cmp	r3, #102	; 0x66
 80003f6:	d103      	bne.n	8000400 <monitor_check_cmd+0xd0>
			inverse_text(true);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 fb9b 	bl	8000b34 <inverse_text>
}
 80003fe:	e0da      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3301      	adds	r3, #1
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b67      	cmp	r3, #103	; 0x67
 8000408:	d103      	bne.n	8000412 <monitor_check_cmd+0xe2>
			inverse_text(false);
 800040a:	2000      	movs	r0, #0
 800040c:	f000 fb92 	bl	8000b34 <inverse_text>
}
 8000410:	e0d1      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_CLEAR) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3301      	adds	r3, #1
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b58      	cmp	r3, #88	; 0x58
 800041a:	d102      	bne.n	8000422 <monitor_check_cmd+0xf2>
			clear_display();
 800041c:	f000 fd02 	bl	8000e24 <clear_display>
}
 8000420:	e0c9      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3301      	adds	r3, #1
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b70      	cmp	r3, #112	; 0x70
 800042a:	d10a      	bne.n	8000442 <monitor_check_cmd+0x112>
			put_pixel(cmd[3], cmd[2]);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3303      	adds	r3, #3
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3302      	adds	r3, #2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f000 fc66 	bl	8000d0c <put_pixel>
}
 8000440:	e0b9      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b71      	cmp	r3, #113	; 0x71
 800044a:	d10a      	bne.n	8000462 <monitor_check_cmd+0x132>
			erase_pixel(cmd[3], cmd[2]);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3303      	adds	r3, #3
 8000450:	781a      	ldrb	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3302      	adds	r3, #2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4619      	mov	r1, r3
 800045a:	4610      	mov	r0, r2
 800045c:	f000 fc74 	bl	8000d48 <erase_pixel>
}
 8000460:	e0a9      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_PUT_BYTE) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b3e      	cmp	r3, #62	; 0x3e
 800046a:	d10c      	bne.n	8000486 <monitor_check_cmd+0x156>
			put_byte(cmd[2],cmd[3], cmd[4]);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3302      	adds	r3, #2
 8000470:	7818      	ldrb	r0, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3303      	adds	r3, #3
 8000476:	7819      	ldrb	r1, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3304      	adds	r3, #4
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	461a      	mov	r2, r3
 8000480:	f000 fc80 	bl	8000d84 <put_byte>
}
 8000484:	e097      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DEFINE_CUSTOM_CHARACTER) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3301      	adds	r3, #1
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b4e      	cmp	r3, #78	; 0x4e
 800048e:	d103      	bne.n	8000498 <monitor_check_cmd+0x168>
					define_custom_character(cmd);
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 fb77 	bl	8000b84 <define_custom_character>
}
 8000496:	e08e      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3301      	adds	r3, #1
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b43      	cmp	r3, #67	; 0x43
 80004a0:	d103      	bne.n	80004aa <monitor_check_cmd+0x17a>
			auto_line_wrap(true);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fb0a 	bl	8000abc <auto_line_wrap>
}
 80004a8:	e085      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3301      	adds	r3, #1
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b44      	cmp	r3, #68	; 0x44
 80004b2:	d103      	bne.n	80004bc <monitor_check_cmd+0x18c>
			auto_line_wrap(false);
 80004b4:	2000      	movs	r0, #0
 80004b6:	f000 fb01 	bl	8000abc <auto_line_wrap>
}
 80004ba:	e07c      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_SET_INSERT) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3301      	adds	r3, #1
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b47      	cmp	r3, #71	; 0x47
 80004c4:	d10a      	bne.n	80004dc <monitor_check_cmd+0x1ac>
			text_insertion_point(cmd[2], cmd[3]);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3302      	adds	r3, #2
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3303      	adds	r3, #3
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4610      	mov	r0, r2
 80004d6:	f000 fb01 	bl	8000adc <text_insertion_point>
}
 80004da:	e06c      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_HOME_INSERT) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b48      	cmp	r3, #72	; 0x48
 80004e4:	d104      	bne.n	80004f0 <monitor_check_cmd+0x1c0>
			text_insertion_point(0, 0);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 faf7 	bl	8000adc <text_insertion_point>
}
 80004ee:	e062      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_READ_GPI) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b65      	cmp	r3, #101	; 0x65
 80004f8:	d114      	bne.n	8000524 <monitor_check_cmd+0x1f4>
			if (cmd[2] == '0') {
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3302      	adds	r3, #2
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b30      	cmp	r3, #48	; 0x30
 8000502:	d158      	bne.n	80005b6 <monitor_check_cmd+0x286>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000504:	4b34      	ldr	r3, [pc, #208]	; (80005d8 <monitor_check_cmd+0x2a8>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
						ddp[1]);
 800050a:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <monitor_check_cmd+0x2a8>)
 800050c:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	4613      	mov	r3, r2
 8000512:	4a32      	ldr	r2, [pc, #200]	; (80005dc <monitor_check_cmd+0x2ac>)
 8000514:	2190      	movs	r1, #144	; 0x90
 8000516:	482c      	ldr	r0, [pc, #176]	; (80005c8 <monitor_check_cmd+0x298>)
 8000518:	f00c fb7e 	bl	800cc18 <sniprintf>
				monitor_send_string(ans);
 800051c:	482a      	ldr	r0, [pc, #168]	; (80005c8 <monitor_check_cmd+0x298>)
 800051e:	f7ff fedb 	bl	80002d8 <monitor_send_string>
}
 8000522:	e048      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3301      	adds	r3, #1
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b69      	cmp	r3, #105	; 0x69
 800052c:	d102      	bne.n	8000534 <monitor_check_cmd+0x204>
			disp_splash();
 800052e:	f000 fced 	bl	8000f0c <disp_splash>
}
 8000532:	e040      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3301      	adds	r3, #1
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b76      	cmp	r3, #118	; 0x76
 800053c:	d102      	bne.n	8000544 <monitor_check_cmd+0x214>
			def_thick_v_bar();
 800053e:	f000 fb09 	bl	8000b54 <def_thick_v_bar>
}
 8000542:	e038      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b73      	cmp	r3, #115	; 0x73
 800054c:	d102      	bne.n	8000554 <monitor_check_cmd+0x224>
			def_thin_v_bar();
 800054e:	f000 fb0d 	bl	8000b6c <def_thin_v_bar>
}
 8000552:	e030      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3301      	adds	r3, #1
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b3d      	cmp	r3, #61	; 0x3d
 800055c:	d10a      	bne.n	8000574 <monitor_check_cmd+0x244>
			draw_v_bar_graph(cmd[2], cmd[3]);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	3302      	adds	r3, #2
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3303      	adds	r3, #3
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	4610      	mov	r0, r2
 800056e:	f000 fb33 	bl	8000bd8 <draw_v_bar_graph>
}
 8000572:	e020      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3301      	adds	r3, #1
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b3d      	cmp	r3, #61	; 0x3d
 800057c:	d10a      	bne.n	8000594 <monitor_check_cmd+0x264>
			erase_v_bar_graph(cmd[2], cmd[3]);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	3302      	adds	r3, #2
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3303      	adds	r3, #3
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	4610      	mov	r0, r2
 800058e:	f000 fb53 	bl	8000c38 <erase_v_bar_graph>
}
 8000592:	e010      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b7c      	cmp	r3, #124	; 0x7c
 800059c:	d10b      	bne.n	80005b6 <monitor_check_cmd+0x286>
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3302      	adds	r3, #2
 80005a2:	7818      	ldrb	r0, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3303      	adds	r3, #3
 80005a8:	7819      	ldrb	r1, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3304      	adds	r3, #4
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	f000 fb71 	bl	8000c98 <draw_h_bar_graph>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	0800d57c 	.word	0x0800d57c
 80005c4:	0800d584 	.word	0x0800d584
 80005c8:	20000558 	.word	0x20000558
 80005cc:	0800d5bc 	.word	0x0800d5bc
 80005d0:	0800d5c0 	.word	0x0800d5c0
 80005d4:	0800d5d8 	.word	0x0800d5d8
 80005d8:	20000000 	.word	0x20000000
 80005dc:	0800d5ec 	.word	0x0800d5ec

080005e0 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]

	memcpy(cmd + size, buf, len);
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <app_usb_cbk+0x44>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <app_usb_cbk+0x48>)
 80005f0:	4413      	add	r3, r2
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00c faf8 	bl	800cbec <memcpy>
	size += len;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <app_usb_cbk+0x44>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	4413      	add	r3, r2
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <app_usb_cbk+0x44>)
 8000606:	6013      	str	r3, [r2, #0]

	if (size >= CMD_BUF_SIZE) {
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <app_usb_cbk+0x44>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b8f      	cmp	r3, #143	; 0x8f
 800060e:	d902      	bls.n	8000616 <app_usb_cbk+0x36>
		new_cmd = true;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <app_usb_cbk+0x4c>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <app_usb_cbk+0x50>)
 8000618:	f006 fcce 	bl	8006fb8 <HAL_TIM_Base_Start_IT>

}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200005b4 	.word	0x200005b4
 8000628:	200004c8 	.word	0x200004c8
 800062c:	200005b8 	.word	0x200005b8
 8000630:	200006dc 	.word	0x200006dc

08000634 <monitor_interrupt>:

void monitor_interrupt(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	if (new_cmd) {
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <monitor_interrupt+0x1c0>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 80d4 	beq.w	80007ec <monitor_interrupt+0x1b8>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 8000648:	4b6b      	ldr	r3, [pc, #428]	; (80007f8 <monitor_interrupt+0x1c4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 800064e:	2300      	movs	r3, #0
 8000650:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 8000652:	2300      	movs	r3, #0
 8000654:	70fb      	strb	r3, [r7, #3]

//		o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
//		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
//		 começa o inicializador

		for (offset = 0; offset <= size; offset++) {
 8000656:	2300      	movs	r3, #0
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	e0aa      	b.n	80007b2 <monitor_interrupt+0x17e>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4a67      	ldr	r2, [pc, #412]	; (80007fc <monitor_interrupt+0x1c8>)
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bfd      	cmp	r3, #253	; 0xfd
 8000666:	d110      	bne.n	800068a <monitor_interrupt+0x56>
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3301      	adds	r3, #1
 800066c:	4a63      	ldr	r2, [pc, #396]	; (80007fc <monitor_interrupt+0x1c8>)
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2bfe      	cmp	r3, #254	; 0xfe
 8000674:	d009      	beq.n	800068a <monitor_interrupt+0x56>
					&& *(cmd + offset + 1) != 20) {
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	3301      	adds	r3, #1
 800067a:	4a60      	ldr	r2, [pc, #384]	; (80007fc <monitor_interrupt+0x1c8>)
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b14      	cmp	r3, #20
 8000682:	d002      	beq.n	800068a <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	3301      	adds	r3, #1
 8000688:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00c      	beq.n	80006aa <monitor_interrupt+0x76>
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4a5a      	ldr	r2, [pc, #360]	; (80007fc <monitor_interrupt+0x1c8>)
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2bfe      	cmp	r3, #254	; 0xfe
 800069a:	d106      	bne.n	80006aa <monitor_interrupt+0x76>
					&& *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	3b01      	subs	r3, #1
 80006a0:	4a56      	ldr	r2, [pc, #344]	; (80007fc <monitor_interrupt+0x1c8>)
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2bfd      	cmp	r3, #253	; 0xfd
 80006a8:	d104      	bne.n	80006b4 <monitor_interrupt+0x80>
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	4b52      	ldr	r3, [pc, #328]	; (80007f8 <monitor_interrupt+0x1c4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d103      	bne.n	80006bc <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o fim de outro
				printable = true;
 80006b4:	2301      	movs	r3, #1
 80006b6:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d029      	beq.n	8000716 <monitor_interrupt+0xe2>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	4a4d      	ldr	r2, [pc, #308]	; (80007fc <monitor_interrupt+0x1c8>)
 80006c6:	1899      	adds	r1, r3, r2
 80006c8:	797a      	ldrb	r2, [r7, #5]
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	484b      	ldr	r0, [pc, #300]	; (8000800 <monitor_interrupt+0x1cc>)
 80006d2:	f00c fae9 	bl	800cca8 <strncpy>
				CDC_Transmit_FS(ans, end_print - bgn_print);
 80006d6:	797b      	ldrb	r3, [r7, #5]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	4846      	ldr	r0, [pc, #280]	; (8000800 <monitor_interrupt+0x1cc>)
 80006e6:	f00b fe71 	bl	800c3cc <CDC_Transmit_FS>
				lcd_print(ans);
 80006ea:	4845      	ldr	r0, [pc, #276]	; (8000800 <monitor_interrupt+0x1cc>)
 80006ec:	f000 fcbe 	bl	800106c <lcd_print>
				memset(ans, 0, ANS_BUF_SIZE);
 80006f0:	225a      	movs	r2, #90	; 0x5a
 80006f2:	2100      	movs	r1, #0
 80006f4:	4842      	ldr	r0, [pc, #264]	; (8000800 <monitor_interrupt+0x1cc>)
 80006f6:	f00c fa87 	bl	800cc08 <memset>
				printable = !printable;
 80006fa:	78fb      	ldrb	r3, [r7, #3]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf14      	ite	ne
 8000700:	2301      	movne	r3, #1
 8000702:	2300      	moveq	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f083 0301 	eor.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	70fb      	strb	r3, [r7, #3]
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	70fb      	strb	r3, [r7, #3]
			}

			if (*(cmd + offset) == LCD_CMD) {
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4a38      	ldr	r2, [pc, #224]	; (80007fc <monitor_interrupt+0x1c8>)
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2bfe      	cmp	r3, #254	; 0xfe
 8000720:	d117      	bne.n	8000752 <monitor_interrupt+0x11e>
				monitor_check_cmd((char*) cmd + offset, size);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4a35      	ldr	r2, [pc, #212]	; (80007fc <monitor_interrupt+0x1c8>)
 8000726:	4413      	add	r3, r2
 8000728:	4a33      	ldr	r2, [pc, #204]	; (80007f8 <monitor_interrupt+0x1c4>)
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fdfe 	bl	8000330 <monitor_check_cmd>
				is_cmd = !is_cmd;
 8000734:	793b      	ldrb	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	bf14      	ite	ne
 800073a:	2301      	movne	r3, #1
 800073c:	2300      	moveq	r3, #0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	713b      	strb	r3, [r7, #4]
 8000748:	793b      	ldrb	r3, [r7, #4]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	713b      	strb	r3, [r7, #4]
 8000750:	e013      	b.n	800077a <monitor_interrupt+0x146>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4a29      	ldr	r2, [pc, #164]	; (80007fc <monitor_interrupt+0x1c8>)
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2bfd      	cmp	r3, #253	; 0xfd
 800075c:	d10d      	bne.n	800077a <monitor_interrupt+0x146>
				is_cmd = !is_cmd;
 800075e:	793b      	ldrb	r3, [r7, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf14      	ite	ne
 8000764:	2301      	movne	r3, #1
 8000766:	2300      	moveq	r3, #0
 8000768:	b2db      	uxtb	r3, r3
 800076a:	f083 0301 	eor.w	r3, r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	713b      	strb	r3, [r7, #4]
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	713b      	strb	r3, [r7, #4]
			}

			if(!is_cmd && *(cmd + offset)>=1 && *(cmd + offset)<=10) {
 800077a:	793b      	ldrb	r3, [r7, #4]
 800077c:	f083 0301 	eor.w	r3, r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d012      	beq.n	80007ac <monitor_interrupt+0x178>
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <monitor_interrupt+0x1c8>)
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00c      	beq.n	80007ac <monitor_interrupt+0x178>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4a19      	ldr	r2, [pc, #100]	; (80007fc <monitor_interrupt+0x1c8>)
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b0a      	cmp	r3, #10
 800079c:	d806      	bhi.n	80007ac <monitor_interrupt+0x178>
				custom_character_dealer(*(cmd + offset));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4a16      	ldr	r2, [pc, #88]	; (80007fc <monitor_interrupt+0x1c8>)
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fd86 	bl	80012b8 <custom_character_dealer>
		for (offset = 0; offset <= size; offset++) {
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	3301      	adds	r3, #1
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <monitor_interrupt+0x1c4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	f67f af4f 	bls.w	800065c <monitor_interrupt+0x28>
			}
		}
		size = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <monitor_interrupt+0x1c4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 80007c4:	2290      	movs	r2, #144	; 0x90
 80007c6:	2100      	movs	r1, #0
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <monitor_interrupt+0x1c8>)
 80007ca:	f00c fa1d 	bl	800cc08 <memset>
		new_cmd = !new_cmd;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <monitor_interrupt+0x1c0>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf14      	ite	ne
 80007d6:	2301      	movne	r3, #1
 80007d8:	2300      	moveq	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	f083 0301 	eor.w	r3, r3, #1
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <monitor_interrupt+0x1c0>)
 80007ea:	701a      	strb	r2, [r3, #0]
	}
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200005b8 	.word	0x200005b8
 80007f8:	200005b4 	.word	0x200005b4
 80007fc:	200004c8 	.word	0x200004c8
 8000800:	20000558 	.word	0x20000558

08000804 <monitor_begin>:

void monitor_begin(void) {
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <monitor_begin+0x18>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <monitor_begin+0x1c>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	200005b4 	.word	0x200005b4
 8000820:	200005b8 	.word	0x200005b8

08000824 <exp>:

/**@brief	Exponentiate [value] , at the [pot] level
 * eu redefini a funcão de exponenciação manualmente por não poder importar a biblioteca matematica inteira apenas por uma função :D
*
*/
uint16_t exp(uint16_t val,uint16_t pot ){
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	80fb      	strh	r3, [r7, #6]
 8000830:	4613      	mov	r3, r2
 8000832:	80bb      	strh	r3, [r7, #4]
    uint16_t ans = 1;
 8000834:	2301      	movs	r3, #1
 8000836:	81fb      	strh	r3, [r7, #14]
    while(pot){
 8000838:	e007      	b.n	800084a <exp+0x26>
        ans *=val;
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	88fa      	ldrh	r2, [r7, #6]
 800083e:	fb02 f303 	mul.w	r3, r2, r3
 8000842:	81fb      	strh	r3, [r7, #14]
        pot--;
 8000844:	88bb      	ldrh	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	80bb      	strh	r3, [r7, #4]
    while(pot){
 800084a:	88bb      	ldrh	r3, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1f4      	bne.n	800083a <exp+0x16>
    }
    return ans;
 8000850:	89fb      	ldrh	r3, [r7, #14]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <decode_convert_expand_encode>:
/**@brief	Decode Convert  Expand Rotate Encode
 * Esta função decodifica um caracter em hexadecimal dado, amplifica ele para o tamanho da memoria do novo display, rotaciona ele e recodifica
 * de maneira que no banco de dados eu só vou salvar o caractere definido pelo usuario em hexadecimal e o indice
*
*/
void decode_convert_expand_encode(uint8_t *hex_char){
 800085c:	b580      	push	{r7, lr}
 800085e:	b094      	sub	sp, #80	; 0x50
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
uint8_t mat[N][N]= {0};
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2240      	movs	r2, #64	; 0x40
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f00c f9cb 	bl	800cc08 <memset>
uint8_t i,j,k, hex, temp;


//decode_expand
    for(i=3; hex_char[i] != 0xFD ; i++){
 8000872:	2303      	movs	r3, #3
 8000874:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000878:	e02e      	b.n	80008d8 <decode_convert_expand_encode+0x7c>
        hex = hex_char[i];
 800087a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

        for(j=7;j>=0 && j<8;j--)
 8000888:	2307      	movs	r3, #7
 800088a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800088e:	e01a      	b.n	80008c6 <decode_convert_expand_encode+0x6a>
        {
            mat[i-3][j] =hex%2;
 8000890:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000894:	1eda      	subs	r2, r3, #3
 8000896:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800089a:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800089e:	f001 0101 	and.w	r1, r1, #1
 80008a2:	b2c9      	uxtb	r1, r1
 80008a4:	00d2      	lsls	r2, r2, #3
 80008a6:	3250      	adds	r2, #80	; 0x50
 80008a8:	443a      	add	r2, r7
 80008aa:	4413      	add	r3, r2
 80008ac:	3b48      	subs	r3, #72	; 0x48
 80008ae:	460a      	mov	r2, r1
 80008b0:	701a      	strb	r2, [r3, #0]
            hex=hex/2;
 80008b2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        for(j=7;j>=0 && j<8;j--)
 80008bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80008c0:	3b01      	subs	r3, #1
 80008c2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80008c6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80008ca:	2b07      	cmp	r3, #7
 80008cc:	d9e0      	bls.n	8000890 <decode_convert_expand_encode+0x34>
    for(i=3; hex_char[i] != 0xFD ; i++){
 80008ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008d2:	3301      	adds	r3, #1
 80008d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80008d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	4413      	add	r3, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2bfd      	cmp	r3, #253	; 0xfd
 80008e4:	d1c9      	bne.n	800087a <decode_convert_expand_encode+0x1e>
        }
    }
//rotate
        // Consider all squares one by one
	for (i = 0; i < N / 2; i++) {
 80008e6:	2300      	movs	r3, #0
 80008e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80008ec:	e07d      	b.n	80009ea <decode_convert_expand_encode+0x18e>
		// Consider elements in group
		// of 4 in current square
		for (j = i; j < N - i - 1; j++) {
 80008ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008f2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80008f6:	e06b      	b.n	80009d0 <decode_convert_expand_encode+0x174>
			// Store current cell in
			// temp variable
			temp = mat[i][j];
 80008f8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80008fc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000900:	00d2      	lsls	r2, r2, #3
 8000902:	3250      	adds	r2, #80	; 0x50
 8000904:	443a      	add	r2, r7
 8000906:	4413      	add	r3, r2
 8000908:	3b48      	subs	r3, #72	; 0x48
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			// Move values from right to top
			mat[i][j] = mat[j][N - 1 - i];
 8000910:	f897 004e 	ldrb.w	r0, [r7, #78]	; 0x4e
 8000914:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000918:	f1c3 0107 	rsb	r1, r3, #7
 800091c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000920:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000924:	00c0      	lsls	r0, r0, #3
 8000926:	3050      	adds	r0, #80	; 0x50
 8000928:	4438      	add	r0, r7
 800092a:	4401      	add	r1, r0
 800092c:	3948      	subs	r1, #72	; 0x48
 800092e:	7809      	ldrb	r1, [r1, #0]
 8000930:	00d2      	lsls	r2, r2, #3
 8000932:	3250      	adds	r2, #80	; 0x50
 8000934:	443a      	add	r2, r7
 8000936:	4413      	add	r3, r2
 8000938:	3b48      	subs	r3, #72	; 0x48
 800093a:	460a      	mov	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]

			// Move values from bottom to right
			mat[j][N - 1 - i]
				= mat[N - 1 - i][N - 1 - j];
 800093e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000942:	f1c3 0007 	rsb	r0, r3, #7
 8000946:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800094a:	f1c3 0107 	rsb	r1, r3, #7
			mat[j][N - 1 - i]
 800094e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000952:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000956:	f1c3 0307 	rsb	r3, r3, #7
				= mat[N - 1 - i][N - 1 - j];
 800095a:	00c0      	lsls	r0, r0, #3
 800095c:	3050      	adds	r0, #80	; 0x50
 800095e:	4438      	add	r0, r7
 8000960:	4401      	add	r1, r0
 8000962:	3948      	subs	r1, #72	; 0x48
 8000964:	7809      	ldrb	r1, [r1, #0]
 8000966:	00d2      	lsls	r2, r2, #3
 8000968:	3250      	adds	r2, #80	; 0x50
 800096a:	443a      	add	r2, r7
 800096c:	4413      	add	r3, r2
 800096e:	3b48      	subs	r3, #72	; 0x48
 8000970:	460a      	mov	r2, r1
 8000972:	701a      	strb	r2, [r3, #0]

			// Move values from left to bottom
			mat[N - 1 - i][N - 1 - j]
				= mat[N - 1 - j][i];
 8000974:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000978:	f1c3 0007 	rsb	r0, r3, #7
 800097c:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
			mat[N - 1 - i][N - 1 - j]
 8000980:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000984:	f1c3 0207 	rsb	r2, r3, #7
 8000988:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800098c:	f1c3 0307 	rsb	r3, r3, #7
				= mat[N - 1 - j][i];
 8000990:	00c0      	lsls	r0, r0, #3
 8000992:	3050      	adds	r0, #80	; 0x50
 8000994:	4438      	add	r0, r7
 8000996:	4401      	add	r1, r0
 8000998:	3948      	subs	r1, #72	; 0x48
 800099a:	7809      	ldrb	r1, [r1, #0]
 800099c:	00d2      	lsls	r2, r2, #3
 800099e:	3250      	adds	r2, #80	; 0x50
 80009a0:	443a      	add	r2, r7
 80009a2:	4413      	add	r3, r2
 80009a4:	3b48      	subs	r3, #72	; 0x48
 80009a6:	460a      	mov	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]

			// Assign temp to left
			mat[N - 1 - j][i] = temp;
 80009aa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009ae:	f1c3 0207 	rsb	r2, r3, #7
 80009b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009b6:	00d2      	lsls	r2, r2, #3
 80009b8:	3250      	adds	r2, #80	; 0x50
 80009ba:	443a      	add	r2, r7
 80009bc:	4413      	add	r3, r2
 80009be:	3b48      	subs	r3, #72	; 0x48
 80009c0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 80009c4:	701a      	strb	r2, [r3, #0]
		for (j = i; j < N - i - 1; j++) {
 80009c6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009ca:	3301      	adds	r3, #1
 80009cc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80009d0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80009d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009d8:	f1c3 0307 	rsb	r3, r3, #7
 80009dc:	429a      	cmp	r2, r3
 80009de:	db8b      	blt.n	80008f8 <decode_convert_expand_encode+0x9c>
	for (i = 0; i < N / 2; i++) {
 80009e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009e4:	3301      	adds	r3, #1
 80009e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80009ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	f67f af7d 	bls.w	80008ee <decode_convert_expand_encode+0x92>
		}
	}
//encode
    for(i=0,k=0;i<N;i++){
 80009f4:	2300      	movs	r3, #0
 80009f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80009fa:	2300      	movs	r3, #0
 80009fc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000a00:	e047      	b.n	8000a92 <decode_convert_expand_encode+0x236>
        temp=0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        for(j=0;j<N;j++){
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000a0e:	e022      	b.n	8000a56 <decode_convert_expand_encode+0x1fa>
            temp += exp(2,N-j) * mat[i][j];
 8000a10:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	f1c3 0308 	rsb	r3, r3, #8
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f7ff ff00 	bl	8000824 <exp>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4619      	mov	r1, r3
 8000a28:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000a2c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a30:	00d2      	lsls	r2, r2, #3
 8000a32:	3250      	adds	r2, #80	; 0x50
 8000a34:	443a      	add	r2, r7
 8000a36:	4413      	add	r3, r2
 8000a38:	3b48      	subs	r3, #72	; 0x48
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	fb01 f303 	mul.w	r3, r1, r3
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a46:	4413      	add	r3, r2
 8000a48:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        for(j=0;j<N;j++){
 8000a4c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a50:	3301      	adds	r3, #1
 8000a52:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000a56:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a5a:	2b07      	cmp	r3, #7
 8000a5c:	d9d8      	bls.n	8000a10 <decode_convert_expand_encode+0x1b4>
        }
        //save on the database
        if(i>1 && k<CUSTOM_CHARACTER_SIZE){
 8000a5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d910      	bls.n	8000a88 <decode_convert_expand_encode+0x22c>
 8000a66:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	d80c      	bhi.n	8000a88 <decode_convert_expand_encode+0x22c>
        	hex_char[k+3] = temp;
 8000a6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a72:	3303      	adds	r3, #3
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	4413      	add	r3, r2
 8000a78:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000a7c:	701a      	strb	r2, [r3, #0]
        	k++;
 8000a7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a82:	3301      	adds	r3, #1
 8000a84:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    for(i=0,k=0;i<N;i++){
 8000a88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a96:	2b07      	cmp	r3, #7
 8000a98:	d9b3      	bls.n	8000a02 <decode_convert_expand_encode+0x1a6>
        }
    }
}
 8000a9a:	bf00      	nop
 8000a9c:	bf00      	nop
 8000a9e:	3750      	adds	r7, #80	; 0x50
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <init_custom_character_db>:
*	inicializa o banco de caracteres com o que foi salvo na memoria do equipamento
*	por hora ele seta todos os valores salvos para zero mas pode um dia buscar na
*	memoria persistente pelos valores gravados
*
*/
void init_custom_character_db(void){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	memset(custom_character_db,0,sizeof(custom_character_db));
 8000aa8:	2270      	movs	r2, #112	; 0x70
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <init_custom_character_db+0x14>)
 8000aae:	f00c f8ab 	bl	800cc08 <memset>
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200005c0 	.word	0x200005c0

08000abc <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <auto_line_wrap+0x1c>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	7013      	strb	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200005ba 	.word	0x200005ba

08000adc <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <text_insertion_point+0x4c>)
 8000aee:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	fb02 f303 	mul.w	r3, r2, r3
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <text_insertion_point+0x50>)
 8000afe:	701a      	strb	r2, [r3, #0]
	cursor[1] = row
			* (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <text_insertion_point+0x4c>)
 8000b02:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000b06:	461a      	mov	r2, r3
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <text_insertion_point+0x54>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	1ad3      	subs	r3, r2, r3
	cursor[1] = row
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	79ba      	ldrb	r2, [r7, #6]
 8000b12:	fb02 f303 	mul.w	r3, r2, r3
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <text_insertion_point+0x50>)
 8000b1a:	705a      	strb	r2, [r3, #1]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000434 	.word	0x20000434
 8000b2c:	200005bc 	.word	0x200005bc
 8000b30:	2000022f 	.word	0x2000022f

08000b34 <inverse_text>:
 *	desativa a inversão de texto
 *		FE 67 FD
 *		254 103 253
 *		254 `g` 253
 */
void inverse_text(bool state) {
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <inverse_text+0x1c>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	7013      	strb	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200005b9 	.word	0x200005b9

08000b54 <def_thick_v_bar>:
 *	Define a barra vertical como com 5px de largura
 *	FE 76 FD
 *	254 118 253
 *	254 `v` 253
 */
void def_thick_v_bar(void) {
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
	vertical_bar_width = 5;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <def_thick_v_bar+0x14>)
 8000b5a:	2205      	movs	r2, #5
 8000b5c:	701a      	strb	r2, [r3, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	2000022e 	.word	0x2000022e

08000b6c <def_thin_v_bar>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_thin_v_bar(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	vertical_bar_width = 2;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <def_thin_v_bar+0x14>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	701a      	strb	r2, [r3, #0]
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2000022e 	.word	0x2000022e

08000b84 <define_custom_character>:
 *	Os 6 bytes variam da seguinte forma:
 *	FE 4E [cc] [6bytes] FD
 *	254 104 [cc] [6bytes] 253
 *	254 `N` [cc] [6bytes] 253
 */
void define_custom_character(uint8_t *cmd){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
		decode_convert_expand_encode(cmd);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff fe65 	bl	800085c <decode_convert_expand_encode>
		memcpy(custom_character_db[*(cmd+2)].custom_caracter,cmd+3,6);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3302      	adds	r3, #2
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	1a9b      	subs	r3, r3, r2
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <define_custom_character+0x50>)
 8000ba2:	1898      	adds	r0, r3, r2
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3303      	adds	r3, #3
 8000ba8:	2206      	movs	r2, #6
 8000baa:	4619      	mov	r1, r3
 8000bac:	f00c f81e 	bl	800cbec <memcpy>
		custom_character_db[*(cmd+2)].custo_character_index = *(cmd+2);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7898      	ldrb	r0, [r3, #2]
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <define_custom_character+0x50>)
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	1a5b      	subs	r3, r3, r1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3306      	adds	r3, #6
 8000bc8:	4602      	mov	r2, r0
 8000bca:	701a      	strb	r2, [r3, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200005c0 	.word	0x200005c0

08000bd8 <draw_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_v_bar_graph(uint8_t col, uint8_t height) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af02      	add	r7, sp, #8
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	4613      	mov	r3, r2
 8000be6:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <draw_v_bar_graph+0x54>)
 8000bea:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	79fa      	ldrb	r2, [r7, #7]
 8000bf2:	fb02 f303 	mul.w	r3, r2, r3
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <draw_v_bar_graph+0x58>)
 8000bfa:	701a      	strb	r2, [r3, #0]

	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <draw_v_bar_graph+0x58>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b299      	uxth	r1, r3
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <draw_v_bar_graph+0x58>)
 8000c04:	785b      	ldrb	r3, [r3, #1]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <draw_v_bar_graph+0x5c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b298      	uxth	r0, r3
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	4603      	mov	r3, r0
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <draw_v_bar_graph+0x54>)
 8000c18:	f001 f8a2 	bl	8001d60 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <draw_v_bar_graph+0x54>)
 8000c1e:	f001 f9a5 	bl	8001f6c <u8g2_SendBuffer>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000434 	.word	0x20000434
 8000c30:	200005bc 	.word	0x200005bc
 8000c34:	2000022e 	.word	0x2000022e

08000c38 <erase_v_bar_graph>:
 *	com height	variando [[0x00] a [0x20]] (0 a 32)
 *	FE 2D [col] [height] FD
 * 	254 45 [col] [height] 253
 *	254 `-` [col] [height] 253
 */
void erase_v_bar_graph(uint8_t col, uint8_t height) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460a      	mov	r2, r1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	4613      	mov	r3, r2
 8000c46:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <erase_v_bar_graph+0x54>)
 8000c4a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	79fa      	ldrb	r2, [r7, #7]
 8000c52:	fb02 f303 	mul.w	r3, r2, r3
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <erase_v_bar_graph+0x58>)
 8000c5a:	701a      	strb	r2, [r3, #0]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <erase_v_bar_graph+0x58>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b299      	uxth	r1, r3
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <erase_v_bar_graph+0x58>)
 8000c64:	785b      	ldrb	r3, [r3, #1]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <erase_v_bar_graph+0x5c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	4603      	mov	r3, r0
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <erase_v_bar_graph+0x54>)
 8000c78:	f001 f872 	bl	8001d60 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <erase_v_bar_graph+0x54>)
 8000c7e:	f001 f975 	bl	8001f6c <u8g2_SendBuffer>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000434 	.word	0x20000434
 8000c90:	200005bc 	.word	0x200005bc
 8000c94:	2000022e 	.word	0x2000022e

08000c98 <draw_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	71bb      	strb	r3, [r7, #6]
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	717b      	strb	r3, [r7, #5]
	cursor[0] = (col) * u8g2_GetMaxCharHeight(&u8g2);
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <draw_h_bar_graph+0x6c>)
 8000cac:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	79fa      	ldrb	r2, [r7, #7]
 8000cb4:	fb02 f303 	mul.w	r3, r2, r3
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <draw_h_bar_graph+0x70>)
 8000cbc:	701a      	strb	r2, [r3, #0]
	cursor[1] = (row) * u8g2_GetMaxCharWidth(&u8g2);
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <draw_h_bar_graph+0x6c>)
 8000cc0:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	79ba      	ldrb	r2, [r7, #6]
 8000cc8:	fb02 f303 	mul.w	r3, r2, r3
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <draw_h_bar_graph+0x70>)
 8000cd0:	705a      	strb	r2, [r3, #1]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <draw_h_bar_graph+0x70>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b299      	uxth	r1, r3
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <draw_h_bar_graph+0x70>)
 8000cda:	785b      	ldrb	r3, [r3, #1]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	797b      	ldrb	r3, [r7, #5]
 8000ce0:	b298      	uxth	r0, r3
			u8g2_GetMaxCharHeight(&u8g2));
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <draw_h_bar_graph+0x6c>)
 8000ce4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	4603      	mov	r3, r0
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <draw_h_bar_graph+0x6c>)
 8000cf0:	f001 f836 	bl	8001d60 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <draw_h_bar_graph+0x6c>)
 8000cf6:	f001 f939 	bl	8001f6c <u8g2_SendBuffer>
	//u8g2_DrawVLine(&u8g2, col, u8g2_uint_t y, u8g2_uint_t h);
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000434 	.word	0x20000434
 8000d08:	200005bc 	.word	0x200005bc

08000d0c <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4809      	ldr	r0, [pc, #36]	; (8000d44 <put_pixel+0x38>)
 8000d20:	f002 fb12 	bl	8003348 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	79ba      	ldrb	r2, [r7, #6]
 8000d2a:	b292      	uxth	r2, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <put_pixel+0x38>)
 8000d30:	f002 fad7 	bl	80032e2 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <put_pixel+0x38>)
 8000d36:	f001 f919 	bl	8001f6c <u8g2_SendBuffer>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000434 	.word	0x20000434

08000d48 <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4809      	ldr	r0, [pc, #36]	; (8000d80 <erase_pixel+0x38>)
 8000d5c:	f002 faf4 	bl	8003348 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	79ba      	ldrb	r2, [r7, #6]
 8000d66:	b292      	uxth	r2, r2
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <erase_pixel+0x38>)
 8000d6c:	f002 fab9 	bl	80032e2 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <erase_pixel+0x38>)
 8000d72:	f001 f8fb 	bl	8001f6c <u8g2_SendBuffer>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000434 	.word	0x20000434

08000d84 <put_byte>:
 *	Desenha um byte na posição [x,row] onde x varia de 0-121 e y varia de 0-3
 *	FE 3E [x] [row] [byte] [4 dummy bytes] FD
 *	254 62 [x] [row] [byte] [4 dummy bytes]  253
 *	254 `>` [x] [row] [byte] [4 dummy bytes]  253
 */
void put_byte(uint8_t x, uint8_t row, uint8_t byte){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	460b      	mov	r3, r1
 8000d90:	71bb      	strb	r3, [r7, #6]
 8000d92:	4613      	mov	r3, r2
 8000d94:	717b      	strb	r3, [r7, #5]
	char arr[8], i;
	memset(arr, 0, 8);
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f00b ff32 	bl	800cc08 <memset>
	for(i=0; byte > 0; i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	75fb      	strb	r3, [r7, #23]
 8000da8:	e00e      	b.n	8000dc8 <put_byte+0x44>
	  {
	    arr[i] = byte%2;
 8000daa:	7dfb      	ldrb	r3, [r7, #23]
 8000dac:	797a      	ldrb	r2, [r7, #5]
 8000dae:	f002 0201 	and.w	r2, r2, #1
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	3318      	adds	r3, #24
 8000db6:	443b      	add	r3, r7
 8000db8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	    byte = byte/2;
 8000dbc:	797b      	ldrb	r3, [r7, #5]
 8000dbe:	085b      	lsrs	r3, r3, #1
 8000dc0:	717b      	strb	r3, [r7, #5]
	for(i=0; byte > 0; i++)
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	75fb      	strb	r3, [r7, #23]
 8000dc8:	797b      	ldrb	r3, [r7, #5]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1ed      	bne.n	8000daa <put_byte+0x26>
	  }
	row = row * ((u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS);
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <put_byte+0x8c>)
 8000dd0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <put_byte+0x90>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	79ba      	ldrb	r2, [r7, #6]
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	71bb      	strb	r3, [r7, #6]
	u8g2_DrawXBM(&u8g2 , x, row, 1, 8, arr);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	b299      	uxth	r1, r3
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	2308      	movs	r3, #8
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <put_byte+0x8c>)
 8000dfc:	f000 ff6d 	bl	8001cda <u8g2_DrawXBM>
	u8g2_SendBuffer(&u8g2);
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <put_byte+0x8c>)
 8000e02:	f001 f8b3 	bl	8001f6c <u8g2_SendBuffer>

}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000434 	.word	0x20000434
 8000e14:	2000022f 	.word	0x2000022f

08000e18 <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8000e1c:	f003 fad5 	bl	80043ca <HAL_NVIC_SystemReset>
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	text_insertion_point(0, 0);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fe56 	bl	8000adc <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <clear_display+0x18>)
 8000e32:	f001 fa49 	bl	80022c8 <u8g2_ClearDisplay>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000434 	.word	0x20000434

08000e40 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	if(enable){
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d00e      	beq.n	8000e6e <enable_backlight+0x2e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2110      	movs	r1, #16
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <enable_backlight+0x48>)
 8000e56:	f003 fc4d 	bl	80046f4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <enable_backlight+0x4c>)
 8000e5e:	f006 f983 	bl	8007168 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT );
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <enable_backlight+0x50>)
 8000e64:	881a      	ldrh	r2, [r3, #0]
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <enable_backlight+0x4c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	}
}
 8000e6c:	e008      	b.n	8000e80 <enable_backlight+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2110      	movs	r1, #16
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <enable_backlight+0x48>)
 8000e74:	f003 fc3e 	bl	80046f4 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4804      	ldr	r0, [pc, #16]	; (8000e8c <enable_backlight+0x4c>)
 8000e7c:	f006 fa16 	bl	80072ac <HAL_TIM_PWM_Stop>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	20000694 	.word	0x20000694
 8000e90:	2000022c 	.word	0x2000022c

08000e94 <set_backlight_brightness>:
 * Define o brlho do backlight em um dos niveis pre-configurados, [bright] varia de 1-7
 *   	FE 41 [bright] FD
 *		254 64 [bright] 253
 *		254 'A' [bright] 253
 */
void set_backlight_brightness(uint8_t bright){
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	if(bright){
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d016      	beq.n	8000ed2 <set_backlight_brightness+0x3e>
	LCD_BRIGHT = (7/bright)*59999;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	0152      	lsls	r2, r2, #5
 8000eb2:	1ad2      	subs	r2, r2, r3
 8000eb4:	0092      	lsls	r2, r2, #2
 8000eb6:	441a      	add	r2, r3
 8000eb8:	4611      	mov	r1, r2
 8000eba:	0109      	lsls	r1, r1, #4
 8000ebc:	1a8a      	subs	r2, r1, r2
 8000ebe:	0152      	lsls	r2, r2, #5
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <set_backlight_brightness+0x48>)
 8000ec6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT);
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <set_backlight_brightness+0x48>)
 8000eca:	881a      	ldrh	r2, [r3, #0]
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <set_backlight_brightness+0x4c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	2000022c 	.word	0x2000022c
 8000ee0:	20000694 	.word	0x20000694

08000ee4 <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast) * 9);
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	00d2      	lsls	r2, r2, #3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <set_contrast+0x24>)
 8000efc:	f002 ffe1 	bl	8003ec2 <u8x8_SetContrast>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000434 	.word	0x20000434

08000f0c <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <disp_splash+0x28>)
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	2318      	movs	r3, #24
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	23b4      	movs	r3, #180	; 0xb4
 8000f1c:	2214      	movs	r2, #20
 8000f1e:	2106      	movs	r1, #6
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <disp_splash+0x2c>)
 8000f22:	f000 feda 	bl	8001cda <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <disp_splash+0x2c>)
 8000f28:	f001 f820 	bl	8001f6c <u8g2_SendBuffer>

}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000004 	.word	0x20000004
 8000f38:	20000434 	.word	0x20000434

08000f3c <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap_t *wrap, uint8_t *txt) {
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	737b      	strb	r3, [r7, #13]

	index = strlen(txt);
 8000f4e:	6838      	ldr	r0, [r7, #0]
 8000f50:	f7ff f8fc 	bl	800014c <strlen>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73bb      	strb	r3, [r7, #14]
	wrap->wrap_times = index / MAX_CHARS_ONSCREEN;
 8000f58:	7bba      	ldrb	r2, [r7, #14]
 8000f5a:	4b43      	ldr	r3, [pc, #268]	; (8001068 <str_warper+0x12c>)
 8000f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f60:	1ad2      	subs	r2, r2, r3
 8000f62:	0852      	lsrs	r2, r2, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	if (wrap->wrap_times) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d071      	beq.n	800105e <str_warper+0x122>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e068      	b.n	8001052 <str_warper+0x116>
			if (aux < N_LINES) {
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	d82f      	bhi.n	8000fe6 <str_warper+0xaa>

				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	461a      	mov	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
						1 : 0;
 8000f98:	2b20      	cmp	r3, #32
 8000f9a:	bf0c      	ite	eq
 8000f9c:	2301      	moveq	r3, #1
 8000f9e:	2300      	movne	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000fa2:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	00da      	lsls	r2, r3, #3
 8000fae:	1ad2      	subs	r2, r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	1898      	adds	r0, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)),
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	00da      	lsls	r2, r3, #3
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8000fc6:	2214      	movs	r2, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f00b fe6d 	bl	800cca8 <strncpy>
						MAX_CHARS_ONSCREEN - 1);
				wrap->wrap_str[aux][MAX_CHARS_ONSCREEN - 1] = '\0';
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00da      	lsls	r2, r3, #3
 8000fda:	1ad2      	subs	r2, r2, r3
 8000fdc:	188b      	adds	r3, r1, r2
 8000fde:	3314      	adds	r3, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e032      	b.n	800104c <str_warper+0x110>
			} else {
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
						0 : 1;
 8000ff8:	2b20      	cmp	r3, #32
 8000ffa:	bf14      	ite	ne
 8000ffc:	2301      	movne	r3, #1
 8000ffe:	2300      	moveq	r3, #0
 8001000:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8001002:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	00da      	lsls	r2, r3, #3
 800100e:	1ad2      	subs	r2, r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	189c      	adds	r4, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)) + shift,
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	00da      	lsls	r2, r3, #3
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	461a      	mov	r2, r3
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	4413      	add	r3, r2
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	18d5      	adds	r5, r2, r3
						strlen(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))));
 800102a:	7bfa      	ldrb	r2, [r7, #15]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	461a      	mov	r2, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f886 	bl	800014c <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	461a      	mov	r2, r3
 8001044:	4629      	mov	r1, r5
 8001046:	4620      	mov	r0, r4
 8001048:	f00b fe2e 	bl	800cca8 <strncpy>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	3301      	adds	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001058:	7bfa      	ldrb	r2, [r7, #15]
 800105a:	429a      	cmp	r2, r3
 800105c:	d990      	bls.n	8000f80 <str_warper+0x44>
			}
		}
	}
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bdb0      	pop	{r4, r5, r7, pc}
 8001066:	bf00      	nop
 8001068:	86186187 	.word	0x86186187

0800106c <lcd_print>:
void test_font(void) {
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}

void lcd_print(uint8_t *txt) {
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b0a3      	sub	sp, #140	; 0x8c
 8001070:	af04      	add	r7, sp, #16
 8001072:	6078      	str	r0, [r7, #4]
	txt_wrap_t wrap;
	uint8_t aux = 0, i;
 8001074:	2300      	movs	r3, #0
 8001076:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	bool clean_it = false;
 800107a:	2300      	movs	r3, #0
 800107c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	if (text_invertion) {
 8001080:	4b88      	ldr	r3, [pc, #544]	; (80012a4 <lcd_print+0x238>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d06e      	beq.n	8001166 <lcd_print+0xfa>
		if (text_wrap) {
 8001088:	4b87      	ldr	r3, [pc, #540]	; (80012a8 <lcd_print+0x23c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d047      	beq.n	8001120 <lcd_print+0xb4>
			str_warper(&wrap, txt);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff50 	bl	8000f3c <str_warper>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80010a2:	e036      	b.n	8001112 <lcd_print+0xa6>
				//cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80010a4:	4b81      	ldr	r3, [pc, #516]	; (80012ac <lcd_print+0x240>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b298      	uxth	r0, r3
 80010aa:	4b80      	ldr	r3, [pc, #512]	; (80012ac <lcd_print+0x240>)
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	b29c      	uxth	r4, r3
						0, 0, 0, wrap.wrap_str[aux]);
 80010b0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80010b4:	f107 010c 	add.w	r1, r7, #12
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	00da      	lsls	r2, r3, #3
 80010c0:	1ad2      	subs	r2, r2, r3
 80010c2:	188b      	adds	r3, r1, r2
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80010c4:	9303      	str	r3, [sp, #12]
 80010c6:	2300      	movs	r3, #0
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	2300      	movs	r3, #0
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	2300      	movs	r3, #0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2320      	movs	r3, #32
 80010d4:	4622      	mov	r2, r4
 80010d6:	4601      	mov	r1, r0
 80010d8:	4875      	ldr	r0, [pc, #468]	; (80012b0 <lcd_print+0x244>)
 80010da:	f001 f8a1 	bl	8002220 <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 80010de:	4874      	ldr	r0, [pc, #464]	; (80012b0 <lcd_print+0x244>)
 80010e0:	f000 ff44 	bl	8001f6c <u8g2_SendBuffer>
				clean_it = !clean_it;
 80010e4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	bf14      	ite	ne
 80010ec:	2301      	movne	r3, #1
 80010ee:	2300      	moveq	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80010fc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8001108:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800110c:	3301      	adds	r3, #1
 800110e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001112:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001116:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800111a:	429a      	cmp	r2, r3
 800111c:	d9c2      	bls.n	80010a4 <lcd_print+0x38>
 800111e:	e0a0      	b.n	8001262 <lcd_print+0x1f6>
				 cursor[0] += u8g2_GetStrWidth(&u8g2,
				 wrap.wrap_str[aux - 1]);
				 }*/
			}
		} else {
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 8001120:	4b62      	ldr	r3, [pc, #392]	; (80012ac <lcd_print+0x240>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b299      	uxth	r1, r3
 8001126:	4b61      	ldr	r3, [pc, #388]	; (80012ac <lcd_print+0x240>)
 8001128:	785b      	ldrb	r3, [r3, #1]
 800112a:	b29a      	uxth	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	9303      	str	r3, [sp, #12]
 8001130:	2300      	movs	r3, #0
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2300      	movs	r3, #0
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	2300      	movs	r3, #0
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2320      	movs	r3, #32
 800113e:	485c      	ldr	r0, [pc, #368]	; (80012b0 <lcd_print+0x244>)
 8001140:	f001 f86e 	bl	8002220 <u8g2_DrawButtonUTF8>
					0, txt);
			u8g2_SendBuffer(&u8g2);
 8001144:	485a      	ldr	r0, [pc, #360]	; (80012b0 <lcd_print+0x244>)
 8001146:	f000 ff11 	bl	8001f6c <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4858      	ldr	r0, [pc, #352]	; (80012b0 <lcd_print+0x244>)
 800114e:	f001 ff75 	bl	800303c <u8g2_GetStrWidth>
 8001152:	4603      	mov	r3, r0
 8001154:	4619      	mov	r1, r3
 8001156:	4b55      	ldr	r3, [pc, #340]	; (80012ac <lcd_print+0x240>)
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	b2cb      	uxtb	r3, r1
 800115c:	4413      	add	r3, r2
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b52      	ldr	r3, [pc, #328]	; (80012ac <lcd_print+0x240>)
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e07d      	b.n	8001262 <lcd_print+0x1f6>
		}

	} else {
		if (text_wrap) {
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <lcd_print+0x23c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d05f      	beq.n	800122e <lcd_print+0x1c2>
			str_warper(&wrap, txt);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fee1 	bl	8000f3c <str_warper>
			if (wrap.wrap_times) {
 800117a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800117e:	2b00      	cmp	r3, #0
 8001180:	d047      	beq.n	8001212 <lcd_print+0x1a6>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8001182:	2300      	movs	r3, #0
 8001184:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001188:	e03c      	b.n	8001204 <lcd_print+0x198>
					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],
 800118a:	4b48      	ldr	r3, [pc, #288]	; (80012ac <lcd_print+0x240>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b298      	uxth	r0, r3
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <lcd_print+0x240>)
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	b29c      	uxth	r4, r3
							wrap.wrap_str[aux]);
 8001196:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800119a:	f107 010c 	add.w	r1, r7, #12
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	00da      	lsls	r2, r3, #3
 80011a6:	1ad2      	subs	r2, r2, r3
 80011a8:	188b      	adds	r3, r1, r2
					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],
 80011aa:	4622      	mov	r2, r4
 80011ac:	4601      	mov	r1, r0
 80011ae:	4840      	ldr	r0, [pc, #256]	; (80012b0 <lcd_print+0x244>)
 80011b0:	f001 fe08 	bl	8002dc4 <u8g2_DrawUTF8>
					u8g2_SendBuffer(&u8g2);
 80011b4:	483e      	ldr	r0, [pc, #248]	; (80012b0 <lcd_print+0x244>)
 80011b6:	f000 fed9 	bl	8001f6c <u8g2_SendBuffer>

					cursor[1] += (u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS;
 80011ba:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <lcd_print+0x240>)
 80011bc:	785a      	ldrb	r2, [r3, #1]
 80011be:	4b3c      	ldr	r3, [pc, #240]	; (80012b0 <lcd_print+0x244>)
 80011c0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80011c4:	b2d9      	uxtb	r1, r3
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <lcd_print+0x248>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	1acb      	subs	r3, r1, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <lcd_print+0x240>)
 80011d4:	705a      	strb	r2, [r3, #1]

					clean_it = !clean_it;
 80011d6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf14      	ite	ne
 80011de:	2301      	movne	r3, #1
 80011e0:	2300      	moveq	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80011ee:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 80011fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80011fe:	3301      	adds	r3, #1
 8001200:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001204:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001208:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800120c:	429a      	cmp	r2, r3
 800120e:	d9bc      	bls.n	800118a <lcd_print+0x11e>
 8001210:	e027      	b.n	8001262 <lcd_print+0x1f6>
				}
			} else {
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <lcd_print+0x240>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b299      	uxth	r1, r3
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <lcd_print+0x240>)
 800121a:	785b      	ldrb	r3, [r3, #1]
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4823      	ldr	r0, [pc, #140]	; (80012b0 <lcd_print+0x244>)
 8001222:	f001 fdcf 	bl	8002dc4 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 8001226:	4822      	ldr	r0, [pc, #136]	; (80012b0 <lcd_print+0x244>)
 8001228:	f000 fea0 	bl	8001f6c <u8g2_SendBuffer>
 800122c:	e019      	b.n	8001262 <lcd_print+0x1f6>
			 cursor[0] = 0;
			 } else {
			 cursor[0] += u8g2_GetStrWidth(&u8g2, wrap.wrap_str[aux - 1]);
			 }*/
		} else {
			u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <lcd_print+0x240>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	b299      	uxth	r1, r3
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <lcd_print+0x240>)
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	481c      	ldr	r0, [pc, #112]	; (80012b0 <lcd_print+0x244>)
 800123e:	f001 fdc1 	bl	8002dc4 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 8001242:	481b      	ldr	r0, [pc, #108]	; (80012b0 <lcd_print+0x244>)
 8001244:	f000 fe92 	bl	8001f6c <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4819      	ldr	r0, [pc, #100]	; (80012b0 <lcd_print+0x244>)
 800124c:	f001 fef6 	bl	800303c <u8g2_GetStrWidth>
 8001250:	4603      	mov	r3, r0
 8001252:	4619      	mov	r1, r3
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <lcd_print+0x240>)
 8001256:	781a      	ldrb	r2, [r3, #0]
 8001258:	b2cb      	uxtb	r3, r1
 800125a:	4413      	add	r3, r2
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <lcd_print+0x240>)
 8001260:	701a      	strb	r2, [r3, #0]
		}
	}
	if (clean_it) {
 8001262:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001266:	2b00      	cmp	r3, #0
 8001268:	d018      	beq.n	800129c <lcd_print+0x230>

		memset(wrap.wrap_str, 0, sizeof(wrap.wrap_str));
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2269      	movs	r2, #105	; 0x69
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f00b fcc8 	bl	800cc08 <memset>
		clean_it = !clean_it;
 8001278:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f083 0301 	eor.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001290:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	}
}
 800129c:	bf00      	nop
 800129e:	377c      	adds	r7, #124	; 0x7c
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	200005b9 	.word	0x200005b9
 80012a8:	200005ba 	.word	0x200005ba
 80012ac:	200005bc 	.word	0x200005bc
 80012b0:	20000434 	.word	0x20000434
 80012b4:	2000022f 	.word	0x2000022f

080012b8 <custom_character_dealer>:

void custom_character_dealer(uint8_t index){
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af02      	add	r7, sp, #8
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	uint8_t char_w = 8;
 80012c2:	2308      	movs	r3, #8
 80012c4:	73fb      	strb	r3, [r7, #15]
	uint8_t char_h = 6;
 80012c6:	2306      	movs	r3, #6
 80012c8:	73bb      	strb	r3, [r7, #14]
	if((custom_character_db[index].custo_character_index)){
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	4918      	ldr	r1, [pc, #96]	; (8001330 <custom_character_dealer+0x78>)
 80012ce:	4613      	mov	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	1a9b      	subs	r3, r3, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	3306      	adds	r3, #6
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d024      	beq.n	8001328 <custom_character_dealer+0x70>
		u8g2_DrawXBM(&u8g2 , cursor[0], cursor[1], char_w, char_h, custom_character_db[index].custom_caracter);
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <custom_character_dealer+0x7c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b298      	uxth	r0, r3
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <custom_character_dealer+0x7c>)
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	b29c      	uxth	r4, r3
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	b29d      	uxth	r5, r3
 80012ee:	7bbb      	ldrb	r3, [r7, #14]
 80012f0:	b299      	uxth	r1, r3
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	1a9b      	subs	r3, r3, r2
 80012fa:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <custom_character_dealer+0x78>)
 80012fc:	4413      	add	r3, r2
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	9100      	str	r1, [sp, #0]
 8001302:	462b      	mov	r3, r5
 8001304:	4622      	mov	r2, r4
 8001306:	4601      	mov	r1, r0
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <custom_character_dealer+0x80>)
 800130a:	f000 fce6 	bl	8001cda <u8g2_DrawXBM>
		u8g2_SendBuffer(&u8g2);
 800130e:	480a      	ldr	r0, [pc, #40]	; (8001338 <custom_character_dealer+0x80>)
 8001310:	f000 fe2c 	bl	8001f6c <u8g2_SendBuffer>
		cursor[0] += u8g2_GetMaxCharWidth(&u8g2);
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <custom_character_dealer+0x7c>)
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <custom_character_dealer+0x80>)
 800131a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <custom_character_dealer+0x7c>)
 8001326:	701a      	strb	r2, [r3, #0]

		//é um custom caracter
		//ele foi definido pelo usuario
		//ele deve ser impresso
	}
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bdb0      	pop	{r4, r5, r7, pc}
 8001330:	200005c0 	.word	0x200005c0
 8001334:	200005bc 	.word	0x200005bc
 8001338:	20000434 	.word	0x20000434

0800133c <Kpd_Irqv_Init>:
#include "usbd_cdc_if.h"

//{set,reset,up,down,left,right}
key_ih IRQ_VECTOR[6];

void Kpd_Irqv_Init(void) {
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
	//
	IRQ_VECTOR[0].IRQn_p = SET_P_EXTI_IRQn;
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <Kpd_Irqv_Init+0x54>)
 8001342:	220a      	movs	r2, #10
 8001344:	705a      	strb	r2, [r3, #1]
	IRQ_VECTOR[0].deb_counter = 0;
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <Kpd_Irqv_Init+0x54>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
	//
	IRQ_VECTOR[1].IRQn_p = RESET_P_EXTI_IRQn;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <Kpd_Irqv_Init+0x54>)
 800134e:	2217      	movs	r2, #23
 8001350:	70da      	strb	r2, [r3, #3]
	IRQ_VECTOR[1].deb_counter = 0;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <Kpd_Irqv_Init+0x54>)
 8001354:	2200      	movs	r2, #0
 8001356:	709a      	strb	r2, [r3, #2]
	//
	IRQ_VECTOR[2].IRQn_p = UP_P_EXTI_IRQn;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <Kpd_Irqv_Init+0x54>)
 800135a:	2217      	movs	r2, #23
 800135c:	715a      	strb	r2, [r3, #5]
	IRQ_VECTOR[2].deb_counter = 0;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <Kpd_Irqv_Init+0x54>)
 8001360:	2200      	movs	r2, #0
 8001362:	711a      	strb	r2, [r3, #4]
	//
	IRQ_VECTOR[3].IRQn_p = DOWN_P_EXTI_IRQn;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <Kpd_Irqv_Init+0x54>)
 8001366:	2217      	movs	r2, #23
 8001368:	71da      	strb	r2, [r3, #7]
	IRQ_VECTOR[3].deb_counter = 0;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <Kpd_Irqv_Init+0x54>)
 800136c:	2200      	movs	r2, #0
 800136e:	719a      	strb	r2, [r3, #6]
	//
	IRQ_VECTOR[4].IRQn_p = LEFT_P_EXTI_IRQn;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <Kpd_Irqv_Init+0x54>)
 8001372:	2217      	movs	r2, #23
 8001374:	725a      	strb	r2, [r3, #9]
	IRQ_VECTOR[4].deb_counter = 0;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <Kpd_Irqv_Init+0x54>)
 8001378:	2200      	movs	r2, #0
 800137a:	721a      	strb	r2, [r3, #8]
	//
	IRQ_VECTOR[5].IRQn_p = RIGHT_P_EXTI_IRQn;
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <Kpd_Irqv_Init+0x54>)
 800137e:	2217      	movs	r2, #23
 8001380:	72da      	strb	r2, [r3, #11]
	IRQ_VECTOR[5].deb_counter = 0;
 8001382:	4b03      	ldr	r3, [pc, #12]	; (8001390 <Kpd_Irqv_Init+0x54>)
 8001384:	2200      	movs	r2, #0
 8001386:	729a      	strb	r2, [r3, #10]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000630 	.word	0x20000630

08001394 <SystickCallback>:

void SystickCallback(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 6; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]
 800139e:	e01b      	b.n	80013d8 <SystickCallback+0x44>
		if (IRQ_VECTOR[i].deb_counter == 0) {
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <SystickCallback+0x54>)
 80013a4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <SystickCallback+0x2c>
			HAL_NVIC_EnableIRQ(IRQ_VECTOR[i].IRQn_p);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <SystickCallback+0x54>)
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 ffea 	bl	8004392 <HAL_NVIC_EnableIRQ>
 80013be:	e008      	b.n	80013d2 <SystickCallback+0x3e>
		} else {
			IRQ_VECTOR[i].deb_counter--;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <SystickCallback+0x54>)
 80013c4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80013c8:	3a01      	subs	r2, #1
 80013ca:	b2d1      	uxtb	r1, r2
 80013cc:	4a06      	ldr	r2, [pc, #24]	; (80013e8 <SystickCallback+0x54>)
 80013ce:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 6; i++) {
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	3301      	adds	r3, #1
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d9e0      	bls.n	80013a0 <SystickCallback+0xc>
		}
	}
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000630 	.word	0x20000630

080013ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SET_P_Pin) {
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	2b10      	cmp	r3, #16
 80013fa:	d10d      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_NVIC_DisableIRQ(IRQ_VECTOR[0].IRQn_p);
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_GPIO_EXTI_Callback+0x34>)
 80013fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001402:	4618      	mov	r0, r3
 8001404:	f002 ffd3 	bl	80043ae <HAL_NVIC_DisableIRQ>
		IRQ_VECTOR[0].deb_counter = DEBOUNCE_TIME;
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_GPIO_EXTI_Callback+0x34>)
 800140a:	22f4      	movs	r2, #244	; 0xf4
 800140c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800140e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001412:	4804      	ldr	r0, [pc, #16]	; (8001424 <HAL_GPIO_EXTI_Callback+0x38>)
 8001414:	f003 f986 	bl	8004724 <HAL_GPIO_TogglePin>
	}
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000630 	.word	0x20000630
 8001424:	40011000 	.word	0x40011000

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142c:	f002 fdfe 	bl	800402c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001430:	f000 f80e 	bl	8001450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001434:	f000 f988 	bl	8001748 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001438:	f00a feec 	bl	800c214 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800143c:	f000 f862 	bl	8001504 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001440:	f000 f936 	bl	80016b0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001444:	f000 f894 	bl	8001570 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 8001448:	f7fe ff06 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 800144c:	bf30      	wfi
 800144e:	e7fd      	b.n	800144c <main+0x24>

08001450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b094      	sub	sp, #80	; 0x50
 8001454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145a:	2228      	movs	r2, #40	; 0x28
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f00b fbd2 	bl	800cc08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001480:	2301      	movs	r3, #1
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001484:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148e:	2301      	movs	r3, #1
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001492:	2302      	movs	r3, #2
 8001494:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800149a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800149c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a6:	4618      	mov	r0, r3
 80014a8:	f004 fe32 	bl	8006110 <HAL_RCC_OscConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014b2:	f000 f9fd 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b6:	230f      	movs	r3, #15
 80014b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2102      	movs	r1, #2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 f89e 	bl	8006614 <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014de:	f000 f9e7 	bl	80018b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014e2:	2310      	movs	r3, #16
 80014e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4618      	mov	r0, r3
 80014ee:	f005 f9f7 	bl	80068e0 <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80014f8:	f000 f9da 	bl	80018b0 <Error_Handler>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3750      	adds	r7, #80	; 0x50
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_SPI1_Init+0x64>)
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <MX_SPI1_Init+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_SPI1_Init+0x64>)
 8001510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001514:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_SPI1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_SPI1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_SPI1_Init+0x64>)
 8001530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001534:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_SPI1_Init+0x64>)
 8001538:	2208      	movs	r2, #8
 800153a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_SPI1_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_SPI1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_SPI1_Init+0x64>)
 8001550:	220a      	movs	r2, #10
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_SPI1_Init+0x64>)
 8001556:	f005 fa79 	bl	8006a4c <HAL_SPI_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001560:	f000 f9a6 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000063c 	.word	0x2000063c
 800156c:	40013000 	.word	0x40013000

08001570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b096      	sub	sp, #88	; 0x58
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2220      	movs	r2, #32
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00b fb2d 	bl	800cc08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <MX_TIM1_Init+0x138>)
 80015b0:	4a3e      	ldr	r2, [pc, #248]	; (80016ac <MX_TIM1_Init+0x13c>)
 80015b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015b4:	4b3c      	ldr	r3, [pc, #240]	; (80016a8 <MX_TIM1_Init+0x138>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ba:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <MX_TIM1_Init+0x138>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 80015c0:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <MX_TIM1_Init+0x138>)
 80015c2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80015c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <MX_TIM1_Init+0x138>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015ce:	4b36      	ldr	r3, [pc, #216]	; (80016a8 <MX_TIM1_Init+0x138>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <MX_TIM1_Init+0x138>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015da:	4833      	ldr	r0, [pc, #204]	; (80016a8 <MX_TIM1_Init+0x138>)
 80015dc:	f005 fc9c 	bl	8006f18 <HAL_TIM_Base_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015e6:	f000 f963 	bl	80018b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015f4:	4619      	mov	r1, r3
 80015f6:	482c      	ldr	r0, [pc, #176]	; (80016a8 <MX_TIM1_Init+0x138>)
 80015f8:	f006 f882 	bl	8007700 <HAL_TIM_ConfigClockSource>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001602:	f000 f955 	bl	80018b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001606:	4828      	ldr	r0, [pc, #160]	; (80016a8 <MX_TIM1_Init+0x138>)
 8001608:	f005 fd56 	bl	80070b8 <HAL_TIM_PWM_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001612:	f000 f94d 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800161e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001622:	4619      	mov	r1, r3
 8001624:	4820      	ldr	r0, [pc, #128]	; (80016a8 <MX_TIM1_Init+0x138>)
 8001626:	f006 fbf7 	bl	8007e18 <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001630:	f000 f93e 	bl	80018b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001634:	2360      	movs	r3, #96	; 0x60
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163c:	2300      	movs	r3, #0
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001640:	2300      	movs	r3, #0
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	2200      	movs	r2, #0
 8001656:	4619      	mov	r1, r3
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <MX_TIM1_Init+0x138>)
 800165a:	f005 ff93 	bl	8007584 <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001664:	f000 f924 	bl	80018b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800167c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001680:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM1_Init+0x138>)
 800168c:	f006 fc22 	bl	8007ed4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001696:	f000 f90b 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM1_Init+0x138>)
 800169c:	f000 f9c6 	bl	8001a2c <HAL_TIM_MspPostInit>

}
 80016a0:	bf00      	nop
 80016a2:	3758      	adds	r7, #88	; 0x58
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000694 	.word	0x20000694
 80016ac:	40012c00 	.word	0x40012c00

080016b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_TIM2_Init+0x94>)
 80016ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_TIM2_Init+0x94>)
 80016d6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80016da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_TIM2_Init+0x94>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_TIM2_Init+0x94>)
 80016e4:	221d      	movs	r2, #29
 80016e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_TIM2_Init+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_TIM2_Init+0x94>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <MX_TIM2_Init+0x94>)
 80016f6:	f005 fc0f 	bl	8006f18 <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001700:	f000 f8d6 	bl	80018b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <MX_TIM2_Init+0x94>)
 8001712:	f005 fff5 	bl	8007700 <HAL_TIM_ConfigClockSource>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800171c:	f000 f8c8 	bl	80018b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_TIM2_Init+0x94>)
 800172e:	f006 fb73 	bl	8007e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001738:	f000 f8ba 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200006dc 	.word	0x200006dc

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	4b4f      	ldr	r3, [pc, #316]	; (800189c <MX_GPIO_Init+0x154>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a4e      	ldr	r2, [pc, #312]	; (800189c <MX_GPIO_Init+0x154>)
 8001762:	f043 0310 	orr.w	r3, r3, #16
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b4c      	ldr	r3, [pc, #304]	; (800189c <MX_GPIO_Init+0x154>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001774:	4b49      	ldr	r3, [pc, #292]	; (800189c <MX_GPIO_Init+0x154>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a48      	ldr	r2, [pc, #288]	; (800189c <MX_GPIO_Init+0x154>)
 800177a:	f043 0320 	orr.w	r3, r3, #32
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <MX_GPIO_Init+0x154>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0320 	and.w	r3, r3, #32
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b43      	ldr	r3, [pc, #268]	; (800189c <MX_GPIO_Init+0x154>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a42      	ldr	r2, [pc, #264]	; (800189c <MX_GPIO_Init+0x154>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b40      	ldr	r3, [pc, #256]	; (800189c <MX_GPIO_Init+0x154>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a4:	4b3d      	ldr	r3, [pc, #244]	; (800189c <MX_GPIO_Init+0x154>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a3c      	ldr	r2, [pc, #240]	; (800189c <MX_GPIO_Init+0x154>)
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <MX_GPIO_Init+0x154>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0308 	and.w	r3, r3, #8
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c2:	4837      	ldr	r0, [pc, #220]	; (80018a0 <MX_GPIO_Init+0x158>)
 80017c4:	f002 ff96 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2110      	movs	r1, #16
 80017cc:	4835      	ldr	r0, [pc, #212]	; (80018a4 <MX_GPIO_Init+0x15c>)
 80017ce:	f002 ff91 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2140      	movs	r1, #64	; 0x40
 80017d6:	4833      	ldr	r0, [pc, #204]	; (80018a4 <MX_GPIO_Init+0x15c>)
 80017d8:	f002 ff8c 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	2103      	movs	r1, #3
 80017e0:	4831      	ldr	r0, [pc, #196]	; (80018a8 <MX_GPIO_Init+0x160>)
 80017e2:	f002 ff87 	bl	80046f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	4619      	mov	r1, r3
 80017fe:	4828      	ldr	r0, [pc, #160]	; (80018a0 <MX_GPIO_Init+0x158>)
 8001800:	f002 fdf4 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001804:	2310      	movs	r3, #16
 8001806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2302      	movs	r3, #2
 8001812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0310 	add.w	r3, r7, #16
 8001818:	4619      	mov	r1, r3
 800181a:	4822      	ldr	r0, [pc, #136]	; (80018a4 <MX_GPIO_Init+0x15c>)
 800181c:	f002 fde6 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001820:	2340      	movs	r3, #64	; 0x40
 8001822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2302      	movs	r3, #2
 800182e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	4619      	mov	r1, r3
 8001836:	481b      	ldr	r0, [pc, #108]	; (80018a4 <MX_GPIO_Init+0x15c>)
 8001838:	f002 fdd8 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800183c:	2303      	movs	r3, #3
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2302      	movs	r3, #2
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4619      	mov	r1, r3
 8001852:	4815      	ldr	r0, [pc, #84]	; (80018a8 <MX_GPIO_Init+0x160>)
 8001854:	f002 fdca 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_P_Pin RESET_P_Pin UP_P_Pin DOWN_P_Pin
                           LEFT_P_Pin RIGHT_P_Pin */
  GPIO_InitStruct.Pin = SET_P_Pin|RESET_P_Pin|UP_P_Pin|DOWN_P_Pin
 8001858:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800185c:	613b      	str	r3, [r7, #16]
                          |LEFT_P_Pin|RIGHT_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_GPIO_Init+0x164>)
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001862:	2301      	movs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4619      	mov	r1, r3
 800186c:	480e      	ldr	r0, [pc, #56]	; (80018a8 <MX_GPIO_Init+0x160>)
 800186e:	f002 fdbd 	bl	80043ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	200a      	movs	r0, #10
 8001878:	f002 fd6f 	bl	800435a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800187c:	200a      	movs	r0, #10
 800187e:	f002 fd88 	bl	8004392 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2017      	movs	r0, #23
 8001888:	f002 fd67 	bl	800435a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800188c:	2017      	movs	r0, #23
 800188e:	f002 fd80 	bl	8004392 <HAL_NVIC_EnableIRQ>

}
 8001892:	bf00      	nop
 8001894:	3720      	adds	r7, #32
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	40011000 	.word	0x40011000
 80018a4:	40010800 	.word	0x40010800
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	10210000 	.word	0x10210000

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <Error_Handler+0x8>
	...

080018bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_MspInit+0x7c>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <HAL_MspInit+0x7c>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6193      	str	r3, [r2, #24]
 80018ce:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_MspInit+0x7c>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_MspInit+0x7c>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a16      	ldr	r2, [pc, #88]	; (8001938 <HAL_MspInit+0x7c>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <HAL_MspInit+0x7c>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2005      	movs	r0, #5
 80018f8:	f002 fd2f 	bl	800435a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80018fc:	2005      	movs	r0, #5
 80018fe:	f002 fd48 	bl	8004392 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	2005      	movs	r0, #5
 8001908:	f002 fd27 	bl	800435a <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800190c:	2005      	movs	r0, #5
 800190e:	f002 fd40 	bl	8004392 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_MspInit+0x80>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_MspInit+0x80>)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000

08001940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <HAL_SPI_MspInit+0x70>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d123      	bne.n	80019a8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_SPI_MspInit+0x74>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_SPI_MspInit+0x74>)
 8001966:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_SPI_MspInit+0x74>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_SPI_MspInit+0x74>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_SPI_MspInit+0x74>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_SPI_MspInit+0x74>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001990:	23a0      	movs	r3, #160	; 0xa0
 8001992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	4619      	mov	r1, r3
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <HAL_SPI_MspInit+0x78>)
 80019a4:	f002 fd22 	bl	80043ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40013000 	.word	0x40013000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010800 	.word	0x40010800

080019bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <HAL_TIM_Base_MspInit+0x68>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d10c      	bne.n	80019e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019d8:	6193      	str	r3, [r2, #24]
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019e6:	e018      	b.n	8001a1a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f0:	d113      	bne.n	8001a1a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a0c      	ldr	r2, [pc, #48]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_TIM_Base_MspInit+0x6c>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	201c      	movs	r0, #28
 8001a10:	f002 fca3 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a14:	201c      	movs	r0, #28
 8001a16:	f002 fcbc 	bl	8004392 <HAL_NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40012c00 	.word	0x40012c00
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_TIM_MspPostInit+0x5c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d118      	bne.n	8001a7e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_TIM_MspPostInit+0x60>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_TIM_MspPostInit+0x60>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_TIM_MspPostInit+0x60>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_TIM_MspPostInit+0x64>)
 8001a7a:	f002 fcb7 	bl	80043ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40012c00 	.word	0x40012c00
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010800 	.word	0x40010800

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickCallback();
 8001ada:	f7ff fc5b 	bl	8001394 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ade:	f002 faeb 	bl	80040b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_P_Pin);
 8001af6:	2010      	movs	r0, #16
 8001af8:	f002 fe2e 	bl	8004758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001b06:	f002 ff70 	bl	80049ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200019c4 	.word	0x200019c4

08001b14 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b1a:	f002 ff66 	bl	80049ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200019c4 	.word	0x200019c4

08001b28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_P_Pin);
 8001b2c:	2020      	movs	r0, #32
 8001b2e:	f002 fe13 	bl	8004758 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_P_Pin);
 8001b32:	2040      	movs	r0, #64	; 0x40
 8001b34:	f002 fe10 	bl	8004758 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_P_Pin);
 8001b38:	2080      	movs	r0, #128	; 0x80
 8001b3a:	f002 fe0d 	bl	8004758 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_P_Pin);
 8001b3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b42:	f002 fe09 	bl	8004758 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_P_Pin);
 8001b46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b4a:	f002 fe05 	bl	8004758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b58:	4802      	ldr	r0, [pc, #8]	; (8001b64 <TIM2_IRQHandler+0x10>)
 8001b5a:	f005 fc0b 	bl	8007374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200006dc 	.word	0x200006dc

08001b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <_sbrk+0x5c>)
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <_sbrk+0x60>)
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b84:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <_sbrk+0x64>)
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <_sbrk+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d207      	bcs.n	8001ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b98:	f00a fffe 	bl	800cb98 <__errno>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba6:	e009      	b.n	8001bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <_sbrk+0x64>)
 8001bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20005000 	.word	0x20005000
 8001bc8:	00000400 	.word	0x00000400
 8001bcc:	20000724 	.word	0x20000724
 8001bd0:	20001ee0 	.word	0x20001ee0

08001bd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b088      	sub	sp, #32
 8001c02:	af02      	add	r7, sp, #8
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	4608      	mov	r0, r1
 8001c08:	4611      	mov	r1, r2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	817b      	strh	r3, [r7, #10]
 8001c10:	460b      	mov	r3, r1
 8001c12:	813b      	strh	r3, [r7, #8]
 8001c14:	4613      	mov	r3, r2
 8001c16:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001c1e:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001c20:	7dbb      	ldrb	r3, [r7, #22]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001c2e:	897a      	ldrh	r2, [r7, #10]
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	4413      	add	r3, r2
 8001c34:	b298      	uxth	r0, r3
 8001c36:	893b      	ldrh	r3, [r7, #8]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	893a      	ldrh	r2, [r7, #8]
 8001c3e:	8979      	ldrh	r1, [r7, #10]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	4603      	mov	r3, r0
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f001 fbc8 	bl	80033da <u8g2_IsIntersection>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d040      	beq.n	8001cd2 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001c50:	2301      	movs	r3, #1
 8001c52:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001c54:	e035      	b.n	8001cc2 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	7dba      	ldrb	r2, [r7, #22]
 8001c68:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001c6c:	893a      	ldrh	r2, [r7, #8]
 8001c6e:	8979      	ldrh	r1, [r7, #10]
 8001c70:	2300      	movs	r3, #0
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2301      	movs	r3, #1
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f001 fa76 	bl	8003168 <u8g2_DrawHVLine>
 8001c7c:	e010      	b.n	8001ca0 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	7d7a      	ldrb	r2, [r7, #21]
 8001c8c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001c90:	893a      	ldrh	r2, [r7, #8]
 8001c92:	8979      	ldrh	r1, [r7, #10]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f001 fa64 	bl	8003168 <u8g2_DrawHVLine>
    }
    x++;
 8001ca0:	897b      	ldrh	r3, [r7, #10]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d104      	bne.n	8001cbc <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
      b++;
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1c6      	bne.n	8001c56 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	7dba      	ldrb	r2, [r7, #22]
 8001ccc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001cd0:	e000      	b.n	8001cd4 <u8g2_DrawHXBM+0xd6>
    return;
 8001cd2:	bf00      	nop
}
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b088      	sub	sp, #32
 8001cde:	af02      	add	r7, sp, #8
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	817b      	strh	r3, [r7, #10]
 8001cec:	460b      	mov	r3, r1
 8001cee:	813b      	strh	r3, [r7, #8]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001cf8:	8afb      	ldrh	r3, [r7, #22]
 8001cfa:	3307      	adds	r3, #7
 8001cfc:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001cfe:	8afb      	ldrh	r3, [r7, #22]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001d04:	897a      	ldrh	r2, [r7, #10]
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	4413      	add	r3, r2
 8001d0a:	b298      	uxth	r0, r3
 8001d0c:	893a      	ldrh	r2, [r7, #8]
 8001d0e:	8c3b      	ldrh	r3, [r7, #32]
 8001d10:	4413      	add	r3, r2
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	893a      	ldrh	r2, [r7, #8]
 8001d16:	8979      	ldrh	r1, [r7, #10]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f001 fb5c 	bl	80033da <u8g2_IsIntersection>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d017      	beq.n	8001d58 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001d28:	e012      	b.n	8001d50 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001d2a:	88f8      	ldrh	r0, [r7, #6]
 8001d2c:	893a      	ldrh	r2, [r7, #8]
 8001d2e:	8979      	ldrh	r1, [r7, #10]
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4603      	mov	r3, r0
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7ff ff61 	bl	8001bfe <u8g2_DrawHXBM>
    bitmap += blen;
 8001d3c:	8afb      	ldrh	r3, [r7, #22]
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d40:	4413      	add	r3, r2
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001d44:	893b      	ldrh	r3, [r7, #8]
 8001d46:	3301      	adds	r3, #1
 8001d48:	813b      	strh	r3, [r7, #8]
    h--;
 8001d4a:	8c3b      	ldrh	r3, [r7, #32]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001d50:	8c3b      	ldrh	r3, [r7, #32]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1e9      	bne.n	8001d2a <u8g2_DrawXBM+0x50>
 8001d56:	e000      	b.n	8001d5a <u8g2_DrawXBM+0x80>
    return;
 8001d58:	bf00      	nop
  }
}
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	4608      	mov	r0, r1
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	817b      	strh	r3, [r7, #10]
 8001d72:	460b      	mov	r3, r1
 8001d74:	813b      	strh	r3, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001d7a:	897a      	ldrh	r2, [r7, #10]
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	4413      	add	r3, r2
 8001d80:	b298      	uxth	r0, r3
 8001d82:	893a      	ldrh	r2, [r7, #8]
 8001d84:	8b3b      	ldrh	r3, [r7, #24]
 8001d86:	4413      	add	r3, r2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	893a      	ldrh	r2, [r7, #8]
 8001d8c:	8979      	ldrh	r1, [r7, #10]
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	4603      	mov	r3, r0
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f001 fb21 	bl	80033da <u8g2_IsIntersection>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d012      	beq.n	8001dc4 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001d9e:	e00d      	b.n	8001dbc <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	893a      	ldrh	r2, [r7, #8]
 8001da4:	8979      	ldrh	r1, [r7, #10]
 8001da6:	2000      	movs	r0, #0
 8001da8:	9000      	str	r0, [sp, #0]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f001 f9dc 	bl	8003168 <u8g2_DrawHVLine>
    y++;    
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	3301      	adds	r3, #1
 8001db4:	813b      	strh	r3, [r7, #8]
    h--;
 8001db6:	8b3b      	ldrh	r3, [r7, #24]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001dbc:	8b3b      	ldrh	r3, [r7, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1ee      	bne.n	8001da0 <u8g2_DrawBox+0x40>
 8001dc2:	e000      	b.n	8001dc6 <u8g2_DrawBox+0x66>
    return;
 8001dc4:	bf00      	nop
  }
}
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	817b      	strh	r3, [r7, #10]
 8001dde:	460b      	mov	r3, r1
 8001de0:	813b      	strh	r3, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001dea:	897a      	ldrh	r2, [r7, #10]
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	4413      	add	r3, r2
 8001df0:	b298      	uxth	r0, r3
 8001df2:	893a      	ldrh	r2, [r7, #8]
 8001df4:	8c3b      	ldrh	r3, [r7, #32]
 8001df6:	4413      	add	r3, r2
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	893a      	ldrh	r2, [r7, #8]
 8001dfc:	8979      	ldrh	r1, [r7, #10]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4603      	mov	r3, r0
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f001 fae9 	bl	80033da <u8g2_IsIntersection>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d037      	beq.n	8001e7e <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	893a      	ldrh	r2, [r7, #8]
 8001e12:	8979      	ldrh	r1, [r7, #10]
 8001e14:	2000      	movs	r0, #0
 8001e16:	9000      	str	r0, [sp, #0]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f001 f9a5 	bl	8003168 <u8g2_DrawHVLine>
  if (h >= 2) {
 8001e1e:	8c3b      	ldrh	r3, [r7, #32]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d92d      	bls.n	8001e80 <u8g2_DrawFrame+0xb4>
    h-=2;
 8001e24:	8c3b      	ldrh	r3, [r7, #32]
 8001e26:	3b02      	subs	r3, #2
 8001e28:	843b      	strh	r3, [r7, #32]
    y++;
 8001e2a:	893b      	ldrh	r3, [r7, #8]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001e30:	8c3b      	ldrh	r3, [r7, #32]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d01a      	beq.n	8001e6c <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001e36:	8c3b      	ldrh	r3, [r7, #32]
 8001e38:	893a      	ldrh	r2, [r7, #8]
 8001e3a:	8979      	ldrh	r1, [r7, #10]
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	9000      	str	r0, [sp, #0]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f001 f991 	bl	8003168 <u8g2_DrawHVLine>
      x+=w;
 8001e46:	897a      	ldrh	r2, [r7, #10]
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	817b      	strh	r3, [r7, #10]
      x--;
 8001e4e:	897b      	ldrh	r3, [r7, #10]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001e54:	8c3b      	ldrh	r3, [r7, #32]
 8001e56:	893a      	ldrh	r2, [r7, #8]
 8001e58:	8979      	ldrh	r1, [r7, #10]
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	9000      	str	r0, [sp, #0]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f001 f982 	bl	8003168 <u8g2_DrawHVLine>
      y+=h;
 8001e64:	893a      	ldrh	r2, [r7, #8]
 8001e66:	8c3b      	ldrh	r3, [r7, #32]
 8001e68:	4413      	add	r3, r2
 8001e6a:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	893a      	ldrh	r2, [r7, #8]
 8001e70:	8af9      	ldrh	r1, [r7, #22]
 8001e72:	2000      	movs	r0, #0
 8001e74:	9000      	str	r0, [sp, #0]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f001 f976 	bl	8003168 <u8g2_DrawHVLine>
 8001e7c:	e000      	b.n	8001e80 <u8g2_DrawFrame+0xb4>
    return;
 8001e7e:	bf00      	nop
  }
}
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	7c1b      	ldrb	r3, [r3, #16]
 8001e94:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f00a fea7 	bl	800cc08 <memset>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af02      	add	r7, sp, #8
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	7c1b      	ldrb	r3, [r3, #16]
 8001ed8:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	89ba      	ldrh	r2, [r7, #12]
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001ef0:	89bb      	ldrh	r3, [r7, #12]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001ef6:	89bb      	ldrh	r3, [r7, #12]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	4413      	add	r3, r2
 8001efc:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001efe:	7bf9      	ldrb	r1, [r7, #15]
 8001f00:	78ba      	ldrb	r2, [r7, #2]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	460b      	mov	r3, r1
 8001f08:	2100      	movs	r1, #0
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f001 ff88 	bl	8003e20 <u8x8_DrawTile>
}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f2a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f32:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	7c5b      	ldrb	r3, [r3, #17]
 8001f3a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001f3c:	7bba      	ldrb	r2, [r7, #14]
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	4619      	mov	r1, r3
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffbd 	bl	8001ec2 <u8g2_send_tile_row>
    src_row++;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	3301      	adds	r3, #1
 8001f52:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	7b7b      	ldrb	r3, [r7, #13]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d203      	bcs.n	8001f64 <u8g2_send_buffer+0x4c>
 8001f5c:	7bba      	ldrb	r2, [r7, #14]
 8001f5e:	7b3b      	ldrb	r3, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d3eb      	bcc.n	8001f3c <u8g2_send_buffer+0x24>
}
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ffcf 	bl	8001f18 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f001 ffb2 	bl	8003ee4 <u8x8_RefreshDisplay>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff5b 	bl	8001e86 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffd8 	bl	8001f88 <u8g2_SetBufferCurrTileRow>
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff95 	bl	8001f18 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ff4:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	4413      	add	r3, r2
 8002000:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	7c5b      	ldrb	r3, [r3, #17]
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	429a      	cmp	r2, r3
 800200c:	d304      	bcc.n	8002018 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f001 ff68 	bl	8003ee4 <u8x8_RefreshDisplay>
    return 0;
 8002014:	2300      	movs	r3, #0
 8002016:	e00d      	b.n	8002034 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ff2f 	bl	8001e86 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	4619      	mov	r1, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffab 	bl	8001f88 <u8g2_SetBufferCurrTileRow>
  return 1;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	4608      	mov	r0, r1
 8002046:	4611      	mov	r1, r2
 8002048:	461a      	mov	r2, r3
 800204a:	4603      	mov	r3, r0
 800204c:	817b      	strh	r3, [r7, #10]
 800204e:	460b      	mov	r3, r1
 8002050:	813b      	strh	r3, [r7, #8]
 8002052:	4613      	mov	r3, r2
 8002054:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 8002056:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002058:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 800205a:	2308      	movs	r3, #8
 800205c:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800206c:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8002074:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800207c:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 8002088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800208a:	3301      	adds	r3, #1
 800208c:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 800208e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002090:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 8002092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002094:	3301      	adds	r3, #1
 8002096:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 8002098:	897b      	ldrh	r3, [r7, #10]
 800209a:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 800209c:	8b7a      	ldrh	r2, [r7, #26]
 800209e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 80020a4:	8b7a      	ldrh	r2, [r7, #26]
 80020a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 80020ac:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80020ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020b0:	4413      	add	r3, r2
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	8c3b      	ldrh	r3, [r7, #32]
 80020ba:	4413      	add	r3, r2
 80020bc:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 80020be:	893b      	ldrh	r3, [r7, #8]
 80020c0:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	4798      	blx	r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	8afb      	ldrh	r3, [r7, #22]
 80020d0:	4413      	add	r3, r2
 80020d2:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 80020d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	8afa      	ldrh	r2, [r7, #22]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 80020e0:	8afa      	ldrh	r2, [r7, #22]
 80020e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 80020e8:	8afa      	ldrh	r2, [r7, #22]
 80020ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 80020f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	b21b      	sxth	r3, r3
 8002100:	b29a      	uxth	r2, r3
 8002102:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002104:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002106:	440b      	add	r3, r1
 8002108:	b29b      	uxth	r3, r3
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	b29b      	uxth	r3, r3
 800210e:	4413      	add	r3, r2
 8002110:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 8002112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002114:	2b00      	cmp	r3, #0
 8002116:	d067      	beq.n	80021e8 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8002118:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800211a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800211c:	429a      	cmp	r2, r3
 800211e:	d109      	bne.n	8002134 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 8002120:	7f7b      	ldrb	r3, [r7, #29]
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	4619      	mov	r1, r3
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f001 f90a 	bl	8003348 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8002134:	8b38      	ldrh	r0, [r7, #24]
 8002136:	8afa      	ldrh	r2, [r7, #22]
 8002138:	8b79      	ldrh	r1, [r7, #26]
 800213a:	8abb      	ldrh	r3, [r7, #20]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4603      	mov	r3, r0
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7ff fe43 	bl	8001dcc <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8002146:	7f7b      	ldrb	r3, [r7, #29]
 8002148:	4619      	mov	r1, r3
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f001 f8fc 	bl	8003348 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	f003 0318 	and.w	r3, r3, #24
 8002156:	2b00      	cmp	r3, #0
 8002158:	d042      	beq.n	80021e0 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 800215a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	429a      	cmp	r2, r3
 8002164:	d13c      	bne.n	80021e0 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	10db      	asrs	r3, r3, #3
 800216a:	b29b      	uxth	r3, r3
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8002172:	8a7b      	ldrh	r3, [r7, #18]
 8002174:	3b01      	subs	r3, #1
 8002176:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8002178:	2300      	movs	r3, #0
 800217a:	847b      	strh	r3, [r7, #34]	; 0x22
 800217c:	e02c      	b.n	80021d8 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 800217e:	8b7a      	ldrh	r2, [r7, #26]
 8002180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002182:	4413      	add	r3, r2
 8002184:	b29a      	uxth	r2, r3
 8002186:	8a7b      	ldrh	r3, [r7, #18]
 8002188:	4413      	add	r3, r2
 800218a:	b299      	uxth	r1, r3
 800218c:	8afa      	ldrh	r2, [r7, #22]
 800218e:	8abb      	ldrh	r3, [r7, #20]
 8002190:	4413      	add	r3, r2
 8002192:	b29a      	uxth	r2, r3
 8002194:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002196:	4413      	add	r3, r2
 8002198:	b29a      	uxth	r2, r3
 800219a:	8a7b      	ldrh	r3, [r7, #18]
 800219c:	4413      	add	r3, r2
 800219e:	b29a      	uxth	r2, r3
 80021a0:	8b3b      	ldrh	r3, [r7, #24]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f001 f86b 	bl	800327e <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 80021a8:	8b7a      	ldrh	r2, [r7, #26]
 80021aa:	8b3b      	ldrh	r3, [r7, #24]
 80021ac:	4413      	add	r3, r2
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021b2:	4413      	add	r3, r2
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	8a7b      	ldrh	r3, [r7, #18]
 80021b8:	4413      	add	r3, r2
 80021ba:	b299      	uxth	r1, r3
 80021bc:	8afa      	ldrh	r2, [r7, #22]
 80021be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021c0:	4413      	add	r3, r2
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	8a7b      	ldrh	r3, [r7, #18]
 80021c6:	4413      	add	r3, r2
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	8abb      	ldrh	r3, [r7, #20]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f001 f86f 	bl	80032b0 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 80021d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021d4:	3301      	adds	r3, #1
 80021d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80021d8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80021da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3ce      	bcc.n	800217e <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 80021e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021e2:	3b01      	subs	r3, #1
 80021e4:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 80021e6:	e757      	b.n	8002098 <u8g2_DrawButtonFrame+0x5c>
      break;
 80021e8:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d011      	beq.n	8002218 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 80021f4:	2102      	movs	r1, #2
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f001 f8a6 	bl	8003348 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 80021fc:	8b38      	ldrh	r0, [r7, #24]
 80021fe:	8afa      	ldrh	r2, [r7, #22]
 8002200:	8b79      	ldrh	r1, [r7, #26]
 8002202:	8abb      	ldrh	r3, [r7, #20]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	4603      	mov	r3, r0
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f7ff fda9 	bl	8001d60 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 800220e:	7f7b      	ldrb	r3, [r7, #29]
 8002210:	4619      	mov	r1, r3
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f001 f898 	bl	8003348 <u8g2_SetDrawColor>
  }
}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af04      	add	r7, sp, #16
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	4608      	mov	r0, r1
 800222a:	4611      	mov	r1, r2
 800222c:	461a      	mov	r2, r3
 800222e:	4603      	mov	r3, r0
 8002230:	817b      	strh	r3, [r7, #10]
 8002232:	460b      	mov	r3, r1
 8002234:	813b      	strh	r3, [r7, #8]
 8002236:	4613      	mov	r3, r2
 8002238:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 800223a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 ff11 	bl	8003064 <u8g2_GetUTF8Width>
 8002242:	4603      	mov	r3, r0
 8002244:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8002246:	2300      	movs	r3, #0
 8002248:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8002254:	8afb      	ldrh	r3, [r7, #22]
 8002256:	3301      	adds	r3, #1
 8002258:	0fda      	lsrs	r2, r3, #31
 800225a:	4413      	add	r3, r2
 800225c:	105b      	asrs	r3, r3, #1
 800225e:	425b      	negs	r3, r3
 8002260:	b29a      	uxth	r2, r3
 8002262:	897b      	ldrh	r3, [r7, #10]
 8002264:	4413      	add	r3, r2
 8002266:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8002268:	8afa      	ldrh	r2, [r7, #22]
 800226a:	8c3b      	ldrh	r3, [r7, #32]
 800226c:	429a      	cmp	r2, r3
 800226e:	d20d      	bcs.n	800228c <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 800227a:	8c3a      	ldrh	r2, [r7, #32]
 800227c:	8afb      	ldrh	r3, [r7, #22]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	0fda      	lsrs	r2, r3, #31
 8002282:	4413      	add	r3, r2
 8002284:	105b      	asrs	r3, r3, #1
 8002286:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8002288:	8c3b      	ldrh	r3, [r7, #32]
 800228a:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 800228c:	2101      	movs	r1, #1
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fcda 	bl	8002c48 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8002294:	893a      	ldrh	r2, [r7, #8]
 8002296:	8979      	ldrh	r1, [r7, #10]
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fd92 	bl	8002dc4 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 80022a0:	897a      	ldrh	r2, [r7, #10]
 80022a2:	8abb      	ldrh	r3, [r7, #20]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	b299      	uxth	r1, r3
 80022a8:	88f8      	ldrh	r0, [r7, #6]
 80022aa:	893a      	ldrh	r2, [r7, #8]
 80022ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022ae:	9302      	str	r3, [sp, #8]
 80022b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	8afb      	ldrh	r3, [r7, #22]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	4603      	mov	r3, r0
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff febe 	bl	800203c <u8g2_DrawButtonFrame>
  
}
 80022c0:	bf00      	nop
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fe71 	bl	8001fb8 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fe82 	bl	8001fe0 <u8g2_NextPage>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f9      	bne.n	80022d6 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80022e2:	2100      	movs	r1, #0
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fe4f 	bl	8001f88 <u8g2_SetBufferCurrTileRow>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2208      	movs	r2, #8
 8002300:	701a      	strb	r2, [r3, #0]
  return buf;
 8002302:	4b03      	ldr	r3, [pc, #12]	; (8002310 <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000728 	.word	0x20000728

08002314 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 800232a:	490c      	ldr	r1, [pc, #48]	; (800235c <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f001 fe39 	bl	8003fa4 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 8002332:	f107 0313 	add.w	r3, r7, #19
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ffdc 	bl	80022f4 <u8g2_m_24_8_f>
 800233c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800233e:	7cfa      	ldrb	r2, [r7, #19]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 8002346:	6979      	ldr	r1, [r7, #20]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f001 f92f 	bl	80035ac <u8g2_SetupBuffer>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	08003b3d 	.word	0x08003b3d
 800235c:	08003d1d 	.word	0x08003d1d
 8002360:	08003431 	.word	0x08003431

08002364 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	781b      	ldrb	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8002386:	b480      	push	{r7}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	81fb      	strh	r3, [r7, #14]
	font++;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3301      	adds	r3, #1
 80023a4:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 80023a6:	89fb      	ldrh	r3, [r7, #14]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	4413      	add	r3, r2
 80023b6:	81fb      	strh	r3, [r7, #14]
	return pos;
 80023b8:	89fb      	ldrh	r3, [r7, #14]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80023ce:	2100      	movs	r1, #0
 80023d0:	6838      	ldr	r0, [r7, #0]
 80023d2:	f7ff ffc7 	bl	8002364 <u8g2_font_get_byte>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80023de:	2101      	movs	r1, #1
 80023e0:	6838      	ldr	r0, [r7, #0]
 80023e2:	f7ff ffbf 	bl	8002364 <u8g2_font_get_byte>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80023ee:	2102      	movs	r1, #2
 80023f0:	6838      	ldr	r0, [r7, #0]
 80023f2:	f7ff ffb7 	bl	8002364 <u8g2_font_get_byte>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80023fe:	2103      	movs	r1, #3
 8002400:	6838      	ldr	r0, [r7, #0]
 8002402:	f7ff ffaf 	bl	8002364 <u8g2_font_get_byte>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800240e:	2104      	movs	r1, #4
 8002410:	6838      	ldr	r0, [r7, #0]
 8002412:	f7ff ffa7 	bl	8002364 <u8g2_font_get_byte>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800241e:	2105      	movs	r1, #5
 8002420:	6838      	ldr	r0, [r7, #0]
 8002422:	f7ff ff9f 	bl	8002364 <u8g2_font_get_byte>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800242e:	2106      	movs	r1, #6
 8002430:	6838      	ldr	r0, [r7, #0]
 8002432:	f7ff ff97 	bl	8002364 <u8g2_font_get_byte>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800243e:	2107      	movs	r1, #7
 8002440:	6838      	ldr	r0, [r7, #0]
 8002442:	f7ff ff8f 	bl	8002364 <u8g2_font_get_byte>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800244e:	2108      	movs	r1, #8
 8002450:	6838      	ldr	r0, [r7, #0]
 8002452:	f7ff ff87 	bl	8002364 <u8g2_font_get_byte>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800245e:	2109      	movs	r1, #9
 8002460:	6838      	ldr	r0, [r7, #0]
 8002462:	f7ff ff7f 	bl	8002364 <u8g2_font_get_byte>
 8002466:	4603      	mov	r3, r0
 8002468:	b25a      	sxtb	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800246e:	210a      	movs	r1, #10
 8002470:	6838      	ldr	r0, [r7, #0]
 8002472:	f7ff ff77 	bl	8002364 <u8g2_font_get_byte>
 8002476:	4603      	mov	r3, r0
 8002478:	b25a      	sxtb	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 800247e:	210b      	movs	r1, #11
 8002480:	6838      	ldr	r0, [r7, #0]
 8002482:	f7ff ff6f 	bl	8002364 <u8g2_font_get_byte>
 8002486:	4603      	mov	r3, r0
 8002488:	b25a      	sxtb	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 800248e:	210c      	movs	r1, #12
 8002490:	6838      	ldr	r0, [r7, #0]
 8002492:	f7ff ff67 	bl	8002364 <u8g2_font_get_byte>
 8002496:	4603      	mov	r3, r0
 8002498:	b25a      	sxtb	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800249e:	210d      	movs	r1, #13
 80024a0:	6838      	ldr	r0, [r7, #0]
 80024a2:	f7ff ff5f 	bl	8002364 <u8g2_font_get_byte>
 80024a6:	4603      	mov	r3, r0
 80024a8:	b25a      	sxtb	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 80024ae:	210e      	movs	r1, #14
 80024b0:	6838      	ldr	r0, [r7, #0]
 80024b2:	f7ff ff57 	bl	8002364 <u8g2_font_get_byte>
 80024b6:	4603      	mov	r3, r0
 80024b8:	b25a      	sxtb	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80024be:	210f      	movs	r1, #15
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f7ff ff4f 	bl	8002364 <u8g2_font_get_byte>
 80024c6:	4603      	mov	r3, r0
 80024c8:	b25a      	sxtb	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 80024ce:	2110      	movs	r1, #16
 80024d0:	6838      	ldr	r0, [r7, #0]
 80024d2:	f7ff ff47 	bl	8002364 <u8g2_font_get_byte>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b25a      	sxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80024de:	2111      	movs	r1, #17
 80024e0:	6838      	ldr	r0, [r7, #0]
 80024e2:	f7ff ff50 	bl	8002386 <u8g2_font_get_word>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 80024ee:	2113      	movs	r1, #19
 80024f0:	6838      	ldr	r0, [r7, #0]
 80024f2:	f7ff ff48 	bl	8002386 <u8g2_font_get_word>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 80024fe:	2115      	movs	r1, #21
 8002500:	6838      	ldr	r0, [r7, #0]
 8002502:	f7ff ff40 	bl	8002386 <u8g2_font_get_word>
 8002506:	4603      	mov	r3, r0
 8002508:	461a      	mov	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	82da      	strh	r2, [r3, #22]
#endif
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7b1b      	ldrb	r3, [r3, #12]
 8002526:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	7b7b      	ldrb	r3, [r7, #13]
 8002534:	fa42 f303 	asr.w	r3, r2, r3
 8002538:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 800253a:	7b7b      	ldrb	r3, [r7, #13]
 800253c:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 800253e:	7bba      	ldrb	r2, [r7, #14]
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	4413      	add	r3, r2
 8002544:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 8002546:	7bbb      	ldrb	r3, [r7, #14]
 8002548:	2b07      	cmp	r3, #7
 800254a:	d91a      	bls.n	8002582 <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 800254c:	2308      	movs	r3, #8
 800254e:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 8002550:	7b3a      	ldrb	r2, [r7, #12]
 8002552:	7b7b      	ldrb	r3, [r7, #13]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	7b3b      	ldrb	r3, [r7, #12]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	b25a      	sxtb	r2, r3
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4313      	orrs	r3, r2
 8002578:	b25b      	sxtb	r3, r3
 800257a:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 800257c:	7bbb      	ldrb	r3, [r7, #14]
 800257e:	3b08      	subs	r3, #8
 8002580:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	b2da      	uxtb	r2, r3
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	4013      	ands	r3, r2
 8002596:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7bba      	ldrb	r2, [r7, #14]
 800259c:	731a      	strb	r2, [r3, #12]
	return val;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffab 	bl	8002516 <u8g2_font_decode_get_unsigned_bits>
 80025c0:	4603      	mov	r3, r0
 80025c2:	73fb      	strb	r3, [r7, #15]
	d = 1;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73bb      	strb	r3, [r7, #14]
	cnt--;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 80025ce:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	73bb      	strb	r3, [r7, #14]
	v -= d;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	7bbb      	ldrb	r3, [r7, #14]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	73fb      	strb	r3, [r7, #15]
	return v;
 80025e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 80025f0:	b490      	push	{r4, r7}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4604      	mov	r4, r0
 80025f8:	4608      	mov	r0, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	4623      	mov	r3, r4
 8002600:	80fb      	strh	r3, [r7, #6]
 8002602:	4603      	mov	r3, r0
 8002604:	717b      	strb	r3, [r7, #5]
 8002606:	460b      	mov	r3, r1
 8002608:	713b      	strb	r3, [r7, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d014      	beq.n	800263e <u8g2_add_vector_y+0x4e>
 8002614:	2b02      	cmp	r3, #2
 8002616:	dc19      	bgt.n	800264c <u8g2_add_vector_y+0x5c>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <u8g2_add_vector_y+0x32>
 800261c:	2b01      	cmp	r3, #1
 800261e:	d007      	beq.n	8002630 <u8g2_add_vector_y+0x40>
 8002620:	e014      	b.n	800264c <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 8002622:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002626:	b29a      	uxth	r2, r3
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	4413      	add	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
		break;
 800262e:	e014      	b.n	800265a <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 8002630:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002634:	b29a      	uxth	r2, r3
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	4413      	add	r3, r2
 800263a:	80fb      	strh	r3, [r7, #6]
		break;
 800263c:	e00d      	b.n	800265a <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 800263e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002642:	b29b      	uxth	r3, r3
 8002644:	88fa      	ldrh	r2, [r7, #6]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	80fb      	strh	r3, [r7, #6]
		break;
 800264a:	e006      	b.n	800265a <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 800264c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002650:	b29b      	uxth	r3, r3
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	80fb      	strh	r3, [r7, #6]
		break;
 8002658:	bf00      	nop
	}
	return dy;
 800265a:	88fb      	ldrh	r3, [r7, #6]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bc90      	pop	{r4, r7}
 8002664:	4770      	bx	lr

08002666 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8002666:	b490      	push	{r4, r7}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	4604      	mov	r4, r0
 800266e:	4608      	mov	r0, r1
 8002670:	4611      	mov	r1, r2
 8002672:	461a      	mov	r2, r3
 8002674:	4623      	mov	r3, r4
 8002676:	80fb      	strh	r3, [r7, #6]
 8002678:	4603      	mov	r3, r0
 800267a:	717b      	strb	r3, [r7, #5]
 800267c:	460b      	mov	r3, r1
 800267e:	713b      	strb	r3, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d014      	beq.n	80026b4 <u8g2_add_vector_x+0x4e>
 800268a:	2b02      	cmp	r3, #2
 800268c:	dc19      	bgt.n	80026c2 <u8g2_add_vector_x+0x5c>
 800268e:	2b00      	cmp	r3, #0
 8002690:	d002      	beq.n	8002698 <u8g2_add_vector_x+0x32>
 8002692:	2b01      	cmp	r3, #1
 8002694:	d007      	beq.n	80026a6 <u8g2_add_vector_x+0x40>
 8002696:	e014      	b.n	80026c2 <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8002698:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800269c:	b29a      	uxth	r2, r3
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	4413      	add	r3, r2
 80026a2:	80fb      	strh	r3, [r7, #6]
		break;
 80026a4:	e014      	b.n	80026d0 <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 80026a6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	88fa      	ldrh	r2, [r7, #6]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	80fb      	strh	r3, [r7, #6]
		break;
 80026b2:	e00d      	b.n	80026d0 <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 80026b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	80fb      	strh	r3, [r7, #6]
		break;
 80026c0:	e006      	b.n	80026d0 <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 80026c2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	4413      	add	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
		break;
 80026ce:	bf00      	nop
	}
	return dx;
 80026d0:	88fb      	ldrh	r3, [r7, #6]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc90      	pop	{r4, r7}
 80026da:	4770      	bx	lr

080026dc <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	70fb      	strb	r3, [r7, #3]
 80026e8:	4613      	mov	r3, r2
 80026ea:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3360      	adds	r3, #96	; 0x60
 80026f0:	613b      	str	r3, [r7, #16]

	cnt = len;
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80026fc:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002704:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800270c:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	7d7b      	ldrb	r3, [r7, #21]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 800271a:	7dfa      	ldrb	r2, [r7, #23]
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	429a      	cmp	r2, r3
 8002720:	d201      	bcs.n	8002726 <u8g2_font_decode_len+0x4a>
			current = cnt;
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	889b      	ldrh	r3, [r3, #4]
 800272a:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	88db      	ldrh	r3, [r3, #6]
 8002730:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002732:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002736:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	7c1b      	ldrb	r3, [r3, #16]
 800273e:	89b8      	ldrh	r0, [r7, #12]
 8002740:	f7ff ff91 	bl	8002666 <u8g2_add_vector_x>
 8002744:	4603      	mov	r3, r0
 8002746:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002748:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800274c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	7c1b      	ldrb	r3, [r3, #16]
 8002754:	8978      	ldrh	r0, [r7, #10]
 8002756:	f7ff ff4b 	bl	80025f0 <u8g2_add_vector_y>
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 800275e:	78bb      	ldrb	r3, [r7, #2]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	7b9a      	ldrb	r2, [r3, #14]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 800276e:	7dbb      	ldrb	r3, [r7, #22]
 8002770:	b298      	uxth	r0, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	7c1b      	ldrb	r3, [r3, #16]
 8002776:	897a      	ldrh	r2, [r7, #10]
 8002778:	89b9      	ldrh	r1, [r7, #12]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4603      	mov	r3, r0
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fcf2 	bl	8003168 <u8g2_DrawHVLine>
 8002784:	e013      	b.n	80027ae <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	7b5b      	ldrb	r3, [r3, #13]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10f      	bne.n	80027ae <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	7bda      	ldrb	r2, [r3, #15]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8002798:	7dbb      	ldrb	r3, [r7, #22]
 800279a:	b298      	uxth	r0, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	7c1b      	ldrb	r3, [r3, #16]
 80027a0:	897a      	ldrh	r2, [r7, #10]
 80027a2:	89b9      	ldrh	r1, [r7, #12]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4603      	mov	r3, r0
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fcdd 	bl	8003168 <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 80027ae:	7dfa      	ldrb	r2, [r7, #23]
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d309      	bcc.n	80027ca <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 80027b6:	7dfa      	ldrb	r2, [r7, #23]
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	757b      	strb	r3, [r7, #21]
		ly++;
 80027c2:	7d3b      	ldrb	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 80027c8:	e79d      	b.n	8002706 <u8g2_font_decode_len+0x2a>
			break;
 80027ca:	bf00      	nop
	}
	lx += cnt;
 80027cc:	7d7a      	ldrb	r2, [r7, #21]
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	4413      	add	r3, r2
 80027d2:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 80027d4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 80027dc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	725a      	strb	r2, [r3, #9]

}
 80027e4:	bf00      	nop
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3360      	adds	r3, #96	; 0x60
 80027fa:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800280e:	4619      	mov	r1, r3
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff fe80 	bl	8002516 <u8g2_font_decode_get_unsigned_bits>
 8002816:	4603      	mov	r3, r0
 8002818:	b25a      	sxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002824:	4619      	mov	r1, r3
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff fe75 	bl	8002516 <u8g2_font_decode_get_unsigned_bits>
 800282c:	4603      	mov	r3, r0
 800282e:	b25a      	sxtb	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	7b9b      	ldrb	r3, [r3, #14]
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	73da      	strb	r2, [r3, #15]
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af02      	add	r7, sp, #8
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3360      	adds	r3, #96	; 0x60
 800286a:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ffbc 	bl	80027ec <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800287a:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002882:	4619      	mov	r1, r3
 8002884:	6978      	ldr	r0, [r7, #20]
 8002886:	f7ff fe90 	bl	80025aa <u8g2_font_decode_get_signed_bits>
 800288a:	4603      	mov	r3, r0
 800288c:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002894:	4619      	mov	r1, r3
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f7ff fe87 	bl	80025aa <u8g2_font_decode_get_signed_bits>
 800289c:	4603      	mov	r3, r0
 800289e:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80028a6:	4619      	mov	r1, r3
 80028a8:	6978      	ldr	r0, [r7, #20]
 80028aa:	f7ff fe7e 	bl	80025aa <u8g2_font_decode_get_signed_bits>
 80028ae:	4603      	mov	r3, r0
 80028b0:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f340 80d7 	ble.w	8002a6c <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	8898      	ldrh	r0, [r3, #4]
 80028c2:	7cfa      	ldrb	r2, [r7, #19]
 80028c4:	7c7b      	ldrb	r3, [r7, #17]
 80028c6:	4413      	add	r3, r2
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	425b      	negs	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	b25a      	sxtb	r2, r3
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	7c1b      	ldrb	r3, [r3, #16]
 80028d4:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80028d8:	f7ff fec5 	bl	8002666 <u8g2_add_vector_x>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	88d8      	ldrh	r0, [r3, #6]
 80028e8:	7cfa      	ldrb	r2, [r7, #19]
 80028ea:	7c7b      	ldrb	r3, [r7, #17]
 80028ec:	4413      	add	r3, r2
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	425b      	negs	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	b25a      	sxtb	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	7c1b      	ldrb	r3, [r3, #16]
 80028fa:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80028fe:	f7ff fe77 	bl	80025f0 <u8g2_add_vector_y>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	889b      	ldrh	r3, [r3, #4]
 800290e:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	88db      	ldrh	r3, [r3, #6]
 8002914:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 8002916:	8bfb      	ldrh	r3, [r7, #30]
 8002918:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 800291a:	8b7b      	ldrh	r3, [r7, #26]
 800291c:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	7c1b      	ldrb	r3, [r3, #16]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d85a      	bhi.n	80029dc <u8g2_font_decode_glyph+0x180>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <u8g2_font_decode_glyph+0xd0>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	0800293d 	.word	0x0800293d
 8002930:	08002959 	.word	0x08002959
 8002934:	08002981 	.word	0x08002981
 8002938:	080029b5 	.word	0x080029b5
			case 0:
				x1 += decode->glyph_width;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002942:	b29a      	uxth	r2, r3
 8002944:	8bbb      	ldrh	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 800294a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800294e:	b29a      	uxth	r2, r3
 8002950:	8b3b      	ldrh	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	833b      	strh	r3, [r7, #24]
				break;
 8002956:	e041      	b.n	80029dc <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 8002958:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800295c:	b29b      	uxth	r3, r3
 800295e:	8bfa      	ldrh	r2, [r7, #30]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002964:	8bfb      	ldrh	r3, [r7, #30]
 8002966:	3301      	adds	r3, #1
 8002968:	83fb      	strh	r3, [r7, #30]
				x1++;
 800296a:	8bbb      	ldrh	r3, [r7, #28]
 800296c:	3301      	adds	r3, #1
 800296e:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002976:	b29a      	uxth	r2, r3
 8002978:	8b3b      	ldrh	r3, [r7, #24]
 800297a:	4413      	add	r3, r2
 800297c:	833b      	strh	r3, [r7, #24]
				break;
 800297e:	e02d      	b.n	80029dc <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002986:	b29b      	uxth	r3, r3
 8002988:	8bfa      	ldrh	r2, [r7, #30]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 800298e:	8bfb      	ldrh	r3, [r7, #30]
 8002990:	3301      	adds	r3, #1
 8002992:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002994:	8bbb      	ldrh	r3, [r7, #28]
 8002996:	3301      	adds	r3, #1
 8002998:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 800299a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	8b7a      	ldrh	r2, [r7, #26]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80029a6:	8b7b      	ldrh	r3, [r7, #26]
 80029a8:	3301      	adds	r3, #1
 80029aa:	837b      	strh	r3, [r7, #26]
				y1++;
 80029ac:	8b3b      	ldrh	r3, [r7, #24]
 80029ae:	3301      	adds	r3, #1
 80029b0:	833b      	strh	r3, [r7, #24]
				break;
 80029b2:	e013      	b.n	80029dc <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 80029b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	8bbb      	ldrh	r3, [r7, #28]
 80029bc:	4413      	add	r3, r2
 80029be:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	8b7a      	ldrh	r2, [r7, #26]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80029ce:	8b7b      	ldrh	r3, [r7, #26]
 80029d0:	3301      	adds	r3, #1
 80029d2:	837b      	strh	r3, [r7, #26]
				y1++;
 80029d4:	8b3b      	ldrh	r3, [r7, #24]
 80029d6:	3301      	adds	r3, #1
 80029d8:	833b      	strh	r3, [r7, #24]
				break;
 80029da:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 80029dc:	8bb8      	ldrh	r0, [r7, #28]
 80029de:	8b7a      	ldrh	r2, [r7, #26]
 80029e0:	8bf9      	ldrh	r1, [r7, #30]
 80029e2:	8b3b      	ldrh	r3, [r7, #24]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	4603      	mov	r3, r0
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fcf6 	bl	80033da <u8g2_IsIntersection>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <u8g2_font_decode_glyph+0x19e>
				return d;
 80029f4:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80029f8:	e03a      	b.n	8002a70 <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2200      	movs	r2, #0
 80029fe:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2200      	movs	r2, #0
 8002a04:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f7ff fd81 	bl	8002516 <u8g2_font_decode_get_unsigned_bits>
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6978      	ldr	r0, [r7, #20]
 8002a22:	f7ff fd78 	bl	8002516 <u8g2_font_decode_get_unsigned_bits>
 8002a26:	4603      	mov	r3, r0
 8002a28:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fe53 	bl	80026dc <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fe4d 	bl	80026dc <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 8002a42:	2101      	movs	r1, #1
 8002a44:	6978      	ldr	r0, [r7, #20]
 8002a46:	f7ff fd66 	bl	8002516 <u8g2_font_decode_get_unsigned_bits>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ec      	bne.n	8002a2a <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002a56:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	dd00      	ble.n	8002a60 <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002a5e:	e7d2      	b.n	8002a06 <u8g2_font_decode_glyph+0x1aa>
				break;
 8002a60:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	7b9a      	ldrb	r2, [r3, #14]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 8002a6c:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3317      	adds	r3, #23
 8002a8e:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	2bff      	cmp	r3, #255	; 0xff
 8002a94:	d82a      	bhi.n	8002aec <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 8002a96:	887b      	ldrh	r3, [r7, #2]
 8002a98:	2b60      	cmp	r3, #96	; 0x60
 8002a9a:	d907      	bls.n	8002aac <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e009      	b.n	8002ac0 <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d906      	bls.n	8002ac0 <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002ab8:	461a      	mov	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4413      	add	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d04e      	beq.n	8002b68 <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d102      	bne.n	8002adc <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3302      	adds	r3, #2
 8002ada:	e049      	b.n	8002b70 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002aea:	e7e9      	b.n	8002ac0 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002af2:	461a      	mov	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	4413      	add	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002afe:	2100      	movs	r1, #0
 8002b00:	6938      	ldr	r0, [r7, #16]
 8002b02:	f7ff fc40 	bl	8002386 <u8g2_font_get_word>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002b10:	2102      	movs	r1, #2
 8002b12:	6938      	ldr	r0, [r7, #16]
 8002b14:	f7ff fc37 	bl	8002386 <u8g2_font_get_word>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 8002b22:	89fa      	ldrh	r2, [r7, #14]
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d3e9      	bcc.n	8002afe <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 8002b30:	89fb      	ldrh	r3, [r7, #14]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	89fb      	ldrh	r3, [r7, #14]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002b44:	89fb      	ldrh	r3, [r7, #14]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d010      	beq.n	8002b6c <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 8002b4a:	89fa      	ldrh	r2, [r7, #14]
 8002b4c:	887b      	ldrh	r3, [r7, #2]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d102      	bne.n	8002b58 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	3303      	adds	r3, #3
 8002b56:	e00b      	b.n	8002b70 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	4413      	add	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 8002b66:	e7e0      	b.n	8002b2a <u8g2_font_get_glyph_data+0xb2>
				break;
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <u8g2_font_get_glyph_data+0xf6>
				break;
 8002b6c:	bf00      	nop
		}
	}
#endif

	return NULL;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	813b      	strh	r3, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	897a      	ldrh	r2, [r7, #10]
 8002b9a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	893a      	ldrh	r2, [r7, #8]
 8002ba2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff ff64 	bl	8002a78 <u8g2_font_get_glyph_data>
 8002bb0:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002bb8:	6939      	ldr	r1, [r7, #16]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f7ff fe4e 	bl	800285c <u8g2_font_decode_glyph>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 8002bc4:	8afb      	ldrh	r3, [r7, #22]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ff4a 	bl	8002a78 <u8g2_font_get_glyph_data>
 8002be4:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <u8g2_GetGlyphWidth+0x22>
		return 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e027      	b.n	8002c40 <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 8002bf0:	68f9      	ldr	r1, [r7, #12]
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fdfa 	bl	80027ec <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f7ff fccf 	bl	80025aa <u8g2_font_decode_get_signed_bits>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	461a      	mov	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002c22:	4619      	mov	r1, r3
 8002c24:	4610      	mov	r0, r2
 8002c26:	f7ff fcc0 	bl	80025aa <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002c36:	4619      	mov	r1, r3
 8002c38:	4610      	mov	r0, r2
 8002c3a:	f7ff fcb6 	bl	80025aa <u8g2_font_decode_get_signed_bits>
 8002c3e:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
	...

08002c68 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	4608      	mov	r0, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	817b      	strh	r3, [r7, #10]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	813b      	strh	r3, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d833      	bhi.n	8002cf4 <u8g2_DrawGlyph+0x8c>
 8002c8c:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <u8g2_DrawGlyph+0x2c>)
 8002c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002ca5 	.word	0x08002ca5
 8002c98:	08002cb9 	.word	0x08002cb9
 8002c9c:	08002ccd 	.word	0x08002ccd
 8002ca0:	08002ce1 	.word	0x08002ce1
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	4798      	blx	r3
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	893b      	ldrh	r3, [r7, #8]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	813b      	strh	r3, [r7, #8]
		break;
 8002cb6:	e01d      	b.n	8002cf4 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	4798      	blx	r3
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	897b      	ldrh	r3, [r7, #10]
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	817b      	strh	r3, [r7, #10]
		break;
 8002cca:	e013      	b.n	8002cf4 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	4798      	blx	r3
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	893b      	ldrh	r3, [r7, #8]
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	813b      	strh	r3, [r7, #8]
		break;
 8002cde:	e009      	b.n	8002cf4 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	4798      	blx	r3
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	897b      	ldrh	r3, [r7, #10]
 8002cee:	4413      	add	r3, r2
 8002cf0:	817b      	strh	r3, [r7, #10]
		break;
 8002cf2:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	893a      	ldrh	r2, [r7, #8]
 8002cf8:	8979      	ldrh	r1, [r7, #10]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f7ff ff3c 	bl	8002b78 <u8g2_font_draw_glyph>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop

08002d0c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fd86 	bl	8003830 <u8x8_utf8_init>
	sum = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	7812      	ldrb	r2, [r2, #0]
 8002d30:	4611      	mov	r1, r2
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	4798      	blx	r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 8002d3a:	8abb      	ldrh	r3, [r7, #20]
 8002d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d038      	beq.n	8002db6 <u8g2_draw_string+0xaa>
			break;
		str++;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3301      	adds	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 8002d4a:	8abb      	ldrh	r3, [r7, #20]
 8002d4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d0e9      	beq.n	8002d28 <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002d54:	8abb      	ldrh	r3, [r7, #20]
 8002d56:	893a      	ldrh	r2, [r7, #8]
 8002d58:	8979      	ldrh	r1, [r7, #10]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff ff84 	bl	8002c68 <u8g2_DrawGlyph>
 8002d60:	4603      	mov	r3, r0
 8002d62:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002d6a:	2b03      	cmp	r3, #3
 8002d6c:	d81e      	bhi.n	8002dac <u8g2_draw_string+0xa0>
 8002d6e:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <u8g2_draw_string+0x68>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d8f 	.word	0x08002d8f
 8002d7c:	08002d99 	.word	0x08002d99
 8002d80:	08002da3 	.word	0x08002da3
			case 0:
				x += delta;
 8002d84:	897a      	ldrh	r2, [r7, #10]
 8002d86:	8a7b      	ldrh	r3, [r7, #18]
 8002d88:	4413      	add	r3, r2
 8002d8a:	817b      	strh	r3, [r7, #10]
				break;
 8002d8c:	e00e      	b.n	8002dac <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 8002d8e:	893a      	ldrh	r2, [r7, #8]
 8002d90:	8a7b      	ldrh	r3, [r7, #18]
 8002d92:	4413      	add	r3, r2
 8002d94:	813b      	strh	r3, [r7, #8]
				break;
 8002d96:	e009      	b.n	8002dac <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 8002d98:	897a      	ldrh	r2, [r7, #10]
 8002d9a:	8a7b      	ldrh	r3, [r7, #18]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	817b      	strh	r3, [r7, #10]
				break;
 8002da0:	e004      	b.n	8002dac <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 8002da2:	893a      	ldrh	r2, [r7, #8]
 8002da4:	8a7b      	ldrh	r3, [r7, #18]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	813b      	strh	r3, [r7, #8]
				break;
 8002daa:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 8002dac:	8afa      	ldrh	r2, [r7, #22]
 8002dae:	8a7b      	ldrh	r3, [r7, #18]
 8002db0:	4413      	add	r3, r2
 8002db2:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002db4:	e7b8      	b.n	8002d28 <u8g2_draw_string+0x1c>
			break;
 8002db6:	bf00      	nop
		}
	}
	return sum;
 8002db8:	8afb      	ldrh	r3, [r7, #22]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop

08002dc4 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	817b      	strh	r3, [r7, #10]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a06      	ldr	r2, [pc, #24]	; (8002df4 <u8g2_DrawUTF8+0x30>)
 8002dda:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 8002ddc:	893a      	ldrh	r2, [r7, #8]
 8002dde:	8979      	ldrh	r1, [r7, #10]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff ff92 	bl	8002d0c <u8g2_draw_string>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	08003877 	.word	0x08003877

08002df8 <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05d      	beq.n	8002ec4 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d04d      	beq.n	8002ec6 <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d11c      	bne.n	8002e6e <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002e40:	429a      	cmp	r2, r3
 8002e42:	da05      	bge.n	8002e50 <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dd32      	ble.n	8002ec6 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002e6c:	e02b      	b.n	8002ec6 <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002e74:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002e84:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 8002e86:	429a      	cmp	r2, r3
 8002e88:	da0d      	bge.n	8002ea6 <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002e90:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	dd07      	ble.n	8002ec6 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002ec2:	e000      	b.n	8002ec6 <u8g2_UpdateRefHeight+0xce>
		return;
 8002ec4:	bf00      	nop
	}
}
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
	return 0;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
	...

08002ee4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a03      	ldr	r2, [pc, #12]	; (8002efc <u8g2_SetFontPosBaseline+0x18>)
 8002ef0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	08002ecf 	.word	0x08002ecf

08002f00 <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002f0e:	81fb      	strh	r3, [r7, #14]
	tmp++;
 8002f10:	89fb      	ldrh	r3, [r7, #14]
 8002f12:	3301      	adds	r3, #1
 8002f14:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8002f16:	89fb      	ldrh	r3, [r7, #14]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
	...

08002f24 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a03      	ldr	r2, [pc, #12]	; (8002f3c <u8g2_SetFontPosTop+0x18>)
 8002f30:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	08002f01 	.word	0x08002f01

08002f40 <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d00b      	beq.n	8002f6c <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3374      	adds	r3, #116	; 0x74
 8002f5e:	6839      	ldr	r1, [r7, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fa2f 	bl	80023c4 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff46 	bl	8002df8 <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 8002f7e:	23c0      	movs	r3, #192	; 0xc0
 8002f80:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fc50 	bl	8003830 <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	7812      	ldrb	r2, [r2, #0]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 8002faa:	893b      	ldrh	r3, [r7, #8]
 8002fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d01c      	beq.n	8002fee <u8g2_string_width+0x7a>
			break;
		str++;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d0e9      	beq.n	8002f98 <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 8002fc4:	893b      	ldrh	r3, [r7, #8]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fe00 	bl	8002bce <u8g2_GetGlyphWidth>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 8002fd2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002fd6:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8002fda:	d103      	bne.n	8002fe4 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002fe2:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 8002fe4:	89fa      	ldrh	r2, [r7, #14]
 8002fe6:	89bb      	ldrh	r3, [r7, #12]
 8002fe8:	4413      	add	r3, r2
 8002fea:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002fec:	e7d4      	b.n	8002f98 <u8g2_string_width+0x24>
			break;
 8002fee:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01b      	beq.n	8003032 <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 8002ffa:	89fa      	ldrh	r2, [r7, #14]
 8002ffc:	89bb      	ldrh	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8003008:	b29a      	uxth	r2, r3
 800300a:	89fb      	ldrh	r3, [r7, #14]
 800300c:	4413      	add	r3, r2
 800300e:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8003016:	b29a      	uxth	r2, r3
 8003018:	89fb      	ldrh	r3, [r7, #14]
 800301a:	4413      	add	r3, r2
 800301c:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 800301e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003022:	2b00      	cmp	r3, #0
 8003024:	dd05      	ble.n	8003032 <u8g2_string_width+0xbe>
			w += initial_x_offset;
 8003026:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800302a:	b29a      	uxth	r2, r3
 800302c:	89fb      	ldrh	r3, [r7, #14]
 800302e:	4413      	add	r3, r2
 8003030:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 8003032:	89fb      	ldrh	r3, [r7, #14]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a05      	ldr	r2, [pc, #20]	; (8003060 <u8g2_GetStrWidth+0x24>)
 800304a:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ff90 	bl	8002f74 <u8g2_string_width>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	0800384b 	.word	0x0800384b

08003064 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a05      	ldr	r2, [pc, #20]	; (8003088 <u8g2_GetUTF8Width+0x24>)
 8003072:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 8003074:	6839      	ldr	r1, [r7, #0]
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ff7c 	bl	8002f74 <u8g2_string_width>
 800307c:	4603      	mov	r3, r0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	08003877 	.word	0x08003877

0800308c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	4611      	mov	r1, r2
 8003098:	461a      	mov	r2, r3
 800309a:	460b      	mov	r3, r1
 800309c:	80fb      	strh	r3, [r7, #6]
 800309e:	4613      	mov	r3, r2
 80030a0:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80030a8:	8afb      	ldrh	r3, [r7, #22]
 80030aa:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	881a      	ldrh	r2, [r3, #0]
 80030b0:	8abb      	ldrh	r3, [r7, #20]
 80030b2:	4413      	add	r3, r2
 80030b4:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80030b6:	8afa      	ldrh	r2, [r7, #22]
 80030b8:	8abb      	ldrh	r3, [r7, #20]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d90b      	bls.n	80030d6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80030be:	8afa      	ldrh	r2, [r7, #22]
 80030c0:	88bb      	ldrh	r3, [r7, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d205      	bcs.n	80030d2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80030c6:	88bb      	ldrh	r3, [r7, #4]
 80030c8:	82bb      	strh	r3, [r7, #20]
      b--;
 80030ca:	8abb      	ldrh	r3, [r7, #20]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	82bb      	strh	r3, [r7, #20]
 80030d0:	e001      	b.n	80030d6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80030d6:	8afa      	ldrh	r2, [r7, #22]
 80030d8:	88bb      	ldrh	r3, [r7, #4]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d301      	bcc.n	80030e2 <u8g2_clip_intersection2+0x56>
    return 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	e01c      	b.n	800311c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80030e2:	8aba      	ldrh	r2, [r7, #20]
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d801      	bhi.n	80030ee <u8g2_clip_intersection2+0x62>
    return 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e016      	b.n	800311c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80030ee:	8afa      	ldrh	r2, [r7, #22]
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d201      	bcs.n	80030fa <u8g2_clip_intersection2+0x6e>
    a = c;
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80030fa:	8aba      	ldrh	r2, [r7, #20]
 80030fc:	88bb      	ldrh	r3, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d901      	bls.n	8003106 <u8g2_clip_intersection2+0x7a>
    b = d;
 8003102:	88bb      	ldrh	r3, [r7, #4]
 8003104:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8afa      	ldrh	r2, [r7, #22]
 800310a:	801a      	strh	r2, [r3, #0]
  b -= a;
 800310c:	8aba      	ldrh	r2, [r7, #20]
 800310e:	8afb      	ldrh	r3, [r7, #22]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	8aba      	ldrh	r2, [r7, #20]
 8003118:	801a      	strh	r2, [r3, #0]
  return 1;
 800311a:	2301      	movs	r3, #1
}
 800311c:	4618      	mov	r0, r3
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003126:	b590      	push	{r4, r7, lr}
 8003128:	b087      	sub	sp, #28
 800312a:	af02      	add	r7, sp, #8
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	4608      	mov	r0, r1
 8003130:	4611      	mov	r1, r2
 8003132:	461a      	mov	r2, r3
 8003134:	4603      	mov	r3, r0
 8003136:	817b      	strh	r3, [r7, #10]
 8003138:	460b      	mov	r3, r1
 800313a:	813b      	strh	r3, [r7, #8]
 800313c:	4613      	mov	r3, r2
 800313e:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800314e:	88f8      	ldrh	r0, [r7, #6]
 8003150:	893a      	ldrh	r2, [r7, #8]
 8003152:	8979      	ldrh	r1, [r7, #10]
 8003154:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4603      	mov	r3, r0
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	47a0      	blx	r4
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}

08003168 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b087      	sub	sp, #28
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d075      	beq.n	8003278 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d072      	beq.n	8003278 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d91a      	bls.n	80031ce <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003198:	f897 3020 	ldrb.w	r3, [r7, #32]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d109      	bne.n	80031b4 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80031a0:	897a      	ldrh	r2, [r7, #10]
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	817b      	strh	r3, [r7, #10]
	  x++;
 80031aa:	897b      	ldrh	r3, [r7, #10]
 80031ac:	3301      	adds	r3, #1
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	817b      	strh	r3, [r7, #10]
 80031b2:	e00c      	b.n	80031ce <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80031b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d108      	bne.n	80031ce <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80031bc:	893a      	ldrh	r2, [r7, #8]
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	813b      	strh	r3, [r7, #8]
	  y++;
 80031c6:	893b      	ldrh	r3, [r7, #8]
 80031c8:	3301      	adds	r3, #1
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80031ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80031da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11a      	bne.n	8003218 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80031e8:	893b      	ldrh	r3, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d83b      	bhi.n	8003266 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80031f4:	893b      	ldrh	r3, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d937      	bls.n	800326a <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003206:	1db9      	adds	r1, r7, #6
 8003208:	f107 000a 	add.w	r0, r7, #10
 800320c:	f7ff ff3e 	bl	800308c <u8g2_clip_intersection2>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11a      	bne.n	800324c <u8g2_DrawHVLine+0xe4>
	  return;
 8003216:	e02f      	b.n	8003278 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800321e:	897b      	ldrh	r3, [r7, #10]
 8003220:	429a      	cmp	r2, r3
 8003222:	d824      	bhi.n	800326e <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800322a:	897b      	ldrh	r3, [r7, #10]
 800322c:	429a      	cmp	r2, r3
 800322e:	d920      	bls.n	8003272 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800323c:	1db9      	adds	r1, r7, #6
 800323e:	f107 0008 	add.w	r0, r7, #8
 8003242:	f7ff ff23 	bl	800308c <u8g2_clip_intersection2>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d014      	beq.n	8003276 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	689c      	ldr	r4, [r3, #8]
 8003252:	8979      	ldrh	r1, [r7, #10]
 8003254:	893a      	ldrh	r2, [r7, #8]
 8003256:	88f8      	ldrh	r0, [r7, #6]
 8003258:	f897 3020 	ldrb.w	r3, [r7, #32]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	4603      	mov	r3, r0
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	47a0      	blx	r4
 8003264:	e008      	b.n	8003278 <u8g2_DrawHVLine+0x110>
	  return;
 8003266:	bf00      	nop
 8003268:	e006      	b.n	8003278 <u8g2_DrawHVLine+0x110>
	  return;
 800326a:	bf00      	nop
 800326c:	e004      	b.n	8003278 <u8g2_DrawHVLine+0x110>
	  return;
 800326e:	bf00      	nop
 8003270:	e002      	b.n	8003278 <u8g2_DrawHVLine+0x110>
	  return;
 8003272:	bf00      	nop
 8003274:	e000      	b.n	8003278 <u8g2_DrawHVLine+0x110>
	  return;
 8003276:	bf00      	nop
    }
}
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bd90      	pop	{r4, r7, pc}

0800327e <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af02      	add	r7, sp, #8
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	4608      	mov	r0, r1
 8003288:	4611      	mov	r1, r2
 800328a:	461a      	mov	r2, r3
 800328c:	4603      	mov	r3, r0
 800328e:	817b      	strh	r3, [r7, #10]
 8003290:	460b      	mov	r3, r1
 8003292:	813b      	strh	r3, [r7, #8]
 8003294:	4613      	mov	r3, r2
 8003296:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	893a      	ldrh	r2, [r7, #8]
 800329c:	8979      	ldrh	r1, [r7, #10]
 800329e:	2000      	movs	r0, #0
 80032a0:	9000      	str	r0, [sp, #0]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f7ff ff60 	bl	8003168 <u8g2_DrawHVLine>
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	461a      	mov	r2, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	817b      	strh	r3, [r7, #10]
 80032c2:	460b      	mov	r3, r1
 80032c4:	813b      	strh	r3, [r7, #8]
 80032c6:	4613      	mov	r3, r2
 80032c8:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	893a      	ldrh	r2, [r7, #8]
 80032ce:	8979      	ldrh	r1, [r7, #10]
 80032d0:	2001      	movs	r0, #1
 80032d2:	9000      	str	r0, [sp, #0]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff ff47 	bl	8003168 <u8g2_DrawHVLine>
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af02      	add	r7, sp, #8
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	807b      	strh	r3, [r7, #2]
 80032ee:	4613      	mov	r3, r2
 80032f0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80032f8:	883a      	ldrh	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d31a      	bcc.n	8003334 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003304:	883a      	ldrh	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d216      	bcs.n	8003338 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003310:	887a      	ldrh	r2, [r7, #2]
 8003312:	429a      	cmp	r2, r3
 8003314:	d312      	bcc.n	800333c <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800331c:	887a      	ldrh	r2, [r7, #2]
 800331e:	429a      	cmp	r2, r3
 8003320:	d20e      	bcs.n	8003340 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8003322:	883a      	ldrh	r2, [r7, #0]
 8003324:	8879      	ldrh	r1, [r7, #2]
 8003326:	2300      	movs	r3, #0
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2301      	movs	r3, #1
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff1b 	bl	8003168 <u8g2_DrawHVLine>
 8003332:	e006      	b.n	8003342 <u8g2_DrawPixel+0x60>
    return;
 8003334:	bf00      	nop
 8003336:	e004      	b.n	8003342 <u8g2_DrawPixel+0x60>
    return;
 8003338:	bf00      	nop
 800333a:	e002      	b.n	8003342 <u8g2_DrawPixel+0x60>
    return;
 800333c:	bf00      	nop
 800333e:	e000      	b.n	8003342 <u8g2_DrawPixel+0x60>
    return;
 8003340:	bf00      	nop
}
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d903      	bls.n	800336a <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003374:	b490      	push	{r4, r7}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	4604      	mov	r4, r0
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	461a      	mov	r2, r3
 8003382:	4623      	mov	r3, r4
 8003384:	80fb      	strh	r3, [r7, #6]
 8003386:	4603      	mov	r3, r0
 8003388:	80bb      	strh	r3, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	807b      	strh	r3, [r7, #2]
 800338e:	4613      	mov	r3, r2
 8003390:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	88bb      	ldrh	r3, [r7, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	d20d      	bcs.n	80033b6 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800339a:	883a      	ldrh	r2, [r7, #0]
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d901      	bls.n	80033a6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e014      	b.n	80033d0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	883b      	ldrh	r3, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d901      	bls.n	80033b2 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00e      	b.n	80033d0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e00c      	b.n	80033d0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80033b6:	883a      	ldrh	r2, [r7, #0]
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d907      	bls.n	80033ce <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	883b      	ldrh	r3, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d901      	bls.n	80033ca <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e002      	b.n	80033d0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80033ce:	2300      	movs	r3, #0
    }
  }
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc90      	pop	{r4, r7}
 80033d8:	4770      	bx	lr

080033da <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	4608      	mov	r0, r1
 80033e4:	4611      	mov	r1, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	4603      	mov	r3, r0
 80033ea:	817b      	strh	r3, [r7, #10]
 80033ec:	460b      	mov	r3, r1
 80033ee:	813b      	strh	r3, [r7, #8]
 80033f0:	4613      	mov	r3, r2
 80033f2:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8003400:	8b3b      	ldrh	r3, [r7, #24]
 8003402:	893a      	ldrh	r2, [r7, #8]
 8003404:	f7ff ffb6 	bl	8003374 <u8g2_is_intersection_decision_tree>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <u8g2_IsIntersection+0x38>
    return 0; 
 800340e:	2300      	movs	r3, #0
 8003410:	e00a      	b.n	8003428 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	897a      	ldrh	r2, [r7, #10]
 8003422:	f7ff ffa7 	bl	8003374 <u8g2_is_intersection_decision_tree>
 8003426:	4603      	mov	r3, r0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4603      	mov	r3, r0
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	460b      	mov	r3, r1
 8003444:	813b      	strh	r3, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800344a:	893b      	ldrh	r3, [r7, #8]
 800344c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800344e:	7efb      	ldrb	r3, [r7, #27]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8003456:	2301      	movs	r3, #1
 8003458:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800345a:	7e3a      	ldrb	r2, [r7, #24]
 800345c:	7efb      	ldrb	r3, [r7, #27]
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8003464:	2300      	movs	r3, #0
 8003466:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003472:	2b01      	cmp	r3, #1
 8003474:	d801      	bhi.n	800347a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8003476:	7e3b      	ldrb	r3, [r7, #24]
 8003478:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003480:	2b01      	cmp	r3, #1
 8003482:	d001      	beq.n	8003488 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003484:	7e3b      	ldrb	r3, [r7, #24]
 8003486:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003488:	893b      	ldrh	r3, [r7, #8]
 800348a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800348c:	8afb      	ldrh	r3, [r7, #22]
 800348e:	f023 0307 	bic.w	r3, r3, #7
 8003492:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	7c1b      	ldrb	r3, [r3, #16]
 800349a:	b29b      	uxth	r3, r3
 800349c:	8afa      	ldrh	r2, [r7, #22]
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80034aa:	8afb      	ldrh	r3, [r7, #22]
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80034b2:	897b      	ldrh	r3, [r7, #10]
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	4413      	add	r3, r2
 80034b8:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80034ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d117      	bne.n	80034f2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	7ebb      	ldrb	r3, [r7, #26]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	7e7b      	ldrb	r3, [r7, #25]
 80034d6:	4053      	eors	r3, r2
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	701a      	strb	r2, [r3, #0]
	ptr++;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3301      	adds	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
	len--;
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e8      	bne.n	80034c2 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80034f0:	e038      	b.n	8003564 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	7ebb      	ldrb	r3, [r7, #26]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	781a      	ldrb	r2, [r3, #0]
 8003504:	7e7b      	ldrb	r3, [r7, #25]
 8003506:	4053      	eors	r3, r2
 8003508:	b2da      	uxtb	r2, r3
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800350e:	7efb      	ldrb	r3, [r7, #27]
 8003510:	3301      	adds	r3, #1
 8003512:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003514:	7efb      	ldrb	r3, [r7, #27]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	76fb      	strb	r3, [r7, #27]
      len--;
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	3b01      	subs	r3, #1
 8003520:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8003522:	7efb      	ldrb	r3, [r7, #27]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d114      	bne.n	8003552 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800352c:	461a      	mov	r2, r3
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800353a:	2b01      	cmp	r3, #1
 800353c:	d801      	bhi.n	8003542 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800353e:	2301      	movs	r3, #1
 8003540:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003548:	2b01      	cmp	r3, #1
 800354a:	d008      	beq.n	800355e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800354c:	2301      	movs	r3, #1
 800354e:	767b      	strb	r3, [r7, #25]
 8003550:	e005      	b.n	800355e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8003552:	7ebb      	ldrb	r3, [r7, #26]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003558:	7e7b      	ldrb	r3, [r7, #25]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1c6      	bne.n	80034f2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003564:	bf00      	nop
 8003566:	3724      	adds	r7, #36	; 0x24
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800358c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003596:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	79fa      	ldrb	r2, [r7, #7]
 80035d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7ff ffad 	bl	800356e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7ff fc65 	bl	8002ee4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800363e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003640:	89fb      	ldrh	r3, [r7, #14]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	89fa      	ldrh	r2, [r7, #14]
 800364a:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	7c1b      	ldrb	r3, [r3, #16]
 8003650:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8003652:	89fb      	ldrh	r3, [r7, #14]
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	89fa      	ldrh	r2, [r7, #14]
 800365c:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003664:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003666:	89fb      	ldrh	r3, [r7, #14]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	89fa      	ldrh	r2, [r7, #14]
 8003670:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003678:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800367a:	89fb      	ldrh	r3, [r7, #14]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003682:	4413      	add	r3, r2
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	7c52      	ldrb	r2, [r2, #17]
 8003688:	4293      	cmp	r3, r2
 800368a:	dd08      	ble.n	800369e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	7c5b      	ldrb	r3, [r3, #17]
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003698:	b29b      	uxth	r3, r3
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800369e:	89fb      	ldrh	r3, [r7, #14]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80036c0:	89fb      	ldrh	r3, [r7, #14]
 80036c2:	4413      	add	r3, r2
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	8a9a      	ldrh	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	8ada      	ldrh	r2, [r3, #22]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af02      	add	r7, sp, #8
 80036f0:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4603      	mov	r3, r0
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fe63 	bl	80033da <u8g2_IsIntersection>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003722:	e03b      	b.n	800379c <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003738:	429a      	cmp	r2, r3
 800373a:	d205      	bcs.n	8003748 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003754:	429a      	cmp	r2, r3
 8003756:	d905      	bls.n	8003764 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003770:	429a      	cmp	r2, r3
 8003772:	d205      	bcs.n	8003780 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800378c:	429a      	cmp	r2, r3
 800378e:	d905      	bls.n	800379c <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ff3c 	bl	800362a <u8g2_update_dimension_common>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff7b 	bl	80036ea <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	4608      	mov	r0, r1
 8003806:	4611      	mov	r1, r2
 8003808:	461a      	mov	r2, r3
 800380a:	4603      	mov	r3, r0
 800380c:	817b      	strh	r3, [r7, #10]
 800380e:	460b      	mov	r3, r1
 8003810:	813b      	strh	r3, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003816:	88f8      	ldrh	r0, [r7, #6]
 8003818:	893a      	ldrh	r2, [r7, #8]
 800381a:	8979      	ldrh	r1, [r7, #10]
 800381c:	7e3b      	ldrb	r3, [r7, #24]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	4603      	mov	r3, r0
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff fc7f 	bl	8003126 <u8g2_draw_hv_line_2dir>
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <u8x8_ascii_next+0x18>
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	2b0a      	cmp	r3, #10
 8003860:	d102      	bne.n	8003868 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003866:	e001      	b.n	800386c <u8x8_ascii_next+0x22>
  return b;
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	b29b      	uxth	r3, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <u8x8_utf8_next+0x18>
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	2b0a      	cmp	r3, #10
 800388c:	d102      	bne.n	8003894 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 800388e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003892:	e06e      	b.n	8003972 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800389a:	2b00      	cmp	r3, #0
 800389c:	d145      	bne.n	800392a <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	2bfb      	cmp	r3, #251	; 0xfb
 80038a2:	d908      	bls.n	80038b6 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2205      	movs	r2, #5
 80038a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	70fb      	strb	r3, [r7, #3]
 80038b4:	e032      	b.n	800391c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	2bf7      	cmp	r3, #247	; 0xf7
 80038ba:	d908      	bls.n	80038ce <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2204      	movs	r2, #4
 80038c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	70fb      	strb	r3, [r7, #3]
 80038cc:	e026      	b.n	800391c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	2bef      	cmp	r3, #239	; 0xef
 80038d2:	d908      	bls.n	80038e6 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2203      	movs	r2, #3
 80038d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	70fb      	strb	r3, [r7, #3]
 80038e4:	e01a      	b.n	800391c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	2bdf      	cmp	r3, #223	; 0xdf
 80038ea:	d908      	bls.n	80038fe <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	70fb      	strb	r3, [r7, #3]
 80038fc:	e00e      	b.n	800391c <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	2bbf      	cmp	r3, #191	; 0xbf
 8003902:	d908      	bls.n	8003916 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	70fb      	strb	r3, [r7, #3]
 8003914:	e002      	b.n	800391c <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	b29b      	uxth	r3, r3
 800391a:	e02a      	b.n	8003972 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	b29a      	uxth	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003924:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003928:	e023      	b.n	8003972 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003930:	3b01      	subs	r3, #1
 8003932:	b2da      	uxtb	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8c1b      	ldrh	r3, [r3, #32]
 800393e:	019b      	lsls	r3, r3, #6
 8003940:	b29a      	uxth	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003946:	78fb      	ldrb	r3, [r7, #3]
 8003948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800394c:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8c1a      	ldrh	r2, [r3, #32]
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	b29b      	uxth	r3, r3
 8003956:	4313      	orrs	r3, r2
 8003958:	b29a      	uxth	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8003968:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800396c:	e001      	b.n	8003972 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8c1b      	ldrh	r3, [r3, #32]
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800397c:	b590      	push	{r4, r7, lr}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691c      	ldr	r4, [r3, #16]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	2300      	movs	r3, #0
 8003990:	2120      	movs	r1, #32
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	47a0      	blx	r4
 8003996:	4603      	mov	r3, r0
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bd90      	pop	{r4, r7, pc}

080039a0 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	460b      	mov	r3, r1
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691c      	ldr	r4, [r3, #16]
 80039b2:	7afa      	ldrb	r2, [r7, #11]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2117      	movs	r1, #23
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	47a0      	blx	r4
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd90      	pop	{r4, r7, pc}

080039c6 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	460b      	mov	r3, r1
 80039d0:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80039d2:	1cfb      	adds	r3, r7, #3
 80039d4:	461a      	mov	r2, r3
 80039d6:	2101      	movs	r1, #1
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ffe1 	bl	80039a0 <u8x8_byte_SendBytes>
 80039de:	4603      	mov	r3, r0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68dc      	ldr	r4, [r3, #12]
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	2300      	movs	r3, #0
 80039fc:	2115      	movs	r1, #21
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	47a0      	blx	r4
 8003a02:	4603      	mov	r3, r0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd90      	pop	{r4, r7, pc}

08003a0c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003a0c:	b590      	push	{r4, r7, lr}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68dc      	ldr	r4, [r3, #12]
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2116      	movs	r1, #22
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	47a0      	blx	r4
 8003a26:	4603      	mov	r3, r0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd90      	pop	{r4, r7, pc}

08003a30 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68dc      	ldr	r4, [r3, #12]
 8003a42:	7afa      	ldrb	r2, [r7, #11]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2117      	movs	r1, #23
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	47a0      	blx	r4
 8003a4c:	4603      	mov	r3, r0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd90      	pop	{r4, r7, pc}

08003a56 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003a56:	b590      	push	{r4, r7, lr}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68dc      	ldr	r4, [r3, #12]
 8003a62:	2300      	movs	r3, #0
 8003a64:	2200      	movs	r2, #0
 8003a66:	2118      	movs	r1, #24
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	47a0      	blx	r4
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}

08003a76 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003a76:	b590      	push	{r4, r7, lr}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68dc      	ldr	r4, [r3, #12]
 8003a82:	2300      	movs	r3, #0
 8003a84:	2200      	movs	r2, #0
 8003a86:	2119      	movs	r1, #25
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	47a0      	blx	r4
 8003a8c:	4603      	mov	r3, r0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd90      	pop	{r4, r7, pc}

08003a96 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003a96:	b590      	push	{r4, r7, lr}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	73fb      	strb	r3, [r7, #15]
    data++;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	2bfe      	cmp	r3, #254	; 0xfe
 8003ab0:	d031      	beq.n	8003b16 <u8x8_cad_SendSequence+0x80>
 8003ab2:	2bfe      	cmp	r3, #254	; 0xfe
 8003ab4:	dc3d      	bgt.n	8003b32 <u8x8_cad_SendSequence+0x9c>
 8003ab6:	2b19      	cmp	r3, #25
 8003ab8:	dc3b      	bgt.n	8003b32 <u8x8_cad_SendSequence+0x9c>
 8003aba:	2b18      	cmp	r3, #24
 8003abc:	da23      	bge.n	8003b06 <u8x8_cad_SendSequence+0x70>
 8003abe:	2b16      	cmp	r3, #22
 8003ac0:	dc02      	bgt.n	8003ac8 <u8x8_cad_SendSequence+0x32>
 8003ac2:	2b15      	cmp	r3, #21
 8003ac4:	da03      	bge.n	8003ace <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003ac6:	e034      	b.n	8003b32 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003ac8:	2b17      	cmp	r3, #23
 8003aca:	d00e      	beq.n	8003aea <u8x8_cad_SendSequence+0x54>
	return;
 8003acc:	e031      	b.n	8003b32 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68dc      	ldr	r4, [r3, #12]
 8003ad8:	7bba      	ldrb	r2, [r7, #14]
 8003ada:	7bf9      	ldrb	r1, [r7, #15]
 8003adc:	2300      	movs	r3, #0
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	47a0      	blx	r4
	  data++;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	603b      	str	r3, [r7, #0]
	  break;
 8003ae8:	e022      	b.n	8003b30 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003af0:	f107 030e 	add.w	r3, r7, #14
 8003af4:	461a      	mov	r2, r3
 8003af6:	2101      	movs	r1, #1
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff99 	bl	8003a30 <u8x8_cad_SendData>
	  data++;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	603b      	str	r3, [r7, #0]
	  break;
 8003b04:	e014      	b.n	8003b30 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68dc      	ldr	r4, [r3, #12]
 8003b0a:	7bf9      	ldrb	r1, [r7, #15]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	2200      	movs	r2, #0
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	47a0      	blx	r4
	  break;
 8003b14:	e00c      	b.n	8003b30 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003b1c:	7bbb      	ldrb	r3, [r7, #14]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2129      	movs	r1, #41	; 0x29
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f9ed 	bl	8003f02 <u8x8_gpio_call>
	  data++;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	603b      	str	r3, [r7, #0]
	  break;
 8003b2e:	bf00      	nop
    cmd = *data;
 8003b30:	e7b6      	b.n	8003aa0 <u8x8_cad_SendSequence+0xa>
	return;
 8003b32:	bf00      	nop
    }
  }
}
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd90      	pop	{r4, r7, pc}
	...

08003b3c <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	460b      	mov	r3, r1
 8003b48:	72fb      	strb	r3, [r7, #11]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	3b14      	subs	r3, #20
 8003b52:	2b05      	cmp	r3, #5
 8003b54:	d82f      	bhi.n	8003bb6 <u8x8_cad_001+0x7a>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <u8x8_cad_001+0x20>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003ba5 	.word	0x08003ba5
 8003b60:	08003b75 	.word	0x08003b75
 8003b64:	08003b89 	.word	0x08003b89
 8003b68:	08003b9d 	.word	0x08003b9d
 8003b6c:	08003ba5 	.word	0x08003ba5
 8003b70:	08003ba5 	.word	0x08003ba5
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003b74:	2100      	movs	r1, #0
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff ff00 	bl	800397c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003b7c:	7abb      	ldrb	r3, [r7, #10]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7ff ff20 	bl	80039c6 <u8x8_byte_SendByte>
      break;
 8003b86:	e018      	b.n	8003bba <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003b88:	2100      	movs	r1, #0
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff fef6 	bl	800397c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003b90:	7abb      	ldrb	r3, [r7, #10]
 8003b92:	4619      	mov	r1, r3
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff ff16 	bl	80039c6 <u8x8_byte_SendByte>
      break;
 8003b9a:	e00e      	b.n	8003bba <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7ff feec 	bl	800397c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	691c      	ldr	r4, [r3, #16]
 8003ba8:	7aba      	ldrb	r2, [r7, #10]
 8003baa:	7af9      	ldrb	r1, [r7, #11]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	47a0      	blx	r4
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	e002      	b.n	8003bbc <u8x8_cad_001+0x80>
    default:
      return 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e000      	b.n	8003bbc <u8x8_cad_001+0x80>
  }
  return 1;
 8003bba:	2301      	movs	r3, #1
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd90      	pop	{r4, r7, pc}

08003bc4 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	72fb      	strb	r3, [r7, #11]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	3b0b      	subs	r3, #11
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	f200 808e 	bhi.w	8003cfc <u8x8_d_uc1604_common+0x138>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <u8x8_d_uc1604_common+0x24>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c91 	.word	0x08003c91
 8003bec:	08003cfd 	.word	0x08003cfd
 8003bf0:	08003cab 	.word	0x08003cab
 8003bf4:	08003cdd 	.word	0x08003cdd
 8003bf8:	08003bfd 	.word	0x08003bfd
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f7ff ff2a 	bl	8003a56 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	795b      	ldrb	r3, [r3, #5]
 8003c06:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	4619      	mov	r1, r3
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff fee5 	bl	80039e8 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f043 0310 	orr.w	r3, r3, #16
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff fedb 	bl	80039e8 <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	799b      	ldrb	r3, [r3, #6]
 8003c36:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003c3e:	7dbb      	ldrb	r3, [r7, #22]
 8003c40:	4413      	add	r3, r2
 8003c42:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8003c44:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	b25b      	sxtb	r3, r3
 8003c4e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003c52:	b25b      	sxtb	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff fec5 	bl	80039e8 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	791b      	ldrb	r3, [r3, #4]
 8003c62:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8003c64:	7d7b      	ldrb	r3, [r7, #21]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8003c70:	7d7b      	ldrb	r3, [r7, #21]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4619      	mov	r1, r3
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff feda 	bl	8003a30 <u8x8_cad_SendData>
	arg_int--;
 8003c7c:	7abb      	ldrb	r3, [r7, #10]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003c82:	7abb      	ldrb	r3, [r7, #10]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f3      	bne.n	8003c70 <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7ff fef4 	bl	8003a76 <u8x8_cad_EndTransfer>
      break;
 8003c8e:	e037      	b.n	8003d00 <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003c90:	7abb      	ldrb	r3, [r7, #10]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d104      	bne.n	8003ca0 <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 8003c96:	491d      	ldr	r1, [pc, #116]	; (8003d0c <u8x8_d_uc1604_common+0x148>)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff fefc 	bl	8003a96 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 8003c9e:	e02f      	b.n	8003d00 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 8003ca0:	491b      	ldr	r1, [pc, #108]	; (8003d10 <u8x8_d_uc1604_common+0x14c>)
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f7ff fef7 	bl	8003a96 <u8x8_cad_SendSequence>
      break;
 8003ca8:	e02a      	b.n	8003d00 <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003caa:	7abb      	ldrb	r3, [r7, #10]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 8003cb0:	4918      	ldr	r1, [pc, #96]	; (8003d14 <u8x8_d_uc1604_common+0x150>)
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7ff feef 	bl	8003a96 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	7c9a      	ldrb	r2, [r3, #18]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8003cc4:	e01c      	b.n	8003d00 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 8003cc6:	4914      	ldr	r1, [pc, #80]	; (8003d18 <u8x8_d_uc1604_common+0x154>)
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff fee4 	bl	8003a96 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	7cda      	ldrb	r2, [r3, #19]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003cda:	e011      	b.n	8003d00 <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7ff feba 	bl	8003a56 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003ce2:	2181      	movs	r1, #129	; 0x81
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f7ff fe7f 	bl	80039e8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 8003cea:	7abb      	ldrb	r3, [r7, #10]
 8003cec:	4619      	mov	r1, r3
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7ff fe8c 	bl	8003a0c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f7ff febe 	bl	8003a76 <u8x8_cad_EndTransfer>
      break;
 8003cfa:	e001      	b.n	8003d00 <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 8003d00:	2301      	movs	r3, #1
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	0800e440 	.word	0x0800e440
 8003d10:	0800e450 	.word	0x0800e450
 8003d14:	0800e458 	.word	0x0800e458
 8003d18:	0800e460 	.word	0x0800e460

08003d1c <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	72fb      	strb	r3, [r7, #11]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003d2e:	7aba      	ldrb	r2, [r7, #10]
 8003d30:	7af9      	ldrb	r1, [r7, #11]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f7ff ff45 	bl	8003bc4 <u8x8_d_uc1604_common>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d114      	bne.n	8003d6a <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003d40:	7afb      	ldrb	r3, [r7, #11]
 8003d42:	2b09      	cmp	r3, #9
 8003d44:	d002      	beq.n	8003d4c <u8x8_d_uc1604_jlx19264+0x30>
 8003d46:	2b0a      	cmp	r3, #10
 8003d48:	d005      	beq.n	8003d56 <u8x8_d_uc1604_jlx19264+0x3a>
 8003d4a:	e00c      	b.n	8003d66 <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8003d4c:	490a      	ldr	r1, [pc, #40]	; (8003d78 <u8x8_d_uc1604_jlx19264+0x5c>)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f816 	bl	8003d80 <u8x8_d_helper_display_setup_memory>
	break;
 8003d54:	e00a      	b.n	8003d6c <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f825 	bl	8003da6 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8003d5c:	4907      	ldr	r1, [pc, #28]	; (8003d7c <u8x8_d_uc1604_jlx19264+0x60>)
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff fe99 	bl	8003a96 <u8x8_cad_SendSequence>
	break;
 8003d64:	e002      	b.n	8003d6c <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 8003d66:	2300      	movs	r3, #0
 8003d68:	e001      	b.n	8003d6e <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 8003d6a:	bf00      	nop
  return 1;
 8003d6c:	2301      	movs	r3, #1
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	0800e468 	.word	0x0800e468
 8003d7c:	0800e480 	.word	0x0800e480

08003d80 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	7c9a      	ldrb	r2, [r3, #18]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003da6:	b590      	push	{r4, r7, lr}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695c      	ldr	r4, [r3, #20]
 8003db2:	2300      	movs	r3, #0
 8003db4:	2200      	movs	r2, #0
 8003db6:	2128      	movs	r1, #40	; 0x28
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68dc      	ldr	r4, [r3, #12]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2114      	movs	r1, #20
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003dca:	2201      	movs	r2, #1
 8003dcc:	214b      	movs	r1, #75	; 0x4b
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f897 	bl	8003f02 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	791b      	ldrb	r3, [r3, #4]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2129      	movs	r1, #41	; 0x29
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f88f 	bl	8003f02 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003de4:	2200      	movs	r2, #0
 8003de6:	214b      	movs	r1, #75	; 0x4b
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f88a 	bl	8003f02 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	791b      	ldrb	r3, [r3, #4]
 8003df4:	461a      	mov	r2, r3
 8003df6:	2129      	movs	r1, #41	; 0x29
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f882 	bl	8003f02 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003dfe:	2201      	movs	r2, #1
 8003e00:	214b      	movs	r1, #75	; 0x4b
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f87d 	bl	8003f02 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	795b      	ldrb	r3, [r3, #5]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2129      	movs	r1, #41	; 0x29
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f875 	bl	8003f02 <u8x8_gpio_call>
}    
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd90      	pop	{r4, r7, pc}

08003e20 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	4608      	mov	r0, r1
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4603      	mov	r3, r0
 8003e30:	70fb      	strb	r3, [r7, #3]
 8003e32:	460b      	mov	r3, r1
 8003e34:	70bb      	strb	r3, [r7, #2]
 8003e36:	4613      	mov	r3, r2
 8003e38:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003e3e:	78bb      	ldrb	r3, [r7, #2]
 8003e40:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003e42:	787b      	ldrb	r3, [r7, #1]
 8003e44:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689c      	ldr	r4, [r3, #8]
 8003e4e:	f107 0308 	add.w	r3, r7, #8
 8003e52:	2201      	movs	r2, #1
 8003e54:	210f      	movs	r1, #15
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	47a0      	blx	r4
 8003e5a:	4603      	mov	r3, r0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd90      	pop	{r4, r7, pc}

08003e64 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689c      	ldr	r4, [r3, #8]
 8003e70:	2300      	movs	r3, #0
 8003e72:	2200      	movs	r2, #0
 8003e74:	2109      	movs	r1, #9
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	47a0      	blx	r4
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd90      	pop	{r4, r7, pc}

08003e82 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003e82:	b590      	push	{r4, r7, lr}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689c      	ldr	r4, [r3, #8]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2200      	movs	r2, #0
 8003e92:	210a      	movs	r1, #10
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	47a0      	blx	r4
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689c      	ldr	r4, [r3, #8]
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	210b      	movs	r1, #11
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	47a0      	blx	r4
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}

08003ec2 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8003ec2:	b590      	push	{r4, r7, lr}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689c      	ldr	r4, [r3, #8]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	210e      	movs	r1, #14
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	47a0      	blx	r4
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd90      	pop	{r4, r7, pc}

08003ee4 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689c      	ldr	r4, [r3, #8]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2110      	movs	r1, #16
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	47a0      	blx	r4
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd90      	pop	{r4, r7, pc}

08003f02 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003f02:	b590      	push	{r4, r7, lr}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	70fb      	strb	r3, [r7, #3]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695c      	ldr	r4, [r3, #20]
 8003f16:	78ba      	ldrb	r2, [r7, #2]
 8003f18:	78f9      	ldrb	r1, [r7, #3]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	47a0      	blx	r4
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd90      	pop	{r4, r7, pc}

08003f28 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	607b      	str	r3, [r7, #4]
 8003f32:	460b      	mov	r3, r1
 8003f34:	72fb      	strb	r3, [r7, #11]
 8003f36:	4613      	mov	r3, r2
 8003f38:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
	...

08003f48 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <u8x8_SetupDefaults+0x58>)
 8003f5a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <u8x8_SetupDefaults+0x58>)
 8003f60:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <u8x8_SetupDefaults+0x58>)
 8003f66:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a0d      	ldr	r2, [pc, #52]	; (8003fa0 <u8x8_SetupDefaults+0x58>)
 8003f6c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	22ff      	movs	r2, #255	; 0xff
 8003f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	22ff      	movs	r2, #255	; 0xff
 8003f90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	08003f29 	.word	0x08003f29

08003fa4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff ffc8 	bl	8003f48 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f7ff ff47 	bl	8003e64 <u8x8_SetupMemory>
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fe0:	480c      	ldr	r0, [pc, #48]	; (8004014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fe2:	490d      	ldr	r1, [pc, #52]	; (8004018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe8:	e002      	b.n	8003ff0 <LoopCopyDataInit>

08003fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fee:	3304      	adds	r3, #4

08003ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff4:	d3f9      	bcc.n	8003fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ff8:	4c0a      	ldr	r4, [pc, #40]	; (8004024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ffc:	e001      	b.n	8004002 <LoopFillZerobss>

08003ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004000:	3204      	adds	r2, #4

08004002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004004:	d3fb      	bcc.n	8003ffe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004006:	f7fd fde5 	bl	8001bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800400a:	f008 fdcb 	bl	800cba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800400e:	f7fd fa0b 	bl	8001428 <main>
  bx lr
 8004012:	4770      	bx	lr
  ldr r0, =_sdata
 8004014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004018:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 800401c:	0800e4e0 	.word	0x0800e4e0
  ldr r2, =_sbss
 8004020:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 8004024:	20001ee0 	.word	0x20001ee0

08004028 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004028:	e7fe      	b.n	8004028 <ADC1_2_IRQHandler>
	...

0800402c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004030:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_Init+0x28>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a07      	ldr	r2, [pc, #28]	; (8004054 <HAL_Init+0x28>)
 8004036:	f043 0310 	orr.w	r3, r3, #16
 800403a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800403c:	2003      	movs	r0, #3
 800403e:	f000 f981 	bl	8004344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004042:	200f      	movs	r0, #15
 8004044:	f000 f808 	bl	8004058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004048:	f7fd fc38 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40022000 	.word	0x40022000

08004058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_InitTick+0x54>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <HAL_InitTick+0x58>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	4619      	mov	r1, r3
 800406a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800406e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f9ab 	bl	80043d2 <HAL_SYSTICK_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e00e      	b.n	80040a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b0f      	cmp	r3, #15
 800408a:	d80a      	bhi.n	80040a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800408c:	2200      	movs	r2, #0
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004094:	f000 f961 	bl	800435a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004098:	4a06      	ldr	r2, [pc, #24]	; (80040b4 <HAL_InitTick+0x5c>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000230 	.word	0x20000230
 80040b0:	20000238 	.word	0x20000238
 80040b4:	20000234 	.word	0x20000234

080040b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_IncTick+0x1c>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_IncTick+0x20>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4413      	add	r3, r2
 80040c8:	4a03      	ldr	r2, [pc, #12]	; (80040d8 <HAL_IncTick+0x20>)
 80040ca:	6013      	str	r3, [r2, #0]
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	20000238 	.word	0x20000238
 80040d8:	20000d28 	.word	0x20000d28

080040dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  return uwTick;
 80040e0:	4b02      	ldr	r3, [pc, #8]	; (80040ec <HAL_GetTick+0x10>)
 80040e2:	681b      	ldr	r3, [r3, #0]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	20000d28 	.word	0x20000d28

080040f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7ff fff0 	bl	80040dc <HAL_GetTick>
 80040fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004108:	d005      	beq.n	8004116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_Delay+0x44>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004116:	bf00      	nop
 8004118:	f7ff ffe0 	bl	80040dc <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	429a      	cmp	r2, r3
 8004126:	d8f7      	bhi.n	8004118 <HAL_Delay+0x28>
  {
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000238 	.word	0x20000238

08004138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <__NVIC_SetPriorityGrouping+0x44>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004154:	4013      	ands	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416a:	4a04      	ldr	r2, [pc, #16]	; (800417c <__NVIC_SetPriorityGrouping+0x44>)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	60d3      	str	r3, [r2, #12]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <__NVIC_GetPriorityGrouping+0x18>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	f003 0307 	and.w	r3, r3, #7
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	db0b      	blt.n	80041c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	4906      	ldr	r1, [pc, #24]	; (80041d0 <__NVIC_EnableIRQ+0x34>)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2001      	movs	r0, #1
 80041be:	fa00 f202 	lsl.w	r2, r0, r2
 80041c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr
 80041d0:	e000e100 	.word	0xe000e100

080041d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	db12      	blt.n	800420c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	f003 021f 	and.w	r2, r3, #31
 80041ec:	490a      	ldr	r1, [pc, #40]	; (8004218 <__NVIC_DisableIRQ+0x44>)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	2001      	movs	r0, #1
 80041f6:	fa00 f202 	lsl.w	r2, r0, r2
 80041fa:	3320      	adds	r3, #32
 80041fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004200:	f3bf 8f4f 	dsb	sy
}
 8004204:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004206:	f3bf 8f6f 	isb	sy
}
 800420a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000e100 	.word	0xe000e100

0800421c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db0a      	blt.n	8004246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	490c      	ldr	r1, [pc, #48]	; (8004268 <__NVIC_SetPriority+0x4c>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	440b      	add	r3, r1
 8004240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004244:	e00a      	b.n	800425c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4908      	ldr	r1, [pc, #32]	; (800426c <__NVIC_SetPriority+0x50>)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	3b04      	subs	r3, #4
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	440b      	add	r3, r1
 800425a:	761a      	strb	r2, [r3, #24]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000e100 	.word	0xe000e100
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f1c3 0307 	rsb	r3, r3, #7
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf28      	it	cs
 800428e:	2304      	movcs	r3, #4
 8004290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3304      	adds	r3, #4
 8004296:	2b06      	cmp	r3, #6
 8004298:	d902      	bls.n	80042a0 <NVIC_EncodePriority+0x30>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3b03      	subs	r3, #3
 800429e:	e000      	b.n	80042a2 <NVIC_EncodePriority+0x32>
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	401a      	ands	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	43d9      	mvns	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	4313      	orrs	r3, r2
         );
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80042d8:	f3bf 8f4f 	dsb	sy
}
 80042dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <__NVIC_SystemReset+0x24>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80042e6:	4904      	ldr	r1, [pc, #16]	; (80042f8 <__NVIC_SystemReset+0x24>)
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <__NVIC_SystemReset+0x28>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80042ee:	f3bf 8f4f 	dsb	sy
}
 80042f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <__NVIC_SystemReset+0x20>
 80042f8:	e000ed00 	.word	0xe000ed00
 80042fc:	05fa0004 	.word	0x05fa0004

08004300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004310:	d301      	bcc.n	8004316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004312:	2301      	movs	r3, #1
 8004314:	e00f      	b.n	8004336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <SysTick_Config+0x40>)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800431e:	210f      	movs	r1, #15
 8004320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004324:	f7ff ff7a 	bl	800421c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <SysTick_Config+0x40>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <SysTick_Config+0x40>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	e000e010 	.word	0xe000e010

08004344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff fef3 	bl	8004138 <__NVIC_SetPriorityGrouping>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800436c:	f7ff ff08 	bl	8004180 <__NVIC_GetPriorityGrouping>
 8004370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	6978      	ldr	r0, [r7, #20]
 8004378:	f7ff ff7a 	bl	8004270 <NVIC_EncodePriority>
 800437c:	4602      	mov	r2, r0
 800437e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff49 	bl	800421c <__NVIC_SetPriority>
}
 800438a:	bf00      	nop
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800439c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fefb 	bl	800419c <__NVIC_EnableIRQ>
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff09 	bl	80041d4 <__NVIC_DisableIRQ>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80043ce:	f7ff ff81 	bl	80042d4 <__NVIC_SystemReset>

080043d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ff90 	bl	8004300 <SysTick_Config>
 80043e0:	4603      	mov	r3, r0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b08b      	sub	sp, #44	; 0x2c
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043f6:	2300      	movs	r3, #0
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043fe:	e169      	b.n	80046d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004400:	2201      	movs	r2, #1
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	429a      	cmp	r2, r3
 800441a:	f040 8158 	bne.w	80046ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4a9a      	ldr	r2, [pc, #616]	; (800468c <HAL_GPIO_Init+0x2a0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d05e      	beq.n	80044e6 <HAL_GPIO_Init+0xfa>
 8004428:	4a98      	ldr	r2, [pc, #608]	; (800468c <HAL_GPIO_Init+0x2a0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d875      	bhi.n	800451a <HAL_GPIO_Init+0x12e>
 800442e:	4a98      	ldr	r2, [pc, #608]	; (8004690 <HAL_GPIO_Init+0x2a4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d058      	beq.n	80044e6 <HAL_GPIO_Init+0xfa>
 8004434:	4a96      	ldr	r2, [pc, #600]	; (8004690 <HAL_GPIO_Init+0x2a4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d86f      	bhi.n	800451a <HAL_GPIO_Init+0x12e>
 800443a:	4a96      	ldr	r2, [pc, #600]	; (8004694 <HAL_GPIO_Init+0x2a8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d052      	beq.n	80044e6 <HAL_GPIO_Init+0xfa>
 8004440:	4a94      	ldr	r2, [pc, #592]	; (8004694 <HAL_GPIO_Init+0x2a8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d869      	bhi.n	800451a <HAL_GPIO_Init+0x12e>
 8004446:	4a94      	ldr	r2, [pc, #592]	; (8004698 <HAL_GPIO_Init+0x2ac>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d04c      	beq.n	80044e6 <HAL_GPIO_Init+0xfa>
 800444c:	4a92      	ldr	r2, [pc, #584]	; (8004698 <HAL_GPIO_Init+0x2ac>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d863      	bhi.n	800451a <HAL_GPIO_Init+0x12e>
 8004452:	4a92      	ldr	r2, [pc, #584]	; (800469c <HAL_GPIO_Init+0x2b0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d046      	beq.n	80044e6 <HAL_GPIO_Init+0xfa>
 8004458:	4a90      	ldr	r2, [pc, #576]	; (800469c <HAL_GPIO_Init+0x2b0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d85d      	bhi.n	800451a <HAL_GPIO_Init+0x12e>
 800445e:	2b12      	cmp	r3, #18
 8004460:	d82a      	bhi.n	80044b8 <HAL_GPIO_Init+0xcc>
 8004462:	2b12      	cmp	r3, #18
 8004464:	d859      	bhi.n	800451a <HAL_GPIO_Init+0x12e>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <HAL_GPIO_Init+0x80>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	080044e7 	.word	0x080044e7
 8004470:	080044c1 	.word	0x080044c1
 8004474:	080044d3 	.word	0x080044d3
 8004478:	08004515 	.word	0x08004515
 800447c:	0800451b 	.word	0x0800451b
 8004480:	0800451b 	.word	0x0800451b
 8004484:	0800451b 	.word	0x0800451b
 8004488:	0800451b 	.word	0x0800451b
 800448c:	0800451b 	.word	0x0800451b
 8004490:	0800451b 	.word	0x0800451b
 8004494:	0800451b 	.word	0x0800451b
 8004498:	0800451b 	.word	0x0800451b
 800449c:	0800451b 	.word	0x0800451b
 80044a0:	0800451b 	.word	0x0800451b
 80044a4:	0800451b 	.word	0x0800451b
 80044a8:	0800451b 	.word	0x0800451b
 80044ac:	0800451b 	.word	0x0800451b
 80044b0:	080044c9 	.word	0x080044c9
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	4a79      	ldr	r2, [pc, #484]	; (80046a0 <HAL_GPIO_Init+0x2b4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044be:	e02c      	b.n	800451a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	623b      	str	r3, [r7, #32]
          break;
 80044c6:	e029      	b.n	800451c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	3304      	adds	r3, #4
 80044ce:	623b      	str	r3, [r7, #32]
          break;
 80044d0:	e024      	b.n	800451c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	3308      	adds	r3, #8
 80044d8:	623b      	str	r3, [r7, #32]
          break;
 80044da:	e01f      	b.n	800451c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	330c      	adds	r3, #12
 80044e2:	623b      	str	r3, [r7, #32]
          break;
 80044e4:	e01a      	b.n	800451c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80044ee:	2304      	movs	r3, #4
 80044f0:	623b      	str	r3, [r7, #32]
          break;
 80044f2:	e013      	b.n	800451c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044fc:	2308      	movs	r3, #8
 80044fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	611a      	str	r2, [r3, #16]
          break;
 8004506:	e009      	b.n	800451c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004508:	2308      	movs	r3, #8
 800450a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	615a      	str	r2, [r3, #20]
          break;
 8004512:	e003      	b.n	800451c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004514:	2300      	movs	r3, #0
 8004516:	623b      	str	r3, [r7, #32]
          break;
 8004518:	e000      	b.n	800451c <HAL_GPIO_Init+0x130>
          break;
 800451a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2bff      	cmp	r3, #255	; 0xff
 8004520:	d801      	bhi.n	8004526 <HAL_GPIO_Init+0x13a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	e001      	b.n	800452a <HAL_GPIO_Init+0x13e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3304      	adds	r3, #4
 800452a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2bff      	cmp	r3, #255	; 0xff
 8004530:	d802      	bhi.n	8004538 <HAL_GPIO_Init+0x14c>
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	e002      	b.n	800453e <HAL_GPIO_Init+0x152>
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	3b08      	subs	r3, #8
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	210f      	movs	r1, #15
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	fa01 f303 	lsl.w	r3, r1, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	401a      	ands	r2, r3
 8004550:	6a39      	ldr	r1, [r7, #32]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	fa01 f303 	lsl.w	r3, r1, r3
 8004558:	431a      	orrs	r2, r3
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 80b1 	beq.w	80046ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800456c:	4b4d      	ldr	r3, [pc, #308]	; (80046a4 <HAL_GPIO_Init+0x2b8>)
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	4a4c      	ldr	r2, [pc, #304]	; (80046a4 <HAL_GPIO_Init+0x2b8>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6193      	str	r3, [r2, #24]
 8004578:	4b4a      	ldr	r3, [pc, #296]	; (80046a4 <HAL_GPIO_Init+0x2b8>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004584:	4a48      	ldr	r2, [pc, #288]	; (80046a8 <HAL_GPIO_Init+0x2bc>)
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004590:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	220f      	movs	r2, #15
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4013      	ands	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a40      	ldr	r2, [pc, #256]	; (80046ac <HAL_GPIO_Init+0x2c0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d013      	beq.n	80045d8 <HAL_GPIO_Init+0x1ec>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a3f      	ldr	r2, [pc, #252]	; (80046b0 <HAL_GPIO_Init+0x2c4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00d      	beq.n	80045d4 <HAL_GPIO_Init+0x1e8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a3e      	ldr	r2, [pc, #248]	; (80046b4 <HAL_GPIO_Init+0x2c8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <HAL_GPIO_Init+0x1e4>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a3d      	ldr	r2, [pc, #244]	; (80046b8 <HAL_GPIO_Init+0x2cc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d101      	bne.n	80045cc <HAL_GPIO_Init+0x1e0>
 80045c8:	2303      	movs	r3, #3
 80045ca:	e006      	b.n	80045da <HAL_GPIO_Init+0x1ee>
 80045cc:	2304      	movs	r3, #4
 80045ce:	e004      	b.n	80045da <HAL_GPIO_Init+0x1ee>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e002      	b.n	80045da <HAL_GPIO_Init+0x1ee>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <HAL_GPIO_Init+0x1ee>
 80045d8:	2300      	movs	r3, #0
 80045da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045dc:	f002 0203 	and.w	r2, r2, #3
 80045e0:	0092      	lsls	r2, r2, #2
 80045e2:	4093      	lsls	r3, r2
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80045ea:	492f      	ldr	r1, [pc, #188]	; (80046a8 <HAL_GPIO_Init+0x2bc>)
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	089b      	lsrs	r3, r3, #2
 80045f0:	3302      	adds	r3, #2
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d006      	beq.n	8004612 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004604:	4b2d      	ldr	r3, [pc, #180]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	492c      	ldr	r1, [pc, #176]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]
 8004610:	e006      	b.n	8004620 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004612:	4b2a      	ldr	r3, [pc, #168]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	43db      	mvns	r3, r3
 800461a:	4928      	ldr	r1, [pc, #160]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 800461c:	4013      	ands	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d006      	beq.n	800463a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800462c:	4b23      	ldr	r3, [pc, #140]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	4922      	ldr	r1, [pc, #136]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
 8004638:	e006      	b.n	8004648 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	43db      	mvns	r3, r3
 8004642:	491e      	ldr	r1, [pc, #120]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 8004644:	4013      	ands	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d006      	beq.n	8004662 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004654:	4b19      	ldr	r3, [pc, #100]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	4918      	ldr	r1, [pc, #96]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]
 8004660:	e006      	b.n	8004670 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004662:	4b16      	ldr	r3, [pc, #88]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	43db      	mvns	r3, r3
 800466a:	4914      	ldr	r1, [pc, #80]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 800466c:	4013      	ands	r3, r2
 800466e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d021      	beq.n	80046c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	490e      	ldr	r1, [pc, #56]	; (80046bc <HAL_GPIO_Init+0x2d0>)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	4313      	orrs	r3, r2
 8004686:	60cb      	str	r3, [r1, #12]
 8004688:	e021      	b.n	80046ce <HAL_GPIO_Init+0x2e2>
 800468a:	bf00      	nop
 800468c:	10320000 	.word	0x10320000
 8004690:	10310000 	.word	0x10310000
 8004694:	10220000 	.word	0x10220000
 8004698:	10210000 	.word	0x10210000
 800469c:	10120000 	.word	0x10120000
 80046a0:	10110000 	.word	0x10110000
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40010000 	.word	0x40010000
 80046ac:	40010800 	.word	0x40010800
 80046b0:	40010c00 	.word	0x40010c00
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40011400 	.word	0x40011400
 80046bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_GPIO_Init+0x304>)
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	4909      	ldr	r1, [pc, #36]	; (80046f0 <HAL_GPIO_Init+0x304>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	3301      	adds	r3, #1
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f47f ae8e 	bne.w	8004400 <HAL_GPIO_Init+0x14>
  }
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	372c      	adds	r7, #44	; 0x2c
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	40010400 	.word	0x40010400

080046f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	807b      	strh	r3, [r7, #2]
 8004700:	4613      	mov	r3, r2
 8004702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004704:	787b      	ldrb	r3, [r7, #1]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800470a:	887a      	ldrh	r2, [r7, #2]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004710:	e003      	b.n	800471a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004712:	887b      	ldrh	r3, [r7, #2]
 8004714:	041a      	lsls	r2, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	611a      	str	r2, [r3, #16]
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004736:	887a      	ldrh	r2, [r7, #2]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4013      	ands	r3, r2
 800473c:	041a      	lsls	r2, r3, #16
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	43d9      	mvns	r1, r3
 8004742:	887b      	ldrh	r3, [r7, #2]
 8004744:	400b      	ands	r3, r1
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	611a      	str	r2, [r3, #16]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
	...

08004758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d006      	beq.n	800477c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800476e:	4a05      	ldr	r2, [pc, #20]	; (8004784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004774:	88fb      	ldrh	r3, [r7, #6]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc fe38 	bl	80013ec <HAL_GPIO_EXTI_Callback>
  }
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40010400 	.word	0x40010400

08004788 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478a:	b08b      	sub	sp, #44	; 0x2c
 800478c:	af06      	add	r7, sp, #24
 800478e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e0fd      	b.n	8004996 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d106      	bne.n	80047b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f007 ff40 	bl	800c634 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2203      	movs	r2, #3
 80047b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f003 fc10 	bl	8007fe6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	687e      	ldr	r6, [r7, #4]
 80047ce:	466d      	mov	r5, sp
 80047d0:	f106 0410 	add.w	r4, r6, #16
 80047d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	1d33      	adds	r3, r6, #4
 80047de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047e0:	6838      	ldr	r0, [r7, #0]
 80047e2:	f003 fbda 	bl	8007f9a <USB_CoreInit>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e0ce      	b.n	8004996 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2100      	movs	r1, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 fc0b 	bl	800801a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004804:	2300      	movs	r3, #0
 8004806:	73fb      	strb	r3, [r7, #15]
 8004808:	e04c      	b.n	80048a4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	440b      	add	r3, r1
 800481a:	3301      	adds	r3, #1
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	7bfa      	ldrb	r2, [r7, #15]
 8004832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	b298      	uxth	r0, r3
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	440b      	add	r3, r1
 8004846:	3336      	adds	r3, #54	; 0x36
 8004848:	4602      	mov	r2, r0
 800484a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	440b      	add	r3, r1
 800485c:	3303      	adds	r3, #3
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004862:	7bfa      	ldrb	r2, [r7, #15]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	440b      	add	r3, r1
 8004870:	3338      	adds	r3, #56	; 0x38
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004876:	7bfa      	ldrb	r2, [r7, #15]
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	440b      	add	r3, r1
 8004884:	333c      	adds	r3, #60	; 0x3c
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800488a:	7bfa      	ldrb	r2, [r7, #15]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	00db      	lsls	r3, r3, #3
 8004896:	440b      	add	r3, r1
 8004898:	3340      	adds	r3, #64	; 0x40
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	3301      	adds	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d3ad      	bcc.n	800480a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]
 80048b2:	e044      	b.n	800493e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048b4:	7bfa      	ldrb	r2, [r7, #15]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	440b      	add	r3, r1
 80048c2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048ca:	7bfa      	ldrb	r2, [r7, #15]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	440b      	add	r3, r1
 80048d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048dc:	7bfa      	ldrb	r2, [r7, #15]
 80048de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048e0:	7bfa      	ldrb	r2, [r7, #15]
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	440b      	add	r3, r1
 80048ee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80048f2:	2200      	movs	r2, #0
 80048f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048f6:	7bfa      	ldrb	r2, [r7, #15]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	440b      	add	r3, r1
 8004904:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800490c:	7bfa      	ldrb	r2, [r7, #15]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	440b      	add	r3, r1
 800491a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	440b      	add	r3, r1
 8004930:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	3301      	adds	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
 800493e:	7bfa      	ldrb	r2, [r7, #15]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d3b5      	bcc.n	80048b4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	687e      	ldr	r6, [r7, #4]
 8004950:	466d      	mov	r5, sp
 8004952:	f106 0410 	add.w	r4, r6, #16
 8004956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	602b      	str	r3, [r5, #0]
 800495e:	1d33      	adds	r3, r6, #4
 8004960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004962:	6838      	ldr	r0, [r7, #0]
 8004964:	f003 fb65 	bl	8008032 <USB_DevInit>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e00d      	b.n	8004996 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f006 f818 	bl	800a9c4 <USB_DevDisconnect>

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800499e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_PCD_Start+0x16>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e016      	b.n	80049e2 <HAL_PCD_Start+0x44>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f003 fafa 	bl	8007fba <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80049c6:	2101      	movs	r1, #1
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f008 f8ae 	bl	800cb2a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f005 ffec 	bl	800a9b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b088      	sub	sp, #32
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f005 ffee 	bl	800a9d8 <USB_ReadInterrupts>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a06:	d102      	bne.n	8004a0e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fb5f 	bl	80050cc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f005 ffe0 	bl	800a9d8 <USB_ReadInterrupts>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a22:	d112      	bne.n	8004a4a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a36:	b292      	uxth	r2, r2
 8004a38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f007 fe7c 	bl	800c73a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004a42:	2100      	movs	r1, #0
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f923 	bl	8004c90 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f005 ffc2 	bl	800a9d8 <USB_ReadInterrupts>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a5e:	d10b      	bne.n	8004a78 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a72:	b292      	uxth	r2, r2
 8004a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f005 ffab 	bl	800a9d8 <USB_ReadInterrupts>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa0:	b292      	uxth	r2, r2
 8004aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f005 ff94 	bl	800a9d8 <USB_ReadInterrupts>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aba:	d126      	bne.n	8004b0a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0204 	bic.w	r2, r2, #4
 8004ace:	b292      	uxth	r2, r2
 8004ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0208 	bic.w	r2, r2, #8
 8004ae6:	b292      	uxth	r2, r2
 8004ae8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f007 fe5d 	bl	800c7ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b04:	b292      	uxth	r2, r2
 8004b06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f005 ff62 	bl	800a9d8 <USB_ReadInterrupts>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1e:	f040 8082 	bne.w	8004c26 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e010      	b.n	8004b4a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	7ffb      	ldrb	r3, [r7, #31]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	441a      	add	r2, r3
 8004b34:	7ffb      	ldrb	r3, [r7, #31]
 8004b36:	8812      	ldrh	r2, [r2, #0]
 8004b38:	b292      	uxth	r2, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	3320      	adds	r3, #32
 8004b3e:	443b      	add	r3, r7
 8004b40:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004b44:	7ffb      	ldrb	r3, [r7, #31]
 8004b46:	3301      	adds	r3, #1
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	7ffb      	ldrb	r3, [r7, #31]
 8004b4c:	2b07      	cmp	r3, #7
 8004b4e:	d9eb      	bls.n	8004b28 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	b292      	uxth	r2, r2
 8004b64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0201 	bic.w	r2, r2, #1
 8004b7a:	b292      	uxth	r2, r2
 8004b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004b80:	bf00      	nop
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f6      	beq.n	8004b82 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	b292      	uxth	r2, r2
 8004ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004bac:	2300      	movs	r3, #0
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e00f      	b.n	8004bd2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004bb2:	7ffb      	ldrb	r3, [r7, #31]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	4611      	mov	r1, r2
 8004bba:	7ffa      	ldrb	r2, [r7, #31]
 8004bbc:	0092      	lsls	r2, r2, #2
 8004bbe:	440a      	add	r2, r1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	3320      	adds	r3, #32
 8004bc4:	443b      	add	r3, r7
 8004bc6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004bca:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004bcc:	7ffb      	ldrb	r3, [r7, #31]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	7ffb      	ldrb	r3, [r7, #31]
 8004bd4:	2b07      	cmp	r3, #7
 8004bd6:	d9ec      	bls.n	8004bb2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0208 	orr.w	r2, r2, #8
 8004bea:	b292      	uxth	r2, r2
 8004bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c02:	b292      	uxth	r2, r2
 8004c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0204 	orr.w	r2, r2, #4
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f007 fda9 	bl	800c778 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f005 fed4 	bl	800a9d8 <USB_ReadInterrupts>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3a:	d10e      	bne.n	8004c5a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c4e:	b292      	uxth	r2, r2
 8004c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f007 fd62 	bl	800c71e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f005 feba 	bl	800a9d8 <USB_ReadInterrupts>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6e:	d10b      	bne.n	8004c88 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c82:	b292      	uxth	r2, r2
 8004c84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004c88:	bf00      	nop
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_PCD_SetAddress+0x1a>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e013      	b.n	8004cd2 <HAL_PCD_SetAddress+0x42>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f005 fe61 	bl	800a98a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	4608      	mov	r0, r1
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	4603      	mov	r3, r0
 8004cea:	70fb      	strb	r3, [r7, #3]
 8004cec:	460b      	mov	r3, r1
 8004cee:	803b      	strh	r3, [r7, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	da0e      	bge.n	8004d1e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d00:	78fb      	ldrb	r3, [r7, #3]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	4413      	add	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	705a      	strb	r2, [r3, #1]
 8004d1c:	e00e      	b.n	8004d3c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	f003 0207 	and.w	r2, r3, #7
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4413      	add	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d48:	883a      	ldrh	r2, [r7, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	78ba      	ldrb	r2, [r7, #2]
 8004d52:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	785b      	ldrb	r3, [r3, #1]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d66:	78bb      	ldrb	r3, [r7, #2]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d102      	bne.n	8004d72 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_PCD_EP_Open+0xa6>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e00e      	b.n	8004d9e <HAL_PCD_EP_Open+0xc4>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68f9      	ldr	r1, [r7, #12]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f003 f970 	bl	8008074 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004d9c:	7afb      	ldrb	r3, [r7, #11]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da0e      	bge.n	8004dd8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	705a      	strb	r2, [r3, #1]
 8004dd6:	e00e      	b.n	8004df6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 0207 	and.w	r2, r3, #7
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_PCD_EP_Close+0x6a>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e00e      	b.n	8004e2e <HAL_PCD_EP_Close+0x88>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f003 fc92 	bl	8008748 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b086      	sub	sp, #24
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	460b      	mov	r3, r1
 8004e44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e46:	7afb      	ldrb	r3, [r7, #11]
 8004e48:	f003 0207 	and.w	r2, r3, #7
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2200      	movs	r2, #0
 8004e74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e76:	7afb      	ldrb	r3, [r7, #11]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e82:	7afb      	ldrb	r3, [r7, #11]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6979      	ldr	r1, [r7, #20]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f003 fe44 	bl	8008b20 <USB_EPStartXfer>
 8004e98:	e005      	b.n	8004ea6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6979      	ldr	r1, [r7, #20]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f003 fe3d 	bl	8008b20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	f003 0207 	and.w	r2, r3, #7
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	460b      	mov	r3, r1
 8004eec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eee:	7afb      	ldrb	r3, [r7, #11]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4413      	add	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2200      	movs	r2, #0
 8004f22:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2201      	movs	r2, #1
 8004f28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f2a:	7afb      	ldrb	r3, [r7, #11]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f36:	7afb      	ldrb	r3, [r7, #11]
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6979      	ldr	r1, [r7, #20]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f003 fdea 	bl	8008b20 <USB_EPStartXfer>
 8004f4c:	e005      	b.n	8004f5a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6979      	ldr	r1, [r7, #20]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f003 fde3 	bl	8008b20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	f003 0207 	and.w	r2, r3, #7
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d901      	bls.n	8004f82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e04c      	b.n	800501c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	da0e      	bge.n	8004fa8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	705a      	strb	r2, [r3, #1]
 8004fa6:	e00c      	b.n	8004fc2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_PCD_EP_SetStall+0x7e>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e01c      	b.n	800501c <HAL_PCD_EP_SetStall+0xb8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f005 fbcd 	bl	800a790 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ff6:	78fb      	ldrb	r3, [r7, #3]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d108      	bne.n	8005012 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f005 fcf2 	bl	800a9f6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	f003 020f 	and.w	r2, r3, #15
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	429a      	cmp	r2, r3
 800503c:	d901      	bls.n	8005042 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e040      	b.n	80050c4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005046:	2b00      	cmp	r3, #0
 8005048:	da0e      	bge.n	8005068 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	705a      	strb	r2, [r3, #1]
 8005066:	e00e      	b.n	8005086 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	f003 0207 	and.w	r2, r3, #7
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	b2da      	uxtb	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_PCD_EP_ClrStall+0x82>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e00e      	b.n	80050c4 <HAL_PCD_EP_ClrStall+0xa0>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68f9      	ldr	r1, [r7, #12]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f005 fbbb 	bl	800a830 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08e      	sub	sp, #56	; 0x38
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80050d4:	e2ec      	b.n	80056b0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050de:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80050e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80050ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f040 8161 	bne.w	80053b8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80050f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d152      	bne.n	80051a6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005110:	81fb      	strh	r3, [r7, #14]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	89fb      	ldrh	r3, [r7, #14]
 8005118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005120:	b29b      	uxth	r3, r3
 8005122:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3328      	adds	r3, #40	; 0x28
 8005128:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005132:	b29b      	uxth	r3, r3
 8005134:	461a      	mov	r2, r3
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4413      	add	r3, r2
 800513e:	3302      	adds	r3, #2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	441a      	add	r2, r3
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005164:	2100      	movs	r1, #0
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f007 fabf 	bl	800c6ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 829b 	beq.w	80056b0 <PCD_EP_ISR_Handler+0x5e4>
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 8296 	bne.w	80056b0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005190:	b2da      	uxtb	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	b292      	uxth	r2, r2
 8005198:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051a4:	e284      	b.n	80056b0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80051b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d034      	beq.n	800522a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	3306      	adds	r3, #6
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f005 fc49 	bl	800aa96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29a      	uxth	r2, r3
 800520c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005210:	4013      	ands	r3, r2
 8005212:	823b      	strh	r3, [r7, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	8a3a      	ldrh	r2, [r7, #16]
 800521a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800521e:	b292      	uxth	r2, r2
 8005220:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f007 fa34 	bl	800c690 <HAL_PCD_SetupStageCallback>
 8005228:	e242      	b.n	80056b0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800522a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800522e:	2b00      	cmp	r3, #0
 8005230:	f280 823e 	bge.w	80056b0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29a      	uxth	r2, r3
 800523c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005240:	4013      	ands	r3, r2
 8005242:	83bb      	strh	r3, [r7, #28]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	8bba      	ldrh	r2, [r7, #28]
 800524a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800524e:	b292      	uxth	r2, r2
 8005250:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525a:	b29b      	uxth	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4413      	add	r3, r2
 8005266:	3306      	adds	r3, #6
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6812      	ldr	r2, [r2, #0]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d019      	beq.n	80052ba <PCD_EP_ISR_Handler+0x1ee>
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d015      	beq.n	80052ba <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	6959      	ldr	r1, [r3, #20]
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f005 fbf9 	bl	800aa96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	441a      	add	r2, r3
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80052b2:	2100      	movs	r1, #0
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f007 f9fd 	bl	800c6b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f040 81f2 	bne.w	80056b0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052da:	b29b      	uxth	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	4413      	add	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d112      	bne.n	800531a <PCD_EP_ISR_Handler+0x24e>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052fe:	b29a      	uxth	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005312:	b29a      	uxth	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e02f      	b.n	800537a <PCD_EP_ISR_Handler+0x2ae>
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b3e      	cmp	r3, #62	; 0x3e
 8005320:	d813      	bhi.n	800534a <PCD_EP_ISR_Handler+0x27e>
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	633b      	str	r3, [r7, #48]	; 0x30
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <PCD_EP_ISR_Handler+0x270>
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	3301      	adds	r3, #1
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	b29b      	uxth	r3, r3
 8005340:	029b      	lsls	r3, r3, #10
 8005342:	b29a      	uxth	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e017      	b.n	800537a <PCD_EP_ISR_Handler+0x2ae>
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	633b      	str	r3, [r7, #48]	; 0x30
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <PCD_EP_ISR_Handler+0x298>
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	3b01      	subs	r3, #1
 8005362:	633b      	str	r3, [r7, #48]	; 0x30
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	b29b      	uxth	r3, r3
 8005368:	029b      	lsls	r3, r3, #10
 800536a:	b29b      	uxth	r3, r3
 800536c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005374:	b29a      	uxth	r2, r3
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	827b      	strh	r3, [r7, #18]
 800538c:	8a7b      	ldrh	r3, [r7, #18]
 800538e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005392:	827b      	strh	r3, [r7, #18]
 8005394:	8a7b      	ldrh	r3, [r7, #18]
 8005396:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800539a:	827b      	strh	r3, [r7, #18]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	8a7b      	ldrh	r3, [r7, #18]
 80053a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8013      	strh	r3, [r2, #0]
 80053b6:	e17b      	b.n	80056b0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80053ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f280 80ea 	bge.w	80055a8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80053ea:	4013      	ands	r3, r2
 80053ec:	853b      	strh	r3, [r7, #40]	; 0x28
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005402:	b292      	uxth	r2, r2
 8005404:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005406:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	4413      	add	r3, r2
 800541a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	7b1b      	ldrb	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d122      	bne.n	800546a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542c:	b29b      	uxth	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	3306      	adds	r3, #6
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800544c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800544e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 8087 	beq.w	8005564 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	6959      	ldr	r1, [r3, #20]
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	88da      	ldrh	r2, [r3, #6]
 8005462:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005464:	f005 fb17 	bl	800aa96 <USB_ReadPMA>
 8005468:	e07c      	b.n	8005564 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	78db      	ldrb	r3, [r3, #3]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d108      	bne.n	8005484 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005472:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005474:	461a      	mov	r2, r3
 8005476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f927 	bl	80056cc <HAL_PCD_EP_DB_Receive>
 800547e:	4603      	mov	r3, r0
 8005480:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005482:	e06f      	b.n	8005564 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	847b      	strh	r3, [r7, #34]	; 0x22
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	441a      	add	r2, r3
 80054ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d021      	beq.n	8005522 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	3302      	adds	r3, #2
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005506:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005508:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800550a:	2b00      	cmp	r3, #0
 800550c:	d02a      	beq.n	8005564 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	6959      	ldr	r1, [r3, #20]
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	891a      	ldrh	r2, [r3, #8]
 800551a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800551c:	f005 fabb 	bl	800aa96 <USB_ReadPMA>
 8005520:	e020      	b.n	8005564 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552a:	b29b      	uxth	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	3306      	adds	r3, #6
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	4413      	add	r3, r2
 8005540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800554a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800554c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800554e:	2b00      	cmp	r3, #0
 8005550:	d008      	beq.n	8005564 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	6959      	ldr	r1, [r3, #20]
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	895a      	ldrh	r2, [r3, #10]
 800555e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005560:	f005 fa99 	bl	800aa96 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800556a:	441a      	add	r2, r3
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005576:	441a      	add	r2, r3
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d004      	beq.n	800558e <PCD_EP_ISR_Handler+0x4c2>
 8005584:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	429a      	cmp	r2, r3
 800558c:	d206      	bcs.n	800559c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f007 f88d 	bl	800c6b4 <HAL_PCD_DataOutStageCallback>
 800559a:	e005      	b.n	80055a8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f003 fabc 	bl	8008b20 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80055a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d07e      	beq.n	80056b0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80055b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80055dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e0:	843b      	strh	r3, [r7, #32]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	441a      	add	r2, r3
 80055f0:	8c3b      	ldrh	r3, [r7, #32]
 80055f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	78db      	ldrb	r3, [r3, #3]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d00c      	beq.n	8005620 <PCD_EP_ISR_Handler+0x554>
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	78db      	ldrb	r3, [r3, #3]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d008      	beq.n	8005620 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005612:	2b02      	cmp	r3, #2
 8005614:	d146      	bne.n	80056a4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005616:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d141      	bne.n	80056a4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005628:	b29b      	uxth	r3, r3
 800562a:	461a      	mov	r2, r3
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	4413      	add	r3, r2
 8005634:	3302      	adds	r3, #2
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005648:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	8bfb      	ldrh	r3, [r7, #30]
 8005650:	429a      	cmp	r2, r3
 8005652:	d906      	bls.n	8005662 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	699a      	ldr	r2, [r3, #24]
 8005658:	8bfb      	ldrh	r3, [r7, #30]
 800565a:	1ad2      	subs	r2, r2, r3
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	619a      	str	r2, [r3, #24]
 8005660:	e002      	b.n	8005668 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	2200      	movs	r2, #0
 8005666:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	4619      	mov	r1, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f007 f837 	bl	800c6ea <HAL_PCD_DataInStageCallback>
 800567c:	e018      	b.n	80056b0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	8bfb      	ldrh	r3, [r7, #30]
 8005684:	441a      	add	r2, r3
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	8bfb      	ldrh	r3, [r7, #30]
 8005690:	441a      	add	r2, r3
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800569c:	4618      	mov	r0, r3
 800569e:	f003 fa3f 	bl	8008b20 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80056a2:	e005      	b.n	80056b0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80056a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056a6:	461a      	mov	r2, r3
 80056a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f91b 	bl	80058e6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	b21b      	sxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f6ff ad0a 	blt.w	80050d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3738      	adds	r7, #56	; 0x38
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d07e      	beq.n	80057e2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	4413      	add	r3, r2
 80056f8:	3302      	adds	r3, #2
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800570c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	8b7b      	ldrh	r3, [r7, #26]
 8005714:	429a      	cmp	r2, r3
 8005716:	d306      	bcc.n	8005726 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	8b7b      	ldrh	r3, [r7, #26]
 800571e:	1ad2      	subs	r2, r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	619a      	str	r2, [r3, #24]
 8005724:	e002      	b.n	800572c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2200      	movs	r2, #0
 800572a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d123      	bne.n	800577c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	461a      	mov	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29b      	uxth	r3, r3
 8005746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	833b      	strh	r3, [r7, #24]
 8005750:	8b3b      	ldrh	r3, [r7, #24]
 8005752:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005756:	833b      	strh	r3, [r7, #24]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	461a      	mov	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	441a      	add	r2, r3
 8005766:	8b3b      	ldrh	r3, [r7, #24]
 8005768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005778:	b29b      	uxth	r3, r3
 800577a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01f      	beq.n	80057c6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	461a      	mov	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a0:	82fb      	strh	r3, [r7, #22]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	441a      	add	r2, r3
 80057b0:	8afb      	ldrh	r3, [r7, #22]
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80057c6:	8b7b      	ldrh	r3, [r7, #26]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f000 8087 	beq.w	80058dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	6959      	ldr	r1, [r3, #20]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	891a      	ldrh	r2, [r3, #8]
 80057da:	8b7b      	ldrh	r3, [r7, #26]
 80057dc:	f005 f95b 	bl	800aa96 <USB_ReadPMA>
 80057e0:	e07c      	b.n	80058dc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	3306      	adds	r3, #6
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	699a      	ldr	r2, [r3, #24]
 8005810:	8b7b      	ldrh	r3, [r7, #26]
 8005812:	429a      	cmp	r2, r3
 8005814:	d306      	bcc.n	8005824 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	8b7b      	ldrh	r3, [r7, #26]
 800581c:	1ad2      	subs	r2, r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	619a      	str	r2, [r3, #24]
 8005822:	e002      	b.n	800582a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2200      	movs	r2, #0
 8005828:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d123      	bne.n	800587a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	83fb      	strh	r3, [r7, #30]
 800584e:	8bfb      	ldrh	r3, [r7, #30]
 8005850:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005854:	83fb      	strh	r3, [r7, #30]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	441a      	add	r2, r3
 8005864:	8bfb      	ldrh	r3, [r7, #30]
 8005866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800586e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005876:	b29b      	uxth	r3, r3
 8005878:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d11f      	bne.n	80058c4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	83bb      	strh	r3, [r7, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	441a      	add	r2, r3
 80058ae:	8bbb      	ldrh	r3, [r7, #28]
 80058b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80058c4:	8b7b      	ldrh	r3, [r7, #26]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6959      	ldr	r1, [r3, #20]
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	895a      	ldrh	r2, [r3, #10]
 80058d6:	8b7b      	ldrh	r3, [r7, #26]
 80058d8:	f005 f8dd 	bl	800aa96 <USB_ReadPMA>
    }
  }

  return count;
 80058dc:	8b7b      	ldrh	r3, [r7, #26]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b0a2      	sub	sp, #136	; 0x88
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	4613      	mov	r3, r2
 80058f2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 81c7 	beq.w	8005c8e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005908:	b29b      	uxth	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	4413      	add	r3, r2
 8005914:	3302      	adds	r3, #2
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005928:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005934:	429a      	cmp	r2, r3
 8005936:	d907      	bls.n	8005948 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005940:	1ad2      	subs	r2, r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	619a      	str	r2, [r3, #24]
 8005946:	e002      	b.n	800594e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2200      	movs	r2, #0
 800594c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 80b9 	bne.w	8005aca <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d126      	bne.n	80059ae <HAL_PCD_EP_DB_Transmit+0xc8>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	62bb      	str	r3, [r7, #40]	; 0x28
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596e:	b29b      	uxth	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005974:	4413      	add	r3, r2
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	011a      	lsls	r2, r3, #4
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	4413      	add	r3, r2
 8005982:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005992:	b29a      	uxth	r2, r3
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	801a      	strh	r2, [r3, #0]
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	e01a      	b.n	80059e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d116      	bne.n	80059e4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	633b      	str	r3, [r7, #48]	; 0x30
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	4413      	add	r3, r2
 80059cc:	633b      	str	r3, [r7, #48]	; 0x30
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	011a      	lsls	r2, r3, #4
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	4413      	add	r3, r2
 80059d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e0:	2200      	movs	r2, #0
 80059e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	623b      	str	r3, [r7, #32]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d126      	bne.n	8005a40 <HAL_PCD_EP_DB_Transmit+0x15a>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	4413      	add	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	011a      	lsls	r2, r3, #4
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	4413      	add	r3, r2
 8005a14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	e017      	b.n	8005a70 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d113      	bne.n	8005a70 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	4413      	add	r3, r2
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	011a      	lsls	r2, r3, #4
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	4413      	add	r3, r2
 8005a64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	4619      	mov	r1, r3
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f006 fe37 	bl	800c6ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 82d4 	beq.w	8006030 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa2:	827b      	strh	r3, [r7, #18]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	441a      	add	r2, r3
 8005ab2:	8a7b      	ldrh	r3, [r7, #18]
 8005ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	8013      	strh	r3, [r2, #0]
 8005ac8:	e2b2      	b.n	8006030 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d021      	beq.n	8005b18 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	441a      	add	r2, r3
 8005b00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	f040 8286 	bne.w	8006030 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	695a      	ldr	r2, [r3, #20]
 8005b28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b2c:	441a      	add	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	69da      	ldr	r2, [r3, #28]
 8005b36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b3a:	441a      	add	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	6a1a      	ldr	r2, [r3, #32]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d309      	bcc.n	8005b60 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b58:	1ad2      	subs	r2, r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	621a      	str	r2, [r3, #32]
 8005b5e:	e015      	b.n	8005b8c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d107      	bne.n	8005b78 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005b68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005b76:	e009      	b.n	8005b8c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d155      	bne.n	8005c40 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	4413      	add	r3, r2
 8005baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	011a      	lsls	r2, r3, #4
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d112      	bne.n	8005be8 <HAL_PCD_EP_DB_Transmit+0x302>
 8005bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	e047      	b.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x392>
 8005be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bea:	2b3e      	cmp	r3, #62	; 0x3e
 8005bec:	d811      	bhi.n	8005c12 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c00:	3301      	adds	r3, #1
 8005c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	029b      	lsls	r3, r3, #10
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0e:	801a      	strh	r2, [r3, #0]
 8005c10:	e032      	b.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <HAL_PCD_EP_DB_Transmit+0x342>
 8005c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c24:	3b01      	subs	r3, #1
 8005c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	801a      	strh	r2, [r3, #0]
 8005c3e:	e01b      	b.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	785b      	ldrb	r3, [r3, #1]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d117      	bne.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x392>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c5c:	4413      	add	r3, r2
 8005c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	011a      	lsls	r2, r3, #4
 8005c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c68:	4413      	add	r3, r2
 8005c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c76:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	6959      	ldr	r1, [r3, #20]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	891a      	ldrh	r2, [r3, #8]
 8005c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f004 fec0 	bl	800aa0c <USB_WritePMA>
 8005c8c:	e1d0      	b.n	8006030 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	3306      	adds	r3, #6
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d307      	bcc.n	8005cd6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	619a      	str	r2, [r3, #24]
 8005cd4:	e002      	b.n	8005cdc <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f040 80c4 	bne.w	8005e6e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d126      	bne.n	8005d3c <HAL_PCD_EP_DB_Transmit+0x456>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	461a      	mov	r2, r3
 8005d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d02:	4413      	add	r3, r2
 8005d04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	011a      	lsls	r2, r3, #4
 8005d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d0e:	4413      	add	r3, r2
 8005d10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	e01a      	b.n	8005d72 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d116      	bne.n	8005d72 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	677b      	str	r3, [r7, #116]	; 0x74
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d58:	4413      	add	r3, r2
 8005d5a:	677b      	str	r3, [r7, #116]	; 0x74
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	011a      	lsls	r2, r3, #4
 8005d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d64:	4413      	add	r3, r2
 8005d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d6e:	2200      	movs	r2, #0
 8005d70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d12f      	bne.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d98:	4413      	add	r3, r2
 8005d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	011a      	lsls	r2, r3, #4
 8005da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	e017      	b.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	785b      	ldrb	r3, [r3, #1]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d113      	bne.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005df6:	4413      	add	r3, r2
 8005df8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	011a      	lsls	r2, r3, #4
 8005e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e02:	4413      	add	r3, r2
 8005e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	4619      	mov	r1, r3
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f006 fc67 	bl	800c6ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e1c:	88fb      	ldrh	r3, [r7, #6]
 8005e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 8104 	bne.w	8006030 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	441a      	add	r2, r3
 8005e54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	8013      	strh	r3, [r2, #0]
 8005e6c:	e0e0      	b.n	8006030 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d121      	bne.n	8005ebc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	881b      	ldrh	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	441a      	add	r2, r3
 8005ea4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	f040 80b4 	bne.w	8006030 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ed0:	441a      	add	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	69da      	ldr	r2, [r3, #28]
 8005eda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ede:	441a      	add	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6a1a      	ldr	r2, [r3, #32]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d309      	bcc.n	8005f04 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	6a1a      	ldr	r2, [r3, #32]
 8005efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005efc:	1ad2      	subs	r2, r2, r3
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	621a      	str	r2, [r3, #32]
 8005f02:	e015      	b.n	8005f30 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d107      	bne.n	8005f1c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f10:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005f1a:	e009      	b.n	8005f30 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	667b      	str	r3, [r7, #100]	; 0x64
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d155      	bne.n	8005fea <HAL_PCD_EP_DB_Transmit+0x704>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f52:	4413      	add	r3, r2
 8005f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	011a      	lsls	r2, r3, #4
 8005f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f5e:	4413      	add	r3, r2
 8005f60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d112      	bne.n	8005f92 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005f6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f7e:	881b      	ldrh	r3, [r3, #0]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	e044      	b.n	800601c <HAL_PCD_EP_DB_Transmit+0x736>
 8005f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f94:	2b3e      	cmp	r3, #62	; 0x3e
 8005f96:	d811      	bhi.n	8005fbc <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9a:	085b      	lsrs	r3, r3, #1
 8005f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8005f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005faa:	3301      	adds	r3, #1
 8005fac:	657b      	str	r3, [r7, #84]	; 0x54
 8005fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	029b      	lsls	r3, r3, #10
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	e02f      	b.n	800601c <HAL_PCD_EP_DB_Transmit+0x736>
 8005fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8005fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	029b      	lsls	r3, r3, #10
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	e018      	b.n	800601c <HAL_PCD_EP_DB_Transmit+0x736>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d114      	bne.n	800601c <HAL_PCD_EP_DB_Transmit+0x736>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006000:	4413      	add	r3, r2
 8006002:	667b      	str	r3, [r7, #100]	; 0x64
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	011a      	lsls	r2, r3, #4
 800600a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600c:	4413      	add	r3, r2
 800600e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006012:	663b      	str	r3, [r7, #96]	; 0x60
 8006014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006016:	b29a      	uxth	r2, r3
 8006018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800601a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6959      	ldr	r1, [r3, #20]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	895a      	ldrh	r2, [r3, #10]
 8006028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	f004 fcee 	bl	800aa0c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4413      	add	r3, r2
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	b29b      	uxth	r3, r3
 8006042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800604a:	823b      	strh	r3, [r7, #16]
 800604c:	8a3b      	ldrh	r3, [r7, #16]
 800604e:	f083 0310 	eor.w	r3, r3, #16
 8006052:	823b      	strh	r3, [r7, #16]
 8006054:	8a3b      	ldrh	r3, [r7, #16]
 8006056:	f083 0320 	eor.w	r3, r3, #32
 800605a:	823b      	strh	r3, [r7, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	441a      	add	r2, r3
 800606a:	8a3b      	ldrh	r3, [r7, #16]
 800606c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607c:	b29b      	uxth	r3, r3
 800607e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3788      	adds	r7, #136	; 0x88
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800608a:	b480      	push	{r7}
 800608c:	b087      	sub	sp, #28
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	817b      	strh	r3, [r7, #10]
 8006098:	4613      	mov	r3, r2
 800609a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800609c:	897b      	ldrh	r3, [r7, #10]
 800609e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060a8:	897b      	ldrh	r3, [r7, #10]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	e009      	b.n	80060d4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060c0:	897a      	ldrh	r2, [r7, #10]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4413      	add	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80060d4:	893b      	ldrh	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d107      	bne.n	80060ea <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2200      	movs	r2, #0
 80060de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	80da      	strh	r2, [r3, #6]
 80060e8:	e00b      	b.n	8006102 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2201      	movs	r2, #1
 80060ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	0c1b      	lsrs	r3, r3, #16
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr
	...

08006110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e272      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 8087 	beq.w	800623e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006130:	4b92      	ldr	r3, [pc, #584]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 030c 	and.w	r3, r3, #12
 8006138:	2b04      	cmp	r3, #4
 800613a:	d00c      	beq.n	8006156 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800613c:	4b8f      	ldr	r3, [pc, #572]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f003 030c 	and.w	r3, r3, #12
 8006144:	2b08      	cmp	r3, #8
 8006146:	d112      	bne.n	800616e <HAL_RCC_OscConfig+0x5e>
 8006148:	4b8c      	ldr	r3, [pc, #560]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006154:	d10b      	bne.n	800616e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006156:	4b89      	ldr	r3, [pc, #548]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d06c      	beq.n	800623c <HAL_RCC_OscConfig+0x12c>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d168      	bne.n	800623c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e24c      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006176:	d106      	bne.n	8006186 <HAL_RCC_OscConfig+0x76>
 8006178:	4b80      	ldr	r3, [pc, #512]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7f      	ldr	r2, [pc, #508]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800617e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	e02e      	b.n	80061e4 <HAL_RCC_OscConfig+0xd4>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x98>
 800618e:	4b7b      	ldr	r3, [pc, #492]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a7a      	ldr	r2, [pc, #488]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	4b78      	ldr	r3, [pc, #480]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a77      	ldr	r2, [pc, #476]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e01d      	b.n	80061e4 <HAL_RCC_OscConfig+0xd4>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061b0:	d10c      	bne.n	80061cc <HAL_RCC_OscConfig+0xbc>
 80061b2:	4b72      	ldr	r3, [pc, #456]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a71      	ldr	r2, [pc, #452]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	4b6f      	ldr	r3, [pc, #444]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a6e      	ldr	r2, [pc, #440]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	e00b      	b.n	80061e4 <HAL_RCC_OscConfig+0xd4>
 80061cc:	4b6b      	ldr	r3, [pc, #428]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a6a      	ldr	r2, [pc, #424]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	4b68      	ldr	r3, [pc, #416]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a67      	ldr	r2, [pc, #412]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80061de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d013      	beq.n	8006214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ec:	f7fd ff76 	bl	80040dc <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061f4:	f7fd ff72 	bl	80040dc <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b64      	cmp	r3, #100	; 0x64
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e200      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006206:	4b5d      	ldr	r3, [pc, #372]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0xe4>
 8006212:	e014      	b.n	800623e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006214:	f7fd ff62 	bl	80040dc <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800621c:	f7fd ff5e 	bl	80040dc <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b64      	cmp	r3, #100	; 0x64
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e1ec      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800622e:	4b53      	ldr	r3, [pc, #332]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x10c>
 800623a:	e000      	b.n	800623e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d063      	beq.n	8006312 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800624a:	4b4c      	ldr	r3, [pc, #304]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006256:	4b49      	ldr	r3, [pc, #292]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f003 030c 	and.w	r3, r3, #12
 800625e:	2b08      	cmp	r3, #8
 8006260:	d11c      	bne.n	800629c <HAL_RCC_OscConfig+0x18c>
 8006262:	4b46      	ldr	r3, [pc, #280]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d116      	bne.n	800629c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800626e:	4b43      	ldr	r3, [pc, #268]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_RCC_OscConfig+0x176>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d001      	beq.n	8006286 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e1c0      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006286:	4b3d      	ldr	r3, [pc, #244]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	4939      	ldr	r1, [pc, #228]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006296:	4313      	orrs	r3, r2
 8006298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800629a:	e03a      	b.n	8006312 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d020      	beq.n	80062e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062a4:	4b36      	ldr	r3, [pc, #216]	; (8006380 <HAL_RCC_OscConfig+0x270>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062aa:	f7fd ff17 	bl	80040dc <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062b2:	f7fd ff13 	bl	80040dc <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e1a1      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c4:	4b2d      	ldr	r3, [pc, #180]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f0      	beq.n	80062b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d0:	4b2a      	ldr	r3, [pc, #168]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4927      	ldr	r1, [pc, #156]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]
 80062e4:	e015      	b.n	8006312 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062e6:	4b26      	ldr	r3, [pc, #152]	; (8006380 <HAL_RCC_OscConfig+0x270>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ec:	f7fd fef6 	bl	80040dc <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062f4:	f7fd fef2 	bl	80040dc <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e180      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006306:	4b1d      	ldr	r3, [pc, #116]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d03a      	beq.n	8006394 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d019      	beq.n	800635a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006326:	4b17      	ldr	r3, [pc, #92]	; (8006384 <HAL_RCC_OscConfig+0x274>)
 8006328:	2201      	movs	r2, #1
 800632a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632c:	f7fd fed6 	bl	80040dc <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006334:	f7fd fed2 	bl	80040dc <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e160      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006346:	4b0d      	ldr	r3, [pc, #52]	; (800637c <HAL_RCC_OscConfig+0x26c>)
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006352:	2001      	movs	r0, #1
 8006354:	f000 faa6 	bl	80068a4 <RCC_Delay>
 8006358:	e01c      	b.n	8006394 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800635a:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <HAL_RCC_OscConfig+0x274>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006360:	f7fd febc 	bl	80040dc <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006366:	e00f      	b.n	8006388 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006368:	f7fd feb8 	bl	80040dc <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d908      	bls.n	8006388 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e146      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
 800637a:	bf00      	nop
 800637c:	40021000 	.word	0x40021000
 8006380:	42420000 	.word	0x42420000
 8006384:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006388:	4b92      	ldr	r3, [pc, #584]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e9      	bne.n	8006368 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80a6 	beq.w	80064ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063a2:	2300      	movs	r3, #0
 80063a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063a6:	4b8b      	ldr	r3, [pc, #556]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10d      	bne.n	80063ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063b2:	4b88      	ldr	r3, [pc, #544]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	4a87      	ldr	r2, [pc, #540]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80063b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063bc:	61d3      	str	r3, [r2, #28]
 80063be:	4b85      	ldr	r3, [pc, #532]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c6:	60bb      	str	r3, [r7, #8]
 80063c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ce:	4b82      	ldr	r3, [pc, #520]	; (80065d8 <HAL_RCC_OscConfig+0x4c8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d118      	bne.n	800640c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063da:	4b7f      	ldr	r3, [pc, #508]	; (80065d8 <HAL_RCC_OscConfig+0x4c8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a7e      	ldr	r2, [pc, #504]	; (80065d8 <HAL_RCC_OscConfig+0x4c8>)
 80063e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063e6:	f7fd fe79 	bl	80040dc <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063ec:	e008      	b.n	8006400 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ee:	f7fd fe75 	bl	80040dc <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b64      	cmp	r3, #100	; 0x64
 80063fa:	d901      	bls.n	8006400 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e103      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006400:	4b75      	ldr	r3, [pc, #468]	; (80065d8 <HAL_RCC_OscConfig+0x4c8>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0f0      	beq.n	80063ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d106      	bne.n	8006422 <HAL_RCC_OscConfig+0x312>
 8006414:	4b6f      	ldr	r3, [pc, #444]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	4a6e      	ldr	r2, [pc, #440]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	6213      	str	r3, [r2, #32]
 8006420:	e02d      	b.n	800647e <HAL_RCC_OscConfig+0x36e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10c      	bne.n	8006444 <HAL_RCC_OscConfig+0x334>
 800642a:	4b6a      	ldr	r3, [pc, #424]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	4a69      	ldr	r2, [pc, #420]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	6213      	str	r3, [r2, #32]
 8006436:	4b67      	ldr	r3, [pc, #412]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	4a66      	ldr	r2, [pc, #408]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800643c:	f023 0304 	bic.w	r3, r3, #4
 8006440:	6213      	str	r3, [r2, #32]
 8006442:	e01c      	b.n	800647e <HAL_RCC_OscConfig+0x36e>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b05      	cmp	r3, #5
 800644a:	d10c      	bne.n	8006466 <HAL_RCC_OscConfig+0x356>
 800644c:	4b61      	ldr	r3, [pc, #388]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	4a60      	ldr	r2, [pc, #384]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006452:	f043 0304 	orr.w	r3, r3, #4
 8006456:	6213      	str	r3, [r2, #32]
 8006458:	4b5e      	ldr	r3, [pc, #376]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	4a5d      	ldr	r2, [pc, #372]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	6213      	str	r3, [r2, #32]
 8006464:	e00b      	b.n	800647e <HAL_RCC_OscConfig+0x36e>
 8006466:	4b5b      	ldr	r3, [pc, #364]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	4a5a      	ldr	r2, [pc, #360]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800646c:	f023 0301 	bic.w	r3, r3, #1
 8006470:	6213      	str	r3, [r2, #32]
 8006472:	4b58      	ldr	r3, [pc, #352]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	4a57      	ldr	r2, [pc, #348]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006478:	f023 0304 	bic.w	r3, r3, #4
 800647c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d015      	beq.n	80064b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006486:	f7fd fe29 	bl	80040dc <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800648c:	e00a      	b.n	80064a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800648e:	f7fd fe25 	bl	80040dc <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	f241 3288 	movw	r2, #5000	; 0x1388
 800649c:	4293      	cmp	r3, r2
 800649e:	d901      	bls.n	80064a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e0b1      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a4:	4b4b      	ldr	r3, [pc, #300]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0ee      	beq.n	800648e <HAL_RCC_OscConfig+0x37e>
 80064b0:	e014      	b.n	80064dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064b2:	f7fd fe13 	bl	80040dc <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064b8:	e00a      	b.n	80064d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064ba:	f7fd fe0f 	bl	80040dc <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e09b      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064d0:	4b40      	ldr	r3, [pc, #256]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1ee      	bne.n	80064ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d105      	bne.n	80064ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064e2:	4b3c      	ldr	r3, [pc, #240]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	4a3b      	ldr	r2, [pc, #236]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80064e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8087 	beq.w	8006606 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064f8:	4b36      	ldr	r3, [pc, #216]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 030c 	and.w	r3, r3, #12
 8006500:	2b08      	cmp	r3, #8
 8006502:	d061      	beq.n	80065c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d146      	bne.n	800659a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800650c:	4b33      	ldr	r3, [pc, #204]	; (80065dc <HAL_RCC_OscConfig+0x4cc>)
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006512:	f7fd fde3 	bl	80040dc <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006518:	e008      	b.n	800652c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651a:	f7fd fddf 	bl	80040dc <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e06d      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800652c:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1f0      	bne.n	800651a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006540:	d108      	bne.n	8006554 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006542:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	4921      	ldr	r1, [pc, #132]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006550:	4313      	orrs	r3, r2
 8006552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006554:	4b1f      	ldr	r3, [pc, #124]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a19      	ldr	r1, [r3, #32]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	430b      	orrs	r3, r1
 8006566:	491b      	ldr	r1, [pc, #108]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 8006568:	4313      	orrs	r3, r2
 800656a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800656c:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <HAL_RCC_OscConfig+0x4cc>)
 800656e:	2201      	movs	r2, #1
 8006570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006572:	f7fd fdb3 	bl	80040dc <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800657a:	f7fd fdaf 	bl	80040dc <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e03d      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800658c:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x46a>
 8006598:	e035      	b.n	8006606 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800659a:	4b10      	ldr	r3, [pc, #64]	; (80065dc <HAL_RCC_OscConfig+0x4cc>)
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a0:	f7fd fd9c 	bl	80040dc <HAL_GetTick>
 80065a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065a8:	f7fd fd98 	bl	80040dc <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e026      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <HAL_RCC_OscConfig+0x4c4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f0      	bne.n	80065a8 <HAL_RCC_OscConfig+0x498>
 80065c6:	e01e      	b.n	8006606 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d107      	bne.n	80065e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e019      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
 80065d4:	40021000 	.word	0x40021000
 80065d8:	40007000 	.word	0x40007000
 80065dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <HAL_RCC_OscConfig+0x500>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d106      	bne.n	8006602 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fe:	429a      	cmp	r2, r3
 8006600:	d001      	beq.n	8006606 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40021000 	.word	0x40021000

08006614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e0d0      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006628:	4b6a      	ldr	r3, [pc, #424]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d910      	bls.n	8006658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006636:	4b67      	ldr	r3, [pc, #412]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f023 0207 	bic.w	r2, r3, #7
 800663e:	4965      	ldr	r1, [pc, #404]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	4313      	orrs	r3, r2
 8006644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006646:	4b63      	ldr	r3, [pc, #396]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	429a      	cmp	r2, r3
 8006652:	d001      	beq.n	8006658 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e0b8      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d020      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006670:	4b59      	ldr	r3, [pc, #356]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	4a58      	ldr	r2, [pc, #352]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006676:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800667a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006688:	4b53      	ldr	r3, [pc, #332]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	4a52      	ldr	r2, [pc, #328]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 800668e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006692:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006694:	4b50      	ldr	r3, [pc, #320]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	494d      	ldr	r1, [pc, #308]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d040      	beq.n	8006734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d107      	bne.n	80066ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ba:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d115      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e07f      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d107      	bne.n	80066e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d2:	4b41      	ldr	r3, [pc, #260]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e073      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e2:	4b3d      	ldr	r3, [pc, #244]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e06b      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066f2:	4b39      	ldr	r3, [pc, #228]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f023 0203 	bic.w	r2, r3, #3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	4936      	ldr	r1, [pc, #216]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006700:	4313      	orrs	r3, r2
 8006702:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006704:	f7fd fcea 	bl	80040dc <HAL_GetTick>
 8006708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800670a:	e00a      	b.n	8006722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800670c:	f7fd fce6 	bl	80040dc <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	f241 3288 	movw	r2, #5000	; 0x1388
 800671a:	4293      	cmp	r3, r2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e053      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006722:	4b2d      	ldr	r3, [pc, #180]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f003 020c 	and.w	r2, r3, #12
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	429a      	cmp	r2, r3
 8006732:	d1eb      	bne.n	800670c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006734:	4b27      	ldr	r3, [pc, #156]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d210      	bcs.n	8006764 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006742:	4b24      	ldr	r3, [pc, #144]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f023 0207 	bic.w	r2, r3, #7
 800674a:	4922      	ldr	r1, [pc, #136]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	4313      	orrs	r3, r2
 8006750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006752:	4b20      	ldr	r3, [pc, #128]	; (80067d4 <HAL_RCC_ClockConfig+0x1c0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d001      	beq.n	8006764 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e032      	b.n	80067ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006770:	4b19      	ldr	r3, [pc, #100]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4916      	ldr	r1, [pc, #88]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 800677e:	4313      	orrs	r3, r2
 8006780:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800678e:	4b12      	ldr	r3, [pc, #72]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	490e      	ldr	r1, [pc, #56]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067a2:	f000 f821 	bl	80067e8 <HAL_RCC_GetSysClockFreq>
 80067a6:	4602      	mov	r2, r0
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HAL_RCC_ClockConfig+0x1c4>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	091b      	lsrs	r3, r3, #4
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	490a      	ldr	r1, [pc, #40]	; (80067dc <HAL_RCC_ClockConfig+0x1c8>)
 80067b4:	5ccb      	ldrb	r3, [r1, r3]
 80067b6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ba:	4a09      	ldr	r2, [pc, #36]	; (80067e0 <HAL_RCC_ClockConfig+0x1cc>)
 80067bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <HAL_RCC_ClockConfig+0x1d0>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fd fc48 	bl	8004058 <HAL_InitTick>

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40022000 	.word	0x40022000
 80067d8:	40021000 	.word	0x40021000
 80067dc:	0800d640 	.word	0x0800d640
 80067e0:	20000230 	.word	0x20000230
 80067e4:	20000234 	.word	0x20000234

080067e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067e8:	b490      	push	{r4, r7}
 80067ea:	b08a      	sub	sp, #40	; 0x28
 80067ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80067ee:	4b29      	ldr	r3, [pc, #164]	; (8006894 <HAL_RCC_GetSysClockFreq+0xac>)
 80067f0:	1d3c      	adds	r4, r7, #4
 80067f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80067f8:	f240 2301 	movw	r3, #513	; 0x201
 80067fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	2300      	movs	r3, #0
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006812:	4b21      	ldr	r3, [pc, #132]	; (8006898 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f003 030c 	and.w	r3, r3, #12
 800681e:	2b04      	cmp	r3, #4
 8006820:	d002      	beq.n	8006828 <HAL_RCC_GetSysClockFreq+0x40>
 8006822:	2b08      	cmp	r3, #8
 8006824:	d003      	beq.n	800682e <HAL_RCC_GetSysClockFreq+0x46>
 8006826:	e02b      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006828:	4b1c      	ldr	r3, [pc, #112]	; (800689c <HAL_RCC_GetSysClockFreq+0xb4>)
 800682a:	623b      	str	r3, [r7, #32]
      break;
 800682c:	e02b      	b.n	8006886 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	0c9b      	lsrs	r3, r3, #18
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	3328      	adds	r3, #40	; 0x28
 8006838:	443b      	add	r3, r7
 800683a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800683e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d012      	beq.n	8006870 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800684a:	4b13      	ldr	r3, [pc, #76]	; (8006898 <HAL_RCC_GetSysClockFreq+0xb0>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	0c5b      	lsrs	r3, r3, #17
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	3328      	adds	r3, #40	; 0x28
 8006856:	443b      	add	r3, r7
 8006858:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800685c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	4a0e      	ldr	r2, [pc, #56]	; (800689c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006862:	fb03 f202 	mul.w	r2, r3, r2
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	fbb2 f3f3 	udiv	r3, r2, r3
 800686c:	627b      	str	r3, [r7, #36]	; 0x24
 800686e:	e004      	b.n	800687a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	4a0b      	ldr	r2, [pc, #44]	; (80068a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006874:	fb02 f303 	mul.w	r3, r2, r3
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	623b      	str	r3, [r7, #32]
      break;
 800687e:	e002      	b.n	8006886 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006880:	4b06      	ldr	r3, [pc, #24]	; (800689c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006882:	623b      	str	r3, [r7, #32]
      break;
 8006884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006886:	6a3b      	ldr	r3, [r7, #32]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3728      	adds	r7, #40	; 0x28
 800688c:	46bd      	mov	sp, r7
 800688e:	bc90      	pop	{r4, r7}
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	0800d5f8 	.word	0x0800d5f8
 8006898:	40021000 	.word	0x40021000
 800689c:	007a1200 	.word	0x007a1200
 80068a0:	003d0900 	.word	0x003d0900

080068a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80068ac:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <RCC_Delay+0x34>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a0a      	ldr	r2, [pc, #40]	; (80068dc <RCC_Delay+0x38>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	0a5b      	lsrs	r3, r3, #9
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	fb02 f303 	mul.w	r3, r2, r3
 80068be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80068c0:	bf00      	nop
  }
  while (Delay --);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1e5a      	subs	r2, r3, #1
 80068c6:	60fa      	str	r2, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1f9      	bne.n	80068c0 <RCC_Delay+0x1c>
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bc80      	pop	{r7}
 80068d6:	4770      	bx	lr
 80068d8:	20000230 	.word	0x20000230
 80068dc:	10624dd3 	.word	0x10624dd3

080068e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d07d      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80068fc:	2300      	movs	r3, #0
 80068fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006900:	4b4f      	ldr	r3, [pc, #316]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10d      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800690c:	4b4c      	ldr	r3, [pc, #304]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800690e:	69db      	ldr	r3, [r3, #28]
 8006910:	4a4b      	ldr	r2, [pc, #300]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006916:	61d3      	str	r3, [r2, #28]
 8006918:	4b49      	ldr	r3, [pc, #292]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006920:	60bb      	str	r3, [r7, #8]
 8006922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006924:	2301      	movs	r3, #1
 8006926:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006928:	4b46      	ldr	r3, [pc, #280]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006930:	2b00      	cmp	r3, #0
 8006932:	d118      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006934:	4b43      	ldr	r3, [pc, #268]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a42      	ldr	r2, [pc, #264]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800693a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006940:	f7fd fbcc 	bl	80040dc <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006946:	e008      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006948:	f7fd fbc8 	bl	80040dc <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b64      	cmp	r3, #100	; 0x64
 8006954:	d901      	bls.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e06d      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695a:	4b3a      	ldr	r3, [pc, #232]	; (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0f0      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006966:	4b36      	ldr	r3, [pc, #216]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800696e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d02e      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	429a      	cmp	r2, r3
 8006982:	d027      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006984:	4b2e      	ldr	r3, [pc, #184]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800698e:	4b2e      	ldr	r3, [pc, #184]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006990:	2201      	movs	r2, #1
 8006992:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006994:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800699a:	4a29      	ldr	r2, [pc, #164]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d014      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069aa:	f7fd fb97 	bl	80040dc <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b0:	e00a      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b2:	f7fd fb93 	bl	80040dc <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e036      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c8:	4b1d      	ldr	r3, [pc, #116]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0ee      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069d4:	4b1a      	ldr	r3, [pc, #104]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	4917      	ldr	r1, [pc, #92]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d105      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a04:	4b0e      	ldr	r3, [pc, #56]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	490b      	ldr	r1, [pc, #44]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0310 	and.w	r3, r3, #16
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d008      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a22:	4b07      	ldr	r3, [pc, #28]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	4904      	ldr	r1, [pc, #16]	; (8006a40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40021000 	.word	0x40021000
 8006a44:	40007000 	.word	0x40007000
 8006a48:	42420440 	.word	0x42420440

08006a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e076      	b.n	8006b4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d108      	bne.n	8006a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a6e:	d009      	beq.n	8006a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	61da      	str	r2, [r3, #28]
 8006a76:	e005      	b.n	8006a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fa ff4e 	bl	8001940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006af4:	431a      	orrs	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b08:	ea42 0103 	orr.w	r1, r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	0c1a      	lsrs	r2, r3, #16
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f002 0204 	and.w	r2, r2, #4
 8006b2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_SPI_Transmit+0x22>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e126      	b.n	8006dc4 <HAL_SPI_Transmit+0x270>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b7e:	f7fd faad 	bl	80040dc <HAL_GetTick>
 8006b82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b84:	88fb      	ldrh	r3, [r7, #6]
 8006b86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d002      	beq.n	8006b9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
 8006b96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b98:	e10b      	b.n	8006db2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_SPI_Transmit+0x52>
 8006ba0:	88fb      	ldrh	r3, [r7, #6]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006baa:	e102      	b.n	8006db2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2203      	movs	r2, #3
 8006bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	88fa      	ldrh	r2, [r7, #6]
 8006bc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	88fa      	ldrh	r2, [r7, #6]
 8006bca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf2:	d10f      	bne.n	8006c14 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1e:	2b40      	cmp	r3, #64	; 0x40
 8006c20:	d007      	beq.n	8006c32 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c3a:	d14b      	bne.n	8006cd4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <HAL_SPI_Transmit+0xf6>
 8006c44:	8afb      	ldrh	r3, [r7, #22]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d13e      	bne.n	8006cc8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	881a      	ldrh	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	1c9a      	adds	r2, r3, #2
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	3b01      	subs	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006c6e:	e02b      	b.n	8006cc8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d112      	bne.n	8006ca4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	881a      	ldrh	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	1c9a      	adds	r2, r3, #2
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ca2:	e011      	b.n	8006cc8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ca4:	f7fd fa1a 	bl	80040dc <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d803      	bhi.n	8006cbc <HAL_SPI_Transmit+0x168>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cba:	d102      	bne.n	8006cc2 <HAL_SPI_Transmit+0x16e>
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d102      	bne.n	8006cc8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cc6:	e074      	b.n	8006db2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1ce      	bne.n	8006c70 <HAL_SPI_Transmit+0x11c>
 8006cd2:	e04c      	b.n	8006d6e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <HAL_SPI_Transmit+0x18e>
 8006cdc:	8afb      	ldrh	r3, [r7, #22]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d140      	bne.n	8006d64 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	7812      	ldrb	r2, [r2, #0]
 8006cee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d08:	e02c      	b.n	8006d64 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d113      	bne.n	8006d40 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d3e:	e011      	b.n	8006d64 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d40:	f7fd f9cc 	bl	80040dc <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d803      	bhi.n	8006d58 <HAL_SPI_Transmit+0x204>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d56:	d102      	bne.n	8006d5e <HAL_SPI_Transmit+0x20a>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d62:	e026      	b.n	8006db2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1cd      	bne.n	8006d0a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 f8b2 	bl	8006edc <SPI_EndRxTxTransaction>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2220      	movs	r2, #32
 8006d82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	77fb      	strb	r3, [r7, #31]
 8006dae:	e000      	b.n	8006db2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006db0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3720      	adds	r7, #32
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b088      	sub	sp, #32
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ddc:	f7fd f97e 	bl	80040dc <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	4413      	add	r3, r2
 8006dea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006dec:	f7fd f976 	bl	80040dc <HAL_GetTick>
 8006df0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006df2:	4b39      	ldr	r3, [pc, #228]	; (8006ed8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	015b      	lsls	r3, r3, #5
 8006df8:	0d1b      	lsrs	r3, r3, #20
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	fb02 f303 	mul.w	r3, r2, r3
 8006e00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e02:	e054      	b.n	8006eae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e0a:	d050      	beq.n	8006eae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e0c:	f7fd f966 	bl	80040dc <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	69fa      	ldr	r2, [r7, #28]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d902      	bls.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d13d      	bne.n	8006e9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e3a:	d111      	bne.n	8006e60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e44:	d004      	beq.n	8006e50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e4e:	d107      	bne.n	8006e60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e68:	d10f      	bne.n	8006e8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e017      	b.n	8006ece <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	bf0c      	ite	eq
 8006ebe:	2301      	moveq	r3, #1
 8006ec0:	2300      	movne	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d19b      	bne.n	8006e04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3720      	adds	r7, #32
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000230 	.word	0x20000230

08006edc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	2180      	movs	r1, #128	; 0x80
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff ff6a 	bl	8006dcc <SPI_WaitFlagStateUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d007      	beq.n	8006f0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f02:	f043 0220 	orr.w	r2, r3, #32
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e000      	b.n	8006f10 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e041      	b.n	8006fae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fa fd3c 	bl	80019bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f000 fcba 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d001      	beq.n	8006fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e03a      	b.n	8007046 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a18      	ldr	r2, [pc, #96]	; (8007050 <HAL_TIM_Base_Start_IT+0x98>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00e      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x58>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffa:	d009      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x58>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a14      	ldr	r2, [pc, #80]	; (8007054 <HAL_TIM_Base_Start_IT+0x9c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d004      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0x58>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a13      	ldr	r2, [pc, #76]	; (8007058 <HAL_TIM_Base_Start_IT+0xa0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d111      	bne.n	8007034 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b06      	cmp	r3, #6
 8007020:	d010      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f042 0201 	orr.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007032:	e007      	b.n	8007044 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr
 8007050:	40012c00 	.word	0x40012c00
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800

0800705c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0201 	bic.w	r2, r2, #1
 8007072:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6a1a      	ldr	r2, [r3, #32]
 800707a:	f241 1311 	movw	r3, #4369	; 0x1111
 800707e:	4013      	ands	r3, r2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10f      	bne.n	80070a4 <HAL_TIM_Base_Stop_IT+0x48>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6a1a      	ldr	r2, [r3, #32]
 800708a:	f240 4344 	movw	r3, #1092	; 0x444
 800708e:	4013      	ands	r3, r2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d107      	bne.n	80070a4 <HAL_TIM_Base_Stop_IT+0x48>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0201 	bic.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e041      	b.n	800714e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d106      	bne.n	80070e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f839 	bl	8007156 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2202      	movs	r2, #2
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3304      	adds	r3, #4
 80070f4:	4619      	mov	r1, r3
 80070f6:	4610      	mov	r0, r2
 80070f8:	f000 fbea 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr

08007168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d109      	bne.n	800718c <HAL_TIM_PWM_Start+0x24>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b01      	cmp	r3, #1
 8007182:	bf14      	ite	ne
 8007184:	2301      	movne	r3, #1
 8007186:	2300      	moveq	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	e022      	b.n	80071d2 <HAL_TIM_PWM_Start+0x6a>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b04      	cmp	r3, #4
 8007190:	d109      	bne.n	80071a6 <HAL_TIM_PWM_Start+0x3e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b01      	cmp	r3, #1
 800719c:	bf14      	ite	ne
 800719e:	2301      	movne	r3, #1
 80071a0:	2300      	moveq	r3, #0
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	e015      	b.n	80071d2 <HAL_TIM_PWM_Start+0x6a>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d109      	bne.n	80071c0 <HAL_TIM_PWM_Start+0x58>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	bf14      	ite	ne
 80071b8:	2301      	movne	r3, #1
 80071ba:	2300      	moveq	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	e008      	b.n	80071d2 <HAL_TIM_PWM_Start+0x6a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	bf14      	ite	ne
 80071cc:	2301      	movne	r3, #1
 80071ce:	2300      	moveq	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e05e      	b.n	8007298 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <HAL_TIM_PWM_Start+0x82>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e8:	e013      	b.n	8007212 <HAL_TIM_PWM_Start+0xaa>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d104      	bne.n	80071fa <HAL_TIM_PWM_Start+0x92>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f8:	e00b      	b.n	8007212 <HAL_TIM_PWM_Start+0xaa>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d104      	bne.n	800720a <HAL_TIM_PWM_Start+0xa2>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007208:	e003      	b.n	8007212 <HAL_TIM_PWM_Start+0xaa>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2201      	movs	r2, #1
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	4618      	mov	r0, r3
 800721c:	f000 fdd8 	bl	8007dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a1e      	ldr	r2, [pc, #120]	; (80072a0 <HAL_TIM_PWM_Start+0x138>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d107      	bne.n	800723a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007238:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a18      	ldr	r2, [pc, #96]	; (80072a0 <HAL_TIM_PWM_Start+0x138>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00e      	beq.n	8007262 <HAL_TIM_PWM_Start+0xfa>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800724c:	d009      	beq.n	8007262 <HAL_TIM_PWM_Start+0xfa>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a14      	ldr	r2, [pc, #80]	; (80072a4 <HAL_TIM_PWM_Start+0x13c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d004      	beq.n	8007262 <HAL_TIM_PWM_Start+0xfa>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a12      	ldr	r2, [pc, #72]	; (80072a8 <HAL_TIM_PWM_Start+0x140>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d111      	bne.n	8007286 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b06      	cmp	r3, #6
 8007272:	d010      	beq.n	8007296 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007284:	e007      	b.n	8007296 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0201 	orr.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40000400 	.word	0x40000400
 80072a8:	40000800 	.word	0x40000800

080072ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 fd86 	bl	8007dd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a29      	ldr	r2, [pc, #164]	; (8007370 <HAL_TIM_PWM_Stop+0xc4>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d117      	bne.n	80072fe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6a1a      	ldr	r2, [r3, #32]
 80072d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10f      	bne.n	80072fe <HAL_TIM_PWM_Stop+0x52>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6a1a      	ldr	r2, [r3, #32]
 80072e4:	f240 4344 	movw	r3, #1092	; 0x444
 80072e8:	4013      	ands	r3, r2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d107      	bne.n	80072fe <HAL_TIM_PWM_Stop+0x52>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	f241 1311 	movw	r3, #4369	; 0x1111
 8007308:	4013      	ands	r3, r2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10f      	bne.n	800732e <HAL_TIM_PWM_Stop+0x82>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6a1a      	ldr	r2, [r3, #32]
 8007314:	f240 4344 	movw	r3, #1092	; 0x444
 8007318:	4013      	ands	r3, r2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d107      	bne.n	800732e <HAL_TIM_PWM_Stop+0x82>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0201 	bic.w	r2, r2, #1
 800732c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d104      	bne.n	800733e <HAL_TIM_PWM_Stop+0x92>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800733c:	e013      	b.n	8007366 <HAL_TIM_PWM_Stop+0xba>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b04      	cmp	r3, #4
 8007342:	d104      	bne.n	800734e <HAL_TIM_PWM_Stop+0xa2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800734c:	e00b      	b.n	8007366 <HAL_TIM_PWM_Stop+0xba>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b08      	cmp	r3, #8
 8007352:	d104      	bne.n	800735e <HAL_TIM_PWM_Stop+0xb2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800735c:	e003      	b.n	8007366 <HAL_TIM_PWM_Stop+0xba>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40012c00 	.word	0x40012c00

08007374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b02      	cmp	r3, #2
 8007388:	d122      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b02      	cmp	r3, #2
 8007396:	d11b      	bne.n	80073d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0202 	mvn.w	r2, #2
 80073a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fa6f 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa62 	bl	8007888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fa71 	bl	80078ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d122      	bne.n	8007424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0304 	and.w	r3, r3, #4
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d11b      	bne.n	8007424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0204 	mvn.w	r2, #4
 80073f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2202      	movs	r2, #2
 80073fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fa45 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 8007410:	e005      	b.n	800741e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa38 	bl	8007888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fa47 	bl	80078ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b08      	cmp	r3, #8
 8007430:	d122      	bne.n	8007478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b08      	cmp	r3, #8
 800743e:	d11b      	bne.n	8007478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0208 	mvn.w	r2, #8
 8007448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2204      	movs	r2, #4
 800744e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f003 0303 	and.w	r3, r3, #3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa1b 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa0e 	bl	8007888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fa1d 	bl	80078ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0310 	and.w	r3, r3, #16
 8007482:	2b10      	cmp	r3, #16
 8007484:	d122      	bne.n	80074cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0310 	and.w	r3, r3, #16
 8007490:	2b10      	cmp	r3, #16
 8007492:	d11b      	bne.n	80074cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0210 	mvn.w	r2, #16
 800749c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2208      	movs	r2, #8
 80074a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f9f1 	bl	800789a <HAL_TIM_IC_CaptureCallback>
 80074b8:	e005      	b.n	80074c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f9e4 	bl	8007888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f9f3 	bl	80078ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d10e      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d107      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f06f 0201 	mvn.w	r2, #1
 80074f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7f8 ff08 	bl	8000308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007502:	2b80      	cmp	r3, #128	; 0x80
 8007504:	d10e      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d107      	bne.n	8007524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800751c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fd32 	bl	8007f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d10e      	bne.n	8007550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d107      	bne.n	8007550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f9b7 	bl	80078be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b20      	cmp	r3, #32
 800755c:	d10e      	bne.n	800757c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b20      	cmp	r3, #32
 800756a:	d107      	bne.n	800757c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0220 	mvn.w	r2, #32
 8007574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fcfd 	bl	8007f76 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007596:	2b01      	cmp	r3, #1
 8007598:	d101      	bne.n	800759e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800759a:	2302      	movs	r3, #2
 800759c:	e0ac      	b.n	80076f8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b0c      	cmp	r3, #12
 80075aa:	f200 809f 	bhi.w	80076ec <HAL_TIM_PWM_ConfigChannel+0x168>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	080075e9 	.word	0x080075e9
 80075b8:	080076ed 	.word	0x080076ed
 80075bc:	080076ed 	.word	0x080076ed
 80075c0:	080076ed 	.word	0x080076ed
 80075c4:	08007629 	.word	0x08007629
 80075c8:	080076ed 	.word	0x080076ed
 80075cc:	080076ed 	.word	0x080076ed
 80075d0:	080076ed 	.word	0x080076ed
 80075d4:	0800766b 	.word	0x0800766b
 80075d8:	080076ed 	.word	0x080076ed
 80075dc:	080076ed 	.word	0x080076ed
 80075e0:	080076ed 	.word	0x080076ed
 80075e4:	080076ab 	.word	0x080076ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 f9d0 	bl	8007994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0208 	orr.w	r2, r2, #8
 8007602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0204 	bic.w	r2, r2, #4
 8007612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6999      	ldr	r1, [r3, #24]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	430a      	orrs	r2, r1
 8007624:	619a      	str	r2, [r3, #24]
      break;
 8007626:	e062      	b.n	80076ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fa16 	bl	8007a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699a      	ldr	r2, [r3, #24]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6999      	ldr	r1, [r3, #24]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	021a      	lsls	r2, r3, #8
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	619a      	str	r2, [r3, #24]
      break;
 8007668:	e041      	b.n	80076ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fa5f 	bl	8007b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0208 	orr.w	r2, r2, #8
 8007684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69da      	ldr	r2, [r3, #28]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0204 	bic.w	r2, r2, #4
 8007694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69d9      	ldr	r1, [r3, #28]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	61da      	str	r2, [r3, #28]
      break;
 80076a8:	e021      	b.n	80076ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68b9      	ldr	r1, [r7, #8]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 faa9 	bl	8007c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69da      	ldr	r2, [r3, #28]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69d9      	ldr	r1, [r3, #28]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	021a      	lsls	r2, r3, #8
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	61da      	str	r2, [r3, #28]
      break;
 80076ea:	e000      	b.n	80076ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80076ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_TIM_ConfigClockSource+0x18>
 8007714:	2302      	movs	r3, #2
 8007716:	e0b3      	b.n	8007880 <HAL_TIM_ConfigClockSource+0x180>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007736:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800773e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007750:	d03e      	beq.n	80077d0 <HAL_TIM_ConfigClockSource+0xd0>
 8007752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007756:	f200 8087 	bhi.w	8007868 <HAL_TIM_ConfigClockSource+0x168>
 800775a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775e:	f000 8085 	beq.w	800786c <HAL_TIM_ConfigClockSource+0x16c>
 8007762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007766:	d87f      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x168>
 8007768:	2b70      	cmp	r3, #112	; 0x70
 800776a:	d01a      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0xa2>
 800776c:	2b70      	cmp	r3, #112	; 0x70
 800776e:	d87b      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x168>
 8007770:	2b60      	cmp	r3, #96	; 0x60
 8007772:	d050      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x116>
 8007774:	2b60      	cmp	r3, #96	; 0x60
 8007776:	d877      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x168>
 8007778:	2b50      	cmp	r3, #80	; 0x50
 800777a:	d03c      	beq.n	80077f6 <HAL_TIM_ConfigClockSource+0xf6>
 800777c:	2b50      	cmp	r3, #80	; 0x50
 800777e:	d873      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x168>
 8007780:	2b40      	cmp	r3, #64	; 0x40
 8007782:	d058      	beq.n	8007836 <HAL_TIM_ConfigClockSource+0x136>
 8007784:	2b40      	cmp	r3, #64	; 0x40
 8007786:	d86f      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x168>
 8007788:	2b30      	cmp	r3, #48	; 0x30
 800778a:	d064      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x156>
 800778c:	2b30      	cmp	r3, #48	; 0x30
 800778e:	d86b      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x168>
 8007790:	2b20      	cmp	r3, #32
 8007792:	d060      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x156>
 8007794:	2b20      	cmp	r3, #32
 8007796:	d867      	bhi.n	8007868 <HAL_TIM_ConfigClockSource+0x168>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d05c      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x156>
 800779c:	2b10      	cmp	r3, #16
 800779e:	d05a      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80077a0:	e062      	b.n	8007868 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6899      	ldr	r1, [r3, #8]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f000 faee 	bl	8007d92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	609a      	str	r2, [r3, #8]
      break;
 80077ce:	e04e      	b.n	800786e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6818      	ldr	r0, [r3, #0]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	6899      	ldr	r1, [r3, #8]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f000 fad7 	bl	8007d92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077f2:	609a      	str	r2, [r3, #8]
      break;
 80077f4:	e03b      	b.n	800786e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	6859      	ldr	r1, [r3, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	461a      	mov	r2, r3
 8007804:	f000 fa4e 	bl	8007ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2150      	movs	r1, #80	; 0x50
 800780e:	4618      	mov	r0, r3
 8007810:	f000 faa5 	bl	8007d5e <TIM_ITRx_SetConfig>
      break;
 8007814:	e02b      	b.n	800786e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	6859      	ldr	r1, [r3, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	461a      	mov	r2, r3
 8007824:	f000 fa6c 	bl	8007d00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2160      	movs	r1, #96	; 0x60
 800782e:	4618      	mov	r0, r3
 8007830:	f000 fa95 	bl	8007d5e <TIM_ITRx_SetConfig>
      break;
 8007834:	e01b      	b.n	800786e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	6859      	ldr	r1, [r3, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	461a      	mov	r2, r3
 8007844:	f000 fa2e 	bl	8007ca4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2140      	movs	r1, #64	; 0x40
 800784e:	4618      	mov	r0, r3
 8007850:	f000 fa85 	bl	8007d5e <TIM_ITRx_SetConfig>
      break;
 8007854:	e00b      	b.n	800786e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4619      	mov	r1, r3
 8007860:	4610      	mov	r0, r2
 8007862:	f000 fa7c 	bl	8007d5e <TIM_ITRx_SetConfig>
        break;
 8007866:	e002      	b.n	800786e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007868:	bf00      	nop
 800786a:	e000      	b.n	800786e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800786c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	bc80      	pop	{r7}
 8007898:	4770      	bx	lr

0800789a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bc80      	pop	{r7}
 80078aa:	4770      	bx	lr

080078ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr

080078be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr

080078d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a29      	ldr	r2, [pc, #164]	; (8007988 <TIM_Base_SetConfig+0xb8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00b      	beq.n	8007900 <TIM_Base_SetConfig+0x30>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ee:	d007      	beq.n	8007900 <TIM_Base_SetConfig+0x30>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a26      	ldr	r2, [pc, #152]	; (800798c <TIM_Base_SetConfig+0xbc>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_Base_SetConfig+0x30>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a25      	ldr	r2, [pc, #148]	; (8007990 <TIM_Base_SetConfig+0xc0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d108      	bne.n	8007912 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a1c      	ldr	r2, [pc, #112]	; (8007988 <TIM_Base_SetConfig+0xb8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00b      	beq.n	8007932 <TIM_Base_SetConfig+0x62>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007920:	d007      	beq.n	8007932 <TIM_Base_SetConfig+0x62>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a19      	ldr	r2, [pc, #100]	; (800798c <TIM_Base_SetConfig+0xbc>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d003      	beq.n	8007932 <TIM_Base_SetConfig+0x62>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a18      	ldr	r2, [pc, #96]	; (8007990 <TIM_Base_SetConfig+0xc0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d108      	bne.n	8007944 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	4313      	orrs	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a07      	ldr	r2, [pc, #28]	; (8007988 <TIM_Base_SetConfig+0xb8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d103      	bne.n	8007978 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	615a      	str	r2, [r3, #20]
}
 800797e:	bf00      	nop
 8007980:	3714      	adds	r7, #20
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40000400 	.word	0x40000400
 8007990:	40000800 	.word	0x40000800

08007994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	f023 0201 	bic.w	r2, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f023 0302 	bic.w	r3, r3, #2
 80079dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	697a      	ldr	r2, [r7, #20]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a1c      	ldr	r2, [pc, #112]	; (8007a5c <TIM_OC1_SetConfig+0xc8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d10c      	bne.n	8007a0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f023 0308 	bic.w	r3, r3, #8
 80079f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f023 0304 	bic.w	r3, r3, #4
 8007a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a13      	ldr	r2, [pc, #76]	; (8007a5c <TIM_OC1_SetConfig+0xc8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d111      	bne.n	8007a36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	621a      	str	r2, [r3, #32]
}
 8007a50:	bf00      	nop
 8007a52:	371c      	adds	r7, #28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	40012c00 	.word	0x40012c00

08007a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f023 0210 	bic.w	r2, r3, #16
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f023 0320 	bic.w	r3, r3, #32
 8007aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a1d      	ldr	r2, [pc, #116]	; (8007b30 <TIM_OC2_SetConfig+0xd0>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10d      	bne.n	8007adc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ada:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a14      	ldr	r2, [pc, #80]	; (8007b30 <TIM_OC2_SetConfig+0xd0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d113      	bne.n	8007b0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007aea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007af2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr
 8007b30:	40012c00 	.word	0x40012c00

08007b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 0303 	bic.w	r3, r3, #3
 8007b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a1d      	ldr	r2, [pc, #116]	; (8007c04 <TIM_OC3_SetConfig+0xd0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d10d      	bne.n	8007bae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a14      	ldr	r2, [pc, #80]	; (8007c04 <TIM_OC3_SetConfig+0xd0>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d113      	bne.n	8007bde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	621a      	str	r2, [r3, #32]
}
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40012c00 	.word	0x40012c00

08007c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	031b      	lsls	r3, r3, #12
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a0f      	ldr	r2, [pc, #60]	; (8007ca0 <TIM_OC4_SetConfig+0x98>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d109      	bne.n	8007c7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	019b      	lsls	r3, r3, #6
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	621a      	str	r2, [r3, #32]
}
 8007c96:	bf00      	nop
 8007c98:	371c      	adds	r7, #28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bc80      	pop	{r7}
 8007c9e:	4770      	bx	lr
 8007ca0:	40012c00 	.word	0x40012c00

08007ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	f023 0201 	bic.w	r2, r3, #1
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f023 030a 	bic.w	r3, r3, #10
 8007ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	621a      	str	r2, [r3, #32]
}
 8007cf6:	bf00      	nop
 8007cf8:	371c      	adds	r7, #28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr

08007d00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	f023 0210 	bic.w	r2, r3, #16
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	031b      	lsls	r3, r3, #12
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	011b      	lsls	r3, r3, #4
 8007d42:	693a      	ldr	r2, [r7, #16]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	621a      	str	r2, [r3, #32]
}
 8007d54:	bf00      	nop
 8007d56:	371c      	adds	r7, #28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr

08007d5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f043 0307 	orr.w	r3, r3, #7
 8007d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	609a      	str	r2, [r3, #8]
}
 8007d88:	bf00      	nop
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bc80      	pop	{r7}
 8007d90:	4770      	bx	lr

08007d92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b087      	sub	sp, #28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	021a      	lsls	r2, r3, #8
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	431a      	orrs	r2, r3
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	609a      	str	r2, [r3, #8]
}
 8007dc6:	bf00      	nop
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr

08007dd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 031f 	and.w	r3, r3, #31
 8007de2:	2201      	movs	r2, #1
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a1a      	ldr	r2, [r3, #32]
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	43db      	mvns	r3, r3
 8007df2:	401a      	ands	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a1a      	ldr	r2, [r3, #32]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f003 031f 	and.w	r3, r3, #31
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	fa01 f303 	lsl.w	r3, r1, r3
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]
}
 8007e0e:	bf00      	nop
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e046      	b.n	8007ebe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a16      	ldr	r2, [pc, #88]	; (8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00e      	beq.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7c:	d009      	beq.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a12      	ldr	r2, [pc, #72]	; (8007ecc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d004      	beq.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a10      	ldr	r2, [pc, #64]	; (8007ed0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d10c      	bne.n	8007eac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40000400 	.word	0x40000400
 8007ed0:	40000800 	.word	0x40000800

08007ed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e03d      	b.n	8007f6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr

08007f76 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bc80      	pop	{r7}
 8007f86:	4770      	bx	lr

08007f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr

08007f9a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	f107 0014 	add.w	r0, r7, #20
 8007fa8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	b004      	add	sp, #16
 8007fb8:	4770      	bx	lr

08007fba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007fca:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007fce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc80      	pop	{r7}
 8007fe4:	4770      	bx	lr

08007fe6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b085      	sub	sp, #20
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007fee:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007ff2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	43db      	mvns	r3, r3
 8008002:	b29b      	uxth	r3, r3
 8008004:	4013      	ands	r3, r2
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	460b      	mov	r3, r1
 8008024:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	bc80      	pop	{r7}
 8008030:	4770      	bx	lr

08008032 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008032:	b084      	sub	sp, #16
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	f107 0014 	add.w	r0, r7, #20
 8008040:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	b004      	add	sp, #16
 8008070:	4770      	bx	lr
	...

08008074 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008074:	b480      	push	{r7}
 8008076:	b09b      	sub	sp, #108	; 0x6c
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4413      	add	r3, r2
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29b      	uxth	r3, r3
 8008092:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800809a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	78db      	ldrb	r3, [r3, #3]
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d81f      	bhi.n	80080e6 <USB_ActivateEndpoint+0x72>
 80080a6:	a201      	add	r2, pc, #4	; (adr r2, 80080ac <USB_ActivateEndpoint+0x38>)
 80080a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ac:	080080bd 	.word	0x080080bd
 80080b0:	080080d9 	.word	0x080080d9
 80080b4:	080080ef 	.word	0x080080ef
 80080b8:	080080cb 	.word	0x080080cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80080bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80080c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80080c8:	e012      	b.n	80080f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80080ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80080ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80080d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80080d6:	e00b      	b.n	80080f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80080d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80080dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80080e4:	e004      	b.n	80080f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80080ec:	e000      	b.n	80080f0 <USB_ActivateEndpoint+0x7c>
      break;
 80080ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	441a      	add	r2, r3
 80080fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80080fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800810a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800810e:	b29b      	uxth	r3, r3
 8008110:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008128:	b29a      	uxth	r2, r3
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	b29b      	uxth	r3, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	441a      	add	r2, r3
 8008140:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800814c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008154:	b29b      	uxth	r3, r3
 8008156:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	7b1b      	ldrb	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f040 8149 	bne.w	80083f4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8084 	beq.w	8008274 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008176:	b29b      	uxth	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	4413      	add	r3, r2
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	011a      	lsls	r2, r3, #4
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800818e:	613b      	str	r3, [r7, #16]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	88db      	ldrh	r3, [r3, #6]
 8008194:	085b      	lsrs	r3, r3, #1
 8008196:	b29b      	uxth	r3, r3
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	b29a      	uxth	r2, r3
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	81fb      	strh	r3, [r7, #14]
 80081ae:	89fb      	ldrh	r3, [r7, #14]
 80081b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01b      	beq.n	80081f0 <USB_ActivateEndpoint+0x17c>
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ce:	81bb      	strh	r3, [r7, #12]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	441a      	add	r2, r3
 80081da:	89bb      	ldrh	r3, [r7, #12]
 80081dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	78db      	ldrb	r3, [r3, #3]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d020      	beq.n	800823a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800820e:	813b      	strh	r3, [r7, #8]
 8008210:	893b      	ldrh	r3, [r7, #8]
 8008212:	f083 0320 	eor.w	r3, r3, #32
 8008216:	813b      	strh	r3, [r7, #8]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	441a      	add	r2, r3
 8008222:	893b      	ldrh	r3, [r7, #8]
 8008224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800822c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008234:	b29b      	uxth	r3, r3
 8008236:	8013      	strh	r3, [r2, #0]
 8008238:	e27f      	b.n	800873a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800824c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008250:	817b      	strh	r3, [r7, #10]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	441a      	add	r2, r3
 800825c:	897b      	ldrh	r3, [r7, #10]
 800825e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826e:	b29b      	uxth	r3, r3
 8008270:	8013      	strh	r3, [r2, #0]
 8008272:	e262      	b.n	800873a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800827e:	b29b      	uxth	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	4413      	add	r3, r2
 8008286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	011a      	lsls	r2, r3, #4
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008290:	4413      	add	r3, r2
 8008292:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008296:	62bb      	str	r3, [r7, #40]	; 0x28
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	88db      	ldrh	r3, [r3, #6]
 800829c:	085b      	lsrs	r3, r3, #1
 800829e:	b29b      	uxth	r3, r3
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	4413      	add	r3, r2
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	011a      	lsls	r2, r3, #4
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	4413      	add	r3, r2
 80082c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082ca:	623b      	str	r3, [r7, #32]
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d112      	bne.n	80082fa <USB_ActivateEndpoint+0x286>
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082de:	b29a      	uxth	r2, r3
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	801a      	strh	r2, [r3, #0]
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	881b      	ldrh	r3, [r3, #0]
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	e02f      	b.n	800835a <USB_ActivateEndpoint+0x2e6>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b3e      	cmp	r3, #62	; 0x3e
 8008300:	d813      	bhi.n	800832a <USB_ActivateEndpoint+0x2b6>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	085b      	lsrs	r3, r3, #1
 8008308:	663b      	str	r3, [r7, #96]	; 0x60
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d002      	beq.n	800831c <USB_ActivateEndpoint+0x2a8>
 8008316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008318:	3301      	adds	r3, #1
 800831a:	663b      	str	r3, [r7, #96]	; 0x60
 800831c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800831e:	b29b      	uxth	r3, r3
 8008320:	029b      	lsls	r3, r3, #10
 8008322:	b29a      	uxth	r2, r3
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	801a      	strh	r2, [r3, #0]
 8008328:	e017      	b.n	800835a <USB_ActivateEndpoint+0x2e6>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	095b      	lsrs	r3, r3, #5
 8008330:	663b      	str	r3, [r7, #96]	; 0x60
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 031f 	and.w	r3, r3, #31
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <USB_ActivateEndpoint+0x2d0>
 800833e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008340:	3b01      	subs	r3, #1
 8008342:	663b      	str	r3, [r7, #96]	; 0x60
 8008344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008346:	b29b      	uxth	r3, r3
 8008348:	029b      	lsls	r3, r3, #10
 800834a:	b29b      	uxth	r3, r3
 800834c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008354:	b29a      	uxth	r2, r3
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	881b      	ldrh	r3, [r3, #0]
 8008366:	83fb      	strh	r3, [r7, #30]
 8008368:	8bfb      	ldrh	r3, [r7, #30]
 800836a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01b      	beq.n	80083aa <USB_ActivateEndpoint+0x336>
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29b      	uxth	r3, r3
 8008380:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008388:	83bb      	strh	r3, [r7, #28]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	441a      	add	r2, r3
 8008394:	8bbb      	ldrh	r3, [r7, #28]
 8008396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800839a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c0:	837b      	strh	r3, [r7, #26]
 80083c2:	8b7b      	ldrh	r3, [r7, #26]
 80083c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80083c8:	837b      	strh	r3, [r7, #26]
 80083ca:	8b7b      	ldrh	r3, [r7, #26]
 80083cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083d0:	837b      	strh	r3, [r7, #26]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	441a      	add	r2, r3
 80083dc:	8b7b      	ldrh	r3, [r7, #26]
 80083de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	8013      	strh	r3, [r2, #0]
 80083f2:	e1a2      	b.n	800873a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800840a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	441a      	add	r2, r3
 8008418:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800841c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008424:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800842c:	b29b      	uxth	r3, r3
 800842e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	65bb      	str	r3, [r7, #88]	; 0x58
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800843a:	b29b      	uxth	r3, r3
 800843c:	461a      	mov	r2, r3
 800843e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008440:	4413      	add	r3, r2
 8008442:	65bb      	str	r3, [r7, #88]	; 0x58
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	011a      	lsls	r2, r3, #4
 800844a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800844c:	4413      	add	r3, r2
 800844e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008452:	657b      	str	r3, [r7, #84]	; 0x54
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	891b      	ldrh	r3, [r3, #8]
 8008458:	085b      	lsrs	r3, r3, #1
 800845a:	b29b      	uxth	r3, r3
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	b29a      	uxth	r2, r3
 8008460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008462:	801a      	strh	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	653b      	str	r3, [r7, #80]	; 0x50
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800846e:	b29b      	uxth	r3, r3
 8008470:	461a      	mov	r2, r3
 8008472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008474:	4413      	add	r3, r2
 8008476:	653b      	str	r3, [r7, #80]	; 0x50
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	011a      	lsls	r2, r3, #4
 800847e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008480:	4413      	add	r3, r2
 8008482:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	895b      	ldrh	r3, [r3, #10]
 800848c:	085b      	lsrs	r3, r3, #1
 800848e:	b29b      	uxth	r3, r3
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	b29a      	uxth	r2, r3
 8008494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008496:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	2b00      	cmp	r3, #0
 800849e:	f040 8091 	bne.w	80085c4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80084b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80084b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01b      	beq.n	80084f2 <USB_ActivateEndpoint+0x47e>
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	441a      	add	r2, r3
 80084dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80084de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8008500:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008506:	2b00      	cmp	r3, #0
 8008508:	d01b      	beq.n	8008542 <USB_ActivateEndpoint+0x4ce>
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800851c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008520:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	441a      	add	r2, r3
 800852c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800852e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800853a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800853e:	b29b      	uxth	r3, r3
 8008540:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	b29b      	uxth	r3, r3
 8008550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008558:	86bb      	strh	r3, [r7, #52]	; 0x34
 800855a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800855c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008560:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008562:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008564:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008568:	86bb      	strh	r3, [r7, #52]	; 0x34
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	441a      	add	r2, r3
 8008574:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800857a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800857e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008586:	b29b      	uxth	r3, r3
 8008588:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b29b      	uxth	r3, r3
 8008598:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800859c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085a0:	867b      	strh	r3, [r7, #50]	; 0x32
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	441a      	add	r2, r3
 80085ac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80085ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085be:	b29b      	uxth	r3, r3
 80085c0:	8013      	strh	r3, [r2, #0]
 80085c2:	e0ba      	b.n	800873a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	881b      	ldrh	r3, [r3, #0]
 80085d0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80085d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80085d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d01d      	beq.n	800861c <USB_ActivateEndpoint+0x5a8>
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	441a      	add	r2, r3
 8008604:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800860c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008618:	b29b      	uxth	r3, r3
 800861a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800862c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d01d      	beq.n	8008674 <USB_ActivateEndpoint+0x600>
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	881b      	ldrh	r3, [r3, #0]
 8008644:	b29b      	uxth	r3, r3
 8008646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800864a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	441a      	add	r2, r3
 800865c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800866c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008670:	b29b      	uxth	r3, r3
 8008672:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	78db      	ldrb	r3, [r3, #3]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d024      	beq.n	80086c6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	b29b      	uxth	r3, r3
 800868a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800868e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008692:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008696:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800869a:	f083 0320 	eor.w	r3, r3, #32
 800869e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	441a      	add	r2, r3
 80086ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80086b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	8013      	strh	r3, [r2, #0]
 80086c4:	e01d      	b.n	8008702 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	441a      	add	r2, r3
 80086ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80086ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fe:	b29b      	uxth	r3, r3
 8008700:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	881b      	ldrh	r3, [r3, #0]
 800870e:	b29b      	uxth	r3, r3
 8008710:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008718:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	441a      	add	r2, r3
 8008724:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800872a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800872e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008736:	b29b      	uxth	r3, r3
 8008738:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800873a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800873e:	4618      	mov	r0, r3
 8008740:	376c      	adds	r7, #108	; 0x6c
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr

08008748 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008748:	b480      	push	{r7}
 800874a:	b08d      	sub	sp, #52	; 0x34
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	7b1b      	ldrb	r3, [r3, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f040 808e 	bne.w	8008878 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d044      	beq.n	80087ee <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	81bb      	strh	r3, [r7, #12]
 8008772:	89bb      	ldrh	r3, [r7, #12]
 8008774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01b      	beq.n	80087b4 <USB_DeactivateEndpoint+0x6c>
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008792:	817b      	strh	r3, [r7, #10]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	441a      	add	r2, r3
 800879e:	897b      	ldrh	r3, [r7, #10]
 80087a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ca:	813b      	strh	r3, [r7, #8]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	441a      	add	r2, r3
 80087d6:	893b      	ldrh	r3, [r7, #8]
 80087d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	8013      	strh	r3, [r2, #0]
 80087ec:	e192      	b.n	8008b14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	827b      	strh	r3, [r7, #18]
 80087fc:	8a7b      	ldrh	r3, [r7, #18]
 80087fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d01b      	beq.n	800883e <USB_DeactivateEndpoint+0xf6>
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	b29b      	uxth	r3, r3
 8008814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881c:	823b      	strh	r3, [r7, #16]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	441a      	add	r2, r3
 8008828:	8a3b      	ldrh	r3, [r7, #16]
 800882a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800882e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883a:	b29b      	uxth	r3, r3
 800883c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008854:	81fb      	strh	r3, [r7, #14]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	441a      	add	r2, r3
 8008860:	89fb      	ldrh	r3, [r7, #14]
 8008862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800886a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800886e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008872:	b29b      	uxth	r3, r3
 8008874:	8013      	strh	r3, [r2, #0]
 8008876:	e14d      	b.n	8008b14 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	785b      	ldrb	r3, [r3, #1]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f040 80a5 	bne.w	80089cc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	843b      	strh	r3, [r7, #32]
 8008890:	8c3b      	ldrh	r3, [r7, #32]
 8008892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d01b      	beq.n	80088d2 <USB_DeactivateEndpoint+0x18a>
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088b0:	83fb      	strh	r3, [r7, #30]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	441a      	add	r2, r3
 80088bc:	8bfb      	ldrh	r3, [r7, #30]
 80088be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	83bb      	strh	r3, [r7, #28]
 80088e0:	8bbb      	ldrh	r3, [r7, #28]
 80088e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d01b      	beq.n	8008922 <USB_DeactivateEndpoint+0x1da>
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008900:	837b      	strh	r3, [r7, #26]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	441a      	add	r2, r3
 800890c:	8b7b      	ldrh	r3, [r7, #26]
 800890e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800891a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800891e:	b29b      	uxth	r3, r3
 8008920:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b29b      	uxth	r3, r3
 8008930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008938:	833b      	strh	r3, [r7, #24]
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	441a      	add	r2, r3
 8008944:	8b3b      	ldrh	r3, [r7, #24]
 8008946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800894a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800894e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008952:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008956:	b29b      	uxth	r3, r3
 8008958:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800896c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008970:	82fb      	strh	r3, [r7, #22]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	441a      	add	r2, r3
 800897c:	8afb      	ldrh	r3, [r7, #22]
 800897e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800898a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898e:	b29b      	uxth	r3, r3
 8008990:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a8:	82bb      	strh	r3, [r7, #20]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	441a      	add	r2, r3
 80089b4:	8abb      	ldrh	r3, [r7, #20]
 80089b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	8013      	strh	r3, [r2, #0]
 80089ca:	e0a3      	b.n	8008b14 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80089da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01b      	beq.n	8008a1c <USB_DeactivateEndpoint+0x2d4>
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	441a      	add	r2, r3
 8008a06:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008a2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d01b      	beq.n	8008a6c <USB_DeactivateEndpoint+0x324>
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	881b      	ldrh	r3, [r3, #0]
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	441a      	add	r2, r3
 8008a56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	881b      	ldrh	r3, [r3, #0]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a82:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	441a      	add	r2, r3
 8008a8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	441a      	add	r2, r3
 8008ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af2:	847b      	strh	r3, [r7, #34]	; 0x22
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	441a      	add	r2, r3
 8008afe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3734      	adds	r7, #52	; 0x34
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bc80      	pop	{r7}
 8008b1e:	4770      	bx	lr

08008b20 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b0cc      	sub	sp, #304	; 0x130
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b2e:	6018      	str	r0, [r3, #0]
 8008b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b38:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	785b      	ldrb	r3, [r3, #1]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	f041 817d 	bne.w	8009e46 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	699a      	ldr	r2, [r3, #24]
 8008b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d908      	bls.n	8008b7a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008b78:	e007      	b.n	8008b8a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	7b1b      	ldrb	r3, [r3, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d152      	bne.n	8008c40 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6959      	ldr	r1, [r3, #20]
 8008ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	88da      	ldrh	r2, [r3, #6]
 8008bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008bbc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008bc0:	6800      	ldr	r0, [r0, #0]
 8008bc2:	f001 ff23 	bl	800aa0c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008bce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008bd2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	4619      	mov	r1, r3
 8008bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008bf4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008bf8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	440a      	add	r2, r1
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	011a      	lsls	r2, r3, #4
 8008c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c14:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	801a      	strh	r2, [r3, #0]
 8008c3c:	f001 b8b5 	b.w	8009daa <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	78db      	ldrb	r3, [r3, #3]
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	f040 84c6 	bne.w	80095de <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6a1a      	ldr	r2, [r3, #32]
 8008c5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	f240 8443 	bls.w	80094f6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c96:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	441a      	add	r2, r3
 8008cb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6a1a      	ldr	r2, [r3, #32]
 8008cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cdc:	1ad2      	subs	r2, r2, r3
 8008cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 823e 	beq.w	800918e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d16:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008d1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d1e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d22:	6812      	ldr	r2, [r2, #0]
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	785b      	ldrb	r3, [r3, #1]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f040 809a 	bne.w	8008e6c <USB_EPStartXfer+0x34c>
 8008d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d44:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d48:	6812      	ldr	r2, [r2, #0]
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d6a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	440a      	add	r2, r1
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	011a      	lsls	r2, r3, #4
 8008d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d122      	bne.n	8008dea <USB_EPStartXfer+0x2ca>
 8008da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dbc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	801a      	strh	r2, [r3, #0]
 8008dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	801a      	strh	r2, [r3, #0]
 8008de8:	e079      	b.n	8008ede <USB_EPStartXfer+0x3be>
 8008dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dee:	2b3e      	cmp	r3, #62	; 0x3e
 8008df0:	d81b      	bhi.n	8008e2a <USB_EPStartXfer+0x30a>
 8008df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df6:	085b      	lsrs	r3, r3, #1
 8008df8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d004      	beq.n	8008e12 <USB_EPStartXfer+0x2f2>
 8008e08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	029b      	lsls	r3, r3, #10
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e059      	b.n	8008ede <USB_EPStartXfer+0x3be>
 8008e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e38:	f003 031f 	and.w	r3, r3, #31
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <USB_EPStartXfer+0x32a>
 8008e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e44:	3b01      	subs	r3, #1
 8008e46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008e4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	029b      	lsls	r3, r3, #10
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	801a      	strh	r2, [r3, #0]
 8008e6a:	e038      	b.n	8008ede <USB_EPStartXfer+0x3be>
 8008e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	785b      	ldrb	r3, [r3, #1]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d130      	bne.n	8008ede <USB_EPStartXfer+0x3be>
 8008e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e92:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008e96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e9a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008e9e:	6812      	ldr	r2, [r2, #0]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	011a      	lsls	r2, r3, #4
 8008eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	895b      	ldrh	r3, [r3, #10]
 8008eea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6959      	ldr	r1, [r3, #20]
 8008efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008f08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008f0c:	6800      	ldr	r0, [r0, #0]
 8008f0e:	f001 fd7d 	bl	800aa0c <USB_WritePMA>
            ep->xfer_buff += len;
 8008f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	695a      	ldr	r2, [r3, #20]
 8008f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f22:	441a      	add	r2, r3
 8008f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6a1a      	ldr	r2, [r3, #32]
 8008f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d90f      	bls.n	8008f6c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6a1a      	ldr	r2, [r3, #32]
 8008f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f5c:	1ad2      	subs	r2, r2, r3
 8008f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	621a      	str	r2, [r3, #32]
 8008f6a:	e00e      	b.n	8008f8a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6a1b      	ldr	r3, [r3, #32]
 8008f78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2200      	movs	r2, #0
 8008f88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	785b      	ldrb	r3, [r3, #1]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f040 809a 	bne.w	80090d0 <USB_EPStartXfer+0x5b0>
 8008f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008fa4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fa8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008fac:	6812      	ldr	r2, [r2, #0]
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008fca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fce:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008fd2:	6812      	ldr	r2, [r2, #0]
 8008fd4:	440a      	add	r2, r1
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	011a      	lsls	r2, r3, #4
 8008fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ffa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d122      	bne.n	800904e <USB_EPStartXfer+0x52e>
 8009008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800900c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	881b      	ldrh	r3, [r3, #0]
 8009014:	b29b      	uxth	r3, r3
 8009016:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800901a:	b29a      	uxth	r2, r3
 800901c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009020:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	801a      	strh	r2, [r3, #0]
 8009028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800902c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	b29b      	uxth	r3, r3
 8009036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800903a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800903e:	b29a      	uxth	r2, r3
 8009040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009044:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	801a      	strh	r2, [r3, #0]
 800904c:	e083      	b.n	8009156 <USB_EPStartXfer+0x636>
 800904e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009052:	2b3e      	cmp	r3, #62	; 0x3e
 8009054:	d81b      	bhi.n	800908e <USB_EPStartXfer+0x56e>
 8009056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800905a:	085b      	lsrs	r3, r3, #1
 800905c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	d004      	beq.n	8009076 <USB_EPStartXfer+0x556>
 800906c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009070:	3301      	adds	r3, #1
 8009072:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009076:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800907a:	b29b      	uxth	r3, r3
 800907c:	029b      	lsls	r3, r3, #10
 800907e:	b29a      	uxth	r2, r3
 8009080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009084:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	801a      	strh	r2, [r3, #0]
 800908c:	e063      	b.n	8009156 <USB_EPStartXfer+0x636>
 800908e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009092:	095b      	lsrs	r3, r3, #5
 8009094:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909c:	f003 031f 	and.w	r3, r3, #31
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d104      	bne.n	80090ae <USB_EPStartXfer+0x58e>
 80090a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80090a8:	3b01      	subs	r3, #1
 80090aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80090ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	029b      	lsls	r3, r3, #10
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	801a      	strh	r2, [r3, #0]
 80090ce:	e042      	b.n	8009156 <USB_EPStartXfer+0x636>
 80090d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d13a      	bne.n	8009156 <USB_EPStartXfer+0x636>
 80090e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80090e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80090f0:	6812      	ldr	r2, [r2, #0]
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009102:	b29b      	uxth	r3, r3
 8009104:	4619      	mov	r1, r3
 8009106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800910a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800910e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009112:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8009116:	6812      	ldr	r2, [r2, #0]
 8009118:	440a      	add	r2, r1
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	011a      	lsls	r2, r3, #4
 800912a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800912e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4413      	add	r3, r2
 8009136:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800913a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009148:	b29a      	uxth	r2, r3
 800914a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800915a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	891b      	ldrh	r3, [r3, #8]
 8009162:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800916a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6959      	ldr	r1, [r3, #20]
 8009172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009176:	b29b      	uxth	r3, r3
 8009178:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800917c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009180:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009184:	6800      	ldr	r0, [r0, #0]
 8009186:	f001 fc41 	bl	800aa0c <USB_WritePMA>
 800918a:	f000 be0e 	b.w	8009daa <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800918e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d16d      	bne.n	800927a <USB_EPStartXfer+0x75a>
 800919e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80091aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	461a      	mov	r2, r3
 80091bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091be:	4413      	add	r3, r2
 80091c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80091c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	011a      	lsls	r2, r3, #4
 80091d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091d2:	4413      	add	r3, r2
 80091d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091d8:	647b      	str	r3, [r7, #68]	; 0x44
 80091da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d112      	bne.n	8009208 <USB_EPStartXfer+0x6e8>
 80091e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f0:	801a      	strh	r2, [r3, #0]
 80091f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009200:	b29a      	uxth	r2, r3
 8009202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	e063      	b.n	80092d0 <USB_EPStartXfer+0x7b0>
 8009208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800920c:	2b3e      	cmp	r3, #62	; 0x3e
 800920e:	d817      	bhi.n	8009240 <USB_EPStartXfer+0x720>
 8009210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009214:	085b      	lsrs	r3, r3, #1
 8009216:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800921a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	d004      	beq.n	8009230 <USB_EPStartXfer+0x710>
 8009226:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800922a:	3301      	adds	r3, #1
 800922c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009230:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009234:	b29b      	uxth	r3, r3
 8009236:	029b      	lsls	r3, r3, #10
 8009238:	b29a      	uxth	r2, r3
 800923a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923c:	801a      	strh	r2, [r3, #0]
 800923e:	e047      	b.n	80092d0 <USB_EPStartXfer+0x7b0>
 8009240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009244:	095b      	lsrs	r3, r3, #5
 8009246:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800924a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800924e:	f003 031f 	and.w	r3, r3, #31
 8009252:	2b00      	cmp	r3, #0
 8009254:	d104      	bne.n	8009260 <USB_EPStartXfer+0x740>
 8009256:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800925a:	3b01      	subs	r3, #1
 800925c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009260:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009264:	b29b      	uxth	r3, r3
 8009266:	029b      	lsls	r3, r3, #10
 8009268:	b29b      	uxth	r3, r3
 800926a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800926e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009272:	b29a      	uxth	r2, r3
 8009274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009276:	801a      	strh	r2, [r3, #0]
 8009278:	e02a      	b.n	80092d0 <USB_EPStartXfer+0x7b0>
 800927a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800927e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	785b      	ldrb	r3, [r3, #1]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d122      	bne.n	80092d0 <USB_EPStartXfer+0x7b0>
 800928a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	653b      	str	r3, [r7, #80]	; 0x50
 8009296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800929a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	461a      	mov	r2, r3
 80092a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092aa:	4413      	add	r3, r2
 80092ac:	653b      	str	r3, [r7, #80]	; 0x50
 80092ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	011a      	lsls	r2, r3, #4
 80092bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092be:	4413      	add	r3, r2
 80092c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80092d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	891b      	ldrh	r3, [r3, #8]
 80092dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6959      	ldr	r1, [r3, #20]
 80092ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80092f6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80092fa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80092fe:	6800      	ldr	r0, [r0, #0]
 8009300:	f001 fb84 	bl	800aa0c <USB_WritePMA>
            ep->xfer_buff += len;
 8009304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	695a      	ldr	r2, [r3, #20]
 8009310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009314:	441a      	add	r2, r3
 8009316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6a1a      	ldr	r2, [r3, #32]
 800932e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	429a      	cmp	r2, r3
 800933c:	d90f      	bls.n	800935e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800933e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6a1a      	ldr	r2, [r3, #32]
 800934a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	621a      	str	r2, [r3, #32]
 800935c:	e00e      	b.n	800937c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800935e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800936e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2200      	movs	r2, #0
 800937a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800937c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009380:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	643b      	str	r3, [r7, #64]	; 0x40
 8009388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800938c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	785b      	ldrb	r3, [r3, #1]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d16d      	bne.n	8009474 <USB_EPStartXfer+0x954>
 8009398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800939c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80093a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	461a      	mov	r2, r3
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	4413      	add	r3, r2
 80093ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80093bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	011a      	lsls	r2, r3, #4
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	4413      	add	r3, r2
 80093ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093d2:	637b      	str	r3, [r7, #52]	; 0x34
 80093d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d112      	bne.n	8009402 <USB_EPStartXfer+0x8e2>
 80093dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	801a      	strh	r2, [r3, #0]
 8009400:	e05d      	b.n	80094be <USB_EPStartXfer+0x99e>
 8009402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009406:	2b3e      	cmp	r3, #62	; 0x3e
 8009408:	d817      	bhi.n	800943a <USB_EPStartXfer+0x91a>
 800940a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940e:	085b      	lsrs	r3, r3, #1
 8009410:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	d004      	beq.n	800942a <USB_EPStartXfer+0x90a>
 8009420:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009424:	3301      	adds	r3, #1
 8009426:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800942a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800942e:	b29b      	uxth	r3, r3
 8009430:	029b      	lsls	r3, r3, #10
 8009432:	b29a      	uxth	r2, r3
 8009434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009436:	801a      	strh	r2, [r3, #0]
 8009438:	e041      	b.n	80094be <USB_EPStartXfer+0x99e>
 800943a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009448:	f003 031f 	and.w	r3, r3, #31
 800944c:	2b00      	cmp	r3, #0
 800944e:	d104      	bne.n	800945a <USB_EPStartXfer+0x93a>
 8009450:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009454:	3b01      	subs	r3, #1
 8009456:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800945a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800945e:	b29b      	uxth	r3, r3
 8009460:	029b      	lsls	r3, r3, #10
 8009462:	b29b      	uxth	r3, r3
 8009464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800946c:	b29a      	uxth	r2, r3
 800946e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009470:	801a      	strh	r2, [r3, #0]
 8009472:	e024      	b.n	80094be <USB_EPStartXfer+0x99e>
 8009474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	785b      	ldrb	r3, [r3, #1]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d11c      	bne.n	80094be <USB_EPStartXfer+0x99e>
 8009484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009492:	b29b      	uxth	r3, r3
 8009494:	461a      	mov	r2, r3
 8009496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009498:	4413      	add	r3, r2
 800949a:	643b      	str	r3, [r7, #64]	; 0x40
 800949c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	011a      	lsls	r2, r3, #4
 80094aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ac:	4413      	add	r3, r2
 80094ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80094be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	895b      	ldrh	r3, [r3, #10]
 80094ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6959      	ldr	r1, [r3, #20]
 80094da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094de:	b29b      	uxth	r3, r3
 80094e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80094e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80094e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80094ec:	6800      	ldr	r0, [r0, #0]
 80094ee:	f001 fa8d 	bl	800aa0c <USB_WritePMA>
 80094f2:	f000 bc5a 	b.w	8009daa <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80094f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	b29b      	uxth	r3, r3
 8009524:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800953e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	441a      	add	r2, r3
 800954a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800954e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800955a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955e:	b29b      	uxth	r3, r3
 8009560:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009566:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800956e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800957c:	b29b      	uxth	r3, r3
 800957e:	461a      	mov	r2, r3
 8009580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009582:	4413      	add	r3, r2
 8009584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800958a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	011a      	lsls	r2, r3, #4
 8009594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009596:	4413      	add	r3, r2
 8009598:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800959c:	65bb      	str	r3, [r7, #88]	; 0x58
 800959e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80095a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	891b      	ldrh	r3, [r3, #8]
 80095b4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6959      	ldr	r1, [r3, #20]
 80095c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80095ce:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80095d2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80095d6:	6800      	ldr	r0, [r0, #0]
 80095d8:	f001 fa18 	bl	800aa0c <USB_WritePMA>
 80095dc:	e3e5      	b.n	8009daa <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80095de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009604:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800960c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	441a      	add	r2, r3
 8009622:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800962a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800962e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009636:	b29b      	uxth	r3, r3
 8009638:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800963a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800963e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6a1a      	ldr	r2, [r3, #32]
 8009646:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800964a:	1ad2      	subs	r2, r2, r3
 800964c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800965c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	b29b      	uxth	r3, r3
 8009676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 81bc 	beq.w	80099f8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800968e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	785b      	ldrb	r3, [r3, #1]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d16d      	bne.n	800977a <USB_EPStartXfer+0xc5a>
 800969e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80096aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	461a      	mov	r2, r3
 80096bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096be:	4413      	add	r3, r2
 80096c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80096c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	011a      	lsls	r2, r3, #4
 80096d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096d2:	4413      	add	r3, r2
 80096d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096d8:	677b      	str	r3, [r7, #116]	; 0x74
 80096da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d112      	bne.n	8009708 <USB_EPStartXfer+0xbe8>
 80096e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096f0:	801a      	strh	r2, [r3, #0]
 80096f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009700:	b29a      	uxth	r2, r3
 8009702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009704:	801a      	strh	r2, [r3, #0]
 8009706:	e060      	b.n	80097ca <USB_EPStartXfer+0xcaa>
 8009708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800970c:	2b3e      	cmp	r3, #62	; 0x3e
 800970e:	d817      	bhi.n	8009740 <USB_EPStartXfer+0xc20>
 8009710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009714:	085b      	lsrs	r3, r3, #1
 8009716:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800971a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d004      	beq.n	8009730 <USB_EPStartXfer+0xc10>
 8009726:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800972a:	3301      	adds	r3, #1
 800972c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009730:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009734:	b29b      	uxth	r3, r3
 8009736:	029b      	lsls	r3, r3, #10
 8009738:	b29a      	uxth	r2, r3
 800973a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800973c:	801a      	strh	r2, [r3, #0]
 800973e:	e044      	b.n	80097ca <USB_EPStartXfer+0xcaa>
 8009740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009744:	095b      	lsrs	r3, r3, #5
 8009746:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800974a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800974e:	f003 031f 	and.w	r3, r3, #31
 8009752:	2b00      	cmp	r3, #0
 8009754:	d104      	bne.n	8009760 <USB_EPStartXfer+0xc40>
 8009756:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800975a:	3b01      	subs	r3, #1
 800975c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009760:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009764:	b29b      	uxth	r3, r3
 8009766:	029b      	lsls	r3, r3, #10
 8009768:	b29b      	uxth	r3, r3
 800976a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800976e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009772:	b29a      	uxth	r2, r3
 8009774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009776:	801a      	strh	r2, [r3, #0]
 8009778:	e027      	b.n	80097ca <USB_EPStartXfer+0xcaa>
 800977a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800977e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d11f      	bne.n	80097ca <USB_EPStartXfer+0xcaa>
 800978a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800978e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009798:	b29b      	uxth	r3, r3
 800979a:	461a      	mov	r2, r3
 800979c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097a0:	4413      	add	r3, r2
 80097a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80097a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	011a      	lsls	r2, r3, #4
 80097b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80097b8:	4413      	add	r3, r2
 80097ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80097ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	895b      	ldrh	r3, [r3, #10]
 80097d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6959      	ldr	r1, [r3, #20]
 80097e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80097f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80097f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80097f8:	6800      	ldr	r0, [r0, #0]
 80097fa:	f001 f907 	bl	800aa0c <USB_WritePMA>
          ep->xfer_buff += len;
 80097fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	695a      	ldr	r2, [r3, #20]
 800980a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800980e:	441a      	add	r2, r3
 8009810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800981c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6a1a      	ldr	r2, [r3, #32]
 8009828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800982c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	429a      	cmp	r2, r3
 8009836:	d90f      	bls.n	8009858 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800983c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6a1a      	ldr	r2, [r3, #32]
 8009844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009848:	1ad2      	subs	r2, r2, r3
 800984a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800984e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	621a      	str	r2, [r3, #32]
 8009856:	e00e      	b.n	8009876 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800985c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6a1b      	ldr	r3, [r3, #32]
 8009864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800986c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2200      	movs	r2, #0
 8009874:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8295 	beq.w	8009daa <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	785b      	ldrb	r3, [r3, #1]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d16d      	bne.n	800996c <USB_EPStartXfer+0xe4c>
 8009890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	66bb      	str	r3, [r7, #104]	; 0x68
 800989c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	461a      	mov	r2, r3
 80098ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098b0:	4413      	add	r3, r2
 80098b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80098b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	011a      	lsls	r2, r3, #4
 80098c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098c4:	4413      	add	r3, r2
 80098c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098ca:	667b      	str	r3, [r7, #100]	; 0x64
 80098cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d112      	bne.n	80098fa <USB_EPStartXfer+0xdda>
 80098d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098de:	b29a      	uxth	r2, r3
 80098e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098e2:	801a      	strh	r2, [r3, #0]
 80098e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	e063      	b.n	80099c2 <USB_EPStartXfer+0xea2>
 80098fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009900:	d817      	bhi.n	8009932 <USB_EPStartXfer+0xe12>
 8009902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009906:	085b      	lsrs	r3, r3, #1
 8009908:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800990c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <USB_EPStartXfer+0xe02>
 8009918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800991c:	3301      	adds	r3, #1
 800991e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009926:	b29b      	uxth	r3, r3
 8009928:	029b      	lsls	r3, r3, #10
 800992a:	b29a      	uxth	r2, r3
 800992c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800992e:	801a      	strh	r2, [r3, #0]
 8009930:	e047      	b.n	80099c2 <USB_EPStartXfer+0xea2>
 8009932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800993c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009940:	f003 031f 	and.w	r3, r3, #31
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <USB_EPStartXfer+0xe32>
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800994c:	3b01      	subs	r3, #1
 800994e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009956:	b29b      	uxth	r3, r3
 8009958:	029b      	lsls	r3, r3, #10
 800995a:	b29b      	uxth	r3, r3
 800995c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009964:	b29a      	uxth	r2, r3
 8009966:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009968:	801a      	strh	r2, [r3, #0]
 800996a:	e02a      	b.n	80099c2 <USB_EPStartXfer+0xea2>
 800996c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009970:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	785b      	ldrb	r3, [r3, #1]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d122      	bne.n	80099c2 <USB_EPStartXfer+0xea2>
 800997c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	673b      	str	r3, [r7, #112]	; 0x70
 8009988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800998c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009996:	b29b      	uxth	r3, r3
 8009998:	461a      	mov	r2, r3
 800999a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800999c:	4413      	add	r3, r2
 800999e:	673b      	str	r3, [r7, #112]	; 0x70
 80099a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	011a      	lsls	r2, r3, #4
 80099ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099b0:	4413      	add	r3, r2
 80099b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80099b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099bc:	b29a      	uxth	r2, r3
 80099be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80099c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	891b      	ldrh	r3, [r3, #8]
 80099ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6959      	ldr	r1, [r3, #20]
 80099de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80099e8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80099ec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80099f0:	6800      	ldr	r0, [r0, #0]
 80099f2:	f001 f80b 	bl	800aa0c <USB_WritePMA>
 80099f6:	e1d8      	b.n	8009daa <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80099f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	785b      	ldrb	r3, [r3, #1]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d178      	bne.n	8009afa <USB_EPStartXfer+0xfda>
 8009a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	461a      	mov	r2, r3
 8009a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	011a      	lsls	r2, r3, #4
 8009a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a44:	4413      	add	r3, r2
 8009a46:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d116      	bne.n	8009a84 <USB_EPStartXfer+0xf64>
 8009a56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a68:	801a      	strh	r2, [r3, #0]
 8009a6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a80:	801a      	strh	r2, [r3, #0]
 8009a82:	e06b      	b.n	8009b5c <USB_EPStartXfer+0x103c>
 8009a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a88:	2b3e      	cmp	r3, #62	; 0x3e
 8009a8a:	d818      	bhi.n	8009abe <USB_EPStartXfer+0xf9e>
 8009a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a90:	085b      	lsrs	r3, r3, #1
 8009a92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d004      	beq.n	8009aac <USB_EPStartXfer+0xf8c>
 8009aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009aac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	029b      	lsls	r3, r3, #10
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009aba:	801a      	strh	r2, [r3, #0]
 8009abc:	e04e      	b.n	8009b5c <USB_EPStartXfer+0x103c>
 8009abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009acc:	f003 031f 	and.w	r3, r3, #31
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d104      	bne.n	8009ade <USB_EPStartXfer+0xfbe>
 8009ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009ade:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	029b      	lsls	r3, r3, #10
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009af6:	801a      	strh	r2, [r3, #0]
 8009af8:	e030      	b.n	8009b5c <USB_EPStartXfer+0x103c>
 8009afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d128      	bne.n	8009b5c <USB_EPStartXfer+0x103c>
 8009b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	461a      	mov	r2, r3
 8009b2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b2e:	4413      	add	r3, r2
 8009b30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	011a      	lsls	r2, r3, #4
 8009b42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009b46:	4413      	add	r3, r2
 8009b48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	891b      	ldrh	r3, [r3, #8]
 8009b68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6959      	ldr	r1, [r3, #20]
 8009b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b82:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009b86:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009b8a:	6800      	ldr	r0, [r0, #0]
 8009b8c:	f000 ff3e 	bl	800aa0c <USB_WritePMA>
          ep->xfer_buff += len;
 8009b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	695a      	ldr	r2, [r3, #20]
 8009b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba0:	441a      	add	r2, r3
 8009ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6a1a      	ldr	r2, [r3, #32]
 8009bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d90f      	bls.n	8009bea <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6a1a      	ldr	r2, [r3, #32]
 8009bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bda:	1ad2      	subs	r2, r2, r3
 8009bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	621a      	str	r2, [r3, #32]
 8009be8:	e00e      	b.n	8009c08 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2200      	movs	r2, #0
 8009c06:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 80cc 	beq.w	8009daa <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d178      	bne.n	8009d22 <USB_EPStartXfer+0x1202>
 8009c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	461a      	mov	r2, r3
 8009c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c54:	4413      	add	r3, r2
 8009c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	011a      	lsls	r2, r3, #4
 8009c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d116      	bne.n	8009cac <USB_EPStartXfer+0x118c>
 8009c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c82:	881b      	ldrh	r3, [r3, #0]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c90:	801a      	strh	r2, [r3, #0]
 8009c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ca8:	801a      	strh	r2, [r3, #0]
 8009caa:	e064      	b.n	8009d76 <USB_EPStartXfer+0x1256>
 8009cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb0:	2b3e      	cmp	r3, #62	; 0x3e
 8009cb2:	d818      	bhi.n	8009ce6 <USB_EPStartXfer+0x11c6>
 8009cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cb8:	085b      	lsrs	r3, r3, #1
 8009cba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d004      	beq.n	8009cd4 <USB_EPStartXfer+0x11b4>
 8009cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cce:	3301      	adds	r3, #1
 8009cd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	029b      	lsls	r3, r3, #10
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ce2:	801a      	strh	r2, [r3, #0]
 8009ce4:	e047      	b.n	8009d76 <USB_EPStartXfer+0x1256>
 8009ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cea:	095b      	lsrs	r3, r3, #5
 8009cec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf4:	f003 031f 	and.w	r3, r3, #31
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d104      	bne.n	8009d06 <USB_EPStartXfer+0x11e6>
 8009cfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d00:	3b01      	subs	r3, #1
 8009d02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	029b      	lsls	r3, r3, #10
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	e029      	b.n	8009d76 <USB_EPStartXfer+0x1256>
 8009d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d121      	bne.n	8009d76 <USB_EPStartXfer+0x1256>
 8009d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	461a      	mov	r2, r3
 8009d44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d48:	4413      	add	r3, r2
 8009d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	011a      	lsls	r2, r3, #4
 8009d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d60:	4413      	add	r3, r2
 8009d62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	895b      	ldrh	r3, [r3, #10]
 8009d82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6959      	ldr	r1, [r3, #20]
 8009d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009d9c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009da0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009da4:	6800      	ldr	r0, [r0, #0]
 8009da6:	f000 fe31 	bl	800aa0c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4413      	add	r3, r2
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dcc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dd8:	8013      	strh	r3, [r2, #0]
 8009dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dde:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009de2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009de6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009dea:	8812      	ldrh	r2, [r2, #0]
 8009dec:	f082 0210 	eor.w	r2, r2, #16
 8009df0:	801a      	strh	r2, [r3, #0]
 8009df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009dfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dfe:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009e02:	8812      	ldrh	r2, [r2, #0]
 8009e04:	f082 0220 	eor.w	r2, r2, #32
 8009e08:	801a      	strh	r2, [r3, #0]
 8009e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	441a      	add	r2, r3
 8009e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e28:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	8013      	strh	r3, [r2, #0]
 8009e42:	f000 bc9f 	b.w	800a784 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	7b1b      	ldrb	r3, [r3, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f040 80ae 	bne.w	8009fb4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	699a      	ldr	r2, [r3, #24]
 8009e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d917      	bls.n	8009ea4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	699a      	ldr	r2, [r3, #24]
 8009e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e94:	1ad2      	subs	r2, r2, r3
 8009e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	619a      	str	r2, [r3, #24]
 8009ea2:	e00e      	b.n	8009ec2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	011a      	lsls	r2, r3, #4
 8009efa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009efe:	4413      	add	r3, r2
 8009f00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d116      	bne.n	8009f3e <USB_EPStartXfer+0x141e>
 8009f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f22:	801a      	strh	r2, [r3, #0]
 8009f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f3a:	801a      	strh	r2, [r3, #0]
 8009f3c:	e3e8      	b.n	800a710 <USB_EPStartXfer+0x1bf0>
 8009f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f42:	2b3e      	cmp	r3, #62	; 0x3e
 8009f44:	d818      	bhi.n	8009f78 <USB_EPStartXfer+0x1458>
 8009f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f4a:	085b      	lsrs	r3, r3, #1
 8009f4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d004      	beq.n	8009f66 <USB_EPStartXfer+0x1446>
 8009f5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f60:	3301      	adds	r3, #1
 8009f62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009f66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	029b      	lsls	r3, r3, #10
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f74:	801a      	strh	r2, [r3, #0]
 8009f76:	e3cb      	b.n	800a710 <USB_EPStartXfer+0x1bf0>
 8009f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f7c:	095b      	lsrs	r3, r3, #5
 8009f7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f86:	f003 031f 	and.w	r3, r3, #31
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d104      	bne.n	8009f98 <USB_EPStartXfer+0x1478>
 8009f8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f92:	3b01      	subs	r3, #1
 8009f94:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009f98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	029b      	lsls	r3, r3, #10
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fb0:	801a      	strh	r2, [r3, #0]
 8009fb2:	e3ad      	b.n	800a710 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	78db      	ldrb	r3, [r3, #3]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	f040 8200 	bne.w	800a3c6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	785b      	ldrb	r3, [r3, #1]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f040 8091 	bne.w	800a0fa <USB_EPStartXfer+0x15da>
 8009fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	011a      	lsls	r2, r3, #4
 800a010:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a014:	4413      	add	r3, r2
 800a016:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a01a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a01e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d116      	bne.n	800a05c <USB_EPStartXfer+0x153c>
 800a02e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	b29b      	uxth	r3, r3
 800a036:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a040:	801a      	strh	r2, [r3, #0]
 800a042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a04e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a052:	b29a      	uxth	r2, r3
 800a054:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a058:	801a      	strh	r2, [r3, #0]
 800a05a:	e083      	b.n	800a164 <USB_EPStartXfer+0x1644>
 800a05c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a060:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	2b3e      	cmp	r3, #62	; 0x3e
 800a06a:	d820      	bhi.n	800a0ae <USB_EPStartXfer+0x158e>
 800a06c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	085b      	lsrs	r3, r3, #1
 800a07a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a07e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d004      	beq.n	800a09c <USB_EPStartXfer+0x157c>
 800a092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a096:	3301      	adds	r3, #1
 800a098:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	029b      	lsls	r3, r3, #10
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	e05a      	b.n	800a164 <USB_EPStartXfer+0x1644>
 800a0ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	095b      	lsrs	r3, r3, #5
 800a0bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a0c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	f003 031f 	and.w	r3, r3, #31
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d104      	bne.n	800a0de <USB_EPStartXfer+0x15be>
 800a0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	029b      	lsls	r3, r3, #10
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a0f6:	801a      	strh	r2, [r3, #0]
 800a0f8:	e034      	b.n	800a164 <USB_EPStartXfer+0x1644>
 800a0fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	785b      	ldrb	r3, [r3, #1]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d12c      	bne.n	800a164 <USB_EPStartXfer+0x1644>
 800a10a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a10e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a11c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a126:	b29b      	uxth	r3, r3
 800a128:	461a      	mov	r2, r3
 800a12a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a12e:	4413      	add	r3, r2
 800a130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	011a      	lsls	r2, r3, #4
 800a142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a146:	4413      	add	r3, r2
 800a148:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a14c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a162:	801a      	strh	r2, [r3, #0]
 800a164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a168:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	785b      	ldrb	r3, [r3, #1]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f040 8091 	bne.w	800a2a6 <USB_EPStartXfer+0x1786>
 800a184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a188:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a196:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a1ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	011a      	lsls	r2, r3, #4
 800a1bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a1c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a1ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d116      	bne.n	800a208 <USB_EPStartXfer+0x16e8>
 800a1da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1ec:	801a      	strh	r2, [r3, #0]
 800a1ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a204:	801a      	strh	r2, [r3, #0]
 800a206:	e07c      	b.n	800a302 <USB_EPStartXfer+0x17e2>
 800a208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a20c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	2b3e      	cmp	r3, #62	; 0x3e
 800a216:	d820      	bhi.n	800a25a <USB_EPStartXfer+0x173a>
 800a218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a21c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	691b      	ldr	r3, [r3, #16]
 800a224:	085b      	lsrs	r3, r3, #1
 800a226:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a22a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a22e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d004      	beq.n	800a248 <USB_EPStartXfer+0x1728>
 800a23e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a242:	3301      	adds	r3, #1
 800a244:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a248:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	029b      	lsls	r3, r3, #10
 800a250:	b29a      	uxth	r2, r3
 800a252:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a256:	801a      	strh	r2, [r3, #0]
 800a258:	e053      	b.n	800a302 <USB_EPStartXfer+0x17e2>
 800a25a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a25e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	095b      	lsrs	r3, r3, #5
 800a268:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a26c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	f003 031f 	and.w	r3, r3, #31
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d104      	bne.n	800a28a <USB_EPStartXfer+0x176a>
 800a280:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a284:	3b01      	subs	r3, #1
 800a286:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a28a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a28e:	b29b      	uxth	r3, r3
 800a290:	029b      	lsls	r3, r3, #10
 800a292:	b29b      	uxth	r3, r3
 800a294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a2a2:	801a      	strh	r2, [r3, #0]
 800a2a4:	e02d      	b.n	800a302 <USB_EPStartXfer+0x17e2>
 800a2a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d125      	bne.n	800a302 <USB_EPStartXfer+0x17e2>
 800a2b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	011a      	lsls	r2, r3, #4
 800a2e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a2ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a2ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a300:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 81fe 	beq.w	800a710 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a314:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a318:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a334:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d005      	beq.n	800a34c <USB_EPStartXfer+0x182c>
 800a340:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10d      	bne.n	800a368 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a34c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a354:	2b00      	cmp	r3, #0
 800a356:	f040 81db 	bne.w	800a710 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a35a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	f040 81d4 	bne.w	800a710 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4413      	add	r3, r2
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	b29b      	uxth	r3, r3
 800a386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a38e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	441a      	add	r2, r3
 800a3ac:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a3b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	8013      	strh	r3, [r2, #0]
 800a3c4:	e1a4      	b.n	800a710 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a3c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	78db      	ldrb	r3, [r3, #3]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	f040 819a 	bne.w	800a70c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a3d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	699a      	ldr	r2, [r3, #24]
 800a3e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d917      	bls.n	800a424 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a3f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	699a      	ldr	r2, [r3, #24]
 800a410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a414:	1ad2      	subs	r2, r2, r3
 800a416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a41a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	619a      	str	r2, [r3, #24]
 800a422:	e00e      	b.n	800a442 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2200      	movs	r2, #0
 800a440:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	785b      	ldrb	r3, [r3, #1]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d178      	bne.n	800a544 <USB_EPStartXfer+0x1a24>
 800a452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a456:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a46e:	b29b      	uxth	r3, r3
 800a470:	461a      	mov	r2, r3
 800a472:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a476:	4413      	add	r3, r2
 800a478:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a47c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	011a      	lsls	r2, r3, #4
 800a48a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a48e:	4413      	add	r3, r2
 800a490:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a494:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d116      	bne.n	800a4ce <USB_EPStartXfer+0x19ae>
 800a4a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a4b2:	801a      	strh	r2, [r3, #0]
 800a4b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a4ca:	801a      	strh	r2, [r3, #0]
 800a4cc:	e06b      	b.n	800a5a6 <USB_EPStartXfer+0x1a86>
 800a4ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4d2:	2b3e      	cmp	r3, #62	; 0x3e
 800a4d4:	d818      	bhi.n	800a508 <USB_EPStartXfer+0x19e8>
 800a4d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4da:	085b      	lsrs	r3, r3, #1
 800a4dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a4e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d004      	beq.n	800a4f6 <USB_EPStartXfer+0x19d6>
 800a4ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a4f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	029b      	lsls	r3, r3, #10
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a504:	801a      	strh	r2, [r3, #0]
 800a506:	e04e      	b.n	800a5a6 <USB_EPStartXfer+0x1a86>
 800a508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a50c:	095b      	lsrs	r3, r3, #5
 800a50e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a516:	f003 031f 	and.w	r3, r3, #31
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d104      	bne.n	800a528 <USB_EPStartXfer+0x1a08>
 800a51e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a522:	3b01      	subs	r3, #1
 800a524:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	029b      	lsls	r3, r3, #10
 800a530:	b29b      	uxth	r3, r3
 800a532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a540:	801a      	strh	r2, [r3, #0]
 800a542:	e030      	b.n	800a5a6 <USB_EPStartXfer+0x1a86>
 800a544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	785b      	ldrb	r3, [r3, #1]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d128      	bne.n	800a5a6 <USB_EPStartXfer+0x1a86>
 800a554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a558:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a566:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a570:	b29b      	uxth	r3, r3
 800a572:	461a      	mov	r2, r3
 800a574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a578:	4413      	add	r3, r2
 800a57a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a57e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	011a      	lsls	r2, r3, #4
 800a58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a590:	4413      	add	r3, r2
 800a592:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a596:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a59a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a5a4:	801a      	strh	r2, [r3, #0]
 800a5a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a5b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	785b      	ldrb	r3, [r3, #1]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d178      	bne.n	800a6b6 <USB_EPStartXfer+0x1b96>
 800a5c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a5d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a5ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	011a      	lsls	r2, r3, #4
 800a5fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a600:	4413      	add	r3, r2
 800a602:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a60a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d116      	bne.n	800a640 <USB_EPStartXfer+0x1b20>
 800a612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a616:	881b      	ldrh	r3, [r3, #0]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a61e:	b29a      	uxth	r2, r3
 800a620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a624:	801a      	strh	r2, [r3, #0]
 800a626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a636:	b29a      	uxth	r2, r3
 800a638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a63c:	801a      	strh	r2, [r3, #0]
 800a63e:	e067      	b.n	800a710 <USB_EPStartXfer+0x1bf0>
 800a640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a644:	2b3e      	cmp	r3, #62	; 0x3e
 800a646:	d818      	bhi.n	800a67a <USB_EPStartXfer+0x1b5a>
 800a648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a64c:	085b      	lsrs	r3, r3, #1
 800a64e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d004      	beq.n	800a668 <USB_EPStartXfer+0x1b48>
 800a65e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a662:	3301      	adds	r3, #1
 800a664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a668:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	029b      	lsls	r3, r3, #10
 800a670:	b29a      	uxth	r2, r3
 800a672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a676:	801a      	strh	r2, [r3, #0]
 800a678:	e04a      	b.n	800a710 <USB_EPStartXfer+0x1bf0>
 800a67a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a67e:	095b      	lsrs	r3, r3, #5
 800a680:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a688:	f003 031f 	and.w	r3, r3, #31
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d104      	bne.n	800a69a <USB_EPStartXfer+0x1b7a>
 800a690:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a694:	3b01      	subs	r3, #1
 800a696:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a69a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	029b      	lsls	r3, r3, #10
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6b2:	801a      	strh	r2, [r3, #0]
 800a6b4:	e02c      	b.n	800a710 <USB_EPStartXfer+0x1bf0>
 800a6b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	785b      	ldrb	r3, [r3, #1]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d124      	bne.n	800a710 <USB_EPStartXfer+0x1bf0>
 800a6c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6dc:	4413      	add	r3, r2
 800a6de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a6e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	011a      	lsls	r2, r3, #4
 800a6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a6fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a6fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a702:	b29a      	uxth	r2, r3
 800a704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a708:	801a      	strh	r2, [r3, #0]
 800a70a:	e001      	b.n	800a710 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e03a      	b.n	800a786 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a71e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a736:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a73a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a73e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a742:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a746:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a74a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a74e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a756:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	441a      	add	r2, r3
 800a76c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a780:	b29b      	uxth	r3, r3
 800a782:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	785b      	ldrb	r3, [r3, #1]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d020      	beq.n	800a7e4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7b8:	81bb      	strh	r3, [r7, #12]
 800a7ba:	89bb      	ldrh	r3, [r7, #12]
 800a7bc:	f083 0310 	eor.w	r3, r3, #16
 800a7c0:	81bb      	strh	r3, [r7, #12]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	441a      	add	r2, r3
 800a7cc:	89bb      	ldrh	r3, [r7, #12]
 800a7ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	8013      	strh	r3, [r2, #0]
 800a7e2:	e01f      	b.n	800a824 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4413      	add	r3, r2
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fa:	81fb      	strh	r3, [r7, #14]
 800a7fc:	89fb      	ldrh	r3, [r7, #14]
 800a7fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a802:	81fb      	strh	r3, [r7, #14]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	441a      	add	r2, r3
 800a80e:	89fb      	ldrh	r3, [r7, #14]
 800a810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a820:	b29b      	uxth	r3, r3
 800a822:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bc80      	pop	{r7}
 800a82e:	4770      	bx	lr

0800a830 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a830:	b480      	push	{r7}
 800a832:	b087      	sub	sp, #28
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	7b1b      	ldrb	r3, [r3, #12]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f040 809d 	bne.w	800a97e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d04c      	beq.n	800a8e6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	823b      	strh	r3, [r7, #16]
 800a85a:	8a3b      	ldrh	r3, [r7, #16]
 800a85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a860:	2b00      	cmp	r3, #0
 800a862:	d01b      	beq.n	800a89c <USB_EPClearStall+0x6c>
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	881b      	ldrh	r3, [r3, #0]
 800a870:	b29b      	uxth	r3, r3
 800a872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a87a:	81fb      	strh	r3, [r7, #14]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	441a      	add	r2, r3
 800a886:	89fb      	ldrh	r3, [r7, #14]
 800a888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a88c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a894:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a898:	b29b      	uxth	r3, r3
 800a89a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	78db      	ldrb	r3, [r3, #3]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d06c      	beq.n	800a97e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8ba:	81bb      	strh	r3, [r7, #12]
 800a8bc:	89bb      	ldrh	r3, [r7, #12]
 800a8be:	f083 0320 	eor.w	r3, r3, #32
 800a8c2:	81bb      	strh	r3, [r7, #12]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	441a      	add	r2, r3
 800a8ce:	89bb      	ldrh	r3, [r7, #12]
 800a8d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	8013      	strh	r3, [r2, #0]
 800a8e4:	e04b      	b.n	800a97e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	82fb      	strh	r3, [r7, #22]
 800a8f4:	8afb      	ldrh	r3, [r7, #22]
 800a8f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d01b      	beq.n	800a936 <USB_EPClearStall+0x106>
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	4413      	add	r3, r2
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a914:	82bb      	strh	r3, [r7, #20]
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	441a      	add	r2, r3
 800a920:	8abb      	ldrh	r3, [r7, #20]
 800a922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a92a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a92e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a932:	b29b      	uxth	r3, r3
 800a934:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	b29b      	uxth	r3, r3
 800a944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a94c:	827b      	strh	r3, [r7, #18]
 800a94e:	8a7b      	ldrh	r3, [r7, #18]
 800a950:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a954:	827b      	strh	r3, [r7, #18]
 800a956:	8a7b      	ldrh	r3, [r7, #18]
 800a958:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a95c:	827b      	strh	r3, [r7, #18]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	441a      	add	r2, r3
 800a968:	8a7b      	ldrh	r3, [r7, #18]
 800a96a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a96e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	371c      	adds	r7, #28
 800a984:	46bd      	mov	sp, r7
 800a986:	bc80      	pop	{r7}
 800a988:	4770      	bx	lr

0800a98a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	460b      	mov	r3, r1
 800a994:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a996:	78fb      	ldrb	r3, [r7, #3]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d103      	bne.n	800a9a4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2280      	movs	r2, #128	; 0x80
 800a9a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bc80      	pop	{r7}
 800a9ae:	4770      	bx	lr

0800a9b0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bc80      	pop	{r7}
 800a9c2:	4770      	bx	lr

0800a9c4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bc80      	pop	{r7}
 800a9d6:	4770      	bx	lr

0800a9d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bc80      	pop	{r7}
 800a9f4:	4770      	bx	lr

0800a9f6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bc80      	pop	{r7}
 800aa0a:	4770      	bx	lr

0800aa0c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b08d      	sub	sp, #52	; 0x34
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	4611      	mov	r1, r2
 800aa18:	461a      	mov	r2, r3
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	80fb      	strh	r3, [r7, #6]
 800aa1e:	4613      	mov	r3, r2
 800aa20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aa22:	88bb      	ldrh	r3, [r7, #4]
 800aa24:	3301      	adds	r3, #1
 800aa26:	085b      	lsrs	r3, r3, #1
 800aa28:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa32:	88fb      	ldrh	r3, [r7, #6]
 800aa34:	005a      	lsls	r2, r3, #1
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa3e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa44:	e01e      	b.n	800aa84 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	3301      	adds	r3, #1
 800aa50:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	021b      	lsls	r3, r3, #8
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	3302      	adds	r3, #2
 800aa70:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa74:	3302      	adds	r3, #2
 800aa76:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa80:	3b01      	subs	r3, #1
 800aa82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1dd      	bne.n	800aa46 <USB_WritePMA+0x3a>
  }
}
 800aa8a:	bf00      	nop
 800aa8c:	bf00      	nop
 800aa8e:	3734      	adds	r7, #52	; 0x34
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bc80      	pop	{r7}
 800aa94:	4770      	bx	lr

0800aa96 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b08b      	sub	sp, #44	; 0x2c
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	80fb      	strh	r3, [r7, #6]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aaac:	88bb      	ldrh	r3, [r7, #4]
 800aaae:	085b      	lsrs	r3, r3, #1
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aabc:	88fb      	ldrh	r3, [r7, #6]
 800aabe:	005a      	lsls	r2, r3, #1
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	4413      	add	r3, r2
 800aac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aac8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	627b      	str	r3, [r7, #36]	; 0x24
 800aace:	e01b      	b.n	800ab08 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	881b      	ldrh	r3, [r3, #0]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	3302      	adds	r3, #2
 800aadc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	3301      	adds	r3, #1
 800aaea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	0a1b      	lsrs	r3, r3, #8
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	3302      	adds	r3, #2
 800ab00:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	3b01      	subs	r3, #1
 800ab06:	627b      	str	r3, [r7, #36]	; 0x24
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1e0      	bne.n	800aad0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ab0e:	88bb      	ldrh	r3, [r7, #4]
 800ab10:	f003 0301 	and.w	r3, r3, #1
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d007      	beq.n	800ab2a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	701a      	strb	r2, [r3, #0]
  }
}
 800ab2a:	bf00      	nop
 800ab2c:	372c      	adds	r7, #44	; 0x2c
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bc80      	pop	{r7}
 800ab32:	4770      	bx	lr

0800ab34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	7c1b      	ldrb	r3, [r3, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d115      	bne.n	800ab78 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab50:	2202      	movs	r2, #2
 800ab52:	2181      	movs	r1, #129	; 0x81
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f001 feac 	bl	800c8b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab60:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab64:	2202      	movs	r2, #2
 800ab66:	2101      	movs	r1, #1
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f001 fea2 	bl	800c8b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ab76:	e012      	b.n	800ab9e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab78:	2340      	movs	r3, #64	; 0x40
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	2181      	movs	r1, #129	; 0x81
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f001 fe97 	bl	800c8b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab8a:	2340      	movs	r3, #64	; 0x40
 800ab8c:	2202      	movs	r2, #2
 800ab8e:	2101      	movs	r1, #1
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 fe8e 	bl	800c8b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab9e:	2308      	movs	r3, #8
 800aba0:	2203      	movs	r2, #3
 800aba2:	2182      	movs	r1, #130	; 0x82
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 fe84 	bl	800c8b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800abb4:	f001 ffa4 	bl	800cb00 <USBD_static_malloc>
 800abb8:	4602      	mov	r2, r0
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d102      	bne.n	800abd0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800abca:	2301      	movs	r3, #1
 800abcc:	73fb      	strb	r3, [r7, #15]
 800abce:	e026      	b.n	800ac1e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	2200      	movs	r2, #0
 800abee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	7c1b      	ldrb	r3, [r3, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d109      	bne.n	800ac0e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac04:	2101      	movs	r1, #1
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f001 ff44 	bl	800ca94 <USBD_LL_PrepareReceive>
 800ac0c:	e007      	b.n	800ac1e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ac14:	2340      	movs	r3, #64	; 0x40
 800ac16:	2101      	movs	r1, #1
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f001 ff3b 	bl	800ca94 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ac34:	2300      	movs	r3, #0
 800ac36:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ac38:	2181      	movs	r1, #129	; 0x81
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f001 fe5f 	bl	800c8fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ac46:	2101      	movs	r1, #1
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f001 fe58 	bl	800c8fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ac56:	2182      	movs	r1, #130	; 0x82
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f001 fe50 	bl	800c8fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00e      	beq.n	800ac8c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f001 ff4a 	bl	800cb18 <USBD_static_free>
    pdev->pClassData = NULL;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b086      	sub	sp, #24
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800acac:	2300      	movs	r3, #0
 800acae:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d039      	beq.n	800ad34 <USBD_CDC_Setup+0x9e>
 800acc0:	2b20      	cmp	r3, #32
 800acc2:	d17f      	bne.n	800adc4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	88db      	ldrh	r3, [r3, #6]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d029      	beq.n	800ad20 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	b25b      	sxtb	r3, r3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	da11      	bge.n	800acfa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800ace2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	88d2      	ldrh	r2, [r2, #6]
 800ace8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800acea:	6939      	ldr	r1, [r7, #16]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	88db      	ldrh	r3, [r3, #6]
 800acf0:	461a      	mov	r2, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f001 fa09 	bl	800c10a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800acf8:	e06b      	b.n	800add2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	785a      	ldrb	r2, [r3, #1]
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	88db      	ldrh	r3, [r3, #6]
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ad10:	6939      	ldr	r1, [r7, #16]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	88db      	ldrh	r3, [r3, #6]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f001 fa24 	bl	800c166 <USBD_CtlPrepareRx>
      break;
 800ad1e:	e058      	b.n	800add2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	7850      	ldrb	r0, [r2, #1]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	4798      	blx	r3
      break;
 800ad32:	e04e      	b.n	800add2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	785b      	ldrb	r3, [r3, #1]
 800ad38:	2b0b      	cmp	r3, #11
 800ad3a:	d02e      	beq.n	800ad9a <USBD_CDC_Setup+0x104>
 800ad3c:	2b0b      	cmp	r3, #11
 800ad3e:	dc38      	bgt.n	800adb2 <USBD_CDC_Setup+0x11c>
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <USBD_CDC_Setup+0xb4>
 800ad44:	2b0a      	cmp	r3, #10
 800ad46:	d014      	beq.n	800ad72 <USBD_CDC_Setup+0xdc>
 800ad48:	e033      	b.n	800adb2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad50:	2b03      	cmp	r3, #3
 800ad52:	d107      	bne.n	800ad64 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ad54:	f107 030c 	add.w	r3, r7, #12
 800ad58:	2202      	movs	r2, #2
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f001 f9d4 	bl	800c10a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad62:	e02e      	b.n	800adc2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f001 f965 	bl	800c036 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad6c:	2302      	movs	r3, #2
 800ad6e:	75fb      	strb	r3, [r7, #23]
          break;
 800ad70:	e027      	b.n	800adc2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	d107      	bne.n	800ad8c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ad7c:	f107 030f 	add.w	r3, r7, #15
 800ad80:	2201      	movs	r2, #1
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f001 f9c0 	bl	800c10a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad8a:	e01a      	b.n	800adc2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f001 f951 	bl	800c036 <USBD_CtlError>
            ret = USBD_FAIL;
 800ad94:	2302      	movs	r3, #2
 800ad96:	75fb      	strb	r3, [r7, #23]
          break;
 800ad98:	e013      	b.n	800adc2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	d00d      	beq.n	800adc0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f001 f945 	bl	800c036 <USBD_CtlError>
            ret = USBD_FAIL;
 800adac:	2302      	movs	r3, #2
 800adae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800adb0:	e006      	b.n	800adc0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 f93e 	bl	800c036 <USBD_CtlError>
          ret = USBD_FAIL;
 800adba:	2302      	movs	r3, #2
 800adbc:	75fb      	strb	r3, [r7, #23]
          break;
 800adbe:	e000      	b.n	800adc2 <USBD_CDC_Setup+0x12c>
          break;
 800adc0:	bf00      	nop
      }
      break;
 800adc2:	e006      	b.n	800add2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800adc4:	6839      	ldr	r1, [r7, #0]
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f001 f935 	bl	800c036 <USBD_CtlError>
      ret = USBD_FAIL;
 800adcc:	2302      	movs	r3, #2
 800adce:	75fb      	strb	r3, [r7, #23]
      break;
 800add0:	bf00      	nop
  }

  return ret;
 800add2:	7dfb      	ldrb	r3, [r7, #23]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	460b      	mov	r3, r1
 800ade6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adee:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adf6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d03a      	beq.n	800ae78 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ae02:	78fa      	ldrb	r2, [r7, #3]
 800ae04:	6879      	ldr	r1, [r7, #4]
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	440b      	add	r3, r1
 800ae10:	331c      	adds	r3, #28
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d029      	beq.n	800ae6c <USBD_CDC_DataIn+0x90>
 800ae18:	78fa      	ldrb	r2, [r7, #3]
 800ae1a:	6879      	ldr	r1, [r7, #4]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	440b      	add	r3, r1
 800ae26:	331c      	adds	r3, #28
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	78f9      	ldrb	r1, [r7, #3]
 800ae2c:	68b8      	ldr	r0, [r7, #8]
 800ae2e:	460b      	mov	r3, r1
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	440b      	add	r3, r1
 800ae34:	00db      	lsls	r3, r3, #3
 800ae36:	4403      	add	r3, r0
 800ae38:	3338      	adds	r3, #56	; 0x38
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae40:	fb01 f303 	mul.w	r3, r1, r3
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d110      	bne.n	800ae6c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ae4a:	78fa      	ldrb	r2, [r7, #3]
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	440b      	add	r3, r1
 800ae58:	331c      	adds	r3, #28
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae5e:	78f9      	ldrb	r1, [r7, #3]
 800ae60:	2300      	movs	r3, #0
 800ae62:	2200      	movs	r2, #0
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 fdf2 	bl	800ca4e <USBD_LL_Transmit>
 800ae6a:	e003      	b.n	800ae74 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	e000      	b.n	800ae7a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ae78:	2302      	movs	r3, #2
  }
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae94:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae96:	78fb      	ldrb	r3, [r7, #3]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f001 fe1d 	bl	800cada <USBD_LL_GetRxDataSize>
 800aea0:	4602      	mov	r2, r0
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00d      	beq.n	800aece <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800aec6:	4611      	mov	r1, r2
 800aec8:	4798      	blx	r3

    return USBD_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	e000      	b.n	800aed0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800aece:	2302      	movs	r3, #2
  }
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d015      	beq.n	800af1e <USBD_CDC_EP0_RxReady+0x46>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aef8:	2bff      	cmp	r3, #255	; 0xff
 800aefa:	d010      	beq.n	800af1e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800af0a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800af12:	b292      	uxth	r2, r2
 800af14:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	22ff      	movs	r2, #255	; 0xff
 800af1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2243      	movs	r2, #67	; 0x43
 800af34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800af36:	4b03      	ldr	r3, [pc, #12]	; (800af44 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bc80      	pop	{r7}
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	200002c4 	.word	0x200002c4

0800af48 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2243      	movs	r2, #67	; 0x43
 800af54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800af56:	4b03      	ldr	r3, [pc, #12]	; (800af64 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800af58:	4618      	mov	r0, r3
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bc80      	pop	{r7}
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20000280 	.word	0x20000280

0800af68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2243      	movs	r2, #67	; 0x43
 800af74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800af76:	4b03      	ldr	r3, [pc, #12]	; (800af84 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20000308 	.word	0x20000308

0800af88 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	220a      	movs	r2, #10
 800af94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800af96:	4b03      	ldr	r3, [pc, #12]	; (800afa4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800af98:	4618      	mov	r0, r3
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	2000023c 	.word	0x2000023c

0800afa8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800afb2:	2302      	movs	r3, #2
 800afb4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d005      	beq.n	800afc8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	bc80      	pop	{r7}
 800afd2:	4770      	bx	lr

0800afd4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b087      	sub	sp, #28
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	4613      	mov	r3, r2
 800afe0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800aff2:	88fa      	ldrh	r2, [r7, #6]
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	371c      	adds	r7, #28
 800b000:	46bd      	mov	sp, r7
 800b002:	bc80      	pop	{r7}
 800b004:	4770      	bx	lr

0800b006 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b006:	b480      	push	{r7}
 800b008:	b085      	sub	sp, #20
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
 800b00e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b016:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	bc80      	pop	{r7}
 800b02a:	4770      	bx	lr

0800b02c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b042:	2b00      	cmp	r3, #0
 800b044:	d01c      	beq.n	800b080 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d115      	bne.n	800b07c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2201      	movs	r2, #1
 800b054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b06e:	b29b      	uxth	r3, r3
 800b070:	2181      	movs	r1, #129	; 0x81
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f001 fceb 	bl	800ca4e <USBD_LL_Transmit>

      return USBD_OK;
 800b078:	2300      	movs	r3, #0
 800b07a:	e002      	b.n	800b082 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e000      	b.n	800b082 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b080:	2302      	movs	r3, #2
  }
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b098:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d017      	beq.n	800b0d4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	7c1b      	ldrb	r3, [r3, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d109      	bne.n	800b0c0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b0b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0b6:	2101      	movs	r1, #1
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 fceb 	bl	800ca94 <USBD_LL_PrepareReceive>
 800b0be:	e007      	b.n	800b0d0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b0c6:	2340      	movs	r3, #64	; 0x40
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f001 fce2 	bl	800ca94 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	e000      	b.n	800b0d6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b0d4:	2302      	movs	r3, #2
  }
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b084      	sub	sp, #16
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	60f8      	str	r0, [r7, #12]
 800b0e6:	60b9      	str	r1, [r7, #8]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	e01a      	b.n	800b12c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d003      	beq.n	800b108 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	79fa      	ldrb	r2, [r7, #7]
 800b122:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f001 fb4f 	bl	800c7c8 <USBD_LL_Init>

  return USBD_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d006      	beq.n	800b156 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	73fb      	strb	r3, [r7, #15]
 800b154:	e001      	b.n	800b15a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b156:	2302      	movs	r3, #2
 800b158:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	bc80      	pop	{r7}
 800b164:	4770      	bx	lr

0800b166 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b082      	sub	sp, #8
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f001 fb84 	bl	800c87c <USBD_LL_Start>

  return USBD_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3708      	adds	r7, #8
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b17e:	b480      	push	{r7}
 800b180:	b083      	sub	sp, #12
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bc80      	pop	{r7}
 800b190:	4770      	bx	lr

0800b192 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	460b      	mov	r3, r1
 800b19c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b19e:	2302      	movs	r3, #2
 800b1a0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00c      	beq.n	800b1c6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	78fa      	ldrb	r2, [r7, #3]
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	4798      	blx	r3
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	78fa      	ldrb	r2, [r7, #3]
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	4798      	blx	r3

  return USBD_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b082      	sub	sp, #8
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b206:	6839      	ldr	r1, [r7, #0]
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 fed8 	bl	800bfbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b21c:	461a      	mov	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b22a:	f003 031f 	and.w	r3, r3, #31
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d016      	beq.n	800b260 <USBD_LL_SetupStage+0x6a>
 800b232:	2b02      	cmp	r3, #2
 800b234:	d81c      	bhi.n	800b270 <USBD_LL_SetupStage+0x7a>
 800b236:	2b00      	cmp	r3, #0
 800b238:	d002      	beq.n	800b240 <USBD_LL_SetupStage+0x4a>
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d008      	beq.n	800b250 <USBD_LL_SetupStage+0x5a>
 800b23e:	e017      	b.n	800b270 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f9cb 	bl	800b5e4 <USBD_StdDevReq>
      break;
 800b24e:	e01a      	b.n	800b286 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fa2d 	bl	800b6b8 <USBD_StdItfReq>
      break;
 800b25e:	e012      	b.n	800b286 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b266:	4619      	mov	r1, r3
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fa6d 	bl	800b748 <USBD_StdEPReq>
      break;
 800b26e:	e00a      	b.n	800b286 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b276:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f001 fb5c 	bl	800c93c <USBD_LL_StallEP>
      break;
 800b284:	bf00      	nop
  }

  return USBD_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	460b      	mov	r3, r1
 800b29a:	607a      	str	r2, [r7, #4]
 800b29c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b29e:	7afb      	ldrb	r3, [r7, #11]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d14b      	bne.n	800b33c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b2aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	d134      	bne.n	800b320 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	68da      	ldr	r2, [r3, #12]
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d919      	bls.n	800b2f6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	68da      	ldr	r2, [r3, #12]
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	68da      	ldr	r2, [r3, #12]
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d203      	bcs.n	800b2e4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	e002      	b.n	800b2ea <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	6879      	ldr	r1, [r7, #4]
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f000 ff57 	bl	800c1a2 <USBD_CtlContinueRx>
 800b2f4:	e038      	b.n	800b368 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2fc:	691b      	ldr	r3, [r3, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00a      	beq.n	800b318 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b308:	2b03      	cmp	r3, #3
 800b30a:	d105      	bne.n	800b318 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 ff54 	bl	800c1c6 <USBD_CtlSendStatus>
 800b31e:	e023      	b.n	800b368 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b326:	2b05      	cmp	r3, #5
 800b328:	d11e      	bne.n	800b368 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b332:	2100      	movs	r1, #0
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f001 fb01 	bl	800c93c <USBD_LL_StallEP>
 800b33a:	e015      	b.n	800b368 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b342:	699b      	ldr	r3, [r3, #24]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00d      	beq.n	800b364 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d108      	bne.n	800b364 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	7afa      	ldrb	r2, [r7, #11]
 800b35c:	4611      	mov	r1, r2
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	4798      	blx	r3
 800b362:	e001      	b.n	800b368 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b364:	2302      	movs	r3, #2
 800b366:	e000      	b.n	800b36a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b086      	sub	sp, #24
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	460b      	mov	r3, r1
 800b37c:	607a      	str	r2, [r7, #4]
 800b37e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b380:	7afb      	ldrb	r3, [r7, #11]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d17f      	bne.n	800b486 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3314      	adds	r3, #20
 800b38a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b392:	2b02      	cmp	r3, #2
 800b394:	d15c      	bne.n	800b450 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	68da      	ldr	r2, [r3, #12]
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d915      	bls.n	800b3ce <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	68da      	ldr	r2, [r3, #12]
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	1ad2      	subs	r2, r2, r3
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	6879      	ldr	r1, [r7, #4]
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f000 fec1 	bl	800c142 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f001 fb64 	bl	800ca94 <USBD_LL_PrepareReceive>
 800b3cc:	e04e      	b.n	800b46c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	697a      	ldr	r2, [r7, #20]
 800b3d4:	6912      	ldr	r2, [r2, #16]
 800b3d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3da:	fb01 f202 	mul.w	r2, r1, r2
 800b3de:	1a9b      	subs	r3, r3, r2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d11c      	bne.n	800b41e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	689a      	ldr	r2, [r3, #8]
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d316      	bcc.n	800b41e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	689a      	ldr	r2, [r3, #8]
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d20f      	bcs.n	800b41e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3fe:	2200      	movs	r2, #0
 800b400:	2100      	movs	r1, #0
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f000 fe9d 	bl	800c142 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b410:	2300      	movs	r3, #0
 800b412:	2200      	movs	r2, #0
 800b414:	2100      	movs	r1, #0
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f001 fb3c 	bl	800ca94 <USBD_LL_PrepareReceive>
 800b41c:	e026      	b.n	800b46c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00a      	beq.n	800b440 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b430:	2b03      	cmp	r3, #3
 800b432:	d105      	bne.n	800b440 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b440:	2180      	movs	r1, #128	; 0x80
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f001 fa7a 	bl	800c93c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 fecf 	bl	800c1ec <USBD_CtlReceiveStatus>
 800b44e:	e00d      	b.n	800b46c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b456:	2b04      	cmp	r3, #4
 800b458:	d004      	beq.n	800b464 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b460:	2b00      	cmp	r3, #0
 800b462:	d103      	bne.n	800b46c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b464:	2180      	movs	r1, #128	; 0x80
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	f001 fa68 	bl	800c93c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b472:	2b01      	cmp	r3, #1
 800b474:	d11d      	bne.n	800b4b2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f7ff fe81 	bl	800b17e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2200      	movs	r2, #0
 800b480:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b484:	e015      	b.n	800b4b2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00d      	beq.n	800b4ae <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b498:	2b03      	cmp	r3, #3
 800b49a:	d108      	bne.n	800b4ae <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	7afa      	ldrb	r2, [r7, #11]
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	4798      	blx	r3
 800b4ac:	e001      	b.n	800b4b2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e000      	b.n	800b4b4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3718      	adds	r7, #24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4c4:	2340      	movs	r3, #64	; 0x40
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 f9f1 	bl	800c8b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2240      	movs	r2, #64	; 0x40
 800b4dc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4e0:	2340      	movs	r3, #64	; 0x40
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	2180      	movs	r1, #128	; 0x80
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f001 f9e3 	bl	800c8b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2240      	movs	r2, #64	; 0x40
 800b4f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d009      	beq.n	800b534 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	6852      	ldr	r2, [r2, #4]
 800b52c:	b2d2      	uxtb	r2, r2
 800b52e:	4611      	mov	r1, r2
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	4798      	blx	r3
  }

  return USBD_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b53e:	b480      	push	{r7}
 800b540:	b083      	sub	sp, #12
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	460b      	mov	r3, r1
 800b548:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	78fa      	ldrb	r2, [r7, #3]
 800b54e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	bc80      	pop	{r7}
 800b55a:	4770      	bx	lr

0800b55c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2204      	movs	r2, #4
 800b574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	bc80      	pop	{r7}
 800b582:	4770      	bx	lr

0800b584 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b592:	2b04      	cmp	r3, #4
 800b594:	d105      	bne.n	800b5a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bc80      	pop	{r7}
 800b5ac:	4770      	bx	lr

0800b5ae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b082      	sub	sp, #8
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5bc:	2b03      	cmp	r3, #3
 800b5be:	d10b      	bne.n	800b5d8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c6:	69db      	ldr	r3, [r3, #28]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d005      	beq.n	800b5d8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5d2:	69db      	ldr	r3, [r3, #28]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
	...

0800b5e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5fa:	2b40      	cmp	r3, #64	; 0x40
 800b5fc:	d005      	beq.n	800b60a <USBD_StdDevReq+0x26>
 800b5fe:	2b40      	cmp	r3, #64	; 0x40
 800b600:	d84f      	bhi.n	800b6a2 <USBD_StdDevReq+0xbe>
 800b602:	2b00      	cmp	r3, #0
 800b604:	d009      	beq.n	800b61a <USBD_StdDevReq+0x36>
 800b606:	2b20      	cmp	r3, #32
 800b608:	d14b      	bne.n	800b6a2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	4798      	blx	r3
      break;
 800b618:	e048      	b.n	800b6ac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	785b      	ldrb	r3, [r3, #1]
 800b61e:	2b09      	cmp	r3, #9
 800b620:	d839      	bhi.n	800b696 <USBD_StdDevReq+0xb2>
 800b622:	a201      	add	r2, pc, #4	; (adr r2, 800b628 <USBD_StdDevReq+0x44>)
 800b624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b628:	0800b679 	.word	0x0800b679
 800b62c:	0800b68d 	.word	0x0800b68d
 800b630:	0800b697 	.word	0x0800b697
 800b634:	0800b683 	.word	0x0800b683
 800b638:	0800b697 	.word	0x0800b697
 800b63c:	0800b65b 	.word	0x0800b65b
 800b640:	0800b651 	.word	0x0800b651
 800b644:	0800b697 	.word	0x0800b697
 800b648:	0800b66f 	.word	0x0800b66f
 800b64c:	0800b665 	.word	0x0800b665
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b650:	6839      	ldr	r1, [r7, #0]
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f9dc 	bl	800ba10 <USBD_GetDescriptor>
          break;
 800b658:	e022      	b.n	800b6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fb3f 	bl	800bce0 <USBD_SetAddress>
          break;
 800b662:	e01d      	b.n	800b6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 fb7e 	bl	800bd68 <USBD_SetConfig>
          break;
 800b66c:	e018      	b.n	800b6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 fc07 	bl	800be84 <USBD_GetConfig>
          break;
 800b676:	e013      	b.n	800b6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fc37 	bl	800beee <USBD_GetStatus>
          break;
 800b680:	e00e      	b.n	800b6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fc65 	bl	800bf54 <USBD_SetFeature>
          break;
 800b68a:	e009      	b.n	800b6a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 fc74 	bl	800bf7c <USBD_ClrFeature>
          break;
 800b694:	e004      	b.n	800b6a0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b696:	6839      	ldr	r1, [r7, #0]
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fccc 	bl	800c036 <USBD_CtlError>
          break;
 800b69e:	bf00      	nop
      }
      break;
 800b6a0:	e004      	b.n	800b6ac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fcc6 	bl	800c036 <USBD_CtlError>
      break;
 800b6aa:	bf00      	nop
  }

  return ret;
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop

0800b6b8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6ce:	2b40      	cmp	r3, #64	; 0x40
 800b6d0:	d005      	beq.n	800b6de <USBD_StdItfReq+0x26>
 800b6d2:	2b40      	cmp	r3, #64	; 0x40
 800b6d4:	d82e      	bhi.n	800b734 <USBD_StdItfReq+0x7c>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <USBD_StdItfReq+0x26>
 800b6da:	2b20      	cmp	r3, #32
 800b6dc:	d12a      	bne.n	800b734 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d81d      	bhi.n	800b726 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	889b      	ldrh	r3, [r3, #4]
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d813      	bhi.n	800b71c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	4798      	blx	r3
 800b702:	4603      	mov	r3, r0
 800b704:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	88db      	ldrh	r3, [r3, #6]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d110      	bne.n	800b730 <USBD_StdItfReq+0x78>
 800b70e:	7bfb      	ldrb	r3, [r7, #15]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10d      	bne.n	800b730 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fd56 	bl	800c1c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b71a:	e009      	b.n	800b730 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fc89 	bl	800c036 <USBD_CtlError>
          break;
 800b724:	e004      	b.n	800b730 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fc84 	bl	800c036 <USBD_CtlError>
          break;
 800b72e:	e000      	b.n	800b732 <USBD_StdItfReq+0x7a>
          break;
 800b730:	bf00      	nop
      }
      break;
 800b732:	e004      	b.n	800b73e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fc7d 	bl	800c036 <USBD_CtlError>
      break;
 800b73c:	bf00      	nop
  }

  return USBD_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b752:	2300      	movs	r3, #0
 800b754:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	889b      	ldrh	r3, [r3, #4]
 800b75a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b764:	2b40      	cmp	r3, #64	; 0x40
 800b766:	d007      	beq.n	800b778 <USBD_StdEPReq+0x30>
 800b768:	2b40      	cmp	r3, #64	; 0x40
 800b76a:	f200 8146 	bhi.w	800b9fa <USBD_StdEPReq+0x2b2>
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00a      	beq.n	800b788 <USBD_StdEPReq+0x40>
 800b772:	2b20      	cmp	r3, #32
 800b774:	f040 8141 	bne.w	800b9fa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	4798      	blx	r3
      break;
 800b786:	e13d      	b.n	800ba04 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b790:	2b20      	cmp	r3, #32
 800b792:	d10a      	bne.n	800b7aa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	6839      	ldr	r1, [r7, #0]
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	4798      	blx	r3
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b7a6:	7bfb      	ldrb	r3, [r7, #15]
 800b7a8:	e12d      	b.n	800ba06 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	785b      	ldrb	r3, [r3, #1]
 800b7ae:	2b03      	cmp	r3, #3
 800b7b0:	d007      	beq.n	800b7c2 <USBD_StdEPReq+0x7a>
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	f300 811b 	bgt.w	800b9ee <USBD_StdEPReq+0x2a6>
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d072      	beq.n	800b8a2 <USBD_StdEPReq+0x15a>
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d03a      	beq.n	800b836 <USBD_StdEPReq+0xee>
 800b7c0:	e115      	b.n	800b9ee <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d002      	beq.n	800b7d2 <USBD_StdEPReq+0x8a>
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	d015      	beq.n	800b7fc <USBD_StdEPReq+0xb4>
 800b7d0:	e02b      	b.n	800b82a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b7d2:	7bbb      	ldrb	r3, [r7, #14]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00c      	beq.n	800b7f2 <USBD_StdEPReq+0xaa>
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	2b80      	cmp	r3, #128	; 0x80
 800b7dc:	d009      	beq.n	800b7f2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b7de:	7bbb      	ldrb	r3, [r7, #14]
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f001 f8aa 	bl	800c93c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b7e8:	2180      	movs	r1, #128	; 0x80
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f001 f8a6 	bl	800c93c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b7f0:	e020      	b.n	800b834 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fc1e 	bl	800c036 <USBD_CtlError>
              break;
 800b7fa:	e01b      	b.n	800b834 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	885b      	ldrh	r3, [r3, #2]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10e      	bne.n	800b822 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b804:	7bbb      	ldrb	r3, [r7, #14]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00b      	beq.n	800b822 <USBD_StdEPReq+0xda>
 800b80a:	7bbb      	ldrb	r3, [r7, #14]
 800b80c:	2b80      	cmp	r3, #128	; 0x80
 800b80e:	d008      	beq.n	800b822 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	88db      	ldrh	r3, [r3, #6]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d104      	bne.n	800b822 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b818:	7bbb      	ldrb	r3, [r7, #14]
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f001 f88d 	bl	800c93c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fccf 	bl	800c1c6 <USBD_CtlSendStatus>

              break;
 800b828:	e004      	b.n	800b834 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b82a:	6839      	ldr	r1, [r7, #0]
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fc02 	bl	800c036 <USBD_CtlError>
              break;
 800b832:	bf00      	nop
          }
          break;
 800b834:	e0e0      	b.n	800b9f8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d002      	beq.n	800b846 <USBD_StdEPReq+0xfe>
 800b840:	2b03      	cmp	r3, #3
 800b842:	d015      	beq.n	800b870 <USBD_StdEPReq+0x128>
 800b844:	e026      	b.n	800b894 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b846:	7bbb      	ldrb	r3, [r7, #14]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00c      	beq.n	800b866 <USBD_StdEPReq+0x11e>
 800b84c:	7bbb      	ldrb	r3, [r7, #14]
 800b84e:	2b80      	cmp	r3, #128	; 0x80
 800b850:	d009      	beq.n	800b866 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b852:	7bbb      	ldrb	r3, [r7, #14]
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f001 f870 	bl	800c93c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b85c:	2180      	movs	r1, #128	; 0x80
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f001 f86c 	bl	800c93c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b864:	e01c      	b.n	800b8a0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b866:	6839      	ldr	r1, [r7, #0]
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 fbe4 	bl	800c036 <USBD_CtlError>
              break;
 800b86e:	e017      	b.n	800b8a0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	885b      	ldrh	r3, [r3, #2]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d112      	bne.n	800b89e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d004      	beq.n	800b88c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b882:	7bbb      	ldrb	r3, [r7, #14]
 800b884:	4619      	mov	r1, r3
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f001 f877 	bl	800c97a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fc9a 	bl	800c1c6 <USBD_CtlSendStatus>
              }
              break;
 800b892:	e004      	b.n	800b89e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fbcd 	bl	800c036 <USBD_CtlError>
              break;
 800b89c:	e000      	b.n	800b8a0 <USBD_StdEPReq+0x158>
              break;
 800b89e:	bf00      	nop
          }
          break;
 800b8a0:	e0aa      	b.n	800b9f8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d002      	beq.n	800b8b2 <USBD_StdEPReq+0x16a>
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d032      	beq.n	800b916 <USBD_StdEPReq+0x1ce>
 800b8b0:	e097      	b.n	800b9e2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8b2:	7bbb      	ldrb	r3, [r7, #14]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d007      	beq.n	800b8c8 <USBD_StdEPReq+0x180>
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	2b80      	cmp	r3, #128	; 0x80
 800b8bc:	d004      	beq.n	800b8c8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b8be:	6839      	ldr	r1, [r7, #0]
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fbb8 	bl	800c036 <USBD_CtlError>
                break;
 800b8c6:	e091      	b.n	800b9ec <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	da0b      	bge.n	800b8e8 <USBD_StdEPReq+0x1a0>
 800b8d0:	7bbb      	ldrb	r3, [r7, #14]
 800b8d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4413      	add	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	3310      	adds	r3, #16
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	e00b      	b.n	800b900 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8e8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	3304      	adds	r3, #4
 800b900:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	2200      	movs	r2, #0
 800b906:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	2202      	movs	r2, #2
 800b90c:	4619      	mov	r1, r3
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fbfb 	bl	800c10a <USBD_CtlSendData>
              break;
 800b914:	e06a      	b.n	800b9ec <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b916:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	da11      	bge.n	800b942 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
 800b920:	f003 020f 	and.w	r2, r3, #15
 800b924:	6879      	ldr	r1, [r7, #4]
 800b926:	4613      	mov	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	4413      	add	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	440b      	add	r3, r1
 800b930:	3318      	adds	r3, #24
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d117      	bne.n	800b968 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b938:	6839      	ldr	r1, [r7, #0]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fb7b 	bl	800c036 <USBD_CtlError>
                  break;
 800b940:	e054      	b.n	800b9ec <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	f003 020f 	and.w	r2, r3, #15
 800b948:	6879      	ldr	r1, [r7, #4]
 800b94a:	4613      	mov	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	440b      	add	r3, r1
 800b954:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d104      	bne.n	800b968 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b95e:	6839      	ldr	r1, [r7, #0]
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fb68 	bl	800c036 <USBD_CtlError>
                  break;
 800b966:	e041      	b.n	800b9ec <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	da0b      	bge.n	800b988 <USBD_StdEPReq+0x240>
 800b970:	7bbb      	ldrb	r3, [r7, #14]
 800b972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b976:	4613      	mov	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4413      	add	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	3310      	adds	r3, #16
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	4413      	add	r3, r2
 800b984:	3304      	adds	r3, #4
 800b986:	e00b      	b.n	800b9a0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b988:	7bbb      	ldrb	r3, [r7, #14]
 800b98a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b98e:	4613      	mov	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	4413      	add	r3, r2
 800b99e:	3304      	adds	r3, #4
 800b9a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b9a2:	7bbb      	ldrb	r3, [r7, #14]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <USBD_StdEPReq+0x266>
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	2b80      	cmp	r3, #128	; 0x80
 800b9ac:	d103      	bne.n	800b9b6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	e00e      	b.n	800b9d4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b9b6:	7bbb      	ldrb	r3, [r7, #14]
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fffc 	bl	800c9b8 <USBD_LL_IsStallEP>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	e002      	b.n	800b9d4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2202      	movs	r2, #2
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fb95 	bl	800c10a <USBD_CtlSendData>
              break;
 800b9e0:	e004      	b.n	800b9ec <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fb26 	bl	800c036 <USBD_CtlError>
              break;
 800b9ea:	bf00      	nop
          }
          break;
 800b9ec:	e004      	b.n	800b9f8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fb20 	bl	800c036 <USBD_CtlError>
          break;
 800b9f6:	bf00      	nop
      }
      break;
 800b9f8:	e004      	b.n	800ba04 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b9fa:	6839      	ldr	r1, [r7, #0]
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fb1a 	bl	800c036 <USBD_CtlError>
      break;
 800ba02:	bf00      	nop
  }

  return ret;
 800ba04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
	...

0800ba10 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba22:	2300      	movs	r3, #0
 800ba24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	885b      	ldrh	r3, [r3, #2]
 800ba2a:	0a1b      	lsrs	r3, r3, #8
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	2b06      	cmp	r3, #6
 800ba32:	f200 8128 	bhi.w	800bc86 <USBD_GetDescriptor+0x276>
 800ba36:	a201      	add	r2, pc, #4	; (adr r2, 800ba3c <USBD_GetDescriptor+0x2c>)
 800ba38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3c:	0800ba59 	.word	0x0800ba59
 800ba40:	0800ba71 	.word	0x0800ba71
 800ba44:	0800bab1 	.word	0x0800bab1
 800ba48:	0800bc87 	.word	0x0800bc87
 800ba4c:	0800bc87 	.word	0x0800bc87
 800ba50:	0800bc27 	.word	0x0800bc27
 800ba54:	0800bc53 	.word	0x0800bc53
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	7c12      	ldrb	r2, [r2, #16]
 800ba64:	f107 0108 	add.w	r1, r7, #8
 800ba68:	4610      	mov	r0, r2
 800ba6a:	4798      	blx	r3
 800ba6c:	60f8      	str	r0, [r7, #12]
      break;
 800ba6e:	e112      	b.n	800bc96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	7c1b      	ldrb	r3, [r3, #16]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10d      	bne.n	800ba94 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba80:	f107 0208 	add.w	r2, r7, #8
 800ba84:	4610      	mov	r0, r2
 800ba86:	4798      	blx	r3
 800ba88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	2202      	movs	r2, #2
 800ba90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ba92:	e100      	b.n	800bc96 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9c:	f107 0208 	add.w	r2, r7, #8
 800baa0:	4610      	mov	r0, r2
 800baa2:	4798      	blx	r3
 800baa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	3301      	adds	r3, #1
 800baaa:	2202      	movs	r2, #2
 800baac:	701a      	strb	r2, [r3, #0]
      break;
 800baae:	e0f2      	b.n	800bc96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	885b      	ldrh	r3, [r3, #2]
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b05      	cmp	r3, #5
 800bab8:	f200 80ac 	bhi.w	800bc14 <USBD_GetDescriptor+0x204>
 800babc:	a201      	add	r2, pc, #4	; (adr r2, 800bac4 <USBD_GetDescriptor+0xb4>)
 800babe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac2:	bf00      	nop
 800bac4:	0800badd 	.word	0x0800badd
 800bac8:	0800bb11 	.word	0x0800bb11
 800bacc:	0800bb45 	.word	0x0800bb45
 800bad0:	0800bb79 	.word	0x0800bb79
 800bad4:	0800bbad 	.word	0x0800bbad
 800bad8:	0800bbe1 	.word	0x0800bbe1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00b      	beq.n	800bb00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	7c12      	ldrb	r2, [r2, #16]
 800baf4:	f107 0108 	add.w	r1, r7, #8
 800baf8:	4610      	mov	r0, r2
 800bafa:	4798      	blx	r3
 800bafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bafe:	e091      	b.n	800bc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fa97 	bl	800c036 <USBD_CtlError>
            err++;
 800bb08:	7afb      	ldrb	r3, [r7, #11]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb0e:	e089      	b.n	800bc24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00b      	beq.n	800bb34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	7c12      	ldrb	r2, [r2, #16]
 800bb28:	f107 0108 	add.w	r1, r7, #8
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	4798      	blx	r3
 800bb30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb32:	e077      	b.n	800bc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 fa7d 	bl	800c036 <USBD_CtlError>
            err++;
 800bb3c:	7afb      	ldrb	r3, [r7, #11]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	72fb      	strb	r3, [r7, #11]
          break;
 800bb42:	e06f      	b.n	800bc24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	7c12      	ldrb	r2, [r2, #16]
 800bb5c:	f107 0108 	add.w	r1, r7, #8
 800bb60:	4610      	mov	r0, r2
 800bb62:	4798      	blx	r3
 800bb64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb66:	e05d      	b.n	800bc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fa63 	bl	800c036 <USBD_CtlError>
            err++;
 800bb70:	7afb      	ldrb	r3, [r7, #11]
 800bb72:	3301      	adds	r3, #1
 800bb74:	72fb      	strb	r3, [r7, #11]
          break;
 800bb76:	e055      	b.n	800bc24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb7e:	691b      	ldr	r3, [r3, #16]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00b      	beq.n	800bb9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bb8a:	691b      	ldr	r3, [r3, #16]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	7c12      	ldrb	r2, [r2, #16]
 800bb90:	f107 0108 	add.w	r1, r7, #8
 800bb94:	4610      	mov	r0, r2
 800bb96:	4798      	blx	r3
 800bb98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb9a:	e043      	b.n	800bc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fa49 	bl	800c036 <USBD_CtlError>
            err++;
 800bba4:	7afb      	ldrb	r3, [r7, #11]
 800bba6:	3301      	adds	r3, #1
 800bba8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbaa:	e03b      	b.n	800bc24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00b      	beq.n	800bbd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbbe:	695b      	ldr	r3, [r3, #20]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	7c12      	ldrb	r2, [r2, #16]
 800bbc4:	f107 0108 	add.w	r1, r7, #8
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
 800bbcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbce:	e029      	b.n	800bc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fa2f 	bl	800c036 <USBD_CtlError>
            err++;
 800bbd8:	7afb      	ldrb	r3, [r7, #11]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	72fb      	strb	r3, [r7, #11]
          break;
 800bbde:	e021      	b.n	800bc24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00b      	beq.n	800bc04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bbf2:	699b      	ldr	r3, [r3, #24]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	7c12      	ldrb	r2, [r2, #16]
 800bbf8:	f107 0108 	add.w	r1, r7, #8
 800bbfc:	4610      	mov	r0, r2
 800bbfe:	4798      	blx	r3
 800bc00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc02:	e00f      	b.n	800bc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fa15 	bl	800c036 <USBD_CtlError>
            err++;
 800bc0c:	7afb      	ldrb	r3, [r7, #11]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	72fb      	strb	r3, [r7, #11]
          break;
 800bc12:	e007      	b.n	800bc24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fa0d 	bl	800c036 <USBD_CtlError>
          err++;
 800bc1c:	7afb      	ldrb	r3, [r7, #11]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800bc22:	e038      	b.n	800bc96 <USBD_GetDescriptor+0x286>
 800bc24:	e037      	b.n	800bc96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	7c1b      	ldrb	r3, [r3, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d109      	bne.n	800bc42 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc36:	f107 0208 	add.w	r2, r7, #8
 800bc3a:	4610      	mov	r0, r2
 800bc3c:	4798      	blx	r3
 800bc3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc40:	e029      	b.n	800bc96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f9f6 	bl	800c036 <USBD_CtlError>
        err++;
 800bc4a:	7afb      	ldrb	r3, [r7, #11]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	72fb      	strb	r3, [r7, #11]
      break;
 800bc50:	e021      	b.n	800bc96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	7c1b      	ldrb	r3, [r3, #16]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10d      	bne.n	800bc76 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc62:	f107 0208 	add.w	r2, r7, #8
 800bc66:	4610      	mov	r0, r2
 800bc68:	4798      	blx	r3
 800bc6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	2207      	movs	r2, #7
 800bc72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc74:	e00f      	b.n	800bc96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bc76:	6839      	ldr	r1, [r7, #0]
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 f9dc 	bl	800c036 <USBD_CtlError>
        err++;
 800bc7e:	7afb      	ldrb	r3, [r7, #11]
 800bc80:	3301      	adds	r3, #1
 800bc82:	72fb      	strb	r3, [r7, #11]
      break;
 800bc84:	e007      	b.n	800bc96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 f9d4 	bl	800c036 <USBD_CtlError>
      err++;
 800bc8e:	7afb      	ldrb	r3, [r7, #11]
 800bc90:	3301      	adds	r3, #1
 800bc92:	72fb      	strb	r3, [r7, #11]
      break;
 800bc94:	bf00      	nop
  }

  if (err != 0U)
 800bc96:	7afb      	ldrb	r3, [r7, #11]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d11c      	bne.n	800bcd6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bc9c:	893b      	ldrh	r3, [r7, #8]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d011      	beq.n	800bcc6 <USBD_GetDescriptor+0x2b6>
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	88db      	ldrh	r3, [r3, #6]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00d      	beq.n	800bcc6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	88da      	ldrh	r2, [r3, #6]
 800bcae:	893b      	ldrh	r3, [r7, #8]
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	bf28      	it	cs
 800bcb4:	4613      	movcs	r3, r2
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bcba:	893b      	ldrh	r3, [r7, #8]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	68f9      	ldr	r1, [r7, #12]
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fa22 	bl	800c10a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	88db      	ldrh	r3, [r3, #6]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d104      	bne.n	800bcd8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fa79 	bl	800c1c6 <USBD_CtlSendStatus>
 800bcd4:	e000      	b.n	800bcd8 <USBD_GetDescriptor+0x2c8>
    return;
 800bcd6:	bf00      	nop
    }
  }
}
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop

0800bce0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	889b      	ldrh	r3, [r3, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d130      	bne.n	800bd54 <USBD_SetAddress+0x74>
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	88db      	ldrh	r3, [r3, #6]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d12c      	bne.n	800bd54 <USBD_SetAddress+0x74>
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	885b      	ldrh	r3, [r3, #2]
 800bcfe:	2b7f      	cmp	r3, #127	; 0x7f
 800bd00:	d828      	bhi.n	800bd54 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	885b      	ldrh	r3, [r3, #2]
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd14:	2b03      	cmp	r3, #3
 800bd16:	d104      	bne.n	800bd22 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 f98b 	bl	800c036 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd20:	e01d      	b.n	800bd5e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	7bfa      	ldrb	r2, [r7, #15]
 800bd26:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 fe6e 	bl	800ca10 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fa46 	bl	800c1c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd3a:	7bfb      	ldrb	r3, [r7, #15]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d004      	beq.n	800bd4a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2202      	movs	r2, #2
 800bd44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd48:	e009      	b.n	800bd5e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd52:	e004      	b.n	800bd5e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd54:	6839      	ldr	r1, [r7, #0]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 f96d 	bl	800c036 <USBD_CtlError>
  }
}
 800bd5c:	bf00      	nop
 800bd5e:	bf00      	nop
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
	...

0800bd68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	885b      	ldrh	r3, [r3, #2]
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	4b41      	ldr	r3, [pc, #260]	; (800be80 <USBD_SetConfig+0x118>)
 800bd7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd7c:	4b40      	ldr	r3, [pc, #256]	; (800be80 <USBD_SetConfig+0x118>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d904      	bls.n	800bd8e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 f955 	bl	800c036 <USBD_CtlError>
 800bd8c:	e075      	b.n	800be7a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d002      	beq.n	800bd9e <USBD_SetConfig+0x36>
 800bd98:	2b03      	cmp	r3, #3
 800bd9a:	d023      	beq.n	800bde4 <USBD_SetConfig+0x7c>
 800bd9c:	e062      	b.n	800be64 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bd9e:	4b38      	ldr	r3, [pc, #224]	; (800be80 <USBD_SetConfig+0x118>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d01a      	beq.n	800bddc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bda6:	4b36      	ldr	r3, [pc, #216]	; (800be80 <USBD_SetConfig+0x118>)
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bdb8:	4b31      	ldr	r3, [pc, #196]	; (800be80 <USBD_SetConfig+0x118>)
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7ff f9e7 	bl	800b192 <USBD_SetClassConfig>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d104      	bne.n	800bdd4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 f932 	bl	800c036 <USBD_CtlError>
            return;
 800bdd2:	e052      	b.n	800be7a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 f9f6 	bl	800c1c6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bdda:	e04e      	b.n	800be7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f9f2 	bl	800c1c6 <USBD_CtlSendStatus>
        break;
 800bde2:	e04a      	b.n	800be7a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bde4:	4b26      	ldr	r3, [pc, #152]	; (800be80 <USBD_SetConfig+0x118>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d112      	bne.n	800be12 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2202      	movs	r2, #2
 800bdf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bdf4:	4b22      	ldr	r3, [pc, #136]	; (800be80 <USBD_SetConfig+0x118>)
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bdfe:	4b20      	ldr	r3, [pc, #128]	; (800be80 <USBD_SetConfig+0x118>)
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	4619      	mov	r1, r3
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f7ff f9e3 	bl	800b1d0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 f9db 	bl	800c1c6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800be10:	e033      	b.n	800be7a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800be12:	4b1b      	ldr	r3, [pc, #108]	; (800be80 <USBD_SetConfig+0x118>)
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	461a      	mov	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d01d      	beq.n	800be5c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	b2db      	uxtb	r3, r3
 800be26:	4619      	mov	r1, r3
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff f9d1 	bl	800b1d0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800be2e:	4b14      	ldr	r3, [pc, #80]	; (800be80 <USBD_SetConfig+0x118>)
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800be38:	4b11      	ldr	r3, [pc, #68]	; (800be80 <USBD_SetConfig+0x118>)
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	4619      	mov	r1, r3
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff f9a7 	bl	800b192 <USBD_SetClassConfig>
 800be44:	4603      	mov	r3, r0
 800be46:	2b02      	cmp	r3, #2
 800be48:	d104      	bne.n	800be54 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f8f2 	bl	800c036 <USBD_CtlError>
            return;
 800be52:	e012      	b.n	800be7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f9b6 	bl	800c1c6 <USBD_CtlSendStatus>
        break;
 800be5a:	e00e      	b.n	800be7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 f9b2 	bl	800c1c6 <USBD_CtlSendStatus>
        break;
 800be62:	e00a      	b.n	800be7a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 f8e5 	bl	800c036 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800be6c:	4b04      	ldr	r3, [pc, #16]	; (800be80 <USBD_SetConfig+0x118>)
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	4619      	mov	r1, r3
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7ff f9ac 	bl	800b1d0 <USBD_ClrClassConfig>
        break;
 800be78:	bf00      	nop
    }
  }
}
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	20000d2c 	.word	0x20000d2c

0800be84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	88db      	ldrh	r3, [r3, #6]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d004      	beq.n	800bea0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f8cc 	bl	800c036 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800be9e:	e022      	b.n	800bee6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bea6:	2b02      	cmp	r3, #2
 800bea8:	dc02      	bgt.n	800beb0 <USBD_GetConfig+0x2c>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	dc03      	bgt.n	800beb6 <USBD_GetConfig+0x32>
 800beae:	e015      	b.n	800bedc <USBD_GetConfig+0x58>
 800beb0:	2b03      	cmp	r3, #3
 800beb2:	d00b      	beq.n	800becc <USBD_GetConfig+0x48>
 800beb4:	e012      	b.n	800bedc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	3308      	adds	r3, #8
 800bec0:	2201      	movs	r2, #1
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f920 	bl	800c10a <USBD_CtlSendData>
        break;
 800beca:	e00c      	b.n	800bee6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3304      	adds	r3, #4
 800bed0:	2201      	movs	r2, #1
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f918 	bl	800c10a <USBD_CtlSendData>
        break;
 800beda:	e004      	b.n	800bee6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f8a9 	bl	800c036 <USBD_CtlError>
        break;
 800bee4:	bf00      	nop
}
 800bee6:	bf00      	nop
 800bee8:	3708      	adds	r7, #8
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b082      	sub	sp, #8
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800befe:	3b01      	subs	r3, #1
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d81e      	bhi.n	800bf42 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	88db      	ldrh	r3, [r3, #6]
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d004      	beq.n	800bf16 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f891 	bl	800c036 <USBD_CtlError>
        break;
 800bf14:	e01a      	b.n	800bf4c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d005      	beq.n	800bf32 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	f043 0202 	orr.w	r2, r3, #2
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	330c      	adds	r3, #12
 800bf36:	2202      	movs	r2, #2
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 f8e5 	bl	800c10a <USBD_CtlSendData>
      break;
 800bf40:	e004      	b.n	800bf4c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bf42:	6839      	ldr	r1, [r7, #0]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f876 	bl	800c036 <USBD_CtlError>
      break;
 800bf4a:	bf00      	nop
  }
}
 800bf4c:	bf00      	nop
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	885b      	ldrh	r3, [r3, #2]
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d106      	bne.n	800bf74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f929 	bl	800c1c6 <USBD_CtlSendStatus>
  }
}
 800bf74:	bf00      	nop
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d80b      	bhi.n	800bfaa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	885b      	ldrh	r3, [r3, #2]
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d10c      	bne.n	800bfb4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 f90f 	bl	800c1c6 <USBD_CtlSendStatus>
      }
      break;
 800bfa8:	e004      	b.n	800bfb4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f000 f842 	bl	800c036 <USBD_CtlError>
      break;
 800bfb2:	e000      	b.n	800bfb6 <USBD_ClrFeature+0x3a>
      break;
 800bfb4:	bf00      	nop
  }
}
 800bfb6:	bf00      	nop
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bfbe:	b480      	push	{r7}
 800bfc0:	b083      	sub	sp, #12
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
 800bfc6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781a      	ldrb	r2, [r3, #0]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	785a      	ldrb	r2, [r3, #1]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	3302      	adds	r3, #2
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	3303      	adds	r3, #3
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	021b      	lsls	r3, r3, #8
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	4413      	add	r3, r2
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	3304      	adds	r3, #4
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	3305      	adds	r3, #5
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	b29b      	uxth	r3, r3
 800c004:	021b      	lsls	r3, r3, #8
 800c006:	b29b      	uxth	r3, r3
 800c008:	4413      	add	r3, r2
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	3306      	adds	r3, #6
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	b29a      	uxth	r2, r3
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	3307      	adds	r3, #7
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	b29b      	uxth	r3, r3
 800c020:	021b      	lsls	r3, r3, #8
 800c022:	b29b      	uxth	r3, r3
 800c024:	4413      	add	r3, r2
 800c026:	b29a      	uxth	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	80da      	strh	r2, [r3, #6]

}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	bc80      	pop	{r7}
 800c034:	4770      	bx	lr

0800c036 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b082      	sub	sp, #8
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c040:	2180      	movs	r1, #128	; 0x80
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fc7a 	bl	800c93c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c048:	2100      	movs	r1, #0
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fc76 	bl	800c93c <USBD_LL_StallEP>
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c064:	2300      	movs	r3, #0
 800c066:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d032      	beq.n	800c0d4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f000 f834 	bl	800c0dc <USBD_GetLen>
 800c074:	4603      	mov	r3, r0
 800c076:	3301      	adds	r3, #1
 800c078:	b29b      	uxth	r3, r3
 800c07a:	005b      	lsls	r3, r3, #1
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c082:	7dfb      	ldrb	r3, [r7, #23]
 800c084:	1c5a      	adds	r2, r3, #1
 800c086:	75fa      	strb	r2, [r7, #23]
 800c088:	461a      	mov	r2, r3
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	4413      	add	r3, r2
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	7812      	ldrb	r2, [r2, #0]
 800c092:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c094:	7dfb      	ldrb	r3, [r7, #23]
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	75fa      	strb	r2, [r7, #23]
 800c09a:	461a      	mov	r2, r3
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	4413      	add	r3, r2
 800c0a0:	2203      	movs	r2, #3
 800c0a2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c0a4:	e012      	b.n	800c0cc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	1c5a      	adds	r2, r3, #1
 800c0aa:	60fa      	str	r2, [r7, #12]
 800c0ac:	7dfa      	ldrb	r2, [r7, #23]
 800c0ae:	1c51      	adds	r1, r2, #1
 800c0b0:	75f9      	strb	r1, [r7, #23]
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	68ba      	ldr	r2, [r7, #8]
 800c0b6:	440a      	add	r2, r1
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c0bc:	7dfb      	ldrb	r3, [r7, #23]
 800c0be:	1c5a      	adds	r2, r3, #1
 800c0c0:	75fa      	strb	r2, [r7, #23]
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1e8      	bne.n	800c0a6 <USBD_GetString+0x4e>
    }
  }
}
 800c0d4:	bf00      	nop
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c0e8:	e005      	b.n	800c0f6 <USBD_GetLen+0x1a>
  {
    len++;
 800c0ea:	7bfb      	ldrb	r3, [r7, #15]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1f5      	bne.n	800c0ea <USBD_GetLen+0xe>
  }

  return len;
 800c0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c100:	4618      	mov	r0, r3
 800c102:	3714      	adds	r7, #20
 800c104:	46bd      	mov	sp, r7
 800c106:	bc80      	pop	{r7}
 800c108:	4770      	bx	lr

0800c10a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b084      	sub	sp, #16
 800c10e:	af00      	add	r7, sp, #0
 800c110:	60f8      	str	r0, [r7, #12]
 800c112:	60b9      	str	r1, [r7, #8]
 800c114:	4613      	mov	r3, r2
 800c116:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2202      	movs	r2, #2
 800c11c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c120:	88fa      	ldrh	r2, [r7, #6]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c126:	88fa      	ldrh	r2, [r7, #6]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c12c:	88fb      	ldrh	r3, [r7, #6]
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	2100      	movs	r1, #0
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f000 fc8b 	bl	800ca4e <USBD_LL_Transmit>

  return USBD_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b084      	sub	sp, #16
 800c146:	af00      	add	r7, sp, #0
 800c148:	60f8      	str	r0, [r7, #12]
 800c14a:	60b9      	str	r1, [r7, #8]
 800c14c:	4613      	mov	r3, r2
 800c14e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c150:	88fb      	ldrh	r3, [r7, #6]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	2100      	movs	r1, #0
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f000 fc79 	bl	800ca4e <USBD_LL_Transmit>

  return USBD_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	4613      	mov	r3, r2
 800c172:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2203      	movs	r2, #3
 800c178:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c17c:	88fa      	ldrh	r2, [r7, #6]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c184:	88fa      	ldrh	r2, [r7, #6]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c18c:	88fb      	ldrh	r3, [r7, #6]
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	2100      	movs	r1, #0
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	f000 fc7e 	bl	800ca94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b084      	sub	sp, #16
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	60f8      	str	r0, [r7, #12]
 800c1aa:	60b9      	str	r1, [r7, #8]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1b0:	88fb      	ldrh	r3, [r7, #6]
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f000 fc6c 	bl	800ca94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}

0800c1c6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c1c6:	b580      	push	{r7, lr}
 800c1c8:	b082      	sub	sp, #8
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2204      	movs	r2, #4
 800c1d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	2200      	movs	r2, #0
 800c1da:	2100      	movs	r1, #0
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fc36 	bl	800ca4e <USBD_LL_Transmit>

  return USBD_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3708      	adds	r7, #8
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2205      	movs	r2, #5
 800c1f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	2200      	movs	r2, #0
 800c200:	2100      	movs	r1, #0
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fc46 	bl	800ca94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3708      	adds	r7, #8
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
	...

0800c214 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c218:	2200      	movs	r2, #0
 800c21a:	4912      	ldr	r1, [pc, #72]	; (800c264 <MX_USB_DEVICE_Init+0x50>)
 800c21c:	4812      	ldr	r0, [pc, #72]	; (800c268 <MX_USB_DEVICE_Init+0x54>)
 800c21e:	f7fe ff5e 	bl	800b0de <USBD_Init>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c228:	f7f5 fb42 	bl	80018b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c22c:	490f      	ldr	r1, [pc, #60]	; (800c26c <MX_USB_DEVICE_Init+0x58>)
 800c22e:	480e      	ldr	r0, [pc, #56]	; (800c268 <MX_USB_DEVICE_Init+0x54>)
 800c230:	f7fe ff80 	bl	800b134 <USBD_RegisterClass>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c23a:	f7f5 fb39 	bl	80018b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c23e:	490c      	ldr	r1, [pc, #48]	; (800c270 <MX_USB_DEVICE_Init+0x5c>)
 800c240:	4809      	ldr	r0, [pc, #36]	; (800c268 <MX_USB_DEVICE_Init+0x54>)
 800c242:	f7fe feb1 	bl	800afa8 <USBD_CDC_RegisterInterface>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c24c:	f7f5 fb30 	bl	80018b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c250:	4805      	ldr	r0, [pc, #20]	; (800c268 <MX_USB_DEVICE_Init+0x54>)
 800c252:	f7fe ff88 	bl	800b166 <USBD_Start>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d001      	beq.n	800c260 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c25c:	f7f5 fb28 	bl	80018b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c260:	bf00      	nop
 800c262:	bd80      	pop	{r7, pc}
 800c264:	20000364 	.word	0x20000364
 800c268:	20000d30 	.word	0x20000d30
 800c26c:	20000248 	.word	0x20000248
 800c270:	20000354 	.word	0x20000354

0800c274 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c278:	2200      	movs	r2, #0
 800c27a:	4905      	ldr	r1, [pc, #20]	; (800c290 <CDC_Init_FS+0x1c>)
 800c27c:	4805      	ldr	r0, [pc, #20]	; (800c294 <CDC_Init_FS+0x20>)
 800c27e:	f7fe fea9 	bl	800afd4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c282:	4905      	ldr	r1, [pc, #20]	; (800c298 <CDC_Init_FS+0x24>)
 800c284:	4803      	ldr	r0, [pc, #12]	; (800c294 <CDC_Init_FS+0x20>)
 800c286:	f7fe febe 	bl	800b006 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c28a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	200013dc 	.word	0x200013dc
 800c294:	20000d30 	.word	0x20000d30
 800c298:	20000ff4 	.word	0x20000ff4

0800c29c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c29c:	b480      	push	{r7}
 800c29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c2a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bc80      	pop	{r7}
 800c2a8:	4770      	bx	lr
	...

0800c2ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	6039      	str	r1, [r7, #0]
 800c2b6:	71fb      	strb	r3, [r7, #7]
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c2bc:	79fb      	ldrb	r3, [r7, #7]
 800c2be:	2b23      	cmp	r3, #35	; 0x23
 800c2c0:	d85c      	bhi.n	800c37c <CDC_Control_FS+0xd0>
 800c2c2:	a201      	add	r2, pc, #4	; (adr r2, 800c2c8 <CDC_Control_FS+0x1c>)
 800c2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c8:	0800c37d 	.word	0x0800c37d
 800c2cc:	0800c37d 	.word	0x0800c37d
 800c2d0:	0800c37d 	.word	0x0800c37d
 800c2d4:	0800c37d 	.word	0x0800c37d
 800c2d8:	0800c37d 	.word	0x0800c37d
 800c2dc:	0800c37d 	.word	0x0800c37d
 800c2e0:	0800c37d 	.word	0x0800c37d
 800c2e4:	0800c37d 	.word	0x0800c37d
 800c2e8:	0800c37d 	.word	0x0800c37d
 800c2ec:	0800c37d 	.word	0x0800c37d
 800c2f0:	0800c37d 	.word	0x0800c37d
 800c2f4:	0800c37d 	.word	0x0800c37d
 800c2f8:	0800c37d 	.word	0x0800c37d
 800c2fc:	0800c37d 	.word	0x0800c37d
 800c300:	0800c37d 	.word	0x0800c37d
 800c304:	0800c37d 	.word	0x0800c37d
 800c308:	0800c37d 	.word	0x0800c37d
 800c30c:	0800c37d 	.word	0x0800c37d
 800c310:	0800c37d 	.word	0x0800c37d
 800c314:	0800c37d 	.word	0x0800c37d
 800c318:	0800c37d 	.word	0x0800c37d
 800c31c:	0800c37d 	.word	0x0800c37d
 800c320:	0800c37d 	.word	0x0800c37d
 800c324:	0800c37d 	.word	0x0800c37d
 800c328:	0800c37d 	.word	0x0800c37d
 800c32c:	0800c37d 	.word	0x0800c37d
 800c330:	0800c37d 	.word	0x0800c37d
 800c334:	0800c37d 	.word	0x0800c37d
 800c338:	0800c37d 	.word	0x0800c37d
 800c33c:	0800c37d 	.word	0x0800c37d
 800c340:	0800c37d 	.word	0x0800c37d
 800c344:	0800c37d 	.word	0x0800c37d
 800c348:	0800c359 	.word	0x0800c359
 800c34c:	0800c36b 	.word	0x0800c36b
 800c350:	0800c37d 	.word	0x0800c37d
 800c354:	0800c37d 	.word	0x0800c37d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800c358:	4b0c      	ldr	r3, [pc, #48]	; (800c38c <CDC_Control_FS+0xe0>)
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	6810      	ldr	r0, [r2, #0]
 800c35e:	6018      	str	r0, [r3, #0]
 800c360:	8891      	ldrh	r1, [r2, #4]
 800c362:	7992      	ldrb	r2, [r2, #6]
 800c364:	8099      	strh	r1, [r3, #4]
 800c366:	719a      	strb	r2, [r3, #6]
    break;
 800c368:	e009      	b.n	800c37e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	4a07      	ldr	r2, [pc, #28]	; (800c38c <CDC_Control_FS+0xe0>)
 800c36e:	6810      	ldr	r0, [r2, #0]
 800c370:	6018      	str	r0, [r3, #0]
 800c372:	8891      	ldrh	r1, [r2, #4]
 800c374:	7992      	ldrb	r2, [r2, #6]
 800c376:	8099      	strh	r1, [r3, #4]
 800c378:	719a      	strb	r2, [r3, #6]
    break;
 800c37a:	e000      	b.n	800c37e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c37c:	bf00      	nop
  }

  return (USBD_OK);
 800c37e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c380:	4618      	mov	r0, r3
 800c382:	370c      	adds	r7, #12
 800c384:	46bd      	mov	sp, r7
 800c386:	bc80      	pop	{r7}
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	2000034c 	.word	0x2000034c

0800c390 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d005      	beq.n	800c3ae <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f7f4 f919 	bl	80005e0 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c3ae:	6879      	ldr	r1, [r7, #4]
 800c3b0:	4805      	ldr	r0, [pc, #20]	; (800c3c8 <CDC_Receive_FS+0x38>)
 800c3b2:	f7fe fe28 	bl	800b006 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c3b6:	4804      	ldr	r0, [pc, #16]	; (800c3c8 <CDC_Receive_FS+0x38>)
 800c3b8:	f7fe fe67 	bl	800b08a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c3bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	bf00      	nop
 800c3c8:	20000d30 	.word	0x20000d30

0800c3cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	460b      	mov	r3, r1
 800c3d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	; (800c414 <CDC_Transmit_FS+0x48>)
 800c3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3e2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d001      	beq.n	800c3f2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e00b      	b.n	800c40a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c3f2:	887b      	ldrh	r3, [r7, #2]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	4806      	ldr	r0, [pc, #24]	; (800c414 <CDC_Transmit_FS+0x48>)
 800c3fa:	f7fe fdeb 	bl	800afd4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c3fe:	4805      	ldr	r0, [pc, #20]	; (800c414 <CDC_Transmit_FS+0x48>)
 800c400:	f7fe fe14 	bl	800b02c <USBD_CDC_TransmitPacket>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c408:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20000d30 	.word	0x20000d30

0800c418 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	6039      	str	r1, [r7, #0]
 800c422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	2212      	movs	r2, #18
 800c428:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c42a:	4b03      	ldr	r3, [pc, #12]	; (800c438 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	bc80      	pop	{r7}
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	20000380 	.word	0x20000380

0800c43c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	4603      	mov	r3, r0
 800c444:	6039      	str	r1, [r7, #0]
 800c446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2204      	movs	r2, #4
 800c44c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c44e:	4b03      	ldr	r3, [pc, #12]	; (800c45c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c450:	4618      	mov	r0, r3
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	bc80      	pop	{r7}
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	20000394 	.word	0x20000394

0800c460 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	4603      	mov	r3, r0
 800c468:	6039      	str	r1, [r7, #0]
 800c46a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c46c:	79fb      	ldrb	r3, [r7, #7]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d105      	bne.n	800c47e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	4907      	ldr	r1, [pc, #28]	; (800c494 <USBD_FS_ProductStrDescriptor+0x34>)
 800c476:	4808      	ldr	r0, [pc, #32]	; (800c498 <USBD_FS_ProductStrDescriptor+0x38>)
 800c478:	f7ff fdee 	bl	800c058 <USBD_GetString>
 800c47c:	e004      	b.n	800c488 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c47e:	683a      	ldr	r2, [r7, #0]
 800c480:	4904      	ldr	r1, [pc, #16]	; (800c494 <USBD_FS_ProductStrDescriptor+0x34>)
 800c482:	4805      	ldr	r0, [pc, #20]	; (800c498 <USBD_FS_ProductStrDescriptor+0x38>)
 800c484:	f7ff fde8 	bl	800c058 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c488:	4b02      	ldr	r3, [pc, #8]	; (800c494 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	200017c4 	.word	0x200017c4
 800c498:	0800d608 	.word	0x0800d608

0800c49c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	6039      	str	r1, [r7, #0]
 800c4a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c4a8:	683a      	ldr	r2, [r7, #0]
 800c4aa:	4904      	ldr	r1, [pc, #16]	; (800c4bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c4ac:	4804      	ldr	r0, [pc, #16]	; (800c4c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c4ae:	f7ff fdd3 	bl	800c058 <USBD_GetString>
  return USBD_StrDesc;
 800c4b2:	4b02      	ldr	r3, [pc, #8]	; (800c4bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	200017c4 	.word	0x200017c4
 800c4c0:	0800d61c 	.word	0x0800d61c

0800c4c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	6039      	str	r1, [r7, #0]
 800c4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	221a      	movs	r2, #26
 800c4d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c4d6:	f000 f843 	bl	800c560 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c4da:	4b02      	ldr	r3, [pc, #8]	; (800c4e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	20000398 	.word	0x20000398

0800c4e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	6039      	str	r1, [r7, #0]
 800c4f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c4f4:	79fb      	ldrb	r3, [r7, #7]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d105      	bne.n	800c506 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c4fa:	683a      	ldr	r2, [r7, #0]
 800c4fc:	4907      	ldr	r1, [pc, #28]	; (800c51c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c4fe:	4808      	ldr	r0, [pc, #32]	; (800c520 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c500:	f7ff fdaa 	bl	800c058 <USBD_GetString>
 800c504:	e004      	b.n	800c510 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	4904      	ldr	r1, [pc, #16]	; (800c51c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c50a:	4805      	ldr	r0, [pc, #20]	; (800c520 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c50c:	f7ff fda4 	bl	800c058 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c510:	4b02      	ldr	r3, [pc, #8]	; (800c51c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c512:	4618      	mov	r0, r3
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	200017c4 	.word	0x200017c4
 800c520:	0800d624 	.word	0x0800d624

0800c524 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	6039      	str	r1, [r7, #0]
 800c52e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c530:	79fb      	ldrb	r3, [r7, #7]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d105      	bne.n	800c542 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	4907      	ldr	r1, [pc, #28]	; (800c558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c53a:	4808      	ldr	r0, [pc, #32]	; (800c55c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c53c:	f7ff fd8c 	bl	800c058 <USBD_GetString>
 800c540:	e004      	b.n	800c54c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	4904      	ldr	r1, [pc, #16]	; (800c558 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c546:	4805      	ldr	r0, [pc, #20]	; (800c55c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c548:	f7ff fd86 	bl	800c058 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c54c:	4b02      	ldr	r3, [pc, #8]	; (800c558 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	200017c4 	.word	0x200017c4
 800c55c:	0800d630 	.word	0x0800d630

0800c560 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c566:	4b0f      	ldr	r3, [pc, #60]	; (800c5a4 <Get_SerialNum+0x44>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c56c:	4b0e      	ldr	r3, [pc, #56]	; (800c5a8 <Get_SerialNum+0x48>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c572:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <Get_SerialNum+0x4c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4413      	add	r3, r2
 800c57e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d009      	beq.n	800c59a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c586:	2208      	movs	r2, #8
 800c588:	4909      	ldr	r1, [pc, #36]	; (800c5b0 <Get_SerialNum+0x50>)
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f000 f814 	bl	800c5b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c590:	2204      	movs	r2, #4
 800c592:	4908      	ldr	r1, [pc, #32]	; (800c5b4 <Get_SerialNum+0x54>)
 800c594:	68b8      	ldr	r0, [r7, #8]
 800c596:	f000 f80f 	bl	800c5b8 <IntToUnicode>
  }
}
 800c59a:	bf00      	nop
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	1ffff7e8 	.word	0x1ffff7e8
 800c5a8:	1ffff7ec 	.word	0x1ffff7ec
 800c5ac:	1ffff7f0 	.word	0x1ffff7f0
 800c5b0:	2000039a 	.word	0x2000039a
 800c5b4:	200003aa 	.word	0x200003aa

0800c5b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b087      	sub	sp, #28
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	75fb      	strb	r3, [r7, #23]
 800c5ce:	e027      	b.n	800c620 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	0f1b      	lsrs	r3, r3, #28
 800c5d4:	2b09      	cmp	r3, #9
 800c5d6:	d80b      	bhi.n	800c5f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	0f1b      	lsrs	r3, r3, #28
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	7dfb      	ldrb	r3, [r7, #23]
 800c5e0:	005b      	lsls	r3, r3, #1
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	440b      	add	r3, r1
 800c5e8:	3230      	adds	r2, #48	; 0x30
 800c5ea:	b2d2      	uxtb	r2, r2
 800c5ec:	701a      	strb	r2, [r3, #0]
 800c5ee:	e00a      	b.n	800c606 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	0f1b      	lsrs	r3, r3, #28
 800c5f4:	b2da      	uxtb	r2, r3
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
 800c5f8:	005b      	lsls	r3, r3, #1
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	440b      	add	r3, r1
 800c600:	3237      	adds	r2, #55	; 0x37
 800c602:	b2d2      	uxtb	r2, r2
 800c604:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	011b      	lsls	r3, r3, #4
 800c60a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c60c:	7dfb      	ldrb	r3, [r7, #23]
 800c60e:	005b      	lsls	r3, r3, #1
 800c610:	3301      	adds	r3, #1
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	4413      	add	r3, r2
 800c616:	2200      	movs	r2, #0
 800c618:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c61a:	7dfb      	ldrb	r3, [r7, #23]
 800c61c:	3301      	adds	r3, #1
 800c61e:	75fb      	strb	r3, [r7, #23]
 800c620:	7dfa      	ldrb	r2, [r7, #23]
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	429a      	cmp	r2, r3
 800c626:	d3d3      	bcc.n	800c5d0 <IntToUnicode+0x18>
  }
}
 800c628:	bf00      	nop
 800c62a:	bf00      	nop
 800c62c:	371c      	adds	r7, #28
 800c62e:	46bd      	mov	sp, r7
 800c630:	bc80      	pop	{r7}
 800c632:	4770      	bx	lr

0800c634 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a11      	ldr	r2, [pc, #68]	; (800c688 <HAL_PCD_MspInit+0x54>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d11b      	bne.n	800c67e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c646:	4b11      	ldr	r3, [pc, #68]	; (800c68c <HAL_PCD_MspInit+0x58>)
 800c648:	69db      	ldr	r3, [r3, #28]
 800c64a:	4a10      	ldr	r2, [pc, #64]	; (800c68c <HAL_PCD_MspInit+0x58>)
 800c64c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c650:	61d3      	str	r3, [r2, #28]
 800c652:	4b0e      	ldr	r3, [pc, #56]	; (800c68c <HAL_PCD_MspInit+0x58>)
 800c654:	69db      	ldr	r3, [r3, #28]
 800c656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c65a:	60fb      	str	r3, [r7, #12]
 800c65c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800c65e:	2200      	movs	r2, #0
 800c660:	2100      	movs	r1, #0
 800c662:	2013      	movs	r0, #19
 800c664:	f7f7 fe79 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800c668:	2013      	movs	r0, #19
 800c66a:	f7f7 fe92 	bl	8004392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c66e:	2200      	movs	r2, #0
 800c670:	2100      	movs	r1, #0
 800c672:	2014      	movs	r0, #20
 800c674:	f7f7 fe71 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c678:	2014      	movs	r0, #20
 800c67a:	f7f7 fe8a 	bl	8004392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c67e:	bf00      	nop
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	40005c00 	.word	0x40005c00
 800c68c:	40021000 	.word	0x40021000

0800c690 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	4610      	mov	r0, r2
 800c6a8:	f7fe fda5 	bl	800b1f6 <USBD_LL_SetupStage>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c6c6:	78fa      	ldrb	r2, [r7, #3]
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	4413      	add	r3, r2
 800c6d0:	00db      	lsls	r3, r3, #3
 800c6d2:	440b      	add	r3, r1
 800c6d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	78fb      	ldrb	r3, [r7, #3]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	f7fe fdd7 	bl	800b290 <USBD_LL_DataOutStage>
}
 800c6e2:	bf00      	nop
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c6fc:	78fa      	ldrb	r2, [r7, #3]
 800c6fe:	6879      	ldr	r1, [r7, #4]
 800c700:	4613      	mov	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	00db      	lsls	r3, r3, #3
 800c708:	440b      	add	r3, r1
 800c70a:	333c      	adds	r3, #60	; 0x3c
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	78fb      	ldrb	r3, [r7, #3]
 800c710:	4619      	mov	r1, r3
 800c712:	f7fe fe2e 	bl	800b372 <USBD_LL_DataInStage>
}
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b082      	sub	sp, #8
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7fe ff3e 	bl	800b5ae <USBD_LL_SOF>
}
 800c732:	bf00      	nop
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b084      	sub	sp, #16
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c742:	2301      	movs	r3, #1
 800c744:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d001      	beq.n	800c752 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c74e:	f7f5 f8af 	bl	80018b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c758:	7bfa      	ldrb	r2, [r7, #15]
 800c75a:	4611      	mov	r1, r2
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7fe feee 	bl	800b53e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c768:	4618      	mov	r0, r3
 800c76a:	f7fe fea7 	bl	800b4bc <USBD_LL_Reset>
}
 800c76e:	bf00      	nop
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
	...

0800c778 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c786:	4618      	mov	r0, r3
 800c788:	f7fe fee8 	bl	800b55c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d005      	beq.n	800c7a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c794:	4b04      	ldr	r3, [pc, #16]	; (800c7a8 <HAL_PCD_SuspendCallback+0x30>)
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	4a03      	ldr	r2, [pc, #12]	; (800c7a8 <HAL_PCD_SuspendCallback+0x30>)
 800c79a:	f043 0306 	orr.w	r3, r3, #6
 800c79e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c7a0:	bf00      	nop
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	e000ed00 	.word	0xe000ed00

0800c7ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fe fee2 	bl	800b584 <USBD_LL_Resume>
}
 800c7c0:	bf00      	nop
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c7d0:	4a28      	ldr	r2, [pc, #160]	; (800c874 <USBD_LL_Init+0xac>)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a26      	ldr	r2, [pc, #152]	; (800c874 <USBD_LL_Init+0xac>)
 800c7dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c7e0:	4b24      	ldr	r3, [pc, #144]	; (800c874 <USBD_LL_Init+0xac>)
 800c7e2:	4a25      	ldr	r2, [pc, #148]	; (800c878 <USBD_LL_Init+0xb0>)
 800c7e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c7e6:	4b23      	ldr	r3, [pc, #140]	; (800c874 <USBD_LL_Init+0xac>)
 800c7e8:	2208      	movs	r2, #8
 800c7ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c7ec:	4b21      	ldr	r3, [pc, #132]	; (800c874 <USBD_LL_Init+0xac>)
 800c7ee:	2202      	movs	r2, #2
 800c7f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c7f2:	4b20      	ldr	r3, [pc, #128]	; (800c874 <USBD_LL_Init+0xac>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c7f8:	4b1e      	ldr	r3, [pc, #120]	; (800c874 <USBD_LL_Init+0xac>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c7fe:	4b1d      	ldr	r3, [pc, #116]	; (800c874 <USBD_LL_Init+0xac>)
 800c800:	2200      	movs	r2, #0
 800c802:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c804:	481b      	ldr	r0, [pc, #108]	; (800c874 <USBD_LL_Init+0xac>)
 800c806:	f7f7 ffbf 	bl	8004788 <HAL_PCD_Init>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c810:	f7f5 f84e 	bl	80018b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c81a:	2318      	movs	r3, #24
 800c81c:	2200      	movs	r2, #0
 800c81e:	2100      	movs	r1, #0
 800c820:	f7f9 fc33 	bl	800608a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c82a:	2358      	movs	r3, #88	; 0x58
 800c82c:	2200      	movs	r2, #0
 800c82e:	2180      	movs	r1, #128	; 0x80
 800c830:	f7f9 fc2b 	bl	800608a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c83a:	23c0      	movs	r3, #192	; 0xc0
 800c83c:	2200      	movs	r2, #0
 800c83e:	2181      	movs	r1, #129	; 0x81
 800c840:	f7f9 fc23 	bl	800608a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c84a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c84e:	2200      	movs	r2, #0
 800c850:	2101      	movs	r1, #1
 800c852:	f7f9 fc1a 	bl	800608a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c85c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c860:	2200      	movs	r2, #0
 800c862:	2182      	movs	r1, #130	; 0x82
 800c864:	f7f9 fc11 	bl	800608a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	200019c4 	.word	0x200019c4
 800c878:	40005c00 	.word	0x40005c00

0800c87c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c884:	2300      	movs	r3, #0
 800c886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c888:	2300      	movs	r3, #0
 800c88a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c892:	4618      	mov	r0, r3
 800c894:	f7f8 f883 	bl	800499e <HAL_PCD_Start>
 800c898:	4603      	mov	r3, r0
 800c89a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 f94e 	bl	800cb40 <USBD_Get_USB_Status>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b084      	sub	sp, #16
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
 800c8ba:	4608      	mov	r0, r1
 800c8bc:	4611      	mov	r1, r2
 800c8be:	461a      	mov	r2, r3
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	70fb      	strb	r3, [r7, #3]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	70bb      	strb	r3, [r7, #2]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c8da:	78bb      	ldrb	r3, [r7, #2]
 800c8dc:	883a      	ldrh	r2, [r7, #0]
 800c8de:	78f9      	ldrb	r1, [r7, #3]
 800c8e0:	f7f8 f9fb 	bl	8004cda <HAL_PCD_EP_Open>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8e8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f000 f928 	bl	800cb40 <USBD_Get_USB_Status>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}

0800c8fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b084      	sub	sp, #16
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
 800c906:	460b      	mov	r3, r1
 800c908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c918:	78fa      	ldrb	r2, [r7, #3]
 800c91a:	4611      	mov	r1, r2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7f8 fa42 	bl	8004da6 <HAL_PCD_EP_Close>
 800c922:	4603      	mov	r3, r0
 800c924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c926:	7bfb      	ldrb	r3, [r7, #15]
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 f909 	bl	800cb40 <USBD_Get_USB_Status>
 800c92e:	4603      	mov	r3, r0
 800c930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c932:	7bbb      	ldrb	r3, [r7, #14]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	460b      	mov	r3, r1
 800c946:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c956:	78fa      	ldrb	r2, [r7, #3]
 800c958:	4611      	mov	r1, r2
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7f8 fb02 	bl	8004f64 <HAL_PCD_EP_SetStall>
 800c960:	4603      	mov	r3, r0
 800c962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c964:	7bfb      	ldrb	r3, [r7, #15]
 800c966:	4618      	mov	r0, r3
 800c968:	f000 f8ea 	bl	800cb40 <USBD_Get_USB_Status>
 800c96c:	4603      	mov	r3, r0
 800c96e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c970:	7bbb      	ldrb	r3, [r7, #14]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b084      	sub	sp, #16
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	460b      	mov	r3, r1
 800c984:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c986:	2300      	movs	r3, #0
 800c988:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c994:	78fa      	ldrb	r2, [r7, #3]
 800c996:	4611      	mov	r1, r2
 800c998:	4618      	mov	r0, r3
 800c99a:	f7f8 fb43 	bl	8005024 <HAL_PCD_EP_ClrStall>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 f8cb 	bl	800cb40 <USBD_Get_USB_Status>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c9ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c9cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	da0c      	bge.n	800c9ee <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c9d4:	78fb      	ldrb	r3, [r7, #3]
 800c9d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9da:	68f9      	ldr	r1, [r7, #12]
 800c9dc:	1c5a      	adds	r2, r3, #1
 800c9de:	4613      	mov	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	4413      	add	r3, r2
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	440b      	add	r3, r1
 800c9e8:	3302      	adds	r3, #2
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	e00b      	b.n	800ca06 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c9ee:	78fb      	ldrb	r3, [r7, #3]
 800c9f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9f4:	68f9      	ldr	r1, [r7, #12]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	4413      	add	r3, r2
 800c9fc:	00db      	lsls	r3, r3, #3
 800c9fe:	440b      	add	r3, r1
 800ca00:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ca04:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bc80      	pop	{r7}
 800ca0e:	4770      	bx	lr

0800ca10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca20:	2300      	movs	r3, #0
 800ca22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca2a:	78fa      	ldrb	r2, [r7, #3]
 800ca2c:	4611      	mov	r1, r2
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7f8 f92e 	bl	8004c90 <HAL_PCD_SetAddress>
 800ca34:	4603      	mov	r3, r0
 800ca36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca38:	7bfb      	ldrb	r3, [r7, #15]
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 f880 	bl	800cb40 <USBD_Get_USB_Status>
 800ca40:	4603      	mov	r3, r0
 800ca42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b086      	sub	sp, #24
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	60f8      	str	r0, [r7, #12]
 800ca56:	607a      	str	r2, [r7, #4]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	72fb      	strb	r3, [r7, #11]
 800ca5e:	4613      	mov	r3, r2
 800ca60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca70:	893b      	ldrh	r3, [r7, #8]
 800ca72:	7af9      	ldrb	r1, [r7, #11]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	f7f8 fa32 	bl	8004ede <HAL_PCD_EP_Transmit>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca7e:	7dfb      	ldrb	r3, [r7, #23]
 800ca80:	4618      	mov	r0, r3
 800ca82:	f000 f85d 	bl	800cb40 <USBD_Get_USB_Status>
 800ca86:	4603      	mov	r3, r0
 800ca88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ca8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b086      	sub	sp, #24
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	607a      	str	r2, [r7, #4]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	460b      	mov	r3, r1
 800caa2:	72fb      	strb	r3, [r7, #11]
 800caa4:	4613      	mov	r3, r2
 800caa6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caa8:	2300      	movs	r3, #0
 800caaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caac:	2300      	movs	r3, #0
 800caae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cab6:	893b      	ldrh	r3, [r7, #8]
 800cab8:	7af9      	ldrb	r1, [r7, #11]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	f7f8 f9bb 	bl	8004e36 <HAL_PCD_EP_Receive>
 800cac0:	4603      	mov	r3, r0
 800cac2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cac4:	7dfb      	ldrb	r3, [r7, #23]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 f83a 	bl	800cb40 <USBD_Get_USB_Status>
 800cacc:	4603      	mov	r3, r0
 800cace:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cad0:	7dbb      	ldrb	r3, [r7, #22]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3718      	adds	r7, #24
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b082      	sub	sp, #8
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	460b      	mov	r3, r1
 800cae4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caec:	78fa      	ldrb	r2, [r7, #3]
 800caee:	4611      	mov	r1, r2
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7f8 f9dd 	bl	8004eb0 <HAL_PCD_EP_GetRxCount>
 800caf6:	4603      	mov	r3, r0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cb08:	4b02      	ldr	r3, [pc, #8]	; (800cb14 <USBD_static_malloc+0x14>)
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bc80      	pop	{r7}
 800cb12:	4770      	bx	lr
 800cb14:	20001cb0 	.word	0x20001cb0

0800cb18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]

}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bc80      	pop	{r7}
 800cb28:	4770      	bx	lr

0800cb2a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb2a:	b480      	push	{r7}
 800cb2c:	b083      	sub	sp, #12
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cb36:	bf00      	nop
 800cb38:	370c      	adds	r7, #12
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bc80      	pop	{r7}
 800cb3e:	4770      	bx	lr

0800cb40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	4603      	mov	r3, r0
 800cb48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb4e:	79fb      	ldrb	r3, [r7, #7]
 800cb50:	2b03      	cmp	r3, #3
 800cb52:	d817      	bhi.n	800cb84 <USBD_Get_USB_Status+0x44>
 800cb54:	a201      	add	r2, pc, #4	; (adr r2, 800cb5c <USBD_Get_USB_Status+0x1c>)
 800cb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb5a:	bf00      	nop
 800cb5c:	0800cb6d 	.word	0x0800cb6d
 800cb60:	0800cb73 	.word	0x0800cb73
 800cb64:	0800cb79 	.word	0x0800cb79
 800cb68:	0800cb7f 	.word	0x0800cb7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb70:	e00b      	b.n	800cb8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb72:	2302      	movs	r3, #2
 800cb74:	73fb      	strb	r3, [r7, #15]
    break;
 800cb76:	e008      	b.n	800cb8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb7c:	e005      	b.n	800cb8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb7e:	2302      	movs	r3, #2
 800cb80:	73fb      	strb	r3, [r7, #15]
    break;
 800cb82:	e002      	b.n	800cb8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cb84:	2302      	movs	r3, #2
 800cb86:	73fb      	strb	r3, [r7, #15]
    break;
 800cb88:	bf00      	nop
  }
  return usb_status;
 800cb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3714      	adds	r7, #20
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bc80      	pop	{r7}
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop

0800cb98 <__errno>:
 800cb98:	4b01      	ldr	r3, [pc, #4]	; (800cba0 <__errno+0x8>)
 800cb9a:	6818      	ldr	r0, [r3, #0]
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	200003b4 	.word	0x200003b4

0800cba4 <__libc_init_array>:
 800cba4:	b570      	push	{r4, r5, r6, lr}
 800cba6:	2600      	movs	r6, #0
 800cba8:	4d0c      	ldr	r5, [pc, #48]	; (800cbdc <__libc_init_array+0x38>)
 800cbaa:	4c0d      	ldr	r4, [pc, #52]	; (800cbe0 <__libc_init_array+0x3c>)
 800cbac:	1b64      	subs	r4, r4, r5
 800cbae:	10a4      	asrs	r4, r4, #2
 800cbb0:	42a6      	cmp	r6, r4
 800cbb2:	d109      	bne.n	800cbc8 <__libc_init_array+0x24>
 800cbb4:	f000 fcd6 	bl	800d564 <_init>
 800cbb8:	2600      	movs	r6, #0
 800cbba:	4d0a      	ldr	r5, [pc, #40]	; (800cbe4 <__libc_init_array+0x40>)
 800cbbc:	4c0a      	ldr	r4, [pc, #40]	; (800cbe8 <__libc_init_array+0x44>)
 800cbbe:	1b64      	subs	r4, r4, r5
 800cbc0:	10a4      	asrs	r4, r4, #2
 800cbc2:	42a6      	cmp	r6, r4
 800cbc4:	d105      	bne.n	800cbd2 <__libc_init_array+0x2e>
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}
 800cbc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbcc:	4798      	blx	r3
 800cbce:	3601      	adds	r6, #1
 800cbd0:	e7ee      	b.n	800cbb0 <__libc_init_array+0xc>
 800cbd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbd6:	4798      	blx	r3
 800cbd8:	3601      	adds	r6, #1
 800cbda:	e7f2      	b.n	800cbc2 <__libc_init_array+0x1e>
 800cbdc:	0800e4d8 	.word	0x0800e4d8
 800cbe0:	0800e4d8 	.word	0x0800e4d8
 800cbe4:	0800e4d8 	.word	0x0800e4d8
 800cbe8:	0800e4dc 	.word	0x0800e4dc

0800cbec <memcpy>:
 800cbec:	440a      	add	r2, r1
 800cbee:	4291      	cmp	r1, r2
 800cbf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cbf4:	d100      	bne.n	800cbf8 <memcpy+0xc>
 800cbf6:	4770      	bx	lr
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbfe:	4291      	cmp	r1, r2
 800cc00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc04:	d1f9      	bne.n	800cbfa <memcpy+0xe>
 800cc06:	bd10      	pop	{r4, pc}

0800cc08 <memset>:
 800cc08:	4603      	mov	r3, r0
 800cc0a:	4402      	add	r2, r0
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d100      	bne.n	800cc12 <memset+0xa>
 800cc10:	4770      	bx	lr
 800cc12:	f803 1b01 	strb.w	r1, [r3], #1
 800cc16:	e7f9      	b.n	800cc0c <memset+0x4>

0800cc18 <sniprintf>:
 800cc18:	b40c      	push	{r2, r3}
 800cc1a:	b530      	push	{r4, r5, lr}
 800cc1c:	4b17      	ldr	r3, [pc, #92]	; (800cc7c <sniprintf+0x64>)
 800cc1e:	1e0c      	subs	r4, r1, #0
 800cc20:	681d      	ldr	r5, [r3, #0]
 800cc22:	b09d      	sub	sp, #116	; 0x74
 800cc24:	da08      	bge.n	800cc38 <sniprintf+0x20>
 800cc26:	238b      	movs	r3, #139	; 0x8b
 800cc28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	b01d      	add	sp, #116	; 0x74
 800cc30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc34:	b002      	add	sp, #8
 800cc36:	4770      	bx	lr
 800cc38:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cc3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc40:	bf0c      	ite	eq
 800cc42:	4623      	moveq	r3, r4
 800cc44:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cc48:	9304      	str	r3, [sp, #16]
 800cc4a:	9307      	str	r3, [sp, #28]
 800cc4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc50:	9002      	str	r0, [sp, #8]
 800cc52:	9006      	str	r0, [sp, #24]
 800cc54:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cc58:	4628      	mov	r0, r5
 800cc5a:	ab21      	add	r3, sp, #132	; 0x84
 800cc5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cc5e:	a902      	add	r1, sp, #8
 800cc60:	9301      	str	r3, [sp, #4]
 800cc62:	f000 f88f 	bl	800cd84 <_svfiprintf_r>
 800cc66:	1c43      	adds	r3, r0, #1
 800cc68:	bfbc      	itt	lt
 800cc6a:	238b      	movlt	r3, #139	; 0x8b
 800cc6c:	602b      	strlt	r3, [r5, #0]
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	d0dd      	beq.n	800cc2e <sniprintf+0x16>
 800cc72:	2200      	movs	r2, #0
 800cc74:	9b02      	ldr	r3, [sp, #8]
 800cc76:	701a      	strb	r2, [r3, #0]
 800cc78:	e7d9      	b.n	800cc2e <sniprintf+0x16>
 800cc7a:	bf00      	nop
 800cc7c:	200003b4 	.word	0x200003b4

0800cc80 <strncmp>:
 800cc80:	4603      	mov	r3, r0
 800cc82:	b510      	push	{r4, lr}
 800cc84:	b172      	cbz	r2, 800cca4 <strncmp+0x24>
 800cc86:	3901      	subs	r1, #1
 800cc88:	1884      	adds	r4, r0, r2
 800cc8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cc92:	4290      	cmp	r0, r2
 800cc94:	d101      	bne.n	800cc9a <strncmp+0x1a>
 800cc96:	42a3      	cmp	r3, r4
 800cc98:	d101      	bne.n	800cc9e <strncmp+0x1e>
 800cc9a:	1a80      	subs	r0, r0, r2
 800cc9c:	bd10      	pop	{r4, pc}
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	d1f3      	bne.n	800cc8a <strncmp+0xa>
 800cca2:	e7fa      	b.n	800cc9a <strncmp+0x1a>
 800cca4:	4610      	mov	r0, r2
 800cca6:	e7f9      	b.n	800cc9c <strncmp+0x1c>

0800cca8 <strncpy>:
 800cca8:	4603      	mov	r3, r0
 800ccaa:	b510      	push	{r4, lr}
 800ccac:	3901      	subs	r1, #1
 800ccae:	b132      	cbz	r2, 800ccbe <strncpy+0x16>
 800ccb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ccb4:	3a01      	subs	r2, #1
 800ccb6:	f803 4b01 	strb.w	r4, [r3], #1
 800ccba:	2c00      	cmp	r4, #0
 800ccbc:	d1f7      	bne.n	800ccae <strncpy+0x6>
 800ccbe:	2100      	movs	r1, #0
 800ccc0:	441a      	add	r2, r3
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d100      	bne.n	800ccc8 <strncpy+0x20>
 800ccc6:	bd10      	pop	{r4, pc}
 800ccc8:	f803 1b01 	strb.w	r1, [r3], #1
 800cccc:	e7f9      	b.n	800ccc2 <strncpy+0x1a>

0800ccce <__ssputs_r>:
 800ccce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd2:	688e      	ldr	r6, [r1, #8]
 800ccd4:	4682      	mov	sl, r0
 800ccd6:	429e      	cmp	r6, r3
 800ccd8:	460c      	mov	r4, r1
 800ccda:	4690      	mov	r8, r2
 800ccdc:	461f      	mov	r7, r3
 800ccde:	d838      	bhi.n	800cd52 <__ssputs_r+0x84>
 800cce0:	898a      	ldrh	r2, [r1, #12]
 800cce2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cce6:	d032      	beq.n	800cd4e <__ssputs_r+0x80>
 800cce8:	6825      	ldr	r5, [r4, #0]
 800ccea:	6909      	ldr	r1, [r1, #16]
 800ccec:	3301      	adds	r3, #1
 800ccee:	eba5 0901 	sub.w	r9, r5, r1
 800ccf2:	6965      	ldr	r5, [r4, #20]
 800ccf4:	444b      	add	r3, r9
 800ccf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccfe:	106d      	asrs	r5, r5, #1
 800cd00:	429d      	cmp	r5, r3
 800cd02:	bf38      	it	cc
 800cd04:	461d      	movcc	r5, r3
 800cd06:	0553      	lsls	r3, r2, #21
 800cd08:	d531      	bpl.n	800cd6e <__ssputs_r+0xa0>
 800cd0a:	4629      	mov	r1, r5
 800cd0c:	f000 fb60 	bl	800d3d0 <_malloc_r>
 800cd10:	4606      	mov	r6, r0
 800cd12:	b950      	cbnz	r0, 800cd2a <__ssputs_r+0x5c>
 800cd14:	230c      	movs	r3, #12
 800cd16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd1a:	f8ca 3000 	str.w	r3, [sl]
 800cd1e:	89a3      	ldrh	r3, [r4, #12]
 800cd20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd24:	81a3      	strh	r3, [r4, #12]
 800cd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd2a:	464a      	mov	r2, r9
 800cd2c:	6921      	ldr	r1, [r4, #16]
 800cd2e:	f7ff ff5d 	bl	800cbec <memcpy>
 800cd32:	89a3      	ldrh	r3, [r4, #12]
 800cd34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd3c:	81a3      	strh	r3, [r4, #12]
 800cd3e:	6126      	str	r6, [r4, #16]
 800cd40:	444e      	add	r6, r9
 800cd42:	6026      	str	r6, [r4, #0]
 800cd44:	463e      	mov	r6, r7
 800cd46:	6165      	str	r5, [r4, #20]
 800cd48:	eba5 0509 	sub.w	r5, r5, r9
 800cd4c:	60a5      	str	r5, [r4, #8]
 800cd4e:	42be      	cmp	r6, r7
 800cd50:	d900      	bls.n	800cd54 <__ssputs_r+0x86>
 800cd52:	463e      	mov	r6, r7
 800cd54:	4632      	mov	r2, r6
 800cd56:	4641      	mov	r1, r8
 800cd58:	6820      	ldr	r0, [r4, #0]
 800cd5a:	f000 fab7 	bl	800d2cc <memmove>
 800cd5e:	68a3      	ldr	r3, [r4, #8]
 800cd60:	2000      	movs	r0, #0
 800cd62:	1b9b      	subs	r3, r3, r6
 800cd64:	60a3      	str	r3, [r4, #8]
 800cd66:	6823      	ldr	r3, [r4, #0]
 800cd68:	4433      	add	r3, r6
 800cd6a:	6023      	str	r3, [r4, #0]
 800cd6c:	e7db      	b.n	800cd26 <__ssputs_r+0x58>
 800cd6e:	462a      	mov	r2, r5
 800cd70:	f000 fba2 	bl	800d4b8 <_realloc_r>
 800cd74:	4606      	mov	r6, r0
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d1e1      	bne.n	800cd3e <__ssputs_r+0x70>
 800cd7a:	4650      	mov	r0, sl
 800cd7c:	6921      	ldr	r1, [r4, #16]
 800cd7e:	f000 fabf 	bl	800d300 <_free_r>
 800cd82:	e7c7      	b.n	800cd14 <__ssputs_r+0x46>

0800cd84 <_svfiprintf_r>:
 800cd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd88:	4698      	mov	r8, r3
 800cd8a:	898b      	ldrh	r3, [r1, #12]
 800cd8c:	4607      	mov	r7, r0
 800cd8e:	061b      	lsls	r3, r3, #24
 800cd90:	460d      	mov	r5, r1
 800cd92:	4614      	mov	r4, r2
 800cd94:	b09d      	sub	sp, #116	; 0x74
 800cd96:	d50e      	bpl.n	800cdb6 <_svfiprintf_r+0x32>
 800cd98:	690b      	ldr	r3, [r1, #16]
 800cd9a:	b963      	cbnz	r3, 800cdb6 <_svfiprintf_r+0x32>
 800cd9c:	2140      	movs	r1, #64	; 0x40
 800cd9e:	f000 fb17 	bl	800d3d0 <_malloc_r>
 800cda2:	6028      	str	r0, [r5, #0]
 800cda4:	6128      	str	r0, [r5, #16]
 800cda6:	b920      	cbnz	r0, 800cdb2 <_svfiprintf_r+0x2e>
 800cda8:	230c      	movs	r3, #12
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdb0:	e0d1      	b.n	800cf56 <_svfiprintf_r+0x1d2>
 800cdb2:	2340      	movs	r3, #64	; 0x40
 800cdb4:	616b      	str	r3, [r5, #20]
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdba:	2320      	movs	r3, #32
 800cdbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdc0:	2330      	movs	r3, #48	; 0x30
 800cdc2:	f04f 0901 	mov.w	r9, #1
 800cdc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cf70 <_svfiprintf_r+0x1ec>
 800cdce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdd2:	4623      	mov	r3, r4
 800cdd4:	469a      	mov	sl, r3
 800cdd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdda:	b10a      	cbz	r2, 800cde0 <_svfiprintf_r+0x5c>
 800cddc:	2a25      	cmp	r2, #37	; 0x25
 800cdde:	d1f9      	bne.n	800cdd4 <_svfiprintf_r+0x50>
 800cde0:	ebba 0b04 	subs.w	fp, sl, r4
 800cde4:	d00b      	beq.n	800cdfe <_svfiprintf_r+0x7a>
 800cde6:	465b      	mov	r3, fp
 800cde8:	4622      	mov	r2, r4
 800cdea:	4629      	mov	r1, r5
 800cdec:	4638      	mov	r0, r7
 800cdee:	f7ff ff6e 	bl	800ccce <__ssputs_r>
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	f000 80aa 	beq.w	800cf4c <_svfiprintf_r+0x1c8>
 800cdf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdfa:	445a      	add	r2, fp
 800cdfc:	9209      	str	r2, [sp, #36]	; 0x24
 800cdfe:	f89a 3000 	ldrb.w	r3, [sl]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 80a2 	beq.w	800cf4c <_svfiprintf_r+0x1c8>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce12:	f10a 0a01 	add.w	sl, sl, #1
 800ce16:	9304      	str	r3, [sp, #16]
 800ce18:	9307      	str	r3, [sp, #28]
 800ce1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce1e:	931a      	str	r3, [sp, #104]	; 0x68
 800ce20:	4654      	mov	r4, sl
 800ce22:	2205      	movs	r2, #5
 800ce24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce28:	4851      	ldr	r0, [pc, #324]	; (800cf70 <_svfiprintf_r+0x1ec>)
 800ce2a:	f000 fa41 	bl	800d2b0 <memchr>
 800ce2e:	9a04      	ldr	r2, [sp, #16]
 800ce30:	b9d8      	cbnz	r0, 800ce6a <_svfiprintf_r+0xe6>
 800ce32:	06d0      	lsls	r0, r2, #27
 800ce34:	bf44      	itt	mi
 800ce36:	2320      	movmi	r3, #32
 800ce38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce3c:	0711      	lsls	r1, r2, #28
 800ce3e:	bf44      	itt	mi
 800ce40:	232b      	movmi	r3, #43	; 0x2b
 800ce42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce46:	f89a 3000 	ldrb.w	r3, [sl]
 800ce4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce4c:	d015      	beq.n	800ce7a <_svfiprintf_r+0xf6>
 800ce4e:	4654      	mov	r4, sl
 800ce50:	2000      	movs	r0, #0
 800ce52:	f04f 0c0a 	mov.w	ip, #10
 800ce56:	9a07      	ldr	r2, [sp, #28]
 800ce58:	4621      	mov	r1, r4
 800ce5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce5e:	3b30      	subs	r3, #48	; 0x30
 800ce60:	2b09      	cmp	r3, #9
 800ce62:	d94e      	bls.n	800cf02 <_svfiprintf_r+0x17e>
 800ce64:	b1b0      	cbz	r0, 800ce94 <_svfiprintf_r+0x110>
 800ce66:	9207      	str	r2, [sp, #28]
 800ce68:	e014      	b.n	800ce94 <_svfiprintf_r+0x110>
 800ce6a:	eba0 0308 	sub.w	r3, r0, r8
 800ce6e:	fa09 f303 	lsl.w	r3, r9, r3
 800ce72:	4313      	orrs	r3, r2
 800ce74:	46a2      	mov	sl, r4
 800ce76:	9304      	str	r3, [sp, #16]
 800ce78:	e7d2      	b.n	800ce20 <_svfiprintf_r+0x9c>
 800ce7a:	9b03      	ldr	r3, [sp, #12]
 800ce7c:	1d19      	adds	r1, r3, #4
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	9103      	str	r1, [sp, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	bfbb      	ittet	lt
 800ce86:	425b      	neglt	r3, r3
 800ce88:	f042 0202 	orrlt.w	r2, r2, #2
 800ce8c:	9307      	strge	r3, [sp, #28]
 800ce8e:	9307      	strlt	r3, [sp, #28]
 800ce90:	bfb8      	it	lt
 800ce92:	9204      	strlt	r2, [sp, #16]
 800ce94:	7823      	ldrb	r3, [r4, #0]
 800ce96:	2b2e      	cmp	r3, #46	; 0x2e
 800ce98:	d10c      	bne.n	800ceb4 <_svfiprintf_r+0x130>
 800ce9a:	7863      	ldrb	r3, [r4, #1]
 800ce9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce9e:	d135      	bne.n	800cf0c <_svfiprintf_r+0x188>
 800cea0:	9b03      	ldr	r3, [sp, #12]
 800cea2:	3402      	adds	r4, #2
 800cea4:	1d1a      	adds	r2, r3, #4
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	9203      	str	r2, [sp, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	bfb8      	it	lt
 800ceae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ceb2:	9305      	str	r3, [sp, #20]
 800ceb4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cf74 <_svfiprintf_r+0x1f0>
 800ceb8:	2203      	movs	r2, #3
 800ceba:	4650      	mov	r0, sl
 800cebc:	7821      	ldrb	r1, [r4, #0]
 800cebe:	f000 f9f7 	bl	800d2b0 <memchr>
 800cec2:	b140      	cbz	r0, 800ced6 <_svfiprintf_r+0x152>
 800cec4:	2340      	movs	r3, #64	; 0x40
 800cec6:	eba0 000a 	sub.w	r0, r0, sl
 800ceca:	fa03 f000 	lsl.w	r0, r3, r0
 800cece:	9b04      	ldr	r3, [sp, #16]
 800ced0:	3401      	adds	r4, #1
 800ced2:	4303      	orrs	r3, r0
 800ced4:	9304      	str	r3, [sp, #16]
 800ced6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceda:	2206      	movs	r2, #6
 800cedc:	4826      	ldr	r0, [pc, #152]	; (800cf78 <_svfiprintf_r+0x1f4>)
 800cede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cee2:	f000 f9e5 	bl	800d2b0 <memchr>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d038      	beq.n	800cf5c <_svfiprintf_r+0x1d8>
 800ceea:	4b24      	ldr	r3, [pc, #144]	; (800cf7c <_svfiprintf_r+0x1f8>)
 800ceec:	bb1b      	cbnz	r3, 800cf36 <_svfiprintf_r+0x1b2>
 800ceee:	9b03      	ldr	r3, [sp, #12]
 800cef0:	3307      	adds	r3, #7
 800cef2:	f023 0307 	bic.w	r3, r3, #7
 800cef6:	3308      	adds	r3, #8
 800cef8:	9303      	str	r3, [sp, #12]
 800cefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cefc:	4433      	add	r3, r6
 800cefe:	9309      	str	r3, [sp, #36]	; 0x24
 800cf00:	e767      	b.n	800cdd2 <_svfiprintf_r+0x4e>
 800cf02:	460c      	mov	r4, r1
 800cf04:	2001      	movs	r0, #1
 800cf06:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf0a:	e7a5      	b.n	800ce58 <_svfiprintf_r+0xd4>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	f04f 0c0a 	mov.w	ip, #10
 800cf12:	4619      	mov	r1, r3
 800cf14:	3401      	adds	r4, #1
 800cf16:	9305      	str	r3, [sp, #20]
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf1e:	3a30      	subs	r2, #48	; 0x30
 800cf20:	2a09      	cmp	r2, #9
 800cf22:	d903      	bls.n	800cf2c <_svfiprintf_r+0x1a8>
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d0c5      	beq.n	800ceb4 <_svfiprintf_r+0x130>
 800cf28:	9105      	str	r1, [sp, #20]
 800cf2a:	e7c3      	b.n	800ceb4 <_svfiprintf_r+0x130>
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	2301      	movs	r3, #1
 800cf30:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf34:	e7f0      	b.n	800cf18 <_svfiprintf_r+0x194>
 800cf36:	ab03      	add	r3, sp, #12
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	462a      	mov	r2, r5
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	4b10      	ldr	r3, [pc, #64]	; (800cf80 <_svfiprintf_r+0x1fc>)
 800cf40:	a904      	add	r1, sp, #16
 800cf42:	f3af 8000 	nop.w
 800cf46:	1c42      	adds	r2, r0, #1
 800cf48:	4606      	mov	r6, r0
 800cf4a:	d1d6      	bne.n	800cefa <_svfiprintf_r+0x176>
 800cf4c:	89ab      	ldrh	r3, [r5, #12]
 800cf4e:	065b      	lsls	r3, r3, #25
 800cf50:	f53f af2c 	bmi.w	800cdac <_svfiprintf_r+0x28>
 800cf54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf56:	b01d      	add	sp, #116	; 0x74
 800cf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5c:	ab03      	add	r3, sp, #12
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	462a      	mov	r2, r5
 800cf62:	4638      	mov	r0, r7
 800cf64:	4b06      	ldr	r3, [pc, #24]	; (800cf80 <_svfiprintf_r+0x1fc>)
 800cf66:	a904      	add	r1, sp, #16
 800cf68:	f000 f87c 	bl	800d064 <_printf_i>
 800cf6c:	e7eb      	b.n	800cf46 <_svfiprintf_r+0x1c2>
 800cf6e:	bf00      	nop
 800cf70:	0800e4a3 	.word	0x0800e4a3
 800cf74:	0800e4a9 	.word	0x0800e4a9
 800cf78:	0800e4ad 	.word	0x0800e4ad
 800cf7c:	00000000 	.word	0x00000000
 800cf80:	0800cccf 	.word	0x0800cccf

0800cf84 <_printf_common>:
 800cf84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf88:	4616      	mov	r6, r2
 800cf8a:	4699      	mov	r9, r3
 800cf8c:	688a      	ldr	r2, [r1, #8]
 800cf8e:	690b      	ldr	r3, [r1, #16]
 800cf90:	4607      	mov	r7, r0
 800cf92:	4293      	cmp	r3, r2
 800cf94:	bfb8      	it	lt
 800cf96:	4613      	movlt	r3, r2
 800cf98:	6033      	str	r3, [r6, #0]
 800cf9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf9e:	460c      	mov	r4, r1
 800cfa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfa4:	b10a      	cbz	r2, 800cfaa <_printf_common+0x26>
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	6033      	str	r3, [r6, #0]
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	0699      	lsls	r1, r3, #26
 800cfae:	bf42      	ittt	mi
 800cfb0:	6833      	ldrmi	r3, [r6, #0]
 800cfb2:	3302      	addmi	r3, #2
 800cfb4:	6033      	strmi	r3, [r6, #0]
 800cfb6:	6825      	ldr	r5, [r4, #0]
 800cfb8:	f015 0506 	ands.w	r5, r5, #6
 800cfbc:	d106      	bne.n	800cfcc <_printf_common+0x48>
 800cfbe:	f104 0a19 	add.w	sl, r4, #25
 800cfc2:	68e3      	ldr	r3, [r4, #12]
 800cfc4:	6832      	ldr	r2, [r6, #0]
 800cfc6:	1a9b      	subs	r3, r3, r2
 800cfc8:	42ab      	cmp	r3, r5
 800cfca:	dc28      	bgt.n	800d01e <_printf_common+0x9a>
 800cfcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfd0:	1e13      	subs	r3, r2, #0
 800cfd2:	6822      	ldr	r2, [r4, #0]
 800cfd4:	bf18      	it	ne
 800cfd6:	2301      	movne	r3, #1
 800cfd8:	0692      	lsls	r2, r2, #26
 800cfda:	d42d      	bmi.n	800d038 <_printf_common+0xb4>
 800cfdc:	4649      	mov	r1, r9
 800cfde:	4638      	mov	r0, r7
 800cfe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfe4:	47c0      	blx	r8
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	d020      	beq.n	800d02c <_printf_common+0xa8>
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	68e5      	ldr	r5, [r4, #12]
 800cfee:	f003 0306 	and.w	r3, r3, #6
 800cff2:	2b04      	cmp	r3, #4
 800cff4:	bf18      	it	ne
 800cff6:	2500      	movne	r5, #0
 800cff8:	6832      	ldr	r2, [r6, #0]
 800cffa:	f04f 0600 	mov.w	r6, #0
 800cffe:	68a3      	ldr	r3, [r4, #8]
 800d000:	bf08      	it	eq
 800d002:	1aad      	subeq	r5, r5, r2
 800d004:	6922      	ldr	r2, [r4, #16]
 800d006:	bf08      	it	eq
 800d008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d00c:	4293      	cmp	r3, r2
 800d00e:	bfc4      	itt	gt
 800d010:	1a9b      	subgt	r3, r3, r2
 800d012:	18ed      	addgt	r5, r5, r3
 800d014:	341a      	adds	r4, #26
 800d016:	42b5      	cmp	r5, r6
 800d018:	d11a      	bne.n	800d050 <_printf_common+0xcc>
 800d01a:	2000      	movs	r0, #0
 800d01c:	e008      	b.n	800d030 <_printf_common+0xac>
 800d01e:	2301      	movs	r3, #1
 800d020:	4652      	mov	r2, sl
 800d022:	4649      	mov	r1, r9
 800d024:	4638      	mov	r0, r7
 800d026:	47c0      	blx	r8
 800d028:	3001      	adds	r0, #1
 800d02a:	d103      	bne.n	800d034 <_printf_common+0xb0>
 800d02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d034:	3501      	adds	r5, #1
 800d036:	e7c4      	b.n	800cfc2 <_printf_common+0x3e>
 800d038:	2030      	movs	r0, #48	; 0x30
 800d03a:	18e1      	adds	r1, r4, r3
 800d03c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d040:	1c5a      	adds	r2, r3, #1
 800d042:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d046:	4422      	add	r2, r4
 800d048:	3302      	adds	r3, #2
 800d04a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d04e:	e7c5      	b.n	800cfdc <_printf_common+0x58>
 800d050:	2301      	movs	r3, #1
 800d052:	4622      	mov	r2, r4
 800d054:	4649      	mov	r1, r9
 800d056:	4638      	mov	r0, r7
 800d058:	47c0      	blx	r8
 800d05a:	3001      	adds	r0, #1
 800d05c:	d0e6      	beq.n	800d02c <_printf_common+0xa8>
 800d05e:	3601      	adds	r6, #1
 800d060:	e7d9      	b.n	800d016 <_printf_common+0x92>
	...

0800d064 <_printf_i>:
 800d064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d068:	7e0f      	ldrb	r7, [r1, #24]
 800d06a:	4691      	mov	r9, r2
 800d06c:	2f78      	cmp	r7, #120	; 0x78
 800d06e:	4680      	mov	r8, r0
 800d070:	460c      	mov	r4, r1
 800d072:	469a      	mov	sl, r3
 800d074:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d076:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d07a:	d807      	bhi.n	800d08c <_printf_i+0x28>
 800d07c:	2f62      	cmp	r7, #98	; 0x62
 800d07e:	d80a      	bhi.n	800d096 <_printf_i+0x32>
 800d080:	2f00      	cmp	r7, #0
 800d082:	f000 80d9 	beq.w	800d238 <_printf_i+0x1d4>
 800d086:	2f58      	cmp	r7, #88	; 0x58
 800d088:	f000 80a4 	beq.w	800d1d4 <_printf_i+0x170>
 800d08c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d094:	e03a      	b.n	800d10c <_printf_i+0xa8>
 800d096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d09a:	2b15      	cmp	r3, #21
 800d09c:	d8f6      	bhi.n	800d08c <_printf_i+0x28>
 800d09e:	a101      	add	r1, pc, #4	; (adr r1, 800d0a4 <_printf_i+0x40>)
 800d0a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0a4:	0800d0fd 	.word	0x0800d0fd
 800d0a8:	0800d111 	.word	0x0800d111
 800d0ac:	0800d08d 	.word	0x0800d08d
 800d0b0:	0800d08d 	.word	0x0800d08d
 800d0b4:	0800d08d 	.word	0x0800d08d
 800d0b8:	0800d08d 	.word	0x0800d08d
 800d0bc:	0800d111 	.word	0x0800d111
 800d0c0:	0800d08d 	.word	0x0800d08d
 800d0c4:	0800d08d 	.word	0x0800d08d
 800d0c8:	0800d08d 	.word	0x0800d08d
 800d0cc:	0800d08d 	.word	0x0800d08d
 800d0d0:	0800d21f 	.word	0x0800d21f
 800d0d4:	0800d141 	.word	0x0800d141
 800d0d8:	0800d201 	.word	0x0800d201
 800d0dc:	0800d08d 	.word	0x0800d08d
 800d0e0:	0800d08d 	.word	0x0800d08d
 800d0e4:	0800d241 	.word	0x0800d241
 800d0e8:	0800d08d 	.word	0x0800d08d
 800d0ec:	0800d141 	.word	0x0800d141
 800d0f0:	0800d08d 	.word	0x0800d08d
 800d0f4:	0800d08d 	.word	0x0800d08d
 800d0f8:	0800d209 	.word	0x0800d209
 800d0fc:	682b      	ldr	r3, [r5, #0]
 800d0fe:	1d1a      	adds	r2, r3, #4
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	602a      	str	r2, [r5, #0]
 800d104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d10c:	2301      	movs	r3, #1
 800d10e:	e0a4      	b.n	800d25a <_printf_i+0x1f6>
 800d110:	6820      	ldr	r0, [r4, #0]
 800d112:	6829      	ldr	r1, [r5, #0]
 800d114:	0606      	lsls	r6, r0, #24
 800d116:	f101 0304 	add.w	r3, r1, #4
 800d11a:	d50a      	bpl.n	800d132 <_printf_i+0xce>
 800d11c:	680e      	ldr	r6, [r1, #0]
 800d11e:	602b      	str	r3, [r5, #0]
 800d120:	2e00      	cmp	r6, #0
 800d122:	da03      	bge.n	800d12c <_printf_i+0xc8>
 800d124:	232d      	movs	r3, #45	; 0x2d
 800d126:	4276      	negs	r6, r6
 800d128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d12c:	230a      	movs	r3, #10
 800d12e:	485e      	ldr	r0, [pc, #376]	; (800d2a8 <_printf_i+0x244>)
 800d130:	e019      	b.n	800d166 <_printf_i+0x102>
 800d132:	680e      	ldr	r6, [r1, #0]
 800d134:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d138:	602b      	str	r3, [r5, #0]
 800d13a:	bf18      	it	ne
 800d13c:	b236      	sxthne	r6, r6
 800d13e:	e7ef      	b.n	800d120 <_printf_i+0xbc>
 800d140:	682b      	ldr	r3, [r5, #0]
 800d142:	6820      	ldr	r0, [r4, #0]
 800d144:	1d19      	adds	r1, r3, #4
 800d146:	6029      	str	r1, [r5, #0]
 800d148:	0601      	lsls	r1, r0, #24
 800d14a:	d501      	bpl.n	800d150 <_printf_i+0xec>
 800d14c:	681e      	ldr	r6, [r3, #0]
 800d14e:	e002      	b.n	800d156 <_printf_i+0xf2>
 800d150:	0646      	lsls	r6, r0, #25
 800d152:	d5fb      	bpl.n	800d14c <_printf_i+0xe8>
 800d154:	881e      	ldrh	r6, [r3, #0]
 800d156:	2f6f      	cmp	r7, #111	; 0x6f
 800d158:	bf0c      	ite	eq
 800d15a:	2308      	moveq	r3, #8
 800d15c:	230a      	movne	r3, #10
 800d15e:	4852      	ldr	r0, [pc, #328]	; (800d2a8 <_printf_i+0x244>)
 800d160:	2100      	movs	r1, #0
 800d162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d166:	6865      	ldr	r5, [r4, #4]
 800d168:	2d00      	cmp	r5, #0
 800d16a:	bfa8      	it	ge
 800d16c:	6821      	ldrge	r1, [r4, #0]
 800d16e:	60a5      	str	r5, [r4, #8]
 800d170:	bfa4      	itt	ge
 800d172:	f021 0104 	bicge.w	r1, r1, #4
 800d176:	6021      	strge	r1, [r4, #0]
 800d178:	b90e      	cbnz	r6, 800d17e <_printf_i+0x11a>
 800d17a:	2d00      	cmp	r5, #0
 800d17c:	d04d      	beq.n	800d21a <_printf_i+0x1b6>
 800d17e:	4615      	mov	r5, r2
 800d180:	fbb6 f1f3 	udiv	r1, r6, r3
 800d184:	fb03 6711 	mls	r7, r3, r1, r6
 800d188:	5dc7      	ldrb	r7, [r0, r7]
 800d18a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d18e:	4637      	mov	r7, r6
 800d190:	42bb      	cmp	r3, r7
 800d192:	460e      	mov	r6, r1
 800d194:	d9f4      	bls.n	800d180 <_printf_i+0x11c>
 800d196:	2b08      	cmp	r3, #8
 800d198:	d10b      	bne.n	800d1b2 <_printf_i+0x14e>
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	07de      	lsls	r6, r3, #31
 800d19e:	d508      	bpl.n	800d1b2 <_printf_i+0x14e>
 800d1a0:	6923      	ldr	r3, [r4, #16]
 800d1a2:	6861      	ldr	r1, [r4, #4]
 800d1a4:	4299      	cmp	r1, r3
 800d1a6:	bfde      	ittt	le
 800d1a8:	2330      	movle	r3, #48	; 0x30
 800d1aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d1b2:	1b52      	subs	r2, r2, r5
 800d1b4:	6122      	str	r2, [r4, #16]
 800d1b6:	464b      	mov	r3, r9
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	f8cd a000 	str.w	sl, [sp]
 800d1c0:	aa03      	add	r2, sp, #12
 800d1c2:	f7ff fedf 	bl	800cf84 <_printf_common>
 800d1c6:	3001      	adds	r0, #1
 800d1c8:	d14c      	bne.n	800d264 <_printf_i+0x200>
 800d1ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1ce:	b004      	add	sp, #16
 800d1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d4:	4834      	ldr	r0, [pc, #208]	; (800d2a8 <_printf_i+0x244>)
 800d1d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d1da:	6829      	ldr	r1, [r5, #0]
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1e2:	6029      	str	r1, [r5, #0]
 800d1e4:	061d      	lsls	r5, r3, #24
 800d1e6:	d514      	bpl.n	800d212 <_printf_i+0x1ae>
 800d1e8:	07df      	lsls	r7, r3, #31
 800d1ea:	bf44      	itt	mi
 800d1ec:	f043 0320 	orrmi.w	r3, r3, #32
 800d1f0:	6023      	strmi	r3, [r4, #0]
 800d1f2:	b91e      	cbnz	r6, 800d1fc <_printf_i+0x198>
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	f023 0320 	bic.w	r3, r3, #32
 800d1fa:	6023      	str	r3, [r4, #0]
 800d1fc:	2310      	movs	r3, #16
 800d1fe:	e7af      	b.n	800d160 <_printf_i+0xfc>
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	f043 0320 	orr.w	r3, r3, #32
 800d206:	6023      	str	r3, [r4, #0]
 800d208:	2378      	movs	r3, #120	; 0x78
 800d20a:	4828      	ldr	r0, [pc, #160]	; (800d2ac <_printf_i+0x248>)
 800d20c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d210:	e7e3      	b.n	800d1da <_printf_i+0x176>
 800d212:	0659      	lsls	r1, r3, #25
 800d214:	bf48      	it	mi
 800d216:	b2b6      	uxthmi	r6, r6
 800d218:	e7e6      	b.n	800d1e8 <_printf_i+0x184>
 800d21a:	4615      	mov	r5, r2
 800d21c:	e7bb      	b.n	800d196 <_printf_i+0x132>
 800d21e:	682b      	ldr	r3, [r5, #0]
 800d220:	6826      	ldr	r6, [r4, #0]
 800d222:	1d18      	adds	r0, r3, #4
 800d224:	6961      	ldr	r1, [r4, #20]
 800d226:	6028      	str	r0, [r5, #0]
 800d228:	0635      	lsls	r5, r6, #24
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	d501      	bpl.n	800d232 <_printf_i+0x1ce>
 800d22e:	6019      	str	r1, [r3, #0]
 800d230:	e002      	b.n	800d238 <_printf_i+0x1d4>
 800d232:	0670      	lsls	r0, r6, #25
 800d234:	d5fb      	bpl.n	800d22e <_printf_i+0x1ca>
 800d236:	8019      	strh	r1, [r3, #0]
 800d238:	2300      	movs	r3, #0
 800d23a:	4615      	mov	r5, r2
 800d23c:	6123      	str	r3, [r4, #16]
 800d23e:	e7ba      	b.n	800d1b6 <_printf_i+0x152>
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	2100      	movs	r1, #0
 800d244:	1d1a      	adds	r2, r3, #4
 800d246:	602a      	str	r2, [r5, #0]
 800d248:	681d      	ldr	r5, [r3, #0]
 800d24a:	6862      	ldr	r2, [r4, #4]
 800d24c:	4628      	mov	r0, r5
 800d24e:	f000 f82f 	bl	800d2b0 <memchr>
 800d252:	b108      	cbz	r0, 800d258 <_printf_i+0x1f4>
 800d254:	1b40      	subs	r0, r0, r5
 800d256:	6060      	str	r0, [r4, #4]
 800d258:	6863      	ldr	r3, [r4, #4]
 800d25a:	6123      	str	r3, [r4, #16]
 800d25c:	2300      	movs	r3, #0
 800d25e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d262:	e7a8      	b.n	800d1b6 <_printf_i+0x152>
 800d264:	462a      	mov	r2, r5
 800d266:	4649      	mov	r1, r9
 800d268:	4640      	mov	r0, r8
 800d26a:	6923      	ldr	r3, [r4, #16]
 800d26c:	47d0      	blx	sl
 800d26e:	3001      	adds	r0, #1
 800d270:	d0ab      	beq.n	800d1ca <_printf_i+0x166>
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	079b      	lsls	r3, r3, #30
 800d276:	d413      	bmi.n	800d2a0 <_printf_i+0x23c>
 800d278:	68e0      	ldr	r0, [r4, #12]
 800d27a:	9b03      	ldr	r3, [sp, #12]
 800d27c:	4298      	cmp	r0, r3
 800d27e:	bfb8      	it	lt
 800d280:	4618      	movlt	r0, r3
 800d282:	e7a4      	b.n	800d1ce <_printf_i+0x16a>
 800d284:	2301      	movs	r3, #1
 800d286:	4632      	mov	r2, r6
 800d288:	4649      	mov	r1, r9
 800d28a:	4640      	mov	r0, r8
 800d28c:	47d0      	blx	sl
 800d28e:	3001      	adds	r0, #1
 800d290:	d09b      	beq.n	800d1ca <_printf_i+0x166>
 800d292:	3501      	adds	r5, #1
 800d294:	68e3      	ldr	r3, [r4, #12]
 800d296:	9903      	ldr	r1, [sp, #12]
 800d298:	1a5b      	subs	r3, r3, r1
 800d29a:	42ab      	cmp	r3, r5
 800d29c:	dcf2      	bgt.n	800d284 <_printf_i+0x220>
 800d29e:	e7eb      	b.n	800d278 <_printf_i+0x214>
 800d2a0:	2500      	movs	r5, #0
 800d2a2:	f104 0619 	add.w	r6, r4, #25
 800d2a6:	e7f5      	b.n	800d294 <_printf_i+0x230>
 800d2a8:	0800e4b4 	.word	0x0800e4b4
 800d2ac:	0800e4c5 	.word	0x0800e4c5

0800d2b0 <memchr>:
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	b510      	push	{r4, lr}
 800d2b4:	b2c9      	uxtb	r1, r1
 800d2b6:	4402      	add	r2, r0
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	d101      	bne.n	800d2c2 <memchr+0x12>
 800d2be:	2000      	movs	r0, #0
 800d2c0:	e003      	b.n	800d2ca <memchr+0x1a>
 800d2c2:	7804      	ldrb	r4, [r0, #0]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	428c      	cmp	r4, r1
 800d2c8:	d1f6      	bne.n	800d2b8 <memchr+0x8>
 800d2ca:	bd10      	pop	{r4, pc}

0800d2cc <memmove>:
 800d2cc:	4288      	cmp	r0, r1
 800d2ce:	b510      	push	{r4, lr}
 800d2d0:	eb01 0402 	add.w	r4, r1, r2
 800d2d4:	d902      	bls.n	800d2dc <memmove+0x10>
 800d2d6:	4284      	cmp	r4, r0
 800d2d8:	4623      	mov	r3, r4
 800d2da:	d807      	bhi.n	800d2ec <memmove+0x20>
 800d2dc:	1e43      	subs	r3, r0, #1
 800d2de:	42a1      	cmp	r1, r4
 800d2e0:	d008      	beq.n	800d2f4 <memmove+0x28>
 800d2e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2ea:	e7f8      	b.n	800d2de <memmove+0x12>
 800d2ec:	4601      	mov	r1, r0
 800d2ee:	4402      	add	r2, r0
 800d2f0:	428a      	cmp	r2, r1
 800d2f2:	d100      	bne.n	800d2f6 <memmove+0x2a>
 800d2f4:	bd10      	pop	{r4, pc}
 800d2f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2fe:	e7f7      	b.n	800d2f0 <memmove+0x24>

0800d300 <_free_r>:
 800d300:	b538      	push	{r3, r4, r5, lr}
 800d302:	4605      	mov	r5, r0
 800d304:	2900      	cmp	r1, #0
 800d306:	d040      	beq.n	800d38a <_free_r+0x8a>
 800d308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d30c:	1f0c      	subs	r4, r1, #4
 800d30e:	2b00      	cmp	r3, #0
 800d310:	bfb8      	it	lt
 800d312:	18e4      	addlt	r4, r4, r3
 800d314:	f000 f910 	bl	800d538 <__malloc_lock>
 800d318:	4a1c      	ldr	r2, [pc, #112]	; (800d38c <_free_r+0x8c>)
 800d31a:	6813      	ldr	r3, [r2, #0]
 800d31c:	b933      	cbnz	r3, 800d32c <_free_r+0x2c>
 800d31e:	6063      	str	r3, [r4, #4]
 800d320:	6014      	str	r4, [r2, #0]
 800d322:	4628      	mov	r0, r5
 800d324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d328:	f000 b90c 	b.w	800d544 <__malloc_unlock>
 800d32c:	42a3      	cmp	r3, r4
 800d32e:	d908      	bls.n	800d342 <_free_r+0x42>
 800d330:	6820      	ldr	r0, [r4, #0]
 800d332:	1821      	adds	r1, r4, r0
 800d334:	428b      	cmp	r3, r1
 800d336:	bf01      	itttt	eq
 800d338:	6819      	ldreq	r1, [r3, #0]
 800d33a:	685b      	ldreq	r3, [r3, #4]
 800d33c:	1809      	addeq	r1, r1, r0
 800d33e:	6021      	streq	r1, [r4, #0]
 800d340:	e7ed      	b.n	800d31e <_free_r+0x1e>
 800d342:	461a      	mov	r2, r3
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	b10b      	cbz	r3, 800d34c <_free_r+0x4c>
 800d348:	42a3      	cmp	r3, r4
 800d34a:	d9fa      	bls.n	800d342 <_free_r+0x42>
 800d34c:	6811      	ldr	r1, [r2, #0]
 800d34e:	1850      	adds	r0, r2, r1
 800d350:	42a0      	cmp	r0, r4
 800d352:	d10b      	bne.n	800d36c <_free_r+0x6c>
 800d354:	6820      	ldr	r0, [r4, #0]
 800d356:	4401      	add	r1, r0
 800d358:	1850      	adds	r0, r2, r1
 800d35a:	4283      	cmp	r3, r0
 800d35c:	6011      	str	r1, [r2, #0]
 800d35e:	d1e0      	bne.n	800d322 <_free_r+0x22>
 800d360:	6818      	ldr	r0, [r3, #0]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	4401      	add	r1, r0
 800d366:	6011      	str	r1, [r2, #0]
 800d368:	6053      	str	r3, [r2, #4]
 800d36a:	e7da      	b.n	800d322 <_free_r+0x22>
 800d36c:	d902      	bls.n	800d374 <_free_r+0x74>
 800d36e:	230c      	movs	r3, #12
 800d370:	602b      	str	r3, [r5, #0]
 800d372:	e7d6      	b.n	800d322 <_free_r+0x22>
 800d374:	6820      	ldr	r0, [r4, #0]
 800d376:	1821      	adds	r1, r4, r0
 800d378:	428b      	cmp	r3, r1
 800d37a:	bf01      	itttt	eq
 800d37c:	6819      	ldreq	r1, [r3, #0]
 800d37e:	685b      	ldreq	r3, [r3, #4]
 800d380:	1809      	addeq	r1, r1, r0
 800d382:	6021      	streq	r1, [r4, #0]
 800d384:	6063      	str	r3, [r4, #4]
 800d386:	6054      	str	r4, [r2, #4]
 800d388:	e7cb      	b.n	800d322 <_free_r+0x22>
 800d38a:	bd38      	pop	{r3, r4, r5, pc}
 800d38c:	20001ed0 	.word	0x20001ed0

0800d390 <sbrk_aligned>:
 800d390:	b570      	push	{r4, r5, r6, lr}
 800d392:	4e0e      	ldr	r6, [pc, #56]	; (800d3cc <sbrk_aligned+0x3c>)
 800d394:	460c      	mov	r4, r1
 800d396:	6831      	ldr	r1, [r6, #0]
 800d398:	4605      	mov	r5, r0
 800d39a:	b911      	cbnz	r1, 800d3a2 <sbrk_aligned+0x12>
 800d39c:	f000 f8bc 	bl	800d518 <_sbrk_r>
 800d3a0:	6030      	str	r0, [r6, #0]
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	4628      	mov	r0, r5
 800d3a6:	f000 f8b7 	bl	800d518 <_sbrk_r>
 800d3aa:	1c43      	adds	r3, r0, #1
 800d3ac:	d00a      	beq.n	800d3c4 <sbrk_aligned+0x34>
 800d3ae:	1cc4      	adds	r4, r0, #3
 800d3b0:	f024 0403 	bic.w	r4, r4, #3
 800d3b4:	42a0      	cmp	r0, r4
 800d3b6:	d007      	beq.n	800d3c8 <sbrk_aligned+0x38>
 800d3b8:	1a21      	subs	r1, r4, r0
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	f000 f8ac 	bl	800d518 <_sbrk_r>
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	d101      	bne.n	800d3c8 <sbrk_aligned+0x38>
 800d3c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}
 800d3cc:	20001ed4 	.word	0x20001ed4

0800d3d0 <_malloc_r>:
 800d3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d4:	1ccd      	adds	r5, r1, #3
 800d3d6:	f025 0503 	bic.w	r5, r5, #3
 800d3da:	3508      	adds	r5, #8
 800d3dc:	2d0c      	cmp	r5, #12
 800d3de:	bf38      	it	cc
 800d3e0:	250c      	movcc	r5, #12
 800d3e2:	2d00      	cmp	r5, #0
 800d3e4:	4607      	mov	r7, r0
 800d3e6:	db01      	blt.n	800d3ec <_malloc_r+0x1c>
 800d3e8:	42a9      	cmp	r1, r5
 800d3ea:	d905      	bls.n	800d3f8 <_malloc_r+0x28>
 800d3ec:	230c      	movs	r3, #12
 800d3ee:	2600      	movs	r6, #0
 800d3f0:	603b      	str	r3, [r7, #0]
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f8:	4e2e      	ldr	r6, [pc, #184]	; (800d4b4 <_malloc_r+0xe4>)
 800d3fa:	f000 f89d 	bl	800d538 <__malloc_lock>
 800d3fe:	6833      	ldr	r3, [r6, #0]
 800d400:	461c      	mov	r4, r3
 800d402:	bb34      	cbnz	r4, 800d452 <_malloc_r+0x82>
 800d404:	4629      	mov	r1, r5
 800d406:	4638      	mov	r0, r7
 800d408:	f7ff ffc2 	bl	800d390 <sbrk_aligned>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	4604      	mov	r4, r0
 800d410:	d14d      	bne.n	800d4ae <_malloc_r+0xde>
 800d412:	6834      	ldr	r4, [r6, #0]
 800d414:	4626      	mov	r6, r4
 800d416:	2e00      	cmp	r6, #0
 800d418:	d140      	bne.n	800d49c <_malloc_r+0xcc>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	4631      	mov	r1, r6
 800d41e:	4638      	mov	r0, r7
 800d420:	eb04 0803 	add.w	r8, r4, r3
 800d424:	f000 f878 	bl	800d518 <_sbrk_r>
 800d428:	4580      	cmp	r8, r0
 800d42a:	d13a      	bne.n	800d4a2 <_malloc_r+0xd2>
 800d42c:	6821      	ldr	r1, [r4, #0]
 800d42e:	3503      	adds	r5, #3
 800d430:	1a6d      	subs	r5, r5, r1
 800d432:	f025 0503 	bic.w	r5, r5, #3
 800d436:	3508      	adds	r5, #8
 800d438:	2d0c      	cmp	r5, #12
 800d43a:	bf38      	it	cc
 800d43c:	250c      	movcc	r5, #12
 800d43e:	4638      	mov	r0, r7
 800d440:	4629      	mov	r1, r5
 800d442:	f7ff ffa5 	bl	800d390 <sbrk_aligned>
 800d446:	3001      	adds	r0, #1
 800d448:	d02b      	beq.n	800d4a2 <_malloc_r+0xd2>
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	442b      	add	r3, r5
 800d44e:	6023      	str	r3, [r4, #0]
 800d450:	e00e      	b.n	800d470 <_malloc_r+0xa0>
 800d452:	6822      	ldr	r2, [r4, #0]
 800d454:	1b52      	subs	r2, r2, r5
 800d456:	d41e      	bmi.n	800d496 <_malloc_r+0xc6>
 800d458:	2a0b      	cmp	r2, #11
 800d45a:	d916      	bls.n	800d48a <_malloc_r+0xba>
 800d45c:	1961      	adds	r1, r4, r5
 800d45e:	42a3      	cmp	r3, r4
 800d460:	6025      	str	r5, [r4, #0]
 800d462:	bf18      	it	ne
 800d464:	6059      	strne	r1, [r3, #4]
 800d466:	6863      	ldr	r3, [r4, #4]
 800d468:	bf08      	it	eq
 800d46a:	6031      	streq	r1, [r6, #0]
 800d46c:	5162      	str	r2, [r4, r5]
 800d46e:	604b      	str	r3, [r1, #4]
 800d470:	4638      	mov	r0, r7
 800d472:	f104 060b 	add.w	r6, r4, #11
 800d476:	f000 f865 	bl	800d544 <__malloc_unlock>
 800d47a:	f026 0607 	bic.w	r6, r6, #7
 800d47e:	1d23      	adds	r3, r4, #4
 800d480:	1af2      	subs	r2, r6, r3
 800d482:	d0b6      	beq.n	800d3f2 <_malloc_r+0x22>
 800d484:	1b9b      	subs	r3, r3, r6
 800d486:	50a3      	str	r3, [r4, r2]
 800d488:	e7b3      	b.n	800d3f2 <_malloc_r+0x22>
 800d48a:	6862      	ldr	r2, [r4, #4]
 800d48c:	42a3      	cmp	r3, r4
 800d48e:	bf0c      	ite	eq
 800d490:	6032      	streq	r2, [r6, #0]
 800d492:	605a      	strne	r2, [r3, #4]
 800d494:	e7ec      	b.n	800d470 <_malloc_r+0xa0>
 800d496:	4623      	mov	r3, r4
 800d498:	6864      	ldr	r4, [r4, #4]
 800d49a:	e7b2      	b.n	800d402 <_malloc_r+0x32>
 800d49c:	4634      	mov	r4, r6
 800d49e:	6876      	ldr	r6, [r6, #4]
 800d4a0:	e7b9      	b.n	800d416 <_malloc_r+0x46>
 800d4a2:	230c      	movs	r3, #12
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	603b      	str	r3, [r7, #0]
 800d4a8:	f000 f84c 	bl	800d544 <__malloc_unlock>
 800d4ac:	e7a1      	b.n	800d3f2 <_malloc_r+0x22>
 800d4ae:	6025      	str	r5, [r4, #0]
 800d4b0:	e7de      	b.n	800d470 <_malloc_r+0xa0>
 800d4b2:	bf00      	nop
 800d4b4:	20001ed0 	.word	0x20001ed0

0800d4b8 <_realloc_r>:
 800d4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4bc:	4680      	mov	r8, r0
 800d4be:	4614      	mov	r4, r2
 800d4c0:	460e      	mov	r6, r1
 800d4c2:	b921      	cbnz	r1, 800d4ce <_realloc_r+0x16>
 800d4c4:	4611      	mov	r1, r2
 800d4c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ca:	f7ff bf81 	b.w	800d3d0 <_malloc_r>
 800d4ce:	b92a      	cbnz	r2, 800d4dc <_realloc_r+0x24>
 800d4d0:	f7ff ff16 	bl	800d300 <_free_r>
 800d4d4:	4625      	mov	r5, r4
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4dc:	f000 f838 	bl	800d550 <_malloc_usable_size_r>
 800d4e0:	4284      	cmp	r4, r0
 800d4e2:	4607      	mov	r7, r0
 800d4e4:	d802      	bhi.n	800d4ec <_realloc_r+0x34>
 800d4e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4ea:	d812      	bhi.n	800d512 <_realloc_r+0x5a>
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4640      	mov	r0, r8
 800d4f0:	f7ff ff6e 	bl	800d3d0 <_malloc_r>
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d0ed      	beq.n	800d4d6 <_realloc_r+0x1e>
 800d4fa:	42bc      	cmp	r4, r7
 800d4fc:	4622      	mov	r2, r4
 800d4fe:	4631      	mov	r1, r6
 800d500:	bf28      	it	cs
 800d502:	463a      	movcs	r2, r7
 800d504:	f7ff fb72 	bl	800cbec <memcpy>
 800d508:	4631      	mov	r1, r6
 800d50a:	4640      	mov	r0, r8
 800d50c:	f7ff fef8 	bl	800d300 <_free_r>
 800d510:	e7e1      	b.n	800d4d6 <_realloc_r+0x1e>
 800d512:	4635      	mov	r5, r6
 800d514:	e7df      	b.n	800d4d6 <_realloc_r+0x1e>
	...

0800d518 <_sbrk_r>:
 800d518:	b538      	push	{r3, r4, r5, lr}
 800d51a:	2300      	movs	r3, #0
 800d51c:	4d05      	ldr	r5, [pc, #20]	; (800d534 <_sbrk_r+0x1c>)
 800d51e:	4604      	mov	r4, r0
 800d520:	4608      	mov	r0, r1
 800d522:	602b      	str	r3, [r5, #0]
 800d524:	f7f4 fb20 	bl	8001b68 <_sbrk>
 800d528:	1c43      	adds	r3, r0, #1
 800d52a:	d102      	bne.n	800d532 <_sbrk_r+0x1a>
 800d52c:	682b      	ldr	r3, [r5, #0]
 800d52e:	b103      	cbz	r3, 800d532 <_sbrk_r+0x1a>
 800d530:	6023      	str	r3, [r4, #0]
 800d532:	bd38      	pop	{r3, r4, r5, pc}
 800d534:	20001ed8 	.word	0x20001ed8

0800d538 <__malloc_lock>:
 800d538:	4801      	ldr	r0, [pc, #4]	; (800d540 <__malloc_lock+0x8>)
 800d53a:	f000 b811 	b.w	800d560 <__retarget_lock_acquire_recursive>
 800d53e:	bf00      	nop
 800d540:	20001edc 	.word	0x20001edc

0800d544 <__malloc_unlock>:
 800d544:	4801      	ldr	r0, [pc, #4]	; (800d54c <__malloc_unlock+0x8>)
 800d546:	f000 b80c 	b.w	800d562 <__retarget_lock_release_recursive>
 800d54a:	bf00      	nop
 800d54c:	20001edc 	.word	0x20001edc

0800d550 <_malloc_usable_size_r>:
 800d550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d554:	1f18      	subs	r0, r3, #4
 800d556:	2b00      	cmp	r3, #0
 800d558:	bfbc      	itt	lt
 800d55a:	580b      	ldrlt	r3, [r1, r0]
 800d55c:	18c0      	addlt	r0, r0, r3
 800d55e:	4770      	bx	lr

0800d560 <__retarget_lock_acquire_recursive>:
 800d560:	4770      	bx	lr

0800d562 <__retarget_lock_release_recursive>:
 800d562:	4770      	bx	lr

0800d564 <_init>:
 800d564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d566:	bf00      	nop
 800d568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d56a:	bc08      	pop	{r3}
 800d56c:	469e      	mov	lr, r3
 800d56e:	4770      	bx	lr

0800d570 <_fini>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	bf00      	nop
 800d574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d576:	bc08      	pop	{r3}
 800d578:	469e      	mov	lr, r3
 800d57a:	4770      	bx	lr
