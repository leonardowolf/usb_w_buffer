
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b948  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f8  0800ba54  0800ba54  0001ba54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc4c  0800cc4c  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc4c  0800cc4c  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc4c  0800cc4c  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc4c  0800cc4c  0001cc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc50  0800cc50  0001cc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0800cc54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001998  20000418  0800d06c  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001db0  0800d06c  00021db0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   000384bd  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052bf  00000000  00000000  000588fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  0005dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a38  00000000  00000000  0005f8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cad8  00000000  00000000  000612f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d071  00000000  00000000  0007ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097526  00000000  00000000  0009ae41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132367  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b48  00000000  00000000  001323b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000418 	.word	0x20000418
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ba3c 	.word	0x0800ba3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000041c 	.word	0x2000041c
 8000148:	0800ba3c 	.word	0x0800ba3c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern SPI_HandleTypeDef hspi1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f003 faca 	bl	8003724 <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f003 fac5 	bl	8003724 <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f003 fd8e 	bl	8003cc4 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f003 fd87 	bl	8003cc4 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f005 ff48 	bl	80060c0 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f003 fd43 	bl	8003cc4 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000059c 	.word	0x2000059c
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0

	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <Start_APP+0x60>)
 800025e:	4a17      	ldr	r2, [pc, #92]	; (80002bc <Start_APP+0x64>)
 8000260:	4917      	ldr	r1, [pc, #92]	; (80002c0 <Start_APP+0x68>)
 8000262:	4818      	ldr	r0, [pc, #96]	; (80002c4 <Start_APP+0x6c>)
 8000264:	f001 fb70 	bl	8001948 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 8000268:	4816      	ldr	r0, [pc, #88]	; (80002c4 <Start_APP+0x6c>)
 800026a:	f003 f924 	bl	80034b6 <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 800026e:	2100      	movs	r1, #0
 8000270:	4814      	ldr	r0, [pc, #80]	; (80002c4 <Start_APP+0x6c>)
 8000272:	f003 f92f 	bl	80034d4 <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 8000276:	2004      	movs	r0, #4
 8000278:	f000 fbf4 	bl	8000a64 <set_contrast>

		u8g2_SetDrawColor(&u8g2, 2);
 800027c:	2102      	movs	r1, #2
 800027e:	4811      	ldr	r0, [pc, #68]	; (80002c4 <Start_APP+0x6c>)
 8000280:	f002 fb7c 	bl	800297c <u8g2_SetDrawColor>
		u8g2_SetBitmapMode(&u8g2, 1);
 8000284:	2101      	movs	r1, #1
 8000286:	480f      	ldr	r0, [pc, #60]	; (80002c4 <Start_APP+0x6c>)
 8000288:	f000 ffc4 	bl	8001214 <u8g2_SetBitmapMode>
		u8g2_SetFontMode(&u8g2, 1);
 800028c:	2101      	movs	r1, #1
 800028e:	480d      	ldr	r0, [pc, #52]	; (80002c4 <Start_APP+0x6c>)
 8000290:	f001 fff4 	bl	800227c <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 8000294:	480b      	ldr	r0, [pc, #44]	; (80002c4 <Start_APP+0x6c>)
 8000296:	f002 f95f 	bl	8002558 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_10x20_mf);
 800029a:	490b      	ldr	r1, [pc, #44]	; (80002c8 <Start_APP+0x70>)
 800029c:	4809      	ldr	r0, [pc, #36]	; (80002c4 <Start_APP+0x6c>)
 800029e:	f002 f969 	bl	8002574 <u8g2_SetFont>
		disp_splash();
 80002a2:	f000 fbf3 	bl	8000a8c <disp_splash>
		text_insertion_point(0 , 0);
 80002a6:	2100      	movs	r1, #0
 80002a8:	2000      	movs	r0, #0
 80002aa:	f000 fa8b 	bl	80007c4 <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002ae:	f000 fa4d 	bl	800074c <monitor_begin>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	0800015d 	.word	0x0800015d
 80002bc:	080001cd 	.word	0x080001cd
 80002c0:	0800cba8 	.word	0x0800cba8
 80002c4:	20000434 	.word	0x20000434
 80002c8:	0800bb38 	.word	0x0800bb38

080002cc <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS(buf, strlen(buf));
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ff39 	bl	800014c <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29b      	uxth	r3, r3
 80002de:	4619      	mov	r1, r3
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f00a fae7 	bl	800a8b4 <CDC_Transmit_FS>
}
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af02      	add	r7, sp, #8
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 80002fa:	2204      	movs	r2, #4
 80002fc:	498c      	ldr	r1, [pc, #560]	; (8000530 <monitor_check_cmd+0x240>)
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f00a ff1c 	bl	800b13c <strncmp>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d108      	bne.n	800031c <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 800030a:	4a8a      	ldr	r2, [pc, #552]	; (8000534 <monitor_check_cmd+0x244>)
 800030c:	2164      	movs	r1, #100	; 0x64
 800030e:	488a      	ldr	r0, [pc, #552]	; (8000538 <monitor_check_cmd+0x248>)
 8000310:	f00a fee0 	bl	800b0d4 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000314:	4888      	ldr	r0, [pc, #544]	; (8000538 <monitor_check_cmd+0x248>)
 8000316:	f7ff ffd9 	bl	80002cc <monitor_send_string>
	}
	//se não era comando, tenta escrever na tela
	/*	else {
	 lcd_print(cmd);
	 }*/
}
 800031a:	e105      	b.n	8000528 <monitor_check_cmd+0x238>
	else if (cmd[0] == LCD_CMD) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2bfe      	cmp	r3, #254	; 0xfe
 8000322:	f040 8101 	bne.w	8000528 <monitor_check_cmd+0x238>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3301      	adds	r3, #1
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2b31      	cmp	r3, #49	; 0x31
 800032e:	d109      	bne.n	8000344 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000330:	4b82      	ldr	r3, [pc, #520]	; (800053c <monitor_check_cmd+0x24c>)
 8000332:	4a83      	ldr	r2, [pc, #524]	; (8000540 <monitor_check_cmd+0x250>)
 8000334:	2164      	movs	r1, #100	; 0x64
 8000336:	4880      	ldr	r0, [pc, #512]	; (8000538 <monitor_check_cmd+0x248>)
 8000338:	f00a fecc 	bl	800b0d4 <sniprintf>
			monitor_send_string(ans);
 800033c:	487e      	ldr	r0, [pc, #504]	; (8000538 <monitor_check_cmd+0x248>)
 800033e:	f7ff ffc5 	bl	80002cc <monitor_send_string>
}
 8000342:	e0f1      	b.n	8000528 <monitor_check_cmd+0x238>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3301      	adds	r3, #1
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b30      	cmp	r3, #48	; 0x30
 800034c:	d109      	bne.n	8000362 <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 800034e:	4b7b      	ldr	r3, [pc, #492]	; (800053c <monitor_check_cmd+0x24c>)
 8000350:	4a7c      	ldr	r2, [pc, #496]	; (8000544 <monitor_check_cmd+0x254>)
 8000352:	2164      	movs	r1, #100	; 0x64
 8000354:	4878      	ldr	r0, [pc, #480]	; (8000538 <monitor_check_cmd+0x248>)
 8000356:	f00a febd 	bl	800b0d4 <sniprintf>
			monitor_send_string(ans);
 800035a:	4877      	ldr	r0, [pc, #476]	; (8000538 <monitor_check_cmd+0x248>)
 800035c:	f7ff ffb6 	bl	80002cc <monitor_send_string>
}
 8000360:	e0e2      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_SOFT_RESET) {
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3301      	adds	r3, #1
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	2b56      	cmp	r3, #86	; 0x56
 800036a:	d102      	bne.n	8000372 <monitor_check_cmd+0x82>
			lcd_soft_reset();
 800036c:	f000 fb54 	bl	8000a18 <lcd_soft_reset>
}
 8000370:	e0da      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3301      	adds	r3, #1
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b42      	cmp	r3, #66	; 0x42
 800037a:	d103      	bne.n	8000384 <monitor_check_cmd+0x94>
			enable_backlight(true);
 800037c:	2001      	movs	r0, #1
 800037e:	f000 fb5f 	bl	8000a40 <enable_backlight>
}
 8000382:	e0d1      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b46      	cmp	r3, #70	; 0x46
 800038c:	d103      	bne.n	8000396 <monitor_check_cmd+0xa6>
			enable_backlight(false);
 800038e:	2000      	movs	r0, #0
 8000390:	f000 fb56 	bl	8000a40 <enable_backlight>
}
 8000394:	e0c8      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3301      	adds	r3, #1
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b66      	cmp	r3, #102	; 0x66
 800039e:	d103      	bne.n	80003a8 <monitor_check_cmd+0xb8>
			inverse_text(true);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f000 fa3b 	bl	800081c <inverse_text>
}
 80003a6:	e0bf      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b67      	cmp	r3, #103	; 0x67
 80003b0:	d103      	bne.n	80003ba <monitor_check_cmd+0xca>
			inverse_text(false);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f000 fa32 	bl	800081c <inverse_text>
}
 80003b8:	e0b6      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_CLEAR) {
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	3301      	adds	r3, #1
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b58      	cmp	r3, #88	; 0x58
 80003c2:	d102      	bne.n	80003ca <monitor_check_cmd+0xda>
			clear_display();
 80003c4:	f000 fb2e 	bl	8000a24 <clear_display>
}
 80003c8:	e0ae      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3301      	adds	r3, #1
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b70      	cmp	r3, #112	; 0x70
 80003d2:	d10a      	bne.n	80003ea <monitor_check_cmd+0xfa>
			put_pixel(cmd[3], cmd[2]);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3303      	adds	r3, #3
 80003d8:	781a      	ldrb	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3302      	adds	r3, #2
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4619      	mov	r1, r3
 80003e2:	4610      	mov	r0, r2
 80003e4:	f000 fadc 	bl	80009a0 <put_pixel>
}
 80003e8:	e09e      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	3301      	adds	r3, #1
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b71      	cmp	r3, #113	; 0x71
 80003f2:	d10a      	bne.n	800040a <monitor_check_cmd+0x11a>
			erase_pixel(cmd[3], cmd[2]);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3303      	adds	r3, #3
 80003f8:	781a      	ldrb	r2, [r3, #0]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3302      	adds	r3, #2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4619      	mov	r1, r3
 8000402:	4610      	mov	r0, r2
 8000404:	f000 faea 	bl	80009dc <erase_pixel>
}
 8000408:	e08e      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	3301      	adds	r3, #1
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b43      	cmp	r3, #67	; 0x43
 8000412:	d103      	bne.n	800041c <monitor_check_cmd+0x12c>
			auto_line_wrap(true);
 8000414:	2001      	movs	r0, #1
 8000416:	f000 f9c5 	bl	80007a4 <auto_line_wrap>
}
 800041a:	e085      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3301      	adds	r3, #1
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b44      	cmp	r3, #68	; 0x44
 8000424:	d103      	bne.n	800042e <monitor_check_cmd+0x13e>
			auto_line_wrap(false);
 8000426:	2000      	movs	r0, #0
 8000428:	f000 f9bc 	bl	80007a4 <auto_line_wrap>
}
 800042c:	e07c      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_SET_INSERT) {
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3301      	adds	r3, #1
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b47      	cmp	r3, #71	; 0x47
 8000436:	d10a      	bne.n	800044e <monitor_check_cmd+0x15e>
			text_insertion_point(cmd[2], cmd[3]);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3302      	adds	r3, #2
 800043c:	781a      	ldrb	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	3303      	adds	r3, #3
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	4610      	mov	r0, r2
 8000448:	f000 f9bc 	bl	80007c4 <text_insertion_point>
}
 800044c:	e06c      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_HOME_INSERT) {
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3301      	adds	r3, #1
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b48      	cmp	r3, #72	; 0x48
 8000456:	d104      	bne.n	8000462 <monitor_check_cmd+0x172>
			text_insertion_point(0, 0);
 8000458:	2100      	movs	r1, #0
 800045a:	2000      	movs	r0, #0
 800045c:	f000 f9b2 	bl	80007c4 <text_insertion_point>
}
 8000460:	e062      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_READ_GPI) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b65      	cmp	r3, #101	; 0x65
 800046a:	d114      	bne.n	8000496 <monitor_check_cmd+0x1a6>
			if (cmd[2] == '0') {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3302      	adds	r3, #2
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b30      	cmp	r3, #48	; 0x30
 8000474:	d158      	bne.n	8000528 <monitor_check_cmd+0x238>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000476:	4b34      	ldr	r3, [pc, #208]	; (8000548 <monitor_check_cmd+0x258>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	461a      	mov	r2, r3
						ddp[1]);
 800047c:	4b32      	ldr	r3, [pc, #200]	; (8000548 <monitor_check_cmd+0x258>)
 800047e:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	4613      	mov	r3, r2
 8000484:	4a31      	ldr	r2, [pc, #196]	; (800054c <monitor_check_cmd+0x25c>)
 8000486:	2164      	movs	r1, #100	; 0x64
 8000488:	482b      	ldr	r0, [pc, #172]	; (8000538 <monitor_check_cmd+0x248>)
 800048a:	f00a fe23 	bl	800b0d4 <sniprintf>
				monitor_send_string(ans);
 800048e:	482a      	ldr	r0, [pc, #168]	; (8000538 <monitor_check_cmd+0x248>)
 8000490:	f7ff ff1c 	bl	80002cc <monitor_send_string>
}
 8000494:	e048      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3301      	adds	r3, #1
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b69      	cmp	r3, #105	; 0x69
 800049e:	d102      	bne.n	80004a6 <monitor_check_cmd+0x1b6>
			disp_splash();
 80004a0:	f000 faf4 	bl	8000a8c <disp_splash>
}
 80004a4:	e040      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	3301      	adds	r3, #1
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b76      	cmp	r3, #118	; 0x76
 80004ae:	d102      	bne.n	80004b6 <monitor_check_cmd+0x1c6>
			def_thick_v_bar();
 80004b0:	f000 f9c4 	bl	800083c <def_thick_v_bar>
}
 80004b4:	e038      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	3301      	adds	r3, #1
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b73      	cmp	r3, #115	; 0x73
 80004be:	d102      	bne.n	80004c6 <monitor_check_cmd+0x1d6>
			def_thin_v_bar();
 80004c0:	f000 f9c8 	bl	8000854 <def_thin_v_bar>
}
 80004c4:	e030      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3301      	adds	r3, #1
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b3d      	cmp	r3, #61	; 0x3d
 80004ce:	d10a      	bne.n	80004e6 <monitor_check_cmd+0x1f6>
			draw_v_bar_graph(cmd[2], cmd[3]);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3302      	adds	r3, #2
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3303      	adds	r3, #3
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	4610      	mov	r0, r2
 80004e0:	f000 f9c4 	bl	800086c <draw_v_bar_graph>
}
 80004e4:	e020      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3301      	adds	r3, #1
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b3d      	cmp	r3, #61	; 0x3d
 80004ee:	d10a      	bne.n	8000506 <monitor_check_cmd+0x216>
			erase_v_bar_graph(cmd[2], cmd[3]);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3302      	adds	r3, #2
 80004f4:	781a      	ldrb	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	3303      	adds	r3, #3
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4610      	mov	r0, r2
 8000500:	f000 f9e4 	bl	80008cc <erase_v_bar_graph>
}
 8000504:	e010      	b.n	8000528 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3301      	adds	r3, #1
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b7c      	cmp	r3, #124	; 0x7c
 800050e:	d10b      	bne.n	8000528 <monitor_check_cmd+0x238>
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3302      	adds	r3, #2
 8000514:	7818      	ldrb	r0, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3303      	adds	r3, #3
 800051a:	7819      	ldrb	r1, [r3, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	3304      	adds	r3, #4
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	461a      	mov	r2, r3
 8000524:	f000 fa02 	bl	800092c <draw_h_bar_graph>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	0800ba54 	.word	0x0800ba54
 8000534:	0800ba5c 	.word	0x0800ba5c
 8000538:	2000052c 	.word	0x2000052c
 800053c:	0800ba94 	.word	0x0800ba94
 8000540:	0800ba98 	.word	0x0800ba98
 8000544:	0800bab0 	.word	0x0800bab0
 8000548:	20000000 	.word	0x20000000
 800054c:	0800bac4 	.word	0x0800bac4

08000550 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
	uint8_t i;
	CDC_Transmit_FS(buf, len);
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	b29b      	uxth	r3, r3
 800055e:	4619      	mov	r1, r3
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f00a f9a7 	bl	800a8b4 <CDC_Transmit_FS>

	for (i = 0; i < len; i++) {
 8000566:	2300      	movs	r3, #0
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e009      	b.n	8000580 <app_usb_cbk+0x30>
		cmd[i] = *(buf + i);
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	441a      	add	r2, r3
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	7811      	ldrb	r1, [r2, #0]
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <app_usb_cbk+0x4c>)
 8000578:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len; i++) {
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	3301      	adds	r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	7bfb      	ldrb	r3, [r7, #15]
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	429a      	cmp	r2, r3
 8000586:	d8f1      	bhi.n	800056c <app_usb_cbk+0x1c>
	}

	size = len;
 8000588:	4a05      	ldr	r2, [pc, #20]	; (80005a0 <app_usb_cbk+0x50>)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	6013      	str	r3, [r2, #0]
	new_cmd = true;
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <app_usb_cbk+0x54>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200004c8 	.word	0x200004c8
 80005a0:	20000590 	.word	0x20000590
 80005a4:	20000594 	.word	0x20000594

080005a8 <monitor_interrupt>:

void monitor_interrupt(void) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	if (new_cmd) {
 80005ae:	4b63      	ldr	r3, [pc, #396]	; (800073c <monitor_interrupt+0x194>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	f000 80be 	beq.w	8000734 <monitor_interrupt+0x18c>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 80005bc:	4b60      	ldr	r3, [pc, #384]	; (8000740 <monitor_interrupt+0x198>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 80005c2:	2300      	movs	r3, #0
 80005c4:	70fb      	strb	r3, [r7, #3]
		bool printable = false;
 80005c6:	2300      	movs	r3, #0
 80005c8:	70bb      	strb	r3, [r7, #2]
		/*o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
		 começa o inicializador*/

		for (offset = 0; offset <= size; offset++) {
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]
 80005ce:	e09c      	b.n	800070a <monitor_interrupt+0x162>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4a5c      	ldr	r2, [pc, #368]	; (8000744 <monitor_interrupt+0x19c>)
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2bfd      	cmp	r3, #253	; 0xfd
 80005da:	d110      	bne.n	80005fe <monitor_interrupt+0x56>
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a58      	ldr	r2, [pc, #352]	; (8000744 <monitor_interrupt+0x19c>)
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bfe      	cmp	r3, #254	; 0xfe
 80005e8:	d009      	beq.n	80005fe <monitor_interrupt+0x56>
					&& *(cmd + offset + 1) != 20) {
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a55      	ldr	r2, [pc, #340]	; (8000744 <monitor_interrupt+0x19c>)
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b14      	cmp	r3, #20
 80005f6:	d002      	beq.n	80005fe <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	3301      	adds	r3, #1
 80005fc:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00c      	beq.n	800061e <monitor_interrupt+0x76>
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a4f      	ldr	r2, [pc, #316]	; (8000744 <monitor_interrupt+0x19c>)
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2bfe      	cmp	r3, #254	; 0xfe
 800060e:	d106      	bne.n	800061e <monitor_interrupt+0x76>
					&& *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a4b      	ldr	r2, [pc, #300]	; (8000744 <monitor_interrupt+0x19c>)
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2bfd      	cmp	r3, #253	; 0xfd
 800061c:	d104      	bne.n	8000628 <monitor_interrupt+0x80>
 800061e:	79fa      	ldrb	r2, [r7, #7]
 8000620:	4b47      	ldr	r3, [pc, #284]	; (8000740 <monitor_interrupt+0x198>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	429a      	cmp	r2, r3
 8000626:	d103      	bne.n	8000630 <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o começo de outro e
				printable = true;
 8000628:	2301      	movs	r3, #1
 800062a:	70bb      	strb	r3, [r7, #2]
				end_print = offset;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d034      	beq.n	80006a0 <monitor_interrupt+0xf8>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	4a42      	ldr	r2, [pc, #264]	; (8000744 <monitor_interrupt+0x19c>)
 800063a:	1899      	adds	r1, r3, r2
 800063c:	797a      	ldrb	r2, [r7, #5]
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	461a      	mov	r2, r3
 8000644:	4840      	ldr	r0, [pc, #256]	; (8000748 <monitor_interrupt+0x1a0>)
 8000646:	f00a fd8d 	bl	800b164 <strncpy>
				CDC_Transmit_FS(ans, end_print - bgn_print);
 800064a:	797b      	ldrb	r3, [r7, #5]
 800064c:	b29a      	uxth	r2, r3
 800064e:	79bb      	ldrb	r3, [r7, #6]
 8000650:	b29b      	uxth	r3, r3
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	b29b      	uxth	r3, r3
 8000656:	4619      	mov	r1, r3
 8000658:	483b      	ldr	r0, [pc, #236]	; (8000748 <monitor_interrupt+0x1a0>)
 800065a:	f00a f92b 	bl	800a8b4 <CDC_Transmit_FS>
				lcd_print(ans);
 800065e:	483a      	ldr	r0, [pc, #232]	; (8000748 <monitor_interrupt+0x1a0>)
 8000660:	f000 fa76 	bl	8000b50 <lcd_print>
				for (i = 0; i < end_print - bgn_print; i++) {
 8000664:	2300      	movs	r3, #0
 8000666:	713b      	strb	r3, [r7, #4]
 8000668:	e006      	b.n	8000678 <monitor_interrupt+0xd0>
					ans[i] = '\0';
 800066a:	793b      	ldrb	r3, [r7, #4]
 800066c:	4a36      	ldr	r2, [pc, #216]	; (8000748 <monitor_interrupt+0x1a0>)
 800066e:	2100      	movs	r1, #0
 8000670:	54d1      	strb	r1, [r2, r3]
				for (i = 0; i < end_print - bgn_print; i++) {
 8000672:	793b      	ldrb	r3, [r7, #4]
 8000674:	3301      	adds	r3, #1
 8000676:	713b      	strb	r3, [r7, #4]
 8000678:	793a      	ldrb	r2, [r7, #4]
 800067a:	7979      	ldrb	r1, [r7, #5]
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	1acb      	subs	r3, r1, r3
 8000680:	429a      	cmp	r2, r3
 8000682:	dbf2      	blt.n	800066a <monitor_interrupt+0xc2>
				}
				printable = !printable;
 8000684:	78bb      	ldrb	r3, [r7, #2]
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf14      	ite	ne
 800068a:	2301      	movne	r3, #1
 800068c:	2300      	moveq	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f083 0301 	eor.w	r3, r3, #1
 8000694:	b2db      	uxtb	r3, r3
 8000696:	70bb      	strb	r3, [r7, #2]
 8000698:	78bb      	ldrb	r3, [r7, #2]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	70bb      	strb	r3, [r7, #2]
			}

			if (*(cmd + offset) == LCD_CMD) {
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4a28      	ldr	r2, [pc, #160]	; (8000744 <monitor_interrupt+0x19c>)
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2bfe      	cmp	r3, #254	; 0xfe
 80006aa:	d117      	bne.n	80006dc <monitor_interrupt+0x134>
				monitor_check_cmd((char*) cmd + offset, size);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	4a25      	ldr	r2, [pc, #148]	; (8000744 <monitor_interrupt+0x19c>)
 80006b0:	4413      	add	r3, r2
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <monitor_interrupt+0x198>)
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fe19 	bl	80002f0 <monitor_check_cmd>
				is_cmd = !is_cmd;
 80006be:	78fb      	ldrb	r3, [r7, #3]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	bf14      	ite	ne
 80006c4:	2301      	movne	r3, #1
 80006c6:	2300      	moveq	r3, #0
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f083 0301 	eor.w	r3, r3, #1
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	70fb      	strb	r3, [r7, #3]
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	70fb      	strb	r3, [r7, #3]
 80006da:	e013      	b.n	8000704 <monitor_interrupt+0x15c>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4a19      	ldr	r2, [pc, #100]	; (8000744 <monitor_interrupt+0x19c>)
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2bfd      	cmp	r3, #253	; 0xfd
 80006e6:	d10d      	bne.n	8000704 <monitor_interrupt+0x15c>
				is_cmd = !is_cmd;
 80006e8:	78fb      	ldrb	r3, [r7, #3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f083 0301 	eor.w	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	70fb      	strb	r3, [r7, #3]
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	70fb      	strb	r3, [r7, #3]
		for (offset = 0; offset <= size; offset++) {
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	3301      	adds	r3, #1
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	79fa      	ldrb	r2, [r7, #7]
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <monitor_interrupt+0x198>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	429a      	cmp	r2, r3
 8000712:	f67f af5d 	bls.w	80005d0 <monitor_interrupt+0x28>

			}

		}
		new_cmd = !new_cmd;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <monitor_interrupt+0x194>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	bf14      	ite	ne
 800071e:	2301      	movne	r3, #1
 8000720:	2300      	moveq	r3, #0
 8000722:	b2db      	uxtb	r3, r3
 8000724:	f083 0301 	eor.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b02      	ldr	r3, [pc, #8]	; (800073c <monitor_interrupt+0x194>)
 8000732:	701a      	strb	r2, [r3, #0]
	}
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000594 	.word	0x20000594
 8000740:	20000590 	.word	0x20000590
 8000744:	200004c8 	.word	0x200004c8
 8000748:	2000052c 	.word	0x2000052c

0800074c <monitor_begin>:

void monitor_begin(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <monitor_begin+0x48>)
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <monitor_begin+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
	 test_font();
	 clear_display();
	 put_cursor();*/

	//mensagem de inicialização
	snprintf((char*) ans, CMD_BUF_SIZE, "hora do show!\r\n");
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <monitor_begin+0x50>)
 8000760:	2164      	movs	r1, #100	; 0x64
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <monitor_begin+0x54>)
 8000764:	f00a fcb6 	bl	800b0d4 <sniprintf>
	monitor_send_string(ans);
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <monitor_begin+0x54>)
 800076a:	f7ff fdaf 	bl	80002cc <monitor_send_string>
	for (i = 0; i < strlen("hora do show!\r\n"); i++) {
 800076e:	2300      	movs	r3, #0
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	e006      	b.n	8000782 <monitor_begin+0x36>
		ans[i] = '\0';
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <monitor_begin+0x54>)
 8000778:	2100      	movs	r1, #0
 800077a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < strlen("hora do show!\r\n"); i++) {
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	3301      	adds	r3, #1
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b0e      	cmp	r3, #14
 8000786:	d9f5      	bls.n	8000774 <monitor_begin+0x28>
	}
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000590 	.word	0x20000590
 8000798:	20000594 	.word	0x20000594
 800079c:	0800bad0 	.word	0x0800bad0
 80007a0:	2000052c 	.word	0x2000052c

080007a4 <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 80007ae:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <auto_line_wrap+0x1c>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	7013      	strb	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000596 	.word	0x20000596

080007c4 <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 80007d4:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <text_insertion_point+0x4c>)
 80007d6:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	fb02 f303 	mul.w	r3, r2, r3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <text_insertion_point+0x50>)
 80007e6:	701a      	strb	r2, [r3, #0]
	cursor[1] = row * (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <text_insertion_point+0x4c>)
 80007ea:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <text_insertion_point+0x54>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	79ba      	ldrb	r2, [r7, #6]
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <text_insertion_point+0x50>)
 8000802:	705a      	strb	r2, [r3, #1]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000434 	.word	0x20000434
 8000814:	20000598 	.word	0x20000598
 8000818:	2000022d 	.word	0x2000022d

0800081c <inverse_text>:
 *	desativa a inversão de texto
 *		FE 67 FD
 *		254 103 253
 *		254 `g` 253
 */
void inverse_text(bool state) {
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 8000826:	4a04      	ldr	r2, [pc, #16]	; (8000838 <inverse_text+0x1c>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	7013      	strb	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000595 	.word	0x20000595

0800083c <def_thick_v_bar>:
 *	Define a barra vertical como com 5px de largura
 *	FE 76 FD
 *	254 118 253
 *	254 `v` 253
 */
void def_thick_v_bar(void) {
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
	vertical_bar_width = 5;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <def_thick_v_bar+0x14>)
 8000842:	2205      	movs	r2, #5
 8000844:	701a      	strb	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	2000022c 	.word	0x2000022c

08000854 <def_thin_v_bar>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_thin_v_bar(void) {
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	vertical_bar_width = 2;
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <def_thin_v_bar+0x14>)
 800085a:	2202      	movs	r2, #2
 800085c:	701a      	strb	r2, [r3, #0]
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	2000022c 	.word	0x2000022c

0800086c <draw_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_v_bar_graph(uint8_t col, uint8_t height) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af02      	add	r7, sp, #8
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <draw_v_bar_graph+0x54>)
 800087e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000882:	b2db      	uxtb	r3, r3
 8000884:	79fa      	ldrb	r2, [r7, #7]
 8000886:	fb02 f303 	mul.w	r3, r2, r3
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <draw_v_bar_graph+0x58>)
 800088e:	701a      	strb	r2, [r3, #0]

	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <draw_v_bar_graph+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b299      	uxth	r1, r3
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <draw_v_bar_graph+0x58>)
 8000898:	785b      	ldrb	r3, [r3, #1]
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <draw_v_bar_graph+0x5c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b298      	uxth	r0, r3
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	4603      	mov	r3, r0
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <draw_v_bar_graph+0x54>)
 80008ac:	f000 fd72 	bl	8001394 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <draw_v_bar_graph+0x54>)
 80008b2:	f000 fe75 	bl	80015a0 <u8g2_SendBuffer>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000434 	.word	0x20000434
 80008c4:	20000598 	.word	0x20000598
 80008c8:	2000022c 	.word	0x2000022c

080008cc <erase_v_bar_graph>:
 *	com height	variando [[0x00] a [0x20]] (0 a 32)
 *	FE 2D [col] [height] FD
 * 	254 45 [col] [height] 253
 *	254 `-` [col] [height] 253
 */
void erase_v_bar_graph(uint8_t col, uint8_t height) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af02      	add	r7, sp, #8
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <erase_v_bar_graph+0x54>)
 80008de:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	79fa      	ldrb	r2, [r7, #7]
 80008e6:	fb02 f303 	mul.w	r3, r2, r3
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <erase_v_bar_graph+0x58>)
 80008ee:	701a      	strb	r2, [r3, #0]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <erase_v_bar_graph+0x58>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b299      	uxth	r1, r3
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <erase_v_bar_graph+0x58>)
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <erase_v_bar_graph+0x5c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b298      	uxth	r0, r3
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29b      	uxth	r3, r3
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	4603      	mov	r3, r0
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <erase_v_bar_graph+0x54>)
 800090c:	f000 fd42 	bl	8001394 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <erase_v_bar_graph+0x54>)
 8000912:	f000 fe45 	bl	80015a0 <u8g2_SendBuffer>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000434 	.word	0x20000434
 8000924:	20000598 	.word	0x20000598
 8000928:	2000022c 	.word	0x2000022c

0800092c <draw_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af02      	add	r7, sp, #8
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
 8000936:	460b      	mov	r3, r1
 8000938:	71bb      	strb	r3, [r7, #6]
 800093a:	4613      	mov	r3, r2
 800093c:	717b      	strb	r3, [r7, #5]
	cursor[0] = (col  ) * u8g2_GetMaxCharHeight(&u8g2);
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <draw_h_bar_graph+0x6c>)
 8000940:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000944:	b2db      	uxtb	r3, r3
 8000946:	79fa      	ldrb	r2, [r7, #7]
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <draw_h_bar_graph+0x70>)
 8000950:	701a      	strb	r2, [r3, #0]
	cursor[1] = (row  ) * u8g2_GetMaxCharWidth(&u8g2);
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <draw_h_bar_graph+0x6c>)
 8000954:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000958:	b2db      	uxtb	r3, r3
 800095a:	79ba      	ldrb	r2, [r7, #6]
 800095c:	fb02 f303 	mul.w	r3, r2, r3
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <draw_h_bar_graph+0x70>)
 8000964:	705a      	strb	r2, [r3, #1]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght  ,
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <draw_h_bar_graph+0x70>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b299      	uxth	r1, r3
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <draw_h_bar_graph+0x70>)
 800096e:	785b      	ldrb	r3, [r3, #1]
 8000970:	b29a      	uxth	r2, r3
 8000972:	797b      	ldrb	r3, [r7, #5]
 8000974:	b298      	uxth	r0, r3
			u8g2_GetMaxCharHeight(&u8g2));
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <draw_h_bar_graph+0x6c>)
 8000978:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght  ,
 800097c:	b29b      	uxth	r3, r3
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	4603      	mov	r3, r0
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <draw_h_bar_graph+0x6c>)
 8000984:	f000 fd06 	bl	8001394 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <draw_h_bar_graph+0x6c>)
 800098a:	f000 fe09 	bl	80015a0 <u8g2_SendBuffer>
	//u8g2_DrawVLine(&u8g2, col, u8g2_uint_t y, u8g2_uint_t h);
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000434 	.word	0x20000434
 800099c:	20000598 	.word	0x20000598

080009a0 <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	460a      	mov	r2, r1
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	4613      	mov	r3, r2
 80009ae:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 80009b0:	2101      	movs	r1, #1
 80009b2:	4809      	ldr	r0, [pc, #36]	; (80009d8 <put_pixel+0x38>)
 80009b4:	f001 ffe2 	bl	800297c <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x  , y  );
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	79ba      	ldrb	r2, [r7, #6]
 80009be:	b292      	uxth	r2, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <put_pixel+0x38>)
 80009c4:	f001 ffa7 	bl	8002916 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 80009c8:	4803      	ldr	r0, [pc, #12]	; (80009d8 <put_pixel+0x38>)
 80009ca:	f000 fde9 	bl	80015a0 <u8g2_SendBuffer>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000434 	.word	0x20000434

080009dc <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	460a      	mov	r2, r1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	4613      	mov	r3, r2
 80009ea:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 80009ec:	2100      	movs	r1, #0
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <erase_pixel+0x38>)
 80009f0:	f001 ffc4 	bl	800297c <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x  , y  );
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	79ba      	ldrb	r2, [r7, #6]
 80009fa:	b292      	uxth	r2, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <erase_pixel+0x38>)
 8000a00:	f001 ff89 	bl	8002916 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <erase_pixel+0x38>)
 8000a06:	f000 fdcb 	bl	80015a0 <u8g2_SendBuffer>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000434 	.word	0x20000434

08000a18 <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8000a1c:	f002 ffbd 	bl	800399a <HAL_NVIC_SystemReset>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	text_insertion_point(0 , 0);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff feca 	bl	80007c4 <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <clear_display+0x18>)
 8000a32:	f000 ff63 	bl	80018fc <u8g2_ClearDisplay>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000434 	.word	0x20000434

08000a40 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	2110      	movs	r1, #16
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <enable_backlight+0x20>)
 8000a52:	f003 f937 	bl	8003cc4 <HAL_GPIO_WritePin>
			enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40010800 	.word	0x40010800

08000a64 <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast  ) * 9);
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	461a      	mov	r2, r3
 8000a72:	00d2      	lsls	r2, r2, #3
 8000a74:	4413      	add	r3, r2
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <set_contrast+0x24>)
 8000a7c:	f002 fd3b 	bl	80034f6 <u8x8_SetContrast>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000434 	.word	0x20000434

08000a8c <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <disp_splash+0x28>)
 8000a94:	9301      	str	r3, [sp, #4]
 8000a96:	2318      	movs	r3, #24
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	23b4      	movs	r3, #180	; 0xb4
 8000a9c:	2214      	movs	r2, #20
 8000a9e:	2106      	movs	r1, #6
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <disp_splash+0x2c>)
 8000aa2:	f000 fc34 	bl	800130e <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 8000aa6:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <disp_splash+0x2c>)
 8000aa8:	f000 fd7a 	bl	80015a0 <u8g2_SendBuffer>

}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000004 	.word	0x20000004
 8000ab8:	20000434 	.word	0x20000434

08000abc <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap *wrap, uint8_t *txt) {
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux = 1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	2301      	movs	r3, #1
 8000acc:	73bb      	strb	r3, [r7, #14]

	for (index = 0; txt[index] != '\0'; index++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
 8000ad2:	e002      	b.n	8000ada <str_warper+0x1e>
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f6      	bne.n	8000ad4 <str_warper+0x18>
		;
	index++;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
	wrap->wrap_times = index
			/ (u8g2_GetDisplayWidth(&u8g2) / u8g2_GetMaxCharWidth(&u8g2));
 8000aec:	7bfa      	ldrb	r2, [r7, #15]
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <str_warper+0x90>)
 8000af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000af4:	4619      	mov	r1, r3
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <str_warper+0x90>)
 8000af8:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000afc:	fb91 f3f3 	sdiv	r3, r1, r3
 8000b00:	fb92 f3f3 	sdiv	r3, r2, r3
	wrap->wrap_times = index
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	751a      	strb	r2, [r3, #20]
	do {
		wrap->wrap_str[aux] = &txt[aux
				* (u8g2_GetDisplayWidth(&u8g2) / u8g2_GetMaxCharWidth(&u8g2))];
 8000b0a:	7bbb      	ldrb	r3, [r7, #14]
 8000b0c:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <str_warper+0x90>)
 8000b0e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8000b12:	4611      	mov	r1, r2
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <str_warper+0x90>)
 8000b16:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000b1a:	fb91 f2f2 	sdiv	r2, r1, r2
 8000b1e:	fb02 f303 	mul.w	r3, r2, r3
 8000b22:	4619      	mov	r1, r3
		wrap->wrap_str[aux] = &txt[aux
 8000b24:	7bba      	ldrb	r2, [r7, #14]
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	4419      	add	r1, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		aux++;
 8000b30:	7bbb      	ldrb	r3, [r7, #14]
 8000b32:	3301      	adds	r3, #1
 8000b34:	73bb      	strb	r3, [r7, #14]
	} while (aux != wrap->wrap_times);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7d1b      	ldrb	r3, [r3, #20]
 8000b3a:	7bba      	ldrb	r2, [r7, #14]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d1e4      	bne.n	8000b0a <str_warper+0x4e>
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	20000434 	.word	0x20000434

08000b50 <lcd_print>:
void test_font(void){
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}

void lcd_print(uint8_t *txt) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af04      	add	r7, sp, #16
 8000b56:	6078      	str	r0, [r7, #4]
	txt_wrap wrap;
	wrap.wrap_str[0] = txt;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]
	wrap.wrap_times = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t aux = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (text_invertion) {
 8000b68:	4b95      	ldr	r3, [pc, #596]	; (8000dc0 <lcd_print+0x270>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f000 809a 	beq.w	8000ca6 <lcd_print+0x156>
		if (text_wrap) {
 8000b72:	4b94      	ldr	r3, [pc, #592]	; (8000dc4 <lcd_print+0x274>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d072      	beq.n	8000c60 <lcd_print+0x110>
			str_warper(&wrap, txt);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff9b 	bl	8000abc <str_warper>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000b8c:	e061      	b.n	8000c52 <lcd_print+0x102>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000b8e:	4b8e      	ldr	r3, [pc, #568]	; (8000dc8 <lcd_print+0x278>)
 8000b90:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b8a      	ldr	r3, [pc, #552]	; (8000dcc <lcd_print+0x27c>)
 8000ba2:	705a      	strb	r2, [r3, #1]
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000ba4:	4b89      	ldr	r3, [pc, #548]	; (8000dcc <lcd_print+0x27c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b299      	uxth	r1, r3
 8000baa:	4b88      	ldr	r3, [pc, #544]	; (8000dcc <lcd_print+0x27c>)
 8000bac:	785b      	ldrb	r3, [r3, #1]
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
						0, 0, 0, wrap.wrap_str[aux]);
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	3328      	adds	r3, #40	; 0x28
 8000bb8:	443b      	add	r3, r7
 8000bba:	f853 3c1c 	ldr.w	r3, [r3, #-28]
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	9302      	str	r3, [sp, #8]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2320      	movs	r3, #32
 8000bce:	487e      	ldr	r0, [pc, #504]	; (8000dc8 <lcd_print+0x278>)
 8000bd0:	f000 fe40 	bl	8001854 <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 8000bd4:	487c      	ldr	r0, [pc, #496]	; (8000dc8 <lcd_print+0x278>)
 8000bd6:	f000 fce3 	bl	80015a0 <u8g2_SendBuffer>

				if (u8g2_GetStrWidth(&u8g2,
						wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 8000bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000bde:	3b01      	subs	r3, #1
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	3328      	adds	r3, #40	; 0x28
 8000be4:	443b      	add	r3, r7
 8000be6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
				if (u8g2_GetStrWidth(&u8g2,
 8000bea:	4619      	mov	r1, r3
 8000bec:	4876      	ldr	r0, [pc, #472]	; (8000dc8 <lcd_print+0x278>)
 8000bee:	f001 fd3f 	bl	8002670 <u8g2_GetStrWidth>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
						wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 8000bf6:	4b74      	ldr	r3, [pc, #464]	; (8000dc8 <lcd_print+0x278>)
 8000bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
				if (u8g2_GetStrWidth(&u8g2,
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d90e      	bls.n	8000c1e <lcd_print+0xce>
					cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000c00:	4b71      	ldr	r3, [pc, #452]	; (8000dc8 <lcd_print+0x278>)
 8000c02:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c0c:	fb02 f303 	mul.w	r3, r2, r3
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	4b6e      	ldr	r3, [pc, #440]	; (8000dcc <lcd_print+0x27c>)
 8000c14:	705a      	strb	r2, [r3, #1]
					cursor[0] = 0;
 8000c16:	4b6d      	ldr	r3, [pc, #436]	; (8000dcc <lcd_print+0x27c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e014      	b.n	8000c48 <lcd_print+0xf8>
				} else {
					cursor[0] += u8g2_GetStrWidth(&u8g2,
							wrap.wrap_str[aux - 1]);
 8000c1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c22:	3b01      	subs	r3, #1
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	3328      	adds	r3, #40	; 0x28
 8000c28:	443b      	add	r3, r7
 8000c2a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
					cursor[0] += u8g2_GetStrWidth(&u8g2,
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4865      	ldr	r0, [pc, #404]	; (8000dc8 <lcd_print+0x278>)
 8000c32:	f001 fd1d 	bl	8002670 <u8g2_GetStrWidth>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4b64      	ldr	r3, [pc, #400]	; (8000dcc <lcd_print+0x27c>)
 8000c3c:	781a      	ldrb	r2, [r3, #0]
 8000c3e:	b2cb      	uxtb	r3, r1
 8000c40:	4413      	add	r3, r2
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b61      	ldr	r3, [pc, #388]	; (8000dcc <lcd_print+0x27c>)
 8000c46:	701a      	strb	r2, [r3, #0]
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c56:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d397      	bcc.n	8000b8e <lcd_print+0x3e>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
		}
	}

}
 8000c5e:	e0ab      	b.n	8000db8 <lcd_print+0x268>
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 8000c60:	4b5a      	ldr	r3, [pc, #360]	; (8000dcc <lcd_print+0x27c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b299      	uxth	r1, r3
 8000c66:	4b59      	ldr	r3, [pc, #356]	; (8000dcc <lcd_print+0x27c>)
 8000c68:	785b      	ldrb	r3, [r3, #1]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	9303      	str	r3, [sp, #12]
 8000c70:	2300      	movs	r3, #0
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	2300      	movs	r3, #0
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2320      	movs	r3, #32
 8000c7e:	4852      	ldr	r0, [pc, #328]	; (8000dc8 <lcd_print+0x278>)
 8000c80:	f000 fde8 	bl	8001854 <u8g2_DrawButtonUTF8>
			u8g2_SendBuffer(&u8g2);
 8000c84:	4850      	ldr	r0, [pc, #320]	; (8000dc8 <lcd_print+0x278>)
 8000c86:	f000 fc8b 	bl	80015a0 <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	484e      	ldr	r0, [pc, #312]	; (8000dc8 <lcd_print+0x278>)
 8000c8e:	f001 fcef 	bl	8002670 <u8g2_GetStrWidth>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <lcd_print+0x27c>)
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	b2cb      	uxtb	r3, r1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	4b4a      	ldr	r3, [pc, #296]	; (8000dcc <lcd_print+0x27c>)
 8000ca2:	701a      	strb	r2, [r3, #0]
}
 8000ca4:	e088      	b.n	8000db8 <lcd_print+0x268>
		if (text_wrap) {
 8000ca6:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <lcd_print+0x274>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d06a      	beq.n	8000d84 <lcd_print+0x234>
			str_warper(&wrap, txt);
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff01 	bl	8000abc <str_warper>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cc0:	e022      	b.n	8000d08 <lcd_print+0x1b8>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000cc2:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <lcd_print+0x278>)
 8000cc4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <lcd_print+0x27c>)
 8000cd6:	705a      	strb	r2, [r3, #1]
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], wrap.wrap_str[aux]);
 8000cd8:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <lcd_print+0x27c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b299      	uxth	r1, r3
 8000cde:	4b3b      	ldr	r3, [pc, #236]	; (8000dcc <lcd_print+0x27c>)
 8000ce0:	785b      	ldrb	r3, [r3, #1]
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	3328      	adds	r3, #40	; 0x28
 8000cec:	443b      	add	r3, r7
 8000cee:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000cf2:	4835      	ldr	r0, [pc, #212]	; (8000dc8 <lcd_print+0x278>)
 8000cf4:	f001 fb80 	bl	80023f8 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 8000cf8:	4833      	ldr	r0, [pc, #204]	; (8000dc8 <lcd_print+0x278>)
 8000cfa:	f000 fc51 	bl	80015a0 <u8g2_SendBuffer>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d02:	3301      	adds	r3, #1
 8000d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3d6      	bcc.n	8000cc2 <lcd_print+0x172>
					wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 8000d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	3328      	adds	r3, #40	; 0x28
 8000d1e:	443b      	add	r3, r7
 8000d20:	f853 3c1c 	ldr.w	r3, [r3, #-28]
			if (u8g2_GetStrWidth(&u8g2,
 8000d24:	4619      	mov	r1, r3
 8000d26:	4828      	ldr	r0, [pc, #160]	; (8000dc8 <lcd_print+0x278>)
 8000d28:	f001 fca2 	bl	8002670 <u8g2_GetStrWidth>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
					wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <lcd_print+0x278>)
 8000d32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
			if (u8g2_GetStrWidth(&u8g2,
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d90e      	bls.n	8000d58 <lcd_print+0x208>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <lcd_print+0x278>)
 8000d3c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <lcd_print+0x27c>)
 8000d4e:	705a      	strb	r2, [r3, #1]
				cursor[0] = 0;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <lcd_print+0x27c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
}
 8000d56:	e02f      	b.n	8000db8 <lcd_print+0x268>
				cursor[0] += u8g2_GetStrWidth(&u8g2, wrap.wrap_str[aux - 1]);
 8000d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	3328      	adds	r3, #40	; 0x28
 8000d62:	443b      	add	r3, r7
 8000d64:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <lcd_print+0x278>)
 8000d6c:	f001 fc80 	bl	8002670 <u8g2_GetStrWidth>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4619      	mov	r1, r3
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <lcd_print+0x27c>)
 8000d76:	781a      	ldrb	r2, [r3, #0]
 8000d78:	b2cb      	uxtb	r3, r1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <lcd_print+0x27c>)
 8000d80:	701a      	strb	r2, [r3, #0]
}
 8000d82:	e019      	b.n	8000db8 <lcd_print+0x268>
			u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <lcd_print+0x27c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <lcd_print+0x27c>)
 8000d8c:	785b      	ldrb	r3, [r3, #1]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <lcd_print+0x278>)
 8000d94:	f001 fb30 	bl	80023f8 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 8000d98:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <lcd_print+0x278>)
 8000d9a:	f000 fc01 	bl	80015a0 <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <lcd_print+0x278>)
 8000da2:	f001 fc65 	bl	8002670 <u8g2_GetStrWidth>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4619      	mov	r1, r3
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <lcd_print+0x27c>)
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	b2cb      	uxtb	r3, r1
 8000db0:	4413      	add	r3, r2
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <lcd_print+0x27c>)
 8000db6:	701a      	strb	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000595 	.word	0x20000595
 8000dc4:	20000596 	.word	0x20000596
 8000dc8:	20000434 	.word	0x20000434
 8000dcc:	20000598 	.word	0x20000598

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f002 fc44 	bl	8003660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f80a 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 f898 	bl	8000f10 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000de0:	f009 fc8c 	bl	800a6fc <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000de4:	f000 f85e 	bl	8000ea4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 8000de8:	f7ff fa36 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 8000dec:	bf30      	wfi
 8000dee:	e7fd      	b.n	8000dec <main+0x1c>

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfa:	2228      	movs	r2, #40	; 0x28
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00a f960 	bl	800b0c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e20:	2301      	movs	r3, #1
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e32:	2302      	movs	r3, #2
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e3c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e46:	4618      	mov	r0, r3
 8000e48:	f004 fc18 	bl	800567c <HAL_RCC_OscConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e52:	f000 f8e3 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e56:	230f      	movs	r3, #15
 8000e58:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2102      	movs	r1, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f004 fe84 	bl	8005b80 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e7e:	f000 f8cd 	bl	800101c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e82:	2310      	movs	r3, #16
 8000e84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 ffdd 	bl	8005e4c <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e98:	f000 f8c0 	bl	800101c <Error_Handler>
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	3750      	adds	r7, #80	; 0x50
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ed8:	2208      	movs	r2, #8
 8000eda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ef0:	220a      	movs	r2, #10
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ef6:	f005 f85f 	bl	8005fb8 <HAL_SPI_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f00:	f000 f88c 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2000059c 	.word	0x2000059c
 8000f0c:	40013000 	.word	0x40013000

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	4b39      	ldr	r3, [pc, #228]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a38      	ldr	r2, [pc, #224]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f2a:	f043 0310 	orr.w	r3, r3, #16
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b36      	ldr	r3, [pc, #216]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0310 	and.w	r3, r3, #16
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	4b33      	ldr	r3, [pc, #204]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a32      	ldr	r2, [pc, #200]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f42:	f043 0320 	orr.w	r3, r3, #32
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b30      	ldr	r3, [pc, #192]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0320 	and.w	r3, r3, #32
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a2c      	ldr	r2, [pc, #176]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b2a      	ldr	r3, [pc, #168]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a26      	ldr	r2, [pc, #152]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f72:	f043 0308 	orr.w	r3, r3, #8
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <MX_GPIO_Init+0xfc>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8a:	4821      	ldr	r0, [pc, #132]	; (8001010 <MX_GPIO_Init+0x100>)
 8000f8c:	f002 fe9a 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2110      	movs	r1, #16
 8000f94:	481f      	ldr	r0, [pc, #124]	; (8001014 <MX_GPIO_Init+0x104>)
 8000f96:	f002 fe95 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	481d      	ldr	r0, [pc, #116]	; (8001014 <MX_GPIO_Init+0x104>)
 8000fa0:	f002 fe90 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	481b      	ldr	r0, [pc, #108]	; (8001018 <MX_GPIO_Init+0x108>)
 8000faa:	f002 fe8b 	bl	8003cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4812      	ldr	r0, [pc, #72]	; (8001010 <MX_GPIO_Init+0x100>)
 8000fc8:	f002 fcf8 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000fcc:	2350      	movs	r3, #80	; 0x50
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480c      	ldr	r0, [pc, #48]	; (8001014 <MX_GPIO_Init+0x104>)
 8000fe4:	f002 fcea 	bl	80039bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <MX_GPIO_Init+0x108>)
 8001000:	f002 fcdc 	bl	80039bc <HAL_GPIO_Init>

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	40011000 	.word	0x40011000
 8001014:	40010800 	.word	0x40010800
 8001018:	40010c00 	.word	0x40010c00

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_MspInit+0x7c>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <HAL_MspInit+0x7c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_MspInit+0x7c>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_MspInit+0x7c>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <HAL_MspInit+0x7c>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_MspInit+0x7c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2005      	movs	r0, #5
 8001064:	f002 fc6f 	bl	8003946 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001068:	2005      	movs	r0, #5
 800106a:	f002 fc88 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2005      	movs	r0, #5
 8001074:	f002 fc67 	bl	8003946 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001078:	2005      	movs	r0, #5
 800107a:	f002 fc80 	bl	800397e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_MspInit+0x80>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_MspInit+0x80>)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010000 	.word	0x40010000

080010ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_SPI_MspInit+0x70>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d123      	bne.n	8001114 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_SPI_MspInit+0x74>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <HAL_SPI_MspInit+0x74>)
 80010d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_SPI_MspInit+0x74>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_SPI_MspInit+0x74>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <HAL_SPI_MspInit+0x74>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_SPI_MspInit+0x74>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010fc:	23a0      	movs	r3, #160	; 0xa0
 80010fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_SPI_MspInit+0x78>)
 8001110:	f002 fc54 	bl	80039bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40013000 	.word	0x40013000
 8001120:	40021000 	.word	0x40021000
 8001124:	40010800 	.word	0x40010800

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr

0800116a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  monitor_interrupt();
 800116e:	f7ff fa1b 	bl	80005a8 <monitor_interrupt>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001172:	f002 fabb 	bl	80036ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}

0800117a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
	...

08001188 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800118e:	f002 fee2 	bl	8003f56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20001894 	.word	0x20001894

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f009 ff50 	bl	800b070 <__errno>
 80011d0:	4603      	mov	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20005000 	.word	0x20005000
 80011fc:	00000400 	.word	0x00000400
 8001200:	200005f4 	.word	0x200005f4
 8001204:	20001db0 	.word	0x20001db0

08001208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	78fa      	ldrb	r2, [r7, #3]
 8001224:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b088      	sub	sp, #32
 8001236:	af02      	add	r7, sp, #8
 8001238:	60f8      	str	r0, [r7, #12]
 800123a:	4608      	mov	r0, r1
 800123c:	4611      	mov	r1, r2
 800123e:	461a      	mov	r2, r3
 8001240:	4603      	mov	r3, r0
 8001242:	817b      	strh	r3, [r7, #10]
 8001244:	460b      	mov	r3, r1
 8001246:	813b      	strh	r3, [r7, #8]
 8001248:	4613      	mov	r3, r2
 800124a:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001252:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001254:	7dbb      	ldrb	r3, [r7, #22]
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001262:	897a      	ldrh	r2, [r7, #10]
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	4413      	add	r3, r2
 8001268:	b298      	uxth	r0, r3
 800126a:	893b      	ldrh	r3, [r7, #8]
 800126c:	3301      	adds	r3, #1
 800126e:	b29b      	uxth	r3, r3
 8001270:	893a      	ldrh	r2, [r7, #8]
 8001272:	8979      	ldrh	r1, [r7, #10]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	4603      	mov	r3, r0
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f001 fbc8 	bl	8002a0e <u8g2_IsIntersection>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d040      	beq.n	8001306 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001288:	e035      	b.n	80012f6 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	781a      	ldrb	r2, [r3, #0]
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	4013      	ands	r3, r2
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00c      	beq.n	80012b2 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	7dba      	ldrb	r2, [r7, #22]
 800129c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80012a0:	893a      	ldrh	r2, [r7, #8]
 80012a2:	8979      	ldrh	r1, [r7, #10]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f001 fa76 	bl	800279c <u8g2_DrawHVLine>
 80012b0:	e010      	b.n	80012d4 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10b      	bne.n	80012d4 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	7d7a      	ldrb	r2, [r7, #21]
 80012c0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80012c4:	893a      	ldrh	r2, [r7, #8]
 80012c6:	8979      	ldrh	r1, [r7, #10]
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f001 fa64 	bl	800279c <u8g2_DrawHVLine>
    }
    x++;
 80012d4:	897b      	ldrh	r3, [r7, #10]
 80012d6:	3301      	adds	r3, #1
 80012d8:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d104      	bne.n	80012f0 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	75fb      	strb	r3, [r7, #23]
      b++;
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	3301      	adds	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
    }
    len--;
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1c6      	bne.n	800128a <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	7dba      	ldrb	r2, [r7, #22]
 8001300:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001304:	e000      	b.n	8001308 <u8g2_DrawHXBM+0xd6>
    return;
 8001306:	bf00      	nop
}
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b088      	sub	sp, #32
 8001312:	af02      	add	r7, sp, #8
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	4608      	mov	r0, r1
 8001318:	4611      	mov	r1, r2
 800131a:	461a      	mov	r2, r3
 800131c:	4603      	mov	r3, r0
 800131e:	817b      	strh	r3, [r7, #10]
 8001320:	460b      	mov	r3, r1
 8001322:	813b      	strh	r3, [r7, #8]
 8001324:	4613      	mov	r3, r2
 8001326:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 800132c:	8afb      	ldrh	r3, [r7, #22]
 800132e:	3307      	adds	r3, #7
 8001330:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001332:	8afb      	ldrh	r3, [r7, #22]
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001338:	897a      	ldrh	r2, [r7, #10]
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4413      	add	r3, r2
 800133e:	b298      	uxth	r0, r3
 8001340:	893a      	ldrh	r2, [r7, #8]
 8001342:	8c3b      	ldrh	r3, [r7, #32]
 8001344:	4413      	add	r3, r2
 8001346:	b29b      	uxth	r3, r3
 8001348:	893a      	ldrh	r2, [r7, #8]
 800134a:	8979      	ldrh	r1, [r7, #10]
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	4603      	mov	r3, r0
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f001 fb5c 	bl	8002a0e <u8g2_IsIntersection>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d017      	beq.n	800138c <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800135c:	e012      	b.n	8001384 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 800135e:	88f8      	ldrh	r0, [r7, #6]
 8001360:	893a      	ldrh	r2, [r7, #8]
 8001362:	8979      	ldrh	r1, [r7, #10]
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4603      	mov	r3, r0
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f7ff ff61 	bl	8001232 <u8g2_DrawHXBM>
    bitmap += blen;
 8001370:	8afb      	ldrh	r3, [r7, #22]
 8001372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001374:	4413      	add	r3, r2
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001378:	893b      	ldrh	r3, [r7, #8]
 800137a:	3301      	adds	r3, #1
 800137c:	813b      	strh	r3, [r7, #8]
    h--;
 800137e:	8c3b      	ldrh	r3, [r7, #32]
 8001380:	3b01      	subs	r3, #1
 8001382:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001384:	8c3b      	ldrh	r3, [r7, #32]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1e9      	bne.n	800135e <u8g2_DrawXBM+0x50>
 800138a:	e000      	b.n	800138e <u8g2_DrawXBM+0x80>
    return;
 800138c:	bf00      	nop
  }
}
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	4608      	mov	r0, r1
 800139e:	4611      	mov	r1, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	817b      	strh	r3, [r7, #10]
 80013a6:	460b      	mov	r3, r1
 80013a8:	813b      	strh	r3, [r7, #8]
 80013aa:	4613      	mov	r3, r2
 80013ac:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80013ae:	897a      	ldrh	r2, [r7, #10]
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	4413      	add	r3, r2
 80013b4:	b298      	uxth	r0, r3
 80013b6:	893a      	ldrh	r2, [r7, #8]
 80013b8:	8b3b      	ldrh	r3, [r7, #24]
 80013ba:	4413      	add	r3, r2
 80013bc:	b29b      	uxth	r3, r3
 80013be:	893a      	ldrh	r2, [r7, #8]
 80013c0:	8979      	ldrh	r1, [r7, #10]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	4603      	mov	r3, r0
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f001 fb21 	bl	8002a0e <u8g2_IsIntersection>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d012      	beq.n	80013f8 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80013d2:	e00d      	b.n	80013f0 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	893a      	ldrh	r2, [r7, #8]
 80013d8:	8979      	ldrh	r1, [r7, #10]
 80013da:	2000      	movs	r0, #0
 80013dc:	9000      	str	r0, [sp, #0]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f001 f9dc 	bl	800279c <u8g2_DrawHVLine>
    y++;    
 80013e4:	893b      	ldrh	r3, [r7, #8]
 80013e6:	3301      	adds	r3, #1
 80013e8:	813b      	strh	r3, [r7, #8]
    h--;
 80013ea:	8b3b      	ldrh	r3, [r7, #24]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 80013f0:	8b3b      	ldrh	r3, [r7, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1ee      	bne.n	80013d4 <u8g2_DrawBox+0x40>
 80013f6:	e000      	b.n	80013fa <u8g2_DrawBox+0x66>
    return;
 80013f8:	bf00      	nop
  }
}
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af02      	add	r7, sp, #8
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	4608      	mov	r0, r1
 800140a:	4611      	mov	r1, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4603      	mov	r3, r0
 8001410:	817b      	strh	r3, [r7, #10]
 8001412:	460b      	mov	r3, r1
 8001414:	813b      	strh	r3, [r7, #8]
 8001416:	4613      	mov	r3, r2
 8001418:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800141e:	897a      	ldrh	r2, [r7, #10]
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4413      	add	r3, r2
 8001424:	b298      	uxth	r0, r3
 8001426:	893a      	ldrh	r2, [r7, #8]
 8001428:	8c3b      	ldrh	r3, [r7, #32]
 800142a:	4413      	add	r3, r2
 800142c:	b29b      	uxth	r3, r3
 800142e:	893a      	ldrh	r2, [r7, #8]
 8001430:	8979      	ldrh	r1, [r7, #10]
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	4603      	mov	r3, r0
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f001 fae9 	bl	8002a0e <u8g2_IsIntersection>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d037      	beq.n	80014b2 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	893a      	ldrh	r2, [r7, #8]
 8001446:	8979      	ldrh	r1, [r7, #10]
 8001448:	2000      	movs	r0, #0
 800144a:	9000      	str	r0, [sp, #0]
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f001 f9a5 	bl	800279c <u8g2_DrawHVLine>
  if (h >= 2) {
 8001452:	8c3b      	ldrh	r3, [r7, #32]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d92d      	bls.n	80014b4 <u8g2_DrawFrame+0xb4>
    h-=2;
 8001458:	8c3b      	ldrh	r3, [r7, #32]
 800145a:	3b02      	subs	r3, #2
 800145c:	843b      	strh	r3, [r7, #32]
    y++;
 800145e:	893b      	ldrh	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001464:	8c3b      	ldrh	r3, [r7, #32]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01a      	beq.n	80014a0 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800146a:	8c3b      	ldrh	r3, [r7, #32]
 800146c:	893a      	ldrh	r2, [r7, #8]
 800146e:	8979      	ldrh	r1, [r7, #10]
 8001470:	2001      	movs	r0, #1
 8001472:	9000      	str	r0, [sp, #0]
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f001 f991 	bl	800279c <u8g2_DrawHVLine>
      x+=w;
 800147a:	897a      	ldrh	r2, [r7, #10]
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	4413      	add	r3, r2
 8001480:	817b      	strh	r3, [r7, #10]
      x--;
 8001482:	897b      	ldrh	r3, [r7, #10]
 8001484:	3b01      	subs	r3, #1
 8001486:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001488:	8c3b      	ldrh	r3, [r7, #32]
 800148a:	893a      	ldrh	r2, [r7, #8]
 800148c:	8979      	ldrh	r1, [r7, #10]
 800148e:	2001      	movs	r0, #1
 8001490:	9000      	str	r0, [sp, #0]
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f001 f982 	bl	800279c <u8g2_DrawHVLine>
      y+=h;
 8001498:	893a      	ldrh	r2, [r7, #8]
 800149a:	8c3b      	ldrh	r3, [r7, #32]
 800149c:	4413      	add	r3, r2
 800149e:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	893a      	ldrh	r2, [r7, #8]
 80014a4:	8af9      	ldrh	r1, [r7, #22]
 80014a6:	2000      	movs	r0, #0
 80014a8:	9000      	str	r0, [sp, #0]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f001 f976 	bl	800279c <u8g2_DrawHVLine>
 80014b0:	e000      	b.n	80014b4 <u8g2_DrawFrame+0xb4>
    return;
 80014b2:	bf00      	nop
  }
}
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	7c1b      	ldrb	r3, [r3, #16]
 80014c8:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014d0:	461a      	mov	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f009 fdeb 	bl	800b0c4 <memset>
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af02      	add	r7, sp, #8
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
 8001502:	4613      	mov	r3, r2
 8001504:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	7c1b      	ldrb	r3, [r3, #16]
 800150c:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800150e:	78fb      	ldrb	r3, [r7, #3]
 8001510:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001516:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	b29b      	uxth	r3, r3
 800151c:	89ba      	ldrh	r2, [r7, #12]
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001524:	89bb      	ldrh	r3, [r7, #12]
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800152a:	89bb      	ldrh	r3, [r7, #12]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	4413      	add	r3, r2
 8001530:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001532:	7bf9      	ldrb	r1, [r7, #15]
 8001534:	78ba      	ldrb	r2, [r7, #2]
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	460b      	mov	r3, r1
 800153c:	2100      	movs	r1, #0
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f001 ff88 	bl	8003454 <u8x8_DrawTile>
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800155e:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001566:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	7c5b      	ldrb	r3, [r3, #17]
 800156e:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001570:	7bba      	ldrb	r2, [r7, #14]
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffbd 	bl	80014f6 <u8g2_send_tile_row>
    src_row++;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	3301      	adds	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	3301      	adds	r3, #1
 8001586:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	7b7b      	ldrb	r3, [r7, #13]
 800158c:	429a      	cmp	r2, r3
 800158e:	d203      	bcs.n	8001598 <u8g2_send_buffer+0x4c>
 8001590:	7bba      	ldrb	r2, [r7, #14]
 8001592:	7b3b      	ldrb	r3, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d3eb      	bcc.n	8001570 <u8g2_send_buffer+0x24>
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ffcf 	bl	800154c <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f001 ffb2 	bl	8003518 <u8x8_RefreshDisplay>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	4798      	blx	r3
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff5b 	bl	80014ba <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001604:	2100      	movs	r1, #0
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffd8 	bl	80015bc <u8g2_SetBufferCurrTileRow>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff95 	bl	800154c <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001628:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	4413      	add	r3, r2
 8001634:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	7c5b      	ldrb	r3, [r3, #17]
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	429a      	cmp	r2, r3
 8001640:	d304      	bcc.n	800164c <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f001 ff68 	bl	8003518 <u8x8_RefreshDisplay>
    return 0;
 8001648:	2300      	movs	r3, #0
 800164a:	e00d      	b.n	8001668 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff2f 	bl	80014ba <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ffab 	bl	80015bc <u8g2_SetBufferCurrTileRow>
  return 1;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af02      	add	r7, sp, #8
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	4608      	mov	r0, r1
 800167a:	4611      	mov	r1, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4603      	mov	r3, r0
 8001680:	817b      	strh	r3, [r7, #10]
 8001682:	460b      	mov	r3, r1
 8001684:	813b      	strh	r3, [r7, #8]
 8001686:	4613      	mov	r3, r2
 8001688:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 800168a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800168c:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 800168e:	2308      	movs	r3, #8
 8001690:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 8001692:	88fb      	ldrh	r3, [r7, #6]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80016a0:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80016a8:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80016b0:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 80016bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016be:	3301      	adds	r3, #1
 80016c0:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 80016c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 80016c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016c8:	3301      	adds	r3, #1
 80016ca:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 80016cc:	897b      	ldrh	r3, [r7, #10]
 80016ce:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 80016d0:	8b7a      	ldrh	r2, [r7, #26]
 80016d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 80016d8:	8b7a      	ldrh	r2, [r7, #26]
 80016da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 80016e0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80016e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016e4:	4413      	add	r3, r2
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	8c3b      	ldrh	r3, [r7, #32]
 80016ee:	4413      	add	r3, r2
 80016f0:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 80016f2:	893b      	ldrh	r3, [r7, #8]
 80016f4:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	4798      	blx	r3
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	8afb      	ldrh	r3, [r7, #22]
 8001704:	4413      	add	r3, r2
 8001706:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001708:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800170c:	b29b      	uxth	r3, r3
 800170e:	8afa      	ldrh	r2, [r7, #22]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 8001714:	8afa      	ldrh	r2, [r7, #22]
 8001716:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 800171c:	8afa      	ldrh	r2, [r7, #22]
 800171e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 8001724:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001728:	b21a      	sxth	r2, r3
 800172a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800172e:	b21b      	sxth	r3, r3
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	b21b      	sxth	r3, r3
 8001734:	b29a      	uxth	r2, r3
 8001736:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001738:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800173a:	440b      	add	r3, r1
 800173c:	b29b      	uxth	r3, r3
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	4413      	add	r3, r2
 8001744:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 8001746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001748:	2b00      	cmp	r3, #0
 800174a:	d067      	beq.n	800181c <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 800174c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800174e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001750:	429a      	cmp	r2, r3
 8001752:	d109      	bne.n	8001768 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 8001754:	7f7b      	ldrb	r3, [r7, #29]
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf0c      	ite	eq
 800175a:	2301      	moveq	r3, #1
 800175c:	2300      	movne	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f001 f90a 	bl	800297c <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8001768:	8b38      	ldrh	r0, [r7, #24]
 800176a:	8afa      	ldrh	r2, [r7, #22]
 800176c:	8b79      	ldrh	r1, [r7, #26]
 800176e:	8abb      	ldrh	r3, [r7, #20]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	4603      	mov	r3, r0
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff fe43 	bl	8001400 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 800177a:	7f7b      	ldrb	r3, [r7, #29]
 800177c:	4619      	mov	r1, r3
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f001 f8fc 	bl	800297c <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	f003 0318 	and.w	r3, r3, #24
 800178a:	2b00      	cmp	r3, #0
 800178c:	d042      	beq.n	8001814 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 800178e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	429a      	cmp	r2, r3
 8001798:	d13c      	bne.n	8001814 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	10db      	asrs	r3, r3, #3
 800179e:	b29b      	uxth	r3, r3
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 80017a6:	8a7b      	ldrh	r3, [r7, #18]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 80017ac:	2300      	movs	r3, #0
 80017ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80017b0:	e02c      	b.n	800180c <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 80017b2:	8b7a      	ldrh	r2, [r7, #26]
 80017b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017b6:	4413      	add	r3, r2
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	8a7b      	ldrh	r3, [r7, #18]
 80017bc:	4413      	add	r3, r2
 80017be:	b299      	uxth	r1, r3
 80017c0:	8afa      	ldrh	r2, [r7, #22]
 80017c2:	8abb      	ldrh	r3, [r7, #20]
 80017c4:	4413      	add	r3, r2
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017ca:	4413      	add	r3, r2
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	8a7b      	ldrh	r3, [r7, #18]
 80017d0:	4413      	add	r3, r2
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	8b3b      	ldrh	r3, [r7, #24]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f001 f86b 	bl	80028b2 <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 80017dc:	8b7a      	ldrh	r2, [r7, #26]
 80017de:	8b3b      	ldrh	r3, [r7, #24]
 80017e0:	4413      	add	r3, r2
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017e6:	4413      	add	r3, r2
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	8a7b      	ldrh	r3, [r7, #18]
 80017ec:	4413      	add	r3, r2
 80017ee:	b299      	uxth	r1, r3
 80017f0:	8afa      	ldrh	r2, [r7, #22]
 80017f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017f4:	4413      	add	r3, r2
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	8a7b      	ldrh	r3, [r7, #18]
 80017fa:	4413      	add	r3, r2
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	8abb      	ldrh	r3, [r7, #20]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f001 f86f 	bl	80028e4 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8001806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001808:	3301      	adds	r3, #1
 800180a:	847b      	strh	r3, [r7, #34]	; 0x22
 800180c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800180e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001810:	429a      	cmp	r2, r3
 8001812:	d3ce      	bcc.n	80017b2 <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 8001814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001816:	3b01      	subs	r3, #1
 8001818:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 800181a:	e757      	b.n	80016cc <u8g2_DrawButtonFrame+0x5c>
      break;
 800181c:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	f003 0320 	and.w	r3, r3, #32
 8001824:	2b00      	cmp	r3, #0
 8001826:	d011      	beq.n	800184c <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8001828:	2102      	movs	r1, #2
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f001 f8a6 	bl	800297c <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8001830:	8b38      	ldrh	r0, [r7, #24]
 8001832:	8afa      	ldrh	r2, [r7, #22]
 8001834:	8b79      	ldrh	r1, [r7, #26]
 8001836:	8abb      	ldrh	r3, [r7, #20]
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	4603      	mov	r3, r0
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f7ff fda9 	bl	8001394 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001842:	7f7b      	ldrb	r3, [r7, #29]
 8001844:	4619      	mov	r1, r3
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f001 f898 	bl	800297c <u8g2_SetDrawColor>
  }
}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af04      	add	r7, sp, #16
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	461a      	mov	r2, r3
 8001862:	4603      	mov	r3, r0
 8001864:	817b      	strh	r3, [r7, #10]
 8001866:	460b      	mov	r3, r1
 8001868:	813b      	strh	r3, [r7, #8]
 800186a:	4613      	mov	r3, r2
 800186c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 800186e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 ff11 	bl	8002698 <u8g2_GetUTF8Width>
 8001876:	4603      	mov	r3, r0
 8001878:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 800187a:	2300      	movs	r3, #0
 800187c:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8001888:	8afb      	ldrh	r3, [r7, #22]
 800188a:	3301      	adds	r3, #1
 800188c:	0fda      	lsrs	r2, r3, #31
 800188e:	4413      	add	r3, r2
 8001890:	105b      	asrs	r3, r3, #1
 8001892:	425b      	negs	r3, r3
 8001894:	b29a      	uxth	r2, r3
 8001896:	897b      	ldrh	r3, [r7, #10]
 8001898:	4413      	add	r3, r2
 800189a:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 800189c:	8afa      	ldrh	r2, [r7, #22]
 800189e:	8c3b      	ldrh	r3, [r7, #32]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d20d      	bcs.n	80018c0 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 80018ae:	8c3a      	ldrh	r2, [r7, #32]
 80018b0:	8afb      	ldrh	r3, [r7, #22]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	0fda      	lsrs	r2, r3, #31
 80018b6:	4413      	add	r3, r2
 80018b8:	105b      	asrs	r3, r3, #1
 80018ba:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 80018bc:	8c3b      	ldrh	r3, [r7, #32]
 80018be:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 80018c0:	2101      	movs	r1, #1
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 fcda 	bl	800227c <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 80018c8:	893a      	ldrh	r2, [r7, #8]
 80018ca:	8979      	ldrh	r1, [r7, #10]
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 fd92 	bl	80023f8 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 80018d4:	897a      	ldrh	r2, [r7, #10]
 80018d6:	8abb      	ldrh	r3, [r7, #20]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b299      	uxth	r1, r3
 80018dc:	88f8      	ldrh	r0, [r7, #6]
 80018de:	893a      	ldrh	r2, [r7, #8]
 80018e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	8afb      	ldrh	r3, [r7, #22]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	4603      	mov	r3, r0
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f7ff febe 	bl	8001670 <u8g2_DrawButtonFrame>
  
}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff fe71 	bl	80015ec <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fe82 	bl	8001614 <u8g2_NextPage>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f9      	bne.n	800190a <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001916:	2100      	movs	r1, #0
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fe4f 	bl	80015bc <u8g2_SetBufferCurrTileRow>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2208      	movs	r2, #8
 8001934:	701a      	strb	r2, [r3, #0]
  return buf;
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	200005f8 	.word	0x200005f8

08001948 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a0b      	ldr	r2, [pc, #44]	; (800198c <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 800195e:	490c      	ldr	r1, [pc, #48]	; (8001990 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f001 fe39 	bl	80035d8 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 8001966:	f107 0313 	add.w	r3, r7, #19
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ffdc 	bl	8001928 <u8g2_m_24_8_f>
 8001970:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001972:	7cfa      	ldrb	r2, [r7, #19]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 800197a:	6979      	ldr	r1, [r7, #20]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f001 f92f 	bl	8002be0 <u8g2_SetupBuffer>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	08003171 	.word	0x08003171
 8001990:	08003351 	.word	0x08003351
 8001994:	08002a65 	.word	0x08002a65

08001998 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
	font += offset;
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	781b      	ldrb	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	81fb      	strh	r3, [r7, #14]
	font++;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3301      	adds	r3, #1
 80019d8:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 80019da:	89fb      	ldrh	r3, [r7, #14]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	4413      	add	r3, r2
 80019ea:	81fb      	strh	r3, [r7, #14]
	return pos;
 80019ec:	89fb      	ldrh	r3, [r7, #14]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001a02:	2100      	movs	r1, #0
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f7ff ffc7 	bl	8001998 <u8g2_font_get_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001a12:	2101      	movs	r1, #1
 8001a14:	6838      	ldr	r0, [r7, #0]
 8001a16:	f7ff ffbf 	bl	8001998 <u8g2_font_get_byte>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001a22:	2102      	movs	r1, #2
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f7ff ffb7 	bl	8001998 <u8g2_font_get_byte>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001a32:	2103      	movs	r1, #3
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	f7ff ffaf 	bl	8001998 <u8g2_font_get_byte>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001a42:	2104      	movs	r1, #4
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f7ff ffa7 	bl	8001998 <u8g2_font_get_byte>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001a52:	2105      	movs	r1, #5
 8001a54:	6838      	ldr	r0, [r7, #0]
 8001a56:	f7ff ff9f 	bl	8001998 <u8g2_font_get_byte>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001a62:	2106      	movs	r1, #6
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f7ff ff97 	bl	8001998 <u8g2_font_get_byte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001a72:	2107      	movs	r1, #7
 8001a74:	6838      	ldr	r0, [r7, #0]
 8001a76:	f7ff ff8f 	bl	8001998 <u8g2_font_get_byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001a82:	2108      	movs	r1, #8
 8001a84:	6838      	ldr	r0, [r7, #0]
 8001a86:	f7ff ff87 	bl	8001998 <u8g2_font_get_byte>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001a92:	2109      	movs	r1, #9
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7ff ff7f 	bl	8001998 <u8g2_font_get_byte>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b25a      	sxtb	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001aa2:	210a      	movs	r1, #10
 8001aa4:	6838      	ldr	r0, [r7, #0]
 8001aa6:	f7ff ff77 	bl	8001998 <u8g2_font_get_byte>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	b25a      	sxtb	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001ab2:	210b      	movs	r1, #11
 8001ab4:	6838      	ldr	r0, [r7, #0]
 8001ab6:	f7ff ff6f 	bl	8001998 <u8g2_font_get_byte>
 8001aba:	4603      	mov	r3, r0
 8001abc:	b25a      	sxtb	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001ac2:	210c      	movs	r1, #12
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f7ff ff67 	bl	8001998 <u8g2_font_get_byte>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b25a      	sxtb	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001ad2:	210d      	movs	r1, #13
 8001ad4:	6838      	ldr	r0, [r7, #0]
 8001ad6:	f7ff ff5f 	bl	8001998 <u8g2_font_get_byte>
 8001ada:	4603      	mov	r3, r0
 8001adc:	b25a      	sxtb	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001ae2:	210e      	movs	r1, #14
 8001ae4:	6838      	ldr	r0, [r7, #0]
 8001ae6:	f7ff ff57 	bl	8001998 <u8g2_font_get_byte>
 8001aea:	4603      	mov	r3, r0
 8001aec:	b25a      	sxtb	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001af2:	210f      	movs	r1, #15
 8001af4:	6838      	ldr	r0, [r7, #0]
 8001af6:	f7ff ff4f 	bl	8001998 <u8g2_font_get_byte>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b25a      	sxtb	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001b02:	2110      	movs	r1, #16
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff ff47 	bl	8001998 <u8g2_font_get_byte>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b25a      	sxtb	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001b12:	2111      	movs	r1, #17
 8001b14:	6838      	ldr	r0, [r7, #0]
 8001b16:	f7ff ff50 	bl	80019ba <u8g2_font_get_word>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8001b22:	2113      	movs	r1, #19
 8001b24:	6838      	ldr	r0, [r7, #0]
 8001b26:	f7ff ff48 	bl	80019ba <u8g2_font_get_word>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 8001b32:	2115      	movs	r1, #21
 8001b34:	6838      	ldr	r0, [r7, #0]
 8001b36:	f7ff ff40 	bl	80019ba <u8g2_font_get_word>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	82da      	strh	r2, [r3, #22]
#endif
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7b1b      	ldrb	r3, [r3, #12]
 8001b5a:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	7b7b      	ldrb	r3, [r7, #13]
 8001b68:	fa42 f303 	asr.w	r3, r2, r3
 8001b6c:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 8001b6e:	7b7b      	ldrb	r3, [r7, #13]
 8001b70:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 8001b72:	7bba      	ldrb	r2, [r7, #14]
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	4413      	add	r3, r2
 8001b78:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 8001b7a:	7bbb      	ldrb	r3, [r7, #14]
 8001b7c:	2b07      	cmp	r3, #7
 8001b7e:	d91a      	bls.n	8001bb6 <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 8001b80:	2308      	movs	r3, #8
 8001b82:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 8001b84:	7b3a      	ldrb	r2, [r7, #12]
 8001b86:	7b7b      	ldrb	r3, [r7, #13]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	b25a      	sxtb	r2, r3
 8001ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	b25b      	sxtb	r3, r3
 8001bae:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 8001bb0:	7bbb      	ldrb	r3, [r7, #14]
 8001bb2:	3b08      	subs	r3, #8
 8001bb4:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7bba      	ldrb	r2, [r7, #14]
 8001bd0:	731a      	strb	r2, [r3, #12]
	return val;
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffab 	bl	8001b4a <u8g2_font_decode_get_unsigned_bits>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 8001c02:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	73bb      	strb	r3, [r7, #14]
	v -= d;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	73fb      	strb	r3, [r7, #15]
	return v;
 8001c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 8001c24:	b490      	push	{r4, r7}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	80fb      	strh	r3, [r7, #6]
 8001c36:	4603      	mov	r3, r0
 8001c38:	717b      	strb	r3, [r7, #5]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	713b      	strb	r3, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001c42:	78fb      	ldrb	r3, [r7, #3]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d014      	beq.n	8001c72 <u8g2_add_vector_y+0x4e>
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	dc19      	bgt.n	8001c80 <u8g2_add_vector_y+0x5c>
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <u8g2_add_vector_y+0x32>
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d007      	beq.n	8001c64 <u8g2_add_vector_y+0x40>
 8001c54:	e014      	b.n	8001c80 <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 8001c56:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4413      	add	r3, r2
 8001c60:	80fb      	strh	r3, [r7, #6]
		break;
 8001c62:	e014      	b.n	8001c8e <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 8001c64:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	80fb      	strh	r3, [r7, #6]
		break;
 8001c70:	e00d      	b.n	8001c8e <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 8001c72:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	88fa      	ldrh	r2, [r7, #6]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	80fb      	strh	r3, [r7, #6]
		break;
 8001c7e:	e006      	b.n	8001c8e <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 8001c80:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	88fa      	ldrh	r2, [r7, #6]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	80fb      	strh	r3, [r7, #6]
		break;
 8001c8c:	bf00      	nop
	}
	return dy;
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc90      	pop	{r4, r7}
 8001c98:	4770      	bx	lr

08001c9a <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8001c9a:	b490      	push	{r4, r7}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	4608      	mov	r0, r1
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4623      	mov	r3, r4
 8001caa:	80fb      	strh	r3, [r7, #6]
 8001cac:	4603      	mov	r3, r0
 8001cae:	717b      	strb	r3, [r7, #5]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	713b      	strb	r3, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d014      	beq.n	8001ce8 <u8g2_add_vector_x+0x4e>
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	dc19      	bgt.n	8001cf6 <u8g2_add_vector_x+0x5c>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <u8g2_add_vector_x+0x32>
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d007      	beq.n	8001cda <u8g2_add_vector_x+0x40>
 8001cca:	e014      	b.n	8001cf6 <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8001ccc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	80fb      	strh	r3, [r7, #6]
		break;
 8001cd8:	e014      	b.n	8001d04 <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8001cda:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	88fa      	ldrh	r2, [r7, #6]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	80fb      	strh	r3, [r7, #6]
		break;
 8001ce6:	e00d      	b.n	8001d04 <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8001ce8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	88fa      	ldrh	r2, [r7, #6]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	80fb      	strh	r3, [r7, #6]
		break;
 8001cf4:	e006      	b.n	8001d04 <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 8001cf6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	4413      	add	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
		break;
 8001d02:	bf00      	nop
	}
	return dx;
 8001d04:	88fb      	ldrh	r3, [r7, #6]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc90      	pop	{r4, r7}
 8001d0e:	4770      	bx	lr

08001d10 <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3360      	adds	r3, #96	; 0x60
 8001d24:	613b      	str	r3, [r7, #16]

	cnt = len;
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001d30:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001d38:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001d40:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	7d7b      	ldrb	r3, [r7, #21]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 8001d4e:	7dfa      	ldrb	r2, [r7, #23]
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d201      	bcs.n	8001d5a <u8g2_font_decode_len+0x4a>
			current = cnt;
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
 8001d58:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	889b      	ldrh	r3, [r3, #4]
 8001d5e:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	88db      	ldrh	r3, [r3, #6]
 8001d64:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001d66:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001d6a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	7c1b      	ldrb	r3, [r3, #16]
 8001d72:	89b8      	ldrh	r0, [r7, #12]
 8001d74:	f7ff ff91 	bl	8001c9a <u8g2_add_vector_x>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001d7c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001d80:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	7c1b      	ldrb	r3, [r3, #16]
 8001d88:	8978      	ldrh	r0, [r7, #10]
 8001d8a:	f7ff ff4b 	bl	8001c24 <u8g2_add_vector_y>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 8001d92:	78bb      	ldrb	r3, [r7, #2]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	7b9a      	ldrb	r2, [r3, #14]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8001da2:	7dbb      	ldrb	r3, [r7, #22]
 8001da4:	b298      	uxth	r0, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	7c1b      	ldrb	r3, [r3, #16]
 8001daa:	897a      	ldrh	r2, [r7, #10]
 8001dac:	89b9      	ldrh	r1, [r7, #12]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4603      	mov	r3, r0
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fcf2 	bl	800279c <u8g2_DrawHVLine>
 8001db8:	e013      	b.n	8001de2 <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	7b5b      	ldrb	r3, [r3, #13]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10f      	bne.n	8001de2 <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	7bda      	ldrb	r2, [r3, #15]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8001dcc:	7dbb      	ldrb	r3, [r7, #22]
 8001dce:	b298      	uxth	r0, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	7c1b      	ldrb	r3, [r3, #16]
 8001dd4:	897a      	ldrh	r2, [r7, #10]
 8001dd6:	89b9      	ldrh	r1, [r7, #12]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fcdd 	bl	800279c <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 8001de2:	7dfa      	ldrb	r2, [r7, #23]
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d309      	bcc.n	8001dfe <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 8001dea:	7dfa      	ldrb	r2, [r7, #23]
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	757b      	strb	r3, [r7, #21]
		ly++;
 8001df6:	7d3b      	ldrb	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8001dfc:	e79d      	b.n	8001d3a <u8g2_font_decode_len+0x2a>
			break;
 8001dfe:	bf00      	nop
	}
	lx += cnt;
 8001e00:	7d7a      	ldrb	r2, [r7, #21]
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	4413      	add	r3, r2
 8001e06:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8001e08:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8001e10:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	725a      	strb	r2, [r3, #9]

}
 8001e18:	bf00      	nop
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3360      	adds	r3, #96	; 0x60
 8001e2e:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001e42:	4619      	mov	r1, r3
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff fe80 	bl	8001b4a <u8g2_font_decode_get_unsigned_bits>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b25a      	sxtb	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001e58:	4619      	mov	r1, r3
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7ff fe75 	bl	8001b4a <u8g2_font_decode_get_unsigned_bits>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b25a      	sxtb	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	7b9b      	ldrb	r3, [r3, #14]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	bf0c      	ite	eq
 8001e7a:	2301      	moveq	r3, #1
 8001e7c:	2300      	movne	r3, #0
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	73da      	strb	r2, [r3, #15]
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3360      	adds	r3, #96	; 0x60
 8001e9e:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 8001ea0:	6839      	ldr	r1, [r7, #0]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffbc 	bl	8001e20 <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001eae:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6978      	ldr	r0, [r7, #20]
 8001eba:	f7ff fe90 	bl	8001bde <u8g2_font_decode_get_signed_bits>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001ec8:	4619      	mov	r1, r3
 8001eca:	6978      	ldr	r0, [r7, #20]
 8001ecc:	f7ff fe87 	bl	8001bde <u8g2_font_decode_get_signed_bits>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001eda:	4619      	mov	r1, r3
 8001edc:	6978      	ldr	r0, [r7, #20]
 8001ede:	f7ff fe7e 	bl	8001bde <u8g2_font_decode_get_signed_bits>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f340 80d7 	ble.w	80020a0 <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	8898      	ldrh	r0, [r3, #4]
 8001ef6:	7cfa      	ldrb	r2, [r7, #19]
 8001ef8:	7c7b      	ldrb	r3, [r7, #17]
 8001efa:	4413      	add	r3, r2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	425b      	negs	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	b25a      	sxtb	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	7c1b      	ldrb	r3, [r3, #16]
 8001f08:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001f0c:	f7ff fec5 	bl	8001c9a <u8g2_add_vector_x>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	88d8      	ldrh	r0, [r3, #6]
 8001f1c:	7cfa      	ldrb	r2, [r7, #19]
 8001f1e:	7c7b      	ldrb	r3, [r7, #17]
 8001f20:	4413      	add	r3, r2
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	425b      	negs	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	b25a      	sxtb	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	7c1b      	ldrb	r3, [r3, #16]
 8001f2e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001f32:	f7ff fe77 	bl	8001c24 <u8g2_add_vector_y>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	889b      	ldrh	r3, [r3, #4]
 8001f42:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	88db      	ldrh	r3, [r3, #6]
 8001f48:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 8001f4a:	8bfb      	ldrh	r3, [r7, #30]
 8001f4c:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 8001f4e:	8b7b      	ldrh	r3, [r7, #26]
 8001f50:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	7c1b      	ldrb	r3, [r3, #16]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d85a      	bhi.n	8002010 <u8g2_font_decode_glyph+0x180>
 8001f5a:	a201      	add	r2, pc, #4	; (adr r2, 8001f60 <u8g2_font_decode_glyph+0xd0>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08001f8d 	.word	0x08001f8d
 8001f68:	08001fb5 	.word	0x08001fb5
 8001f6c:	08001fe9 	.word	0x08001fe9
			case 0:
				x1 += decode->glyph_width;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	8bbb      	ldrh	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 8001f7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	8b3b      	ldrh	r3, [r7, #24]
 8001f86:	4413      	add	r3, r2
 8001f88:	833b      	strh	r3, [r7, #24]
				break;
 8001f8a:	e041      	b.n	8002010 <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 8001f8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	8bfa      	ldrh	r2, [r7, #30]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8001f98:	8bfb      	ldrh	r3, [r7, #30]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	83fb      	strh	r3, [r7, #30]
				x1++;
 8001f9e:	8bbb      	ldrh	r3, [r7, #28]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	8b3b      	ldrh	r3, [r7, #24]
 8001fae:	4413      	add	r3, r2
 8001fb0:	833b      	strh	r3, [r7, #24]
				break;
 8001fb2:	e02d      	b.n	8002010 <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	8bfa      	ldrh	r2, [r7, #30]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8001fc2:	8bfb      	ldrh	r3, [r7, #30]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	83fb      	strh	r3, [r7, #30]
				x1++;
 8001fc8:	8bbb      	ldrh	r3, [r7, #28]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 8001fce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	8b7a      	ldrh	r2, [r7, #26]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8001fda:	8b7b      	ldrh	r3, [r7, #26]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	837b      	strh	r3, [r7, #26]
				y1++;
 8001fe0:	8b3b      	ldrh	r3, [r7, #24]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	833b      	strh	r3, [r7, #24]
				break;
 8001fe6:	e013      	b.n	8002010 <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 8001fe8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	8bbb      	ldrh	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8b7a      	ldrh	r2, [r7, #26]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002002:	8b7b      	ldrh	r3, [r7, #26]
 8002004:	3301      	adds	r3, #1
 8002006:	837b      	strh	r3, [r7, #26]
				y1++;
 8002008:	8b3b      	ldrh	r3, [r7, #24]
 800200a:	3301      	adds	r3, #1
 800200c:	833b      	strh	r3, [r7, #24]
				break;
 800200e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8002010:	8bb8      	ldrh	r0, [r7, #28]
 8002012:	8b7a      	ldrh	r2, [r7, #26]
 8002014:	8bf9      	ldrh	r1, [r7, #30]
 8002016:	8b3b      	ldrh	r3, [r7, #24]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	4603      	mov	r3, r0
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fcf6 	bl	8002a0e <u8g2_IsIntersection>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <u8g2_font_decode_glyph+0x19e>
				return d;
 8002028:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800202c:	e03a      	b.n	80020a4 <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2200      	movs	r2, #0
 8002032:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2200      	movs	r2, #0
 8002038:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002040:	4619      	mov	r1, r3
 8002042:	6978      	ldr	r0, [r7, #20]
 8002044:	f7ff fd81 	bl	8001b4a <u8g2_font_decode_get_unsigned_bits>
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002052:	4619      	mov	r1, r3
 8002054:	6978      	ldr	r0, [r7, #20]
 8002056:	f7ff fd78 	bl	8001b4a <u8g2_font_decode_get_unsigned_bits>
 800205a:	4603      	mov	r3, r0
 800205c:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2200      	movs	r2, #0
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fe53 	bl	8001d10 <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 800206a:	7bbb      	ldrb	r3, [r7, #14]
 800206c:	2201      	movs	r2, #1
 800206e:	4619      	mov	r1, r3
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fe4d 	bl	8001d10 <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 8002076:	2101      	movs	r1, #1
 8002078:	6978      	ldr	r0, [r7, #20]
 800207a:	f7ff fd66 	bl	8001b4a <u8g2_font_decode_get_unsigned_bits>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ec      	bne.n	800205e <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800208a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800208e:	429a      	cmp	r2, r3
 8002090:	dd00      	ble.n	8002094 <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002092:	e7d2      	b.n	800203a <u8g2_font_decode_glyph+0x1aa>
				break;
 8002094:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	7b9a      	ldrb	r2, [r3, #14]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 80020a0:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3317      	adds	r3, #23
 80020c2:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 80020c4:	887b      	ldrh	r3, [r7, #2]
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d82a      	bhi.n	8002120 <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	2b60      	cmp	r3, #96	; 0x60
 80020ce:	d907      	bls.n	80020e0 <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80020d6:	461a      	mov	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	4413      	add	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e009      	b.n	80020f4 <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	2b40      	cmp	r3, #64	; 0x40
 80020e4:	d906      	bls.n	80020f4 <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80020ec:	461a      	mov	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	4413      	add	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3301      	adds	r3, #1
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d04e      	beq.n	800219c <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	887a      	ldrh	r2, [r7, #2]
 8002106:	429a      	cmp	r2, r3
 8002108:	d102      	bne.n	8002110 <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3302      	adds	r3, #2
 800210e:	e049      	b.n	80021a4 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	3301      	adds	r3, #1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	4413      	add	r3, r2
 800211c:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 800211e:	e7e9      	b.n	80020f4 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002126:	461a      	mov	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	4413      	add	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002132:	2100      	movs	r1, #0
 8002134:	6938      	ldr	r0, [r7, #16]
 8002136:	f7ff fc40 	bl	80019ba <u8g2_font_get_word>
 800213a:	4603      	mov	r3, r0
 800213c:	461a      	mov	r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	4413      	add	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002144:	2102      	movs	r1, #2
 8002146:	6938      	ldr	r0, [r7, #16]
 8002148:	f7ff fc37 	bl	80019ba <u8g2_font_get_word>
 800214c:	4603      	mov	r3, r0
 800214e:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	3304      	adds	r3, #4
 8002154:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 8002156:	89fa      	ldrh	r2, [r7, #14]
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	429a      	cmp	r2, r3
 800215c:	d3e9      	bcc.n	8002132 <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 8002164:	89fb      	ldrh	r3, [r7, #14]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3301      	adds	r3, #1
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b29a      	uxth	r2, r3
 8002172:	89fb      	ldrh	r3, [r7, #14]
 8002174:	4313      	orrs	r3, r2
 8002176:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002178:	89fb      	ldrh	r3, [r7, #14]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d010      	beq.n	80021a0 <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 800217e:	89fa      	ldrh	r2, [r7, #14]
 8002180:	887b      	ldrh	r3, [r7, #2]
 8002182:	429a      	cmp	r2, r3
 8002184:	d102      	bne.n	800218c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3303      	adds	r3, #3
 800218a:	e00b      	b.n	80021a4 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3302      	adds	r3, #2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	4413      	add	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 800219a:	e7e0      	b.n	800215e <u8g2_font_get_glyph_data+0xb2>
				break;
 800219c:	bf00      	nop
 800219e:	e000      	b.n	80021a2 <u8g2_font_get_glyph_data+0xf6>
				break;
 80021a0:	bf00      	nop
		}
	}
#endif

	return NULL;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	4608      	mov	r0, r1
 80021b6:	4611      	mov	r1, r2
 80021b8:	461a      	mov	r2, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	817b      	strh	r3, [r7, #10]
 80021be:	460b      	mov	r3, r1
 80021c0:	813b      	strh	r3, [r7, #8]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	897a      	ldrh	r2, [r7, #10]
 80021ce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	893a      	ldrh	r2, [r7, #8]
 80021d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	4619      	mov	r1, r3
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f7ff ff64 	bl	80020ac <u8g2_font_get_glyph_data>
 80021e4:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80021ec:	6939      	ldr	r1, [r7, #16]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f7ff fe4e 	bl	8001e90 <u8g2_font_decode_glyph>
 80021f4:	4603      	mov	r3, r0
 80021f6:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 80021f8:	8afb      	ldrh	r3, [r7, #22]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff4a 	bl	80020ac <u8g2_font_get_glyph_data>
 8002218:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <u8g2_GetGlyphWidth+0x22>
		return 0;
 8002220:	2300      	movs	r3, #0
 8002222:	e027      	b.n	8002274 <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 8002224:	68f9      	ldr	r1, [r7, #12]
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fdfa 	bl	8001e20 <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f7ff fccf 	bl	8001bde <u8g2_font_decode_get_signed_bits>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002256:	4619      	mov	r1, r3
 8002258:	4610      	mov	r0, r2
 800225a:	f7ff fcc0 	bl	8001bde <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800226a:	4619      	mov	r1, r3
 800226c:	4610      	mov	r0, r2
 800226e:	f7ff fcb6 	bl	8001bde <u8g2_font_decode_get_signed_bits>
 8002272:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
	...

0800229c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	817b      	strh	r3, [r7, #10]
 80022ae:	460b      	mov	r3, r1
 80022b0:	813b      	strh	r3, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80022bc:	2b03      	cmp	r3, #3
 80022be:	d833      	bhi.n	8002328 <u8g2_DrawGlyph+0x8c>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <u8g2_DrawGlyph+0x2c>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022d9 	.word	0x080022d9
 80022cc:	080022ed 	.word	0x080022ed
 80022d0:	08002301 	.word	0x08002301
 80022d4:	08002315 	.word	0x08002315
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	4798      	blx	r3
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	893b      	ldrh	r3, [r7, #8]
 80022e6:	4413      	add	r3, r2
 80022e8:	813b      	strh	r3, [r7, #8]
		break;
 80022ea:	e01d      	b.n	8002328 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	4798      	blx	r3
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	897b      	ldrh	r3, [r7, #10]
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	817b      	strh	r3, [r7, #10]
		break;
 80022fe:	e013      	b.n	8002328 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	4798      	blx	r3
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	893b      	ldrh	r3, [r7, #8]
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	813b      	strh	r3, [r7, #8]
		break;
 8002312:	e009      	b.n	8002328 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	4798      	blx	r3
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	897b      	ldrh	r3, [r7, #10]
 8002322:	4413      	add	r3, r2
 8002324:	817b      	strh	r3, [r7, #10]
		break;
 8002326:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	893a      	ldrh	r2, [r7, #8]
 800232c:	8979      	ldrh	r1, [r7, #10]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff ff3c 	bl	80021ac <u8g2_font_draw_glyph>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop

08002340 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	817b      	strh	r3, [r7, #10]
 800234e:	4613      	mov	r3, r2
 8002350:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fd86 	bl	8002e64 <u8x8_utf8_init>
	sum = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	4611      	mov	r1, r2
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	4798      	blx	r3
 800236a:	4603      	mov	r3, r0
 800236c:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 800236e:	8abb      	ldrh	r3, [r7, #20]
 8002370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002374:	4293      	cmp	r3, r2
 8002376:	d038      	beq.n	80023ea <u8g2_draw_string+0xaa>
			break;
		str++;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3301      	adds	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 800237e:	8abb      	ldrh	r3, [r7, #20]
 8002380:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002384:	4293      	cmp	r3, r2
 8002386:	d0e9      	beq.n	800235c <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002388:	8abb      	ldrh	r3, [r7, #20]
 800238a:	893a      	ldrh	r2, [r7, #8]
 800238c:	8979      	ldrh	r1, [r7, #10]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff ff84 	bl	800229c <u8g2_DrawGlyph>
 8002394:	4603      	mov	r3, r0
 8002396:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d81e      	bhi.n	80023e0 <u8g2_draw_string+0xa0>
 80023a2:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <u8g2_draw_string+0x68>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023c3 	.word	0x080023c3
 80023b0:	080023cd 	.word	0x080023cd
 80023b4:	080023d7 	.word	0x080023d7
			case 0:
				x += delta;
 80023b8:	897a      	ldrh	r2, [r7, #10]
 80023ba:	8a7b      	ldrh	r3, [r7, #18]
 80023bc:	4413      	add	r3, r2
 80023be:	817b      	strh	r3, [r7, #10]
				break;
 80023c0:	e00e      	b.n	80023e0 <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 80023c2:	893a      	ldrh	r2, [r7, #8]
 80023c4:	8a7b      	ldrh	r3, [r7, #18]
 80023c6:	4413      	add	r3, r2
 80023c8:	813b      	strh	r3, [r7, #8]
				break;
 80023ca:	e009      	b.n	80023e0 <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 80023cc:	897a      	ldrh	r2, [r7, #10]
 80023ce:	8a7b      	ldrh	r3, [r7, #18]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	817b      	strh	r3, [r7, #10]
				break;
 80023d4:	e004      	b.n	80023e0 <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 80023d6:	893a      	ldrh	r2, [r7, #8]
 80023d8:	8a7b      	ldrh	r3, [r7, #18]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	813b      	strh	r3, [r7, #8]
				break;
 80023de:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 80023e0:	8afa      	ldrh	r2, [r7, #22]
 80023e2:	8a7b      	ldrh	r3, [r7, #18]
 80023e4:	4413      	add	r3, r2
 80023e6:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80023e8:	e7b8      	b.n	800235c <u8g2_draw_string+0x1c>
			break;
 80023ea:	bf00      	nop
		}
	}
	return sum;
 80023ec:	8afb      	ldrh	r3, [r7, #22]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop

080023f8 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	817b      	strh	r3, [r7, #10]
 8002406:	4613      	mov	r3, r2
 8002408:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a06      	ldr	r2, [pc, #24]	; (8002428 <u8g2_DrawUTF8+0x30>)
 800240e:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 8002410:	893a      	ldrh	r2, [r7, #8]
 8002412:	8979      	ldrh	r1, [r7, #10]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f7ff ff92 	bl	8002340 <u8g2_draw_string>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	08002eab 	.word	0x08002eab

0800242c <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	2b00      	cmp	r3, #0
 800243a:	d05d      	beq.n	80024f8 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800245a:	2b00      	cmp	r3, #0
 800245c:	d04d      	beq.n	80024fa <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002464:	2b01      	cmp	r3, #1
 8002466:	d11c      	bne.n	80024a2 <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002474:	429a      	cmp	r2, r3
 8002476:	da05      	bge.n	8002484 <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002490:	429a      	cmp	r2, r3
 8002492:	dd32      	ble.n	80024fa <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80024a0:	e02b      	b.n	80024fa <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80024a8:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80024b0:	4619      	mov	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80024b8:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 80024ba:	429a      	cmp	r2, r3
 80024bc:	da0d      	bge.n	80024da <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80024c4:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80024e6:	429a      	cmp	r2, r3
 80024e8:	dd07      	ble.n	80024fa <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80024f6:	e000      	b.n	80024fa <u8g2_UpdateRefHeight+0xce>
		return;
 80024f8:	bf00      	nop
	}
}
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
	return 0;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a03      	ldr	r2, [pc, #12]	; (8002530 <u8g2_SetFontPosBaseline+0x18>)
 8002524:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	08002503 	.word	0x08002503

08002534 <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002542:	81fb      	strh	r3, [r7, #14]
	tmp++;
 8002544:	89fb      	ldrh	r3, [r7, #14]
 8002546:	3301      	adds	r3, #1
 8002548:	81fb      	strh	r3, [r7, #14]
	return tmp;
 800254a:	89fb      	ldrh	r3, [r7, #14]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
	...

08002558 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a03      	ldr	r2, [pc, #12]	; (8002570 <u8g2_SetFontPosTop+0x18>)
 8002564:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	08002535 	.word	0x08002535

08002574 <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d00b      	beq.n	80025a0 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3374      	adds	r3, #116	; 0x74
 8002592:	6839      	ldr	r1, [r7, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fa2f 	bl	80019f8 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff46 	bl	800242c <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 80025b2:	23c0      	movs	r3, #192	; 0xc0
 80025b4:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fc50 	bl	8002e64 <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	7812      	ldrb	r2, [r2, #0]
 80025d4:	4611      	mov	r1, r2
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	4798      	blx	r3
 80025da:	4603      	mov	r3, r0
 80025dc:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 80025de:	893b      	ldrh	r3, [r7, #8]
 80025e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d01c      	beq.n	8002622 <u8g2_string_width+0x7a>
			break;
		str++;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 80025ee:	893b      	ldrh	r3, [r7, #8]
 80025f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d0e9      	beq.n	80025cc <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fe00 	bl	8002202 <u8g2_GetGlyphWidth>
 8002602:	4603      	mov	r3, r0
 8002604:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 8002606:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800260a:	f113 0f40 	cmn.w	r3, #64	; 0x40
 800260e:	d103      	bne.n	8002618 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002616:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 8002618:	89fa      	ldrh	r2, [r7, #14]
 800261a:	89bb      	ldrh	r3, [r7, #12]
 800261c:	4413      	add	r3, r2
 800261e:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002620:	e7d4      	b.n	80025cc <u8g2_string_width+0x24>
			break;
 8002622:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01b      	beq.n	8002666 <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 800262e:	89fa      	ldrh	r2, [r7, #14]
 8002630:	89bb      	ldrh	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 800263c:	b29a      	uxth	r2, r3
 800263e:	89fb      	ldrh	r3, [r7, #14]
 8002640:	4413      	add	r3, r2
 8002642:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 800264a:	b29a      	uxth	r2, r3
 800264c:	89fb      	ldrh	r3, [r7, #14]
 800264e:	4413      	add	r3, r2
 8002650:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 8002652:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002656:	2b00      	cmp	r3, #0
 8002658:	dd05      	ble.n	8002666 <u8g2_string_width+0xbe>
			w += initial_x_offset;
 800265a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800265e:	b29a      	uxth	r2, r3
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	4413      	add	r3, r2
 8002664:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 8002666:	89fb      	ldrh	r3, [r7, #14]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a05      	ldr	r2, [pc, #20]	; (8002694 <u8g2_GetStrWidth+0x24>)
 800267e:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 8002680:	6839      	ldr	r1, [r7, #0]
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff90 	bl	80025a8 <u8g2_string_width>
 8002688:	4603      	mov	r3, r0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	08002e7f 	.word	0x08002e7f

08002698 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a05      	ldr	r2, [pc, #20]	; (80026bc <u8g2_GetUTF8Width+0x24>)
 80026a6:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff7c 	bl	80025a8 <u8g2_string_width>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	08002eab 	.word	0x08002eab

080026c0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	460b      	mov	r3, r1
 80026d0:	80fb      	strh	r3, [r7, #6]
 80026d2:	4613      	mov	r3, r2
 80026d4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80026dc:	8afb      	ldrh	r3, [r7, #22]
 80026de:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	881a      	ldrh	r2, [r3, #0]
 80026e4:	8abb      	ldrh	r3, [r7, #20]
 80026e6:	4413      	add	r3, r2
 80026e8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80026ea:	8afa      	ldrh	r2, [r7, #22]
 80026ec:	8abb      	ldrh	r3, [r7, #20]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d90b      	bls.n	800270a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80026f2:	8afa      	ldrh	r2, [r7, #22]
 80026f4:	88bb      	ldrh	r3, [r7, #4]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d205      	bcs.n	8002706 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80026fa:	88bb      	ldrh	r3, [r7, #4]
 80026fc:	82bb      	strh	r3, [r7, #20]
      b--;
 80026fe:	8abb      	ldrh	r3, [r7, #20]
 8002700:	3b01      	subs	r3, #1
 8002702:	82bb      	strh	r3, [r7, #20]
 8002704:	e001      	b.n	800270a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800270a:	8afa      	ldrh	r2, [r7, #22]
 800270c:	88bb      	ldrh	r3, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	d301      	bcc.n	8002716 <u8g2_clip_intersection2+0x56>
    return 0;
 8002712:	2300      	movs	r3, #0
 8002714:	e01c      	b.n	8002750 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002716:	8aba      	ldrh	r2, [r7, #20]
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	429a      	cmp	r2, r3
 800271c:	d801      	bhi.n	8002722 <u8g2_clip_intersection2+0x62>
    return 0;
 800271e:	2300      	movs	r3, #0
 8002720:	e016      	b.n	8002750 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002722:	8afa      	ldrh	r2, [r7, #22]
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	429a      	cmp	r2, r3
 8002728:	d201      	bcs.n	800272e <u8g2_clip_intersection2+0x6e>
    a = c;
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800272e:	8aba      	ldrh	r2, [r7, #20]
 8002730:	88bb      	ldrh	r3, [r7, #4]
 8002732:	429a      	cmp	r2, r3
 8002734:	d901      	bls.n	800273a <u8g2_clip_intersection2+0x7a>
    b = d;
 8002736:	88bb      	ldrh	r3, [r7, #4]
 8002738:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8afa      	ldrh	r2, [r7, #22]
 800273e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002740:	8aba      	ldrh	r2, [r7, #20]
 8002742:	8afb      	ldrh	r3, [r7, #22]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	8aba      	ldrh	r2, [r7, #20]
 800274c:	801a      	strh	r2, [r3, #0]
  return 1;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800275a:	b590      	push	{r4, r7, lr}
 800275c:	b087      	sub	sp, #28
 800275e:	af02      	add	r7, sp, #8
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	4608      	mov	r0, r1
 8002764:	4611      	mov	r1, r2
 8002766:	461a      	mov	r2, r3
 8002768:	4603      	mov	r3, r0
 800276a:	817b      	strh	r3, [r7, #10]
 800276c:	460b      	mov	r3, r1
 800276e:	813b      	strh	r3, [r7, #8]
 8002770:	4613      	mov	r3, r2
 8002772:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002778:	893a      	ldrh	r2, [r7, #8]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002782:	88f8      	ldrh	r0, [r7, #6]
 8002784:	893a      	ldrh	r2, [r7, #8]
 8002786:	8979      	ldrh	r1, [r7, #10]
 8002788:	f897 3020 	ldrb.w	r3, [r7, #32]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	4603      	mov	r3, r0
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	47a0      	blx	r4
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}

0800279c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b087      	sub	sp, #28
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	817b      	strh	r3, [r7, #10]
 80027ae:	460b      	mov	r3, r1
 80027b0:	813b      	strh	r3, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d075      	beq.n	80028ac <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d072      	beq.n	80028ac <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d91a      	bls.n	8002802 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80027cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d109      	bne.n	80027e8 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80027d4:	897a      	ldrh	r2, [r7, #10]
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	b29b      	uxth	r3, r3
 80027dc:	817b      	strh	r3, [r7, #10]
	  x++;
 80027de:	897b      	ldrh	r3, [r7, #10]
 80027e0:	3301      	adds	r3, #1
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	817b      	strh	r3, [r7, #10]
 80027e6:	e00c      	b.n	8002802 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80027e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d108      	bne.n	8002802 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80027f0:	893a      	ldrh	r2, [r7, #8]
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	813b      	strh	r3, [r7, #8]
	  y++;
 80027fa:	893b      	ldrh	r3, [r7, #8]
 80027fc:	3301      	adds	r3, #1
 80027fe:	b29b      	uxth	r3, r3
 8002800:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002802:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800280e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d11a      	bne.n	800284c <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800281c:	893b      	ldrh	r3, [r7, #8]
 800281e:	429a      	cmp	r2, r3
 8002820:	d83b      	bhi.n	800289a <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002828:	893b      	ldrh	r3, [r7, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	d937      	bls.n	800289e <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800283a:	1db9      	adds	r1, r7, #6
 800283c:	f107 000a 	add.w	r0, r7, #10
 8002840:	f7ff ff3e 	bl	80026c0 <u8g2_clip_intersection2>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d11a      	bne.n	8002880 <u8g2_DrawHVLine+0xe4>
	  return;
 800284a:	e02f      	b.n	80028ac <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002852:	897b      	ldrh	r3, [r7, #10]
 8002854:	429a      	cmp	r2, r3
 8002856:	d824      	bhi.n	80028a2 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800285e:	897b      	ldrh	r3, [r7, #10]
 8002860:	429a      	cmp	r2, r3
 8002862:	d920      	bls.n	80028a6 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002870:	1db9      	adds	r1, r7, #6
 8002872:	f107 0008 	add.w	r0, r7, #8
 8002876:	f7ff ff23 	bl	80026c0 <u8g2_clip_intersection2>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d014      	beq.n	80028aa <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	689c      	ldr	r4, [r3, #8]
 8002886:	8979      	ldrh	r1, [r7, #10]
 8002888:	893a      	ldrh	r2, [r7, #8]
 800288a:	88f8      	ldrh	r0, [r7, #6]
 800288c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4603      	mov	r3, r0
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	47a0      	blx	r4
 8002898:	e008      	b.n	80028ac <u8g2_DrawHVLine+0x110>
	  return;
 800289a:	bf00      	nop
 800289c:	e006      	b.n	80028ac <u8g2_DrawHVLine+0x110>
	  return;
 800289e:	bf00      	nop
 80028a0:	e004      	b.n	80028ac <u8g2_DrawHVLine+0x110>
	  return;
 80028a2:	bf00      	nop
 80028a4:	e002      	b.n	80028ac <u8g2_DrawHVLine+0x110>
	  return;
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <u8g2_DrawHVLine+0x110>
	  return;
 80028aa:	bf00      	nop
    }
}
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}

080028b2 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af02      	add	r7, sp, #8
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	4608      	mov	r0, r1
 80028bc:	4611      	mov	r1, r2
 80028be:	461a      	mov	r2, r3
 80028c0:	4603      	mov	r3, r0
 80028c2:	817b      	strh	r3, [r7, #10]
 80028c4:	460b      	mov	r3, r1
 80028c6:	813b      	strh	r3, [r7, #8]
 80028c8:	4613      	mov	r3, r2
 80028ca:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	893a      	ldrh	r2, [r7, #8]
 80028d0:	8979      	ldrh	r1, [r7, #10]
 80028d2:	2000      	movs	r0, #0
 80028d4:	9000      	str	r0, [sp, #0]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f7ff ff60 	bl	800279c <u8g2_DrawHVLine>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	817b      	strh	r3, [r7, #10]
 80028f6:	460b      	mov	r3, r1
 80028f8:	813b      	strh	r3, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	893a      	ldrh	r2, [r7, #8]
 8002902:	8979      	ldrh	r1, [r7, #10]
 8002904:	2001      	movs	r0, #1
 8002906:	9000      	str	r0, [sp, #0]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff ff47 	bl	800279c <u8g2_DrawHVLine>
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af02      	add	r7, sp, #8
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	807b      	strh	r3, [r7, #2]
 8002922:	4613      	mov	r3, r2
 8002924:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800292c:	883a      	ldrh	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d31a      	bcc.n	8002968 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002938:	883a      	ldrh	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d216      	bcs.n	800296c <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8002944:	887a      	ldrh	r2, [r7, #2]
 8002946:	429a      	cmp	r2, r3
 8002948:	d312      	bcc.n	8002970 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002950:	887a      	ldrh	r2, [r7, #2]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20e      	bcs.n	8002974 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002956:	883a      	ldrh	r2, [r7, #0]
 8002958:	8879      	ldrh	r1, [r7, #2]
 800295a:	2300      	movs	r3, #0
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff1b 	bl	800279c <u8g2_DrawHVLine>
 8002966:	e006      	b.n	8002976 <u8g2_DrawPixel+0x60>
    return;
 8002968:	bf00      	nop
 800296a:	e004      	b.n	8002976 <u8g2_DrawPixel+0x60>
    return;
 800296c:	bf00      	nop
 800296e:	e002      	b.n	8002976 <u8g2_DrawPixel+0x60>
    return;
 8002970:	bf00      	nop
 8002972:	e000      	b.n	8002976 <u8g2_DrawPixel+0x60>
    return;
 8002974:	bf00      	nop
}
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d903      	bls.n	800299e <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80029a8:	b490      	push	{r4, r7}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4604      	mov	r4, r0
 80029b0:	4608      	mov	r0, r1
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	4623      	mov	r3, r4
 80029b8:	80fb      	strh	r3, [r7, #6]
 80029ba:	4603      	mov	r3, r0
 80029bc:	80bb      	strh	r3, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	807b      	strh	r3, [r7, #2]
 80029c2:	4613      	mov	r3, r2
 80029c4:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	88bb      	ldrh	r3, [r7, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d20d      	bcs.n	80029ea <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80029ce:	883a      	ldrh	r2, [r7, #0]
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d901      	bls.n	80029da <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e014      	b.n	8002a04 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	883b      	ldrh	r3, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d901      	bls.n	80029e6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00e      	b.n	8002a04 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e00c      	b.n	8002a04 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80029ea:	883a      	ldrh	r2, [r7, #0]
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d907      	bls.n	8002a02 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	883b      	ldrh	r3, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d901      	bls.n	80029fe <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e002      	b.n	8002a04 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002a02:	2300      	movs	r3, #0
    }
  }
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc90      	pop	{r4, r7}
 8002a0c:	4770      	bx	lr

08002a0e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	4608      	mov	r0, r1
 8002a18:	4611      	mov	r1, r2
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	817b      	strh	r3, [r7, #10]
 8002a20:	460b      	mov	r3, r1
 8002a22:	813b      	strh	r3, [r7, #8]
 8002a24:	4613      	mov	r3, r2
 8002a26:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8002a34:	8b3b      	ldrh	r3, [r7, #24]
 8002a36:	893a      	ldrh	r2, [r7, #8]
 8002a38:	f7ff ffb6 	bl	80029a8 <u8g2_is_intersection_decision_tree>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <u8g2_IsIntersection+0x38>
    return 0; 
 8002a42:	2300      	movs	r3, #0
 8002a44:	e00a      	b.n	8002a5c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	897a      	ldrh	r2, [r7, #10]
 8002a56:	f7ff ffa7 	bl	80029a8 <u8g2_is_intersection_decision_tree>
 8002a5a:	4603      	mov	r3, r0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	4608      	mov	r0, r1
 8002a6e:	4611      	mov	r1, r2
 8002a70:	461a      	mov	r2, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	817b      	strh	r3, [r7, #10]
 8002a76:	460b      	mov	r3, r1
 8002a78:	813b      	strh	r3, [r7, #8]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002a82:	7efb      	ldrb	r3, [r7, #27]
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002a8e:	7e3a      	ldrb	r2, [r7, #24]
 8002a90:	7efb      	ldrb	r3, [r7, #27]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d801      	bhi.n	8002aae <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002aaa:	7e3b      	ldrb	r3, [r7, #24]
 8002aac:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d001      	beq.n	8002abc <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002ab8:	7e3b      	ldrb	r3, [r7, #24]
 8002aba:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002abc:	893b      	ldrh	r3, [r7, #8]
 8002abe:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002ac0:	8afb      	ldrh	r3, [r7, #22]
 8002ac2:	f023 0307 	bic.w	r3, r3, #7
 8002ac6:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	7c1b      	ldrb	r3, [r3, #16]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	8afa      	ldrh	r2, [r7, #22]
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002ade:	8afb      	ldrh	r3, [r7, #22]
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002aee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d117      	bne.n	8002b26 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	7ebb      	ldrb	r3, [r7, #26]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	7e7b      	ldrb	r3, [r7, #25]
 8002b0a:	4053      	eors	r3, r2
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3301      	adds	r3, #1
 8002b16:	61fb      	str	r3, [r7, #28]
	len--;
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e8      	bne.n	8002af6 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002b24:	e038      	b.n	8002b98 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	7ebb      	ldrb	r3, [r7, #26]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	781a      	ldrb	r2, [r3, #0]
 8002b38:	7e7b      	ldrb	r3, [r7, #25]
 8002b3a:	4053      	eors	r3, r2
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002b42:	7efb      	ldrb	r3, [r7, #27]
 8002b44:	3301      	adds	r3, #1
 8002b46:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002b48:	7efb      	ldrb	r3, [r7, #27]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	76fb      	strb	r3, [r7, #27]
      len--;
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002b56:	7efb      	ldrb	r3, [r7, #27]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d114      	bne.n	8002b86 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002b60:	461a      	mov	r2, r3
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	4413      	add	r3, r2
 8002b66:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d801      	bhi.n	8002b76 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d008      	beq.n	8002b92 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002b80:	2301      	movs	r3, #1
 8002b82:	767b      	strb	r3, [r7, #25]
 8002b84:	e005      	b.n	8002b92 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002b86:	7ebb      	ldrb	r3, [r7, #26]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002b8c:	7e7b      	ldrb	r3, [r7, #25]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1c6      	bne.n	8002b26 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002b98:	bf00      	nop
 8002b9a:	3724      	adds	r7, #36	; 0x24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	79fa      	ldrb	r2, [r7, #7]
 8002c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7ff ffad 	bl	8002ba2 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff fc65 	bl	8002518 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c72:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002c74:	89fb      	ldrh	r3, [r7, #14]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	89fa      	ldrh	r2, [r7, #14]
 8002c7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	7c1b      	ldrb	r3, [r3, #16]
 8002c84:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002c86:	89fb      	ldrh	r3, [r7, #14]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	89fa      	ldrh	r2, [r7, #14]
 8002c90:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c98:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002c9a:	89fb      	ldrh	r3, [r7, #14]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	89fa      	ldrh	r2, [r7, #14]
 8002ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cac:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002cae:	89fb      	ldrh	r3, [r7, #14]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002cb6:	4413      	add	r3, r2
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	7c52      	ldrb	r2, [r2, #17]
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	dd08      	ble.n	8002cd2 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	7c5b      	ldrb	r3, [r3, #17]
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002cd2:	89fb      	ldrh	r3, [r7, #14]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002cf4:	89fb      	ldrh	r3, [r7, #14]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	8a9a      	ldrh	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	8ada      	ldrh	r2, [r3, #22]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af02      	add	r7, sp, #8
 8002d24:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	4603      	mov	r3, r0
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fe63 	bl	8002a0e <u8g2_IsIntersection>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002d56:	e03b      	b.n	8002dd0 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d205      	bcs.n	8002d7c <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d905      	bls.n	8002d98 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d205      	bcs.n	8002db4 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d905      	bls.n	8002dd0 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff3c 	bl	8002c5e <u8g2_update_dimension_common>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff7b 	bl	8002d1e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	460b      	mov	r3, r1
 8002e44:	813b      	strh	r3, [r7, #8]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002e4a:	88f8      	ldrh	r0, [r7, #6]
 8002e4c:	893a      	ldrh	r2, [r7, #8]
 8002e4e:	8979      	ldrh	r1, [r7, #10]
 8002e50:	7e3b      	ldrb	r3, [r7, #24]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	4603      	mov	r3, r0
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff fc7f 	bl	800275a <u8g2_draw_hv_line_2dir>
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <u8x8_ascii_next+0x18>
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	2b0a      	cmp	r3, #10
 8002e94:	d102      	bne.n	8002e9c <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002e96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e9a:	e001      	b.n	8002ea0 <u8x8_ascii_next+0x22>
  return b;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	b29b      	uxth	r3, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <u8x8_utf8_next+0x18>
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	2b0a      	cmp	r3, #10
 8002ec0:	d102      	bne.n	8002ec8 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ec6:	e06e      	b.n	8002fa6 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d145      	bne.n	8002f5e <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	2bfb      	cmp	r3, #251	; 0xfb
 8002ed6:	d908      	bls.n	8002eea <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2205      	movs	r2, #5
 8002edc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	70fb      	strb	r3, [r7, #3]
 8002ee8:	e032      	b.n	8002f50 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	2bf7      	cmp	r3, #247	; 0xf7
 8002eee:	d908      	bls.n	8002f02 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	70fb      	strb	r3, [r7, #3]
 8002f00:	e026      	b.n	8002f50 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	2bef      	cmp	r3, #239	; 0xef
 8002f06:	d908      	bls.n	8002f1a <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	70fb      	strb	r3, [r7, #3]
 8002f18:	e01a      	b.n	8002f50 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	2bdf      	cmp	r3, #223	; 0xdf
 8002f1e:	d908      	bls.n	8002f32 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	70fb      	strb	r3, [r7, #3]
 8002f30:	e00e      	b.n	8002f50 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	2bbf      	cmp	r3, #191	; 0xbf
 8002f36:	d908      	bls.n	8002f4a <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	70fb      	strb	r3, [r7, #3]
 8002f48:	e002      	b.n	8002f50 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002f4a:	78fb      	ldrb	r3, [r7, #3]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	e02a      	b.n	8002fa6 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002f58:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002f5c:	e023      	b.n	8002fa6 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8c1b      	ldrh	r3, [r3, #32]
 8002f72:	019b      	lsls	r3, r3, #6
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f80:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8c1a      	ldrh	r2, [r3, #32]
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002f9c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002fa0:	e001      	b.n	8002fa6 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8c1b      	ldrh	r3, [r3, #32]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691c      	ldr	r4, [r3, #16]
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2120      	movs	r1, #32
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	47a0      	blx	r4
 8002fca:	4603      	mov	r3, r0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd90      	pop	{r4, r7, pc}

08002fd4 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	691c      	ldr	r4, [r3, #16]
 8002fe6:	7afa      	ldrb	r2, [r7, #11]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2117      	movs	r1, #23
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	47a0      	blx	r4
 8002ff0:	4603      	mov	r3, r0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}

08002ffa <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003006:	1cfb      	adds	r3, r7, #3
 8003008:	461a      	mov	r2, r3
 800300a:	2101      	movs	r1, #1
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ffe1 	bl	8002fd4 <u8x8_byte_SendBytes>
 8003012:	4603      	mov	r3, r0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68dc      	ldr	r4, [r3, #12]
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	2300      	movs	r3, #0
 8003030:	2115      	movs	r1, #21
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	47a0      	blx	r4
 8003036:	4603      	mov	r3, r0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68dc      	ldr	r4, [r3, #12]
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	2300      	movs	r3, #0
 8003054:	2116      	movs	r1, #22
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	47a0      	blx	r4
 800305a:	4603      	mov	r3, r0
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	bd90      	pop	{r4, r7, pc}

08003064 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	460b      	mov	r3, r1
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	68dc      	ldr	r4, [r3, #12]
 8003076:	7afa      	ldrb	r2, [r7, #11]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2117      	movs	r1, #23
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	47a0      	blx	r4
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}

0800308a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800308a:	b590      	push	{r4, r7, lr}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68dc      	ldr	r4, [r3, #12]
 8003096:	2300      	movs	r3, #0
 8003098:	2200      	movs	r2, #0
 800309a:	2118      	movs	r1, #24
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	47a0      	blx	r4
 80030a0:	4603      	mov	r3, r0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd90      	pop	{r4, r7, pc}

080030aa <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80030aa:	b590      	push	{r4, r7, lr}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68dc      	ldr	r4, [r3, #12]
 80030b6:	2300      	movs	r3, #0
 80030b8:	2200      	movs	r2, #0
 80030ba:	2119      	movs	r1, #25
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	47a0      	blx	r4
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}

080030ca <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80030ca:	b590      	push	{r4, r7, lr}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	73fb      	strb	r3, [r7, #15]
    data++;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	2bfe      	cmp	r3, #254	; 0xfe
 80030e4:	d031      	beq.n	800314a <u8x8_cad_SendSequence+0x80>
 80030e6:	2bfe      	cmp	r3, #254	; 0xfe
 80030e8:	dc3d      	bgt.n	8003166 <u8x8_cad_SendSequence+0x9c>
 80030ea:	2b19      	cmp	r3, #25
 80030ec:	dc3b      	bgt.n	8003166 <u8x8_cad_SendSequence+0x9c>
 80030ee:	2b18      	cmp	r3, #24
 80030f0:	da23      	bge.n	800313a <u8x8_cad_SendSequence+0x70>
 80030f2:	2b16      	cmp	r3, #22
 80030f4:	dc02      	bgt.n	80030fc <u8x8_cad_SendSequence+0x32>
 80030f6:	2b15      	cmp	r3, #21
 80030f8:	da03      	bge.n	8003102 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80030fa:	e034      	b.n	8003166 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80030fc:	2b17      	cmp	r3, #23
 80030fe:	d00e      	beq.n	800311e <u8x8_cad_SendSequence+0x54>
	return;
 8003100:	e031      	b.n	8003166 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68dc      	ldr	r4, [r3, #12]
 800310c:	7bba      	ldrb	r2, [r7, #14]
 800310e:	7bf9      	ldrb	r1, [r7, #15]
 8003110:	2300      	movs	r3, #0
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	47a0      	blx	r4
	  data++;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	603b      	str	r3, [r7, #0]
	  break;
 800311c:	e022      	b.n	8003164 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003124:	f107 030e 	add.w	r3, r7, #14
 8003128:	461a      	mov	r2, r3
 800312a:	2101      	movs	r1, #1
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff ff99 	bl	8003064 <u8x8_cad_SendData>
	  data++;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	603b      	str	r3, [r7, #0]
	  break;
 8003138:	e014      	b.n	8003164 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68dc      	ldr	r4, [r3, #12]
 800313e:	7bf9      	ldrb	r1, [r7, #15]
 8003140:	2300      	movs	r3, #0
 8003142:	2200      	movs	r2, #0
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	47a0      	blx	r4
	  break;
 8003148:	e00c      	b.n	8003164 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003150:	7bbb      	ldrb	r3, [r7, #14]
 8003152:	461a      	mov	r2, r3
 8003154:	2129      	movs	r1, #41	; 0x29
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f9ed 	bl	8003536 <u8x8_gpio_call>
	  data++;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	3301      	adds	r3, #1
 8003160:	603b      	str	r3, [r7, #0]
	  break;
 8003162:	bf00      	nop
    cmd = *data;
 8003164:	e7b6      	b.n	80030d4 <u8x8_cad_SendSequence+0xa>
	return;
 8003166:	bf00      	nop
    }
  }
}
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bd90      	pop	{r4, r7, pc}
	...

08003170 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	72fb      	strb	r3, [r7, #11]
 800317e:	4613      	mov	r3, r2
 8003180:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	3b14      	subs	r3, #20
 8003186:	2b05      	cmp	r3, #5
 8003188:	d82f      	bhi.n	80031ea <u8x8_cad_001+0x7a>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <u8x8_cad_001+0x20>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031d9 	.word	0x080031d9
 8003194:	080031a9 	.word	0x080031a9
 8003198:	080031bd 	.word	0x080031bd
 800319c:	080031d1 	.word	0x080031d1
 80031a0:	080031d9 	.word	0x080031d9
 80031a4:	080031d9 	.word	0x080031d9
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80031a8:	2100      	movs	r1, #0
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7ff ff00 	bl	8002fb0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80031b0:	7abb      	ldrb	r3, [r7, #10]
 80031b2:	4619      	mov	r1, r3
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff ff20 	bl	8002ffa <u8x8_byte_SendByte>
      break;
 80031ba:	e018      	b.n	80031ee <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80031bc:	2100      	movs	r1, #0
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fef6 	bl	8002fb0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80031c4:	7abb      	ldrb	r3, [r7, #10]
 80031c6:	4619      	mov	r1, r3
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff ff16 	bl	8002ffa <u8x8_byte_SendByte>
      break;
 80031ce:	e00e      	b.n	80031ee <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80031d0:	2101      	movs	r1, #1
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7ff feec 	bl	8002fb0 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	691c      	ldr	r4, [r3, #16]
 80031dc:	7aba      	ldrb	r2, [r7, #10]
 80031de:	7af9      	ldrb	r1, [r7, #11]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	47a0      	blx	r4
 80031e6:	4603      	mov	r3, r0
 80031e8:	e002      	b.n	80031f0 <u8x8_cad_001+0x80>
    default:
      return 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <u8x8_cad_001+0x80>
  }
  return 1;
 80031ee:	2301      	movs	r3, #1
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd90      	pop	{r4, r7, pc}

080031f8 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	72fb      	strb	r3, [r7, #11]
 8003206:	4613      	mov	r3, r2
 8003208:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 800320a:	7afb      	ldrb	r3, [r7, #11]
 800320c:	3b0b      	subs	r3, #11
 800320e:	2b04      	cmp	r3, #4
 8003210:	f200 808e 	bhi.w	8003330 <u8x8_d_uc1604_common+0x138>
 8003214:	a201      	add	r2, pc, #4	; (adr r2, 800321c <u8x8_d_uc1604_common+0x24>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	080032c5 	.word	0x080032c5
 8003220:	08003331 	.word	0x08003331
 8003224:	080032df 	.word	0x080032df
 8003228:	08003311 	.word	0x08003311
 800322c:	08003231 	.word	0x08003231
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff ff2a 	bl	800308a <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	795b      	ldrb	r3, [r3, #5]
 800323a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4619      	mov	r1, r3
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f7ff fee5 	bl	800301c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	091b      	lsrs	r3, r3, #4
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0310 	orr.w	r3, r3, #16
 800325c:	b2db      	uxtb	r3, r3
 800325e:	4619      	mov	r1, r3
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f7ff fedb 	bl	800301c <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	799b      	ldrb	r3, [r3, #6]
 800326a:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003272:	7dbb      	ldrb	r3, [r7, #22]
 8003274:	4413      	add	r3, r2
 8003276:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8003278:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	b25b      	sxtb	r3, r3
 8003282:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003286:	b25b      	sxtb	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4619      	mov	r1, r3
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fec5 	bl	800301c <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	791b      	ldrb	r3, [r3, #4]
 8003296:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8003298:	7d7b      	ldrb	r3, [r7, #21]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80032a4:	7d7b      	ldrb	r3, [r7, #21]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4619      	mov	r1, r3
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff feda 	bl	8003064 <u8x8_cad_SendData>
	arg_int--;
 80032b0:	7abb      	ldrb	r3, [r7, #10]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80032b6:	7abb      	ldrb	r3, [r7, #10]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f3      	bne.n	80032a4 <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff fef4 	bl	80030aa <u8x8_cad_EndTransfer>
      break;
 80032c2:	e037      	b.n	8003334 <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80032c4:	7abb      	ldrb	r3, [r7, #10]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d104      	bne.n	80032d4 <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 80032ca:	491d      	ldr	r1, [pc, #116]	; (8003340 <u8x8_d_uc1604_common+0x148>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7ff fefc 	bl	80030ca <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 80032d2:	e02f      	b.n	8003334 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 80032d4:	491b      	ldr	r1, [pc, #108]	; (8003344 <u8x8_d_uc1604_common+0x14c>)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff fef7 	bl	80030ca <u8x8_cad_SendSequence>
      break;
 80032dc:	e02a      	b.n	8003334 <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80032de:	7abb      	ldrb	r3, [r7, #10]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 80032e4:	4918      	ldr	r1, [pc, #96]	; (8003348 <u8x8_d_uc1604_common+0x150>)
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff feef 	bl	80030ca <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	7c9a      	ldrb	r2, [r3, #18]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 80032f8:	e01c      	b.n	8003334 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 80032fa:	4914      	ldr	r1, [pc, #80]	; (800334c <u8x8_d_uc1604_common+0x154>)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7ff fee4 	bl	80030ca <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	7cda      	ldrb	r2, [r3, #19]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800330e:	e011      	b.n	8003334 <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff feba 	bl	800308a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003316:	2181      	movs	r1, #129	; 0x81
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7ff fe7f 	bl	800301c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 800331e:	7abb      	ldrb	r3, [r7, #10]
 8003320:	4619      	mov	r1, r3
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f7ff fe8c 	bl	8003040 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7ff febe 	bl	80030aa <u8x8_cad_EndTransfer>
      break;
 800332e:	e001      	b.n	8003334 <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 8003334:	2301      	movs	r3, #1
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	0800cbb4 	.word	0x0800cbb4
 8003344:	0800cbc4 	.word	0x0800cbc4
 8003348:	0800cbcc 	.word	0x0800cbcc
 800334c:	0800cbd4 	.word	0x0800cbd4

08003350 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	72fb      	strb	r3, [r7, #11]
 800335e:	4613      	mov	r3, r2
 8003360:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003362:	7aba      	ldrb	r2, [r7, #10]
 8003364:	7af9      	ldrb	r1, [r7, #11]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f7ff ff45 	bl	80031f8 <u8x8_d_uc1604_common>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d114      	bne.n	800339e <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003374:	7afb      	ldrb	r3, [r7, #11]
 8003376:	2b09      	cmp	r3, #9
 8003378:	d002      	beq.n	8003380 <u8x8_d_uc1604_jlx19264+0x30>
 800337a:	2b0a      	cmp	r3, #10
 800337c:	d005      	beq.n	800338a <u8x8_d_uc1604_jlx19264+0x3a>
 800337e:	e00c      	b.n	800339a <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8003380:	490a      	ldr	r1, [pc, #40]	; (80033ac <u8x8_d_uc1604_jlx19264+0x5c>)
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f816 	bl	80033b4 <u8x8_d_helper_display_setup_memory>
	break;
 8003388:	e00a      	b.n	80033a0 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f825 	bl	80033da <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <u8x8_d_uc1604_jlx19264+0x60>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff fe99 	bl	80030ca <u8x8_cad_SendSequence>
	break;
 8003398:	e002      	b.n	80033a0 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 800339a:	2300      	movs	r3, #0
 800339c:	e001      	b.n	80033a2 <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 800339e:	bf00      	nop
  return 1;
 80033a0:	2301      	movs	r3, #1
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	0800cbdc 	.word	0x0800cbdc
 80033b0:	0800cbf4 	.word	0x0800cbf4

080033b4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	7c9a      	ldrb	r2, [r3, #18]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80033da:	b590      	push	{r4, r7, lr}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	695c      	ldr	r4, [r3, #20]
 80033e6:	2300      	movs	r3, #0
 80033e8:	2200      	movs	r2, #0
 80033ea:	2128      	movs	r1, #40	; 0x28
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68dc      	ldr	r4, [r3, #12]
 80033f4:	2300      	movs	r3, #0
 80033f6:	2200      	movs	r2, #0
 80033f8:	2114      	movs	r1, #20
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80033fe:	2201      	movs	r2, #1
 8003400:	214b      	movs	r1, #75	; 0x4b
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f897 	bl	8003536 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	791b      	ldrb	r3, [r3, #4]
 800340e:	461a      	mov	r2, r3
 8003410:	2129      	movs	r1, #41	; 0x29
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f88f 	bl	8003536 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	214b      	movs	r1, #75	; 0x4b
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f88a 	bl	8003536 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	791b      	ldrb	r3, [r3, #4]
 8003428:	461a      	mov	r2, r3
 800342a:	2129      	movs	r1, #41	; 0x29
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f882 	bl	8003536 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003432:	2201      	movs	r2, #1
 8003434:	214b      	movs	r1, #75	; 0x4b
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f87d 	bl	8003536 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	795b      	ldrb	r3, [r3, #5]
 8003442:	461a      	mov	r2, r3
 8003444:	2129      	movs	r1, #41	; 0x29
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f875 	bl	8003536 <u8x8_gpio_call>
}    
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bd90      	pop	{r4, r7, pc}

08003454 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	4608      	mov	r0, r1
 800345e:	4611      	mov	r1, r2
 8003460:	461a      	mov	r2, r3
 8003462:	4603      	mov	r3, r0
 8003464:	70fb      	strb	r3, [r7, #3]
 8003466:	460b      	mov	r3, r1
 8003468:	70bb      	strb	r3, [r7, #2]
 800346a:	4613      	mov	r3, r2
 800346c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003472:	78bb      	ldrb	r3, [r7, #2]
 8003474:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003476:	787b      	ldrb	r3, [r7, #1]
 8003478:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689c      	ldr	r4, [r3, #8]
 8003482:	f107 0308 	add.w	r3, r7, #8
 8003486:	2201      	movs	r2, #1
 8003488:	210f      	movs	r1, #15
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	47a0      	blx	r4
 800348e:	4603      	mov	r3, r0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	bd90      	pop	{r4, r7, pc}

08003498 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003498:	b590      	push	{r4, r7, lr}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689c      	ldr	r4, [r3, #8]
 80034a4:	2300      	movs	r3, #0
 80034a6:	2200      	movs	r2, #0
 80034a8:	2109      	movs	r1, #9
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	47a0      	blx	r4
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}

080034b6 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80034b6:	b590      	push	{r4, r7, lr}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689c      	ldr	r4, [r3, #8]
 80034c2:	2300      	movs	r3, #0
 80034c4:	2200      	movs	r2, #0
 80034c6:	210a      	movs	r1, #10
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	47a0      	blx	r4
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd90      	pop	{r4, r7, pc}

080034d4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689c      	ldr	r4, [r3, #8]
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	2300      	movs	r3, #0
 80034e8:	210b      	movs	r1, #11
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	47a0      	blx	r4
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}

080034f6 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 80034f6:	b590      	push	{r4, r7, lr}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	460b      	mov	r3, r1
 8003500:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689c      	ldr	r4, [r3, #8]
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	2300      	movs	r3, #0
 800350a:	210e      	movs	r1, #14
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	47a0      	blx	r4
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bd90      	pop	{r4, r7, pc}

08003518 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689c      	ldr	r4, [r3, #8]
 8003524:	2300      	movs	r3, #0
 8003526:	2200      	movs	r2, #0
 8003528:	2110      	movs	r1, #16
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	47a0      	blx	r4
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bd90      	pop	{r4, r7, pc}

08003536 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003536:	b590      	push	{r4, r7, lr}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	70fb      	strb	r3, [r7, #3]
 8003542:	4613      	mov	r3, r2
 8003544:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695c      	ldr	r4, [r3, #20]
 800354a:	78ba      	ldrb	r2, [r7, #2]
 800354c:	78f9      	ldrb	r1, [r7, #3]
 800354e:	2300      	movs	r3, #0
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	47a0      	blx	r4
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bd90      	pop	{r4, r7, pc}

0800355c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	72fb      	strb	r3, [r7, #11]
 800356a:	4613      	mov	r3, r2
 800356c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
	...

0800357c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a11      	ldr	r2, [pc, #68]	; (80035d4 <u8x8_SetupDefaults+0x58>)
 800358e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a10      	ldr	r2, [pc, #64]	; (80035d4 <u8x8_SetupDefaults+0x58>)
 8003594:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a0e      	ldr	r2, [pc, #56]	; (80035d4 <u8x8_SetupDefaults+0x58>)
 800359a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <u8x8_SetupDefaults+0x58>)
 80035a0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	22ff      	movs	r2, #255	; 0xff
 80035c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	0800355d 	.word	0x0800355d

080035d8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f7ff ffc8 	bl	800357c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff ff47 	bl	8003498 <u8x8_SetupMemory>
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003616:	490d      	ldr	r1, [pc, #52]	; (800364c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003618:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800361c:	e002      	b.n	8003624 <LoopCopyDataInit>

0800361e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800361e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003622:	3304      	adds	r3, #4

08003624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003628:	d3f9      	bcc.n	800361e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800362c:	4c0a      	ldr	r4, [pc, #40]	; (8003658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003630:	e001      	b.n	8003636 <LoopFillZerobss>

08003632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003634:	3204      	adds	r2, #4

08003636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003638:	d3fb      	bcc.n	8003632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800363a:	f7fd fde5 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800363e:	f007 fd1d 	bl	800b07c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003642:	f7fd fbc5 	bl	8000dd0 <main>
  bx lr
 8003646:	4770      	bx	lr
  ldr r0, =_sdata
 8003648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800364c:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8003650:	0800cc54 	.word	0x0800cc54
  ldr r2, =_sbss
 8003654:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 8003658:	20001db0 	.word	0x20001db0

0800365c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800365c:	e7fe      	b.n	800365c <ADC1_2_IRQHandler>
	...

08003660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_Init+0x28>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a07      	ldr	r2, [pc, #28]	; (8003688 <HAL_Init+0x28>)
 800366a:	f043 0310 	orr.w	r3, r3, #16
 800366e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003670:	2003      	movs	r0, #3
 8003672:	f000 f95d 	bl	8003930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003676:	200f      	movs	r0, #15
 8003678:	f000 f808 	bl	800368c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800367c:	f7fd fcd4 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40022000 	.word	0x40022000

0800368c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003694:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_InitTick+0x54>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_InitTick+0x58>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	4619      	mov	r1, r3
 800369e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f979 	bl	80039a2 <HAL_SYSTICK_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e00e      	b.n	80036d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b0f      	cmp	r3, #15
 80036be:	d80a      	bhi.n	80036d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c0:	2200      	movs	r2, #0
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036c8:	f000 f93d 	bl	8003946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036cc:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <HAL_InitTick+0x5c>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e000      	b.n	80036d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000230 	.word	0x20000230
 80036e4:	20000238 	.word	0x20000238
 80036e8:	20000234 	.word	0x20000234

080036ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_IncTick+0x1c>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_IncTick+0x20>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4413      	add	r3, r2
 80036fc:	4a03      	ldr	r2, [pc, #12]	; (800370c <HAL_IncTick+0x20>)
 80036fe:	6013      	str	r3, [r2, #0]
}
 8003700:	bf00      	nop
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr
 8003708:	20000238 	.word	0x20000238
 800370c:	20000bf8 	.word	0x20000bf8

08003710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return uwTick;
 8003714:	4b02      	ldr	r3, [pc, #8]	; (8003720 <HAL_GetTick+0x10>)
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	20000bf8 	.word	0x20000bf8

08003724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800372c:	f7ff fff0 	bl	8003710 <HAL_GetTick>
 8003730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800373c:	d005      	beq.n	800374a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_Delay+0x44>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800374a:	bf00      	nop
 800374c:	f7ff ffe0 	bl	8003710 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	429a      	cmp	r2, r3
 800375a:	d8f7      	bhi.n	800374c <HAL_Delay+0x28>
  {
  }
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000238 	.word	0x20000238

0800376c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0b      	blt.n	80037fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4906      	ldr	r1, [pc, #24]	; (8003804 <__NVIC_EnableIRQ+0x34>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100

08003808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003818:	2b00      	cmp	r3, #0
 800381a:	db0a      	blt.n	8003832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	490c      	ldr	r1, [pc, #48]	; (8003854 <__NVIC_SetPriority+0x4c>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	440b      	add	r3, r1
 800382c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003830:	e00a      	b.n	8003848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4908      	ldr	r1, [pc, #32]	; (8003858 <__NVIC_SetPriority+0x50>)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	3b04      	subs	r3, #4
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	440b      	add	r3, r1
 8003846:	761a      	strb	r2, [r3, #24]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f1c3 0307 	rsb	r3, r3, #7
 8003876:	2b04      	cmp	r3, #4
 8003878:	bf28      	it	cs
 800387a:	2304      	movcs	r3, #4
 800387c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3304      	adds	r3, #4
 8003882:	2b06      	cmp	r3, #6
 8003884:	d902      	bls.n	800388c <NVIC_EncodePriority+0x30>
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3b03      	subs	r3, #3
 800388a:	e000      	b.n	800388e <NVIC_EncodePriority+0x32>
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	401a      	ands	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	43d9      	mvns	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	4313      	orrs	r3, r2
         );
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3724      	adds	r7, #36	; 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038c4:	f3bf 8f4f 	dsb	sy
}
 80038c8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80038ca:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <__NVIC_SystemReset+0x24>)
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80038d2:	4904      	ldr	r1, [pc, #16]	; (80038e4 <__NVIC_SystemReset+0x24>)
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <__NVIC_SystemReset+0x28>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80038da:	f3bf 8f4f 	dsb	sy
}
 80038de:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <__NVIC_SystemReset+0x20>
 80038e4:	e000ed00 	.word	0xe000ed00
 80038e8:	05fa0004 	.word	0x05fa0004

080038ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038fc:	d301      	bcc.n	8003902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038fe:	2301      	movs	r3, #1
 8003900:	e00f      	b.n	8003922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <SysTick_Config+0x40>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390a:	210f      	movs	r1, #15
 800390c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003910:	f7ff ff7a 	bl	8003808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <SysTick_Config+0x40>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <SysTick_Config+0x40>)
 800391c:	2207      	movs	r2, #7
 800391e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	e000e010 	.word	0xe000e010

08003930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff17 	bl	800376c <__NVIC_SetPriorityGrouping>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003958:	f7ff ff2c 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 800395c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff ff7a 	bl	800385c <NVIC_EncodePriority>
 8003968:	4602      	mov	r2, r0
 800396a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff49 	bl	8003808 <__NVIC_SetPriority>
}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	4603      	mov	r3, r0
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ff1f 	bl	80037d0 <__NVIC_EnableIRQ>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800399e:	f7ff ff8f 	bl	80038c0 <__NVIC_SystemReset>

080039a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ff9e 	bl	80038ec <SysTick_Config>
 80039b0:	4603      	mov	r3, r0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039bc:	b480      	push	{r7}
 80039be:	b08b      	sub	sp, #44	; 0x2c
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039c6:	2300      	movs	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039ca:	2300      	movs	r3, #0
 80039cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ce:	e169      	b.n	8003ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039d0:	2201      	movs	r2, #1
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	f040 8158 	bne.w	8003c9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4a9a      	ldr	r2, [pc, #616]	; (8003c5c <HAL_GPIO_Init+0x2a0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d05e      	beq.n	8003ab6 <HAL_GPIO_Init+0xfa>
 80039f8:	4a98      	ldr	r2, [pc, #608]	; (8003c5c <HAL_GPIO_Init+0x2a0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d875      	bhi.n	8003aea <HAL_GPIO_Init+0x12e>
 80039fe:	4a98      	ldr	r2, [pc, #608]	; (8003c60 <HAL_GPIO_Init+0x2a4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d058      	beq.n	8003ab6 <HAL_GPIO_Init+0xfa>
 8003a04:	4a96      	ldr	r2, [pc, #600]	; (8003c60 <HAL_GPIO_Init+0x2a4>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d86f      	bhi.n	8003aea <HAL_GPIO_Init+0x12e>
 8003a0a:	4a96      	ldr	r2, [pc, #600]	; (8003c64 <HAL_GPIO_Init+0x2a8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d052      	beq.n	8003ab6 <HAL_GPIO_Init+0xfa>
 8003a10:	4a94      	ldr	r2, [pc, #592]	; (8003c64 <HAL_GPIO_Init+0x2a8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d869      	bhi.n	8003aea <HAL_GPIO_Init+0x12e>
 8003a16:	4a94      	ldr	r2, [pc, #592]	; (8003c68 <HAL_GPIO_Init+0x2ac>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d04c      	beq.n	8003ab6 <HAL_GPIO_Init+0xfa>
 8003a1c:	4a92      	ldr	r2, [pc, #584]	; (8003c68 <HAL_GPIO_Init+0x2ac>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d863      	bhi.n	8003aea <HAL_GPIO_Init+0x12e>
 8003a22:	4a92      	ldr	r2, [pc, #584]	; (8003c6c <HAL_GPIO_Init+0x2b0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d046      	beq.n	8003ab6 <HAL_GPIO_Init+0xfa>
 8003a28:	4a90      	ldr	r2, [pc, #576]	; (8003c6c <HAL_GPIO_Init+0x2b0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d85d      	bhi.n	8003aea <HAL_GPIO_Init+0x12e>
 8003a2e:	2b12      	cmp	r3, #18
 8003a30:	d82a      	bhi.n	8003a88 <HAL_GPIO_Init+0xcc>
 8003a32:	2b12      	cmp	r3, #18
 8003a34:	d859      	bhi.n	8003aea <HAL_GPIO_Init+0x12e>
 8003a36:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_GPIO_Init+0x80>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003ab7 	.word	0x08003ab7
 8003a40:	08003a91 	.word	0x08003a91
 8003a44:	08003aa3 	.word	0x08003aa3
 8003a48:	08003ae5 	.word	0x08003ae5
 8003a4c:	08003aeb 	.word	0x08003aeb
 8003a50:	08003aeb 	.word	0x08003aeb
 8003a54:	08003aeb 	.word	0x08003aeb
 8003a58:	08003aeb 	.word	0x08003aeb
 8003a5c:	08003aeb 	.word	0x08003aeb
 8003a60:	08003aeb 	.word	0x08003aeb
 8003a64:	08003aeb 	.word	0x08003aeb
 8003a68:	08003aeb 	.word	0x08003aeb
 8003a6c:	08003aeb 	.word	0x08003aeb
 8003a70:	08003aeb 	.word	0x08003aeb
 8003a74:	08003aeb 	.word	0x08003aeb
 8003a78:	08003aeb 	.word	0x08003aeb
 8003a7c:	08003aeb 	.word	0x08003aeb
 8003a80:	08003a99 	.word	0x08003a99
 8003a84:	08003aad 	.word	0x08003aad
 8003a88:	4a79      	ldr	r2, [pc, #484]	; (8003c70 <HAL_GPIO_Init+0x2b4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a8e:	e02c      	b.n	8003aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	623b      	str	r3, [r7, #32]
          break;
 8003a96:	e029      	b.n	8003aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	623b      	str	r3, [r7, #32]
          break;
 8003aa0:	e024      	b.n	8003aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	623b      	str	r3, [r7, #32]
          break;
 8003aaa:	e01f      	b.n	8003aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	623b      	str	r3, [r7, #32]
          break;
 8003ab4:	e01a      	b.n	8003aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003abe:	2304      	movs	r3, #4
 8003ac0:	623b      	str	r3, [r7, #32]
          break;
 8003ac2:	e013      	b.n	8003aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003acc:	2308      	movs	r3, #8
 8003ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	611a      	str	r2, [r3, #16]
          break;
 8003ad6:	e009      	b.n	8003aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ad8:	2308      	movs	r3, #8
 8003ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	615a      	str	r2, [r3, #20]
          break;
 8003ae2:	e003      	b.n	8003aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	623b      	str	r3, [r7, #32]
          break;
 8003ae8:	e000      	b.n	8003aec <HAL_GPIO_Init+0x130>
          break;
 8003aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2bff      	cmp	r3, #255	; 0xff
 8003af0:	d801      	bhi.n	8003af6 <HAL_GPIO_Init+0x13a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	e001      	b.n	8003afa <HAL_GPIO_Init+0x13e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3304      	adds	r3, #4
 8003afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2bff      	cmp	r3, #255	; 0xff
 8003b00:	d802      	bhi.n	8003b08 <HAL_GPIO_Init+0x14c>
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	e002      	b.n	8003b0e <HAL_GPIO_Init+0x152>
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	3b08      	subs	r3, #8
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	210f      	movs	r1, #15
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	401a      	ands	r2, r3
 8003b20:	6a39      	ldr	r1, [r7, #32]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	fa01 f303 	lsl.w	r3, r1, r3
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80b1 	beq.w	8003c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b3c:	4b4d      	ldr	r3, [pc, #308]	; (8003c74 <HAL_GPIO_Init+0x2b8>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	4a4c      	ldr	r2, [pc, #304]	; (8003c74 <HAL_GPIO_Init+0x2b8>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6193      	str	r3, [r2, #24]
 8003b48:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_GPIO_Init+0x2b8>)
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b54:	4a48      	ldr	r2, [pc, #288]	; (8003c78 <HAL_GPIO_Init+0x2bc>)
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	220f      	movs	r2, #15
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4013      	ands	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a40      	ldr	r2, [pc, #256]	; (8003c7c <HAL_GPIO_Init+0x2c0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d013      	beq.n	8003ba8 <HAL_GPIO_Init+0x1ec>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a3f      	ldr	r2, [pc, #252]	; (8003c80 <HAL_GPIO_Init+0x2c4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00d      	beq.n	8003ba4 <HAL_GPIO_Init+0x1e8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a3e      	ldr	r2, [pc, #248]	; (8003c84 <HAL_GPIO_Init+0x2c8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <HAL_GPIO_Init+0x1e4>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a3d      	ldr	r2, [pc, #244]	; (8003c88 <HAL_GPIO_Init+0x2cc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_GPIO_Init+0x1e0>
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e006      	b.n	8003baa <HAL_GPIO_Init+0x1ee>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	e004      	b.n	8003baa <HAL_GPIO_Init+0x1ee>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e002      	b.n	8003baa <HAL_GPIO_Init+0x1ee>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_GPIO_Init+0x1ee>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bac:	f002 0203 	and.w	r2, r2, #3
 8003bb0:	0092      	lsls	r2, r2, #2
 8003bb2:	4093      	lsls	r3, r2
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bba:	492f      	ldr	r1, [pc, #188]	; (8003c78 <HAL_GPIO_Init+0x2bc>)
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	089b      	lsrs	r3, r3, #2
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d006      	beq.n	8003be2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bd4:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	492c      	ldr	r1, [pc, #176]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]
 8003be0:	e006      	b.n	8003bf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003be2:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	4928      	ldr	r1, [pc, #160]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d006      	beq.n	8003c0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	4922      	ldr	r1, [pc, #136]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
 8003c08:	e006      	b.n	8003c18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	491e      	ldr	r1, [pc, #120]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c24:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	4918      	ldr	r1, [pc, #96]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]
 8003c30:	e006      	b.n	8003c40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c32:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	4914      	ldr	r1, [pc, #80]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d021      	beq.n	8003c90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	490e      	ldr	r1, [pc, #56]	; (8003c8c <HAL_GPIO_Init+0x2d0>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60cb      	str	r3, [r1, #12]
 8003c58:	e021      	b.n	8003c9e <HAL_GPIO_Init+0x2e2>
 8003c5a:	bf00      	nop
 8003c5c:	10320000 	.word	0x10320000
 8003c60:	10310000 	.word	0x10310000
 8003c64:	10220000 	.word	0x10220000
 8003c68:	10210000 	.word	0x10210000
 8003c6c:	10120000 	.word	0x10120000
 8003c70:	10110000 	.word	0x10110000
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40010000 	.word	0x40010000
 8003c7c:	40010800 	.word	0x40010800
 8003c80:	40010c00 	.word	0x40010c00
 8003c84:	40011000 	.word	0x40011000
 8003c88:	40011400 	.word	0x40011400
 8003c8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_GPIO_Init+0x304>)
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	4909      	ldr	r1, [pc, #36]	; (8003cc0 <HAL_GPIO_Init+0x304>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f47f ae8e 	bne.w	80039d0 <HAL_GPIO_Init+0x14>
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	bf00      	nop
 8003cb8:	372c      	adds	r7, #44	; 0x2c
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	40010400 	.word	0x40010400

08003cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	807b      	strh	r3, [r7, #2]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cd4:	787b      	ldrb	r3, [r7, #1]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cda:	887a      	ldrh	r2, [r7, #2]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ce0:	e003      	b.n	8003cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	041a      	lsls	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	611a      	str	r2, [r3, #16]
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf6:	b08b      	sub	sp, #44	; 0x2c
 8003cf8:	af06      	add	r7, sp, #24
 8003cfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0fd      	b.n	8003f02 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f006 fefe 	bl	800ab1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2203      	movs	r2, #3
 8003d24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 fbcf 	bl	80064d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	687e      	ldr	r6, [r7, #4]
 8003d3a:	466d      	mov	r5, sp
 8003d3c:	f106 0410 	add.w	r4, r6, #16
 8003d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	602b      	str	r3, [r5, #0]
 8003d48:	1d33      	adds	r3, r6, #4
 8003d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d4c:	6838      	ldr	r0, [r7, #0]
 8003d4e:	f002 fb99 	bl	8006484 <USB_CoreInit>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0ce      	b.n	8003f02 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f002 fbca 	bl	8006504 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	73fb      	strb	r3, [r7, #15]
 8003d74:	e04c      	b.n	8003e10 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	440b      	add	r3, r1
 8003d86:	3301      	adds	r3, #1
 8003d88:	2201      	movs	r2, #1
 8003d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	b298      	uxth	r0, r3
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	440b      	add	r3, r1
 8003db2:	3336      	adds	r3, #54	; 0x36
 8003db4:	4602      	mov	r2, r0
 8003db6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3303      	adds	r3, #3
 8003dca:	2200      	movs	r2, #0
 8003dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	440b      	add	r3, r1
 8003ddc:	3338      	adds	r3, #56	; 0x38
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	440b      	add	r3, r1
 8003df0:	333c      	adds	r3, #60	; 0x3c
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	440b      	add	r3, r1
 8003e04:	3340      	adds	r3, #64	; 0x40
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d3ad      	bcc.n	8003d76 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
 8003e1e:	e044      	b.n	8003eaa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	440b      	add	r3, r1
 8003e2e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	440b      	add	r3, r1
 8003e44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e48:	7bfa      	ldrb	r2, [r7, #15]
 8003e4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	440b      	add	r3, r1
 8003e5a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	440b      	add	r3, r1
 8003e70:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3b5      	bcc.n	8003e20 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	687e      	ldr	r6, [r7, #4]
 8003ebc:	466d      	mov	r5, sp
 8003ebe:	f106 0410 	add.w	r4, r6, #16
 8003ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec6:	6823      	ldr	r3, [r4, #0]
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	1d33      	adds	r3, r6, #4
 8003ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	f002 fb24 	bl	800651c <USB_DevInit>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e00d      	b.n	8003f02 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f004 ffd6 	bl	8008eac <USB_DevDisconnect>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_PCD_Start+0x16>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e016      	b.n	8003f4e <HAL_PCD_Start+0x44>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f002 fab9 	bl	80064a4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003f32:	2101      	movs	r1, #1
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f007 f864 	bl	800b002 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f004 ffaa 	bl	8008e98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b088      	sub	sp, #32
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f004 ffac 	bl	8008ec0 <USB_ReadInterrupts>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f72:	d102      	bne.n	8003f7a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fb5f 	bl	8004638 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 ff9e 	bl	8008ec0 <USB_ReadInterrupts>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8e:	d112      	bne.n	8003fb6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa2:	b292      	uxth	r2, r2
 8003fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f006 fe32 	bl	800ac12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003fae:	2100      	movs	r1, #0
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f923 	bl	80041fc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 ff80 	bl	8008ec0 <USB_ReadInterrupts>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fca:	d10b      	bne.n	8003fe4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fde:	b292      	uxth	r2, r2
 8003fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f004 ff69 	bl	8008ec0 <USB_ReadInterrupts>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff8:	d10b      	bne.n	8004012 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400c:	b292      	uxth	r2, r2
 800400e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f004 ff52 	bl	8008ec0 <USB_ReadInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004026:	d126      	bne.n	8004076 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004030:	b29a      	uxth	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0204 	bic.w	r2, r2, #4
 800403a:	b292      	uxth	r2, r2
 800403c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0208 	bic.w	r2, r2, #8
 8004052:	b292      	uxth	r2, r2
 8004054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f006 fe13 	bl	800ac84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004070:	b292      	uxth	r2, r2
 8004072:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f004 ff20 	bl	8008ec0 <USB_ReadInterrupts>
 8004080:	4603      	mov	r3, r0
 8004082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408a:	f040 8082 	bne.w	8004192 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e010      	b.n	80040b6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	7ffb      	ldrb	r3, [r7, #31]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	441a      	add	r2, r3
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
 80040a2:	8812      	ldrh	r2, [r2, #0]
 80040a4:	b292      	uxth	r2, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	3320      	adds	r3, #32
 80040aa:	443b      	add	r3, r7
 80040ac:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80040b0:	7ffb      	ldrb	r3, [r7, #31]
 80040b2:	3301      	adds	r3, #1
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	7ffb      	ldrb	r3, [r7, #31]
 80040b8:	2b07      	cmp	r3, #7
 80040ba:	d9eb      	bls.n	8004094 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	b292      	uxth	r2, r2
 80040d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	b292      	uxth	r2, r2
 80040e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80040ec:	bf00      	nop
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f6      	beq.n	80040ee <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	b292      	uxth	r2, r2
 8004114:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004118:	2300      	movs	r3, #0
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e00f      	b.n	800413e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800411e:	7ffb      	ldrb	r3, [r7, #31]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	4611      	mov	r1, r2
 8004126:	7ffa      	ldrb	r2, [r7, #31]
 8004128:	0092      	lsls	r2, r2, #2
 800412a:	440a      	add	r2, r1
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	3320      	adds	r3, #32
 8004130:	443b      	add	r3, r7
 8004132:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004136:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004138:	7ffb      	ldrb	r3, [r7, #31]
 800413a:	3301      	adds	r3, #1
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	7ffb      	ldrb	r3, [r7, #31]
 8004140:	2b07      	cmp	r3, #7
 8004142:	d9ec      	bls.n	800411e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800414c:	b29a      	uxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0208 	orr.w	r2, r2, #8
 8004156:	b292      	uxth	r2, r2
 8004158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004164:	b29a      	uxth	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416e:	b292      	uxth	r2, r2
 8004170:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0204 	orr.w	r2, r2, #4
 8004186:	b292      	uxth	r2, r2
 8004188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f006 fd5f 	bl	800ac50 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f004 fe92 	bl	8008ec0 <USB_ReadInterrupts>
 800419c:	4603      	mov	r3, r0
 800419e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a6:	d10e      	bne.n	80041c6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041ba:	b292      	uxth	r2, r2
 80041bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f006 fd18 	bl	800abf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f004 fe78 	bl	8008ec0 <USB_ReadInterrupts>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041da:	d10b      	bne.n	80041f4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ee:	b292      	uxth	r2, r2
 80041f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80041f4:	bf00      	nop
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_PCD_SetAddress+0x1a>
 8004212:	2302      	movs	r3, #2
 8004214:	e013      	b.n	800423e <HAL_PCD_SetAddress+0x42>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f004 fe1f 	bl	8008e72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	4608      	mov	r0, r1
 8004250:	4611      	mov	r1, r2
 8004252:	461a      	mov	r2, r3
 8004254:	4603      	mov	r3, r0
 8004256:	70fb      	strb	r3, [r7, #3]
 8004258:	460b      	mov	r3, r1
 800425a:	803b      	strh	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004268:	2b00      	cmp	r3, #0
 800426a:	da0e      	bge.n	800428a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	705a      	strb	r2, [r3, #1]
 8004288:	e00e      	b.n	80042a8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	f003 0207 	and.w	r2, r3, #7
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042b4:	883a      	ldrh	r2, [r7, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	78ba      	ldrb	r2, [r7, #2]
 80042be:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042d2:	78bb      	ldrb	r3, [r7, #2]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d102      	bne.n	80042de <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_PCD_EP_Open+0xa6>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e00e      	b.n	800430a <HAL_PCD_EP_Open+0xc4>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f002 f92e 	bl	800655c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004308:	7afb      	ldrb	r3, [r7, #11]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b084      	sub	sp, #16
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	460b      	mov	r3, r1
 800431c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800431e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004322:	2b00      	cmp	r3, #0
 8004324:	da0e      	bge.n	8004344 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	705a      	strb	r2, [r3, #1]
 8004342:	e00e      	b.n	8004362 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	f003 0207 	and.w	r2, r3, #7
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_PCD_EP_Close+0x6a>
 8004378:	2302      	movs	r3, #2
 800437a:	e00e      	b.n	800439a <HAL_PCD_EP_Close+0x88>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68f9      	ldr	r1, [r7, #12]
 800438a:	4618      	mov	r0, r3
 800438c:	f002 fc50 	bl	8006c30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	460b      	mov	r3, r1
 80043b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b2:	7afb      	ldrb	r3, [r7, #11]
 80043b4:	f003 0207 	and.w	r2, r3, #7
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2200      	movs	r2, #0
 80043e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043ee:	7afb      	ldrb	r3, [r7, #11]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6979      	ldr	r1, [r7, #20]
 80043fe:	4618      	mov	r0, r3
 8004400:	f002 fe02 	bl	8007008 <USB_EPStartXfer>
 8004404:	e005      	b.n	8004412 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6979      	ldr	r1, [r7, #20]
 800440c:	4618      	mov	r0, r3
 800440e:	f002 fdfb 	bl	8007008 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	f003 0207 	and.w	r2, r3, #7
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	440b      	add	r3, r1
 800443a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800443e:	681b      	ldr	r3, [r3, #0]
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b086      	sub	sp, #24
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
 8004456:	460b      	mov	r3, r1
 8004458:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800445a:	7afb      	ldrb	r3, [r7, #11]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2201      	movs	r2, #1
 8004494:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	b2da      	uxtb	r2, r3
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044a2:	7afb      	ldrb	r3, [r7, #11]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6979      	ldr	r1, [r7, #20]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f002 fda8 	bl	8007008 <USB_EPStartXfer>
 80044b8:	e005      	b.n	80044c6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6979      	ldr	r1, [r7, #20]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f002 fda1 	bl	8007008 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	f003 0207 	and.w	r2, r3, #7
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d901      	bls.n	80044ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e04c      	b.n	8004588 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da0e      	bge.n	8004514 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	705a      	strb	r2, [r3, #1]
 8004512:	e00c      	b.n	800452e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_PCD_EP_SetStall+0x7e>
 800454a:	2302      	movs	r3, #2
 800454c:	e01c      	b.n	8004588 <HAL_PCD_EP_SetStall+0xb8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68f9      	ldr	r1, [r7, #12]
 800455c:	4618      	mov	r0, r3
 800455e:	f004 fb8b 	bl	8008c78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	2b00      	cmp	r3, #0
 800456a:	d108      	bne.n	800457e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f004 fcb0 	bl	8008ede <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	f003 020f 	and.w	r2, r3, #15
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d901      	bls.n	80045ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e040      	b.n	8004630 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	da0e      	bge.n	80045d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	705a      	strb	r2, [r3, #1]
 80045d2:	e00e      	b.n	80045f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	f003 0207 	and.w	r2, r3, #7
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_PCD_EP_ClrStall+0x82>
 800460e:	2302      	movs	r3, #2
 8004610:	e00e      	b.n	8004630 <HAL_PCD_EP_ClrStall+0xa0>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68f9      	ldr	r1, [r7, #12]
 8004620:	4618      	mov	r0, r3
 8004622:	f004 fb79 	bl	8008d18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08e      	sub	sp, #56	; 0x38
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004640:	e2ec      	b.n	8004c1c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800464a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800464c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004658:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800465c:	2b00      	cmp	r3, #0
 800465e:	f040 8161 	bne.w	8004924 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b00      	cmp	r3, #0
 800466a:	d152      	bne.n	8004712 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467c:	81fb      	strh	r3, [r7, #14]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	89fb      	ldrh	r3, [r7, #14]
 8004684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800468c:	b29b      	uxth	r3, r3
 800468e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3328      	adds	r3, #40	; 0x28
 8004694:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	4413      	add	r3, r2
 80046aa:	3302      	adds	r3, #2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	695a      	ldr	r2, [r3, #20]
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	441a      	add	r2, r3
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80046d0:	2100      	movs	r1, #0
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f006 fa75 	bl	800abc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 829b 	beq.w	8004c1c <PCD_EP_ISR_Handler+0x5e4>
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 8296 	bne.w	8004c1c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	b292      	uxth	r2, r2
 8004704:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004710:	e284      	b.n	8004c1c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004722:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004728:	2b00      	cmp	r3, #0
 800472a:	d034      	beq.n	8004796 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004734:	b29b      	uxth	r3, r3
 8004736:	461a      	mov	r2, r3
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	3306      	adds	r3, #6
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6812      	ldr	r2, [r2, #0]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800476a:	b29b      	uxth	r3, r3
 800476c:	f004 fc07 	bl	8008f7e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29a      	uxth	r2, r3
 8004778:	f640 738f 	movw	r3, #3983	; 0xf8f
 800477c:	4013      	ands	r3, r2
 800477e:	823b      	strh	r3, [r7, #16]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	8a3a      	ldrh	r2, [r7, #16]
 8004786:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800478a:	b292      	uxth	r2, r2
 800478c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f006 f9ea 	bl	800ab68 <HAL_PCD_SetupStageCallback>
 8004794:	e242      	b.n	8004c1c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004796:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800479a:	2b00      	cmp	r3, #0
 800479c:	f280 823e 	bge.w	8004c1c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80047ac:	4013      	ands	r3, r2
 80047ae:	83bb      	strh	r3, [r7, #28]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	8bba      	ldrh	r2, [r7, #28]
 80047b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047ba:	b292      	uxth	r2, r2
 80047bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4413      	add	r3, r2
 80047d2:	3306      	adds	r3, #6
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d019      	beq.n	8004826 <PCD_EP_ISR_Handler+0x1ee>
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d015      	beq.n	8004826 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	6959      	ldr	r1, [r3, #20]
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800480a:	b29b      	uxth	r3, r3
 800480c:	f004 fbb7 	bl	8008f7e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	441a      	add	r2, r3
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800481e:	2100      	movs	r1, #0
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f006 f9b3 	bl	800ab8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 81f2 	bne.w	8004c1c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004846:	b29b      	uxth	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	4413      	add	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d112      	bne.n	8004886 <PCD_EP_ISR_Handler+0x24e>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800486a:	b29a      	uxth	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487e:	b29a      	uxth	r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	e02f      	b.n	80048e6 <PCD_EP_ISR_Handler+0x2ae>
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b3e      	cmp	r3, #62	; 0x3e
 800488c:	d813      	bhi.n	80048b6 <PCD_EP_ISR_Handler+0x27e>
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <PCD_EP_ISR_Handler+0x270>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	3301      	adds	r3, #1
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	029b      	lsls	r3, r3, #10
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	e017      	b.n	80048e6 <PCD_EP_ISR_Handler+0x2ae>
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	633b      	str	r3, [r7, #48]	; 0x30
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d102      	bne.n	80048d0 <PCD_EP_ISR_Handler+0x298>
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	3b01      	subs	r3, #1
 80048ce:	633b      	str	r3, [r7, #48]	; 0x30
 80048d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	029b      	lsls	r3, r3, #10
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	827b      	strh	r3, [r7, #18]
 80048f8:	8a7b      	ldrh	r3, [r7, #18]
 80048fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048fe:	827b      	strh	r3, [r7, #18]
 8004900:	8a7b      	ldrh	r3, [r7, #18]
 8004902:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004906:	827b      	strh	r3, [r7, #18]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	8a7b      	ldrh	r3, [r7, #18]
 800490e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800491a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491e:	b29b      	uxth	r3, r3
 8004920:	8013      	strh	r3, [r2, #0]
 8004922:	e17b      	b.n	8004c1c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004936:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800493a:	2b00      	cmp	r3, #0
 800493c:	f280 80ea 	bge.w	8004b14 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29a      	uxth	r2, r3
 8004952:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004956:	4013      	ands	r3, r2
 8004958:	853b      	strh	r3, [r7, #40]	; 0x28
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800496a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800496e:	b292      	uxth	r2, r2
 8004970:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004972:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	4413      	add	r3, r2
 8004986:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	7b1b      	ldrb	r3, [r3, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d122      	bne.n	80049d6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004998:	b29b      	uxth	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4413      	add	r3, r2
 80049a4:	3306      	adds	r3, #6
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049b8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80049ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 8087 	beq.w	8004ad0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	6959      	ldr	r1, [r3, #20]
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	88da      	ldrh	r2, [r3, #6]
 80049ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049d0:	f004 fad5 	bl	8008f7e <USB_ReadPMA>
 80049d4:	e07c      	b.n	8004ad0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	78db      	ldrb	r3, [r3, #3]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d108      	bne.n	80049f0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80049de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049e0:	461a      	mov	r2, r3
 80049e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f927 	bl	8004c38 <HAL_PCD_EP_DB_Receive>
 80049ea:	4603      	mov	r3, r0
 80049ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049ee:	e06f      	b.n	8004ad0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	441a      	add	r2, r3
 8004a1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d021      	beq.n	8004a8e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3302      	adds	r3, #2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a72:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004a74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d02a      	beq.n	8004ad0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	6959      	ldr	r1, [r3, #20]
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	891a      	ldrh	r2, [r3, #8]
 8004a86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a88:	f004 fa79 	bl	8008f7e <USB_ReadPMA>
 8004a8c:	e020      	b.n	8004ad0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3306      	adds	r3, #6
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ab6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004ab8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	6959      	ldr	r1, [r3, #20]
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	895a      	ldrh	r2, [r3, #10]
 8004aca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004acc:	f004 fa57 	bl	8008f7e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ad6:	441a      	add	r2, r3
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ae2:	441a      	add	r2, r3
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <PCD_EP_ISR_Handler+0x4c2>
 8004af0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d206      	bcs.n	8004b08 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f006 f843 	bl	800ab8c <HAL_PCD_DataOutStageCallback>
 8004b06:	e005      	b.n	8004b14 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f002 fa7a 	bl	8007008 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004b14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d07e      	beq.n	8004c1c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004b1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4413      	add	r3, r2
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4c:	843b      	strh	r3, [r7, #32]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	441a      	add	r2, r3
 8004b5c:	8c3b      	ldrh	r3, [r7, #32]
 8004b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	78db      	ldrb	r3, [r3, #3]
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d00c      	beq.n	8004b8c <PCD_EP_ISR_Handler+0x554>
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	78db      	ldrb	r3, [r3, #3]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d146      	bne.n	8004c10 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004b82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d141      	bne.n	8004c10 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bb4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	8bfb      	ldrh	r3, [r7, #30]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d906      	bls.n	8004bce <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	8bfb      	ldrh	r3, [r7, #30]
 8004bc6:	1ad2      	subs	r2, r2, r3
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	619a      	str	r2, [r3, #24]
 8004bcc:	e002      	b.n	8004bd4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	4619      	mov	r1, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f005 ffed 	bl	800abc2 <HAL_PCD_DataInStageCallback>
 8004be8:	e018      	b.n	8004c1c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	8bfb      	ldrh	r3, [r7, #30]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	8bfb      	ldrh	r3, [r7, #30]
 8004bfc:	441a      	add	r2, r3
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f002 f9fd 	bl	8007008 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004c0e:	e005      	b.n	8004c1c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004c10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c12:	461a      	mov	r2, r3
 8004c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f91b 	bl	8004e52 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	b21b      	sxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f6ff ad0a 	blt.w	8004642 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3738      	adds	r7, #56	; 0x38
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d07e      	beq.n	8004d4e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4413      	add	r3, r2
 8004c64:	3302      	adds	r3, #2
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	8b7b      	ldrh	r3, [r7, #26]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d306      	bcc.n	8004c92 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	699a      	ldr	r2, [r3, #24]
 8004c88:	8b7b      	ldrh	r3, [r7, #26]
 8004c8a:	1ad2      	subs	r2, r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	619a      	str	r2, [r3, #24]
 8004c90:	e002      	b.n	8004c98 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2200      	movs	r2, #0
 8004c96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d123      	bne.n	8004ce8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cba:	833b      	strh	r3, [r7, #24]
 8004cbc:	8b3b      	ldrh	r3, [r7, #24]
 8004cbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cc2:	833b      	strh	r3, [r7, #24]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	8b3b      	ldrh	r3, [r7, #24]
 8004cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ce8:	88fb      	ldrh	r3, [r7, #6]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01f      	beq.n	8004d32 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0c:	82fb      	strh	r3, [r7, #22]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	441a      	add	r2, r3
 8004d1c:	8afb      	ldrh	r3, [r7, #22]
 8004d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d32:	8b7b      	ldrh	r3, [r7, #26]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8087 	beq.w	8004e48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6959      	ldr	r1, [r3, #20]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	891a      	ldrh	r2, [r3, #8]
 8004d46:	8b7b      	ldrh	r3, [r7, #26]
 8004d48:	f004 f919 	bl	8008f7e <USB_ReadPMA>
 8004d4c:	e07c      	b.n	8004e48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4413      	add	r3, r2
 8004d62:	3306      	adds	r3, #6
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d76:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	699a      	ldr	r2, [r3, #24]
 8004d7c:	8b7b      	ldrh	r3, [r7, #26]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d306      	bcc.n	8004d90 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	8b7b      	ldrh	r3, [r7, #26]
 8004d88:	1ad2      	subs	r2, r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	619a      	str	r2, [r3, #24]
 8004d8e:	e002      	b.n	8004d96 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2200      	movs	r2, #0
 8004d94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d123      	bne.n	8004de6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db8:	83fb      	strh	r3, [r7, #30]
 8004dba:	8bfb      	ldrh	r3, [r7, #30]
 8004dbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dc0:	83fb      	strh	r3, [r7, #30]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	441a      	add	r2, r3
 8004dd0:	8bfb      	ldrh	r3, [r7, #30]
 8004dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d11f      	bne.n	8004e30 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	461a      	mov	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0a:	83bb      	strh	r3, [r7, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	441a      	add	r2, r3
 8004e1a:	8bbb      	ldrh	r3, [r7, #28]
 8004e1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e30:	8b7b      	ldrh	r3, [r7, #26]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6959      	ldr	r1, [r3, #20]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	895a      	ldrh	r2, [r3, #10]
 8004e42:	8b7b      	ldrh	r3, [r7, #26]
 8004e44:	f004 f89b 	bl	8008f7e <USB_ReadPMA>
    }
  }

  return count;
 8004e48:	8b7b      	ldrh	r3, [r7, #26]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b0a2      	sub	sp, #136	; 0x88
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
 8004e5a:	60b9      	str	r1, [r7, #8]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 81c7 	beq.w	80051fa <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	3302      	adds	r3, #2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d907      	bls.n	8004eb4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004eac:	1ad2      	subs	r2, r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	619a      	str	r2, [r3, #24]
 8004eb2:	e002      	b.n	8004eba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 80b9 	bne.w	8005036 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d126      	bne.n	8004f1a <HAL_PCD_EP_DB_Transmit+0xc8>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	4413      	add	r3, r2
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	011a      	lsls	r2, r3, #4
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	4413      	add	r3, r2
 8004eee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	801a      	strh	r2, [r3, #0]
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	801a      	strh	r2, [r3, #0]
 8004f18:	e01a      	b.n	8004f50 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d116      	bne.n	8004f50 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	633b      	str	r3, [r7, #48]	; 0x30
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	4413      	add	r3, r2
 8004f38:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	011a      	lsls	r2, r3, #4
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	4413      	add	r3, r2
 8004f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	623b      	str	r3, [r7, #32]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d126      	bne.n	8004fac <HAL_PCD_EP_DB_Transmit+0x15a>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	61bb      	str	r3, [r7, #24]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	4413      	add	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	011a      	lsls	r2, r3, #4
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f84:	617b      	str	r3, [r7, #20]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	801a      	strh	r2, [r3, #0]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	e017      	b.n	8004fdc <HAL_PCD_EP_DB_Transmit+0x18a>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d113      	bne.n	8004fdc <HAL_PCD_EP_DB_Transmit+0x18a>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	011a      	lsls	r2, r3, #4
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f005 fded 	bl	800abc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fe8:	88fb      	ldrh	r3, [r7, #6]
 8004fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 82d4 	beq.w	800559c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500e:	827b      	strh	r3, [r7, #18]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	441a      	add	r2, r3
 800501e:	8a7b      	ldrh	r3, [r7, #18]
 8005020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
 8005034:	e2b2      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d021      	beq.n	8005084 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800507c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005080:	b29b      	uxth	r3, r3
 8005082:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800508a:	2b01      	cmp	r3, #1
 800508c:	f040 8286 	bne.w	800559c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005098:	441a      	add	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050a6:	441a      	add	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6a1a      	ldr	r2, [r3, #32]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d309      	bcc.n	80050cc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	6a1a      	ldr	r2, [r3, #32]
 80050c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c4:	1ad2      	subs	r2, r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	621a      	str	r2, [r3, #32]
 80050ca:	e015      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d107      	bne.n	80050e4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80050d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80050d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80050e2:	e009      	b.n	80050f8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2200      	movs	r2, #0
 80050f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d155      	bne.n	80051ac <HAL_PCD_EP_DB_Transmit+0x35a>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	63bb      	str	r3, [r7, #56]	; 0x38
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510e:	b29b      	uxth	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	4413      	add	r3, r2
 8005116:	63bb      	str	r3, [r7, #56]	; 0x38
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	011a      	lsls	r2, r3, #4
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	4413      	add	r3, r2
 8005122:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
 8005128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800512a:	2b00      	cmp	r3, #0
 800512c:	d112      	bne.n	8005154 <HAL_PCD_EP_DB_Transmit+0x302>
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005138:	b29a      	uxth	r2, r3
 800513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	b29b      	uxth	r3, r3
 8005144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514c:	b29a      	uxth	r2, r3
 800514e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	e047      	b.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005156:	2b3e      	cmp	r3, #62	; 0x3e
 8005158:	d811      	bhi.n	800517e <HAL_PCD_EP_DB_Transmit+0x32c>
 800515a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_PCD_EP_DB_Transmit+0x31e>
 800516a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800516c:	3301      	adds	r3, #1
 800516e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005172:	b29b      	uxth	r3, r3
 8005174:	029b      	lsls	r3, r3, #10
 8005176:	b29a      	uxth	r2, r3
 8005178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e032      	b.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x392>
 800517e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	64bb      	str	r3, [r7, #72]	; 0x48
 8005184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	2b00      	cmp	r3, #0
 800518c:	d102      	bne.n	8005194 <HAL_PCD_EP_DB_Transmit+0x342>
 800518e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005190:	3b01      	subs	r3, #1
 8005192:	64bb      	str	r3, [r7, #72]	; 0x48
 8005194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005196:	b29b      	uxth	r3, r3
 8005198:	029b      	lsls	r3, r3, #10
 800519a:	b29b      	uxth	r3, r3
 800519c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	e01b      	b.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x392>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d117      	bne.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x392>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	643b      	str	r3, [r7, #64]	; 0x40
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c8:	4413      	add	r3, r2
 80051ca:	643b      	str	r3, [r7, #64]	; 0x40
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	011a      	lsls	r2, r3, #4
 80051d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d4:	4413      	add	r3, r2
 80051d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6959      	ldr	r1, [r3, #20]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	891a      	ldrh	r2, [r3, #8]
 80051f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f003 fe7e 	bl	8008ef4 <USB_WritePMA>
 80051f8:	e1d0      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005202:	b29b      	uxth	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	4413      	add	r3, r2
 800520e:	3306      	adds	r3, #6
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005222:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800522e:	429a      	cmp	r2, r3
 8005230:	d307      	bcc.n	8005242 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800523a:	1ad2      	subs	r2, r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	619a      	str	r2, [r3, #24]
 8005240:	e002      	b.n	8005248 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2200      	movs	r2, #0
 8005246:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	f040 80c4 	bne.w	80053da <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	785b      	ldrb	r3, [r3, #1]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d126      	bne.n	80052a8 <HAL_PCD_EP_DB_Transmit+0x456>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005268:	b29b      	uxth	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526e:	4413      	add	r3, r2
 8005270:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	011a      	lsls	r2, r3, #4
 8005278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527a:	4413      	add	r3, r2
 800527c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005280:	66bb      	str	r3, [r7, #104]	; 0x68
 8005282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800528c:	b29a      	uxth	r2, r3
 800528e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	e01a      	b.n	80052de <HAL_PCD_EP_DB_Transmit+0x48c>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d116      	bne.n	80052de <HAL_PCD_EP_DB_Transmit+0x48c>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	677b      	str	r3, [r7, #116]	; 0x74
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c4:	4413      	add	r3, r2
 80052c6:	677b      	str	r3, [r7, #116]	; 0x74
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	011a      	lsls	r2, r3, #4
 80052ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d0:	4413      	add	r3, r2
 80052d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052d6:	673b      	str	r3, [r7, #112]	; 0x70
 80052d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052da:	2200      	movs	r2, #0
 80052dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d12f      	bne.n	800534c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005304:	4413      	add	r3, r2
 8005306:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	011a      	lsls	r2, r3, #4
 8005310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005314:	4413      	add	r3, r2
 8005316:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800531a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800531e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29b      	uxth	r3, r3
 8005326:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800532a:	b29a      	uxth	r2, r3
 800532c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29b      	uxth	r3, r3
 800533a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005342:	b29a      	uxth	r2, r3
 8005344:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005348:	801a      	strh	r2, [r3, #0]
 800534a:	e017      	b.n	800537c <HAL_PCD_EP_DB_Transmit+0x52a>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	785b      	ldrb	r3, [r3, #1]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d113      	bne.n	800537c <HAL_PCD_EP_DB_Transmit+0x52a>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005362:	4413      	add	r3, r2
 8005364:	67bb      	str	r3, [r7, #120]	; 0x78
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	011a      	lsls	r2, r3, #4
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	4413      	add	r3, r2
 8005370:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005374:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005376:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005378:	2200      	movs	r2, #0
 800537a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	4619      	mov	r1, r3
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f005 fc1d 	bl	800abc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538e:	2b00      	cmp	r3, #0
 8005390:	f040 8104 	bne.w	800559c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	441a      	add	r2, r3
 80053c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80053c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]
 80053d8:	e0e0      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d121      	bne.n	8005428 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	441a      	add	r2, r3
 8005410:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005424:	b29b      	uxth	r3, r3
 8005426:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800542e:	2b01      	cmp	r3, #1
 8005430:	f040 80b4 	bne.w	800559c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	695a      	ldr	r2, [r3, #20]
 8005438:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800543c:	441a      	add	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800544a:	441a      	add	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	429a      	cmp	r2, r3
 800545a:	d309      	bcc.n	8005470 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6a1a      	ldr	r2, [r3, #32]
 8005466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005468:	1ad2      	subs	r2, r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	621a      	str	r2, [r3, #32]
 800546e:	e015      	b.n	800549c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d107      	bne.n	8005488 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005478:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800547c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005486:	e009      	b.n	800549c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2200      	movs	r2, #0
 8005492:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	667b      	str	r3, [r7, #100]	; 0x64
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d155      	bne.n	8005556 <HAL_PCD_EP_DB_Transmit+0x704>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054be:	4413      	add	r3, r2
 80054c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	011a      	lsls	r2, r3, #4
 80054c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ca:	4413      	add	r3, r2
 80054cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d112      	bne.n	80054fe <HAL_PCD_EP_DB_Transmit+0x6ac>
 80054d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e6:	801a      	strh	r2, [r3, #0]
 80054e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e044      	b.n	8005588 <HAL_PCD_EP_DB_Transmit+0x736>
 80054fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005500:	2b3e      	cmp	r3, #62	; 0x3e
 8005502:	d811      	bhi.n	8005528 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	657b      	str	r3, [r7, #84]	; 0x54
 800550a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005516:	3301      	adds	r3, #1
 8005518:	657b      	str	r3, [r7, #84]	; 0x54
 800551a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800551c:	b29b      	uxth	r3, r3
 800551e:	029b      	lsls	r3, r3, #10
 8005520:	b29a      	uxth	r2, r3
 8005522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	e02f      	b.n	8005588 <HAL_PCD_EP_DB_Transmit+0x736>
 8005528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	657b      	str	r3, [r7, #84]	; 0x54
 800552e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800553a:	3b01      	subs	r3, #1
 800553c:	657b      	str	r3, [r7, #84]	; 0x54
 800553e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005540:	b29b      	uxth	r3, r3
 8005542:	029b      	lsls	r3, r3, #10
 8005544:	b29b      	uxth	r3, r3
 8005546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554e:	b29a      	uxth	r2, r3
 8005550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	e018      	b.n	8005588 <HAL_PCD_EP_DB_Transmit+0x736>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d114      	bne.n	8005588 <HAL_PCD_EP_DB_Transmit+0x736>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005566:	b29b      	uxth	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800556c:	4413      	add	r3, r2
 800556e:	667b      	str	r3, [r7, #100]	; 0x64
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	011a      	lsls	r2, r3, #4
 8005576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005578:	4413      	add	r3, r2
 800557a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800557e:	663b      	str	r3, [r7, #96]	; 0x60
 8005580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005582:	b29a      	uxth	r2, r3
 8005584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005586:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6959      	ldr	r1, [r3, #20]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	895a      	ldrh	r2, [r3, #10]
 8005594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005596:	b29b      	uxth	r3, r3
 8005598:	f003 fcac 	bl	8008ef4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b6:	823b      	strh	r3, [r7, #16]
 80055b8:	8a3b      	ldrh	r3, [r7, #16]
 80055ba:	f083 0310 	eor.w	r3, r3, #16
 80055be:	823b      	strh	r3, [r7, #16]
 80055c0:	8a3b      	ldrh	r3, [r7, #16]
 80055c2:	f083 0320 	eor.w	r3, r3, #32
 80055c6:	823b      	strh	r3, [r7, #16]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	8a3b      	ldrh	r3, [r7, #16]
 80055d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3788      	adds	r7, #136	; 0x88
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b087      	sub	sp, #28
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	607b      	str	r3, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	817b      	strh	r3, [r7, #10]
 8005604:	4613      	mov	r3, r2
 8005606:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005608:	897b      	ldrh	r3, [r7, #10]
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00b      	beq.n	800562c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005614:	897b      	ldrh	r3, [r7, #10]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e009      	b.n	8005640 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800562c:	897a      	ldrh	r2, [r7, #10]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005640:	893b      	ldrh	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2200      	movs	r2, #0
 800564a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	b29a      	uxth	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	80da      	strh	r2, [r3, #6]
 8005654:	e00b      	b.n	800566e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2201      	movs	r2, #1
 800565a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	b29a      	uxth	r2, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	b29a      	uxth	r2, r3
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr
	...

0800567c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e272      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8087 	beq.w	80057aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800569c:	4b92      	ldr	r3, [pc, #584]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f003 030c 	and.w	r3, r3, #12
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d00c      	beq.n	80056c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056a8:	4b8f      	ldr	r3, [pc, #572]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 030c 	and.w	r3, r3, #12
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d112      	bne.n	80056da <HAL_RCC_OscConfig+0x5e>
 80056b4:	4b8c      	ldr	r3, [pc, #560]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c0:	d10b      	bne.n	80056da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c2:	4b89      	ldr	r3, [pc, #548]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d06c      	beq.n	80057a8 <HAL_RCC_OscConfig+0x12c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d168      	bne.n	80057a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e24c      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e2:	d106      	bne.n	80056f2 <HAL_RCC_OscConfig+0x76>
 80056e4:	4b80      	ldr	r3, [pc, #512]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a7f      	ldr	r2, [pc, #508]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80056ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	e02e      	b.n	8005750 <HAL_RCC_OscConfig+0xd4>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10c      	bne.n	8005714 <HAL_RCC_OscConfig+0x98>
 80056fa:	4b7b      	ldr	r3, [pc, #492]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a7a      	ldr	r2, [pc, #488]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 8005700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	4b78      	ldr	r3, [pc, #480]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a77      	ldr	r2, [pc, #476]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 800570c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	e01d      	b.n	8005750 <HAL_RCC_OscConfig+0xd4>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800571c:	d10c      	bne.n	8005738 <HAL_RCC_OscConfig+0xbc>
 800571e:	4b72      	ldr	r3, [pc, #456]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a71      	ldr	r2, [pc, #452]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 8005724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	4b6f      	ldr	r3, [pc, #444]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a6e      	ldr	r2, [pc, #440]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 8005730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e00b      	b.n	8005750 <HAL_RCC_OscConfig+0xd4>
 8005738:	4b6b      	ldr	r3, [pc, #428]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a6a      	ldr	r2, [pc, #424]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 800573e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	4b68      	ldr	r3, [pc, #416]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a67      	ldr	r2, [pc, #412]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 800574a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005758:	f7fd ffda 	bl	8003710 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005760:	f7fd ffd6 	bl	8003710 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b64      	cmp	r3, #100	; 0x64
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e200      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005772:	4b5d      	ldr	r3, [pc, #372]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0xe4>
 800577e:	e014      	b.n	80057aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005780:	f7fd ffc6 	bl	8003710 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005788:	f7fd ffc2 	bl	8003710 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	; 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e1ec      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579a:	4b53      	ldr	r3, [pc, #332]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x10c>
 80057a6:	e000      	b.n	80057aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d063      	beq.n	800587e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057b6:	4b4c      	ldr	r3, [pc, #304]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00b      	beq.n	80057da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057c2:	4b49      	ldr	r3, [pc, #292]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f003 030c 	and.w	r3, r3, #12
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d11c      	bne.n	8005808 <HAL_RCC_OscConfig+0x18c>
 80057ce:	4b46      	ldr	r3, [pc, #280]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d116      	bne.n	8005808 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057da:	4b43      	ldr	r3, [pc, #268]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_RCC_OscConfig+0x176>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d001      	beq.n	80057f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e1c0      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f2:	4b3d      	ldr	r3, [pc, #244]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4939      	ldr	r1, [pc, #228]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 8005802:	4313      	orrs	r3, r2
 8005804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005806:	e03a      	b.n	800587e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d020      	beq.n	8005852 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005810:	4b36      	ldr	r3, [pc, #216]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005812:	2201      	movs	r2, #1
 8005814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005816:	f7fd ff7b 	bl	8003710 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800581e:	f7fd ff77 	bl	8003710 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e1a1      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005830:	4b2d      	ldr	r3, [pc, #180]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0f0      	beq.n	800581e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583c:	4b2a      	ldr	r3, [pc, #168]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	4927      	ldr	r1, [pc, #156]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 800584c:	4313      	orrs	r3, r2
 800584e:	600b      	str	r3, [r1, #0]
 8005850:	e015      	b.n	800587e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005852:	4b26      	ldr	r3, [pc, #152]	; (80058ec <HAL_RCC_OscConfig+0x270>)
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005858:	f7fd ff5a 	bl	8003710 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005860:	f7fd ff56 	bl	8003710 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e180      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005872:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d03a      	beq.n	8005900 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d019      	beq.n	80058c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005892:	4b17      	ldr	r3, [pc, #92]	; (80058f0 <HAL_RCC_OscConfig+0x274>)
 8005894:	2201      	movs	r2, #1
 8005896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005898:	f7fd ff3a 	bl	8003710 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a0:	f7fd ff36 	bl	8003710 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e160      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <HAL_RCC_OscConfig+0x26c>)
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f0      	beq.n	80058a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058be:	2001      	movs	r0, #1
 80058c0:	f000 faa6 	bl	8005e10 <RCC_Delay>
 80058c4:	e01c      	b.n	8005900 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <HAL_RCC_OscConfig+0x274>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058cc:	f7fd ff20 	bl	8003710 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d2:	e00f      	b.n	80058f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058d4:	f7fd ff1c 	bl	8003710 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d908      	bls.n	80058f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e146      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
 80058e6:	bf00      	nop
 80058e8:	40021000 	.word	0x40021000
 80058ec:	42420000 	.word	0x42420000
 80058f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f4:	4b92      	ldr	r3, [pc, #584]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e9      	bne.n	80058d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 80a6 	beq.w	8005a5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005912:	4b8b      	ldr	r3, [pc, #556]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10d      	bne.n	800593a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591e:	4b88      	ldr	r3, [pc, #544]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	4a87      	ldr	r2, [pc, #540]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005928:	61d3      	str	r3, [r2, #28]
 800592a:	4b85      	ldr	r3, [pc, #532]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005932:	60bb      	str	r3, [r7, #8]
 8005934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005936:	2301      	movs	r3, #1
 8005938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593a:	4b82      	ldr	r3, [pc, #520]	; (8005b44 <HAL_RCC_OscConfig+0x4c8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d118      	bne.n	8005978 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005946:	4b7f      	ldr	r3, [pc, #508]	; (8005b44 <HAL_RCC_OscConfig+0x4c8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a7e      	ldr	r2, [pc, #504]	; (8005b44 <HAL_RCC_OscConfig+0x4c8>)
 800594c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005952:	f7fd fedd 	bl	8003710 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595a:	f7fd fed9 	bl	8003710 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b64      	cmp	r3, #100	; 0x64
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e103      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596c:	4b75      	ldr	r3, [pc, #468]	; (8005b44 <HAL_RCC_OscConfig+0x4c8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0f0      	beq.n	800595a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d106      	bne.n	800598e <HAL_RCC_OscConfig+0x312>
 8005980:	4b6f      	ldr	r3, [pc, #444]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	4a6e      	ldr	r2, [pc, #440]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	6213      	str	r3, [r2, #32]
 800598c:	e02d      	b.n	80059ea <HAL_RCC_OscConfig+0x36e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10c      	bne.n	80059b0 <HAL_RCC_OscConfig+0x334>
 8005996:	4b6a      	ldr	r3, [pc, #424]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	4a69      	ldr	r2, [pc, #420]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	6213      	str	r3, [r2, #32]
 80059a2:	4b67      	ldr	r3, [pc, #412]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	4a66      	ldr	r2, [pc, #408]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80059a8:	f023 0304 	bic.w	r3, r3, #4
 80059ac:	6213      	str	r3, [r2, #32]
 80059ae:	e01c      	b.n	80059ea <HAL_RCC_OscConfig+0x36e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b05      	cmp	r3, #5
 80059b6:	d10c      	bne.n	80059d2 <HAL_RCC_OscConfig+0x356>
 80059b8:	4b61      	ldr	r3, [pc, #388]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	4a60      	ldr	r2, [pc, #384]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80059be:	f043 0304 	orr.w	r3, r3, #4
 80059c2:	6213      	str	r3, [r2, #32]
 80059c4:	4b5e      	ldr	r3, [pc, #376]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	4a5d      	ldr	r2, [pc, #372]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	6213      	str	r3, [r2, #32]
 80059d0:	e00b      	b.n	80059ea <HAL_RCC_OscConfig+0x36e>
 80059d2:	4b5b      	ldr	r3, [pc, #364]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	4a5a      	ldr	r2, [pc, #360]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	6213      	str	r3, [r2, #32]
 80059de:	4b58      	ldr	r3, [pc, #352]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	4a57      	ldr	r2, [pc, #348]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 80059e4:	f023 0304 	bic.w	r3, r3, #4
 80059e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d015      	beq.n	8005a1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f2:	f7fd fe8d 	bl	8003710 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059f8:	e00a      	b.n	8005a10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fa:	f7fd fe89 	bl	8003710 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e0b1      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a10:	4b4b      	ldr	r3, [pc, #300]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0ee      	beq.n	80059fa <HAL_RCC_OscConfig+0x37e>
 8005a1c:	e014      	b.n	8005a48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a1e:	f7fd fe77 	bl	8003710 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a24:	e00a      	b.n	8005a3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a26:	f7fd fe73 	bl	8003710 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e09b      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a3c:	4b40      	ldr	r3, [pc, #256]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1ee      	bne.n	8005a26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d105      	bne.n	8005a5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a4e:	4b3c      	ldr	r3, [pc, #240]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	4a3b      	ldr	r2, [pc, #236]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 8087 	beq.w	8005b72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a64:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f003 030c 	and.w	r3, r3, #12
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d061      	beq.n	8005b34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69db      	ldr	r3, [r3, #28]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d146      	bne.n	8005b06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a78:	4b33      	ldr	r3, [pc, #204]	; (8005b48 <HAL_RCC_OscConfig+0x4cc>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7e:	f7fd fe47 	bl	8003710 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a86:	f7fd fe43 	bl	8003710 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e06d      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a98:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f0      	bne.n	8005a86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aac:	d108      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005aae:	4b24      	ldr	r3, [pc, #144]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	4921      	ldr	r1, [pc, #132]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ac0:	4b1f      	ldr	r3, [pc, #124]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a19      	ldr	r1, [r3, #32]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	491b      	ldr	r1, [pc, #108]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad8:	4b1b      	ldr	r3, [pc, #108]	; (8005b48 <HAL_RCC_OscConfig+0x4cc>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ade:	f7fd fe17 	bl	8003710 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae6:	f7fd fe13 	bl	8003710 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e03d      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005af8:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x46a>
 8005b04:	e035      	b.n	8005b72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b06:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <HAL_RCC_OscConfig+0x4cc>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fd fe00 	bl	8003710 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b14:	f7fd fdfc 	bl	8003710 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e026      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <HAL_RCC_OscConfig+0x4c4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x498>
 8005b32:	e01e      	b.n	8005b72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d107      	bne.n	8005b4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e019      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
 8005b40:	40021000 	.word	0x40021000
 8005b44:	40007000 	.word	0x40007000
 8005b48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_RCC_OscConfig+0x500>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d106      	bne.n	8005b6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d001      	beq.n	8005b72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	40021000 	.word	0x40021000

08005b80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0d0      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b94:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <HAL_RCC_ClockConfig+0x1c0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0307 	and.w	r3, r3, #7
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d910      	bls.n	8005bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b67      	ldr	r3, [pc, #412]	; (8005d40 <HAL_RCC_ClockConfig+0x1c0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 0207 	bic.w	r2, r3, #7
 8005baa:	4965      	ldr	r1, [pc, #404]	; (8005d40 <HAL_RCC_ClockConfig+0x1c0>)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	4b63      	ldr	r3, [pc, #396]	; (8005d40 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d001      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0b8      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d020      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bdc:	4b59      	ldr	r3, [pc, #356]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a58      	ldr	r2, [pc, #352]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005be2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005be6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d005      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bf4:	4b53      	ldr	r3, [pc, #332]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4a52      	ldr	r2, [pc, #328]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005bfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c00:	4b50      	ldr	r3, [pc, #320]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	494d      	ldr	r1, [pc, #308]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d040      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d107      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c26:	4b47      	ldr	r3, [pc, #284]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d115      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e07f      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d107      	bne.n	8005c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3e:	4b41      	ldr	r3, [pc, #260]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e073      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c4e:	4b3d      	ldr	r3, [pc, #244]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e06b      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c5e:	4b39      	ldr	r3, [pc, #228]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f023 0203 	bic.w	r2, r3, #3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4936      	ldr	r1, [pc, #216]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c70:	f7fd fd4e 	bl	8003710 <HAL_GetTick>
 8005c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c78:	f7fd fd4a 	bl	8003710 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e053      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8e:	4b2d      	ldr	r3, [pc, #180]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f003 020c 	and.w	r2, r3, #12
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d1eb      	bne.n	8005c78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca0:	4b27      	ldr	r3, [pc, #156]	; (8005d40 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d210      	bcs.n	8005cd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cae:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f023 0207 	bic.w	r2, r3, #7
 8005cb6:	4922      	ldr	r1, [pc, #136]	; (8005d40 <HAL_RCC_ClockConfig+0x1c0>)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cbe:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <HAL_RCC_ClockConfig+0x1c0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e032      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cdc:	4b19      	ldr	r3, [pc, #100]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4916      	ldr	r1, [pc, #88]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cfa:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	490e      	ldr	r1, [pc, #56]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d0e:	f000 f821 	bl	8005d54 <HAL_RCC_GetSysClockFreq>
 8005d12:	4602      	mov	r2, r0
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <HAL_RCC_ClockConfig+0x1c4>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	490a      	ldr	r1, [pc, #40]	; (8005d48 <HAL_RCC_ClockConfig+0x1c8>)
 8005d20:	5ccb      	ldrb	r3, [r1, r3]
 8005d22:	fa22 f303 	lsr.w	r3, r2, r3
 8005d26:	4a09      	ldr	r2, [pc, #36]	; (8005d4c <HAL_RCC_ClockConfig+0x1cc>)
 8005d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_RCC_ClockConfig+0x1d0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fd fcac 	bl	800368c <HAL_InitTick>

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40022000 	.word	0x40022000
 8005d44:	40021000 	.word	0x40021000
 8005d48:	0800bb28 	.word	0x0800bb28
 8005d4c:	20000230 	.word	0x20000230
 8005d50:	20000234 	.word	0x20000234

08005d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d54:	b490      	push	{r4, r7}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d5a:	4b29      	ldr	r3, [pc, #164]	; (8005e00 <HAL_RCC_GetSysClockFreq+0xac>)
 8005d5c:	1d3c      	adds	r4, r7, #4
 8005d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d64:	f240 2301 	movw	r3, #513	; 0x201
 8005d68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	2300      	movs	r3, #0
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d7e:	4b21      	ldr	r3, [pc, #132]	; (8005e04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d002      	beq.n	8005d94 <HAL_RCC_GetSysClockFreq+0x40>
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d003      	beq.n	8005d9a <HAL_RCC_GetSysClockFreq+0x46>
 8005d92:	e02b      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d94:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005d96:	623b      	str	r3, [r7, #32]
      break;
 8005d98:	e02b      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	0c9b      	lsrs	r3, r3, #18
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	3328      	adds	r3, #40	; 0x28
 8005da4:	443b      	add	r3, r7
 8005da6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005daa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d012      	beq.n	8005ddc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005db6:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	0c5b      	lsrs	r3, r3, #17
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	3328      	adds	r3, #40	; 0x28
 8005dc2:	443b      	add	r3, r7
 8005dc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005dc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4a0e      	ldr	r2, [pc, #56]	; (8005e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005dce:	fb03 f202 	mul.w	r2, r3, r2
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dda:	e004      	b.n	8005de6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4a0b      	ldr	r2, [pc, #44]	; (8005e0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de0:	fb02 f303 	mul.w	r3, r2, r3
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	623b      	str	r3, [r7, #32]
      break;
 8005dea:	e002      	b.n	8005df2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005dee:	623b      	str	r3, [r7, #32]
      break;
 8005df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005df2:	6a3b      	ldr	r3, [r7, #32]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3728      	adds	r7, #40	; 0x28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc90      	pop	{r4, r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	0800bae0 	.word	0x0800bae0
 8005e04:	40021000 	.word	0x40021000
 8005e08:	007a1200 	.word	0x007a1200
 8005e0c:	003d0900 	.word	0x003d0900

08005e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <RCC_Delay+0x34>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <RCC_Delay+0x38>)
 8005e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e22:	0a5b      	lsrs	r3, r3, #9
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	fb02 f303 	mul.w	r3, r2, r3
 8005e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e2c:	bf00      	nop
  }
  while (Delay --);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1e5a      	subs	r2, r3, #1
 8005e32:	60fa      	str	r2, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1f9      	bne.n	8005e2c <RCC_Delay+0x1c>
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr
 8005e44:	20000230 	.word	0x20000230
 8005e48:	10624dd3 	.word	0x10624dd3

08005e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d07d      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e6c:	4b4f      	ldr	r3, [pc, #316]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10d      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e78:	4b4c      	ldr	r3, [pc, #304]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	4a4b      	ldr	r2, [pc, #300]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e82:	61d3      	str	r3, [r2, #28]
 8005e84:	4b49      	ldr	r3, [pc, #292]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e90:	2301      	movs	r3, #1
 8005e92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e94:	4b46      	ldr	r3, [pc, #280]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d118      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ea0:	4b43      	ldr	r3, [pc, #268]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a42      	ldr	r2, [pc, #264]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eac:	f7fd fc30 	bl	8003710 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb4:	f7fd fc2c 	bl	8003710 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b64      	cmp	r3, #100	; 0x64
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e06d      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec6:	4b3a      	ldr	r3, [pc, #232]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ed2:	4b36      	ldr	r3, [pc, #216]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02e      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d027      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ef0:	4b2e      	ldr	r3, [pc, #184]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005efa:	4b2e      	ldr	r3, [pc, #184]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f00:	4b2c      	ldr	r3, [pc, #176]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f06:	4a29      	ldr	r2, [pc, #164]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d014      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f16:	f7fd fbfb 	bl	8003710 <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f1c:	e00a      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1e:	f7fd fbf7 	bl	8003710 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e036      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f34:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0ee      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f40:	4b1a      	ldr	r3, [pc, #104]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f42:	6a1b      	ldr	r3, [r3, #32]
 8005f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	4917      	ldr	r1, [pc, #92]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005f52:	7dfb      	ldrb	r3, [r7, #23]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d105      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f58:	4b14      	ldr	r3, [pc, #80]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	4a13      	ldr	r2, [pc, #76]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d008      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f70:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	490b      	ldr	r1, [pc, #44]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0310 	and.w	r3, r3, #16
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d008      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f8e:	4b07      	ldr	r3, [pc, #28]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	4904      	ldr	r1, [pc, #16]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	40007000 	.word	0x40007000
 8005fb4:	42420440 	.word	0x42420440

08005fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e076      	b.n	80060b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d108      	bne.n	8005fe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fda:	d009      	beq.n	8005ff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	61da      	str	r2, [r3, #28]
 8005fe2:	e005      	b.n	8005ff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fb f84e 	bl	80010ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006026:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006042:	431a      	orrs	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006074:	ea42 0103 	orr.w	r1, r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	0c1a      	lsrs	r2, r3, #16
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f002 0204 	and.w	r2, r2, #4
 8006096:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	69da      	ldr	r2, [r3, #28]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	4613      	mov	r3, r2
 80060ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_SPI_Transmit+0x22>
 80060de:	2302      	movs	r3, #2
 80060e0:	e126      	b.n	8006330 <HAL_SPI_Transmit+0x270>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060ea:	f7fd fb11 	bl	8003710 <HAL_GetTick>
 80060ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d002      	beq.n	8006106 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006100:	2302      	movs	r3, #2
 8006102:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006104:	e10b      	b.n	800631e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_SPI_Transmit+0x52>
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d102      	bne.n	8006118 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006116:	e102      	b.n	800631e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2203      	movs	r2, #3
 800611c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	88fa      	ldrh	r2, [r7, #6]
 8006130:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	88fa      	ldrh	r2, [r7, #6]
 8006136:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615e:	d10f      	bne.n	8006180 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800616e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800617e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d007      	beq.n	800619e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a6:	d14b      	bne.n	8006240 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_SPI_Transmit+0xf6>
 80061b0:	8afb      	ldrh	r3, [r7, #22]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d13e      	bne.n	8006234 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	881a      	ldrh	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	1c9a      	adds	r2, r3, #2
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061da:	e02b      	b.n	8006234 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d112      	bne.n	8006210 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ee:	881a      	ldrh	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	1c9a      	adds	r2, r3, #2
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	86da      	strh	r2, [r3, #54]	; 0x36
 800620e:	e011      	b.n	8006234 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006210:	f7fd fa7e 	bl	8003710 <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d803      	bhi.n	8006228 <HAL_SPI_Transmit+0x168>
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006226:	d102      	bne.n	800622e <HAL_SPI_Transmit+0x16e>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006232:	e074      	b.n	800631e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006238:	b29b      	uxth	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1ce      	bne.n	80061dc <HAL_SPI_Transmit+0x11c>
 800623e:	e04c      	b.n	80062da <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_SPI_Transmit+0x18e>
 8006248:	8afb      	ldrh	r3, [r7, #22]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d140      	bne.n	80062d0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	330c      	adds	r3, #12
 8006258:	7812      	ldrb	r2, [r2, #0]
 800625a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b01      	subs	r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006274:	e02c      	b.n	80062d0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b02      	cmp	r3, #2
 8006282:	d113      	bne.n	80062ac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	7812      	ldrb	r2, [r2, #0]
 8006290:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80062aa:	e011      	b.n	80062d0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062ac:	f7fd fa30 	bl	8003710 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d803      	bhi.n	80062c4 <HAL_SPI_Transmit+0x204>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c2:	d102      	bne.n	80062ca <HAL_SPI_Transmit+0x20a>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d102      	bne.n	80062d0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062ce:	e026      	b.n	800631e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1cd      	bne.n	8006276 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f8b2 	bl	8006448 <SPI_EndRxTxTransaction>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2220      	movs	r2, #32
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062f8:	2300      	movs	r3, #0
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	613b      	str	r3, [r7, #16]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e000      	b.n	800631e <HAL_SPI_Transmit+0x25e>
  }

error:
 800631c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800632e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	4613      	mov	r3, r2
 8006346:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006348:	f7fd f9e2 	bl	8003710 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	4413      	add	r3, r2
 8006356:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006358:	f7fd f9da 	bl	8003710 <HAL_GetTick>
 800635c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800635e:	4b39      	ldr	r3, [pc, #228]	; (8006444 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	015b      	lsls	r3, r3, #5
 8006364:	0d1b      	lsrs	r3, r3, #20
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	fb02 f303 	mul.w	r3, r2, r3
 800636c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800636e:	e054      	b.n	800641a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006376:	d050      	beq.n	800641a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006378:	f7fd f9ca 	bl	8003710 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	429a      	cmp	r2, r3
 8006386:	d902      	bls.n	800638e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d13d      	bne.n	800640a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800639c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063a6:	d111      	bne.n	80063cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b0:	d004      	beq.n	80063bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ba:	d107      	bne.n	80063cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d4:	d10f      	bne.n	80063f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e017      	b.n	800643a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	3b01      	subs	r3, #1
 8006418:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	4013      	ands	r3, r2
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	bf0c      	ite	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	2300      	movne	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	429a      	cmp	r2, r3
 8006436:	d19b      	bne.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3720      	adds	r7, #32
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000230 	.word	0x20000230

08006448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2200      	movs	r2, #0
 800645c:	2180      	movs	r1, #128	; 0x80
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff ff6a 	bl	8006338 <SPI_WaitFlagStateUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	f043 0220 	orr.w	r2, r3, #32
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e000      	b.n	800647c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006484:	b084      	sub	sp, #16
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	f107 0014 	add.w	r0, r7, #20
 8006492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	b004      	add	sp, #16
 80064a2:	4770      	bx	lr

080064a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80064b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	b29a      	uxth	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80064d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80064dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	43db      	mvns	r3, r3
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	4013      	ands	r3, r2
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	bc80      	pop	{r7}
 800651a:	4770      	bx	lr

0800651c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800651c:	b084      	sub	sp, #16
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	f107 0014 	add.w	r0, r7, #20
 800652a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2201      	movs	r2, #1
 8006532:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	b004      	add	sp, #16
 800655a:	4770      	bx	lr

0800655c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800655c:	b480      	push	{r7}
 800655e:	b09b      	sub	sp, #108	; 0x6c
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	78db      	ldrb	r3, [r3, #3]
 800658a:	2b03      	cmp	r3, #3
 800658c:	d81f      	bhi.n	80065ce <USB_ActivateEndpoint+0x72>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <USB_ActivateEndpoint+0x38>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065c1 	.word	0x080065c1
 800659c:	080065d7 	.word	0x080065d7
 80065a0:	080065b3 	.word	0x080065b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80065a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80065b0:	e012      	b.n	80065d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80065b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80065ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80065be:	e00b      	b.n	80065d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80065c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80065cc:	e004      	b.n	80065d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80065d4:	e000      	b.n	80065d8 <USB_ActivateEndpoint+0x7c>
      break;
 80065d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80065e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006610:	b29a      	uxth	r2, r3
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	4313      	orrs	r3, r2
 800661a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	441a      	add	r2, r3
 8006628:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800662c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800663c:	b29b      	uxth	r3, r3
 800663e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	7b1b      	ldrb	r3, [r3, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f040 8149 	bne.w	80068dc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	785b      	ldrb	r3, [r3, #1]
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 8084 	beq.w	800675c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665e:	b29b      	uxth	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	4413      	add	r3, r2
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	011a      	lsls	r2, r3, #4
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	4413      	add	r3, r2
 8006672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	88db      	ldrh	r3, [r3, #6]
 800667c:	085b      	lsrs	r3, r3, #1
 800667e:	b29b      	uxth	r3, r3
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	81fb      	strh	r3, [r7, #14]
 8006696:	89fb      	ldrh	r3, [r7, #14]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <USB_ActivateEndpoint+0x17c>
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b6:	81bb      	strh	r3, [r7, #12]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	441a      	add	r2, r3
 80066c2:	89bb      	ldrh	r3, [r7, #12]
 80066c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	78db      	ldrb	r3, [r3, #3]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d020      	beq.n	8006722 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f6:	813b      	strh	r3, [r7, #8]
 80066f8:	893b      	ldrh	r3, [r7, #8]
 80066fa:	f083 0320 	eor.w	r3, r3, #32
 80066fe:	813b      	strh	r3, [r7, #8]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	893b      	ldrh	r3, [r7, #8]
 800670c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671c:	b29b      	uxth	r3, r3
 800671e:	8013      	strh	r3, [r2, #0]
 8006720:	e27f      	b.n	8006c22 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006738:	817b      	strh	r3, [r7, #10]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	897b      	ldrh	r3, [r7, #10]
 8006746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006756:	b29b      	uxth	r3, r3
 8006758:	8013      	strh	r3, [r2, #0]
 800675a:	e262      	b.n	8006c22 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006766:	b29b      	uxth	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	4413      	add	r3, r2
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	011a      	lsls	r2, r3, #4
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	4413      	add	r3, r2
 800677a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	88db      	ldrh	r3, [r3, #6]
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	b29b      	uxth	r3, r3
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679a:	b29b      	uxth	r3, r3
 800679c:	461a      	mov	r2, r3
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	4413      	add	r3, r2
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	011a      	lsls	r2, r3, #4
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067b2:	623b      	str	r3, [r7, #32]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d112      	bne.n	80067e2 <USB_ActivateEndpoint+0x286>
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	801a      	strh	r2, [r3, #0]
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067da:	b29a      	uxth	r2, r3
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	e02f      	b.n	8006842 <USB_ActivateEndpoint+0x2e6>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b3e      	cmp	r3, #62	; 0x3e
 80067e8:	d813      	bhi.n	8006812 <USB_ActivateEndpoint+0x2b6>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	085b      	lsrs	r3, r3, #1
 80067f0:	663b      	str	r3, [r7, #96]	; 0x60
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <USB_ActivateEndpoint+0x2a8>
 80067fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006800:	3301      	adds	r3, #1
 8006802:	663b      	str	r3, [r7, #96]	; 0x60
 8006804:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006806:	b29b      	uxth	r3, r3
 8006808:	029b      	lsls	r3, r3, #10
 800680a:	b29a      	uxth	r2, r3
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	801a      	strh	r2, [r3, #0]
 8006810:	e017      	b.n	8006842 <USB_ActivateEndpoint+0x2e6>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	663b      	str	r3, [r7, #96]	; 0x60
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2b00      	cmp	r3, #0
 8006824:	d102      	bne.n	800682c <USB_ActivateEndpoint+0x2d0>
 8006826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006828:	3b01      	subs	r3, #1
 800682a:	663b      	str	r3, [r7, #96]	; 0x60
 800682c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800682e:	b29b      	uxth	r3, r3
 8006830:	029b      	lsls	r3, r3, #10
 8006832:	b29b      	uxth	r3, r3
 8006834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683c:	b29a      	uxth	r2, r3
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	83fb      	strh	r3, [r7, #30]
 8006850:	8bfb      	ldrh	r3, [r7, #30]
 8006852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d01b      	beq.n	8006892 <USB_ActivateEndpoint+0x336>
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800686c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006870:	83bb      	strh	r3, [r7, #28]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	441a      	add	r2, r3
 800687c:	8bbb      	ldrh	r3, [r7, #28]
 800687e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800688a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688e:	b29b      	uxth	r3, r3
 8006890:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	881b      	ldrh	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a8:	837b      	strh	r3, [r7, #26]
 80068aa:	8b7b      	ldrh	r3, [r7, #26]
 80068ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068b0:	837b      	strh	r3, [r7, #26]
 80068b2:	8b7b      	ldrh	r3, [r7, #26]
 80068b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068b8:	837b      	strh	r3, [r7, #26]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	8b7b      	ldrh	r3, [r7, #26]
 80068c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	8013      	strh	r3, [r2, #0]
 80068da:	e1a2      	b.n	8006c22 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800690c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006914:	b29b      	uxth	r3, r3
 8006916:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	65bb      	str	r3, [r7, #88]	; 0x58
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006922:	b29b      	uxth	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006928:	4413      	add	r3, r2
 800692a:	65bb      	str	r3, [r7, #88]	; 0x58
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	011a      	lsls	r2, r3, #4
 8006932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006934:	4413      	add	r3, r2
 8006936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800693a:	657b      	str	r3, [r7, #84]	; 0x54
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	891b      	ldrh	r3, [r3, #8]
 8006940:	085b      	lsrs	r3, r3, #1
 8006942:	b29b      	uxth	r3, r3
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	653b      	str	r3, [r7, #80]	; 0x50
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006956:	b29b      	uxth	r3, r3
 8006958:	461a      	mov	r2, r3
 800695a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695c:	4413      	add	r3, r2
 800695e:	653b      	str	r3, [r7, #80]	; 0x50
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	011a      	lsls	r2, r3, #4
 8006966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006968:	4413      	add	r3, r2
 800696a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800696e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	895b      	ldrh	r3, [r3, #10]
 8006974:	085b      	lsrs	r3, r3, #1
 8006976:	b29b      	uxth	r3, r3
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f040 8091 	bne.w	8006aac <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006998:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800699a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01b      	beq.n	80069da <USB_ActivateEndpoint+0x47e>
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	441a      	add	r2, r3
 80069c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80069c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80069e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80069ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d01b      	beq.n	8006a2a <USB_ActivateEndpoint+0x4ce>
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a08:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	441a      	add	r2, r3
 8006a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a50:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a88:	867b      	strh	r3, [r7, #50]	; 0x32
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]
 8006aaa:	e0ba      	b.n	8006c22 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006abc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01d      	beq.n	8006b04 <USB_ActivateEndpoint+0x5a8>
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ade:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	441a      	add	r2, r3
 8006aec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01d      	beq.n	8006b5c <USB_ActivateEndpoint+0x600>
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	441a      	add	r2, r3
 8006b44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	78db      	ldrb	r3, [r3, #3]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d024      	beq.n	8006bae <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b82:	f083 0320 	eor.w	r3, r3, #32
 8006b86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	8013      	strh	r3, [r2, #0]
 8006bac:	e01d      	b.n	8006bea <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c00:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	441a      	add	r2, r3
 8006c0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006c22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	376c      	adds	r7, #108	; 0x6c
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr

08006c30 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b08d      	sub	sp, #52	; 0x34
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	7b1b      	ldrb	r3, [r3, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f040 808e 	bne.w	8006d60 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	785b      	ldrb	r3, [r3, #1]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d044      	beq.n	8006cd6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	81bb      	strh	r3, [r7, #12]
 8006c5a:	89bb      	ldrh	r3, [r7, #12]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d01b      	beq.n	8006c9c <USB_DeactivateEndpoint+0x6c>
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7a:	817b      	strh	r3, [r7, #10]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	441a      	add	r2, r3
 8006c86:	897b      	ldrh	r3, [r7, #10]
 8006c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb2:	813b      	strh	r3, [r7, #8]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	441a      	add	r2, r3
 8006cbe:	893b      	ldrh	r3, [r7, #8]
 8006cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	8013      	strh	r3, [r2, #0]
 8006cd4:	e192      	b.n	8006ffc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	827b      	strh	r3, [r7, #18]
 8006ce4:	8a7b      	ldrh	r3, [r7, #18]
 8006ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d01b      	beq.n	8006d26 <USB_DeactivateEndpoint+0xf6>
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d04:	823b      	strh	r3, [r7, #16]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	441a      	add	r2, r3
 8006d10:	8a3b      	ldrh	r3, [r7, #16]
 8006d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3c:	81fb      	strh	r3, [r7, #14]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	8013      	strh	r3, [r2, #0]
 8006d5e:	e14d      	b.n	8006ffc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f040 80a5 	bne.w	8006eb4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	843b      	strh	r3, [r7, #32]
 8006d78:	8c3b      	ldrh	r3, [r7, #32]
 8006d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d01b      	beq.n	8006dba <USB_DeactivateEndpoint+0x18a>
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d98:	83fb      	strh	r3, [r7, #30]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	441a      	add	r2, r3
 8006da4:	8bfb      	ldrh	r3, [r7, #30]
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	83bb      	strh	r3, [r7, #28]
 8006dc8:	8bbb      	ldrh	r3, [r7, #28]
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d01b      	beq.n	8006e0a <USB_DeactivateEndpoint+0x1da>
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	837b      	strh	r3, [r7, #26]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	441a      	add	r2, r3
 8006df4:	8b7b      	ldrh	r3, [r7, #26]
 8006df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	881b      	ldrh	r3, [r3, #0]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e20:	833b      	strh	r3, [r7, #24]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	441a      	add	r2, r3
 8006e2c:	8b3b      	ldrh	r3, [r7, #24]
 8006e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	881b      	ldrh	r3, [r3, #0]
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e58:	82fb      	strh	r3, [r7, #22]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	441a      	add	r2, r3
 8006e64:	8afb      	ldrh	r3, [r7, #22]
 8006e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e90:	82bb      	strh	r3, [r7, #20]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	441a      	add	r2, r3
 8006e9c:	8abb      	ldrh	r3, [r7, #20]
 8006e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	8013      	strh	r3, [r2, #0]
 8006eb2:	e0a3      	b.n	8006ffc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006ec2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01b      	beq.n	8006f04 <USB_DeactivateEndpoint+0x2d4>
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	441a      	add	r2, r3
 8006eee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01b      	beq.n	8006f54 <USB_DeactivateEndpoint+0x324>
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f32:	853b      	strh	r3, [r7, #40]	; 0x28
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	441a      	add	r2, r3
 8006f3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	441a      	add	r2, r3
 8006f76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	441a      	add	r2, r3
 8006fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fda:	847b      	strh	r3, [r7, #34]	; 0x22
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	441a      	add	r2, r3
 8006fe6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3734      	adds	r7, #52	; 0x34
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr

08007008 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b0cc      	sub	sp, #304	; 0x130
 800700c:	af00      	add	r7, sp, #0
 800700e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007016:	6018      	str	r0, [r3, #0]
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007020:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	785b      	ldrb	r3, [r3, #1]
 800702e:	2b01      	cmp	r3, #1
 8007030:	f041 817d 	bne.w	800832e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699a      	ldr	r2, [r3, #24]
 8007040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	429a      	cmp	r2, r3
 800704e:	d908      	bls.n	8007062 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007060:	e007      	b.n	8007072 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	7b1b      	ldrb	r3, [r3, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d152      	bne.n	8007128 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6959      	ldr	r1, [r3, #20]
 800708e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	88da      	ldrh	r2, [r3, #6]
 800709a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80070a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80070a8:	6800      	ldr	r0, [r0, #0]
 80070aa:	f001 ff23 	bl	8008ef4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80070b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070ba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070be:	6812      	ldr	r2, [r2, #0]
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	4619      	mov	r1, r3
 80070d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80070dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070e0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	440a      	add	r2, r1
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	011a      	lsls	r2, r3, #4
 80070f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4413      	add	r3, r2
 8007104:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007116:	b29a      	uxth	r2, r3
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	801a      	strh	r2, [r3, #0]
 8007124:	f001 b8b5 	b.w	8008292 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	78db      	ldrb	r3, [r3, #3]
 8007134:	2b02      	cmp	r3, #2
 8007136:	f040 84c6 	bne.w	8007ac6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800713a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6a1a      	ldr	r2, [r3, #32]
 8007146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	429a      	cmp	r2, r3
 8007154:	f240 8443 	bls.w	80079de <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007166:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	b29b      	uxth	r3, r3
 8007176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007186:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	441a      	add	r2, r3
 800719c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80071a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80071ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80071b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c4:	1ad2      	subs	r2, r2, r3
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 823e 	beq.w	8007676 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007202:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007206:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800720a:	6812      	ldr	r2, [r2, #0]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	785b      	ldrb	r3, [r3, #1]
 800721a:	2b00      	cmp	r3, #0
 800721c:	f040 809a 	bne.w	8007354 <USB_EPStartXfer+0x34c>
 8007220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007228:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800722c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007242:	b29b      	uxth	r3, r3
 8007244:	4619      	mov	r1, r3
 8007246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800724e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007252:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	440a      	add	r2, r1
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	011a      	lsls	r2, r3, #4
 800726a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4413      	add	r3, r2
 8007276:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800727a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d122      	bne.n	80072d2 <USB_EPStartXfer+0x2ca>
 800728c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007290:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	b29b      	uxth	r3, r3
 800729a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800729e:	b29a      	uxth	r2, r3
 80072a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	e079      	b.n	80073c6 <USB_EPStartXfer+0x3be>
 80072d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d6:	2b3e      	cmp	r3, #62	; 0x3e
 80072d8:	d81b      	bhi.n	8007312 <USB_EPStartXfer+0x30a>
 80072da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <USB_EPStartXfer+0x2f2>
 80072f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072f4:	3301      	adds	r3, #1
 80072f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80072fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072fe:	b29b      	uxth	r3, r3
 8007300:	029b      	lsls	r3, r3, #10
 8007302:	b29a      	uxth	r2, r3
 8007304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007308:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	e059      	b.n	80073c6 <USB_EPStartXfer+0x3be>
 8007312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800731c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <USB_EPStartXfer+0x32a>
 8007328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800732c:	3b01      	subs	r3, #1
 800732e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007336:	b29b      	uxth	r3, r3
 8007338:	029b      	lsls	r3, r3, #10
 800733a:	b29b      	uxth	r3, r3
 800733c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007344:	b29a      	uxth	r2, r3
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	e038      	b.n	80073c6 <USB_EPStartXfer+0x3be>
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	785b      	ldrb	r3, [r3, #1]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d130      	bne.n	80073c6 <USB_EPStartXfer+0x3be>
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007372:	b29b      	uxth	r3, r3
 8007374:	4619      	mov	r1, r3
 8007376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800737e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007382:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007386:	6812      	ldr	r2, [r2, #0]
 8007388:	440a      	add	r2, r1
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	011a      	lsls	r2, r3, #4
 800739a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4413      	add	r3, r2
 80073a6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80073aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80073c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	895b      	ldrh	r3, [r3, #10]
 80073d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6959      	ldr	r1, [r3, #20]
 80073e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80073ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80073f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80073f4:	6800      	ldr	r0, [r0, #0]
 80073f6:	f001 fd7d 	bl	8008ef4 <USB_WritePMA>
            ep->xfer_buff += len;
 80073fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	695a      	ldr	r2, [r3, #20]
 8007406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800740a:	441a      	add	r2, r3
 800740c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007418:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6a1a      	ldr	r2, [r3, #32]
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	429a      	cmp	r2, r3
 8007432:	d90f      	bls.n	8007454 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6a1a      	ldr	r2, [r3, #32]
 8007440:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007444:	1ad2      	subs	r2, r2, r3
 8007446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	621a      	str	r2, [r3, #32]
 8007452:	e00e      	b.n	8007472 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2200      	movs	r2, #0
 8007470:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f040 809a 	bne.w	80075b8 <USB_EPStartXfer+0x5b0>
 8007484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007488:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800748c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007490:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	4619      	mov	r1, r3
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80074b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074b6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80074ba:	6812      	ldr	r2, [r2, #0]
 80074bc:	440a      	add	r2, r1
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	011a      	lsls	r2, r3, #4
 80074ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4413      	add	r3, r2
 80074da:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80074de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d122      	bne.n	8007536 <USB_EPStartXfer+0x52e>
 80074f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007502:	b29a      	uxth	r2, r3
 8007504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007508:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	801a      	strh	r2, [r3, #0]
 8007510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007514:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007526:	b29a      	uxth	r2, r3
 8007528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	801a      	strh	r2, [r3, #0]
 8007534:	e083      	b.n	800763e <USB_EPStartXfer+0x636>
 8007536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753a:	2b3e      	cmp	r3, #62	; 0x3e
 800753c:	d81b      	bhi.n	8007576 <USB_EPStartXfer+0x56e>
 800753e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d004      	beq.n	800755e <USB_EPStartXfer+0x556>
 8007554:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007558:	3301      	adds	r3, #1
 800755a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800755e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007562:	b29b      	uxth	r3, r3
 8007564:	029b      	lsls	r3, r3, #10
 8007566:	b29a      	uxth	r2, r3
 8007568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	801a      	strh	r2, [r3, #0]
 8007574:	e063      	b.n	800763e <USB_EPStartXfer+0x636>
 8007576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757a:	095b      	lsrs	r3, r3, #5
 800757c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007584:	f003 031f 	and.w	r3, r3, #31
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <USB_EPStartXfer+0x58e>
 800758c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007590:	3b01      	subs	r3, #1
 8007592:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007596:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800759a:	b29b      	uxth	r3, r3
 800759c:	029b      	lsls	r3, r3, #10
 800759e:	b29b      	uxth	r3, r3
 80075a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	e042      	b.n	800763e <USB_EPStartXfer+0x636>
 80075b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	785b      	ldrb	r3, [r3, #1]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d13a      	bne.n	800763e <USB_EPStartXfer+0x636>
 80075c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075d4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80075d8:	6812      	ldr	r2, [r2, #0]
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075fa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80075fe:	6812      	ldr	r2, [r2, #0]
 8007600:	440a      	add	r2, r1
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	011a      	lsls	r2, r3, #4
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4413      	add	r3, r2
 800761e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007626:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007630:	b29a      	uxth	r2, r3
 8007632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007636:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800763e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	891b      	ldrh	r3, [r3, #8]
 800764a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800764e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6959      	ldr	r1, [r3, #20]
 800765a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800765e:	b29b      	uxth	r3, r3
 8007660:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007664:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007668:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800766c:	6800      	ldr	r0, [r0, #0]
 800766e:	f001 fc41 	bl	8008ef4 <USB_WritePMA>
 8007672:	f000 be0e 	b.w	8008292 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	785b      	ldrb	r3, [r3, #1]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d16d      	bne.n	8007762 <USB_EPStartXfer+0x75a>
 8007686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	64bb      	str	r3, [r7, #72]	; 0x48
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a6:	4413      	add	r3, r2
 80076a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80076aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	011a      	lsls	r2, r3, #4
 80076b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ba:	4413      	add	r3, r2
 80076bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076c0:	647b      	str	r3, [r7, #68]	; 0x44
 80076c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d112      	bne.n	80076f0 <USB_EPStartXfer+0x6e8>
 80076ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076cc:	881b      	ldrh	r3, [r3, #0]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076d8:	801a      	strh	r2, [r3, #0]
 80076da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e063      	b.n	80077b8 <USB_EPStartXfer+0x7b0>
 80076f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f4:	2b3e      	cmp	r3, #62	; 0x3e
 80076f6:	d817      	bhi.n	8007728 <USB_EPStartXfer+0x720>
 80076f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d004      	beq.n	8007718 <USB_EPStartXfer+0x710>
 800770e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007712:	3301      	adds	r3, #1
 8007714:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007718:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800771c:	b29b      	uxth	r3, r3
 800771e:	029b      	lsls	r3, r3, #10
 8007720:	b29a      	uxth	r2, r3
 8007722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007724:	801a      	strh	r2, [r3, #0]
 8007726:	e047      	b.n	80077b8 <USB_EPStartXfer+0x7b0>
 8007728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	2b00      	cmp	r3, #0
 800773c:	d104      	bne.n	8007748 <USB_EPStartXfer+0x740>
 800773e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007742:	3b01      	subs	r3, #1
 8007744:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007748:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800774c:	b29b      	uxth	r3, r3
 800774e:	029b      	lsls	r3, r3, #10
 8007750:	b29b      	uxth	r3, r3
 8007752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800775a:	b29a      	uxth	r2, r3
 800775c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	e02a      	b.n	80077b8 <USB_EPStartXfer+0x7b0>
 8007762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	785b      	ldrb	r3, [r3, #1]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d122      	bne.n	80077b8 <USB_EPStartXfer+0x7b0>
 8007772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	653b      	str	r3, [r7, #80]	; 0x50
 800777e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800778c:	b29b      	uxth	r3, r3
 800778e:	461a      	mov	r2, r3
 8007790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007792:	4413      	add	r3, r2
 8007794:	653b      	str	r3, [r7, #80]	; 0x50
 8007796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	011a      	lsls	r2, r3, #4
 80077a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a6:	4413      	add	r3, r2
 80077a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	891b      	ldrh	r3, [r3, #8]
 80077c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6959      	ldr	r1, [r3, #20]
 80077d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80077de:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80077e2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80077e6:	6800      	ldr	r0, [r0, #0]
 80077e8:	f001 fb84 	bl	8008ef4 <USB_WritePMA>
            ep->xfer_buff += len;
 80077ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695a      	ldr	r2, [r3, #20]
 80077f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fc:	441a      	add	r2, r3
 80077fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800780a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6a1a      	ldr	r2, [r3, #32]
 8007816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	429a      	cmp	r2, r3
 8007824:	d90f      	bls.n	8007846 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6a1a      	ldr	r2, [r3, #32]
 8007832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	621a      	str	r2, [r3, #32]
 8007844:	e00e      	b.n	8007864 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800785a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2200      	movs	r2, #0
 8007862:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	643b      	str	r3, [r7, #64]	; 0x40
 8007870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	785b      	ldrb	r3, [r3, #1]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d16d      	bne.n	800795c <USB_EPStartXfer+0x954>
 8007880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007884:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	63bb      	str	r3, [r7, #56]	; 0x38
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789a:	b29b      	uxth	r3, r3
 800789c:	461a      	mov	r2, r3
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	4413      	add	r3, r2
 80078a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	011a      	lsls	r2, r3, #4
 80078b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b4:	4413      	add	r3, r2
 80078b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078ba:	637b      	str	r3, [r7, #52]	; 0x34
 80078bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d112      	bne.n	80078ea <USB_EPStartXfer+0x8e2>
 80078c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d2:	801a      	strh	r2, [r3, #0]
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e6:	801a      	strh	r2, [r3, #0]
 80078e8:	e05d      	b.n	80079a6 <USB_EPStartXfer+0x99e>
 80078ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ee:	2b3e      	cmp	r3, #62	; 0x3e
 80078f0:	d817      	bhi.n	8007922 <USB_EPStartXfer+0x91a>
 80078f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f6:	085b      	lsrs	r3, r3, #1
 80078f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80078fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <USB_EPStartXfer+0x90a>
 8007908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800790c:	3301      	adds	r3, #1
 800790e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007912:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007916:	b29b      	uxth	r3, r3
 8007918:	029b      	lsls	r3, r3, #10
 800791a:	b29a      	uxth	r2, r3
 800791c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791e:	801a      	strh	r2, [r3, #0]
 8007920:	e041      	b.n	80079a6 <USB_EPStartXfer+0x99e>
 8007922:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800792c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2b00      	cmp	r3, #0
 8007936:	d104      	bne.n	8007942 <USB_EPStartXfer+0x93a>
 8007938:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800793c:	3b01      	subs	r3, #1
 800793e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007942:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007946:	b29b      	uxth	r3, r3
 8007948:	029b      	lsls	r3, r3, #10
 800794a:	b29b      	uxth	r3, r3
 800794c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007954:	b29a      	uxth	r2, r3
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	801a      	strh	r2, [r3, #0]
 800795a:	e024      	b.n	80079a6 <USB_EPStartXfer+0x99e>
 800795c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	785b      	ldrb	r3, [r3, #1]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d11c      	bne.n	80079a6 <USB_EPStartXfer+0x99e>
 800796c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800797a:	b29b      	uxth	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007980:	4413      	add	r3, r2
 8007982:	643b      	str	r3, [r7, #64]	; 0x40
 8007984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	011a      	lsls	r2, r3, #4
 8007992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007994:	4413      	add	r3, r2
 8007996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800799c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	895b      	ldrh	r3, [r3, #10]
 80079b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6959      	ldr	r1, [r3, #20]
 80079c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80079d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80079d4:	6800      	ldr	r0, [r0, #0]
 80079d6:	f001 fa8d 	bl	8008ef4 <USB_WritePMA>
 80079da:	f000 bc5a 	b.w	8008292 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80079de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80079ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a14:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	441a      	add	r2, r3
 8007a32:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	461a      	mov	r2, r3
 8007a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a6a:	4413      	add	r3, r2
 8007a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	011a      	lsls	r2, r3, #4
 8007a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a7e:	4413      	add	r3, r2
 8007a80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a84:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	891b      	ldrh	r3, [r3, #8]
 8007a9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6959      	ldr	r1, [r3, #20]
 8007aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ab6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007aba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007abe:	6800      	ldr	r0, [r0, #0]
 8007ac0:	f001 fa18 	bl	8008ef4 <USB_WritePMA>
 8007ac4:	e3e5      	b.n	8008292 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aec:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	441a      	add	r2, r3
 8007b0a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b16:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6a1a      	ldr	r2, [r3, #32]
 8007b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	881b      	ldrh	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 81bc 	beq.w	8007ee0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	785b      	ldrb	r3, [r3, #1]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d16d      	bne.n	8007c62 <USB_EPStartXfer+0xc5a>
 8007b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ba6:	4413      	add	r3, r2
 8007ba8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	011a      	lsls	r2, r3, #4
 8007bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bba:	4413      	add	r3, r2
 8007bbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bc0:	677b      	str	r3, [r7, #116]	; 0x74
 8007bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d112      	bne.n	8007bf0 <USB_EPStartXfer+0xbe8>
 8007bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	e060      	b.n	8007cb2 <USB_EPStartXfer+0xcaa>
 8007bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8007bf6:	d817      	bhi.n	8007c28 <USB_EPStartXfer+0xc20>
 8007bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfc:	085b      	lsrs	r3, r3, #1
 8007bfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <USB_EPStartXfer+0xc10>
 8007c0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c12:	3301      	adds	r3, #1
 8007c14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	029b      	lsls	r3, r3, #10
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c24:	801a      	strh	r2, [r3, #0]
 8007c26:	e044      	b.n	8007cb2 <USB_EPStartXfer+0xcaa>
 8007c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d104      	bne.n	8007c48 <USB_EPStartXfer+0xc40>
 8007c3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c42:	3b01      	subs	r3, #1
 8007c44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007c48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	029b      	lsls	r3, r3, #10
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c5e:	801a      	strh	r2, [r3, #0]
 8007c60:	e027      	b.n	8007cb2 <USB_EPStartXfer+0xcaa>
 8007c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d11f      	bne.n	8007cb2 <USB_EPStartXfer+0xcaa>
 8007c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	461a      	mov	r2, r3
 8007c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c88:	4413      	add	r3, r2
 8007c8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	011a      	lsls	r2, r3, #4
 8007c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	895b      	ldrh	r3, [r3, #10]
 8007cbe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6959      	ldr	r1, [r3, #20]
 8007cce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007cd8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007cdc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ce0:	6800      	ldr	r0, [r0, #0]
 8007ce2:	f001 f907 	bl	8008ef4 <USB_WritePMA>
          ep->xfer_buff += len;
 8007ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695a      	ldr	r2, [r3, #20]
 8007cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf6:	441a      	add	r2, r3
 8007cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6a1a      	ldr	r2, [r3, #32]
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d90f      	bls.n	8007d40 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6a1a      	ldr	r2, [r3, #32]
 8007d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d30:	1ad2      	subs	r2, r2, r3
 8007d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	621a      	str	r2, [r3, #32]
 8007d3e:	e00e      	b.n	8007d5e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007d40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 8295 	beq.w	8008292 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	785b      	ldrb	r3, [r3, #1]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d16d      	bne.n	8007e54 <USB_EPStartXfer+0xe4c>
 8007d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d98:	4413      	add	r3, r2
 8007d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	011a      	lsls	r2, r3, #4
 8007daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dac:	4413      	add	r3, r2
 8007dae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007db2:	667b      	str	r3, [r7, #100]	; 0x64
 8007db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d112      	bne.n	8007de2 <USB_EPStartXfer+0xdda>
 8007dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dde:	801a      	strh	r2, [r3, #0]
 8007de0:	e063      	b.n	8007eaa <USB_EPStartXfer+0xea2>
 8007de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de6:	2b3e      	cmp	r3, #62	; 0x3e
 8007de8:	d817      	bhi.n	8007e1a <USB_EPStartXfer+0xe12>
 8007dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dee:	085b      	lsrs	r3, r3, #1
 8007df0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d004      	beq.n	8007e0a <USB_EPStartXfer+0xe02>
 8007e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e04:	3301      	adds	r3, #1
 8007e06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	029b      	lsls	r3, r3, #10
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e16:	801a      	strh	r2, [r3, #0]
 8007e18:	e047      	b.n	8007eaa <USB_EPStartXfer+0xea2>
 8007e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e28:	f003 031f 	and.w	r3, r3, #31
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <USB_EPStartXfer+0xe32>
 8007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e34:	3b01      	subs	r3, #1
 8007e36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	029b      	lsls	r3, r3, #10
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e50:	801a      	strh	r2, [r3, #0]
 8007e52:	e02a      	b.n	8007eaa <USB_EPStartXfer+0xea2>
 8007e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	785b      	ldrb	r3, [r3, #1]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d122      	bne.n	8007eaa <USB_EPStartXfer+0xea2>
 8007e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	673b      	str	r3, [r7, #112]	; 0x70
 8007e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e84:	4413      	add	r3, r2
 8007e86:	673b      	str	r3, [r7, #112]	; 0x70
 8007e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	011a      	lsls	r2, r3, #4
 8007e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e98:	4413      	add	r3, r2
 8007e9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	891b      	ldrh	r3, [r3, #8]
 8007eb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6959      	ldr	r1, [r3, #20]
 8007ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ed0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007ed4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ed8:	6800      	ldr	r0, [r0, #0]
 8007eda:	f001 f80b 	bl	8008ef4 <USB_WritePMA>
 8007ede:	e1d8      	b.n	8008292 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	785b      	ldrb	r3, [r3, #1]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d178      	bne.n	8007fe2 <USB_EPStartXfer+0xfda>
 8007ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f14:	4413      	add	r3, r2
 8007f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	011a      	lsls	r2, r3, #4
 8007f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d116      	bne.n	8007f6c <USB_EPStartXfer+0xf64>
 8007f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f50:	801a      	strh	r2, [r3, #0]
 8007f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f68:	801a      	strh	r2, [r3, #0]
 8007f6a:	e06b      	b.n	8008044 <USB_EPStartXfer+0x103c>
 8007f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f70:	2b3e      	cmp	r3, #62	; 0x3e
 8007f72:	d818      	bhi.n	8007fa6 <USB_EPStartXfer+0xf9e>
 8007f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d004      	beq.n	8007f94 <USB_EPStartXfer+0xf8c>
 8007f8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f8e:	3301      	adds	r3, #1
 8007f90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	029b      	lsls	r3, r3, #10
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa2:	801a      	strh	r2, [r3, #0]
 8007fa4:	e04e      	b.n	8008044 <USB_EPStartXfer+0x103c>
 8007fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007faa:	095b      	lsrs	r3, r3, #5
 8007fac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d104      	bne.n	8007fc6 <USB_EPStartXfer+0xfbe>
 8007fbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007fc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	029b      	lsls	r3, r3, #10
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fde:	801a      	strh	r2, [r3, #0]
 8007fe0:	e030      	b.n	8008044 <USB_EPStartXfer+0x103c>
 8007fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	785b      	ldrb	r3, [r3, #1]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d128      	bne.n	8008044 <USB_EPStartXfer+0x103c>
 8007ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008004:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800800e:	b29b      	uxth	r3, r3
 8008010:	461a      	mov	r2, r3
 8008012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008016:	4413      	add	r3, r2
 8008018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800801c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	011a      	lsls	r2, r3, #4
 800802a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800802e:	4413      	add	r3, r2
 8008030:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008034:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800803c:	b29a      	uxth	r2, r3
 800803e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008042:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	891b      	ldrh	r3, [r3, #8]
 8008050:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6959      	ldr	r1, [r3, #20]
 8008060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008064:	b29b      	uxth	r3, r3
 8008066:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800806a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800806e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008072:	6800      	ldr	r0, [r0, #0]
 8008074:	f000 ff3e 	bl	8008ef4 <USB_WritePMA>
          ep->xfer_buff += len;
 8008078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	695a      	ldr	r2, [r3, #20]
 8008084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008088:	441a      	add	r2, r3
 800808a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800809a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6a1a      	ldr	r2, [r3, #32]
 80080a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d90f      	bls.n	80080d2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80080b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6a1a      	ldr	r2, [r3, #32]
 80080be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c2:	1ad2      	subs	r2, r2, r3
 80080c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	621a      	str	r2, [r3, #32]
 80080d0:	e00e      	b.n	80080f0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80080d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80080e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2200      	movs	r2, #0
 80080ee:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80080f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80cc 	beq.w	8008292 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d178      	bne.n	800820a <USB_EPStartXfer+0x1202>
 8008118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008134:	b29b      	uxth	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800813c:	4413      	add	r3, r2
 800813e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	011a      	lsls	r2, r3, #4
 8008150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008154:	4413      	add	r3, r2
 8008156:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800815a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800815e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d116      	bne.n	8008194 <USB_EPStartXfer+0x118c>
 8008166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	b29b      	uxth	r3, r3
 800816e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008172:	b29a      	uxth	r2, r3
 8008174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008178:	801a      	strh	r2, [r3, #0]
 800817a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800817e:	881b      	ldrh	r3, [r3, #0]
 8008180:	b29b      	uxth	r3, r3
 8008182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800818a:	b29a      	uxth	r2, r3
 800818c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008190:	801a      	strh	r2, [r3, #0]
 8008192:	e064      	b.n	800825e <USB_EPStartXfer+0x1256>
 8008194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008198:	2b3e      	cmp	r3, #62	; 0x3e
 800819a:	d818      	bhi.n	80081ce <USB_EPStartXfer+0x11c6>
 800819c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a0:	085b      	lsrs	r3, r3, #1
 80081a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80081a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d004      	beq.n	80081bc <USB_EPStartXfer+0x11b4>
 80081b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081b6:	3301      	adds	r3, #1
 80081b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80081bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	029b      	lsls	r3, r3, #10
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	e047      	b.n	800825e <USB_EPStartXfer+0x1256>
 80081ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081d2:	095b      	lsrs	r3, r3, #5
 80081d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80081d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081dc:	f003 031f 	and.w	r3, r3, #31
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d104      	bne.n	80081ee <USB_EPStartXfer+0x11e6>
 80081e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081e8:	3b01      	subs	r3, #1
 80081ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80081ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	029b      	lsls	r3, r3, #10
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008200:	b29a      	uxth	r2, r3
 8008202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008206:	801a      	strh	r2, [r3, #0]
 8008208:	e029      	b.n	800825e <USB_EPStartXfer+0x1256>
 800820a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	785b      	ldrb	r3, [r3, #1]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d121      	bne.n	800825e <USB_EPStartXfer+0x1256>
 800821a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008228:	b29b      	uxth	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008230:	4413      	add	r3, r2
 8008232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	011a      	lsls	r2, r3, #4
 8008244:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008248:	4413      	add	r3, r2
 800824a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800824e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008256:	b29a      	uxth	r2, r3
 8008258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800825c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800825e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	895b      	ldrh	r3, [r3, #10]
 800826a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800826e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6959      	ldr	r1, [r3, #20]
 800827a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827e:	b29b      	uxth	r3, r3
 8008280:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008284:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008288:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800828c:	6800      	ldr	r0, [r0, #0]
 800828e:	f000 fe31 	bl	8008ef4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008296:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	881b      	ldrh	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082b4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80082b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082c0:	8013      	strh	r3, [r2, #0]
 80082c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80082ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082ce:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80082d2:	8812      	ldrh	r2, [r2, #0]
 80082d4:	f082 0210 	eor.w	r2, r2, #16
 80082d8:	801a      	strh	r2, [r3, #0]
 80082da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082de:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80082e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80082e6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80082ea:	8812      	ldrh	r2, [r2, #0]
 80082ec:	f082 0220 	eor.w	r2, r2, #32
 80082f0:	801a      	strh	r2, [r3, #0]
 80082f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	441a      	add	r2, r3
 800830c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008310:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800831a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800831e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008326:	b29b      	uxth	r3, r3
 8008328:	8013      	strh	r3, [r2, #0]
 800832a:	f000 bc9f 	b.w	8008c6c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800832e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	7b1b      	ldrb	r3, [r3, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	f040 80ae 	bne.w	800849c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008344:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	699a      	ldr	r2, [r3, #24]
 800834c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	429a      	cmp	r2, r3
 800835a:	d917      	bls.n	800838c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800835c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008360:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800836c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	699a      	ldr	r2, [r3, #24]
 8008378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837c:	1ad2      	subs	r2, r2, r3
 800837e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	619a      	str	r2, [r3, #24]
 800838a:	e00e      	b.n	80083aa <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800838c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800839c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2200      	movs	r2, #0
 80083a8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80083aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	461a      	mov	r2, r3
 80083ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083ce:	4413      	add	r3, r2
 80083d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	011a      	lsls	r2, r3, #4
 80083e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80083e6:	4413      	add	r3, r2
 80083e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d116      	bne.n	8008426 <USB_EPStartXfer+0x141e>
 80083f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008404:	b29a      	uxth	r2, r3
 8008406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800840a:	801a      	strh	r2, [r3, #0]
 800840c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841c:	b29a      	uxth	r2, r3
 800841e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	e3e8      	b.n	8008bf8 <USB_EPStartXfer+0x1bf0>
 8008426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842a:	2b3e      	cmp	r3, #62	; 0x3e
 800842c:	d818      	bhi.n	8008460 <USB_EPStartXfer+0x1458>
 800842e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008432:	085b      	lsrs	r3, r3, #1
 8008434:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <USB_EPStartXfer+0x1446>
 8008444:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008448:	3301      	adds	r3, #1
 800844a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800844e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008452:	b29b      	uxth	r3, r3
 8008454:	029b      	lsls	r3, r3, #10
 8008456:	b29a      	uxth	r2, r3
 8008458:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800845c:	801a      	strh	r2, [r3, #0]
 800845e:	e3cb      	b.n	8008bf8 <USB_EPStartXfer+0x1bf0>
 8008460:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008464:	095b      	lsrs	r3, r3, #5
 8008466:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800846a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800846e:	f003 031f 	and.w	r3, r3, #31
 8008472:	2b00      	cmp	r3, #0
 8008474:	d104      	bne.n	8008480 <USB_EPStartXfer+0x1478>
 8008476:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800847a:	3b01      	subs	r3, #1
 800847c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008480:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008484:	b29b      	uxth	r3, r3
 8008486:	029b      	lsls	r3, r3, #10
 8008488:	b29b      	uxth	r3, r3
 800848a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800848e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008492:	b29a      	uxth	r2, r3
 8008494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008498:	801a      	strh	r2, [r3, #0]
 800849a:	e3ad      	b.n	8008bf8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800849c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	78db      	ldrb	r3, [r3, #3]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	f040 8200 	bne.w	80088ae <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80084ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	785b      	ldrb	r3, [r3, #1]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f040 8091 	bne.w	80085e2 <USB_EPStartXfer+0x15da>
 80084c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084dc:	b29b      	uxth	r3, r3
 80084de:	461a      	mov	r2, r3
 80084e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80084e4:	4413      	add	r3, r2
 80084e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	011a      	lsls	r2, r3, #4
 80084f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80084fc:	4413      	add	r3, r2
 80084fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008502:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d116      	bne.n	8008544 <USB_EPStartXfer+0x153c>
 8008516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008522:	b29a      	uxth	r2, r3
 8008524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008528:	801a      	strh	r2, [r3, #0]
 800852a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800852e:	881b      	ldrh	r3, [r3, #0]
 8008530:	b29b      	uxth	r3, r3
 8008532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800853a:	b29a      	uxth	r2, r3
 800853c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008540:	801a      	strh	r2, [r3, #0]
 8008542:	e083      	b.n	800864c <USB_EPStartXfer+0x1644>
 8008544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b3e      	cmp	r3, #62	; 0x3e
 8008552:	d820      	bhi.n	8008596 <USB_EPStartXfer+0x158e>
 8008554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008558:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	085b      	lsrs	r3, r3, #1
 8008562:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800856a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <USB_EPStartXfer+0x157c>
 800857a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800857e:	3301      	adds	r3, #1
 8008580:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008588:	b29b      	uxth	r3, r3
 800858a:	029b      	lsls	r3, r3, #10
 800858c:	b29a      	uxth	r2, r3
 800858e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008592:	801a      	strh	r2, [r3, #0]
 8008594:	e05a      	b.n	800864c <USB_EPStartXfer+0x1644>
 8008596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800859a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	f003 031f 	and.w	r3, r3, #31
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <USB_EPStartXfer+0x15be>
 80085bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085c0:	3b01      	subs	r3, #1
 80085c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80085c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	029b      	lsls	r3, r3, #10
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d8:	b29a      	uxth	r2, r3
 80085da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085de:	801a      	strh	r2, [r3, #0]
 80085e0:	e034      	b.n	800864c <USB_EPStartXfer+0x1644>
 80085e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	785b      	ldrb	r3, [r3, #1]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d12c      	bne.n	800864c <USB_EPStartXfer+0x1644>
 80085f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008604:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800860e:	b29b      	uxth	r3, r3
 8008610:	461a      	mov	r2, r3
 8008612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008616:	4413      	add	r3, r2
 8008618:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800861c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008620:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	011a      	lsls	r2, r3, #4
 800862a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800862e:	4413      	add	r3, r2
 8008630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	b29a      	uxth	r2, r3
 8008646:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800864a:	801a      	strh	r2, [r3, #0]
 800864c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008650:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800865a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	785b      	ldrb	r3, [r3, #1]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f040 8091 	bne.w	800878e <USB_EPStartXfer+0x1786>
 800866c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008670:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800867a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008688:	b29b      	uxth	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008690:	4413      	add	r3, r2
 8008692:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800869a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	011a      	lsls	r2, r3, #4
 80086a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80086a8:	4413      	add	r3, r2
 80086aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d116      	bne.n	80086f0 <USB_EPStartXfer+0x16e8>
 80086c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ec:	801a      	strh	r2, [r3, #0]
 80086ee:	e07c      	b.n	80087ea <USB_EPStartXfer+0x17e2>
 80086f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	2b3e      	cmp	r3, #62	; 0x3e
 80086fe:	d820      	bhi.n	8008742 <USB_EPStartXfer+0x173a>
 8008700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	085b      	lsrs	r3, r3, #1
 800870e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 0301 	and.w	r3, r3, #1
 8008722:	2b00      	cmp	r3, #0
 8008724:	d004      	beq.n	8008730 <USB_EPStartXfer+0x1728>
 8008726:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800872a:	3301      	adds	r3, #1
 800872c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008730:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008734:	b29b      	uxth	r3, r3
 8008736:	029b      	lsls	r3, r3, #10
 8008738:	b29a      	uxth	r2, r3
 800873a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800873e:	801a      	strh	r2, [r3, #0]
 8008740:	e053      	b.n	80087ea <USB_EPStartXfer+0x17e2>
 8008742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	095b      	lsrs	r3, r3, #5
 8008750:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f003 031f 	and.w	r3, r3, #31
 8008764:	2b00      	cmp	r3, #0
 8008766:	d104      	bne.n	8008772 <USB_EPStartXfer+0x176a>
 8008768:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800876c:	3b01      	subs	r3, #1
 800876e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008772:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008776:	b29b      	uxth	r3, r3
 8008778:	029b      	lsls	r3, r3, #10
 800877a:	b29b      	uxth	r3, r3
 800877c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008784:	b29a      	uxth	r2, r3
 8008786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800878a:	801a      	strh	r2, [r3, #0]
 800878c:	e02d      	b.n	80087ea <USB_EPStartXfer+0x17e2>
 800878e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	785b      	ldrb	r3, [r3, #1]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d125      	bne.n	80087ea <USB_EPStartXfer+0x17e2>
 800879e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	461a      	mov	r2, r3
 80087b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80087b4:	4413      	add	r3, r2
 80087b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	011a      	lsls	r2, r3, #4
 80087c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80087cc:	4413      	add	r3, r2
 80087ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087e8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80087ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 81fe 	beq.w	8008bf8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80087fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800881c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d005      	beq.n	8008834 <USB_EPStartXfer+0x182c>
 8008828:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800882c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10d      	bne.n	8008850 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008834:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800883c:	2b00      	cmp	r3, #0
 800883e:	f040 81db 	bne.w	8008bf8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008842:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	f040 81d4 	bne.w	8008bf8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008876:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800887a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	441a      	add	r2, r3
 8008894:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800889c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	8013      	strh	r3, [r2, #0]
 80088ac:	e1a4      	b.n	8008bf8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80088ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	78db      	ldrb	r3, [r3, #3]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	f040 819a 	bne.w	8008bf4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80088c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	699a      	ldr	r2, [r3, #24]
 80088cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d917      	bls.n	800890c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80088dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80088ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	699a      	ldr	r2, [r3, #24]
 80088f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fc:	1ad2      	subs	r2, r2, r3
 80088fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	619a      	str	r2, [r3, #24]
 800890a:	e00e      	b.n	800892a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800890c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008910:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800891c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2200      	movs	r2, #0
 8008928:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800892a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d178      	bne.n	8008a2c <USB_EPStartXfer+0x1a24>
 800893a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800893e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008956:	b29b      	uxth	r3, r3
 8008958:	461a      	mov	r2, r3
 800895a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800895e:	4413      	add	r3, r2
 8008960:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	011a      	lsls	r2, r3, #4
 8008972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008976:	4413      	add	r3, r2
 8008978:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800897c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008984:	2b00      	cmp	r3, #0
 8008986:	d116      	bne.n	80089b6 <USB_EPStartXfer+0x19ae>
 8008988:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008994:	b29a      	uxth	r2, r3
 8008996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800899a:	801a      	strh	r2, [r3, #0]
 800899c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089b2:	801a      	strh	r2, [r3, #0]
 80089b4:	e06b      	b.n	8008a8e <USB_EPStartXfer+0x1a86>
 80089b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ba:	2b3e      	cmp	r3, #62	; 0x3e
 80089bc:	d818      	bhi.n	80089f0 <USB_EPStartXfer+0x19e8>
 80089be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c2:	085b      	lsrs	r3, r3, #1
 80089c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d004      	beq.n	80089de <USB_EPStartXfer+0x19d6>
 80089d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089d8:	3301      	adds	r3, #1
 80089da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	029b      	lsls	r3, r3, #10
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80089ec:	801a      	strh	r2, [r3, #0]
 80089ee:	e04e      	b.n	8008a8e <USB_EPStartXfer+0x1a86>
 80089f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f4:	095b      	lsrs	r3, r3, #5
 80089f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80089fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089fe:	f003 031f 	and.w	r3, r3, #31
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d104      	bne.n	8008a10 <USB_EPStartXfer+0x1a08>
 8008a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	029b      	lsls	r3, r3, #10
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a28:	801a      	strh	r2, [r3, #0]
 8008a2a:	e030      	b.n	8008a8e <USB_EPStartXfer+0x1a86>
 8008a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	785b      	ldrb	r3, [r3, #1]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d128      	bne.n	8008a8e <USB_EPStartXfer+0x1a86>
 8008a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a60:	4413      	add	r3, r2
 8008a62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	011a      	lsls	r2, r3, #4
 8008a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a78:	4413      	add	r3, r2
 8008a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	785b      	ldrb	r3, [r3, #1]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d178      	bne.n	8008b9e <USB_EPStartXfer+0x1b96>
 8008aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008abe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	461a      	mov	r2, r3
 8008acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	011a      	lsls	r2, r3, #4
 8008ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ae8:	4413      	add	r3, r2
 8008aea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d116      	bne.n	8008b28 <USB_EPStartXfer+0x1b20>
 8008afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b0c:	801a      	strh	r2, [r3, #0]
 8008b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b24:	801a      	strh	r2, [r3, #0]
 8008b26:	e067      	b.n	8008bf8 <USB_EPStartXfer+0x1bf0>
 8008b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b2c:	2b3e      	cmp	r3, #62	; 0x3e
 8008b2e:	d818      	bhi.n	8008b62 <USB_EPStartXfer+0x1b5a>
 8008b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b34:	085b      	lsrs	r3, r3, #1
 8008b36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d004      	beq.n	8008b50 <USB_EPStartXfer+0x1b48>
 8008b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	029b      	lsls	r3, r3, #10
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b5e:	801a      	strh	r2, [r3, #0]
 8008b60:	e04a      	b.n	8008bf8 <USB_EPStartXfer+0x1bf0>
 8008b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b66:	095b      	lsrs	r3, r3, #5
 8008b68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b70:	f003 031f 	and.w	r3, r3, #31
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <USB_EPStartXfer+0x1b7a>
 8008b78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b7c:	3b01      	subs	r3, #1
 8008b7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	029b      	lsls	r3, r3, #10
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b9a:	801a      	strh	r2, [r3, #0]
 8008b9c:	e02c      	b.n	8008bf8 <USB_EPStartXfer+0x1bf0>
 8008b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	785b      	ldrb	r3, [r3, #1]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d124      	bne.n	8008bf8 <USB_EPStartXfer+0x1bf0>
 8008bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	011a      	lsls	r2, r3, #4
 8008bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bdc:	4413      	add	r3, r2
 8008bde:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008be2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bf0:	801a      	strh	r2, [r3, #0]
 8008bf2:	e001      	b.n	8008bf8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e03a      	b.n	8008c6e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008c22:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008c2e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c36:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008c3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	441a      	add	r2, r3
 8008c54:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	785b      	ldrb	r3, [r3, #1]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d020      	beq.n	8008ccc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca0:	81bb      	strh	r3, [r7, #12]
 8008ca2:	89bb      	ldrh	r3, [r7, #12]
 8008ca4:	f083 0310 	eor.w	r3, r3, #16
 8008ca8:	81bb      	strh	r3, [r7, #12]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	441a      	add	r2, r3
 8008cb4:	89bb      	ldrh	r3, [r7, #12]
 8008cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	8013      	strh	r3, [r2, #0]
 8008cca:	e01f      	b.n	8008d0c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	881b      	ldrh	r3, [r3, #0]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce2:	81fb      	strh	r3, [r7, #14]
 8008ce4:	89fb      	ldrh	r3, [r7, #14]
 8008ce6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cea:	81fb      	strh	r3, [r7, #14]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	441a      	add	r2, r3
 8008cf6:	89fb      	ldrh	r3, [r7, #14]
 8008cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bc80      	pop	{r7}
 8008d16:	4770      	bx	lr

08008d18 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b087      	sub	sp, #28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	7b1b      	ldrb	r3, [r3, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f040 809d 	bne.w	8008e66 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d04c      	beq.n	8008dce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	823b      	strh	r3, [r7, #16]
 8008d42:	8a3b      	ldrh	r3, [r7, #16]
 8008d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01b      	beq.n	8008d84 <USB_EPClearStall+0x6c>
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d62:	81fb      	strh	r3, [r7, #14]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	441a      	add	r2, r3
 8008d6e:	89fb      	ldrh	r3, [r7, #14]
 8008d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	78db      	ldrb	r3, [r3, #3]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d06c      	beq.n	8008e66 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008da2:	81bb      	strh	r3, [r7, #12]
 8008da4:	89bb      	ldrh	r3, [r7, #12]
 8008da6:	f083 0320 	eor.w	r3, r3, #32
 8008daa:	81bb      	strh	r3, [r7, #12]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	441a      	add	r2, r3
 8008db6:	89bb      	ldrh	r3, [r7, #12]
 8008db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	8013      	strh	r3, [r2, #0]
 8008dcc:	e04b      	b.n	8008e66 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	82fb      	strh	r3, [r7, #22]
 8008ddc:	8afb      	ldrh	r3, [r7, #22]
 8008dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d01b      	beq.n	8008e1e <USB_EPClearStall+0x106>
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dfc:	82bb      	strh	r3, [r7, #20]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	441a      	add	r2, r3
 8008e08:	8abb      	ldrh	r3, [r7, #20]
 8008e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e34:	827b      	strh	r3, [r7, #18]
 8008e36:	8a7b      	ldrh	r3, [r7, #18]
 8008e38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e3c:	827b      	strh	r3, [r7, #18]
 8008e3e:	8a7b      	ldrh	r3, [r7, #18]
 8008e40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e44:	827b      	strh	r3, [r7, #18]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	441a      	add	r2, r3
 8008e50:	8a7b      	ldrh	r3, [r7, #18]
 8008e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	371c      	adds	r7, #28
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr

08008e72 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d103      	bne.n	8008e8c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2280      	movs	r2, #128	; 0x80
 8008e88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bc80      	pop	{r7}
 8008e96:	4770      	bx	lr

08008e98 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bc80      	pop	{r7}
 8008eaa:	4770      	bx	lr

08008eac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bc80      	pop	{r7}
 8008ebe:	4770      	bx	lr

08008ec0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bc80      	pop	{r7}
 8008edc:	4770      	bx	lr

08008ede <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b083      	sub	sp, #12
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr

08008ef4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b08d      	sub	sp, #52	; 0x34
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4611      	mov	r1, r2
 8008f00:	461a      	mov	r2, r3
 8008f02:	460b      	mov	r3, r1
 8008f04:	80fb      	strh	r3, [r7, #6]
 8008f06:	4613      	mov	r3, r2
 8008f08:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008f0a:	88bb      	ldrh	r3, [r7, #4]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	085b      	lsrs	r3, r3, #1
 8008f10:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008f1a:	88fb      	ldrh	r3, [r7, #6]
 8008f1c:	005a      	lsls	r2, r3, #1
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f26:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f2c:	e01e      	b.n	8008f6c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	3301      	adds	r3, #1
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f56:	3302      	adds	r3, #2
 8008f58:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	3301      	adds	r3, #1
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1dd      	bne.n	8008f2e <USB_WritePMA+0x3a>
  }
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	3734      	adds	r7, #52	; 0x34
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	4770      	bx	lr

08008f7e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b08b      	sub	sp, #44	; 0x2c
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	4611      	mov	r1, r2
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	80fb      	strh	r3, [r7, #6]
 8008f90:	4613      	mov	r3, r2
 8008f92:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008f94:	88bb      	ldrh	r3, [r7, #4]
 8008f96:	085b      	lsrs	r3, r3, #1
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008fa4:	88fb      	ldrh	r3, [r7, #6]
 8008fa6:	005a      	lsls	r2, r3, #1
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fb0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb6:	e01b      	b.n	8008ff0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	3302      	adds	r3, #2
 8008fc4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	0a1b      	lsrs	r3, r3, #8
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	3302      	adds	r3, #2
 8008fe8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	3b01      	subs	r3, #1
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e0      	bne.n	8008fb8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008ff6:	88bb      	ldrh	r3, [r7, #4]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d007      	beq.n	8009012 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	b29b      	uxth	r3, r3
 8009008:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	b2da      	uxtb	r2, r3
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	701a      	strb	r2, [r3, #0]
  }
}
 8009012:	bf00      	nop
 8009014:	372c      	adds	r7, #44	; 0x2c
 8009016:	46bd      	mov	sp, r7
 8009018:	bc80      	pop	{r7}
 800901a:	4770      	bx	lr

0800901c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	460b      	mov	r3, r1
 8009026:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	7c1b      	ldrb	r3, [r3, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d115      	bne.n	8009060 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009038:	2202      	movs	r2, #2
 800903a:	2181      	movs	r1, #129	; 0x81
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 fea4 	bl	800ad8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800904c:	2202      	movs	r2, #2
 800904e:	2101      	movs	r1, #1
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 fe9a 	bl	800ad8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800905e:	e012      	b.n	8009086 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009060:	2340      	movs	r3, #64	; 0x40
 8009062:	2202      	movs	r2, #2
 8009064:	2181      	movs	r1, #129	; 0x81
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 fe8f 	bl	800ad8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009072:	2340      	movs	r3, #64	; 0x40
 8009074:	2202      	movs	r2, #2
 8009076:	2101      	movs	r1, #1
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 fe86 	bl	800ad8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009086:	2308      	movs	r3, #8
 8009088:	2203      	movs	r2, #3
 800908a:	2182      	movs	r1, #130	; 0x82
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 fe7c 	bl	800ad8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009098:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800909c:	f001 ff9c 	bl	800afd8 <USBD_static_malloc>
 80090a0:	4602      	mov	r2, r0
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d102      	bne.n	80090b8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80090b2:	2301      	movs	r3, #1
 80090b4:	73fb      	strb	r3, [r7, #15]
 80090b6:	e026      	b.n	8009106 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090be:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	7c1b      	ldrb	r3, [r3, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d109      	bne.n	80090f6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090ec:	2101      	movs	r1, #1
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f001 ff3c 	bl	800af6c <USBD_LL_PrepareReceive>
 80090f4:	e007      	b.n	8009106 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090fc:	2340      	movs	r3, #64	; 0x40
 80090fe:	2101      	movs	r1, #1
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 ff33 	bl	800af6c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009106:	7bfb      	ldrb	r3, [r7, #15]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009120:	2181      	movs	r1, #129	; 0x81
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 fe57 	bl	800add6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800912e:	2101      	movs	r1, #1
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fe50 	bl	800add6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800913e:	2182      	movs	r1, #130	; 0x82
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 fe48 	bl	800add6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00e      	beq.n	8009174 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009166:	4618      	mov	r0, r3
 8009168:	f001 ff42 	bl	800aff0 <USBD_static_free>
    pdev->pClassData = NULL;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009194:	2300      	movs	r3, #0
 8009196:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d039      	beq.n	800921c <USBD_CDC_Setup+0x9e>
 80091a8:	2b20      	cmp	r3, #32
 80091aa:	d17f      	bne.n	80092ac <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	88db      	ldrh	r3, [r3, #6]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d029      	beq.n	8009208 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	b25b      	sxtb	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	da11      	bge.n	80091e2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80091ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	88d2      	ldrh	r2, [r2, #6]
 80091d0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80091d2:	6939      	ldr	r1, [r7, #16]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	88db      	ldrh	r3, [r3, #6]
 80091d8:	461a      	mov	r2, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 fa09 	bl	800a5f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80091e0:	e06b      	b.n	80092ba <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	785a      	ldrb	r2, [r3, #1]
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	88db      	ldrh	r3, [r3, #6]
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80091f8:	6939      	ldr	r1, [r7, #16]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	88db      	ldrh	r3, [r3, #6]
 80091fe:	461a      	mov	r2, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f001 fa24 	bl	800a64e <USBD_CtlPrepareRx>
      break;
 8009206:	e058      	b.n	80092ba <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	7850      	ldrb	r0, [r2, #1]
 8009214:	2200      	movs	r2, #0
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	4798      	blx	r3
      break;
 800921a:	e04e      	b.n	80092ba <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	785b      	ldrb	r3, [r3, #1]
 8009220:	2b0b      	cmp	r3, #11
 8009222:	d02e      	beq.n	8009282 <USBD_CDC_Setup+0x104>
 8009224:	2b0b      	cmp	r3, #11
 8009226:	dc38      	bgt.n	800929a <USBD_CDC_Setup+0x11c>
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <USBD_CDC_Setup+0xb4>
 800922c:	2b0a      	cmp	r3, #10
 800922e:	d014      	beq.n	800925a <USBD_CDC_Setup+0xdc>
 8009230:	e033      	b.n	800929a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009238:	2b03      	cmp	r3, #3
 800923a:	d107      	bne.n	800924c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800923c:	f107 030c 	add.w	r3, r7, #12
 8009240:	2202      	movs	r2, #2
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 f9d4 	bl	800a5f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800924a:	e02e      	b.n	80092aa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 f965 	bl	800a51e <USBD_CtlError>
            ret = USBD_FAIL;
 8009254:	2302      	movs	r3, #2
 8009256:	75fb      	strb	r3, [r7, #23]
          break;
 8009258:	e027      	b.n	80092aa <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009260:	2b03      	cmp	r3, #3
 8009262:	d107      	bne.n	8009274 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009264:	f107 030f 	add.w	r3, r7, #15
 8009268:	2201      	movs	r2, #1
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 f9c0 	bl	800a5f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009272:	e01a      	b.n	80092aa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 f951 	bl	800a51e <USBD_CtlError>
            ret = USBD_FAIL;
 800927c:	2302      	movs	r3, #2
 800927e:	75fb      	strb	r3, [r7, #23]
          break;
 8009280:	e013      	b.n	80092aa <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009288:	2b03      	cmp	r3, #3
 800928a:	d00d      	beq.n	80092a8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f001 f945 	bl	800a51e <USBD_CtlError>
            ret = USBD_FAIL;
 8009294:	2302      	movs	r3, #2
 8009296:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009298:	e006      	b.n	80092a8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f001 f93e 	bl	800a51e <USBD_CtlError>
          ret = USBD_FAIL;
 80092a2:	2302      	movs	r3, #2
 80092a4:	75fb      	strb	r3, [r7, #23]
          break;
 80092a6:	e000      	b.n	80092aa <USBD_CDC_Setup+0x12c>
          break;
 80092a8:	bf00      	nop
      }
      break;
 80092aa:	e006      	b.n	80092ba <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f001 f935 	bl	800a51e <USBD_CtlError>
      ret = USBD_FAIL;
 80092b4:	2302      	movs	r3, #2
 80092b6:	75fb      	strb	r3, [r7, #23]
      break;
 80092b8:	bf00      	nop
  }

  return ret;
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092de:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d03a      	beq.n	8009360 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	440b      	add	r3, r1
 80092f8:	331c      	adds	r3, #28
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d029      	beq.n	8009354 <USBD_CDC_DataIn+0x90>
 8009300:	78fa      	ldrb	r2, [r7, #3]
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	331c      	adds	r3, #28
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	78f9      	ldrb	r1, [r7, #3]
 8009314:	68b8      	ldr	r0, [r7, #8]
 8009316:	460b      	mov	r3, r1
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	440b      	add	r3, r1
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	4403      	add	r3, r0
 8009320:	3338      	adds	r3, #56	; 0x38
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	fbb2 f1f3 	udiv	r1, r2, r3
 8009328:	fb01 f303 	mul.w	r3, r1, r3
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	d110      	bne.n	8009354 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009332:	78fa      	ldrb	r2, [r7, #3]
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	440b      	add	r3, r1
 8009340:	331c      	adds	r3, #28
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009346:	78f9      	ldrb	r1, [r7, #3]
 8009348:	2300      	movs	r3, #0
 800934a:	2200      	movs	r2, #0
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 fdea 	bl	800af26 <USBD_LL_Transmit>
 8009352:	e003      	b.n	800935c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	e000      	b.n	8009362 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009360:	2302      	movs	r3, #2
  }
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	460b      	mov	r3, r1
 8009374:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800937c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 fe15 	bl	800afb2 <USBD_LL_GetRxDataSize>
 8009388:	4602      	mov	r2, r0
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00d      	beq.n	80093b6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80093ae:	4611      	mov	r1, r2
 80093b0:	4798      	blx	r3

    return USBD_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e000      	b.n	80093b8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80093b6:	2302      	movs	r3, #2
  }
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d015      	beq.n	8009406 <USBD_CDC_EP0_RxReady+0x46>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80093e0:	2bff      	cmp	r3, #255	; 0xff
 80093e2:	d010      	beq.n	8009406 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80093f2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093fa:	b292      	uxth	r2, r2
 80093fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	22ff      	movs	r2, #255	; 0xff
 8009402:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2243      	movs	r2, #67	; 0x43
 800941c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800941e:	4b03      	ldr	r3, [pc, #12]	; (800942c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	bc80      	pop	{r7}
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	200002c4 	.word	0x200002c4

08009430 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2243      	movs	r2, #67	; 0x43
 800943c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800943e:	4b03      	ldr	r3, [pc, #12]	; (800944c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009440:	4618      	mov	r0, r3
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	bc80      	pop	{r7}
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	20000280 	.word	0x20000280

08009450 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2243      	movs	r2, #67	; 0x43
 800945c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800945e:	4b03      	ldr	r3, [pc, #12]	; (800946c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	bc80      	pop	{r7}
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	20000308 	.word	0x20000308

08009470 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	220a      	movs	r2, #10
 800947c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800947e:	4b03      	ldr	r3, [pc, #12]	; (800948c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	bc80      	pop	{r7}
 8009488:	4770      	bx	lr
 800948a:	bf00      	nop
 800948c:	2000023c 	.word	0x2000023c

08009490 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800949a:	2302      	movs	r3, #2
 800949c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d005      	beq.n	80094b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bc80      	pop	{r7}
 80094ba:	4770      	bx	lr

080094bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80094da:	88fa      	ldrh	r2, [r7, #6]
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	371c      	adds	r7, #28
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bc80      	pop	{r7}
 80094ec:	4770      	bx	lr

080094ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b085      	sub	sp, #20
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3714      	adds	r7, #20
 800950e:	46bd      	mov	sp, r7
 8009510:	bc80      	pop	{r7}
 8009512:	4770      	bx	lr

08009514 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009522:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01c      	beq.n	8009568 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009534:	2b00      	cmp	r3, #0
 8009536:	d115      	bne.n	8009564 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2201      	movs	r2, #1
 800953c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009556:	b29b      	uxth	r3, r3
 8009558:	2181      	movs	r1, #129	; 0x81
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 fce3 	bl	800af26 <USBD_LL_Transmit>

      return USBD_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	e002      	b.n	800956a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009564:	2301      	movs	r3, #1
 8009566:	e000      	b.n	800956a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009568:	2302      	movs	r3, #2
  }
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009580:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009588:	2b00      	cmp	r3, #0
 800958a:	d017      	beq.n	80095bc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	7c1b      	ldrb	r3, [r3, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800959a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800959e:	2101      	movs	r1, #1
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 fce3 	bl	800af6c <USBD_LL_PrepareReceive>
 80095a6:	e007      	b.n	80095b8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80095ae:	2340      	movs	r3, #64	; 0x40
 80095b0:	2101      	movs	r1, #1
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 fcda 	bl	800af6c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	e000      	b.n	80095be <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80095bc:	2302      	movs	r3, #2
  }
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	4613      	mov	r3, r2
 80095d2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80095da:	2302      	movs	r3, #2
 80095dc:	e01a      	b.n	8009614 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	79fa      	ldrb	r2, [r7, #7]
 800960a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f001 fb47 	bl	800aca0 <USBD_LL_Init>

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d006      	beq.n	800963e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	73fb      	strb	r3, [r7, #15]
 800963c:	e001      	b.n	8009642 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800963e:	2302      	movs	r3, #2
 8009640:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	bc80      	pop	{r7}
 800964c:	4770      	bx	lr

0800964e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 fb7c 	bl	800ad54 <USBD_LL_Start>

  return USBD_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	bc80      	pop	{r7}
 8009678:	4770      	bx	lr

0800967a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	460b      	mov	r3, r1
 8009684:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009686:	2302      	movs	r3, #2
 8009688:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00c      	beq.n	80096ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	78fa      	ldrb	r2, [r7, #3]
 800969e:	4611      	mov	r1, r2
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	4798      	blx	r3
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	4611      	mov	r1, r2
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3

  return USBD_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 fed8 	bl	800a4a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009704:	461a      	mov	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009712:	f003 031f 	and.w	r3, r3, #31
 8009716:	2b02      	cmp	r3, #2
 8009718:	d016      	beq.n	8009748 <USBD_LL_SetupStage+0x6a>
 800971a:	2b02      	cmp	r3, #2
 800971c:	d81c      	bhi.n	8009758 <USBD_LL_SetupStage+0x7a>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <USBD_LL_SetupStage+0x4a>
 8009722:	2b01      	cmp	r3, #1
 8009724:	d008      	beq.n	8009738 <USBD_LL_SetupStage+0x5a>
 8009726:	e017      	b.n	8009758 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f9cb 	bl	8009acc <USBD_StdDevReq>
      break;
 8009736:	e01a      	b.n	800976e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fa2d 	bl	8009ba0 <USBD_StdItfReq>
      break;
 8009746:	e012      	b.n	800976e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fa6d 	bl	8009c30 <USBD_StdEPReq>
      break;
 8009756:	e00a      	b.n	800976e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800975e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009762:	b2db      	uxtb	r3, r3
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f001 fb54 	bl	800ae14 <USBD_LL_StallEP>
      break;
 800976c:	bf00      	nop
  }

  return USBD_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	460b      	mov	r3, r1
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009786:	7afb      	ldrb	r3, [r7, #11]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d14b      	bne.n	8009824 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009792:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800979a:	2b03      	cmp	r3, #3
 800979c:	d134      	bne.n	8009808 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d919      	bls.n	80097de <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	1ad2      	subs	r2, r2, r3
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	68da      	ldr	r2, [r3, #12]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d203      	bcs.n	80097cc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	e002      	b.n	80097d2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	461a      	mov	r2, r3
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 ff57 	bl	800a68a <USBD_CtlContinueRx>
 80097dc:	e038      	b.n	8009850 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d105      	bne.n	8009800 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 ff54 	bl	800a6ae <USBD_CtlSendStatus>
 8009806:	e023      	b.n	8009850 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800980e:	2b05      	cmp	r3, #5
 8009810:	d11e      	bne.n	8009850 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800981a:	2100      	movs	r1, #0
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	f001 faf9 	bl	800ae14 <USBD_LL_StallEP>
 8009822:	e015      	b.n	8009850 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00d      	beq.n	800984c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009836:	2b03      	cmp	r3, #3
 8009838:	d108      	bne.n	800984c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	7afa      	ldrb	r2, [r7, #11]
 8009844:	4611      	mov	r1, r2
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	4798      	blx	r3
 800984a:	e001      	b.n	8009850 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800984c:	2302      	movs	r3, #2
 800984e:	e000      	b.n	8009852 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b086      	sub	sp, #24
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	460b      	mov	r3, r1
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009868:	7afb      	ldrb	r3, [r7, #11]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d17f      	bne.n	800996e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3314      	adds	r3, #20
 8009872:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800987a:	2b02      	cmp	r3, #2
 800987c:	d15c      	bne.n	8009938 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	429a      	cmp	r2, r3
 8009888:	d915      	bls.n	80098b6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	68da      	ldr	r2, [r3, #12]
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	1ad2      	subs	r2, r2, r3
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	b29b      	uxth	r3, r3
 800989e:	461a      	mov	r2, r3
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 fec1 	bl	800a62a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098a8:	2300      	movs	r3, #0
 80098aa:	2200      	movs	r2, #0
 80098ac:	2100      	movs	r1, #0
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f001 fb5c 	bl	800af6c <USBD_LL_PrepareReceive>
 80098b4:	e04e      	b.n	8009954 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	6912      	ldr	r2, [r2, #16]
 80098be:	fbb3 f1f2 	udiv	r1, r3, r2
 80098c2:	fb01 f202 	mul.w	r2, r1, r2
 80098c6:	1a9b      	subs	r3, r3, r2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d11c      	bne.n	8009906 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	689a      	ldr	r2, [r3, #8]
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d316      	bcc.n	8009906 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d20f      	bcs.n	8009906 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098e6:	2200      	movs	r2, #0
 80098e8:	2100      	movs	r1, #0
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fe9d 	bl	800a62a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098f8:	2300      	movs	r3, #0
 80098fa:	2200      	movs	r2, #0
 80098fc:	2100      	movs	r1, #0
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f001 fb34 	bl	800af6c <USBD_LL_PrepareReceive>
 8009904:	e026      	b.n	8009954 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009918:	2b03      	cmp	r3, #3
 800991a:	d105      	bne.n	8009928 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009928:	2180      	movs	r1, #128	; 0x80
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f001 fa72 	bl	800ae14 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 fecf 	bl	800a6d4 <USBD_CtlReceiveStatus>
 8009936:	e00d      	b.n	8009954 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800993e:	2b04      	cmp	r3, #4
 8009940:	d004      	beq.n	800994c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009948:	2b00      	cmp	r3, #0
 800994a:	d103      	bne.n	8009954 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800994c:	2180      	movs	r1, #128	; 0x80
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f001 fa60 	bl	800ae14 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800995a:	2b01      	cmp	r3, #1
 800995c:	d11d      	bne.n	800999a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7ff fe81 	bl	8009666 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800996c:	e015      	b.n	800999a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009974:	695b      	ldr	r3, [r3, #20]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00d      	beq.n	8009996 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009980:	2b03      	cmp	r3, #3
 8009982:	d108      	bne.n	8009996 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	7afa      	ldrb	r2, [r7, #11]
 800998e:	4611      	mov	r1, r2
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	4798      	blx	r3
 8009994:	e001      	b.n	800999a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009996:	2302      	movs	r3, #2
 8009998:	e000      	b.n	800999c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099ac:	2340      	movs	r3, #64	; 0x40
 80099ae:	2200      	movs	r2, #0
 80099b0:	2100      	movs	r1, #0
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f001 f9e9 	bl	800ad8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2240      	movs	r2, #64	; 0x40
 80099c4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099c8:	2340      	movs	r3, #64	; 0x40
 80099ca:	2200      	movs	r2, #0
 80099cc:	2180      	movs	r1, #128	; 0x80
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 f9db 	bl	800ad8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2240      	movs	r2, #64	; 0x40
 80099de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d009      	beq.n	8009a1c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	6852      	ldr	r2, [r2, #4]
 8009a14:	b2d2      	uxtb	r2, r2
 8009a16:	4611      	mov	r1, r2
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	4798      	blx	r3
  }

  return USBD_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b083      	sub	sp, #12
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	460b      	mov	r3, r1
 8009a30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr

08009a44 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2204      	movs	r2, #4
 8009a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bc80      	pop	{r7}
 8009a6a:	4770      	bx	lr

08009a6c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d105      	bne.n	8009a8a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bc80      	pop	{r7}
 8009a94:	4770      	bx	lr

08009a96 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d10b      	bne.n	8009ac0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d005      	beq.n	8009ac0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
	...

08009acc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ae2:	2b40      	cmp	r3, #64	; 0x40
 8009ae4:	d005      	beq.n	8009af2 <USBD_StdDevReq+0x26>
 8009ae6:	2b40      	cmp	r3, #64	; 0x40
 8009ae8:	d84f      	bhi.n	8009b8a <USBD_StdDevReq+0xbe>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d009      	beq.n	8009b02 <USBD_StdDevReq+0x36>
 8009aee:	2b20      	cmp	r3, #32
 8009af0:	d14b      	bne.n	8009b8a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3
      break;
 8009b00:	e048      	b.n	8009b94 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	2b09      	cmp	r3, #9
 8009b08:	d839      	bhi.n	8009b7e <USBD_StdDevReq+0xb2>
 8009b0a:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <USBD_StdDevReq+0x44>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009b61 	.word	0x08009b61
 8009b14:	08009b75 	.word	0x08009b75
 8009b18:	08009b7f 	.word	0x08009b7f
 8009b1c:	08009b6b 	.word	0x08009b6b
 8009b20:	08009b7f 	.word	0x08009b7f
 8009b24:	08009b43 	.word	0x08009b43
 8009b28:	08009b39 	.word	0x08009b39
 8009b2c:	08009b7f 	.word	0x08009b7f
 8009b30:	08009b57 	.word	0x08009b57
 8009b34:	08009b4d 	.word	0x08009b4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f9dc 	bl	8009ef8 <USBD_GetDescriptor>
          break;
 8009b40:	e022      	b.n	8009b88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fb3f 	bl	800a1c8 <USBD_SetAddress>
          break;
 8009b4a:	e01d      	b.n	8009b88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fb7e 	bl	800a250 <USBD_SetConfig>
          break;
 8009b54:	e018      	b.n	8009b88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fc07 	bl	800a36c <USBD_GetConfig>
          break;
 8009b5e:	e013      	b.n	8009b88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fc37 	bl	800a3d6 <USBD_GetStatus>
          break;
 8009b68:	e00e      	b.n	8009b88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fc65 	bl	800a43c <USBD_SetFeature>
          break;
 8009b72:	e009      	b.n	8009b88 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fc74 	bl	800a464 <USBD_ClrFeature>
          break;
 8009b7c:	e004      	b.n	8009b88 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fccc 	bl	800a51e <USBD_CtlError>
          break;
 8009b86:	bf00      	nop
      }
      break;
 8009b88:	e004      	b.n	8009b94 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fcc6 	bl	800a51e <USBD_CtlError>
      break;
 8009b92:	bf00      	nop
  }

  return ret;
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop

08009ba0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bb6:	2b40      	cmp	r3, #64	; 0x40
 8009bb8:	d005      	beq.n	8009bc6 <USBD_StdItfReq+0x26>
 8009bba:	2b40      	cmp	r3, #64	; 0x40
 8009bbc:	d82e      	bhi.n	8009c1c <USBD_StdItfReq+0x7c>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <USBD_StdItfReq+0x26>
 8009bc2:	2b20      	cmp	r3, #32
 8009bc4:	d12a      	bne.n	8009c1c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d81d      	bhi.n	8009c0e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	889b      	ldrh	r3, [r3, #4]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d813      	bhi.n	8009c04 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	4798      	blx	r3
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	88db      	ldrh	r3, [r3, #6]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d110      	bne.n	8009c18 <USBD_StdItfReq+0x78>
 8009bf6:	7bfb      	ldrb	r3, [r7, #15]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10d      	bne.n	8009c18 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fd56 	bl	800a6ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c02:	e009      	b.n	8009c18 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fc89 	bl	800a51e <USBD_CtlError>
          break;
 8009c0c:	e004      	b.n	8009c18 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fc84 	bl	800a51e <USBD_CtlError>
          break;
 8009c16:	e000      	b.n	8009c1a <USBD_StdItfReq+0x7a>
          break;
 8009c18:	bf00      	nop
      }
      break;
 8009c1a:	e004      	b.n	8009c26 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 fc7d 	bl	800a51e <USBD_CtlError>
      break;
 8009c24:	bf00      	nop
  }

  return USBD_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	889b      	ldrh	r3, [r3, #4]
 8009c42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c4c:	2b40      	cmp	r3, #64	; 0x40
 8009c4e:	d007      	beq.n	8009c60 <USBD_StdEPReq+0x30>
 8009c50:	2b40      	cmp	r3, #64	; 0x40
 8009c52:	f200 8146 	bhi.w	8009ee2 <USBD_StdEPReq+0x2b2>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <USBD_StdEPReq+0x40>
 8009c5a:	2b20      	cmp	r3, #32
 8009c5c:	f040 8141 	bne.w	8009ee2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	4798      	blx	r3
      break;
 8009c6e:	e13d      	b.n	8009eec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c78:	2b20      	cmp	r3, #32
 8009c7a:	d10a      	bne.n	8009c92 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	4798      	blx	r3
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009c8e:	7bfb      	ldrb	r3, [r7, #15]
 8009c90:	e12d      	b.n	8009eee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	785b      	ldrb	r3, [r3, #1]
 8009c96:	2b03      	cmp	r3, #3
 8009c98:	d007      	beq.n	8009caa <USBD_StdEPReq+0x7a>
 8009c9a:	2b03      	cmp	r3, #3
 8009c9c:	f300 811b 	bgt.w	8009ed6 <USBD_StdEPReq+0x2a6>
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d072      	beq.n	8009d8a <USBD_StdEPReq+0x15a>
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d03a      	beq.n	8009d1e <USBD_StdEPReq+0xee>
 8009ca8:	e115      	b.n	8009ed6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d002      	beq.n	8009cba <USBD_StdEPReq+0x8a>
 8009cb4:	2b03      	cmp	r3, #3
 8009cb6:	d015      	beq.n	8009ce4 <USBD_StdEPReq+0xb4>
 8009cb8:	e02b      	b.n	8009d12 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cba:	7bbb      	ldrb	r3, [r7, #14]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00c      	beq.n	8009cda <USBD_StdEPReq+0xaa>
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	2b80      	cmp	r3, #128	; 0x80
 8009cc4:	d009      	beq.n	8009cda <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f001 f8a2 	bl	800ae14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009cd0:	2180      	movs	r1, #128	; 0x80
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 f89e 	bl	800ae14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cd8:	e020      	b.n	8009d1c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fc1e 	bl	800a51e <USBD_CtlError>
              break;
 8009ce2:	e01b      	b.n	8009d1c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	885b      	ldrh	r3, [r3, #2]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10e      	bne.n	8009d0a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00b      	beq.n	8009d0a <USBD_StdEPReq+0xda>
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	2b80      	cmp	r3, #128	; 0x80
 8009cf6:	d008      	beq.n	8009d0a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	88db      	ldrh	r3, [r3, #6]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 f885 	bl	800ae14 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fccf 	bl	800a6ae <USBD_CtlSendStatus>

              break;
 8009d10:	e004      	b.n	8009d1c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fc02 	bl	800a51e <USBD_CtlError>
              break;
 8009d1a:	bf00      	nop
          }
          break;
 8009d1c:	e0e0      	b.n	8009ee0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d002      	beq.n	8009d2e <USBD_StdEPReq+0xfe>
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d015      	beq.n	8009d58 <USBD_StdEPReq+0x128>
 8009d2c:	e026      	b.n	8009d7c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00c      	beq.n	8009d4e <USBD_StdEPReq+0x11e>
 8009d34:	7bbb      	ldrb	r3, [r7, #14]
 8009d36:	2b80      	cmp	r3, #128	; 0x80
 8009d38:	d009      	beq.n	8009d4e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009d3a:	7bbb      	ldrb	r3, [r7, #14]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 f868 	bl	800ae14 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009d44:	2180      	movs	r1, #128	; 0x80
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f001 f864 	bl	800ae14 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d4c:	e01c      	b.n	8009d88 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009d4e:	6839      	ldr	r1, [r7, #0]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fbe4 	bl	800a51e <USBD_CtlError>
              break;
 8009d56:	e017      	b.n	8009d88 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	885b      	ldrh	r3, [r3, #2]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d112      	bne.n	8009d86 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d60:	7bbb      	ldrb	r3, [r7, #14]
 8009d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d004      	beq.n	8009d74 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f001 f86f 	bl	800ae52 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fc9a 	bl	800a6ae <USBD_CtlSendStatus>
              }
              break;
 8009d7a:	e004      	b.n	8009d86 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fbcd 	bl	800a51e <USBD_CtlError>
              break;
 8009d84:	e000      	b.n	8009d88 <USBD_StdEPReq+0x158>
              break;
 8009d86:	bf00      	nop
          }
          break;
 8009d88:	e0aa      	b.n	8009ee0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d002      	beq.n	8009d9a <USBD_StdEPReq+0x16a>
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d032      	beq.n	8009dfe <USBD_StdEPReq+0x1ce>
 8009d98:	e097      	b.n	8009eca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d007      	beq.n	8009db0 <USBD_StdEPReq+0x180>
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	2b80      	cmp	r3, #128	; 0x80
 8009da4:	d004      	beq.n	8009db0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fbb8 	bl	800a51e <USBD_CtlError>
                break;
 8009dae:	e091      	b.n	8009ed4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	da0b      	bge.n	8009dd0 <USBD_StdEPReq+0x1a0>
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4413      	add	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	3310      	adds	r3, #16
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	4413      	add	r3, r2
 8009dcc:	3304      	adds	r3, #4
 8009dce:	e00b      	b.n	8009de8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	3304      	adds	r3, #4
 8009de8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2202      	movs	r2, #2
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fbfb 	bl	800a5f2 <USBD_CtlSendData>
              break;
 8009dfc:	e06a      	b.n	8009ed4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009dfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	da11      	bge.n	8009e2a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	f003 020f 	and.w	r2, r3, #15
 8009e0c:	6879      	ldr	r1, [r7, #4]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	440b      	add	r3, r1
 8009e18:	3318      	adds	r3, #24
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d117      	bne.n	8009e50 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fb7b 	bl	800a51e <USBD_CtlError>
                  break;
 8009e28:	e054      	b.n	8009ed4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	f003 020f 	and.w	r2, r3, #15
 8009e30:	6879      	ldr	r1, [r7, #4]
 8009e32:	4613      	mov	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4413      	add	r3, r2
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	440b      	add	r3, r1
 8009e3c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d104      	bne.n	8009e50 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fb68 	bl	800a51e <USBD_CtlError>
                  break;
 8009e4e:	e041      	b.n	8009ed4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	da0b      	bge.n	8009e70 <USBD_StdEPReq+0x240>
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e5e:	4613      	mov	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	3310      	adds	r3, #16
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	e00b      	b.n	8009e88 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e76:	4613      	mov	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	4413      	add	r3, r2
 8009e86:	3304      	adds	r3, #4
 8009e88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <USBD_StdEPReq+0x266>
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	2b80      	cmp	r3, #128	; 0x80
 8009e94:	d103      	bne.n	8009e9e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	e00e      	b.n	8009ebc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fff4 	bl	800ae90 <USBD_LL_IsStallEP>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	e002      	b.n	8009ebc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fb95 	bl	800a5f2 <USBD_CtlSendData>
              break;
 8009ec8:	e004      	b.n	8009ed4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fb26 	bl	800a51e <USBD_CtlError>
              break;
 8009ed2:	bf00      	nop
          }
          break;
 8009ed4:	e004      	b.n	8009ee0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fb20 	bl	800a51e <USBD_CtlError>
          break;
 8009ede:	bf00      	nop
      }
      break;
 8009ee0:	e004      	b.n	8009eec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fb1a 	bl	800a51e <USBD_CtlError>
      break;
 8009eea:	bf00      	nop
  }

  return ret;
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f06:	2300      	movs	r3, #0
 8009f08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	885b      	ldrh	r3, [r3, #2]
 8009f12:	0a1b      	lsrs	r3, r3, #8
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	3b01      	subs	r3, #1
 8009f18:	2b06      	cmp	r3, #6
 8009f1a:	f200 8128 	bhi.w	800a16e <USBD_GetDescriptor+0x276>
 8009f1e:	a201      	add	r2, pc, #4	; (adr r2, 8009f24 <USBD_GetDescriptor+0x2c>)
 8009f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f24:	08009f41 	.word	0x08009f41
 8009f28:	08009f59 	.word	0x08009f59
 8009f2c:	08009f99 	.word	0x08009f99
 8009f30:	0800a16f 	.word	0x0800a16f
 8009f34:	0800a16f 	.word	0x0800a16f
 8009f38:	0800a10f 	.word	0x0800a10f
 8009f3c:	0800a13b 	.word	0x0800a13b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	7c12      	ldrb	r2, [r2, #16]
 8009f4c:	f107 0108 	add.w	r1, r7, #8
 8009f50:	4610      	mov	r0, r2
 8009f52:	4798      	blx	r3
 8009f54:	60f8      	str	r0, [r7, #12]
      break;
 8009f56:	e112      	b.n	800a17e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7c1b      	ldrb	r3, [r3, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10d      	bne.n	8009f7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f68:	f107 0208 	add.w	r2, r7, #8
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
 8009f70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3301      	adds	r3, #1
 8009f76:	2202      	movs	r2, #2
 8009f78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f7a:	e100      	b.n	800a17e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	f107 0208 	add.w	r2, r7, #8
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3301      	adds	r3, #1
 8009f92:	2202      	movs	r2, #2
 8009f94:	701a      	strb	r2, [r3, #0]
      break;
 8009f96:	e0f2      	b.n	800a17e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	885b      	ldrh	r3, [r3, #2]
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	2b05      	cmp	r3, #5
 8009fa0:	f200 80ac 	bhi.w	800a0fc <USBD_GetDescriptor+0x204>
 8009fa4:	a201      	add	r2, pc, #4	; (adr r2, 8009fac <USBD_GetDescriptor+0xb4>)
 8009fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009faa:	bf00      	nop
 8009fac:	08009fc5 	.word	0x08009fc5
 8009fb0:	08009ff9 	.word	0x08009ff9
 8009fb4:	0800a02d 	.word	0x0800a02d
 8009fb8:	0800a061 	.word	0x0800a061
 8009fbc:	0800a095 	.word	0x0800a095
 8009fc0:	0800a0c9 	.word	0x0800a0c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00b      	beq.n	8009fe8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	7c12      	ldrb	r2, [r2, #16]
 8009fdc:	f107 0108 	add.w	r1, r7, #8
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	4798      	blx	r3
 8009fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fe6:	e091      	b.n	800a10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fe8:	6839      	ldr	r1, [r7, #0]
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fa97 	bl	800a51e <USBD_CtlError>
            err++;
 8009ff0:	7afb      	ldrb	r3, [r7, #11]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ff6:	e089      	b.n	800a10c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00b      	beq.n	800a01c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	7c12      	ldrb	r2, [r2, #16]
 800a010:	f107 0108 	add.w	r1, r7, #8
 800a014:	4610      	mov	r0, r2
 800a016:	4798      	blx	r3
 800a018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a01a:	e077      	b.n	800a10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fa7d 	bl	800a51e <USBD_CtlError>
            err++;
 800a024:	7afb      	ldrb	r3, [r7, #11]
 800a026:	3301      	adds	r3, #1
 800a028:	72fb      	strb	r3, [r7, #11]
          break;
 800a02a:	e06f      	b.n	800a10c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00b      	beq.n	800a050 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	7c12      	ldrb	r2, [r2, #16]
 800a044:	f107 0108 	add.w	r1, r7, #8
 800a048:	4610      	mov	r0, r2
 800a04a:	4798      	blx	r3
 800a04c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a04e:	e05d      	b.n	800a10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fa63 	bl	800a51e <USBD_CtlError>
            err++;
 800a058:	7afb      	ldrb	r3, [r7, #11]
 800a05a:	3301      	adds	r3, #1
 800a05c:	72fb      	strb	r3, [r7, #11]
          break;
 800a05e:	e055      	b.n	800a10c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00b      	beq.n	800a084 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	7c12      	ldrb	r2, [r2, #16]
 800a078:	f107 0108 	add.w	r1, r7, #8
 800a07c:	4610      	mov	r0, r2
 800a07e:	4798      	blx	r3
 800a080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a082:	e043      	b.n	800a10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fa49 	bl	800a51e <USBD_CtlError>
            err++;
 800a08c:	7afb      	ldrb	r3, [r7, #11]
 800a08e:	3301      	adds	r3, #1
 800a090:	72fb      	strb	r3, [r7, #11]
          break;
 800a092:	e03b      	b.n	800a10c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a09a:	695b      	ldr	r3, [r3, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00b      	beq.n	800a0b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	7c12      	ldrb	r2, [r2, #16]
 800a0ac:	f107 0108 	add.w	r1, r7, #8
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	4798      	blx	r3
 800a0b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0b6:	e029      	b.n	800a10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fa2f 	bl	800a51e <USBD_CtlError>
            err++;
 800a0c0:	7afb      	ldrb	r3, [r7, #11]
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0c6:	e021      	b.n	800a10c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00b      	beq.n	800a0ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	7c12      	ldrb	r2, [r2, #16]
 800a0e0:	f107 0108 	add.w	r1, r7, #8
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4798      	blx	r3
 800a0e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ea:	e00f      	b.n	800a10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0ec:	6839      	ldr	r1, [r7, #0]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fa15 	bl	800a51e <USBD_CtlError>
            err++;
 800a0f4:	7afb      	ldrb	r3, [r7, #11]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0fa:	e007      	b.n	800a10c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa0d 	bl	800a51e <USBD_CtlError>
          err++;
 800a104:	7afb      	ldrb	r3, [r7, #11]
 800a106:	3301      	adds	r3, #1
 800a108:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a10a:	e038      	b.n	800a17e <USBD_GetDescriptor+0x286>
 800a10c:	e037      	b.n	800a17e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	7c1b      	ldrb	r3, [r3, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d109      	bne.n	800a12a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a11e:	f107 0208 	add.w	r2, r7, #8
 800a122:	4610      	mov	r0, r2
 800a124:	4798      	blx	r3
 800a126:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a128:	e029      	b.n	800a17e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f9f6 	bl	800a51e <USBD_CtlError>
        err++;
 800a132:	7afb      	ldrb	r3, [r7, #11]
 800a134:	3301      	adds	r3, #1
 800a136:	72fb      	strb	r3, [r7, #11]
      break;
 800a138:	e021      	b.n	800a17e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	7c1b      	ldrb	r3, [r3, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10d      	bne.n	800a15e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14a:	f107 0208 	add.w	r2, r7, #8
 800a14e:	4610      	mov	r0, r2
 800a150:	4798      	blx	r3
 800a152:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	3301      	adds	r3, #1
 800a158:	2207      	movs	r2, #7
 800a15a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a15c:	e00f      	b.n	800a17e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a15e:	6839      	ldr	r1, [r7, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f9dc 	bl	800a51e <USBD_CtlError>
        err++;
 800a166:	7afb      	ldrb	r3, [r7, #11]
 800a168:	3301      	adds	r3, #1
 800a16a:	72fb      	strb	r3, [r7, #11]
      break;
 800a16c:	e007      	b.n	800a17e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f9d4 	bl	800a51e <USBD_CtlError>
      err++;
 800a176:	7afb      	ldrb	r3, [r7, #11]
 800a178:	3301      	adds	r3, #1
 800a17a:	72fb      	strb	r3, [r7, #11]
      break;
 800a17c:	bf00      	nop
  }

  if (err != 0U)
 800a17e:	7afb      	ldrb	r3, [r7, #11]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d11c      	bne.n	800a1be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a184:	893b      	ldrh	r3, [r7, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d011      	beq.n	800a1ae <USBD_GetDescriptor+0x2b6>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	88db      	ldrh	r3, [r3, #6]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00d      	beq.n	800a1ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	88da      	ldrh	r2, [r3, #6]
 800a196:	893b      	ldrh	r3, [r7, #8]
 800a198:	4293      	cmp	r3, r2
 800a19a:	bf28      	it	cs
 800a19c:	4613      	movcs	r3, r2
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1a2:	893b      	ldrh	r3, [r7, #8]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	68f9      	ldr	r1, [r7, #12]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fa22 	bl	800a5f2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	88db      	ldrh	r3, [r3, #6]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d104      	bne.n	800a1c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fa79 	bl	800a6ae <USBD_CtlSendStatus>
 800a1bc:	e000      	b.n	800a1c0 <USBD_GetDescriptor+0x2c8>
    return;
 800a1be:	bf00      	nop
    }
  }
}
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop

0800a1c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	889b      	ldrh	r3, [r3, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d130      	bne.n	800a23c <USBD_SetAddress+0x74>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	88db      	ldrh	r3, [r3, #6]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d12c      	bne.n	800a23c <USBD_SetAddress+0x74>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	885b      	ldrh	r3, [r3, #2]
 800a1e6:	2b7f      	cmp	r3, #127	; 0x7f
 800a1e8:	d828      	bhi.n	800a23c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	885b      	ldrh	r3, [r3, #2]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	d104      	bne.n	800a20a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f98b 	bl	800a51e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a208:	e01d      	b.n	800a246 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	7bfa      	ldrb	r2, [r7, #15]
 800a20e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a212:	7bfb      	ldrb	r3, [r7, #15]
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fe66 	bl	800aee8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 fa46 	bl	800a6ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a222:	7bfb      	ldrb	r3, [r7, #15]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d004      	beq.n	800a232 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a230:	e009      	b.n	800a246 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a23a:	e004      	b.n	800a246 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f96d 	bl	800a51e <USBD_CtlError>
  }
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	885b      	ldrh	r3, [r3, #2]
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	4b41      	ldr	r3, [pc, #260]	; (800a368 <USBD_SetConfig+0x118>)
 800a262:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a264:	4b40      	ldr	r3, [pc, #256]	; (800a368 <USBD_SetConfig+0x118>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d904      	bls.n	800a276 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f955 	bl	800a51e <USBD_CtlError>
 800a274:	e075      	b.n	800a362 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d002      	beq.n	800a286 <USBD_SetConfig+0x36>
 800a280:	2b03      	cmp	r3, #3
 800a282:	d023      	beq.n	800a2cc <USBD_SetConfig+0x7c>
 800a284:	e062      	b.n	800a34c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a286:	4b38      	ldr	r3, [pc, #224]	; (800a368 <USBD_SetConfig+0x118>)
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d01a      	beq.n	800a2c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a28e:	4b36      	ldr	r3, [pc, #216]	; (800a368 <USBD_SetConfig+0x118>)
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2203      	movs	r2, #3
 800a29c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a2a0:	4b31      	ldr	r3, [pc, #196]	; (800a368 <USBD_SetConfig+0x118>)
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff f9e7 	bl	800967a <USBD_SetClassConfig>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d104      	bne.n	800a2bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f932 	bl	800a51e <USBD_CtlError>
            return;
 800a2ba:	e052      	b.n	800a362 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f9f6 	bl	800a6ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a2c2:	e04e      	b.n	800a362 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f9f2 	bl	800a6ae <USBD_CtlSendStatus>
        break;
 800a2ca:	e04a      	b.n	800a362 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a2cc:	4b26      	ldr	r3, [pc, #152]	; (800a368 <USBD_SetConfig+0x118>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d112      	bne.n	800a2fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a2dc:	4b22      	ldr	r3, [pc, #136]	; (800a368 <USBD_SetConfig+0x118>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a2e6:	4b20      	ldr	r3, [pc, #128]	; (800a368 <USBD_SetConfig+0x118>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7ff f9e3 	bl	80096b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f9db 	bl	800a6ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a2f8:	e033      	b.n	800a362 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a2fa:	4b1b      	ldr	r3, [pc, #108]	; (800a368 <USBD_SetConfig+0x118>)
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	429a      	cmp	r2, r3
 800a306:	d01d      	beq.n	800a344 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff f9d1 	bl	80096b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a316:	4b14      	ldr	r3, [pc, #80]	; (800a368 <USBD_SetConfig+0x118>)
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a320:	4b11      	ldr	r3, [pc, #68]	; (800a368 <USBD_SetConfig+0x118>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff f9a7 	bl	800967a <USBD_SetClassConfig>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d104      	bne.n	800a33c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f8f2 	bl	800a51e <USBD_CtlError>
            return;
 800a33a:	e012      	b.n	800a362 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f9b6 	bl	800a6ae <USBD_CtlSendStatus>
        break;
 800a342:	e00e      	b.n	800a362 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f9b2 	bl	800a6ae <USBD_CtlSendStatus>
        break;
 800a34a:	e00a      	b.n	800a362 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f8e5 	bl	800a51e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a354:	4b04      	ldr	r3, [pc, #16]	; (800a368 <USBD_SetConfig+0x118>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	4619      	mov	r1, r3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff f9ac 	bl	80096b8 <USBD_ClrClassConfig>
        break;
 800a360:	bf00      	nop
    }
  }
}
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	20000bfc 	.word	0x20000bfc

0800a36c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	88db      	ldrh	r3, [r3, #6]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d004      	beq.n	800a388 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f8cc 	bl	800a51e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a386:	e022      	b.n	800a3ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a38e:	2b02      	cmp	r3, #2
 800a390:	dc02      	bgt.n	800a398 <USBD_GetConfig+0x2c>
 800a392:	2b00      	cmp	r3, #0
 800a394:	dc03      	bgt.n	800a39e <USBD_GetConfig+0x32>
 800a396:	e015      	b.n	800a3c4 <USBD_GetConfig+0x58>
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d00b      	beq.n	800a3b4 <USBD_GetConfig+0x48>
 800a39c:	e012      	b.n	800a3c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f920 	bl	800a5f2 <USBD_CtlSendData>
        break;
 800a3b2:	e00c      	b.n	800a3ce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f918 	bl	800a5f2 <USBD_CtlSendData>
        break;
 800a3c2:	e004      	b.n	800a3ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f8a9 	bl	800a51e <USBD_CtlError>
        break;
 800a3cc:	bf00      	nop
}
 800a3ce:	bf00      	nop
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3e6:	3b01      	subs	r3, #1
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d81e      	bhi.n	800a42a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	88db      	ldrh	r3, [r3, #6]
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d004      	beq.n	800a3fe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f891 	bl	800a51e <USBD_CtlError>
        break;
 800a3fc:	e01a      	b.n	800a434 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d005      	beq.n	800a41a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	f043 0202 	orr.w	r2, r3, #2
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	330c      	adds	r3, #12
 800a41e:	2202      	movs	r2, #2
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f8e5 	bl	800a5f2 <USBD_CtlSendData>
      break;
 800a428:	e004      	b.n	800a434 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 f876 	bl	800a51e <USBD_CtlError>
      break;
 800a432:	bf00      	nop
  }
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	885b      	ldrh	r3, [r3, #2]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d106      	bne.n	800a45c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f929 	bl	800a6ae <USBD_CtlSendStatus>
  }
}
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a474:	3b01      	subs	r3, #1
 800a476:	2b02      	cmp	r3, #2
 800a478:	d80b      	bhi.n	800a492 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	885b      	ldrh	r3, [r3, #2]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d10c      	bne.n	800a49c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f90f 	bl	800a6ae <USBD_CtlSendStatus>
      }
      break;
 800a490:	e004      	b.n	800a49c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 f842 	bl	800a51e <USBD_CtlError>
      break;
 800a49a:	e000      	b.n	800a49e <USBD_ClrFeature+0x3a>
      break;
 800a49c:	bf00      	nop
  }
}
 800a49e:	bf00      	nop
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	781a      	ldrb	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	785a      	ldrb	r2, [r3, #1]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	3302      	adds	r3, #2
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	3303      	adds	r3, #3
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	021b      	lsls	r3, r3, #8
 800a4d2:	b29b      	uxth	r3, r3
 800a4d4:	4413      	add	r3, r2
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	3304      	adds	r3, #4
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	b29a      	uxth	r2, r3
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	3305      	adds	r3, #5
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	4413      	add	r3, r2
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	3306      	adds	r3, #6
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	3307      	adds	r3, #7
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	b29b      	uxth	r3, r3
 800a508:	021b      	lsls	r3, r3, #8
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	4413      	add	r3, r2
 800a50e:	b29a      	uxth	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	80da      	strh	r2, [r3, #6]

}
 800a514:	bf00      	nop
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	bc80      	pop	{r7}
 800a51c:	4770      	bx	lr

0800a51e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b082      	sub	sp, #8
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a528:	2180      	movs	r1, #128	; 0x80
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fc72 	bl	800ae14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a530:	2100      	movs	r1, #0
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fc6e 	bl	800ae14 <USBD_LL_StallEP>
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a54c:	2300      	movs	r3, #0
 800a54e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d032      	beq.n	800a5bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f000 f834 	bl	800a5c4 <USBD_GetLen>
 800a55c:	4603      	mov	r3, r0
 800a55e:	3301      	adds	r3, #1
 800a560:	b29b      	uxth	r3, r3
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	b29a      	uxth	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	75fa      	strb	r2, [r7, #23]
 800a570:	461a      	mov	r2, r3
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	4413      	add	r3, r2
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	7812      	ldrb	r2, [r2, #0]
 800a57a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	75fa      	strb	r2, [r7, #23]
 800a582:	461a      	mov	r2, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	4413      	add	r3, r2
 800a588:	2203      	movs	r2, #3
 800a58a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a58c:	e012      	b.n	800a5b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	60fa      	str	r2, [r7, #12]
 800a594:	7dfa      	ldrb	r2, [r7, #23]
 800a596:	1c51      	adds	r1, r2, #1
 800a598:	75f9      	strb	r1, [r7, #23]
 800a59a:	4611      	mov	r1, r2
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	440a      	add	r2, r1
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	75fa      	strb	r2, [r7, #23]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1e8      	bne.n	800a58e <USBD_GetString+0x4e>
    }
  }
}
 800a5bc:	bf00      	nop
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a5d0:	e005      	b.n	800a5de <USBD_GetLen+0x1a>
  {
    len++;
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1f5      	bne.n	800a5d2 <USBD_GetLen+0xe>
  }

  return len;
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bc80      	pop	{r7}
 800a5f0:	4770      	bx	lr

0800a5f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60f8      	str	r0, [r7, #12]
 800a5fa:	60b9      	str	r1, [r7, #8]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2202      	movs	r2, #2
 800a604:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a608:	88fa      	ldrh	r2, [r7, #6]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a60e:	88fa      	ldrh	r2, [r7, #6]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a614:	88fb      	ldrh	r3, [r7, #6]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	2100      	movs	r1, #0
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 fc83 	bl	800af26 <USBD_LL_Transmit>

  return USBD_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	4613      	mov	r3, r2
 800a636:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a638:	88fb      	ldrh	r3, [r7, #6]
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	2100      	movs	r1, #0
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f000 fc71 	bl	800af26 <USBD_LL_Transmit>

  return USBD_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	60b9      	str	r1, [r7, #8]
 800a658:	4613      	mov	r3, r2
 800a65a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2203      	movs	r2, #3
 800a660:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a664:	88fa      	ldrh	r2, [r7, #6]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a66c:	88fa      	ldrh	r2, [r7, #6]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a674:	88fb      	ldrh	r3, [r7, #6]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	2100      	movs	r1, #0
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 fc76 	bl	800af6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	60f8      	str	r0, [r7, #12]
 800a692:	60b9      	str	r1, [r7, #8]
 800a694:	4613      	mov	r3, r2
 800a696:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a698:	88fb      	ldrh	r3, [r7, #6]
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	2100      	movs	r1, #0
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f000 fc64 	bl	800af6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2204      	movs	r2, #4
 800a6ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a6be:	2300      	movs	r3, #0
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fc2e 	bl	800af26 <USBD_LL_Transmit>

  return USBD_OK;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2205      	movs	r2, #5
 800a6e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fc3e 	bl	800af6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
	...

0800a6fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a700:	2200      	movs	r2, #0
 800a702:	4912      	ldr	r1, [pc, #72]	; (800a74c <MX_USB_DEVICE_Init+0x50>)
 800a704:	4812      	ldr	r0, [pc, #72]	; (800a750 <MX_USB_DEVICE_Init+0x54>)
 800a706:	f7fe ff5e 	bl	80095c6 <USBD_Init>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d001      	beq.n	800a714 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a710:	f7f6 fc84 	bl	800101c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a714:	490f      	ldr	r1, [pc, #60]	; (800a754 <MX_USB_DEVICE_Init+0x58>)
 800a716:	480e      	ldr	r0, [pc, #56]	; (800a750 <MX_USB_DEVICE_Init+0x54>)
 800a718:	f7fe ff80 	bl	800961c <USBD_RegisterClass>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a722:	f7f6 fc7b 	bl	800101c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a726:	490c      	ldr	r1, [pc, #48]	; (800a758 <MX_USB_DEVICE_Init+0x5c>)
 800a728:	4809      	ldr	r0, [pc, #36]	; (800a750 <MX_USB_DEVICE_Init+0x54>)
 800a72a:	f7fe feb1 	bl	8009490 <USBD_CDC_RegisterInterface>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a734:	f7f6 fc72 	bl	800101c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a738:	4805      	ldr	r0, [pc, #20]	; (800a750 <MX_USB_DEVICE_Init+0x54>)
 800a73a:	f7fe ff88 	bl	800964e <USBD_Start>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a744:	f7f6 fc6a 	bl	800101c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a748:	bf00      	nop
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20000364 	.word	0x20000364
 800a750:	20000c00 	.word	0x20000c00
 800a754:	20000248 	.word	0x20000248
 800a758:	20000354 	.word	0x20000354

0800a75c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a760:	2200      	movs	r2, #0
 800a762:	4905      	ldr	r1, [pc, #20]	; (800a778 <CDC_Init_FS+0x1c>)
 800a764:	4805      	ldr	r0, [pc, #20]	; (800a77c <CDC_Init_FS+0x20>)
 800a766:	f7fe fea9 	bl	80094bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a76a:	4905      	ldr	r1, [pc, #20]	; (800a780 <CDC_Init_FS+0x24>)
 800a76c:	4803      	ldr	r0, [pc, #12]	; (800a77c <CDC_Init_FS+0x20>)
 800a76e:	f7fe febe 	bl	80094ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a772:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a774:	4618      	mov	r0, r3
 800a776:	bd80      	pop	{r7, pc}
 800a778:	200012ac 	.word	0x200012ac
 800a77c:	20000c00 	.word	0x20000c00
 800a780:	20000ec4 	.word	0x20000ec4

0800a784 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a784:	b480      	push	{r7}
 800a786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a788:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bc80      	pop	{r7}
 800a790:	4770      	bx	lr
	...

0800a794 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	4603      	mov	r3, r0
 800a79c:	6039      	str	r1, [r7, #0]
 800a79e:	71fb      	strb	r3, [r7, #7]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a7a4:	79fb      	ldrb	r3, [r7, #7]
 800a7a6:	2b23      	cmp	r3, #35	; 0x23
 800a7a8:	d85c      	bhi.n	800a864 <CDC_Control_FS+0xd0>
 800a7aa:	a201      	add	r2, pc, #4	; (adr r2, 800a7b0 <CDC_Control_FS+0x1c>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a865 	.word	0x0800a865
 800a7b4:	0800a865 	.word	0x0800a865
 800a7b8:	0800a865 	.word	0x0800a865
 800a7bc:	0800a865 	.word	0x0800a865
 800a7c0:	0800a865 	.word	0x0800a865
 800a7c4:	0800a865 	.word	0x0800a865
 800a7c8:	0800a865 	.word	0x0800a865
 800a7cc:	0800a865 	.word	0x0800a865
 800a7d0:	0800a865 	.word	0x0800a865
 800a7d4:	0800a865 	.word	0x0800a865
 800a7d8:	0800a865 	.word	0x0800a865
 800a7dc:	0800a865 	.word	0x0800a865
 800a7e0:	0800a865 	.word	0x0800a865
 800a7e4:	0800a865 	.word	0x0800a865
 800a7e8:	0800a865 	.word	0x0800a865
 800a7ec:	0800a865 	.word	0x0800a865
 800a7f0:	0800a865 	.word	0x0800a865
 800a7f4:	0800a865 	.word	0x0800a865
 800a7f8:	0800a865 	.word	0x0800a865
 800a7fc:	0800a865 	.word	0x0800a865
 800a800:	0800a865 	.word	0x0800a865
 800a804:	0800a865 	.word	0x0800a865
 800a808:	0800a865 	.word	0x0800a865
 800a80c:	0800a865 	.word	0x0800a865
 800a810:	0800a865 	.word	0x0800a865
 800a814:	0800a865 	.word	0x0800a865
 800a818:	0800a865 	.word	0x0800a865
 800a81c:	0800a865 	.word	0x0800a865
 800a820:	0800a865 	.word	0x0800a865
 800a824:	0800a865 	.word	0x0800a865
 800a828:	0800a865 	.word	0x0800a865
 800a82c:	0800a865 	.word	0x0800a865
 800a830:	0800a841 	.word	0x0800a841
 800a834:	0800a853 	.word	0x0800a853
 800a838:	0800a865 	.word	0x0800a865
 800a83c:	0800a865 	.word	0x0800a865
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800a840:	4b0c      	ldr	r3, [pc, #48]	; (800a874 <CDC_Control_FS+0xe0>)
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	6810      	ldr	r0, [r2, #0]
 800a846:	6018      	str	r0, [r3, #0]
 800a848:	8891      	ldrh	r1, [r2, #4]
 800a84a:	7992      	ldrb	r2, [r2, #6]
 800a84c:	8099      	strh	r1, [r3, #4]
 800a84e:	719a      	strb	r2, [r3, #6]
    break;
 800a850:	e009      	b.n	800a866 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	4a07      	ldr	r2, [pc, #28]	; (800a874 <CDC_Control_FS+0xe0>)
 800a856:	6810      	ldr	r0, [r2, #0]
 800a858:	6018      	str	r0, [r3, #0]
 800a85a:	8891      	ldrh	r1, [r2, #4]
 800a85c:	7992      	ldrb	r2, [r2, #6]
 800a85e:	8099      	strh	r1, [r3, #4]
 800a860:	719a      	strb	r2, [r3, #6]
    break;
 800a862:	e000      	b.n	800a866 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a864:	bf00      	nop
  }

  return (USBD_OK);
 800a866:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bc80      	pop	{r7}
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	2000034c 	.word	0x2000034c

0800a878 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d005      	beq.n	800a896 <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7f5 fe5d 	bl	8000550 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a896:	6879      	ldr	r1, [r7, #4]
 800a898:	4805      	ldr	r0, [pc, #20]	; (800a8b0 <CDC_Receive_FS+0x38>)
 800a89a:	f7fe fe28 	bl	80094ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a89e:	4804      	ldr	r0, [pc, #16]	; (800a8b0 <CDC_Receive_FS+0x38>)
 800a8a0:	f7fe fe67 	bl	8009572 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a8a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20000c00 	.word	0x20000c00

0800a8b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	460b      	mov	r3, r1
 800a8be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a8c4:	4b0d      	ldr	r3, [pc, #52]	; (800a8fc <CDC_Transmit_FS+0x48>)
 800a8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e00b      	b.n	800a8f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a8da:	887b      	ldrh	r3, [r7, #2]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	6879      	ldr	r1, [r7, #4]
 800a8e0:	4806      	ldr	r0, [pc, #24]	; (800a8fc <CDC_Transmit_FS+0x48>)
 800a8e2:	f7fe fdeb 	bl	80094bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a8e6:	4805      	ldr	r0, [pc, #20]	; (800a8fc <CDC_Transmit_FS+0x48>)
 800a8e8:	f7fe fe14 	bl	8009514 <USBD_CDC_TransmitPacket>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20000c00 	.word	0x20000c00

0800a900 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	4603      	mov	r3, r0
 800a908:	6039      	str	r1, [r7, #0]
 800a90a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2212      	movs	r2, #18
 800a910:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a912:	4b03      	ldr	r3, [pc, #12]	; (800a920 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	bc80      	pop	{r7}
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	20000380 	.word	0x20000380

0800a924 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	6039      	str	r1, [r7, #0]
 800a92e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	2204      	movs	r2, #4
 800a934:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a936:	4b03      	ldr	r3, [pc, #12]	; (800a944 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a938:	4618      	mov	r0, r3
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bc80      	pop	{r7}
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	20000394 	.word	0x20000394

0800a948 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	4603      	mov	r3, r0
 800a950:	6039      	str	r1, [r7, #0]
 800a952:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d105      	bne.n	800a966 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	4907      	ldr	r1, [pc, #28]	; (800a97c <USBD_FS_ProductStrDescriptor+0x34>)
 800a95e:	4808      	ldr	r0, [pc, #32]	; (800a980 <USBD_FS_ProductStrDescriptor+0x38>)
 800a960:	f7ff fdee 	bl	800a540 <USBD_GetString>
 800a964:	e004      	b.n	800a970 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	4904      	ldr	r1, [pc, #16]	; (800a97c <USBD_FS_ProductStrDescriptor+0x34>)
 800a96a:	4805      	ldr	r0, [pc, #20]	; (800a980 <USBD_FS_ProductStrDescriptor+0x38>)
 800a96c:	f7ff fde8 	bl	800a540 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a970:	4b02      	ldr	r3, [pc, #8]	; (800a97c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20001694 	.word	0x20001694
 800a980:	0800baf0 	.word	0x0800baf0

0800a984 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	6039      	str	r1, [r7, #0]
 800a98e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	4904      	ldr	r1, [pc, #16]	; (800a9a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a994:	4804      	ldr	r0, [pc, #16]	; (800a9a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a996:	f7ff fdd3 	bl	800a540 <USBD_GetString>
  return USBD_StrDesc;
 800a99a:	4b02      	ldr	r3, [pc, #8]	; (800a9a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	20001694 	.word	0x20001694
 800a9a8:	0800bb04 	.word	0x0800bb04

0800a9ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	6039      	str	r1, [r7, #0]
 800a9b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	221a      	movs	r2, #26
 800a9bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a9be:	f000 f843 	bl	800aa48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a9c2:	4b02      	ldr	r3, [pc, #8]	; (800a9cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	20000398 	.word	0x20000398

0800a9d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	6039      	str	r1, [r7, #0]
 800a9da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9dc:	79fb      	ldrb	r3, [r7, #7]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d105      	bne.n	800a9ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	4907      	ldr	r1, [pc, #28]	; (800aa04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9e6:	4808      	ldr	r0, [pc, #32]	; (800aa08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9e8:	f7ff fdaa 	bl	800a540 <USBD_GetString>
 800a9ec:	e004      	b.n	800a9f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	4904      	ldr	r1, [pc, #16]	; (800aa04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9f2:	4805      	ldr	r0, [pc, #20]	; (800aa08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9f4:	f7ff fda4 	bl	800a540 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9f8:	4b02      	ldr	r3, [pc, #8]	; (800aa04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20001694 	.word	0x20001694
 800aa08:	0800bb0c 	.word	0x0800bb0c

0800aa0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	6039      	str	r1, [r7, #0]
 800aa16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d105      	bne.n	800aa2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	4907      	ldr	r1, [pc, #28]	; (800aa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa22:	4808      	ldr	r0, [pc, #32]	; (800aa44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa24:	f7ff fd8c 	bl	800a540 <USBD_GetString>
 800aa28:	e004      	b.n	800aa34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	4904      	ldr	r1, [pc, #16]	; (800aa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa2e:	4805      	ldr	r0, [pc, #20]	; (800aa44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa30:	f7ff fd86 	bl	800a540 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa34:	4b02      	ldr	r3, [pc, #8]	; (800aa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20001694 	.word	0x20001694
 800aa44:	0800bb18 	.word	0x0800bb18

0800aa48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa4e:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <Get_SerialNum+0x44>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa54:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <Get_SerialNum+0x48>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa5a:	4b0e      	ldr	r3, [pc, #56]	; (800aa94 <Get_SerialNum+0x4c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4413      	add	r3, r2
 800aa66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d009      	beq.n	800aa82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa6e:	2208      	movs	r2, #8
 800aa70:	4909      	ldr	r1, [pc, #36]	; (800aa98 <Get_SerialNum+0x50>)
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 f814 	bl	800aaa0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa78:	2204      	movs	r2, #4
 800aa7a:	4908      	ldr	r1, [pc, #32]	; (800aa9c <Get_SerialNum+0x54>)
 800aa7c:	68b8      	ldr	r0, [r7, #8]
 800aa7e:	f000 f80f 	bl	800aaa0 <IntToUnicode>
  }
}
 800aa82:	bf00      	nop
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	1ffff7e8 	.word	0x1ffff7e8
 800aa90:	1ffff7ec 	.word	0x1ffff7ec
 800aa94:	1ffff7f0 	.word	0x1ffff7f0
 800aa98:	2000039a 	.word	0x2000039a
 800aa9c:	200003aa 	.word	0x200003aa

0800aaa0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aab2:	2300      	movs	r3, #0
 800aab4:	75fb      	strb	r3, [r7, #23]
 800aab6:	e027      	b.n	800ab08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	0f1b      	lsrs	r3, r3, #28
 800aabc:	2b09      	cmp	r3, #9
 800aabe:	d80b      	bhi.n	800aad8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	0f1b      	lsrs	r3, r3, #28
 800aac4:	b2da      	uxtb	r2, r3
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	005b      	lsls	r3, r3, #1
 800aaca:	4619      	mov	r1, r3
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	440b      	add	r3, r1
 800aad0:	3230      	adds	r2, #48	; 0x30
 800aad2:	b2d2      	uxtb	r2, r2
 800aad4:	701a      	strb	r2, [r3, #0]
 800aad6:	e00a      	b.n	800aaee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	0f1b      	lsrs	r3, r3, #28
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	7dfb      	ldrb	r3, [r7, #23]
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	4619      	mov	r1, r3
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	440b      	add	r3, r1
 800aae8:	3237      	adds	r2, #55	; 0x37
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	011b      	lsls	r3, r3, #4
 800aaf2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	3301      	adds	r3, #1
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	4413      	add	r3, r2
 800aafe:	2200      	movs	r2, #0
 800ab00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab02:	7dfb      	ldrb	r3, [r7, #23]
 800ab04:	3301      	adds	r3, #1
 800ab06:	75fb      	strb	r3, [r7, #23]
 800ab08:	7dfa      	ldrb	r2, [r7, #23]
 800ab0a:	79fb      	ldrb	r3, [r7, #7]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d3d3      	bcc.n	800aab8 <IntToUnicode+0x18>
  }
}
 800ab10:	bf00      	nop
 800ab12:	bf00      	nop
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bc80      	pop	{r7}
 800ab1a:	4770      	bx	lr

0800ab1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a0d      	ldr	r2, [pc, #52]	; (800ab60 <HAL_PCD_MspInit+0x44>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d113      	bne.n	800ab56 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	; (800ab64 <HAL_PCD_MspInit+0x48>)
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	4a0c      	ldr	r2, [pc, #48]	; (800ab64 <HAL_PCD_MspInit+0x48>)
 800ab34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab38:	61d3      	str	r3, [r2, #28]
 800ab3a:	4b0a      	ldr	r3, [pc, #40]	; (800ab64 <HAL_PCD_MspInit+0x48>)
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab42:	60fb      	str	r3, [r7, #12]
 800ab44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ab46:	2200      	movs	r2, #0
 800ab48:	2100      	movs	r1, #0
 800ab4a:	2014      	movs	r0, #20
 800ab4c:	f7f8 fefb 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ab50:	2014      	movs	r0, #20
 800ab52:	f7f8 ff14 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ab56:	bf00      	nop
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	40005c00 	.word	0x40005c00
 800ab64:	40021000 	.word	0x40021000

0800ab68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	4610      	mov	r0, r2
 800ab80:	f7fe fdad 	bl	80096de <USBD_LL_SetupStage>
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ab9e:	78fa      	ldrb	r2, [r7, #3]
 800aba0:	6879      	ldr	r1, [r7, #4]
 800aba2:	4613      	mov	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	440b      	add	r3, r1
 800abac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	78fb      	ldrb	r3, [r7, #3]
 800abb4:	4619      	mov	r1, r3
 800abb6:	f7fe fddf 	bl	8009778 <USBD_LL_DataOutStage>
}
 800abba:	bf00      	nop
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	460b      	mov	r3, r1
 800abcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800abd4:	78fa      	ldrb	r2, [r7, #3]
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	4613      	mov	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	440b      	add	r3, r1
 800abe2:	333c      	adds	r3, #60	; 0x3c
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	78fb      	ldrb	r3, [r7, #3]
 800abe8:	4619      	mov	r1, r3
 800abea:	f7fe fe36 	bl	800985a <USBD_LL_DataInStage>
}
 800abee:	bf00      	nop
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b082      	sub	sp, #8
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fe ff46 	bl	8009a96 <USBD_LL_SOF>
}
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d001      	beq.n	800ac2a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ac26:	f7f6 f9f9 	bl	800101c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac30:	7bfa      	ldrb	r2, [r7, #15]
 800ac32:	4611      	mov	r1, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fe fef6 	bl	8009a26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe feaf 	bl	80099a4 <USBD_LL_Reset>
}
 800ac46:	bf00      	nop
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe fef0 	bl	8009a44 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac6c:	4b04      	ldr	r3, [pc, #16]	; (800ac80 <HAL_PCD_SuspendCallback+0x30>)
 800ac6e:	691b      	ldr	r3, [r3, #16]
 800ac70:	4a03      	ldr	r2, [pc, #12]	; (800ac80 <HAL_PCD_SuspendCallback+0x30>)
 800ac72:	f043 0306 	orr.w	r3, r3, #6
 800ac76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac78:	bf00      	nop
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	e000ed00 	.word	0xe000ed00

0800ac84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fe feea 	bl	8009a6c <USBD_LL_Resume>
}
 800ac98:	bf00      	nop
 800ac9a:	3708      	adds	r7, #8
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800aca8:	4a28      	ldr	r2, [pc, #160]	; (800ad4c <USBD_LL_Init+0xac>)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a26      	ldr	r2, [pc, #152]	; (800ad4c <USBD_LL_Init+0xac>)
 800acb4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800acb8:	4b24      	ldr	r3, [pc, #144]	; (800ad4c <USBD_LL_Init+0xac>)
 800acba:	4a25      	ldr	r2, [pc, #148]	; (800ad50 <USBD_LL_Init+0xb0>)
 800acbc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800acbe:	4b23      	ldr	r3, [pc, #140]	; (800ad4c <USBD_LL_Init+0xac>)
 800acc0:	2208      	movs	r2, #8
 800acc2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800acc4:	4b21      	ldr	r3, [pc, #132]	; (800ad4c <USBD_LL_Init+0xac>)
 800acc6:	2202      	movs	r2, #2
 800acc8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800acca:	4b20      	ldr	r3, [pc, #128]	; (800ad4c <USBD_LL_Init+0xac>)
 800accc:	2200      	movs	r2, #0
 800acce:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800acd0:	4b1e      	ldr	r3, [pc, #120]	; (800ad4c <USBD_LL_Init+0xac>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800acd6:	4b1d      	ldr	r3, [pc, #116]	; (800ad4c <USBD_LL_Init+0xac>)
 800acd8:	2200      	movs	r2, #0
 800acda:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800acdc:	481b      	ldr	r0, [pc, #108]	; (800ad4c <USBD_LL_Init+0xac>)
 800acde:	f7f9 f809 	bl	8003cf4 <HAL_PCD_Init>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d001      	beq.n	800acec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ace8:	f7f6 f998 	bl	800101c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acf2:	2318      	movs	r3, #24
 800acf4:	2200      	movs	r2, #0
 800acf6:	2100      	movs	r1, #0
 800acf8:	f7fa fc7d 	bl	80055f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad02:	2358      	movs	r3, #88	; 0x58
 800ad04:	2200      	movs	r2, #0
 800ad06:	2180      	movs	r1, #128	; 0x80
 800ad08:	f7fa fc75 	bl	80055f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad12:	23c0      	movs	r3, #192	; 0xc0
 800ad14:	2200      	movs	r2, #0
 800ad16:	2181      	movs	r1, #129	; 0x81
 800ad18:	f7fa fc6d 	bl	80055f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad22:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ad26:	2200      	movs	r2, #0
 800ad28:	2101      	movs	r1, #1
 800ad2a:	f7fa fc64 	bl	80055f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad38:	2200      	movs	r2, #0
 800ad3a:	2182      	movs	r1, #130	; 0x82
 800ad3c:	f7fa fc5b 	bl	80055f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20001894 	.word	0x20001894
 800ad50:	40005c00 	.word	0x40005c00

0800ad54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7f9 f8cd 	bl	8003f0a <HAL_PCD_Start>
 800ad70:	4603      	mov	r3, r0
 800ad72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 f94e 	bl	800b018 <USBD_Get_USB_Status>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3710      	adds	r7, #16
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	4608      	mov	r0, r1
 800ad94:	4611      	mov	r1, r2
 800ad96:	461a      	mov	r2, r3
 800ad98:	4603      	mov	r3, r0
 800ad9a:	70fb      	strb	r3, [r7, #3]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	70bb      	strb	r3, [r7, #2]
 800ada0:	4613      	mov	r3, r2
 800ada2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adb2:	78bb      	ldrb	r3, [r7, #2]
 800adb4:	883a      	ldrh	r2, [r7, #0]
 800adb6:	78f9      	ldrb	r1, [r7, #3]
 800adb8:	f7f9 fa45 	bl	8004246 <HAL_PCD_EP_Open>
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 f928 	bl	800b018 <USBD_Get_USB_Status>
 800adc8:	4603      	mov	r3, r0
 800adca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b084      	sub	sp, #16
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	460b      	mov	r3, r1
 800ade0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adf0:	78fa      	ldrb	r2, [r7, #3]
 800adf2:	4611      	mov	r1, r2
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7f9 fa8c 	bl	8004312 <HAL_PCD_EP_Close>
 800adfa:	4603      	mov	r3, r0
 800adfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 f909 	bl	800b018 <USBD_Get_USB_Status>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae2e:	78fa      	ldrb	r2, [r7, #3]
 800ae30:	4611      	mov	r1, r2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7f9 fb4c 	bl	80044d0 <HAL_PCD_EP_SetStall>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f8ea 	bl	800b018 <USBD_Get_USB_Status>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae62:	2300      	movs	r3, #0
 800ae64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae6c:	78fa      	ldrb	r2, [r7, #3]
 800ae6e:	4611      	mov	r1, r2
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7f9 fb8d 	bl	8004590 <HAL_PCD_EP_ClrStall>
 800ae76:	4603      	mov	r3, r0
 800ae78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 f8cb 	bl	800b018 <USBD_Get_USB_Status>
 800ae82:	4603      	mov	r3, r0
 800ae84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aea2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	da0c      	bge.n	800aec6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aeac:	78fb      	ldrb	r3, [r7, #3]
 800aeae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb2:	68f9      	ldr	r1, [r7, #12]
 800aeb4:	1c5a      	adds	r2, r3, #1
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	00db      	lsls	r3, r3, #3
 800aebe:	440b      	add	r3, r1
 800aec0:	3302      	adds	r3, #2
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	e00b      	b.n	800aede <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aec6:	78fb      	ldrb	r3, [r7, #3]
 800aec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aecc:	68f9      	ldr	r1, [r7, #12]
 800aece:	4613      	mov	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	00db      	lsls	r3, r3, #3
 800aed6:	440b      	add	r3, r1
 800aed8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800aedc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bc80      	pop	{r7}
 800aee6:	4770      	bx	lr

0800aee8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af02:	78fa      	ldrb	r2, [r7, #3]
 800af04:	4611      	mov	r1, r2
 800af06:	4618      	mov	r0, r3
 800af08:	f7f9 f978 	bl	80041fc <HAL_PCD_SetAddress>
 800af0c:	4603      	mov	r3, r0
 800af0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	4618      	mov	r0, r3
 800af14:	f000 f880 	bl	800b018 <USBD_Get_USB_Status>
 800af18:	4603      	mov	r3, r0
 800af1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b086      	sub	sp, #24
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	60f8      	str	r0, [r7, #12]
 800af2e:	607a      	str	r2, [r7, #4]
 800af30:	461a      	mov	r2, r3
 800af32:	460b      	mov	r3, r1
 800af34:	72fb      	strb	r3, [r7, #11]
 800af36:	4613      	mov	r3, r2
 800af38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af48:	893b      	ldrh	r3, [r7, #8]
 800af4a:	7af9      	ldrb	r1, [r7, #11]
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	f7f9 fa7c 	bl	800444a <HAL_PCD_EP_Transmit>
 800af52:	4603      	mov	r3, r0
 800af54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af56:	7dfb      	ldrb	r3, [r7, #23]
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 f85d 	bl	800b018 <USBD_Get_USB_Status>
 800af5e:	4603      	mov	r3, r0
 800af60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af62:	7dbb      	ldrb	r3, [r7, #22]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	607a      	str	r2, [r7, #4]
 800af76:	461a      	mov	r2, r3
 800af78:	460b      	mov	r3, r1
 800af7a:	72fb      	strb	r3, [r7, #11]
 800af7c:	4613      	mov	r3, r2
 800af7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af84:	2300      	movs	r3, #0
 800af86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af8e:	893b      	ldrh	r3, [r7, #8]
 800af90:	7af9      	ldrb	r1, [r7, #11]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	f7f9 fa05 	bl	80043a2 <HAL_PCD_EP_Receive>
 800af98:	4603      	mov	r3, r0
 800af9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f000 f83a 	bl	800b018 <USBD_Get_USB_Status>
 800afa4:	4603      	mov	r3, r0
 800afa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afa8:	7dbb      	ldrb	r3, [r7, #22]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b082      	sub	sp, #8
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	460b      	mov	r3, r1
 800afbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afc4:	78fa      	ldrb	r2, [r7, #3]
 800afc6:	4611      	mov	r1, r2
 800afc8:	4618      	mov	r0, r3
 800afca:	f7f9 fa27 	bl	800441c <HAL_PCD_EP_GetRxCount>
 800afce:	4603      	mov	r3, r0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800afe0:	4b02      	ldr	r3, [pc, #8]	; (800afec <USBD_static_malloc+0x14>)
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bc80      	pop	{r7}
 800afea:	4770      	bx	lr
 800afec:	20001b80 	.word	0x20001b80

0800aff0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]

}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	bc80      	pop	{r7}
 800b000:	4770      	bx	lr

0800b002 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
 800b00a:	460b      	mov	r3, r1
 800b00c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b00e:	bf00      	nop
 800b010:	370c      	adds	r7, #12
 800b012:	46bd      	mov	sp, r7
 800b014:	bc80      	pop	{r7}
 800b016:	4770      	bx	lr

0800b018 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b026:	79fb      	ldrb	r3, [r7, #7]
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d817      	bhi.n	800b05c <USBD_Get_USB_Status+0x44>
 800b02c:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <USBD_Get_USB_Status+0x1c>)
 800b02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b032:	bf00      	nop
 800b034:	0800b045 	.word	0x0800b045
 800b038:	0800b04b 	.word	0x0800b04b
 800b03c:	0800b051 	.word	0x0800b051
 800b040:	0800b057 	.word	0x0800b057
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
    break;
 800b048:	e00b      	b.n	800b062 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b04a:	2302      	movs	r3, #2
 800b04c:	73fb      	strb	r3, [r7, #15]
    break;
 800b04e:	e008      	b.n	800b062 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b050:	2301      	movs	r3, #1
 800b052:	73fb      	strb	r3, [r7, #15]
    break;
 800b054:	e005      	b.n	800b062 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b056:	2302      	movs	r3, #2
 800b058:	73fb      	strb	r3, [r7, #15]
    break;
 800b05a:	e002      	b.n	800b062 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b05c:	2302      	movs	r3, #2
 800b05e:	73fb      	strb	r3, [r7, #15]
    break;
 800b060:	bf00      	nop
  }
  return usb_status;
 800b062:	7bfb      	ldrb	r3, [r7, #15]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3714      	adds	r7, #20
 800b068:	46bd      	mov	sp, r7
 800b06a:	bc80      	pop	{r7}
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop

0800b070 <__errno>:
 800b070:	4b01      	ldr	r3, [pc, #4]	; (800b078 <__errno+0x8>)
 800b072:	6818      	ldr	r0, [r3, #0]
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	200003b4 	.word	0x200003b4

0800b07c <__libc_init_array>:
 800b07c:	b570      	push	{r4, r5, r6, lr}
 800b07e:	2600      	movs	r6, #0
 800b080:	4d0c      	ldr	r5, [pc, #48]	; (800b0b4 <__libc_init_array+0x38>)
 800b082:	4c0d      	ldr	r4, [pc, #52]	; (800b0b8 <__libc_init_array+0x3c>)
 800b084:	1b64      	subs	r4, r4, r5
 800b086:	10a4      	asrs	r4, r4, #2
 800b088:	42a6      	cmp	r6, r4
 800b08a:	d109      	bne.n	800b0a0 <__libc_init_array+0x24>
 800b08c:	f000 fcd6 	bl	800ba3c <_init>
 800b090:	2600      	movs	r6, #0
 800b092:	4d0a      	ldr	r5, [pc, #40]	; (800b0bc <__libc_init_array+0x40>)
 800b094:	4c0a      	ldr	r4, [pc, #40]	; (800b0c0 <__libc_init_array+0x44>)
 800b096:	1b64      	subs	r4, r4, r5
 800b098:	10a4      	asrs	r4, r4, #2
 800b09a:	42a6      	cmp	r6, r4
 800b09c:	d105      	bne.n	800b0aa <__libc_init_array+0x2e>
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
 800b0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0a4:	4798      	blx	r3
 800b0a6:	3601      	adds	r6, #1
 800b0a8:	e7ee      	b.n	800b088 <__libc_init_array+0xc>
 800b0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ae:	4798      	blx	r3
 800b0b0:	3601      	adds	r6, #1
 800b0b2:	e7f2      	b.n	800b09a <__libc_init_array+0x1e>
 800b0b4:	0800cc4c 	.word	0x0800cc4c
 800b0b8:	0800cc4c 	.word	0x0800cc4c
 800b0bc:	0800cc4c 	.word	0x0800cc4c
 800b0c0:	0800cc50 	.word	0x0800cc50

0800b0c4 <memset>:
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	4402      	add	r2, r0
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d100      	bne.n	800b0ce <memset+0xa>
 800b0cc:	4770      	bx	lr
 800b0ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b0d2:	e7f9      	b.n	800b0c8 <memset+0x4>

0800b0d4 <sniprintf>:
 800b0d4:	b40c      	push	{r2, r3}
 800b0d6:	b530      	push	{r4, r5, lr}
 800b0d8:	4b17      	ldr	r3, [pc, #92]	; (800b138 <sniprintf+0x64>)
 800b0da:	1e0c      	subs	r4, r1, #0
 800b0dc:	681d      	ldr	r5, [r3, #0]
 800b0de:	b09d      	sub	sp, #116	; 0x74
 800b0e0:	da08      	bge.n	800b0f4 <sniprintf+0x20>
 800b0e2:	238b      	movs	r3, #139	; 0x8b
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	b01d      	add	sp, #116	; 0x74
 800b0ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0f0:	b002      	add	sp, #8
 800b0f2:	4770      	bx	lr
 800b0f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b0f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b0fc:	bf0c      	ite	eq
 800b0fe:	4623      	moveq	r3, r4
 800b100:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b104:	9304      	str	r3, [sp, #16]
 800b106:	9307      	str	r3, [sp, #28]
 800b108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b10c:	9002      	str	r0, [sp, #8]
 800b10e:	9006      	str	r0, [sp, #24]
 800b110:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b114:	4628      	mov	r0, r5
 800b116:	ab21      	add	r3, sp, #132	; 0x84
 800b118:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b11a:	a902      	add	r1, sp, #8
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	f000 f88f 	bl	800b240 <_svfiprintf_r>
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	bfbc      	itt	lt
 800b126:	238b      	movlt	r3, #139	; 0x8b
 800b128:	602b      	strlt	r3, [r5, #0]
 800b12a:	2c00      	cmp	r4, #0
 800b12c:	d0dd      	beq.n	800b0ea <sniprintf+0x16>
 800b12e:	2200      	movs	r2, #0
 800b130:	9b02      	ldr	r3, [sp, #8]
 800b132:	701a      	strb	r2, [r3, #0]
 800b134:	e7d9      	b.n	800b0ea <sniprintf+0x16>
 800b136:	bf00      	nop
 800b138:	200003b4 	.word	0x200003b4

0800b13c <strncmp>:
 800b13c:	4603      	mov	r3, r0
 800b13e:	b510      	push	{r4, lr}
 800b140:	b172      	cbz	r2, 800b160 <strncmp+0x24>
 800b142:	3901      	subs	r1, #1
 800b144:	1884      	adds	r4, r0, r2
 800b146:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b14a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b14e:	4290      	cmp	r0, r2
 800b150:	d101      	bne.n	800b156 <strncmp+0x1a>
 800b152:	42a3      	cmp	r3, r4
 800b154:	d101      	bne.n	800b15a <strncmp+0x1e>
 800b156:	1a80      	subs	r0, r0, r2
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d1f3      	bne.n	800b146 <strncmp+0xa>
 800b15e:	e7fa      	b.n	800b156 <strncmp+0x1a>
 800b160:	4610      	mov	r0, r2
 800b162:	e7f9      	b.n	800b158 <strncmp+0x1c>

0800b164 <strncpy>:
 800b164:	4603      	mov	r3, r0
 800b166:	b510      	push	{r4, lr}
 800b168:	3901      	subs	r1, #1
 800b16a:	b132      	cbz	r2, 800b17a <strncpy+0x16>
 800b16c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b170:	3a01      	subs	r2, #1
 800b172:	f803 4b01 	strb.w	r4, [r3], #1
 800b176:	2c00      	cmp	r4, #0
 800b178:	d1f7      	bne.n	800b16a <strncpy+0x6>
 800b17a:	2100      	movs	r1, #0
 800b17c:	441a      	add	r2, r3
 800b17e:	4293      	cmp	r3, r2
 800b180:	d100      	bne.n	800b184 <strncpy+0x20>
 800b182:	bd10      	pop	{r4, pc}
 800b184:	f803 1b01 	strb.w	r1, [r3], #1
 800b188:	e7f9      	b.n	800b17e <strncpy+0x1a>

0800b18a <__ssputs_r>:
 800b18a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b18e:	688e      	ldr	r6, [r1, #8]
 800b190:	4682      	mov	sl, r0
 800b192:	429e      	cmp	r6, r3
 800b194:	460c      	mov	r4, r1
 800b196:	4690      	mov	r8, r2
 800b198:	461f      	mov	r7, r3
 800b19a:	d838      	bhi.n	800b20e <__ssputs_r+0x84>
 800b19c:	898a      	ldrh	r2, [r1, #12]
 800b19e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1a2:	d032      	beq.n	800b20a <__ssputs_r+0x80>
 800b1a4:	6825      	ldr	r5, [r4, #0]
 800b1a6:	6909      	ldr	r1, [r1, #16]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	eba5 0901 	sub.w	r9, r5, r1
 800b1ae:	6965      	ldr	r5, [r4, #20]
 800b1b0:	444b      	add	r3, r9
 800b1b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1ba:	106d      	asrs	r5, r5, #1
 800b1bc:	429d      	cmp	r5, r3
 800b1be:	bf38      	it	cc
 800b1c0:	461d      	movcc	r5, r3
 800b1c2:	0553      	lsls	r3, r2, #21
 800b1c4:	d531      	bpl.n	800b22a <__ssputs_r+0xa0>
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f000 fb6e 	bl	800b8a8 <_malloc_r>
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	b950      	cbnz	r0, 800b1e6 <__ssputs_r+0x5c>
 800b1d0:	230c      	movs	r3, #12
 800b1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1d6:	f8ca 3000 	str.w	r3, [sl]
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e0:	81a3      	strh	r3, [r4, #12]
 800b1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e6:	464a      	mov	r2, r9
 800b1e8:	6921      	ldr	r1, [r4, #16]
 800b1ea:	f000 facd 	bl	800b788 <memcpy>
 800b1ee:	89a3      	ldrh	r3, [r4, #12]
 800b1f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1f8:	81a3      	strh	r3, [r4, #12]
 800b1fa:	6126      	str	r6, [r4, #16]
 800b1fc:	444e      	add	r6, r9
 800b1fe:	6026      	str	r6, [r4, #0]
 800b200:	463e      	mov	r6, r7
 800b202:	6165      	str	r5, [r4, #20]
 800b204:	eba5 0509 	sub.w	r5, r5, r9
 800b208:	60a5      	str	r5, [r4, #8]
 800b20a:	42be      	cmp	r6, r7
 800b20c:	d900      	bls.n	800b210 <__ssputs_r+0x86>
 800b20e:	463e      	mov	r6, r7
 800b210:	4632      	mov	r2, r6
 800b212:	4641      	mov	r1, r8
 800b214:	6820      	ldr	r0, [r4, #0]
 800b216:	f000 fac5 	bl	800b7a4 <memmove>
 800b21a:	68a3      	ldr	r3, [r4, #8]
 800b21c:	2000      	movs	r0, #0
 800b21e:	1b9b      	subs	r3, r3, r6
 800b220:	60a3      	str	r3, [r4, #8]
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	4433      	add	r3, r6
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	e7db      	b.n	800b1e2 <__ssputs_r+0x58>
 800b22a:	462a      	mov	r2, r5
 800b22c:	f000 fbb0 	bl	800b990 <_realloc_r>
 800b230:	4606      	mov	r6, r0
 800b232:	2800      	cmp	r0, #0
 800b234:	d1e1      	bne.n	800b1fa <__ssputs_r+0x70>
 800b236:	4650      	mov	r0, sl
 800b238:	6921      	ldr	r1, [r4, #16]
 800b23a:	f000 facd 	bl	800b7d8 <_free_r>
 800b23e:	e7c7      	b.n	800b1d0 <__ssputs_r+0x46>

0800b240 <_svfiprintf_r>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	4698      	mov	r8, r3
 800b246:	898b      	ldrh	r3, [r1, #12]
 800b248:	4607      	mov	r7, r0
 800b24a:	061b      	lsls	r3, r3, #24
 800b24c:	460d      	mov	r5, r1
 800b24e:	4614      	mov	r4, r2
 800b250:	b09d      	sub	sp, #116	; 0x74
 800b252:	d50e      	bpl.n	800b272 <_svfiprintf_r+0x32>
 800b254:	690b      	ldr	r3, [r1, #16]
 800b256:	b963      	cbnz	r3, 800b272 <_svfiprintf_r+0x32>
 800b258:	2140      	movs	r1, #64	; 0x40
 800b25a:	f000 fb25 	bl	800b8a8 <_malloc_r>
 800b25e:	6028      	str	r0, [r5, #0]
 800b260:	6128      	str	r0, [r5, #16]
 800b262:	b920      	cbnz	r0, 800b26e <_svfiprintf_r+0x2e>
 800b264:	230c      	movs	r3, #12
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b26c:	e0d1      	b.n	800b412 <_svfiprintf_r+0x1d2>
 800b26e:	2340      	movs	r3, #64	; 0x40
 800b270:	616b      	str	r3, [r5, #20]
 800b272:	2300      	movs	r3, #0
 800b274:	9309      	str	r3, [sp, #36]	; 0x24
 800b276:	2320      	movs	r3, #32
 800b278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b27c:	2330      	movs	r3, #48	; 0x30
 800b27e:	f04f 0901 	mov.w	r9, #1
 800b282:	f8cd 800c 	str.w	r8, [sp, #12]
 800b286:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b42c <_svfiprintf_r+0x1ec>
 800b28a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b28e:	4623      	mov	r3, r4
 800b290:	469a      	mov	sl, r3
 800b292:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b296:	b10a      	cbz	r2, 800b29c <_svfiprintf_r+0x5c>
 800b298:	2a25      	cmp	r2, #37	; 0x25
 800b29a:	d1f9      	bne.n	800b290 <_svfiprintf_r+0x50>
 800b29c:	ebba 0b04 	subs.w	fp, sl, r4
 800b2a0:	d00b      	beq.n	800b2ba <_svfiprintf_r+0x7a>
 800b2a2:	465b      	mov	r3, fp
 800b2a4:	4622      	mov	r2, r4
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	f7ff ff6e 	bl	800b18a <__ssputs_r>
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	f000 80aa 	beq.w	800b408 <_svfiprintf_r+0x1c8>
 800b2b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2b6:	445a      	add	r2, fp
 800b2b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f000 80a2 	beq.w	800b408 <_svfiprintf_r+0x1c8>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2ce:	f10a 0a01 	add.w	sl, sl, #1
 800b2d2:	9304      	str	r3, [sp, #16]
 800b2d4:	9307      	str	r3, [sp, #28]
 800b2d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2da:	931a      	str	r3, [sp, #104]	; 0x68
 800b2dc:	4654      	mov	r4, sl
 800b2de:	2205      	movs	r2, #5
 800b2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2e4:	4851      	ldr	r0, [pc, #324]	; (800b42c <_svfiprintf_r+0x1ec>)
 800b2e6:	f000 fa41 	bl	800b76c <memchr>
 800b2ea:	9a04      	ldr	r2, [sp, #16]
 800b2ec:	b9d8      	cbnz	r0, 800b326 <_svfiprintf_r+0xe6>
 800b2ee:	06d0      	lsls	r0, r2, #27
 800b2f0:	bf44      	itt	mi
 800b2f2:	2320      	movmi	r3, #32
 800b2f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2f8:	0711      	lsls	r1, r2, #28
 800b2fa:	bf44      	itt	mi
 800b2fc:	232b      	movmi	r3, #43	; 0x2b
 800b2fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b302:	f89a 3000 	ldrb.w	r3, [sl]
 800b306:	2b2a      	cmp	r3, #42	; 0x2a
 800b308:	d015      	beq.n	800b336 <_svfiprintf_r+0xf6>
 800b30a:	4654      	mov	r4, sl
 800b30c:	2000      	movs	r0, #0
 800b30e:	f04f 0c0a 	mov.w	ip, #10
 800b312:	9a07      	ldr	r2, [sp, #28]
 800b314:	4621      	mov	r1, r4
 800b316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b31a:	3b30      	subs	r3, #48	; 0x30
 800b31c:	2b09      	cmp	r3, #9
 800b31e:	d94e      	bls.n	800b3be <_svfiprintf_r+0x17e>
 800b320:	b1b0      	cbz	r0, 800b350 <_svfiprintf_r+0x110>
 800b322:	9207      	str	r2, [sp, #28]
 800b324:	e014      	b.n	800b350 <_svfiprintf_r+0x110>
 800b326:	eba0 0308 	sub.w	r3, r0, r8
 800b32a:	fa09 f303 	lsl.w	r3, r9, r3
 800b32e:	4313      	orrs	r3, r2
 800b330:	46a2      	mov	sl, r4
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	e7d2      	b.n	800b2dc <_svfiprintf_r+0x9c>
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	1d19      	adds	r1, r3, #4
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	9103      	str	r1, [sp, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	bfbb      	ittet	lt
 800b342:	425b      	neglt	r3, r3
 800b344:	f042 0202 	orrlt.w	r2, r2, #2
 800b348:	9307      	strge	r3, [sp, #28]
 800b34a:	9307      	strlt	r3, [sp, #28]
 800b34c:	bfb8      	it	lt
 800b34e:	9204      	strlt	r2, [sp, #16]
 800b350:	7823      	ldrb	r3, [r4, #0]
 800b352:	2b2e      	cmp	r3, #46	; 0x2e
 800b354:	d10c      	bne.n	800b370 <_svfiprintf_r+0x130>
 800b356:	7863      	ldrb	r3, [r4, #1]
 800b358:	2b2a      	cmp	r3, #42	; 0x2a
 800b35a:	d135      	bne.n	800b3c8 <_svfiprintf_r+0x188>
 800b35c:	9b03      	ldr	r3, [sp, #12]
 800b35e:	3402      	adds	r4, #2
 800b360:	1d1a      	adds	r2, r3, #4
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	9203      	str	r2, [sp, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	bfb8      	it	lt
 800b36a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b36e:	9305      	str	r3, [sp, #20]
 800b370:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b430 <_svfiprintf_r+0x1f0>
 800b374:	2203      	movs	r2, #3
 800b376:	4650      	mov	r0, sl
 800b378:	7821      	ldrb	r1, [r4, #0]
 800b37a:	f000 f9f7 	bl	800b76c <memchr>
 800b37e:	b140      	cbz	r0, 800b392 <_svfiprintf_r+0x152>
 800b380:	2340      	movs	r3, #64	; 0x40
 800b382:	eba0 000a 	sub.w	r0, r0, sl
 800b386:	fa03 f000 	lsl.w	r0, r3, r0
 800b38a:	9b04      	ldr	r3, [sp, #16]
 800b38c:	3401      	adds	r4, #1
 800b38e:	4303      	orrs	r3, r0
 800b390:	9304      	str	r3, [sp, #16]
 800b392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b396:	2206      	movs	r2, #6
 800b398:	4826      	ldr	r0, [pc, #152]	; (800b434 <_svfiprintf_r+0x1f4>)
 800b39a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b39e:	f000 f9e5 	bl	800b76c <memchr>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d038      	beq.n	800b418 <_svfiprintf_r+0x1d8>
 800b3a6:	4b24      	ldr	r3, [pc, #144]	; (800b438 <_svfiprintf_r+0x1f8>)
 800b3a8:	bb1b      	cbnz	r3, 800b3f2 <_svfiprintf_r+0x1b2>
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	3307      	adds	r3, #7
 800b3ae:	f023 0307 	bic.w	r3, r3, #7
 800b3b2:	3308      	adds	r3, #8
 800b3b4:	9303      	str	r3, [sp, #12]
 800b3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b8:	4433      	add	r3, r6
 800b3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b3bc:	e767      	b.n	800b28e <_svfiprintf_r+0x4e>
 800b3be:	460c      	mov	r4, r1
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3c6:	e7a5      	b.n	800b314 <_svfiprintf_r+0xd4>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f04f 0c0a 	mov.w	ip, #10
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	3401      	adds	r4, #1
 800b3d2:	9305      	str	r3, [sp, #20]
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3da:	3a30      	subs	r2, #48	; 0x30
 800b3dc:	2a09      	cmp	r2, #9
 800b3de:	d903      	bls.n	800b3e8 <_svfiprintf_r+0x1a8>
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d0c5      	beq.n	800b370 <_svfiprintf_r+0x130>
 800b3e4:	9105      	str	r1, [sp, #20]
 800b3e6:	e7c3      	b.n	800b370 <_svfiprintf_r+0x130>
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3f0:	e7f0      	b.n	800b3d4 <_svfiprintf_r+0x194>
 800b3f2:	ab03      	add	r3, sp, #12
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	462a      	mov	r2, r5
 800b3f8:	4638      	mov	r0, r7
 800b3fa:	4b10      	ldr	r3, [pc, #64]	; (800b43c <_svfiprintf_r+0x1fc>)
 800b3fc:	a904      	add	r1, sp, #16
 800b3fe:	f3af 8000 	nop.w
 800b402:	1c42      	adds	r2, r0, #1
 800b404:	4606      	mov	r6, r0
 800b406:	d1d6      	bne.n	800b3b6 <_svfiprintf_r+0x176>
 800b408:	89ab      	ldrh	r3, [r5, #12]
 800b40a:	065b      	lsls	r3, r3, #25
 800b40c:	f53f af2c 	bmi.w	800b268 <_svfiprintf_r+0x28>
 800b410:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b412:	b01d      	add	sp, #116	; 0x74
 800b414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b418:	ab03      	add	r3, sp, #12
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	462a      	mov	r2, r5
 800b41e:	4638      	mov	r0, r7
 800b420:	4b06      	ldr	r3, [pc, #24]	; (800b43c <_svfiprintf_r+0x1fc>)
 800b422:	a904      	add	r1, sp, #16
 800b424:	f000 f87c 	bl	800b520 <_printf_i>
 800b428:	e7eb      	b.n	800b402 <_svfiprintf_r+0x1c2>
 800b42a:	bf00      	nop
 800b42c:	0800cc17 	.word	0x0800cc17
 800b430:	0800cc1d 	.word	0x0800cc1d
 800b434:	0800cc21 	.word	0x0800cc21
 800b438:	00000000 	.word	0x00000000
 800b43c:	0800b18b 	.word	0x0800b18b

0800b440 <_printf_common>:
 800b440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b444:	4616      	mov	r6, r2
 800b446:	4699      	mov	r9, r3
 800b448:	688a      	ldr	r2, [r1, #8]
 800b44a:	690b      	ldr	r3, [r1, #16]
 800b44c:	4607      	mov	r7, r0
 800b44e:	4293      	cmp	r3, r2
 800b450:	bfb8      	it	lt
 800b452:	4613      	movlt	r3, r2
 800b454:	6033      	str	r3, [r6, #0]
 800b456:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b45a:	460c      	mov	r4, r1
 800b45c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b460:	b10a      	cbz	r2, 800b466 <_printf_common+0x26>
 800b462:	3301      	adds	r3, #1
 800b464:	6033      	str	r3, [r6, #0]
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	0699      	lsls	r1, r3, #26
 800b46a:	bf42      	ittt	mi
 800b46c:	6833      	ldrmi	r3, [r6, #0]
 800b46e:	3302      	addmi	r3, #2
 800b470:	6033      	strmi	r3, [r6, #0]
 800b472:	6825      	ldr	r5, [r4, #0]
 800b474:	f015 0506 	ands.w	r5, r5, #6
 800b478:	d106      	bne.n	800b488 <_printf_common+0x48>
 800b47a:	f104 0a19 	add.w	sl, r4, #25
 800b47e:	68e3      	ldr	r3, [r4, #12]
 800b480:	6832      	ldr	r2, [r6, #0]
 800b482:	1a9b      	subs	r3, r3, r2
 800b484:	42ab      	cmp	r3, r5
 800b486:	dc28      	bgt.n	800b4da <_printf_common+0x9a>
 800b488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b48c:	1e13      	subs	r3, r2, #0
 800b48e:	6822      	ldr	r2, [r4, #0]
 800b490:	bf18      	it	ne
 800b492:	2301      	movne	r3, #1
 800b494:	0692      	lsls	r2, r2, #26
 800b496:	d42d      	bmi.n	800b4f4 <_printf_common+0xb4>
 800b498:	4649      	mov	r1, r9
 800b49a:	4638      	mov	r0, r7
 800b49c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4a0:	47c0      	blx	r8
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d020      	beq.n	800b4e8 <_printf_common+0xa8>
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	68e5      	ldr	r5, [r4, #12]
 800b4aa:	f003 0306 	and.w	r3, r3, #6
 800b4ae:	2b04      	cmp	r3, #4
 800b4b0:	bf18      	it	ne
 800b4b2:	2500      	movne	r5, #0
 800b4b4:	6832      	ldr	r2, [r6, #0]
 800b4b6:	f04f 0600 	mov.w	r6, #0
 800b4ba:	68a3      	ldr	r3, [r4, #8]
 800b4bc:	bf08      	it	eq
 800b4be:	1aad      	subeq	r5, r5, r2
 800b4c0:	6922      	ldr	r2, [r4, #16]
 800b4c2:	bf08      	it	eq
 800b4c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	bfc4      	itt	gt
 800b4cc:	1a9b      	subgt	r3, r3, r2
 800b4ce:	18ed      	addgt	r5, r5, r3
 800b4d0:	341a      	adds	r4, #26
 800b4d2:	42b5      	cmp	r5, r6
 800b4d4:	d11a      	bne.n	800b50c <_printf_common+0xcc>
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	e008      	b.n	800b4ec <_printf_common+0xac>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4652      	mov	r2, sl
 800b4de:	4649      	mov	r1, r9
 800b4e0:	4638      	mov	r0, r7
 800b4e2:	47c0      	blx	r8
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d103      	bne.n	800b4f0 <_printf_common+0xb0>
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	e7c4      	b.n	800b47e <_printf_common+0x3e>
 800b4f4:	2030      	movs	r0, #48	; 0x30
 800b4f6:	18e1      	adds	r1, r4, r3
 800b4f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b502:	4422      	add	r2, r4
 800b504:	3302      	adds	r3, #2
 800b506:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b50a:	e7c5      	b.n	800b498 <_printf_common+0x58>
 800b50c:	2301      	movs	r3, #1
 800b50e:	4622      	mov	r2, r4
 800b510:	4649      	mov	r1, r9
 800b512:	4638      	mov	r0, r7
 800b514:	47c0      	blx	r8
 800b516:	3001      	adds	r0, #1
 800b518:	d0e6      	beq.n	800b4e8 <_printf_common+0xa8>
 800b51a:	3601      	adds	r6, #1
 800b51c:	e7d9      	b.n	800b4d2 <_printf_common+0x92>
	...

0800b520 <_printf_i>:
 800b520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b524:	7e0f      	ldrb	r7, [r1, #24]
 800b526:	4691      	mov	r9, r2
 800b528:	2f78      	cmp	r7, #120	; 0x78
 800b52a:	4680      	mov	r8, r0
 800b52c:	460c      	mov	r4, r1
 800b52e:	469a      	mov	sl, r3
 800b530:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b536:	d807      	bhi.n	800b548 <_printf_i+0x28>
 800b538:	2f62      	cmp	r7, #98	; 0x62
 800b53a:	d80a      	bhi.n	800b552 <_printf_i+0x32>
 800b53c:	2f00      	cmp	r7, #0
 800b53e:	f000 80d9 	beq.w	800b6f4 <_printf_i+0x1d4>
 800b542:	2f58      	cmp	r7, #88	; 0x58
 800b544:	f000 80a4 	beq.w	800b690 <_printf_i+0x170>
 800b548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b54c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b550:	e03a      	b.n	800b5c8 <_printf_i+0xa8>
 800b552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b556:	2b15      	cmp	r3, #21
 800b558:	d8f6      	bhi.n	800b548 <_printf_i+0x28>
 800b55a:	a101      	add	r1, pc, #4	; (adr r1, 800b560 <_printf_i+0x40>)
 800b55c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b560:	0800b5b9 	.word	0x0800b5b9
 800b564:	0800b5cd 	.word	0x0800b5cd
 800b568:	0800b549 	.word	0x0800b549
 800b56c:	0800b549 	.word	0x0800b549
 800b570:	0800b549 	.word	0x0800b549
 800b574:	0800b549 	.word	0x0800b549
 800b578:	0800b5cd 	.word	0x0800b5cd
 800b57c:	0800b549 	.word	0x0800b549
 800b580:	0800b549 	.word	0x0800b549
 800b584:	0800b549 	.word	0x0800b549
 800b588:	0800b549 	.word	0x0800b549
 800b58c:	0800b6db 	.word	0x0800b6db
 800b590:	0800b5fd 	.word	0x0800b5fd
 800b594:	0800b6bd 	.word	0x0800b6bd
 800b598:	0800b549 	.word	0x0800b549
 800b59c:	0800b549 	.word	0x0800b549
 800b5a0:	0800b6fd 	.word	0x0800b6fd
 800b5a4:	0800b549 	.word	0x0800b549
 800b5a8:	0800b5fd 	.word	0x0800b5fd
 800b5ac:	0800b549 	.word	0x0800b549
 800b5b0:	0800b549 	.word	0x0800b549
 800b5b4:	0800b6c5 	.word	0x0800b6c5
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	1d1a      	adds	r2, r3, #4
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	602a      	str	r2, [r5, #0]
 800b5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e0a4      	b.n	800b716 <_printf_i+0x1f6>
 800b5cc:	6820      	ldr	r0, [r4, #0]
 800b5ce:	6829      	ldr	r1, [r5, #0]
 800b5d0:	0606      	lsls	r6, r0, #24
 800b5d2:	f101 0304 	add.w	r3, r1, #4
 800b5d6:	d50a      	bpl.n	800b5ee <_printf_i+0xce>
 800b5d8:	680e      	ldr	r6, [r1, #0]
 800b5da:	602b      	str	r3, [r5, #0]
 800b5dc:	2e00      	cmp	r6, #0
 800b5de:	da03      	bge.n	800b5e8 <_printf_i+0xc8>
 800b5e0:	232d      	movs	r3, #45	; 0x2d
 800b5e2:	4276      	negs	r6, r6
 800b5e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5e8:	230a      	movs	r3, #10
 800b5ea:	485e      	ldr	r0, [pc, #376]	; (800b764 <_printf_i+0x244>)
 800b5ec:	e019      	b.n	800b622 <_printf_i+0x102>
 800b5ee:	680e      	ldr	r6, [r1, #0]
 800b5f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5f4:	602b      	str	r3, [r5, #0]
 800b5f6:	bf18      	it	ne
 800b5f8:	b236      	sxthne	r6, r6
 800b5fa:	e7ef      	b.n	800b5dc <_printf_i+0xbc>
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	6820      	ldr	r0, [r4, #0]
 800b600:	1d19      	adds	r1, r3, #4
 800b602:	6029      	str	r1, [r5, #0]
 800b604:	0601      	lsls	r1, r0, #24
 800b606:	d501      	bpl.n	800b60c <_printf_i+0xec>
 800b608:	681e      	ldr	r6, [r3, #0]
 800b60a:	e002      	b.n	800b612 <_printf_i+0xf2>
 800b60c:	0646      	lsls	r6, r0, #25
 800b60e:	d5fb      	bpl.n	800b608 <_printf_i+0xe8>
 800b610:	881e      	ldrh	r6, [r3, #0]
 800b612:	2f6f      	cmp	r7, #111	; 0x6f
 800b614:	bf0c      	ite	eq
 800b616:	2308      	moveq	r3, #8
 800b618:	230a      	movne	r3, #10
 800b61a:	4852      	ldr	r0, [pc, #328]	; (800b764 <_printf_i+0x244>)
 800b61c:	2100      	movs	r1, #0
 800b61e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b622:	6865      	ldr	r5, [r4, #4]
 800b624:	2d00      	cmp	r5, #0
 800b626:	bfa8      	it	ge
 800b628:	6821      	ldrge	r1, [r4, #0]
 800b62a:	60a5      	str	r5, [r4, #8]
 800b62c:	bfa4      	itt	ge
 800b62e:	f021 0104 	bicge.w	r1, r1, #4
 800b632:	6021      	strge	r1, [r4, #0]
 800b634:	b90e      	cbnz	r6, 800b63a <_printf_i+0x11a>
 800b636:	2d00      	cmp	r5, #0
 800b638:	d04d      	beq.n	800b6d6 <_printf_i+0x1b6>
 800b63a:	4615      	mov	r5, r2
 800b63c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b640:	fb03 6711 	mls	r7, r3, r1, r6
 800b644:	5dc7      	ldrb	r7, [r0, r7]
 800b646:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b64a:	4637      	mov	r7, r6
 800b64c:	42bb      	cmp	r3, r7
 800b64e:	460e      	mov	r6, r1
 800b650:	d9f4      	bls.n	800b63c <_printf_i+0x11c>
 800b652:	2b08      	cmp	r3, #8
 800b654:	d10b      	bne.n	800b66e <_printf_i+0x14e>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	07de      	lsls	r6, r3, #31
 800b65a:	d508      	bpl.n	800b66e <_printf_i+0x14e>
 800b65c:	6923      	ldr	r3, [r4, #16]
 800b65e:	6861      	ldr	r1, [r4, #4]
 800b660:	4299      	cmp	r1, r3
 800b662:	bfde      	ittt	le
 800b664:	2330      	movle	r3, #48	; 0x30
 800b666:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b66a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b66e:	1b52      	subs	r2, r2, r5
 800b670:	6122      	str	r2, [r4, #16]
 800b672:	464b      	mov	r3, r9
 800b674:	4621      	mov	r1, r4
 800b676:	4640      	mov	r0, r8
 800b678:	f8cd a000 	str.w	sl, [sp]
 800b67c:	aa03      	add	r2, sp, #12
 800b67e:	f7ff fedf 	bl	800b440 <_printf_common>
 800b682:	3001      	adds	r0, #1
 800b684:	d14c      	bne.n	800b720 <_printf_i+0x200>
 800b686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b68a:	b004      	add	sp, #16
 800b68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b690:	4834      	ldr	r0, [pc, #208]	; (800b764 <_printf_i+0x244>)
 800b692:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b696:	6829      	ldr	r1, [r5, #0]
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	f851 6b04 	ldr.w	r6, [r1], #4
 800b69e:	6029      	str	r1, [r5, #0]
 800b6a0:	061d      	lsls	r5, r3, #24
 800b6a2:	d514      	bpl.n	800b6ce <_printf_i+0x1ae>
 800b6a4:	07df      	lsls	r7, r3, #31
 800b6a6:	bf44      	itt	mi
 800b6a8:	f043 0320 	orrmi.w	r3, r3, #32
 800b6ac:	6023      	strmi	r3, [r4, #0]
 800b6ae:	b91e      	cbnz	r6, 800b6b8 <_printf_i+0x198>
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	f023 0320 	bic.w	r3, r3, #32
 800b6b6:	6023      	str	r3, [r4, #0]
 800b6b8:	2310      	movs	r3, #16
 800b6ba:	e7af      	b.n	800b61c <_printf_i+0xfc>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	f043 0320 	orr.w	r3, r3, #32
 800b6c2:	6023      	str	r3, [r4, #0]
 800b6c4:	2378      	movs	r3, #120	; 0x78
 800b6c6:	4828      	ldr	r0, [pc, #160]	; (800b768 <_printf_i+0x248>)
 800b6c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6cc:	e7e3      	b.n	800b696 <_printf_i+0x176>
 800b6ce:	0659      	lsls	r1, r3, #25
 800b6d0:	bf48      	it	mi
 800b6d2:	b2b6      	uxthmi	r6, r6
 800b6d4:	e7e6      	b.n	800b6a4 <_printf_i+0x184>
 800b6d6:	4615      	mov	r5, r2
 800b6d8:	e7bb      	b.n	800b652 <_printf_i+0x132>
 800b6da:	682b      	ldr	r3, [r5, #0]
 800b6dc:	6826      	ldr	r6, [r4, #0]
 800b6de:	1d18      	adds	r0, r3, #4
 800b6e0:	6961      	ldr	r1, [r4, #20]
 800b6e2:	6028      	str	r0, [r5, #0]
 800b6e4:	0635      	lsls	r5, r6, #24
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	d501      	bpl.n	800b6ee <_printf_i+0x1ce>
 800b6ea:	6019      	str	r1, [r3, #0]
 800b6ec:	e002      	b.n	800b6f4 <_printf_i+0x1d4>
 800b6ee:	0670      	lsls	r0, r6, #25
 800b6f0:	d5fb      	bpl.n	800b6ea <_printf_i+0x1ca>
 800b6f2:	8019      	strh	r1, [r3, #0]
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4615      	mov	r5, r2
 800b6f8:	6123      	str	r3, [r4, #16]
 800b6fa:	e7ba      	b.n	800b672 <_printf_i+0x152>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	2100      	movs	r1, #0
 800b700:	1d1a      	adds	r2, r3, #4
 800b702:	602a      	str	r2, [r5, #0]
 800b704:	681d      	ldr	r5, [r3, #0]
 800b706:	6862      	ldr	r2, [r4, #4]
 800b708:	4628      	mov	r0, r5
 800b70a:	f000 f82f 	bl	800b76c <memchr>
 800b70e:	b108      	cbz	r0, 800b714 <_printf_i+0x1f4>
 800b710:	1b40      	subs	r0, r0, r5
 800b712:	6060      	str	r0, [r4, #4]
 800b714:	6863      	ldr	r3, [r4, #4]
 800b716:	6123      	str	r3, [r4, #16]
 800b718:	2300      	movs	r3, #0
 800b71a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b71e:	e7a8      	b.n	800b672 <_printf_i+0x152>
 800b720:	462a      	mov	r2, r5
 800b722:	4649      	mov	r1, r9
 800b724:	4640      	mov	r0, r8
 800b726:	6923      	ldr	r3, [r4, #16]
 800b728:	47d0      	blx	sl
 800b72a:	3001      	adds	r0, #1
 800b72c:	d0ab      	beq.n	800b686 <_printf_i+0x166>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	079b      	lsls	r3, r3, #30
 800b732:	d413      	bmi.n	800b75c <_printf_i+0x23c>
 800b734:	68e0      	ldr	r0, [r4, #12]
 800b736:	9b03      	ldr	r3, [sp, #12]
 800b738:	4298      	cmp	r0, r3
 800b73a:	bfb8      	it	lt
 800b73c:	4618      	movlt	r0, r3
 800b73e:	e7a4      	b.n	800b68a <_printf_i+0x16a>
 800b740:	2301      	movs	r3, #1
 800b742:	4632      	mov	r2, r6
 800b744:	4649      	mov	r1, r9
 800b746:	4640      	mov	r0, r8
 800b748:	47d0      	blx	sl
 800b74a:	3001      	adds	r0, #1
 800b74c:	d09b      	beq.n	800b686 <_printf_i+0x166>
 800b74e:	3501      	adds	r5, #1
 800b750:	68e3      	ldr	r3, [r4, #12]
 800b752:	9903      	ldr	r1, [sp, #12]
 800b754:	1a5b      	subs	r3, r3, r1
 800b756:	42ab      	cmp	r3, r5
 800b758:	dcf2      	bgt.n	800b740 <_printf_i+0x220>
 800b75a:	e7eb      	b.n	800b734 <_printf_i+0x214>
 800b75c:	2500      	movs	r5, #0
 800b75e:	f104 0619 	add.w	r6, r4, #25
 800b762:	e7f5      	b.n	800b750 <_printf_i+0x230>
 800b764:	0800cc28 	.word	0x0800cc28
 800b768:	0800cc39 	.word	0x0800cc39

0800b76c <memchr>:
 800b76c:	4603      	mov	r3, r0
 800b76e:	b510      	push	{r4, lr}
 800b770:	b2c9      	uxtb	r1, r1
 800b772:	4402      	add	r2, r0
 800b774:	4293      	cmp	r3, r2
 800b776:	4618      	mov	r0, r3
 800b778:	d101      	bne.n	800b77e <memchr+0x12>
 800b77a:	2000      	movs	r0, #0
 800b77c:	e003      	b.n	800b786 <memchr+0x1a>
 800b77e:	7804      	ldrb	r4, [r0, #0]
 800b780:	3301      	adds	r3, #1
 800b782:	428c      	cmp	r4, r1
 800b784:	d1f6      	bne.n	800b774 <memchr+0x8>
 800b786:	bd10      	pop	{r4, pc}

0800b788 <memcpy>:
 800b788:	440a      	add	r2, r1
 800b78a:	4291      	cmp	r1, r2
 800b78c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b790:	d100      	bne.n	800b794 <memcpy+0xc>
 800b792:	4770      	bx	lr
 800b794:	b510      	push	{r4, lr}
 800b796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b79a:	4291      	cmp	r1, r2
 800b79c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7a0:	d1f9      	bne.n	800b796 <memcpy+0xe>
 800b7a2:	bd10      	pop	{r4, pc}

0800b7a4 <memmove>:
 800b7a4:	4288      	cmp	r0, r1
 800b7a6:	b510      	push	{r4, lr}
 800b7a8:	eb01 0402 	add.w	r4, r1, r2
 800b7ac:	d902      	bls.n	800b7b4 <memmove+0x10>
 800b7ae:	4284      	cmp	r4, r0
 800b7b0:	4623      	mov	r3, r4
 800b7b2:	d807      	bhi.n	800b7c4 <memmove+0x20>
 800b7b4:	1e43      	subs	r3, r0, #1
 800b7b6:	42a1      	cmp	r1, r4
 800b7b8:	d008      	beq.n	800b7cc <memmove+0x28>
 800b7ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7c2:	e7f8      	b.n	800b7b6 <memmove+0x12>
 800b7c4:	4601      	mov	r1, r0
 800b7c6:	4402      	add	r2, r0
 800b7c8:	428a      	cmp	r2, r1
 800b7ca:	d100      	bne.n	800b7ce <memmove+0x2a>
 800b7cc:	bd10      	pop	{r4, pc}
 800b7ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7d6:	e7f7      	b.n	800b7c8 <memmove+0x24>

0800b7d8 <_free_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	4605      	mov	r5, r0
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	d040      	beq.n	800b862 <_free_r+0x8a>
 800b7e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7e4:	1f0c      	subs	r4, r1, #4
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	bfb8      	it	lt
 800b7ea:	18e4      	addlt	r4, r4, r3
 800b7ec:	f000 f910 	bl	800ba10 <__malloc_lock>
 800b7f0:	4a1c      	ldr	r2, [pc, #112]	; (800b864 <_free_r+0x8c>)
 800b7f2:	6813      	ldr	r3, [r2, #0]
 800b7f4:	b933      	cbnz	r3, 800b804 <_free_r+0x2c>
 800b7f6:	6063      	str	r3, [r4, #4]
 800b7f8:	6014      	str	r4, [r2, #0]
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b800:	f000 b90c 	b.w	800ba1c <__malloc_unlock>
 800b804:	42a3      	cmp	r3, r4
 800b806:	d908      	bls.n	800b81a <_free_r+0x42>
 800b808:	6820      	ldr	r0, [r4, #0]
 800b80a:	1821      	adds	r1, r4, r0
 800b80c:	428b      	cmp	r3, r1
 800b80e:	bf01      	itttt	eq
 800b810:	6819      	ldreq	r1, [r3, #0]
 800b812:	685b      	ldreq	r3, [r3, #4]
 800b814:	1809      	addeq	r1, r1, r0
 800b816:	6021      	streq	r1, [r4, #0]
 800b818:	e7ed      	b.n	800b7f6 <_free_r+0x1e>
 800b81a:	461a      	mov	r2, r3
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	b10b      	cbz	r3, 800b824 <_free_r+0x4c>
 800b820:	42a3      	cmp	r3, r4
 800b822:	d9fa      	bls.n	800b81a <_free_r+0x42>
 800b824:	6811      	ldr	r1, [r2, #0]
 800b826:	1850      	adds	r0, r2, r1
 800b828:	42a0      	cmp	r0, r4
 800b82a:	d10b      	bne.n	800b844 <_free_r+0x6c>
 800b82c:	6820      	ldr	r0, [r4, #0]
 800b82e:	4401      	add	r1, r0
 800b830:	1850      	adds	r0, r2, r1
 800b832:	4283      	cmp	r3, r0
 800b834:	6011      	str	r1, [r2, #0]
 800b836:	d1e0      	bne.n	800b7fa <_free_r+0x22>
 800b838:	6818      	ldr	r0, [r3, #0]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	4401      	add	r1, r0
 800b83e:	6011      	str	r1, [r2, #0]
 800b840:	6053      	str	r3, [r2, #4]
 800b842:	e7da      	b.n	800b7fa <_free_r+0x22>
 800b844:	d902      	bls.n	800b84c <_free_r+0x74>
 800b846:	230c      	movs	r3, #12
 800b848:	602b      	str	r3, [r5, #0]
 800b84a:	e7d6      	b.n	800b7fa <_free_r+0x22>
 800b84c:	6820      	ldr	r0, [r4, #0]
 800b84e:	1821      	adds	r1, r4, r0
 800b850:	428b      	cmp	r3, r1
 800b852:	bf01      	itttt	eq
 800b854:	6819      	ldreq	r1, [r3, #0]
 800b856:	685b      	ldreq	r3, [r3, #4]
 800b858:	1809      	addeq	r1, r1, r0
 800b85a:	6021      	streq	r1, [r4, #0]
 800b85c:	6063      	str	r3, [r4, #4]
 800b85e:	6054      	str	r4, [r2, #4]
 800b860:	e7cb      	b.n	800b7fa <_free_r+0x22>
 800b862:	bd38      	pop	{r3, r4, r5, pc}
 800b864:	20001da0 	.word	0x20001da0

0800b868 <sbrk_aligned>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	4e0e      	ldr	r6, [pc, #56]	; (800b8a4 <sbrk_aligned+0x3c>)
 800b86c:	460c      	mov	r4, r1
 800b86e:	6831      	ldr	r1, [r6, #0]
 800b870:	4605      	mov	r5, r0
 800b872:	b911      	cbnz	r1, 800b87a <sbrk_aligned+0x12>
 800b874:	f000 f8bc 	bl	800b9f0 <_sbrk_r>
 800b878:	6030      	str	r0, [r6, #0]
 800b87a:	4621      	mov	r1, r4
 800b87c:	4628      	mov	r0, r5
 800b87e:	f000 f8b7 	bl	800b9f0 <_sbrk_r>
 800b882:	1c43      	adds	r3, r0, #1
 800b884:	d00a      	beq.n	800b89c <sbrk_aligned+0x34>
 800b886:	1cc4      	adds	r4, r0, #3
 800b888:	f024 0403 	bic.w	r4, r4, #3
 800b88c:	42a0      	cmp	r0, r4
 800b88e:	d007      	beq.n	800b8a0 <sbrk_aligned+0x38>
 800b890:	1a21      	subs	r1, r4, r0
 800b892:	4628      	mov	r0, r5
 800b894:	f000 f8ac 	bl	800b9f0 <_sbrk_r>
 800b898:	3001      	adds	r0, #1
 800b89a:	d101      	bne.n	800b8a0 <sbrk_aligned+0x38>
 800b89c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	20001da4 	.word	0x20001da4

0800b8a8 <_malloc_r>:
 800b8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ac:	1ccd      	adds	r5, r1, #3
 800b8ae:	f025 0503 	bic.w	r5, r5, #3
 800b8b2:	3508      	adds	r5, #8
 800b8b4:	2d0c      	cmp	r5, #12
 800b8b6:	bf38      	it	cc
 800b8b8:	250c      	movcc	r5, #12
 800b8ba:	2d00      	cmp	r5, #0
 800b8bc:	4607      	mov	r7, r0
 800b8be:	db01      	blt.n	800b8c4 <_malloc_r+0x1c>
 800b8c0:	42a9      	cmp	r1, r5
 800b8c2:	d905      	bls.n	800b8d0 <_malloc_r+0x28>
 800b8c4:	230c      	movs	r3, #12
 800b8c6:	2600      	movs	r6, #0
 800b8c8:	603b      	str	r3, [r7, #0]
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d0:	4e2e      	ldr	r6, [pc, #184]	; (800b98c <_malloc_r+0xe4>)
 800b8d2:	f000 f89d 	bl	800ba10 <__malloc_lock>
 800b8d6:	6833      	ldr	r3, [r6, #0]
 800b8d8:	461c      	mov	r4, r3
 800b8da:	bb34      	cbnz	r4, 800b92a <_malloc_r+0x82>
 800b8dc:	4629      	mov	r1, r5
 800b8de:	4638      	mov	r0, r7
 800b8e0:	f7ff ffc2 	bl	800b868 <sbrk_aligned>
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	d14d      	bne.n	800b986 <_malloc_r+0xde>
 800b8ea:	6834      	ldr	r4, [r6, #0]
 800b8ec:	4626      	mov	r6, r4
 800b8ee:	2e00      	cmp	r6, #0
 800b8f0:	d140      	bne.n	800b974 <_malloc_r+0xcc>
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	eb04 0803 	add.w	r8, r4, r3
 800b8fc:	f000 f878 	bl	800b9f0 <_sbrk_r>
 800b900:	4580      	cmp	r8, r0
 800b902:	d13a      	bne.n	800b97a <_malloc_r+0xd2>
 800b904:	6821      	ldr	r1, [r4, #0]
 800b906:	3503      	adds	r5, #3
 800b908:	1a6d      	subs	r5, r5, r1
 800b90a:	f025 0503 	bic.w	r5, r5, #3
 800b90e:	3508      	adds	r5, #8
 800b910:	2d0c      	cmp	r5, #12
 800b912:	bf38      	it	cc
 800b914:	250c      	movcc	r5, #12
 800b916:	4638      	mov	r0, r7
 800b918:	4629      	mov	r1, r5
 800b91a:	f7ff ffa5 	bl	800b868 <sbrk_aligned>
 800b91e:	3001      	adds	r0, #1
 800b920:	d02b      	beq.n	800b97a <_malloc_r+0xd2>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	442b      	add	r3, r5
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	e00e      	b.n	800b948 <_malloc_r+0xa0>
 800b92a:	6822      	ldr	r2, [r4, #0]
 800b92c:	1b52      	subs	r2, r2, r5
 800b92e:	d41e      	bmi.n	800b96e <_malloc_r+0xc6>
 800b930:	2a0b      	cmp	r2, #11
 800b932:	d916      	bls.n	800b962 <_malloc_r+0xba>
 800b934:	1961      	adds	r1, r4, r5
 800b936:	42a3      	cmp	r3, r4
 800b938:	6025      	str	r5, [r4, #0]
 800b93a:	bf18      	it	ne
 800b93c:	6059      	strne	r1, [r3, #4]
 800b93e:	6863      	ldr	r3, [r4, #4]
 800b940:	bf08      	it	eq
 800b942:	6031      	streq	r1, [r6, #0]
 800b944:	5162      	str	r2, [r4, r5]
 800b946:	604b      	str	r3, [r1, #4]
 800b948:	4638      	mov	r0, r7
 800b94a:	f104 060b 	add.w	r6, r4, #11
 800b94e:	f000 f865 	bl	800ba1c <__malloc_unlock>
 800b952:	f026 0607 	bic.w	r6, r6, #7
 800b956:	1d23      	adds	r3, r4, #4
 800b958:	1af2      	subs	r2, r6, r3
 800b95a:	d0b6      	beq.n	800b8ca <_malloc_r+0x22>
 800b95c:	1b9b      	subs	r3, r3, r6
 800b95e:	50a3      	str	r3, [r4, r2]
 800b960:	e7b3      	b.n	800b8ca <_malloc_r+0x22>
 800b962:	6862      	ldr	r2, [r4, #4]
 800b964:	42a3      	cmp	r3, r4
 800b966:	bf0c      	ite	eq
 800b968:	6032      	streq	r2, [r6, #0]
 800b96a:	605a      	strne	r2, [r3, #4]
 800b96c:	e7ec      	b.n	800b948 <_malloc_r+0xa0>
 800b96e:	4623      	mov	r3, r4
 800b970:	6864      	ldr	r4, [r4, #4]
 800b972:	e7b2      	b.n	800b8da <_malloc_r+0x32>
 800b974:	4634      	mov	r4, r6
 800b976:	6876      	ldr	r6, [r6, #4]
 800b978:	e7b9      	b.n	800b8ee <_malloc_r+0x46>
 800b97a:	230c      	movs	r3, #12
 800b97c:	4638      	mov	r0, r7
 800b97e:	603b      	str	r3, [r7, #0]
 800b980:	f000 f84c 	bl	800ba1c <__malloc_unlock>
 800b984:	e7a1      	b.n	800b8ca <_malloc_r+0x22>
 800b986:	6025      	str	r5, [r4, #0]
 800b988:	e7de      	b.n	800b948 <_malloc_r+0xa0>
 800b98a:	bf00      	nop
 800b98c:	20001da0 	.word	0x20001da0

0800b990 <_realloc_r>:
 800b990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b994:	4680      	mov	r8, r0
 800b996:	4614      	mov	r4, r2
 800b998:	460e      	mov	r6, r1
 800b99a:	b921      	cbnz	r1, 800b9a6 <_realloc_r+0x16>
 800b99c:	4611      	mov	r1, r2
 800b99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a2:	f7ff bf81 	b.w	800b8a8 <_malloc_r>
 800b9a6:	b92a      	cbnz	r2, 800b9b4 <_realloc_r+0x24>
 800b9a8:	f7ff ff16 	bl	800b7d8 <_free_r>
 800b9ac:	4625      	mov	r5, r4
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b4:	f000 f838 	bl	800ba28 <_malloc_usable_size_r>
 800b9b8:	4284      	cmp	r4, r0
 800b9ba:	4607      	mov	r7, r0
 800b9bc:	d802      	bhi.n	800b9c4 <_realloc_r+0x34>
 800b9be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9c2:	d812      	bhi.n	800b9ea <_realloc_r+0x5a>
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	f7ff ff6e 	bl	800b8a8 <_malloc_r>
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d0ed      	beq.n	800b9ae <_realloc_r+0x1e>
 800b9d2:	42bc      	cmp	r4, r7
 800b9d4:	4622      	mov	r2, r4
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	bf28      	it	cs
 800b9da:	463a      	movcs	r2, r7
 800b9dc:	f7ff fed4 	bl	800b788 <memcpy>
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	f7ff fef8 	bl	800b7d8 <_free_r>
 800b9e8:	e7e1      	b.n	800b9ae <_realloc_r+0x1e>
 800b9ea:	4635      	mov	r5, r6
 800b9ec:	e7df      	b.n	800b9ae <_realloc_r+0x1e>
	...

0800b9f0 <_sbrk_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	4d05      	ldr	r5, [pc, #20]	; (800ba0c <_sbrk_r+0x1c>)
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	602b      	str	r3, [r5, #0]
 800b9fc:	f7f5 fbce 	bl	800119c <_sbrk>
 800ba00:	1c43      	adds	r3, r0, #1
 800ba02:	d102      	bne.n	800ba0a <_sbrk_r+0x1a>
 800ba04:	682b      	ldr	r3, [r5, #0]
 800ba06:	b103      	cbz	r3, 800ba0a <_sbrk_r+0x1a>
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	20001da8 	.word	0x20001da8

0800ba10 <__malloc_lock>:
 800ba10:	4801      	ldr	r0, [pc, #4]	; (800ba18 <__malloc_lock+0x8>)
 800ba12:	f000 b811 	b.w	800ba38 <__retarget_lock_acquire_recursive>
 800ba16:	bf00      	nop
 800ba18:	20001dac 	.word	0x20001dac

0800ba1c <__malloc_unlock>:
 800ba1c:	4801      	ldr	r0, [pc, #4]	; (800ba24 <__malloc_unlock+0x8>)
 800ba1e:	f000 b80c 	b.w	800ba3a <__retarget_lock_release_recursive>
 800ba22:	bf00      	nop
 800ba24:	20001dac 	.word	0x20001dac

0800ba28 <_malloc_usable_size_r>:
 800ba28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba2c:	1f18      	subs	r0, r3, #4
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	bfbc      	itt	lt
 800ba32:	580b      	ldrlt	r3, [r1, r0]
 800ba34:	18c0      	addlt	r0, r0, r3
 800ba36:	4770      	bx	lr

0800ba38 <__retarget_lock_acquire_recursive>:
 800ba38:	4770      	bx	lr

0800ba3a <__retarget_lock_release_recursive>:
 800ba3a:	4770      	bx	lr

0800ba3c <_init>:
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3e:	bf00      	nop
 800ba40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba42:	bc08      	pop	{r3}
 800ba44:	469e      	mov	lr, r3
 800ba46:	4770      	bx	lr

0800ba48 <_fini>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr
