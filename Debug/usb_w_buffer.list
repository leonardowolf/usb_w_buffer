
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d204  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f5c  0800d310  0800d310  0001d310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e26c  0800e26c  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  0800e26c  0800e26c  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e26c  0800e26c  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e26c  0800e26c  0001e26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e270  0800e270  0001e270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0800e274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac8  20000418  0800e68c  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee0  0800e68c  00021ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e8da  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b31  00000000  00000000  0005ed1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022e0  00000000  00000000  00064850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe8  00000000  00000000  00066b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df94  00000000  00000000  00068b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022ea0  00000000  00000000  00086aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fb41  00000000  00000000  000a994c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014948d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095b0  00000000  00000000  001494e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000418 	.word	0x20000418
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d2f8 	.word	0x0800d2f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000041c 	.word	0x2000041c
 8000148:	0800d2f8 	.word	0x0800d2f8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern TIM_HandleTypeDef htim1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f003 fe7a 	bl	8003e84 <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f003 fe75 	bl	8003e84 <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f004 f970 	bl	8004488 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f004 f969 	bl	8004488 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f006 fb5c 	bl	80068e8 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f004 f925 	bl	8004488 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000063c 	.word	0x2000063c
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Kpd_Irqv_Init();
 800025c:	f000 ff38 	bl	80010d0 <Kpd_Irqv_Init>
	init_custom_character_db();
 8000260:	f000 fae0 	bl	8000824 <init_custom_character_db>
	enable_backlight(true);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fcb5 	bl	8000bd4 <enable_backlight>
	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <Start_APP+0x6c>)
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <Start_APP+0x70>)
 800026e:	4917      	ldr	r1, [pc, #92]	; (80002cc <Start_APP+0x74>)
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <Start_APP+0x78>)
 8000272:	f001 ff19 	bl	80020a8 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 8000276:	4816      	ldr	r0, [pc, #88]	; (80002d0 <Start_APP+0x78>)
 8000278:	f003 fccd 	bl	8003c16 <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 800027c:	2100      	movs	r1, #0
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <Start_APP+0x78>)
 8000280:	f003 fcd8 	bl	8003c34 <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 8000284:	2004      	movs	r0, #4
 8000286:	f000 fcf7 	bl	8000c78 <set_contrast>

		u8g2_SetBitmapMode(&u8g2,0);
 800028a:	2100      	movs	r1, #0
 800028c:	4810      	ldr	r0, [pc, #64]	; (80002d0 <Start_APP+0x78>)
 800028e:	f001 fb71 	bl	8001974 <u8g2_SetBitmapMode>


		u8g2_SetDrawColor(&u8g2, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	480e      	ldr	r0, [pc, #56]	; (80002d0 <Start_APP+0x78>)
 8000296:	f002 ff21 	bl	80030dc <u8g2_SetDrawColor>
		u8g2_SetFontMode(&u8g2, 0);
 800029a:	2100      	movs	r1, #0
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <Start_APP+0x78>)
 800029e:	f002 fb9d 	bl	80029dc <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <Start_APP+0x78>)
 80002a4:	f002 fd08 	bl	8002cb8 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_crox2c_mf);
 80002a8:	490a      	ldr	r1, [pc, #40]	; (80002d4 <Start_APP+0x7c>)
 80002aa:	4809      	ldr	r0, [pc, #36]	; (80002d0 <Start_APP+0x78>)
 80002ac:	f002 fd12 	bl	8002cd4 <u8g2_SetFont>
		disp_splash();
 80002b0:	f000 fcf6 	bl	8000ca0 <disp_splash>
		text_insertion_point(0 , 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fad0 	bl	800085c <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002bc:	f000 faa2 	bl	8000804 <monitor_begin>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	0800015d 	.word	0x0800015d
 80002c8:	080001cd 	.word	0x080001cd
 80002cc:	0800e1c8 	.word	0x0800e1c8
 80002d0:	20000434 	.word	0x20000434
 80002d4:	0800d3e4 	.word	0x0800d3e4

080002d8 <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_FS(cmd, strlen(buf)) == USBD_OK)
 80002e0:	bf00      	nop
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f7ff ff32 	bl	800014c <strlen>
 80002e8:	4603      	mov	r3, r0
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <monitor_send_string+0x2c>)
 80002f0:	f00b ff36 	bl	800c160 <CDC_Transmit_FS>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f3      	beq.n	80002e2 <monitor_send_string+0xa>
		;
	//isso é a melhor forma de try til it works que eu consegui pensar
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200004c8 	.word	0x200004c8

08000308 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000318:	f006 fd6a 	bl	8006df0 <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 800031c:	f000 f98a 	bl	8000634 <monitor_interrupt>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200005b8 	.word	0x200005b8
 800032c:	200006dc 	.word	0x200006dc

08000330 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af02      	add	r7, sp, #8
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 800033a:	2204      	movs	r2, #4
 800033c:	49a0      	ldr	r1, [pc, #640]	; (80005c0 <monitor_check_cmd+0x290>)
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f00c fb68 	bl	800ca14 <strncmp>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d108      	bne.n	800035c <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 800034a:	4a9e      	ldr	r2, [pc, #632]	; (80005c4 <monitor_check_cmd+0x294>)
 800034c:	2190      	movs	r1, #144	; 0x90
 800034e:	489e      	ldr	r0, [pc, #632]	; (80005c8 <monitor_check_cmd+0x298>)
 8000350:	f00c fb2c 	bl	800c9ac <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000354:	489c      	ldr	r0, [pc, #624]	; (80005c8 <monitor_check_cmd+0x298>)
 8000356:	f7ff ffbf 	bl	80002d8 <monitor_send_string>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
		}

	}
}
 800035a:	e12c      	b.n	80005b6 <monitor_check_cmd+0x286>
	else if (cmd[0] == LCD_CMD) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2bfe      	cmp	r3, #254	; 0xfe
 8000362:	f040 8128 	bne.w	80005b6 <monitor_check_cmd+0x286>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b31      	cmp	r3, #49	; 0x31
 800036e:	d109      	bne.n	8000384 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000370:	4b96      	ldr	r3, [pc, #600]	; (80005cc <monitor_check_cmd+0x29c>)
 8000372:	4a97      	ldr	r2, [pc, #604]	; (80005d0 <monitor_check_cmd+0x2a0>)
 8000374:	2190      	movs	r1, #144	; 0x90
 8000376:	4894      	ldr	r0, [pc, #592]	; (80005c8 <monitor_check_cmd+0x298>)
 8000378:	f00c fb18 	bl	800c9ac <sniprintf>
			monitor_send_string(ans);
 800037c:	4892      	ldr	r0, [pc, #584]	; (80005c8 <monitor_check_cmd+0x298>)
 800037e:	f7ff ffab 	bl	80002d8 <monitor_send_string>
}
 8000382:	e118      	b.n	80005b6 <monitor_check_cmd+0x286>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b30      	cmp	r3, #48	; 0x30
 800038c:	d109      	bne.n	80003a2 <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 800038e:	4b8f      	ldr	r3, [pc, #572]	; (80005cc <monitor_check_cmd+0x29c>)
 8000390:	4a90      	ldr	r2, [pc, #576]	; (80005d4 <monitor_check_cmd+0x2a4>)
 8000392:	2190      	movs	r1, #144	; 0x90
 8000394:	488c      	ldr	r0, [pc, #560]	; (80005c8 <monitor_check_cmd+0x298>)
 8000396:	f00c fb09 	bl	800c9ac <sniprintf>
			monitor_send_string(ans);
 800039a:	488b      	ldr	r0, [pc, #556]	; (80005c8 <monitor_check_cmd+0x298>)
 800039c:	f7ff ff9c 	bl	80002d8 <monitor_send_string>
}
 80003a0:	e109      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_SOFT_RESET) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3301      	adds	r3, #1
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b56      	cmp	r3, #86	; 0x56
 80003aa:	d102      	bne.n	80003b2 <monitor_check_cmd+0x82>
			lcd_soft_reset();
 80003ac:	f000 fbfe 	bl	8000bac <lcd_soft_reset>
}
 80003b0:	e101      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3301      	adds	r3, #1
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b42      	cmp	r3, #66	; 0x42
 80003ba:	d103      	bne.n	80003c4 <monitor_check_cmd+0x94>
			enable_backlight(true);
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 fc09 	bl	8000bd4 <enable_backlight>
}
 80003c2:	e0f8      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b46      	cmp	r3, #70	; 0x46
 80003cc:	d103      	bne.n	80003d6 <monitor_check_cmd+0xa6>
			enable_backlight(false);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 fc00 	bl	8000bd4 <enable_backlight>
}
 80003d4:	e0ef      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_BACKLIGHT_BRIGHTNESS) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3301      	adds	r3, #1
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b41      	cmp	r3, #65	; 0x41
 80003de:	d106      	bne.n	80003ee <monitor_check_cmd+0xbe>
			set_backlight_brightness(cmd[2]);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3302      	adds	r3, #2
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fc1e 	bl	8000c28 <set_backlight_brightness>
}
 80003ec:	e0e3      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3301      	adds	r3, #1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b66      	cmp	r3, #102	; 0x66
 80003f6:	d103      	bne.n	8000400 <monitor_check_cmd+0xd0>
			inverse_text(true);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 fa5b 	bl	80008b4 <inverse_text>
}
 80003fe:	e0da      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3301      	adds	r3, #1
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b67      	cmp	r3, #103	; 0x67
 8000408:	d103      	bne.n	8000412 <monitor_check_cmd+0xe2>
			inverse_text(false);
 800040a:	2000      	movs	r0, #0
 800040c:	f000 fa52 	bl	80008b4 <inverse_text>
}
 8000410:	e0d1      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_CLEAR) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3301      	adds	r3, #1
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b58      	cmp	r3, #88	; 0x58
 800041a:	d102      	bne.n	8000422 <monitor_check_cmd+0xf2>
			clear_display();
 800041c:	f000 fbcc 	bl	8000bb8 <clear_display>
}
 8000420:	e0c9      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3301      	adds	r3, #1
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b70      	cmp	r3, #112	; 0x70
 800042a:	d10a      	bne.n	8000442 <monitor_check_cmd+0x112>
			put_pixel(cmd[3], cmd[2]);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3303      	adds	r3, #3
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3302      	adds	r3, #2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f000 fb30 	bl	8000aa0 <put_pixel>
}
 8000440:	e0b9      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b71      	cmp	r3, #113	; 0x71
 800044a:	d10a      	bne.n	8000462 <monitor_check_cmd+0x132>
			erase_pixel(cmd[3], cmd[2]);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3303      	adds	r3, #3
 8000450:	781a      	ldrb	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3302      	adds	r3, #2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4619      	mov	r1, r3
 800045a:	4610      	mov	r0, r2
 800045c:	f000 fb3e 	bl	8000adc <erase_pixel>
}
 8000460:	e0a9      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_PUT_BYTE) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b3e      	cmp	r3, #62	; 0x3e
 800046a:	d10c      	bne.n	8000486 <monitor_check_cmd+0x156>
			put_byte(cmd[2],cmd[3], cmd[4]);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3302      	adds	r3, #2
 8000470:	7818      	ldrb	r0, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3303      	adds	r3, #3
 8000476:	7819      	ldrb	r1, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3304      	adds	r3, #4
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	461a      	mov	r2, r3
 8000480:	f000 fb4a 	bl	8000b18 <put_byte>
}
 8000484:	e097      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DEFINE_CUSTOM_CHARACTER) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3301      	adds	r3, #1
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b4e      	cmp	r3, #78	; 0x4e
 800048e:	d103      	bne.n	8000498 <monitor_check_cmd+0x168>
					define_custom_character(cmd);
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 fa37 	bl	8000904 <define_custom_character>
}
 8000496:	e08e      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3301      	adds	r3, #1
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b43      	cmp	r3, #67	; 0x43
 80004a0:	d103      	bne.n	80004aa <monitor_check_cmd+0x17a>
			auto_line_wrap(true);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 f9ca 	bl	800083c <auto_line_wrap>
}
 80004a8:	e085      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3301      	adds	r3, #1
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b44      	cmp	r3, #68	; 0x44
 80004b2:	d103      	bne.n	80004bc <monitor_check_cmd+0x18c>
			auto_line_wrap(false);
 80004b4:	2000      	movs	r0, #0
 80004b6:	f000 f9c1 	bl	800083c <auto_line_wrap>
}
 80004ba:	e07c      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_SET_INSERT) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3301      	adds	r3, #1
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b47      	cmp	r3, #71	; 0x47
 80004c4:	d10a      	bne.n	80004dc <monitor_check_cmd+0x1ac>
			text_insertion_point(cmd[2], cmd[3]);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3302      	adds	r3, #2
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3303      	adds	r3, #3
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4610      	mov	r0, r2
 80004d6:	f000 f9c1 	bl	800085c <text_insertion_point>
}
 80004da:	e06c      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_HOME_INSERT) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b48      	cmp	r3, #72	; 0x48
 80004e4:	d104      	bne.n	80004f0 <monitor_check_cmd+0x1c0>
			text_insertion_point(0, 0);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f9b7 	bl	800085c <text_insertion_point>
}
 80004ee:	e062      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_READ_GPI) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b65      	cmp	r3, #101	; 0x65
 80004f8:	d114      	bne.n	8000524 <monitor_check_cmd+0x1f4>
			if (cmd[2] == '0') {
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3302      	adds	r3, #2
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b30      	cmp	r3, #48	; 0x30
 8000502:	d158      	bne.n	80005b6 <monitor_check_cmd+0x286>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000504:	4b34      	ldr	r3, [pc, #208]	; (80005d8 <monitor_check_cmd+0x2a8>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
						ddp[1]);
 800050a:	4b33      	ldr	r3, [pc, #204]	; (80005d8 <monitor_check_cmd+0x2a8>)
 800050c:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	4613      	mov	r3, r2
 8000512:	4a32      	ldr	r2, [pc, #200]	; (80005dc <monitor_check_cmd+0x2ac>)
 8000514:	2190      	movs	r1, #144	; 0x90
 8000516:	482c      	ldr	r0, [pc, #176]	; (80005c8 <monitor_check_cmd+0x298>)
 8000518:	f00c fa48 	bl	800c9ac <sniprintf>
				monitor_send_string(ans);
 800051c:	482a      	ldr	r0, [pc, #168]	; (80005c8 <monitor_check_cmd+0x298>)
 800051e:	f7ff fedb 	bl	80002d8 <monitor_send_string>
}
 8000522:	e048      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3301      	adds	r3, #1
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b69      	cmp	r3, #105	; 0x69
 800052c:	d102      	bne.n	8000534 <monitor_check_cmd+0x204>
			disp_splash();
 800052e:	f000 fbb7 	bl	8000ca0 <disp_splash>
}
 8000532:	e040      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3301      	adds	r3, #1
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b76      	cmp	r3, #118	; 0x76
 800053c:	d102      	bne.n	8000544 <monitor_check_cmd+0x214>
			def_thick_v_bar();
 800053e:	f000 f9c9 	bl	80008d4 <def_thick_v_bar>
}
 8000542:	e038      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b73      	cmp	r3, #115	; 0x73
 800054c:	d102      	bne.n	8000554 <monitor_check_cmd+0x224>
			def_thin_v_bar();
 800054e:	f000 f9cd 	bl	80008ec <def_thin_v_bar>
}
 8000552:	e030      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3301      	adds	r3, #1
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b3d      	cmp	r3, #61	; 0x3d
 800055c:	d10a      	bne.n	8000574 <monitor_check_cmd+0x244>
			draw_v_bar_graph(cmd[2], cmd[3]);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	3302      	adds	r3, #2
 8000562:	781a      	ldrb	r2, [r3, #0]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3303      	adds	r3, #3
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4619      	mov	r1, r3
 800056c:	4610      	mov	r0, r2
 800056e:	f000 f9fd 	bl	800096c <draw_v_bar_graph>
}
 8000572:	e020      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3301      	adds	r3, #1
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b3d      	cmp	r3, #61	; 0x3d
 800057c:	d10a      	bne.n	8000594 <monitor_check_cmd+0x264>
			erase_v_bar_graph(cmd[2], cmd[3]);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	3302      	adds	r3, #2
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3303      	adds	r3, #3
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4619      	mov	r1, r3
 800058c:	4610      	mov	r0, r2
 800058e:	f000 fa1d 	bl	80009cc <erase_v_bar_graph>
}
 8000592:	e010      	b.n	80005b6 <monitor_check_cmd+0x286>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b7c      	cmp	r3, #124	; 0x7c
 800059c:	d10b      	bne.n	80005b6 <monitor_check_cmd+0x286>
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3302      	adds	r3, #2
 80005a2:	7818      	ldrb	r0, [r3, #0]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3303      	adds	r3, #3
 80005a8:	7819      	ldrb	r1, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3304      	adds	r3, #4
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	f000 fa3b 	bl	8000a2c <draw_h_bar_graph>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	0800d310 	.word	0x0800d310
 80005c4:	0800d318 	.word	0x0800d318
 80005c8:	20000558 	.word	0x20000558
 80005cc:	0800d350 	.word	0x0800d350
 80005d0:	0800d354 	.word	0x0800d354
 80005d4:	0800d36c 	.word	0x0800d36c
 80005d8:	20000000 	.word	0x20000000
 80005dc:	0800d380 	.word	0x0800d380

080005e0 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]

	memcpy(cmd + size, buf, len);
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <app_usb_cbk+0x44>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <app_usb_cbk+0x48>)
 80005f0:	4413      	add	r3, r2
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00c f9c2 	bl	800c980 <memcpy>
	size += len;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <app_usb_cbk+0x44>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	4413      	add	r3, r2
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <app_usb_cbk+0x44>)
 8000606:	6013      	str	r3, [r2, #0]

	if (size >= CMD_BUF_SIZE) {
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <app_usb_cbk+0x44>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b8f      	cmp	r3, #143	; 0x8f
 800060e:	d902      	bls.n	8000616 <app_usb_cbk+0x36>
		new_cmd = true;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <app_usb_cbk+0x4c>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <app_usb_cbk+0x50>)
 8000618:	f006 fb98 	bl	8006d4c <HAL_TIM_Base_Start_IT>

}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200005b4 	.word	0x200005b4
 8000628:	200004c8 	.word	0x200004c8
 800062c:	200005b8 	.word	0x200005b8
 8000630:	200006dc 	.word	0x200006dc

08000634 <monitor_interrupt>:

void monitor_interrupt(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	if (new_cmd) {
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <monitor_interrupt+0x1c0>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	f000 80d4 	beq.w	80007ec <monitor_interrupt+0x1b8>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 8000648:	4b6b      	ldr	r3, [pc, #428]	; (80007f8 <monitor_interrupt+0x1c4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 800064e:	2300      	movs	r3, #0
 8000650:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 8000652:	2300      	movs	r3, #0
 8000654:	70fb      	strb	r3, [r7, #3]

//		o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
//		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
//		 começa o inicializador

		for (offset = 0; offset <= size; offset++) {
 8000656:	2300      	movs	r3, #0
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	e0aa      	b.n	80007b2 <monitor_interrupt+0x17e>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4a67      	ldr	r2, [pc, #412]	; (80007fc <monitor_interrupt+0x1c8>)
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bfd      	cmp	r3, #253	; 0xfd
 8000666:	d110      	bne.n	800068a <monitor_interrupt+0x56>
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3301      	adds	r3, #1
 800066c:	4a63      	ldr	r2, [pc, #396]	; (80007fc <monitor_interrupt+0x1c8>)
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2bfe      	cmp	r3, #254	; 0xfe
 8000674:	d009      	beq.n	800068a <monitor_interrupt+0x56>
					&& *(cmd + offset + 1) != 20) {
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	3301      	adds	r3, #1
 800067a:	4a60      	ldr	r2, [pc, #384]	; (80007fc <monitor_interrupt+0x1c8>)
 800067c:	4413      	add	r3, r2
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b14      	cmp	r3, #20
 8000682:	d002      	beq.n	800068a <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	3301      	adds	r3, #1
 8000688:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00c      	beq.n	80006aa <monitor_interrupt+0x76>
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4a5a      	ldr	r2, [pc, #360]	; (80007fc <monitor_interrupt+0x1c8>)
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2bfe      	cmp	r3, #254	; 0xfe
 800069a:	d106      	bne.n	80006aa <monitor_interrupt+0x76>
					&& *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	3b01      	subs	r3, #1
 80006a0:	4a56      	ldr	r2, [pc, #344]	; (80007fc <monitor_interrupt+0x1c8>)
 80006a2:	4413      	add	r3, r2
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2bfd      	cmp	r3, #253	; 0xfd
 80006a8:	d104      	bne.n	80006b4 <monitor_interrupt+0x80>
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	4b52      	ldr	r3, [pc, #328]	; (80007f8 <monitor_interrupt+0x1c4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d103      	bne.n	80006bc <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o fim de outro
				printable = true;
 80006b4:	2301      	movs	r3, #1
 80006b6:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d029      	beq.n	8000716 <monitor_interrupt+0xe2>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	4a4d      	ldr	r2, [pc, #308]	; (80007fc <monitor_interrupt+0x1c8>)
 80006c6:	1899      	adds	r1, r3, r2
 80006c8:	797a      	ldrb	r2, [r7, #5]
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	484b      	ldr	r0, [pc, #300]	; (8000800 <monitor_interrupt+0x1cc>)
 80006d2:	f00c f9b3 	bl	800ca3c <strncpy>
				CDC_Transmit_FS(ans, end_print - bgn_print);
 80006d6:	797b      	ldrb	r3, [r7, #5]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	b29b      	uxth	r3, r3
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	4619      	mov	r1, r3
 80006e4:	4846      	ldr	r0, [pc, #280]	; (8000800 <monitor_interrupt+0x1cc>)
 80006e6:	f00b fd3b 	bl	800c160 <CDC_Transmit_FS>
				lcd_print(ans);
 80006ea:	4845      	ldr	r0, [pc, #276]	; (8000800 <monitor_interrupt+0x1cc>)
 80006ec:	f000 fb88 	bl	8000e00 <lcd_print>
				memset(ans, 0, ANS_BUF_SIZE);
 80006f0:	225a      	movs	r2, #90	; 0x5a
 80006f2:	2100      	movs	r1, #0
 80006f4:	4842      	ldr	r0, [pc, #264]	; (8000800 <monitor_interrupt+0x1cc>)
 80006f6:	f00c f951 	bl	800c99c <memset>
				printable = !printable;
 80006fa:	78fb      	ldrb	r3, [r7, #3]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	bf14      	ite	ne
 8000700:	2301      	movne	r3, #1
 8000702:	2300      	moveq	r3, #0
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f083 0301 	eor.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	70fb      	strb	r3, [r7, #3]
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	70fb      	strb	r3, [r7, #3]
			}

			if (*(cmd + offset) == LCD_CMD) {
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4a38      	ldr	r2, [pc, #224]	; (80007fc <monitor_interrupt+0x1c8>)
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2bfe      	cmp	r3, #254	; 0xfe
 8000720:	d117      	bne.n	8000752 <monitor_interrupt+0x11e>
				monitor_check_cmd((char*) cmd + offset, size);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4a35      	ldr	r2, [pc, #212]	; (80007fc <monitor_interrupt+0x1c8>)
 8000726:	4413      	add	r3, r2
 8000728:	4a33      	ldr	r2, [pc, #204]	; (80007f8 <monitor_interrupt+0x1c4>)
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fdfe 	bl	8000330 <monitor_check_cmd>
				is_cmd = !is_cmd;
 8000734:	793b      	ldrb	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	bf14      	ite	ne
 800073a:	2301      	movne	r3, #1
 800073c:	2300      	moveq	r3, #0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	713b      	strb	r3, [r7, #4]
 8000748:	793b      	ldrb	r3, [r7, #4]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	713b      	strb	r3, [r7, #4]
 8000750:	e013      	b.n	800077a <monitor_interrupt+0x146>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4a29      	ldr	r2, [pc, #164]	; (80007fc <monitor_interrupt+0x1c8>)
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2bfd      	cmp	r3, #253	; 0xfd
 800075c:	d10d      	bne.n	800077a <monitor_interrupt+0x146>
				is_cmd = !is_cmd;
 800075e:	793b      	ldrb	r3, [r7, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	bf14      	ite	ne
 8000764:	2301      	movne	r3, #1
 8000766:	2300      	moveq	r3, #0
 8000768:	b2db      	uxtb	r3, r3
 800076a:	f083 0301 	eor.w	r3, r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	713b      	strb	r3, [r7, #4]
 8000772:	793b      	ldrb	r3, [r7, #4]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	713b      	strb	r3, [r7, #4]
			}

			if(!is_cmd && *(cmd + offset)>=1 && *(cmd + offset)<=10) {
 800077a:	793b      	ldrb	r3, [r7, #4]
 800077c:	f083 0301 	eor.w	r3, r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d012      	beq.n	80007ac <monitor_interrupt+0x178>
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <monitor_interrupt+0x1c8>)
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00c      	beq.n	80007ac <monitor_interrupt+0x178>
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4a19      	ldr	r2, [pc, #100]	; (80007fc <monitor_interrupt+0x1c8>)
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b0a      	cmp	r3, #10
 800079c:	d806      	bhi.n	80007ac <monitor_interrupt+0x178>
				custom_character_dealer(*(cmd + offset));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4a16      	ldr	r2, [pc, #88]	; (80007fc <monitor_interrupt+0x1c8>)
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fc50 	bl	800104c <custom_character_dealer>
		for (offset = 0; offset <= size; offset++) {
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	3301      	adds	r3, #1
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <monitor_interrupt+0x1c4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	f67f af4f 	bls.w	800065c <monitor_interrupt+0x28>
			}
		}
		size = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <monitor_interrupt+0x1c4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 80007c4:	2290      	movs	r2, #144	; 0x90
 80007c6:	2100      	movs	r1, #0
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <monitor_interrupt+0x1c8>)
 80007ca:	f00c f8e7 	bl	800c99c <memset>
		new_cmd = !new_cmd;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <monitor_interrupt+0x1c0>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf14      	ite	ne
 80007d6:	2301      	movne	r3, #1
 80007d8:	2300      	moveq	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	f083 0301 	eor.w	r3, r3, #1
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <monitor_interrupt+0x1c0>)
 80007ea:	701a      	strb	r2, [r3, #0]
	}
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200005b8 	.word	0x200005b8
 80007f8:	200005b4 	.word	0x200005b4
 80007fc:	200004c8 	.word	0x200004c8
 8000800:	20000558 	.word	0x20000558

08000804 <monitor_begin>:

void monitor_begin(void) {
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <monitor_begin+0x18>)
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 800080e:	4b04      	ldr	r3, [pc, #16]	; (8000820 <monitor_begin+0x1c>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	200005b4 	.word	0x200005b4
 8000820:	200005b8 	.word	0x200005b8

08000824 <init_custom_character_db>:
*	inicializa o banco de caracteres com o que foi salvo na memoria do equipamento
*	por hora ele seta todos os valores salvos para zero mas pode um dia buscar na
*	memoria persistente pelos valores gravados
*
*/
void init_custom_character_db(void){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	memset(custom_character_db,0,sizeof(custom_character_db));
 8000828:	2270      	movs	r2, #112	; 0x70
 800082a:	2100      	movs	r1, #0
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <init_custom_character_db+0x14>)
 800082e:	f00c f8b5 	bl	800c99c <memset>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200005c0 	.word	0x200005c0

0800083c <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <auto_line_wrap+0x1c>)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	7013      	strb	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	200005ba 	.word	0x200005ba

0800085c <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <text_insertion_point+0x4c>)
 800086e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000872:	b2db      	uxtb	r3, r3
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	fb02 f303 	mul.w	r3, r2, r3
 800087a:	b2da      	uxtb	r2, r3
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <text_insertion_point+0x50>)
 800087e:	701a      	strb	r2, [r3, #0]
	cursor[1] = row
			* (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <text_insertion_point+0x4c>)
 8000882:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000886:	461a      	mov	r2, r3
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <text_insertion_point+0x54>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	1ad3      	subs	r3, r2, r3
	cursor[1] = row
 800088e:	b2db      	uxtb	r3, r3
 8000890:	79ba      	ldrb	r2, [r7, #6]
 8000892:	fb02 f303 	mul.w	r3, r2, r3
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <text_insertion_point+0x50>)
 800089a:	705a      	strb	r2, [r3, #1]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000434 	.word	0x20000434
 80008ac:	200005bc 	.word	0x200005bc
 80008b0:	2000022f 	.word	0x2000022f

080008b4 <inverse_text>:
 *	desativa a inversão de texto
 *		FE 67 FD
 *		254 103 253
 *		254 `g` 253
 */
void inverse_text(bool state) {
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 80008be:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <inverse_text+0x1c>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	7013      	strb	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200005b9 	.word	0x200005b9

080008d4 <def_thick_v_bar>:
 *	Define a barra vertical como com 5px de largura
 *	FE 76 FD
 *	254 118 253
 *	254 `v` 253
 */
void def_thick_v_bar(void) {
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	vertical_bar_width = 5;
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <def_thick_v_bar+0x14>)
 80008da:	2205      	movs	r2, #5
 80008dc:	701a      	strb	r2, [r3, #0]
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	2000022e 	.word	0x2000022e

080008ec <def_thin_v_bar>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_thin_v_bar(void) {
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
	vertical_bar_width = 2;
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <def_thin_v_bar+0x14>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	701a      	strb	r2, [r3, #0]
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	2000022e 	.word	0x2000022e

08000904 <define_custom_character>:
 *	Os 6 bytes variam da seguinte forma:
 *	FE 4E [cc] [6bytes] FD
 *	254 104 [cc] [6bytes] 253
 *	254 `N` [cc] [6bytes] 253
 */
void define_custom_character(uint8_t *cmd){
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	if(!(custom_character_db[*(cmd+2)].custo_character_index)){
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3302      	adds	r3, #2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <define_custom_character+0x64>)
 8000916:	460b      	mov	r3, r1
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	1a5b      	subs	r3, r3, r1
 800091c:	4413      	add	r3, r2
 800091e:	3306      	adds	r3, #6
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d11c      	bne.n	8000960 <define_custom_character+0x5c>
		memcpy(custom_character_db[*(cmd+2)].custom_caracter,cmd+3,6);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3302      	adds	r3, #2
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	4613      	mov	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	1a9b      	subs	r3, r3, r2
 8000934:	4a0c      	ldr	r2, [pc, #48]	; (8000968 <define_custom_character+0x64>)
 8000936:	1898      	adds	r0, r3, r2
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3303      	adds	r3, #3
 800093c:	2206      	movs	r2, #6
 800093e:	4619      	mov	r1, r3
 8000940:	f00c f81e 	bl	800c980 <memcpy>
		custom_character_db[*(cmd+2)].custo_character_index = *(cmd+2);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3302      	adds	r3, #2
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7898      	ldrb	r0, [r3, #2]
 8000950:	4a05      	ldr	r2, [pc, #20]	; (8000968 <define_custom_character+0x64>)
 8000952:	460b      	mov	r3, r1
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	1a5b      	subs	r3, r3, r1
 8000958:	4413      	add	r3, r2
 800095a:	3306      	adds	r3, #6
 800095c:	4602      	mov	r2, r0
 800095e:	701a      	strb	r2, [r3, #0]
	}

}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200005c0 	.word	0x200005c0

0800096c <draw_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_v_bar_graph(uint8_t col, uint8_t height) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af02      	add	r7, sp, #8
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	4613      	mov	r3, r2
 800097a:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <draw_v_bar_graph+0x54>)
 800097e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000982:	b2db      	uxtb	r3, r3
 8000984:	79fa      	ldrb	r2, [r7, #7]
 8000986:	fb02 f303 	mul.w	r3, r2, r3
 800098a:	b2da      	uxtb	r2, r3
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <draw_v_bar_graph+0x58>)
 800098e:	701a      	strb	r2, [r3, #0]

	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <draw_v_bar_graph+0x58>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b299      	uxth	r1, r3
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <draw_v_bar_graph+0x58>)
 8000998:	785b      	ldrb	r3, [r3, #1]
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <draw_v_bar_graph+0x5c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b298      	uxth	r0, r3
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	4603      	mov	r3, r0
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <draw_v_bar_graph+0x54>)
 80009ac:	f001 f8a2 	bl	8001af4 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <draw_v_bar_graph+0x54>)
 80009b2:	f001 f9a5 	bl	8001d00 <u8g2_SendBuffer>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000434 	.word	0x20000434
 80009c4:	200005bc 	.word	0x200005bc
 80009c8:	2000022e 	.word	0x2000022e

080009cc <erase_v_bar_graph>:
 *	com height	variando [[0x00] a [0x20]] (0 a 32)
 *	FE 2D [col] [height] FD
 * 	254 45 [col] [height] 253
 *	254 `-` [col] [height] 253
 */
void erase_v_bar_graph(uint8_t col, uint8_t height) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	4603      	mov	r3, r0
 80009d4:	460a      	mov	r2, r1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <erase_v_bar_graph+0x54>)
 80009de:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	79fa      	ldrb	r2, [r7, #7]
 80009e6:	fb02 f303 	mul.w	r3, r2, r3
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <erase_v_bar_graph+0x58>)
 80009ee:	701a      	strb	r2, [r3, #0]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <erase_v_bar_graph+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b299      	uxth	r1, r3
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <erase_v_bar_graph+0x58>)
 80009f8:	785b      	ldrb	r3, [r3, #1]
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <erase_v_bar_graph+0x5c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b298      	uxth	r0, r3
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <erase_v_bar_graph+0x54>)
 8000a0c:	f001 f872 	bl	8001af4 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <erase_v_bar_graph+0x54>)
 8000a12:	f001 f975 	bl	8001d00 <u8g2_SendBuffer>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000434 	.word	0x20000434
 8000a24:	200005bc 	.word	0x200005bc
 8000a28:	2000022e 	.word	0x2000022e

08000a2c <draw_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
 8000a36:	460b      	mov	r3, r1
 8000a38:	71bb      	strb	r3, [r7, #6]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	717b      	strb	r3, [r7, #5]
	cursor[0] = (col) * u8g2_GetMaxCharHeight(&u8g2);
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <draw_h_bar_graph+0x6c>)
 8000a40:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	79fa      	ldrb	r2, [r7, #7]
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <draw_h_bar_graph+0x70>)
 8000a50:	701a      	strb	r2, [r3, #0]
	cursor[1] = (row) * u8g2_GetMaxCharWidth(&u8g2);
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <draw_h_bar_graph+0x6c>)
 8000a54:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	79ba      	ldrb	r2, [r7, #6]
 8000a5c:	fb02 f303 	mul.w	r3, r2, r3
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <draw_h_bar_graph+0x70>)
 8000a64:	705a      	strb	r2, [r3, #1]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <draw_h_bar_graph+0x70>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b299      	uxth	r1, r3
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <draw_h_bar_graph+0x70>)
 8000a6e:	785b      	ldrb	r3, [r3, #1]
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	797b      	ldrb	r3, [r7, #5]
 8000a74:	b298      	uxth	r0, r3
			u8g2_GetMaxCharHeight(&u8g2));
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <draw_h_bar_graph+0x6c>)
 8000a78:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	4603      	mov	r3, r0
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <draw_h_bar_graph+0x6c>)
 8000a84:	f001 f836 	bl	8001af4 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <draw_h_bar_graph+0x6c>)
 8000a8a:	f001 f939 	bl	8001d00 <u8g2_SendBuffer>
	//u8g2_DrawVLine(&u8g2, col, u8g2_uint_t y, u8g2_uint_t h);
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000434 	.word	0x20000434
 8000a9c:	200005bc 	.word	0x200005bc

08000aa0 <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	4613      	mov	r3, r2
 8000aae:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <put_pixel+0x38>)
 8000ab4:	f002 fb12 	bl	80030dc <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	79ba      	ldrb	r2, [r7, #6]
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <put_pixel+0x38>)
 8000ac4:	f002 fad7 	bl	8003076 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <put_pixel+0x38>)
 8000aca:	f001 f919 	bl	8001d00 <u8g2_SendBuffer>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000434 	.word	0x20000434

08000adc <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8000aec:	2100      	movs	r1, #0
 8000aee:	4809      	ldr	r0, [pc, #36]	; (8000b14 <erase_pixel+0x38>)
 8000af0:	f002 faf4 	bl	80030dc <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	79ba      	ldrb	r2, [r7, #6]
 8000afa:	b292      	uxth	r2, r2
 8000afc:	4619      	mov	r1, r3
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <erase_pixel+0x38>)
 8000b00:	f002 fab9 	bl	8003076 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <erase_pixel+0x38>)
 8000b06:	f001 f8fb 	bl	8001d00 <u8g2_SendBuffer>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000434 	.word	0x20000434

08000b18 <put_byte>:
 *	Desenha um byte na posição [x,row] onde x varia de 0-121 e y varia de 0-3
 *	FE 3E [x] [row] [byte] [4 dummy bytes] FD
 *	254 62 [x] [row] [byte] [4 dummy bytes]  253
 *	254 `>` [x] [row] [byte] [4 dummy bytes]  253
 */
void put_byte(uint8_t x, uint8_t row, uint8_t byte){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af02      	add	r7, sp, #8
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
 8000b22:	460b      	mov	r3, r1
 8000b24:	71bb      	strb	r3, [r7, #6]
 8000b26:	4613      	mov	r3, r2
 8000b28:	717b      	strb	r3, [r7, #5]
	char arr[8], i;
	memset(arr, 0, 8);
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2208      	movs	r2, #8
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00b ff32 	bl	800c99c <memset>
	for(i=0; byte > 0; i++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	75fb      	strb	r3, [r7, #23]
 8000b3c:	e00e      	b.n	8000b5c <put_byte+0x44>
	  {
	    arr[i] = byte%2;
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	797a      	ldrb	r2, [r7, #5]
 8000b42:	f002 0201 	and.w	r2, r2, #1
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	3318      	adds	r3, #24
 8000b4a:	443b      	add	r3, r7
 8000b4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	    byte = byte/2;
 8000b50:	797b      	ldrb	r3, [r7, #5]
 8000b52:	085b      	lsrs	r3, r3, #1
 8000b54:	717b      	strb	r3, [r7, #5]
	for(i=0; byte > 0; i++)
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	75fb      	strb	r3, [r7, #23]
 8000b5c:	797b      	ldrb	r3, [r7, #5]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1ed      	bne.n	8000b3e <put_byte+0x26>
	  }
	row = row * ((u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS);
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <put_byte+0x8c>)
 8000b64:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <put_byte+0x90>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	79ba      	ldrb	r2, [r7, #6]
 8000b74:	fb02 f303 	mul.w	r3, r2, r3
 8000b78:	71bb      	strb	r3, [r7, #6]
	u8g2_DrawXBM(&u8g2 , x, row, 1, 8, arr);
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	b299      	uxth	r1, r3
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	2308      	movs	r3, #8
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <put_byte+0x8c>)
 8000b90:	f000 ff6d 	bl	8001a6e <u8g2_DrawXBM>
	u8g2_SendBuffer(&u8g2);
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <put_byte+0x8c>)
 8000b96:	f001 f8b3 	bl	8001d00 <u8g2_SendBuffer>

}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000434 	.word	0x20000434
 8000ba8:	2000022f 	.word	0x2000022f

08000bac <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8000bb0:	f003 fad5 	bl	800415e <HAL_NVIC_SystemReset>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	text_insertion_point(0, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fe4c 	bl	800085c <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <clear_display+0x18>)
 8000bc6:	f001 fa49 	bl	800205c <u8g2_ClearDisplay>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000434 	.word	0x20000434

08000bd4 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	if(enable){
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00e      	beq.n	8000c02 <enable_backlight+0x2e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2110      	movs	r1, #16
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <enable_backlight+0x48>)
 8000bea:	f003 fc4d 	bl	8004488 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <enable_backlight+0x4c>)
 8000bf2:	f006 f983 	bl	8006efc <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT );
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <enable_backlight+0x50>)
 8000bf8:	881a      	ldrh	r2, [r3, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <enable_backlight+0x4c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	}
}
 8000c00:	e008      	b.n	8000c14 <enable_backlight+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2110      	movs	r1, #16
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <enable_backlight+0x48>)
 8000c08:	f003 fc3e 	bl	8004488 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4804      	ldr	r0, [pc, #16]	; (8000c20 <enable_backlight+0x4c>)
 8000c10:	f006 fa16 	bl	8007040 <HAL_TIM_PWM_Stop>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	20000694 	.word	0x20000694
 8000c24:	2000022c 	.word	0x2000022c

08000c28 <set_backlight_brightness>:
 * Define o brlho do backlight em um dos niveis pre-configurados, [bright] varia de 1-7
 *   	FE 41 [bright] FD
 *		254 64 [bright] 253
 *		254 'A' [bright] 253
 */
void set_backlight_brightness(uint8_t bright){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	if(bright){
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d016      	beq.n	8000c66 <set_backlight_brightness+0x3e>
	LCD_BRIGHT = (7/bright)*59999;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	2207      	movs	r2, #7
 8000c3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	0152      	lsls	r2, r2, #5
 8000c46:	1ad2      	subs	r2, r2, r3
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	441a      	add	r2, r3
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	0109      	lsls	r1, r1, #4
 8000c50:	1a8a      	subs	r2, r1, r2
 8000c52:	0152      	lsls	r2, r2, #5
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <set_backlight_brightness+0x48>)
 8000c5a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT);
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <set_backlight_brightness+0x48>)
 8000c5e:	881a      	ldrh	r2, [r3, #0]
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <set_backlight_brightness+0x4c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	2000022c 	.word	0x2000022c
 8000c74:	20000694 	.word	0x20000694

08000c78 <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast) * 9);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	461a      	mov	r2, r3
 8000c86:	00d2      	lsls	r2, r2, #3
 8000c88:	4413      	add	r3, r2
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4803      	ldr	r0, [pc, #12]	; (8000c9c <set_contrast+0x24>)
 8000c90:	f002 ffe1 	bl	8003c56 <u8x8_SetContrast>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000434 	.word	0x20000434

08000ca0 <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <disp_splash+0x28>)
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	2318      	movs	r3, #24
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	23b4      	movs	r3, #180	; 0xb4
 8000cb0:	2214      	movs	r2, #20
 8000cb2:	2106      	movs	r1, #6
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <disp_splash+0x2c>)
 8000cb6:	f000 feda 	bl	8001a6e <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <disp_splash+0x2c>)
 8000cbc:	f001 f820 	bl	8001d00 <u8g2_SendBuffer>

}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000004 	.word	0x20000004
 8000ccc:	20000434 	.word	0x20000434

08000cd0 <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap_t *wrap, uint8_t *txt) {
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	737b      	strb	r3, [r7, #13]

	index = strlen(txt);
 8000ce2:	6838      	ldr	r0, [r7, #0]
 8000ce4:	f7ff fa32 	bl	800014c <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73bb      	strb	r3, [r7, #14]
	wrap->wrap_times = index / MAX_CHARS_ONSCREEN;
 8000cec:	7bba      	ldrb	r2, [r7, #14]
 8000cee:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <str_warper+0x12c>)
 8000cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf4:	1ad2      	subs	r2, r2, r3
 8000cf6:	0852      	lsrs	r2, r2, #1
 8000cf8:	4413      	add	r3, r2
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	if (wrap->wrap_times) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d071      	beq.n	8000df2 <str_warper+0x122>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	73fb      	strb	r3, [r7, #15]
 8000d12:	e068      	b.n	8000de6 <str_warper+0x116>
			if (aux < N_LINES) {
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d82f      	bhi.n	8000d7a <str_warper+0xaa>

				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000d1a:	7bfa      	ldrb	r2, [r7, #15]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	461a      	mov	r2, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
						1 : 0;
 8000d2c:	2b20      	cmp	r3, #32
 8000d2e:	bf0c      	ite	eq
 8000d30:	2301      	moveq	r3, #1
 8000d32:	2300      	movne	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000d36:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	00da      	lsls	r2, r3, #3
 8000d42:	1ad2      	subs	r2, r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	1898      	adds	r0, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)),
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	00da      	lsls	r2, r3, #3
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	461a      	mov	r2, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8000d5a:	2214      	movs	r2, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f00b fe6d 	bl	800ca3c <strncpy>
						MAX_CHARS_ONSCREEN - 1);
				wrap->wrap_str[aux][MAX_CHARS_ONSCREEN - 1] = '\0';
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00da      	lsls	r2, r3, #3
 8000d6e:	1ad2      	subs	r2, r2, r3
 8000d70:	188b      	adds	r3, r1, r2
 8000d72:	3314      	adds	r3, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
 8000d78:	e032      	b.n	8000de0 <str_warper+0x110>
			} else {
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	461a      	mov	r2, r3
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
						0 : 1;
 8000d8c:	2b20      	cmp	r3, #32
 8000d8e:	bf14      	ite	ne
 8000d90:	2301      	movne	r3, #1
 8000d92:	2300      	moveq	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000d96:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8000d98:	7bfa      	ldrb	r2, [r7, #15]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	00da      	lsls	r2, r3, #3
 8000da2:	1ad2      	subs	r2, r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	189c      	adds	r4, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)) + shift,
 8000da8:	7bfa      	ldrb	r2, [r7, #15]
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	00da      	lsls	r2, r3, #3
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	7b7b      	ldrb	r3, [r7, #13]
 8000db8:	4413      	add	r3, r2
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	18d5      	adds	r5, r2, r3
						strlen(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))));
 8000dbe:	7bfa      	ldrb	r2, [r7, #15]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff f9bc 	bl	800014c <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4629      	mov	r1, r5
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f00b fe2e 	bl	800ca3c <strncpy>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	3301      	adds	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8000dec:	7bfa      	ldrb	r2, [r7, #15]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d990      	bls.n	8000d14 <str_warper+0x44>
			}
		}
	}
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	86186187 	.word	0x86186187

08000e00 <lcd_print>:
void test_font(void) {
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}

void lcd_print(uint8_t *txt) {
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b0a3      	sub	sp, #140	; 0x8c
 8000e04:	af04      	add	r7, sp, #16
 8000e06:	6078      	str	r0, [r7, #4]
	txt_wrap_t wrap;
	uint8_t aux = 0, i;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	bool clean_it = false;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	if (text_invertion) {
 8000e14:	4b88      	ldr	r3, [pc, #544]	; (8001038 <lcd_print+0x238>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d06e      	beq.n	8000efa <lcd_print+0xfa>
		if (text_wrap) {
 8000e1c:	4b87      	ldr	r3, [pc, #540]	; (800103c <lcd_print+0x23c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d047      	beq.n	8000eb4 <lcd_print+0xb4>
			str_warper(&wrap, txt);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff50 	bl	8000cd0 <str_warper>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000e36:	e036      	b.n	8000ea6 <lcd_print+0xa6>
				//cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000e38:	4b81      	ldr	r3, [pc, #516]	; (8001040 <lcd_print+0x240>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	b298      	uxth	r0, r3
 8000e3e:	4b80      	ldr	r3, [pc, #512]	; (8001040 <lcd_print+0x240>)
 8000e40:	785b      	ldrb	r3, [r3, #1]
 8000e42:	b29c      	uxth	r4, r3
						0, 0, 0, wrap.wrap_str[aux]);
 8000e44:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000e48:	f107 010c 	add.w	r1, r7, #12
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	00da      	lsls	r2, r3, #3
 8000e54:	1ad2      	subs	r2, r2, r3
 8000e56:	188b      	adds	r3, r1, r2
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000e58:	9303      	str	r3, [sp, #12]
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	9302      	str	r3, [sp, #8]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	2300      	movs	r3, #0
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2320      	movs	r3, #32
 8000e68:	4622      	mov	r2, r4
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	4875      	ldr	r0, [pc, #468]	; (8001044 <lcd_print+0x244>)
 8000e6e:	f001 f8a1 	bl	8001fb4 <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 8000e72:	4874      	ldr	r0, [pc, #464]	; (8001044 <lcd_print+0x244>)
 8000e74:	f000 ff44 	bl	8001d00 <u8g2_SendBuffer>
				clean_it = !clean_it;
 8000e78:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf14      	ite	ne
 8000e80:	2301      	movne	r3, #1
 8000e82:	2300      	moveq	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f083 0301 	eor.w	r3, r3, #1
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000e90:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000e9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000ea6:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000eaa:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d9c2      	bls.n	8000e38 <lcd_print+0x38>
 8000eb2:	e0a0      	b.n	8000ff6 <lcd_print+0x1f6>
				 cursor[0] += u8g2_GetStrWidth(&u8g2,
				 wrap.wrap_str[aux - 1]);
				 }*/
			}
		} else {
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 8000eb4:	4b62      	ldr	r3, [pc, #392]	; (8001040 <lcd_print+0x240>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b299      	uxth	r1, r3
 8000eba:	4b61      	ldr	r3, [pc, #388]	; (8001040 <lcd_print+0x240>)
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	9303      	str	r3, [sp, #12]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2320      	movs	r3, #32
 8000ed2:	485c      	ldr	r0, [pc, #368]	; (8001044 <lcd_print+0x244>)
 8000ed4:	f001 f86e 	bl	8001fb4 <u8g2_DrawButtonUTF8>
					0, txt);
			u8g2_SendBuffer(&u8g2);
 8000ed8:	485a      	ldr	r0, [pc, #360]	; (8001044 <lcd_print+0x244>)
 8000eda:	f000 ff11 	bl	8001d00 <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4858      	ldr	r0, [pc, #352]	; (8001044 <lcd_print+0x244>)
 8000ee2:	f001 ff75 	bl	8002dd0 <u8g2_GetStrWidth>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4b55      	ldr	r3, [pc, #340]	; (8001040 <lcd_print+0x240>)
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	b2cb      	uxtb	r3, r1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b52      	ldr	r3, [pc, #328]	; (8001040 <lcd_print+0x240>)
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e07d      	b.n	8000ff6 <lcd_print+0x1f6>
		}

	} else {
		if (text_wrap) {
 8000efa:	4b50      	ldr	r3, [pc, #320]	; (800103c <lcd_print+0x23c>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d05f      	beq.n	8000fc2 <lcd_print+0x1c2>
			str_warper(&wrap, txt);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fee1 	bl	8000cd0 <str_warper>
			if (wrap.wrap_times) {
 8000f0e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d047      	beq.n	8000fa6 <lcd_print+0x1a6>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000f16:	2300      	movs	r3, #0
 8000f18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000f1c:	e03c      	b.n	8000f98 <lcd_print+0x198>
					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],
 8000f1e:	4b48      	ldr	r3, [pc, #288]	; (8001040 <lcd_print+0x240>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b298      	uxth	r0, r3
 8000f24:	4b46      	ldr	r3, [pc, #280]	; (8001040 <lcd_print+0x240>)
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	b29c      	uxth	r4, r3
							wrap.wrap_str[aux]);
 8000f2a:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000f2e:	f107 010c 	add.w	r1, r7, #12
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	00da      	lsls	r2, r3, #3
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	188b      	adds	r3, r1, r2
					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],
 8000f3e:	4622      	mov	r2, r4
 8000f40:	4601      	mov	r1, r0
 8000f42:	4840      	ldr	r0, [pc, #256]	; (8001044 <lcd_print+0x244>)
 8000f44:	f001 fe08 	bl	8002b58 <u8g2_DrawUTF8>
					u8g2_SendBuffer(&u8g2);
 8000f48:	483e      	ldr	r0, [pc, #248]	; (8001044 <lcd_print+0x244>)
 8000f4a:	f000 fed9 	bl	8001d00 <u8g2_SendBuffer>

					cursor[1] += (u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS;
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	; (8001040 <lcd_print+0x240>)
 8000f50:	785a      	ldrb	r2, [r3, #1]
 8000f52:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <lcd_print+0x244>)
 8000f54:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000f58:	b2d9      	uxtb	r1, r3
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <lcd_print+0x248>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4413      	add	r3, r2
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <lcd_print+0x240>)
 8000f68:	705a      	strb	r2, [r3, #1]

					clean_it = !clean_it;
 8000f6a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf14      	ite	ne
 8000f72:	2301      	movne	r3, #1
 8000f74:	2300      	moveq	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f083 0301 	eor.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000f82:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000f8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000f92:	3301      	adds	r3, #1
 8000f94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000f98:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000f9c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d9bc      	bls.n	8000f1e <lcd_print+0x11e>
 8000fa4:	e027      	b.n	8000ff6 <lcd_print+0x1f6>
				}
			} else {
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <lcd_print+0x240>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b299      	uxth	r1, r3
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <lcd_print+0x240>)
 8000fae:	785b      	ldrb	r3, [r3, #1]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4823      	ldr	r0, [pc, #140]	; (8001044 <lcd_print+0x244>)
 8000fb6:	f001 fdcf 	bl	8002b58 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <lcd_print+0x244>)
 8000fbc:	f000 fea0 	bl	8001d00 <u8g2_SendBuffer>
 8000fc0:	e019      	b.n	8000ff6 <lcd_print+0x1f6>
			 cursor[0] = 0;
			 } else {
			 cursor[0] += u8g2_GetStrWidth(&u8g2, wrap.wrap_str[aux - 1]);
			 }*/
		} else {
			u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <lcd_print+0x240>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b299      	uxth	r1, r3
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <lcd_print+0x240>)
 8000fca:	785b      	ldrb	r3, [r3, #1]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	481c      	ldr	r0, [pc, #112]	; (8001044 <lcd_print+0x244>)
 8000fd2:	f001 fdc1 	bl	8002b58 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <lcd_print+0x244>)
 8000fd8:	f000 fe92 	bl	8001d00 <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	4819      	ldr	r0, [pc, #100]	; (8001044 <lcd_print+0x244>)
 8000fe0:	f001 fef6 	bl	8002dd0 <u8g2_GetStrWidth>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <lcd_print+0x240>)
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	b2cb      	uxtb	r3, r1
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <lcd_print+0x240>)
 8000ff4:	701a      	strb	r2, [r3, #0]
		}
	}
	if (clean_it) {
 8000ff6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d018      	beq.n	8001030 <lcd_print+0x230>

		memset(wrap.wrap_str, 0, sizeof(wrap.wrap_str));
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2269      	movs	r2, #105	; 0x69
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f00b fcc8 	bl	800c99c <memset>
		clean_it = !clean_it;
 800100c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001010:	2b00      	cmp	r3, #0
 8001012:	bf14      	ite	ne
 8001014:	2301      	movne	r3, #1
 8001016:	2300      	moveq	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f083 0301 	eor.w	r3, r3, #1
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001024:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	}
}
 8001030:	bf00      	nop
 8001032:	377c      	adds	r7, #124	; 0x7c
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	200005b9 	.word	0x200005b9
 800103c:	200005ba 	.word	0x200005ba
 8001040:	200005bc 	.word	0x200005bc
 8001044:	20000434 	.word	0x20000434
 8001048:	2000022f 	.word	0x2000022f

0800104c <custom_character_dealer>:

void custom_character_dealer(uint8_t index){
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	uint8_t char_w = 8;
 8001056:	2308      	movs	r3, #8
 8001058:	73fb      	strb	r3, [r7, #15]
	uint8_t char_h = 6;
 800105a:	2306      	movs	r3, #6
 800105c:	73bb      	strb	r3, [r7, #14]
	if((custom_character_db[index].custo_character_index)){
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	4918      	ldr	r1, [pc, #96]	; (80010c4 <custom_character_dealer+0x78>)
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	1a9b      	subs	r3, r3, r2
 8001068:	440b      	add	r3, r1
 800106a:	3306      	adds	r3, #6
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d024      	beq.n	80010bc <custom_character_dealer+0x70>
		u8g2_DrawXBM(&u8g2 , cursor[0], cursor[1], char_w, char_h, custom_character_db[index].custom_caracter);
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <custom_character_dealer+0x7c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b298      	uxth	r0, r3
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <custom_character_dealer+0x7c>)
 800107a:	785b      	ldrb	r3, [r3, #1]
 800107c:	b29c      	uxth	r4, r3
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	b29d      	uxth	r5, r3
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	b299      	uxth	r1, r3
 8001086:	79fa      	ldrb	r2, [r7, #7]
 8001088:	4613      	mov	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <custom_character_dealer+0x78>)
 8001090:	4413      	add	r3, r2
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	9100      	str	r1, [sp, #0]
 8001096:	462b      	mov	r3, r5
 8001098:	4622      	mov	r2, r4
 800109a:	4601      	mov	r1, r0
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <custom_character_dealer+0x80>)
 800109e:	f000 fce6 	bl	8001a6e <u8g2_DrawXBM>
		u8g2_SendBuffer(&u8g2);
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <custom_character_dealer+0x80>)
 80010a4:	f000 fe2c 	bl	8001d00 <u8g2_SendBuffer>
		cursor[0] += u8g2_GetMaxCharWidth(&u8g2);
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <custom_character_dealer+0x7c>)
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <custom_character_dealer+0x80>)
 80010ae:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4413      	add	r3, r2
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <custom_character_dealer+0x7c>)
 80010ba:	701a      	strb	r2, [r3, #0]

		//é um custom caracter
		//ele foi definido pelo usuario
		//ele deve ser impresso
	}
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bdb0      	pop	{r4, r5, r7, pc}
 80010c4:	200005c0 	.word	0x200005c0
 80010c8:	200005bc 	.word	0x200005bc
 80010cc:	20000434 	.word	0x20000434

080010d0 <Kpd_Irqv_Init>:
#include "usbd_cdc_if.h"

//{set,reset,up,down,left,right}
key_ih IRQ_VECTOR[6];

void Kpd_Irqv_Init(void) {
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	//
	IRQ_VECTOR[0].IRQn_p = SET_P_EXTI_IRQn;
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <Kpd_Irqv_Init+0x54>)
 80010d6:	220a      	movs	r2, #10
 80010d8:	705a      	strb	r2, [r3, #1]
	IRQ_VECTOR[0].deb_counter = 0;
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <Kpd_Irqv_Init+0x54>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
	//
	IRQ_VECTOR[1].IRQn_p = RESET_P_EXTI_IRQn;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <Kpd_Irqv_Init+0x54>)
 80010e2:	2217      	movs	r2, #23
 80010e4:	70da      	strb	r2, [r3, #3]
	IRQ_VECTOR[1].deb_counter = 0;
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <Kpd_Irqv_Init+0x54>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	709a      	strb	r2, [r3, #2]
	//
	IRQ_VECTOR[2].IRQn_p = UP_P_EXTI_IRQn;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <Kpd_Irqv_Init+0x54>)
 80010ee:	2217      	movs	r2, #23
 80010f0:	715a      	strb	r2, [r3, #5]
	IRQ_VECTOR[2].deb_counter = 0;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <Kpd_Irqv_Init+0x54>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	711a      	strb	r2, [r3, #4]
	//
	IRQ_VECTOR[3].IRQn_p = DOWN_P_EXTI_IRQn;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <Kpd_Irqv_Init+0x54>)
 80010fa:	2217      	movs	r2, #23
 80010fc:	71da      	strb	r2, [r3, #7]
	IRQ_VECTOR[3].deb_counter = 0;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <Kpd_Irqv_Init+0x54>)
 8001100:	2200      	movs	r2, #0
 8001102:	719a      	strb	r2, [r3, #6]
	//
	IRQ_VECTOR[4].IRQn_p = LEFT_P_EXTI_IRQn;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <Kpd_Irqv_Init+0x54>)
 8001106:	2217      	movs	r2, #23
 8001108:	725a      	strb	r2, [r3, #9]
	IRQ_VECTOR[4].deb_counter = 0;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <Kpd_Irqv_Init+0x54>)
 800110c:	2200      	movs	r2, #0
 800110e:	721a      	strb	r2, [r3, #8]
	//
	IRQ_VECTOR[5].IRQn_p = RIGHT_P_EXTI_IRQn;
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <Kpd_Irqv_Init+0x54>)
 8001112:	2217      	movs	r2, #23
 8001114:	72da      	strb	r2, [r3, #11]
	IRQ_VECTOR[5].deb_counter = 0;
 8001116:	4b03      	ldr	r3, [pc, #12]	; (8001124 <Kpd_Irqv_Init+0x54>)
 8001118:	2200      	movs	r2, #0
 800111a:	729a      	strb	r2, [r3, #10]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	20000630 	.word	0x20000630

08001128 <SystickCallback>:

void SystickCallback(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 6; i++) {
 800112e:	2300      	movs	r3, #0
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	e01b      	b.n	800116c <SystickCallback+0x44>
		if (IRQ_VECTOR[i].deb_counter == 0) {
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <SystickCallback+0x54>)
 8001138:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d109      	bne.n	8001154 <SystickCallback+0x2c>
			HAL_NVIC_EnableIRQ(IRQ_VECTOR[i].IRQn_p);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <SystickCallback+0x54>)
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800114c:	4618      	mov	r0, r3
 800114e:	f002 ffea 	bl	8004126 <HAL_NVIC_EnableIRQ>
 8001152:	e008      	b.n	8001166 <SystickCallback+0x3e>
		} else {
			IRQ_VECTOR[i].deb_counter--;
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <SystickCallback+0x54>)
 8001158:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800115c:	3a01      	subs	r2, #1
 800115e:	b2d1      	uxtb	r1, r2
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <SystickCallback+0x54>)
 8001162:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 6; i++) {
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	3301      	adds	r3, #1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b05      	cmp	r3, #5
 8001170:	d9e0      	bls.n	8001134 <SystickCallback+0xc>
		}
	}
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000630 	.word	0x20000630

08001180 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SET_P_Pin) {
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	2b10      	cmp	r3, #16
 800118e:	d10d      	bne.n	80011ac <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_NVIC_DisableIRQ(IRQ_VECTOR[0].IRQn_p);
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_GPIO_EXTI_Callback+0x34>)
 8001192:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001196:	4618      	mov	r0, r3
 8001198:	f002 ffd3 	bl	8004142 <HAL_NVIC_DisableIRQ>
		IRQ_VECTOR[0].deb_counter = DEBOUNCE_TIME;
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_GPIO_EXTI_Callback+0x34>)
 800119e:	22f4      	movs	r2, #244	; 0xf4
 80011a0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a6:	4804      	ldr	r0, [pc, #16]	; (80011b8 <HAL_GPIO_EXTI_Callback+0x38>)
 80011a8:	f003 f986 	bl	80044b8 <HAL_GPIO_TogglePin>
	}
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000630 	.word	0x20000630
 80011b8:	40011000 	.word	0x40011000

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c0:	f002 fdfe 	bl	8003dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c4:	f000 f80e 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c8:	f000 f988 	bl	80014dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80011cc:	f00a feec 	bl	800bfa8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80011d0:	f000 f862 	bl	8001298 <MX_SPI1_Init>
  MX_TIM2_Init();
 80011d4:	f000 f936 	bl	8001444 <MX_TIM2_Init>
  MX_TIM1_Init();
 80011d8:	f000 f894 	bl	8001304 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 80011dc:	f7ff f83c 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 80011e0:	bf30      	wfi
 80011e2:	e7fd      	b.n	80011e0 <main+0x24>

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	; 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	2228      	movs	r2, #40	; 0x28
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00b fbd2 	bl	800c99c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001214:	2301      	movs	r3, #1
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001222:	2301      	movs	r3, #1
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001226:	2302      	movs	r3, #2
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800122a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001230:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001234:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	4618      	mov	r0, r3
 800123c:	f004 fe32 	bl	8005ea4 <HAL_RCC_OscConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001246:	f000 f9fd 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	2302      	movs	r3, #2
 8001250:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2102      	movs	r1, #2
 8001266:	4618      	mov	r0, r3
 8001268:	f005 f89e 	bl	80063a8 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001272:	f000 f9e7 	bl	8001644 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001276:	2310      	movs	r3, #16
 8001278:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	4618      	mov	r0, r3
 8001282:	f005 f9f7 	bl	8006674 <HAL_RCCEx_PeriphCLKConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800128c:	f000 f9da 	bl	8001644 <Error_Handler>
  }
}
 8001290:	bf00      	nop
 8001292:	3750      	adds	r7, #80	; 0x50
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_SPI1_Init+0x64>)
 800129e:	4a18      	ldr	r2, [pc, #96]	; (8001300 <MX_SPI1_Init+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_SPI1_Init+0x64>)
 80012a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_SPI1_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_SPI1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_SPI1_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_SPI1_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_SPI1_Init+0x64>)
 80012c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_SPI1_Init+0x64>)
 80012cc:	2208      	movs	r2, #8
 80012ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_SPI1_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <MX_SPI1_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_SPI1_Init+0x64>)
 80012e4:	220a      	movs	r2, #10
 80012e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_SPI1_Init+0x64>)
 80012ea:	f005 fa79 	bl	80067e0 <HAL_SPI_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012f4:	f000 f9a6 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000063c 	.word	0x2000063c
 8001300:	40013000 	.word	0x40013000

08001304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b096      	sub	sp, #88	; 0x58
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2220      	movs	r2, #32
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f00b fb2d 	bl	800c99c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001342:	4b3e      	ldr	r3, [pc, #248]	; (800143c <MX_TIM1_Init+0x138>)
 8001344:	4a3e      	ldr	r2, [pc, #248]	; (8001440 <MX_TIM1_Init+0x13c>)
 8001346:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001348:	4b3c      	ldr	r3, [pc, #240]	; (800143c <MX_TIM1_Init+0x138>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <MX_TIM1_Init+0x138>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001354:	4b39      	ldr	r3, [pc, #228]	; (800143c <MX_TIM1_Init+0x138>)
 8001356:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800135a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135c:	4b37      	ldr	r3, [pc, #220]	; (800143c <MX_TIM1_Init+0x138>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001362:	4b36      	ldr	r3, [pc, #216]	; (800143c <MX_TIM1_Init+0x138>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001368:	4b34      	ldr	r3, [pc, #208]	; (800143c <MX_TIM1_Init+0x138>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800136e:	4833      	ldr	r0, [pc, #204]	; (800143c <MX_TIM1_Init+0x138>)
 8001370:	f005 fc9c 	bl	8006cac <HAL_TIM_Base_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800137a:	f000 f963 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001384:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001388:	4619      	mov	r1, r3
 800138a:	482c      	ldr	r0, [pc, #176]	; (800143c <MX_TIM1_Init+0x138>)
 800138c:	f006 f882 	bl	8007494 <HAL_TIM_ConfigClockSource>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001396:	f000 f955 	bl	8001644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800139a:	4828      	ldr	r0, [pc, #160]	; (800143c <MX_TIM1_Init+0x138>)
 800139c:	f005 fd56 	bl	8006e4c <HAL_TIM_PWM_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013a6:	f000 f94d 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013b6:	4619      	mov	r1, r3
 80013b8:	4820      	ldr	r0, [pc, #128]	; (800143c <MX_TIM1_Init+0x138>)
 80013ba:	f006 fbf7 	bl	8007bac <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013c4:	f000 f93e 	bl	8001644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c8:	2360      	movs	r3, #96	; 0x60
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <MX_TIM1_Init+0x138>)
 80013ee:	f005 ff93 	bl	8007318 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80013f8:	f000 f924 	bl	8001644 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4807      	ldr	r0, [pc, #28]	; (800143c <MX_TIM1_Init+0x138>)
 8001420:	f006 fc22 	bl	8007c68 <HAL_TIMEx_ConfigBreakDeadTime>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800142a:	f000 f90b 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <MX_TIM1_Init+0x138>)
 8001430:	f000 f9c6 	bl	80017c0 <HAL_TIM_MspPostInit>

}
 8001434:	bf00      	nop
 8001436:	3758      	adds	r7, #88	; 0x58
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000694 	.word	0x20000694
 8001440:	40012c00 	.word	0x40012c00

08001444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_TIM2_Init+0x94>)
 8001462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_TIM2_Init+0x94>)
 800146a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800146e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_TIM2_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_TIM2_Init+0x94>)
 8001478:	221d      	movs	r2, #29
 800147a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_TIM2_Init+0x94>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_TIM2_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <MX_TIM2_Init+0x94>)
 800148a:	f005 fc0f 	bl	8006cac <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001494:	f000 f8d6 	bl	8001644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <MX_TIM2_Init+0x94>)
 80014a6:	f005 fff5 	bl	8007494 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014b0:	f000 f8c8 	bl	8001644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_TIM2_Init+0x94>)
 80014c2:	f006 fb73 	bl	8007bac <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014cc:	f000 f8ba 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200006dc 	.word	0x200006dc

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f0:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <MX_GPIO_Init+0x154>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <MX_GPIO_Init+0x154>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <MX_GPIO_Init+0x154>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001508:	4b49      	ldr	r3, [pc, #292]	; (8001630 <MX_GPIO_Init+0x154>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a48      	ldr	r2, [pc, #288]	; (8001630 <MX_GPIO_Init+0x154>)
 800150e:	f043 0320 	orr.w	r3, r3, #32
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b46      	ldr	r3, [pc, #280]	; (8001630 <MX_GPIO_Init+0x154>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b43      	ldr	r3, [pc, #268]	; (8001630 <MX_GPIO_Init+0x154>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a42      	ldr	r2, [pc, #264]	; (8001630 <MX_GPIO_Init+0x154>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b40      	ldr	r3, [pc, #256]	; (8001630 <MX_GPIO_Init+0x154>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <MX_GPIO_Init+0x154>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a3c      	ldr	r2, [pc, #240]	; (8001630 <MX_GPIO_Init+0x154>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <MX_GPIO_Init+0x154>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001556:	4837      	ldr	r0, [pc, #220]	; (8001634 <MX_GPIO_Init+0x158>)
 8001558:	f002 ff96 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	2110      	movs	r1, #16
 8001560:	4835      	ldr	r0, [pc, #212]	; (8001638 <MX_GPIO_Init+0x15c>)
 8001562:	f002 ff91 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2140      	movs	r1, #64	; 0x40
 800156a:	4833      	ldr	r0, [pc, #204]	; (8001638 <MX_GPIO_Init+0x15c>)
 800156c:	f002 ff8c 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2103      	movs	r1, #3
 8001574:	4831      	ldr	r0, [pc, #196]	; (800163c <MX_GPIO_Init+0x160>)
 8001576:	f002 ff87 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2302      	movs	r3, #2
 800158a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	4828      	ldr	r0, [pc, #160]	; (8001634 <MX_GPIO_Init+0x158>)
 8001594:	f002 fdf4 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001598:	2310      	movs	r3, #16
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4822      	ldr	r0, [pc, #136]	; (8001638 <MX_GPIO_Init+0x15c>)
 80015b0:	f002 fde6 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b4:	2340      	movs	r3, #64	; 0x40
 80015b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	481b      	ldr	r0, [pc, #108]	; (8001638 <MX_GPIO_Init+0x15c>)
 80015cc:	f002 fdd8 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015d0:	2303      	movs	r3, #3
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2302      	movs	r3, #2
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	4815      	ldr	r0, [pc, #84]	; (800163c <MX_GPIO_Init+0x160>)
 80015e8:	f002 fdca 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_P_Pin RESET_P_Pin UP_P_Pin DOWN_P_Pin
                           LEFT_P_Pin RIGHT_P_Pin */
  GPIO_InitStruct.Pin = SET_P_Pin|RESET_P_Pin|UP_P_Pin|DOWN_P_Pin
 80015ec:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80015f0:	613b      	str	r3, [r7, #16]
                          |LEFT_P_Pin|RIGHT_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_GPIO_Init+0x164>)
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0310 	add.w	r3, r7, #16
 80015fe:	4619      	mov	r1, r3
 8001600:	480e      	ldr	r0, [pc, #56]	; (800163c <MX_GPIO_Init+0x160>)
 8001602:	f002 fdbd 	bl	8004180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	200a      	movs	r0, #10
 800160c:	f002 fd6f 	bl	80040ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001610:	200a      	movs	r0, #10
 8001612:	f002 fd88 	bl	8004126 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2017      	movs	r0, #23
 800161c:	f002 fd67 	bl	80040ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001620:	2017      	movs	r0, #23
 8001622:	f002 fd80 	bl	8004126 <HAL_NVIC_EnableIRQ>

}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	40011000 	.word	0x40011000
 8001638:	40010800 	.word	0x40010800
 800163c:	40010c00 	.word	0x40010c00
 8001640:	10210000 	.word	0x10210000

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>
	...

08001650 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_MspInit+0x7c>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <HAL_MspInit+0x7c>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6193      	str	r3, [r2, #24]
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_MspInit+0x7c>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_MspInit+0x7c>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <HAL_MspInit+0x7c>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_MspInit+0x7c>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2005      	movs	r0, #5
 800168c:	f002 fd2f 	bl	80040ee <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001690:	2005      	movs	r0, #5
 8001692:	f002 fd48 	bl	8004126 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	2005      	movs	r0, #5
 800169c:	f002 fd27 	bl	80040ee <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016a0:	2005      	movs	r0, #5
 80016a2:	f002 fd40 	bl	8004126 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_MspInit+0x80>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_MspInit+0x80>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000

080016d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a15      	ldr	r2, [pc, #84]	; (8001744 <HAL_SPI_MspInit+0x70>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d123      	bne.n	800173c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_SPI_MspInit+0x74>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a13      	ldr	r2, [pc, #76]	; (8001748 <HAL_SPI_MspInit+0x74>)
 80016fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_SPI_MspInit+0x74>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_SPI_MspInit+0x74>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_SPI_MspInit+0x74>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6193      	str	r3, [r2, #24]
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_SPI_MspInit+0x74>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001724:	23a0      	movs	r3, #160	; 0xa0
 8001726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	4619      	mov	r1, r3
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <HAL_SPI_MspInit+0x78>)
 8001738:	f002 fd22 	bl	8004180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40013000 	.word	0x40013000
 8001748:	40021000 	.word	0x40021000
 800174c:	40010800 	.word	0x40010800

08001750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a16      	ldr	r2, [pc, #88]	; (80017b8 <HAL_TIM_Base_MspInit+0x68>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d10c      	bne.n	800177c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_TIM_Base_MspInit+0x6c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <HAL_TIM_Base_MspInit+0x6c>)
 8001768:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_TIM_Base_MspInit+0x6c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800177a:	e018      	b.n	80017ae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001784:	d113      	bne.n	80017ae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_TIM_Base_MspInit+0x6c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a0c      	ldr	r2, [pc, #48]	; (80017bc <HAL_TIM_Base_MspInit+0x6c>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_TIM_Base_MspInit+0x6c>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	201c      	movs	r0, #28
 80017a4:	f002 fca3 	bl	80040ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a8:	201c      	movs	r0, #28
 80017aa:	f002 fcbc 	bl	8004126 <HAL_NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40012c00 	.word	0x40012c00
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <HAL_TIM_MspPostInit+0x5c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d118      	bne.n	8001812 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <HAL_TIM_MspPostInit+0x60>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_TIM_MspPostInit+0x60>)
 80017e6:	f043 0304 	orr.w	r3, r3, #4
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_TIM_MspPostInit+0x60>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2302      	movs	r3, #2
 8001804:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0310 	add.w	r3, r7, #16
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <HAL_TIM_MspPostInit+0x64>)
 800180e:	f002 fcb7 	bl	8004180 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001812:	bf00      	nop
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40012c00 	.word	0x40012c00
 8001820:	40021000 	.word	0x40021000
 8001824:	40010800 	.word	0x40010800

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800182c:	e7fe      	b.n	800182c <NMI_Handler+0x4>

0800182e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler+0x4>

0800183a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <UsageFault_Handler+0x4>

08001846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickCallback();
 800186e:	f7ff fc5b 	bl	8001128 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f002 faeb 	bl	8003e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_P_Pin);
 800188a:	2010      	movs	r0, #16
 800188c:	f002 fe2e 	bl	80044ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800189a:	f002 ff70 	bl	800477e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200019c4 	.word	0x200019c4

080018a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80018ae:	f002 ff66 	bl	800477e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200019c4 	.word	0x200019c4

080018bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_P_Pin);
 80018c0:	2020      	movs	r0, #32
 80018c2:	f002 fe13 	bl	80044ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_P_Pin);
 80018c6:	2040      	movs	r0, #64	; 0x40
 80018c8:	f002 fe10 	bl	80044ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_P_Pin);
 80018cc:	2080      	movs	r0, #128	; 0x80
 80018ce:	f002 fe0d 	bl	80044ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_P_Pin);
 80018d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018d6:	f002 fe09 	bl	80044ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_P_Pin);
 80018da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018de:	f002 fe05 	bl	80044ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM2_IRQHandler+0x10>)
 80018ee:	f005 fc0b 	bl	8007108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200006dc 	.word	0x200006dc

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	; (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f00a fffe 	bl	800c92c <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	; (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20005000 	.word	0x20005000
 800195c:	00000400 	.word	0x00000400
 8001960:	20000724 	.word	0x20000724
 8001964:	20001ee0 	.word	0x20001ee0

08001968 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b088      	sub	sp, #32
 8001996:	af02      	add	r7, sp, #8
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	4608      	mov	r0, r1
 800199c:	4611      	mov	r1, r2
 800199e:	461a      	mov	r2, r3
 80019a0:	4603      	mov	r3, r0
 80019a2:	817b      	strh	r3, [r7, #10]
 80019a4:	460b      	mov	r3, r1
 80019a6:	813b      	strh	r3, [r7, #8]
 80019a8:	4613      	mov	r3, r2
 80019aa:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80019b2:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80019b4:	7dbb      	ldrb	r3, [r7, #22]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf0c      	ite	eq
 80019ba:	2301      	moveq	r3, #1
 80019bc:	2300      	movne	r3, #0
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80019c2:	897a      	ldrh	r2, [r7, #10]
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	4413      	add	r3, r2
 80019c8:	b298      	uxth	r0, r3
 80019ca:	893b      	ldrh	r3, [r7, #8]
 80019cc:	3301      	adds	r3, #1
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	893a      	ldrh	r2, [r7, #8]
 80019d2:	8979      	ldrh	r1, [r7, #10]
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	4603      	mov	r3, r0
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f001 fbc8 	bl	800316e <u8g2_IsIntersection>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d040      	beq.n	8001a66 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 80019e8:	e035      	b.n	8001a56 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
 80019f0:	4013      	ands	r3, r2
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00c      	beq.n	8001a12 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	7dba      	ldrb	r2, [r7, #22]
 80019fc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001a00:	893a      	ldrh	r2, [r7, #8]
 8001a02:	8979      	ldrh	r1, [r7, #10]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f001 fa76 	bl	8002efc <u8g2_DrawHVLine>
 8001a10:	e010      	b.n	8001a34 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	7d7a      	ldrb	r2, [r7, #21]
 8001a20:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001a24:	893a      	ldrh	r2, [r7, #8]
 8001a26:	8979      	ldrh	r1, [r7, #10]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f001 fa64 	bl	8002efc <u8g2_DrawHVLine>
    }
    x++;
 8001a34:	897b      	ldrh	r3, [r7, #10]
 8001a36:	3301      	adds	r3, #1
 8001a38:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d104      	bne.n	8001a50 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	75fb      	strb	r3, [r7, #23]
      b++;
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1c6      	bne.n	80019ea <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	7dba      	ldrb	r2, [r7, #22]
 8001a60:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001a64:	e000      	b.n	8001a68 <u8g2_DrawHXBM+0xd6>
    return;
 8001a66:	bf00      	nop
}
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b088      	sub	sp, #32
 8001a72:	af02      	add	r7, sp, #8
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	4608      	mov	r0, r1
 8001a78:	4611      	mov	r1, r2
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	817b      	strh	r3, [r7, #10]
 8001a80:	460b      	mov	r3, r1
 8001a82:	813b      	strh	r3, [r7, #8]
 8001a84:	4613      	mov	r3, r2
 8001a86:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001a8c:	8afb      	ldrh	r3, [r7, #22]
 8001a8e:	3307      	adds	r3, #7
 8001a90:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001a92:	8afb      	ldrh	r3, [r7, #22]
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001a98:	897a      	ldrh	r2, [r7, #10]
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b298      	uxth	r0, r3
 8001aa0:	893a      	ldrh	r2, [r7, #8]
 8001aa2:	8c3b      	ldrh	r3, [r7, #32]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	893a      	ldrh	r2, [r7, #8]
 8001aaa:	8979      	ldrh	r1, [r7, #10]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4603      	mov	r3, r0
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f001 fb5c 	bl	800316e <u8g2_IsIntersection>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d017      	beq.n	8001aec <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001abc:	e012      	b.n	8001ae4 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001abe:	88f8      	ldrh	r0, [r7, #6]
 8001ac0:	893a      	ldrh	r2, [r7, #8]
 8001ac2:	8979      	ldrh	r1, [r7, #10]
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	4603      	mov	r3, r0
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff ff61 	bl	8001992 <u8g2_DrawHXBM>
    bitmap += blen;
 8001ad0:	8afb      	ldrh	r3, [r7, #22]
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad4:	4413      	add	r3, r2
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001ad8:	893b      	ldrh	r3, [r7, #8]
 8001ada:	3301      	adds	r3, #1
 8001adc:	813b      	strh	r3, [r7, #8]
    h--;
 8001ade:	8c3b      	ldrh	r3, [r7, #32]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001ae4:	8c3b      	ldrh	r3, [r7, #32]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1e9      	bne.n	8001abe <u8g2_DrawXBM+0x50>
 8001aea:	e000      	b.n	8001aee <u8g2_DrawXBM+0x80>
    return;
 8001aec:	bf00      	nop
  }
}
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	817b      	strh	r3, [r7, #10]
 8001b06:	460b      	mov	r3, r1
 8001b08:	813b      	strh	r3, [r7, #8]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001b0e:	897a      	ldrh	r2, [r7, #10]
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	4413      	add	r3, r2
 8001b14:	b298      	uxth	r0, r3
 8001b16:	893a      	ldrh	r2, [r7, #8]
 8001b18:	8b3b      	ldrh	r3, [r7, #24]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	893a      	ldrh	r2, [r7, #8]
 8001b20:	8979      	ldrh	r1, [r7, #10]
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	4603      	mov	r3, r0
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f001 fb21 	bl	800316e <u8g2_IsIntersection>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d012      	beq.n	8001b58 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8001b32:	e00d      	b.n	8001b50 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	893a      	ldrh	r2, [r7, #8]
 8001b38:	8979      	ldrh	r1, [r7, #10]
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	9000      	str	r0, [sp, #0]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f001 f9dc 	bl	8002efc <u8g2_DrawHVLine>
    y++;    
 8001b44:	893b      	ldrh	r3, [r7, #8]
 8001b46:	3301      	adds	r3, #1
 8001b48:	813b      	strh	r3, [r7, #8]
    h--;
 8001b4a:	8b3b      	ldrh	r3, [r7, #24]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001b50:	8b3b      	ldrh	r3, [r7, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ee      	bne.n	8001b34 <u8g2_DrawBox+0x40>
 8001b56:	e000      	b.n	8001b5a <u8g2_DrawBox+0x66>
    return;
 8001b58:	bf00      	nop
  }
}
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	817b      	strh	r3, [r7, #10]
 8001b72:	460b      	mov	r3, r1
 8001b74:	813b      	strh	r3, [r7, #8]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001b7a:	897b      	ldrh	r3, [r7, #10]
 8001b7c:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001b7e:	897a      	ldrh	r2, [r7, #10]
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	4413      	add	r3, r2
 8001b84:	b298      	uxth	r0, r3
 8001b86:	893a      	ldrh	r2, [r7, #8]
 8001b88:	8c3b      	ldrh	r3, [r7, #32]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	893a      	ldrh	r2, [r7, #8]
 8001b90:	8979      	ldrh	r1, [r7, #10]
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4603      	mov	r3, r0
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f001 fae9 	bl	800316e <u8g2_IsIntersection>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d037      	beq.n	8001c12 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	893a      	ldrh	r2, [r7, #8]
 8001ba6:	8979      	ldrh	r1, [r7, #10]
 8001ba8:	2000      	movs	r0, #0
 8001baa:	9000      	str	r0, [sp, #0]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f001 f9a5 	bl	8002efc <u8g2_DrawHVLine>
  if (h >= 2) {
 8001bb2:	8c3b      	ldrh	r3, [r7, #32]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d92d      	bls.n	8001c14 <u8g2_DrawFrame+0xb4>
    h-=2;
 8001bb8:	8c3b      	ldrh	r3, [r7, #32]
 8001bba:	3b02      	subs	r3, #2
 8001bbc:	843b      	strh	r3, [r7, #32]
    y++;
 8001bbe:	893b      	ldrh	r3, [r7, #8]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001bc4:	8c3b      	ldrh	r3, [r7, #32]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d01a      	beq.n	8001c00 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001bca:	8c3b      	ldrh	r3, [r7, #32]
 8001bcc:	893a      	ldrh	r2, [r7, #8]
 8001bce:	8979      	ldrh	r1, [r7, #10]
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	9000      	str	r0, [sp, #0]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f001 f991 	bl	8002efc <u8g2_DrawHVLine>
      x+=w;
 8001bda:	897a      	ldrh	r2, [r7, #10]
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	4413      	add	r3, r2
 8001be0:	817b      	strh	r3, [r7, #10]
      x--;
 8001be2:	897b      	ldrh	r3, [r7, #10]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001be8:	8c3b      	ldrh	r3, [r7, #32]
 8001bea:	893a      	ldrh	r2, [r7, #8]
 8001bec:	8979      	ldrh	r1, [r7, #10]
 8001bee:	2001      	movs	r0, #1
 8001bf0:	9000      	str	r0, [sp, #0]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f001 f982 	bl	8002efc <u8g2_DrawHVLine>
      y+=h;
 8001bf8:	893a      	ldrh	r2, [r7, #8]
 8001bfa:	8c3b      	ldrh	r3, [r7, #32]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	893a      	ldrh	r2, [r7, #8]
 8001c04:	8af9      	ldrh	r1, [r7, #22]
 8001c06:	2000      	movs	r0, #0
 8001c08:	9000      	str	r0, [sp, #0]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f001 f976 	bl	8002efc <u8g2_DrawHVLine>
 8001c10:	e000      	b.n	8001c14 <u8g2_DrawFrame+0xb4>
    return;
 8001c12:	bf00      	nop
  }
}
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	7c1b      	ldrb	r3, [r3, #16]
 8001c28:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c30:	461a      	mov	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f00a fea7 	bl	800c99c <memset>
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af02      	add	r7, sp, #8
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	70fb      	strb	r3, [r7, #3]
 8001c62:	4613      	mov	r3, r2
 8001c64:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	7c1b      	ldrb	r3, [r3, #16]
 8001c6c:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	89ba      	ldrh	r2, [r7, #12]
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001c84:	89bb      	ldrh	r3, [r7, #12]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001c8a:	89bb      	ldrh	r3, [r7, #12]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001c92:	7bf9      	ldrb	r1, [r7, #15]
 8001c94:	78ba      	ldrb	r2, [r7, #2]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f001 ff88 	bl	8003bb4 <u8x8_DrawTile>
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cbe:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cc6:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	7c5b      	ldrb	r3, [r3, #17]
 8001cce:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001cd0:	7bba      	ldrb	r2, [r7, #14]
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffbd 	bl	8001c56 <u8g2_send_tile_row>
    src_row++;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001ce2:	7bbb      	ldrb	r3, [r7, #14]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	7b7b      	ldrb	r3, [r7, #13]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d203      	bcs.n	8001cf8 <u8g2_send_buffer+0x4c>
 8001cf0:	7bba      	ldrb	r2, [r7, #14]
 8001cf2:	7b3b      	ldrb	r3, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3eb      	bcc.n	8001cd0 <u8g2_send_buffer+0x24>
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ffcf 	bl	8001cac <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f001 ffb2 	bl	8003c78 <u8x8_RefreshDisplay>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ff5b 	bl	8001c1a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001d64:	2100      	movs	r1, #0
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffd8 	bl	8001d1c <u8g2_SetBufferCurrTileRow>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff95 	bl	8001cac <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d88:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	4413      	add	r3, r2
 8001d94:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	7c5b      	ldrb	r3, [r3, #17]
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d304      	bcc.n	8001dac <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f001 ff68 	bl	8003c78 <u8x8_RefreshDisplay>
    return 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e00d      	b.n	8001dc8 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff2f 	bl	8001c1a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffab 	bl	8001d1c <u8g2_SetBufferCurrTileRow>
  return 1;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b08c      	sub	sp, #48	; 0x30
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	817b      	strh	r3, [r7, #10]
 8001de2:	460b      	mov	r3, r1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 8001dea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001dec:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 8001dee:	2308      	movs	r3, #8
 8001df0:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001e00:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8001e08:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001e10:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d007      	beq.n	8001e2c <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 8001e1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e1e:	3301      	adds	r3, #1
 8001e20:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 8001e22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e24:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 8001e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e28:	3301      	adds	r3, #1
 8001e2a:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 8001e2c:	897b      	ldrh	r3, [r7, #10]
 8001e2e:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 8001e30:	8b7a      	ldrh	r2, [r7, #26]
 8001e32:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 8001e38:	8b7a      	ldrh	r2, [r7, #26]
 8001e3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 8001e40:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e44:	4413      	add	r3, r2
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	8c3b      	ldrh	r3, [r7, #32]
 8001e4e:	4413      	add	r3, r2
 8001e50:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 8001e52:	893b      	ldrh	r3, [r7, #8]
 8001e54:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	4798      	blx	r3
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	8afb      	ldrh	r3, [r7, #22]
 8001e64:	4413      	add	r3, r2
 8001e66:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001e68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	8afa      	ldrh	r2, [r7, #22]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 8001e74:	8afa      	ldrh	r2, [r7, #22]
 8001e76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8001e7c:	8afa      	ldrh	r2, [r7, #22]
 8001e7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 8001e84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001e8e:	b21b      	sxth	r3, r3
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001e98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001e9a:	440b      	add	r3, r1
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 8001ea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d067      	beq.n	8001f7c <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8001eac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001eae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d109      	bne.n	8001ec8 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 8001eb4:	7f7b      	ldrb	r3, [r7, #29]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf0c      	ite	eq
 8001eba:	2301      	moveq	r3, #1
 8001ebc:	2300      	movne	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f001 f90a 	bl	80030dc <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8001ec8:	8b38      	ldrh	r0, [r7, #24]
 8001eca:	8afa      	ldrh	r2, [r7, #22]
 8001ecc:	8b79      	ldrh	r1, [r7, #26]
 8001ece:	8abb      	ldrh	r3, [r7, #20]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7ff fe43 	bl	8001b60 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001eda:	7f7b      	ldrb	r3, [r7, #29]
 8001edc:	4619      	mov	r1, r3
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f001 f8fc 	bl	80030dc <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	f003 0318 	and.w	r3, r3, #24
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d042      	beq.n	8001f74 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 8001eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d13c      	bne.n	8001f74 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	10db      	asrs	r3, r3, #3
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8001f06:	8a7b      	ldrh	r3, [r7, #18]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f10:	e02c      	b.n	8001f6c <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 8001f12:	8b7a      	ldrh	r2, [r7, #26]
 8001f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f16:	4413      	add	r3, r2
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	8a7b      	ldrh	r3, [r7, #18]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b299      	uxth	r1, r3
 8001f20:	8afa      	ldrh	r2, [r7, #22]
 8001f22:	8abb      	ldrh	r3, [r7, #20]
 8001f24:	4413      	add	r3, r2
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	8a7b      	ldrh	r3, [r7, #18]
 8001f30:	4413      	add	r3, r2
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	8b3b      	ldrh	r3, [r7, #24]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f001 f86b 	bl	8003012 <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8001f3c:	8b7a      	ldrh	r2, [r7, #26]
 8001f3e:	8b3b      	ldrh	r3, [r7, #24]
 8001f40:	4413      	add	r3, r2
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f46:	4413      	add	r3, r2
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	8a7b      	ldrh	r3, [r7, #18]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	b299      	uxth	r1, r3
 8001f50:	8afa      	ldrh	r2, [r7, #22]
 8001f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f54:	4413      	add	r3, r2
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	8a7b      	ldrh	r3, [r7, #18]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	8abb      	ldrh	r3, [r7, #20]
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f001 f86f 	bl	8003044 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8001f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f68:	3301      	adds	r3, #1
 8001f6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3ce      	bcc.n	8001f12 <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 8001f74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f76:	3b01      	subs	r3, #1
 8001f78:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8001f7a:	e757      	b.n	8001e2c <u8g2_DrawButtonFrame+0x5c>
      break;
 8001f7c:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d011      	beq.n	8001fac <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8001f88:	2102      	movs	r1, #2
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f001 f8a6 	bl	80030dc <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8001f90:	8b38      	ldrh	r0, [r7, #24]
 8001f92:	8afa      	ldrh	r2, [r7, #22]
 8001f94:	8b79      	ldrh	r1, [r7, #26]
 8001f96:	8abb      	ldrh	r3, [r7, #20]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff fda9 	bl	8001af4 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001fa2:	7f7b      	ldrb	r3, [r7, #29]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f001 f898 	bl	80030dc <u8g2_SetDrawColor>
  }
}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af04      	add	r7, sp, #16
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	817b      	strh	r3, [r7, #10]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	813b      	strh	r3, [r7, #8]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 8001fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 ff11 	bl	8002df8 <u8g2_GetUTF8Width>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001fda:	2300      	movs	r3, #0
 8001fdc:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8001fe8:	8afb      	ldrh	r3, [r7, #22]
 8001fea:	3301      	adds	r3, #1
 8001fec:	0fda      	lsrs	r2, r3, #31
 8001fee:	4413      	add	r3, r2
 8001ff0:	105b      	asrs	r3, r3, #1
 8001ff2:	425b      	negs	r3, r3
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	897b      	ldrh	r3, [r7, #10]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	8c3b      	ldrh	r3, [r7, #32]
 8002000:	429a      	cmp	r2, r3
 8002002:	d20d      	bcs.n	8002020 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d006      	beq.n	800201c <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 800200e:	8c3a      	ldrh	r2, [r7, #32]
 8002010:	8afb      	ldrh	r3, [r7, #22]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	0fda      	lsrs	r2, r3, #31
 8002016:	4413      	add	r3, r2
 8002018:	105b      	asrs	r3, r3, #1
 800201a:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 800201c:	8c3b      	ldrh	r3, [r7, #32]
 800201e:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 8002020:	2101      	movs	r1, #1
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fcda 	bl	80029dc <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8002028:	893a      	ldrh	r2, [r7, #8]
 800202a:	8979      	ldrh	r1, [r7, #10]
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fd92 	bl	8002b58 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8002034:	897a      	ldrh	r2, [r7, #10]
 8002036:	8abb      	ldrh	r3, [r7, #20]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	b299      	uxth	r1, r3
 800203c:	88f8      	ldrh	r0, [r7, #6]
 800203e:	893a      	ldrh	r2, [r7, #8]
 8002040:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002042:	9302      	str	r3, [sp, #8]
 8002044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	8afb      	ldrh	r3, [r7, #22]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4603      	mov	r3, r0
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7ff febe 	bl	8001dd0 <u8g2_DrawButtonFrame>
  
}
 8002054:	bf00      	nop
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fe71 	bl	8001d4c <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fe82 	bl	8001d74 <u8g2_NextPage>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f9      	bne.n	800206a <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002076:	2100      	movs	r1, #0
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fe4f 	bl	8001d1c <u8g2_SetBufferCurrTileRow>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2208      	movs	r2, #8
 8002094:	701a      	strb	r2, [r3, #0]
  return buf;
 8002096:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000728 	.word	0x20000728

080020a8 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 80020be:	490c      	ldr	r1, [pc, #48]	; (80020f0 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f001 fe39 	bl	8003d38 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 80020c6:	f107 0313 	add.w	r3, r7, #19
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ffdc 	bl	8002088 <u8g2_m_24_8_f>
 80020d0:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80020d2:	7cfa      	ldrb	r2, [r7, #19]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 80020da:	6979      	ldr	r1, [r7, #20]
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f001 f92f 	bl	8003340 <u8g2_SetupBuffer>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	080038d1 	.word	0x080038d1
 80020f0:	08003ab1 	.word	0x08003ab1
 80020f4:	080031c5 	.word	0x080031c5

080020f8 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	781b      	ldrb	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 800211a:	b480      	push	{r7}
 800211c:	b085      	sub	sp, #20
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	81fb      	strh	r3, [r7, #14]
	font++;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3301      	adds	r3, #1
 8002138:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b29a      	uxth	r2, r3
 8002146:	89fb      	ldrh	r3, [r7, #14]
 8002148:	4413      	add	r3, r2
 800214a:	81fb      	strh	r3, [r7, #14]
	return pos;
 800214c:	89fb      	ldrh	r3, [r7, #14]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8002162:	2100      	movs	r1, #0
 8002164:	6838      	ldr	r0, [r7, #0]
 8002166:	f7ff ffc7 	bl	80020f8 <u8g2_font_get_byte>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8002172:	2101      	movs	r1, #1
 8002174:	6838      	ldr	r0, [r7, #0]
 8002176:	f7ff ffbf 	bl	80020f8 <u8g2_font_get_byte>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002182:	2102      	movs	r1, #2
 8002184:	6838      	ldr	r0, [r7, #0]
 8002186:	f7ff ffb7 	bl	80020f8 <u8g2_font_get_byte>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002192:	2103      	movs	r1, #3
 8002194:	6838      	ldr	r0, [r7, #0]
 8002196:	f7ff ffaf 	bl	80020f8 <u8g2_font_get_byte>
 800219a:	4603      	mov	r3, r0
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80021a2:	2104      	movs	r1, #4
 80021a4:	6838      	ldr	r0, [r7, #0]
 80021a6:	f7ff ffa7 	bl	80020f8 <u8g2_font_get_byte>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80021b2:	2105      	movs	r1, #5
 80021b4:	6838      	ldr	r0, [r7, #0]
 80021b6:	f7ff ff9f 	bl	80020f8 <u8g2_font_get_byte>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80021c2:	2106      	movs	r1, #6
 80021c4:	6838      	ldr	r0, [r7, #0]
 80021c6:	f7ff ff97 	bl	80020f8 <u8g2_font_get_byte>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80021d2:	2107      	movs	r1, #7
 80021d4:	6838      	ldr	r0, [r7, #0]
 80021d6:	f7ff ff8f 	bl	80020f8 <u8g2_font_get_byte>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80021e2:	2108      	movs	r1, #8
 80021e4:	6838      	ldr	r0, [r7, #0]
 80021e6:	f7ff ff87 	bl	80020f8 <u8g2_font_get_byte>
 80021ea:	4603      	mov	r3, r0
 80021ec:	461a      	mov	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80021f2:	2109      	movs	r1, #9
 80021f4:	6838      	ldr	r0, [r7, #0]
 80021f6:	f7ff ff7f 	bl	80020f8 <u8g2_font_get_byte>
 80021fa:	4603      	mov	r3, r0
 80021fc:	b25a      	sxtb	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002202:	210a      	movs	r1, #10
 8002204:	6838      	ldr	r0, [r7, #0]
 8002206:	f7ff ff77 	bl	80020f8 <u8g2_font_get_byte>
 800220a:	4603      	mov	r3, r0
 800220c:	b25a      	sxtb	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002212:	210b      	movs	r1, #11
 8002214:	6838      	ldr	r0, [r7, #0]
 8002216:	f7ff ff6f 	bl	80020f8 <u8g2_font_get_byte>
 800221a:	4603      	mov	r3, r0
 800221c:	b25a      	sxtb	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002222:	210c      	movs	r1, #12
 8002224:	6838      	ldr	r0, [r7, #0]
 8002226:	f7ff ff67 	bl	80020f8 <u8g2_font_get_byte>
 800222a:	4603      	mov	r3, r0
 800222c:	b25a      	sxtb	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8002232:	210d      	movs	r1, #13
 8002234:	6838      	ldr	r0, [r7, #0]
 8002236:	f7ff ff5f 	bl	80020f8 <u8g2_font_get_byte>
 800223a:	4603      	mov	r3, r0
 800223c:	b25a      	sxtb	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002242:	210e      	movs	r1, #14
 8002244:	6838      	ldr	r0, [r7, #0]
 8002246:	f7ff ff57 	bl	80020f8 <u8g2_font_get_byte>
 800224a:	4603      	mov	r3, r0
 800224c:	b25a      	sxtb	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002252:	210f      	movs	r1, #15
 8002254:	6838      	ldr	r0, [r7, #0]
 8002256:	f7ff ff4f 	bl	80020f8 <u8g2_font_get_byte>
 800225a:	4603      	mov	r3, r0
 800225c:	b25a      	sxtb	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002262:	2110      	movs	r1, #16
 8002264:	6838      	ldr	r0, [r7, #0]
 8002266:	f7ff ff47 	bl	80020f8 <u8g2_font_get_byte>
 800226a:	4603      	mov	r3, r0
 800226c:	b25a      	sxtb	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002272:	2111      	movs	r1, #17
 8002274:	6838      	ldr	r0, [r7, #0]
 8002276:	f7ff ff50 	bl	800211a <u8g2_font_get_word>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8002282:	2113      	movs	r1, #19
 8002284:	6838      	ldr	r0, [r7, #0]
 8002286:	f7ff ff48 	bl	800211a <u8g2_font_get_word>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 8002292:	2115      	movs	r1, #21
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	f7ff ff40 	bl	800211a <u8g2_font_get_word>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	82da      	strh	r2, [r3, #22]
#endif
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7b1b      	ldrb	r3, [r3, #12]
 80022ba:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	7b7b      	ldrb	r3, [r7, #13]
 80022c8:	fa42 f303 	asr.w	r3, r2, r3
 80022cc:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 80022ce:	7b7b      	ldrb	r3, [r7, #13]
 80022d0:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 80022d2:	7bba      	ldrb	r2, [r7, #14]
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	4413      	add	r3, r2
 80022d8:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 80022da:	7bbb      	ldrb	r3, [r7, #14]
 80022dc:	2b07      	cmp	r3, #7
 80022de:	d91a      	bls.n	8002316 <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 80022e0:	2308      	movs	r3, #8
 80022e2:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 80022e4:	7b3a      	ldrb	r2, [r7, #12]
 80022e6:	7b7b      	ldrb	r3, [r7, #13]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	7b3b      	ldrb	r3, [r7, #12]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	b25a      	sxtb	r2, r3
 8002306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230a:	4313      	orrs	r3, r2
 800230c:	b25b      	sxtb	r3, r3
 800230e:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 8002310:	7bbb      	ldrb	r3, [r7, #14]
 8002312:	3b08      	subs	r3, #8
 8002314:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	b2da      	uxtb	r2, r3
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	4013      	ands	r3, r2
 800232a:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	7bba      	ldrb	r2, [r7, #14]
 8002330:	731a      	strb	r2, [r3, #12]
	return val;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffab 	bl	80022aa <u8g2_font_decode_get_unsigned_bits>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8002358:	2301      	movs	r3, #1
 800235a:	73bb      	strb	r3, [r7, #14]
	cnt--;
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	3b01      	subs	r3, #1
 8002360:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 8002362:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	73bb      	strb	r3, [r7, #14]
	v -= d;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	7bbb      	ldrb	r3, [r7, #14]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	73fb      	strb	r3, [r7, #15]
	return v;
 8002378:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 8002384:	b490      	push	{r4, r7}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	4604      	mov	r4, r0
 800238c:	4608      	mov	r0, r1
 800238e:	4611      	mov	r1, r2
 8002390:	461a      	mov	r2, r3
 8002392:	4623      	mov	r3, r4
 8002394:	80fb      	strh	r3, [r7, #6]
 8002396:	4603      	mov	r3, r0
 8002398:	717b      	strb	r3, [r7, #5]
 800239a:	460b      	mov	r3, r1
 800239c:	713b      	strb	r3, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d014      	beq.n	80023d2 <u8g2_add_vector_y+0x4e>
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	dc19      	bgt.n	80023e0 <u8g2_add_vector_y+0x5c>
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <u8g2_add_vector_y+0x32>
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d007      	beq.n	80023c4 <u8g2_add_vector_y+0x40>
 80023b4:	e014      	b.n	80023e0 <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 80023b6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	4413      	add	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
		break;
 80023c2:	e014      	b.n	80023ee <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 80023c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	4413      	add	r3, r2
 80023ce:	80fb      	strh	r3, [r7, #6]
		break;
 80023d0:	e00d      	b.n	80023ee <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 80023d2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	88fa      	ldrh	r2, [r7, #6]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	80fb      	strh	r3, [r7, #6]
		break;
 80023de:	e006      	b.n	80023ee <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 80023e0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	80fb      	strh	r3, [r7, #6]
		break;
 80023ec:	bf00      	nop
	}
	return dy;
 80023ee:	88fb      	ldrh	r3, [r7, #6]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc90      	pop	{r4, r7}
 80023f8:	4770      	bx	lr

080023fa <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 80023fa:	b490      	push	{r4, r7}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4604      	mov	r4, r0
 8002402:	4608      	mov	r0, r1
 8002404:	4611      	mov	r1, r2
 8002406:	461a      	mov	r2, r3
 8002408:	4623      	mov	r3, r4
 800240a:	80fb      	strh	r3, [r7, #6]
 800240c:	4603      	mov	r3, r0
 800240e:	717b      	strb	r3, [r7, #5]
 8002410:	460b      	mov	r3, r1
 8002412:	713b      	strb	r3, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d014      	beq.n	8002448 <u8g2_add_vector_x+0x4e>
 800241e:	2b02      	cmp	r3, #2
 8002420:	dc19      	bgt.n	8002456 <u8g2_add_vector_x+0x5c>
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <u8g2_add_vector_x+0x32>
 8002426:	2b01      	cmp	r3, #1
 8002428:	d007      	beq.n	800243a <u8g2_add_vector_x+0x40>
 800242a:	e014      	b.n	8002456 <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 800242c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002430:	b29a      	uxth	r2, r3
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	4413      	add	r3, r2
 8002436:	80fb      	strh	r3, [r7, #6]
		break;
 8002438:	e014      	b.n	8002464 <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 800243a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800243e:	b29b      	uxth	r3, r3
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	80fb      	strh	r3, [r7, #6]
		break;
 8002446:	e00d      	b.n	8002464 <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8002448:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800244c:	b29b      	uxth	r3, r3
 800244e:	88fa      	ldrh	r2, [r7, #6]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	80fb      	strh	r3, [r7, #6]
		break;
 8002454:	e006      	b.n	8002464 <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 8002456:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800245a:	b29a      	uxth	r2, r3
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	4413      	add	r3, r2
 8002460:	80fb      	strh	r3, [r7, #6]
		break;
 8002462:	bf00      	nop
	}
	return dx;
 8002464:	88fb      	ldrh	r3, [r7, #6]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bc90      	pop	{r4, r7}
 800246e:	4770      	bx	lr

08002470 <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af02      	add	r7, sp, #8
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
 800247c:	4613      	mov	r3, r2
 800247e:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3360      	adds	r3, #96	; 0x60
 8002484:	613b      	str	r3, [r7, #16]

	cnt = len;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002490:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002498:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80024a0:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	7d7b      	ldrb	r3, [r7, #21]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 80024ae:	7dfa      	ldrb	r2, [r7, #23]
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d201      	bcs.n	80024ba <u8g2_font_decode_len+0x4a>
			current = cnt;
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	889b      	ldrh	r3, [r3, #4]
 80024be:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	88db      	ldrh	r3, [r3, #6]
 80024c4:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80024c6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80024ca:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	7c1b      	ldrb	r3, [r3, #16]
 80024d2:	89b8      	ldrh	r0, [r7, #12]
 80024d4:	f7ff ff91 	bl	80023fa <u8g2_add_vector_x>
 80024d8:	4603      	mov	r3, r0
 80024da:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80024dc:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80024e0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	7c1b      	ldrb	r3, [r3, #16]
 80024e8:	8978      	ldrh	r0, [r7, #10]
 80024ea:	f7ff ff4b 	bl	8002384 <u8g2_add_vector_y>
 80024ee:	4603      	mov	r3, r0
 80024f0:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 80024f2:	78bb      	ldrb	r3, [r7, #2]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	7b9a      	ldrb	r2, [r3, #14]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8002502:	7dbb      	ldrb	r3, [r7, #22]
 8002504:	b298      	uxth	r0, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	7c1b      	ldrb	r3, [r3, #16]
 800250a:	897a      	ldrh	r2, [r7, #10]
 800250c:	89b9      	ldrh	r1, [r7, #12]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	4603      	mov	r3, r0
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fcf2 	bl	8002efc <u8g2_DrawHVLine>
 8002518:	e013      	b.n	8002542 <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	7b5b      	ldrb	r3, [r3, #13]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	7bda      	ldrb	r2, [r3, #15]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 800252c:	7dbb      	ldrb	r3, [r7, #22]
 800252e:	b298      	uxth	r0, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	7c1b      	ldrb	r3, [r3, #16]
 8002534:	897a      	ldrh	r2, [r7, #10]
 8002536:	89b9      	ldrh	r1, [r7, #12]
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4603      	mov	r3, r0
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fcdd 	bl	8002efc <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 8002542:	7dfa      	ldrb	r2, [r7, #23]
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	429a      	cmp	r2, r3
 8002548:	d309      	bcc.n	800255e <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 800254a:	7dfa      	ldrb	r2, [r7, #23]
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	757b      	strb	r3, [r7, #21]
		ly++;
 8002556:	7d3b      	ldrb	r3, [r7, #20]
 8002558:	3301      	adds	r3, #1
 800255a:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 800255c:	e79d      	b.n	800249a <u8g2_font_decode_len+0x2a>
			break;
 800255e:	bf00      	nop
	}
	lx += cnt;
 8002560:	7d7a      	ldrb	r2, [r7, #21]
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	4413      	add	r3, r2
 8002566:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8002568:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8002570:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	725a      	strb	r2, [r3, #9]

}
 8002578:	bf00      	nop
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3360      	adds	r3, #96	; 0x60
 800258e:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80025a2:	4619      	mov	r1, r3
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff fe80 	bl	80022aa <u8g2_font_decode_get_unsigned_bits>
 80025aa:	4603      	mov	r3, r0
 80025ac:	b25a      	sxtb	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80025b8:	4619      	mov	r1, r3
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f7ff fe75 	bl	80022aa <u8g2_font_decode_get_unsigned_bits>
 80025c0:	4603      	mov	r3, r0
 80025c2:	b25a      	sxtb	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	7b9b      	ldrb	r3, [r3, #14]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	bf0c      	ite	eq
 80025da:	2301      	moveq	r3, #1
 80025dc:	2300      	movne	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	73da      	strb	r2, [r3, #15]
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3360      	adds	r3, #96	; 0x60
 80025fe:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffbc 	bl	8002580 <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800260e:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002616:	4619      	mov	r1, r3
 8002618:	6978      	ldr	r0, [r7, #20]
 800261a:	f7ff fe90 	bl	800233e <u8g2_font_decode_get_signed_bits>
 800261e:	4603      	mov	r3, r0
 8002620:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002628:	4619      	mov	r1, r3
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff fe87 	bl	800233e <u8g2_font_decode_get_signed_bits>
 8002630:	4603      	mov	r3, r0
 8002632:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800263a:	4619      	mov	r1, r3
 800263c:	6978      	ldr	r0, [r7, #20]
 800263e:	f7ff fe7e 	bl	800233e <u8g2_font_decode_get_signed_bits>
 8002642:	4603      	mov	r3, r0
 8002644:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f340 80d7 	ble.w	8002800 <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	8898      	ldrh	r0, [r3, #4]
 8002656:	7cfa      	ldrb	r2, [r7, #19]
 8002658:	7c7b      	ldrb	r3, [r7, #17]
 800265a:	4413      	add	r3, r2
 800265c:	b2db      	uxtb	r3, r3
 800265e:	425b      	negs	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	b25a      	sxtb	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	7c1b      	ldrb	r3, [r3, #16]
 8002668:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800266c:	f7ff fec5 	bl	80023fa <u8g2_add_vector_x>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	88d8      	ldrh	r0, [r3, #6]
 800267c:	7cfa      	ldrb	r2, [r7, #19]
 800267e:	7c7b      	ldrb	r3, [r7, #17]
 8002680:	4413      	add	r3, r2
 8002682:	b2db      	uxtb	r3, r3
 8002684:	425b      	negs	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	b25a      	sxtb	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	7c1b      	ldrb	r3, [r3, #16]
 800268e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002692:	f7ff fe77 	bl	8002384 <u8g2_add_vector_y>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	889b      	ldrh	r3, [r3, #4]
 80026a2:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	88db      	ldrh	r3, [r3, #6]
 80026a8:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 80026aa:	8bfb      	ldrh	r3, [r7, #30]
 80026ac:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 80026ae:	8b7b      	ldrh	r3, [r7, #26]
 80026b0:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	7c1b      	ldrb	r3, [r3, #16]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d85a      	bhi.n	8002770 <u8g2_font_decode_glyph+0x180>
 80026ba:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <u8g2_font_decode_glyph+0xd0>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026ed 	.word	0x080026ed
 80026c8:	08002715 	.word	0x08002715
 80026cc:	08002749 	.word	0x08002749
			case 0:
				x1 += decode->glyph_width;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	8bbb      	ldrh	r3, [r7, #28]
 80026da:	4413      	add	r3, r2
 80026dc:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 80026de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	8b3b      	ldrh	r3, [r7, #24]
 80026e6:	4413      	add	r3, r2
 80026e8:	833b      	strh	r3, [r7, #24]
				break;
 80026ea:	e041      	b.n	8002770 <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 80026ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	8bfa      	ldrh	r2, [r7, #30]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80026f8:	8bfb      	ldrh	r3, [r7, #30]
 80026fa:	3301      	adds	r3, #1
 80026fc:	83fb      	strh	r3, [r7, #30]
				x1++;
 80026fe:	8bbb      	ldrh	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800270a:	b29a      	uxth	r2, r3
 800270c:	8b3b      	ldrh	r3, [r7, #24]
 800270e:	4413      	add	r3, r2
 8002710:	833b      	strh	r3, [r7, #24]
				break;
 8002712:	e02d      	b.n	8002770 <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800271a:	b29b      	uxth	r3, r3
 800271c:	8bfa      	ldrh	r2, [r7, #30]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002722:	8bfb      	ldrh	r3, [r7, #30]
 8002724:	3301      	adds	r3, #1
 8002726:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002728:	8bbb      	ldrh	r3, [r7, #28]
 800272a:	3301      	adds	r3, #1
 800272c:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 800272e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002732:	b29b      	uxth	r3, r3
 8002734:	8b7a      	ldrh	r2, [r7, #26]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 800273a:	8b7b      	ldrh	r3, [r7, #26]
 800273c:	3301      	adds	r3, #1
 800273e:	837b      	strh	r3, [r7, #26]
				y1++;
 8002740:	8b3b      	ldrh	r3, [r7, #24]
 8002742:	3301      	adds	r3, #1
 8002744:	833b      	strh	r3, [r7, #24]
				break;
 8002746:	e013      	b.n	8002770 <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 8002748:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800274c:	b29a      	uxth	r2, r3
 800274e:	8bbb      	ldrh	r3, [r7, #28]
 8002750:	4413      	add	r3, r2
 8002752:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800275a:	b29b      	uxth	r3, r3
 800275c:	8b7a      	ldrh	r2, [r7, #26]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002762:	8b7b      	ldrh	r3, [r7, #26]
 8002764:	3301      	adds	r3, #1
 8002766:	837b      	strh	r3, [r7, #26]
				y1++;
 8002768:	8b3b      	ldrh	r3, [r7, #24]
 800276a:	3301      	adds	r3, #1
 800276c:	833b      	strh	r3, [r7, #24]
				break;
 800276e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8002770:	8bb8      	ldrh	r0, [r7, #28]
 8002772:	8b7a      	ldrh	r2, [r7, #26]
 8002774:	8bf9      	ldrh	r1, [r7, #30]
 8002776:	8b3b      	ldrh	r3, [r7, #24]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4603      	mov	r3, r0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fcf6 	bl	800316e <u8g2_IsIntersection>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <u8g2_font_decode_glyph+0x19e>
				return d;
 8002788:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800278c:	e03a      	b.n	8002804 <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2200      	movs	r2, #0
 8002792:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2200      	movs	r2, #0
 8002798:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80027a0:	4619      	mov	r1, r3
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff fd81 	bl	80022aa <u8g2_font_decode_get_unsigned_bits>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80027b2:	4619      	mov	r1, r3
 80027b4:	6978      	ldr	r0, [r7, #20]
 80027b6:	f7ff fd78 	bl	80022aa <u8g2_font_decode_get_unsigned_bits>
 80027ba:	4603      	mov	r3, r0
 80027bc:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	2200      	movs	r2, #0
 80027c2:	4619      	mov	r1, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fe53 	bl	8002470 <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 80027ca:	7bbb      	ldrb	r3, [r7, #14]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fe4d 	bl	8002470 <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 80027d6:	2101      	movs	r1, #1
 80027d8:	6978      	ldr	r0, [r7, #20]
 80027da:	f7ff fd66 	bl	80022aa <u8g2_font_decode_get_unsigned_bits>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1ec      	bne.n	80027be <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80027ea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	dd00      	ble.n	80027f4 <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 80027f2:	e7d2      	b.n	800279a <u8g2_font_decode_glyph+0x1aa>
				break;
 80027f4:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	7b9a      	ldrb	r2, [r3, #14]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 8002800:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281c:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3317      	adds	r3, #23
 8002822:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 8002824:	887b      	ldrh	r3, [r7, #2]
 8002826:	2bff      	cmp	r3, #255	; 0xff
 8002828:	d82a      	bhi.n	8002880 <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 800282a:	887b      	ldrh	r3, [r7, #2]
 800282c:	2b60      	cmp	r3, #96	; 0x60
 800282e:	d907      	bls.n	8002840 <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002836:	461a      	mov	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	4413      	add	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e009      	b.n	8002854 <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	2b40      	cmp	r3, #64	; 0x40
 8002844:	d906      	bls.n	8002854 <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800284c:	461a      	mov	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	4413      	add	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3301      	adds	r3, #1
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d04e      	beq.n	80028fc <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	887a      	ldrh	r2, [r7, #2]
 8002866:	429a      	cmp	r2, r3
 8002868:	d102      	bne.n	8002870 <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3302      	adds	r3, #2
 800286e:	e049      	b.n	8002904 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3301      	adds	r3, #1
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	4413      	add	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 800287e:	e7e9      	b.n	8002854 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002886:	461a      	mov	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	4413      	add	r3, r2
 800288c:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002892:	2100      	movs	r1, #0
 8002894:	6938      	ldr	r0, [r7, #16]
 8002896:	f7ff fc40 	bl	800211a <u8g2_font_get_word>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	4413      	add	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 80028a4:	2102      	movs	r1, #2
 80028a6:	6938      	ldr	r0, [r7, #16]
 80028a8:	f7ff fc37 	bl	800211a <u8g2_font_get_word>
 80028ac:	4603      	mov	r3, r0
 80028ae:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	3304      	adds	r3, #4
 80028b4:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 80028b6:	89fa      	ldrh	r2, [r7, #14]
 80028b8:	887b      	ldrh	r3, [r7, #2]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d3e9      	bcc.n	8002892 <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 80028c4:	89fb      	ldrh	r3, [r7, #14]
 80028c6:	021b      	lsls	r3, r3, #8
 80028c8:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	89fb      	ldrh	r3, [r7, #14]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 80028d8:	89fb      	ldrh	r3, [r7, #14]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 80028de:	89fa      	ldrh	r2, [r7, #14]
 80028e0:	887b      	ldrh	r3, [r7, #2]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d102      	bne.n	80028ec <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3303      	adds	r3, #3
 80028ea:	e00b      	b.n	8002904 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	3302      	adds	r3, #2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4413      	add	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 80028fa:	e7e0      	b.n	80028be <u8g2_font_get_glyph_data+0xb2>
				break;
 80028fc:	bf00      	nop
 80028fe:	e000      	b.n	8002902 <u8g2_font_get_glyph_data+0xf6>
				break;
 8002900:	bf00      	nop
		}
	}
#endif

	return NULL;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	4608      	mov	r0, r1
 8002916:	4611      	mov	r1, r2
 8002918:	461a      	mov	r2, r3
 800291a:	4603      	mov	r3, r0
 800291c:	817b      	strh	r3, [r7, #10]
 800291e:	460b      	mov	r3, r1
 8002920:	813b      	strh	r3, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	897a      	ldrh	r2, [r7, #10]
 800292e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	893a      	ldrh	r2, [r7, #8]
 8002936:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	4619      	mov	r1, r3
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff ff64 	bl	800280c <u8g2_font_get_glyph_data>
 8002944:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800294c:	6939      	ldr	r1, [r7, #16]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff fe4e 	bl	80025f0 <u8g2_font_decode_glyph>
 8002954:	4603      	mov	r3, r0
 8002956:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 8002958:	8afb      	ldrh	r3, [r7, #22]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	4619      	mov	r1, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ff4a 	bl	800280c <u8g2_font_get_glyph_data>
 8002978:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <u8g2_GetGlyphWidth+0x22>
		return 0;
 8002980:	2300      	movs	r3, #0
 8002982:	e027      	b.n	80029d4 <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fdfa 	bl	8002580 <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f7ff fccf 	bl	800233e <u8g2_font_decode_get_signed_bits>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461a      	mov	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80029b6:	4619      	mov	r1, r3
 80029b8:	4610      	mov	r0, r2
 80029ba:	f7ff fcc0 	bl	800233e <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80029ca:	4619      	mov	r1, r3
 80029cc:	4610      	mov	r0, r2
 80029ce:	f7ff fcb6 	bl	800233e <u8g2_font_decode_get_signed_bits>
 80029d2:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
	...

080029fc <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	817b      	strh	r3, [r7, #10]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	813b      	strh	r3, [r7, #8]
 8002a12:	4613      	mov	r3, r2
 8002a14:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d833      	bhi.n	8002a88 <u8g2_DrawGlyph+0x8c>
 8002a20:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <u8g2_DrawGlyph+0x2c>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a4d 	.word	0x08002a4d
 8002a30:	08002a61 	.word	0x08002a61
 8002a34:	08002a75 	.word	0x08002a75
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	4798      	blx	r3
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	4413      	add	r3, r2
 8002a48:	813b      	strh	r3, [r7, #8]
		break;
 8002a4a:	e01d      	b.n	8002a88 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	4798      	blx	r3
 8002a54:	4603      	mov	r3, r0
 8002a56:	461a      	mov	r2, r3
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	817b      	strh	r3, [r7, #10]
		break;
 8002a5e:	e013      	b.n	8002a88 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	4798      	blx	r3
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	813b      	strh	r3, [r7, #8]
		break;
 8002a72:	e009      	b.n	8002a88 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	4798      	blx	r3
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	897b      	ldrh	r3, [r7, #10]
 8002a82:	4413      	add	r3, r2
 8002a84:	817b      	strh	r3, [r7, #10]
		break;
 8002a86:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	893a      	ldrh	r2, [r7, #8]
 8002a8c:	8979      	ldrh	r1, [r7, #10]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ff3c 	bl	800290c <u8g2_font_draw_glyph>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop

08002aa0 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	817b      	strh	r3, [r7, #10]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fd86 	bl	80035c4 <u8x8_utf8_init>
	sum = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	7812      	ldrb	r2, [r2, #0]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	4798      	blx	r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 8002ace:	8abb      	ldrh	r3, [r7, #20]
 8002ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d038      	beq.n	8002b4a <u8g2_draw_string+0xaa>
			break;
		str++;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3301      	adds	r3, #1
 8002adc:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 8002ade:	8abb      	ldrh	r3, [r7, #20]
 8002ae0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d0e9      	beq.n	8002abc <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002ae8:	8abb      	ldrh	r3, [r7, #20]
 8002aea:	893a      	ldrh	r2, [r7, #8]
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7ff ff84 	bl	80029fc <u8g2_DrawGlyph>
 8002af4:	4603      	mov	r3, r0
 8002af6:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d81e      	bhi.n	8002b40 <u8g2_draw_string+0xa0>
 8002b02:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <u8g2_draw_string+0x68>)
 8002b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b08:	08002b19 	.word	0x08002b19
 8002b0c:	08002b23 	.word	0x08002b23
 8002b10:	08002b2d 	.word	0x08002b2d
 8002b14:	08002b37 	.word	0x08002b37
			case 0:
				x += delta;
 8002b18:	897a      	ldrh	r2, [r7, #10]
 8002b1a:	8a7b      	ldrh	r3, [r7, #18]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	817b      	strh	r3, [r7, #10]
				break;
 8002b20:	e00e      	b.n	8002b40 <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 8002b22:	893a      	ldrh	r2, [r7, #8]
 8002b24:	8a7b      	ldrh	r3, [r7, #18]
 8002b26:	4413      	add	r3, r2
 8002b28:	813b      	strh	r3, [r7, #8]
				break;
 8002b2a:	e009      	b.n	8002b40 <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 8002b2c:	897a      	ldrh	r2, [r7, #10]
 8002b2e:	8a7b      	ldrh	r3, [r7, #18]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	817b      	strh	r3, [r7, #10]
				break;
 8002b34:	e004      	b.n	8002b40 <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 8002b36:	893a      	ldrh	r2, [r7, #8]
 8002b38:	8a7b      	ldrh	r3, [r7, #18]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	813b      	strh	r3, [r7, #8]
				break;
 8002b3e:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 8002b40:	8afa      	ldrh	r2, [r7, #22]
 8002b42:	8a7b      	ldrh	r3, [r7, #18]
 8002b44:	4413      	add	r3, r2
 8002b46:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002b48:	e7b8      	b.n	8002abc <u8g2_draw_string+0x1c>
			break;
 8002b4a:	bf00      	nop
		}
	}
	return sum;
 8002b4c:	8afb      	ldrh	r3, [r7, #22]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop

08002b58 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	817b      	strh	r3, [r7, #10]
 8002b66:	4613      	mov	r3, r2
 8002b68:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <u8g2_DrawUTF8+0x30>)
 8002b6e:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 8002b70:	893a      	ldrh	r2, [r7, #8]
 8002b72:	8979      	ldrh	r1, [r7, #10]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f7ff ff92 	bl	8002aa0 <u8g2_draw_string>
 8002b7c:	4603      	mov	r3, r0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	0800360b 	.word	0x0800360b

08002b8c <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d05d      	beq.n	8002c58 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04d      	beq.n	8002c5a <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d11c      	bne.n	8002c02 <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	da05      	bge.n	8002be4 <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dd32      	ble.n	8002c5a <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002c00:	e02b      	b.n	8002c5a <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002c08:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002c10:	4619      	mov	r1, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002c18:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	da0d      	bge.n	8002c3a <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002c24:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002c46:	429a      	cmp	r2, r3
 8002c48:	dd07      	ble.n	8002c5a <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002c56:	e000      	b.n	8002c5a <u8g2_UpdateRefHeight+0xce>
		return;
 8002c58:	bf00      	nop
	}
}
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
	return 0;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
	...

08002c78 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a03      	ldr	r2, [pc, #12]	; (8002c90 <u8g2_SetFontPosBaseline+0x18>)
 8002c84:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	08002c63 	.word	0x08002c63

08002c94 <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002ca2:	81fb      	strh	r3, [r7, #14]
	tmp++;
 8002ca4:	89fb      	ldrh	r3, [r7, #14]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8002caa:	89fb      	ldrh	r3, [r7, #14]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
	...

08002cb8 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a03      	ldr	r2, [pc, #12]	; (8002cd0 <u8g2_SetFontPosTop+0x18>)
 8002cc4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	08002c95 	.word	0x08002c95

08002cd4 <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d00b      	beq.n	8002d00 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3374      	adds	r3, #116	; 0x74
 8002cf2:	6839      	ldr	r1, [r7, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fa2f 	bl	8002158 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ff46 	bl	8002b8c <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 8002d12:	23c0      	movs	r3, #192	; 0xc0
 8002d14:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fc50 	bl	80035c4 <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	7812      	ldrb	r2, [r2, #0]
 8002d34:	4611      	mov	r1, r2
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 8002d3e:	893b      	ldrh	r3, [r7, #8]
 8002d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d01c      	beq.n	8002d82 <u8g2_string_width+0x7a>
			break;
		str++;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 8002d4e:	893b      	ldrh	r3, [r7, #8]
 8002d50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d0e9      	beq.n	8002d2c <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 8002d58:	893b      	ldrh	r3, [r7, #8]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff fe00 	bl	8002962 <u8g2_GetGlyphWidth>
 8002d62:	4603      	mov	r3, r0
 8002d64:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 8002d66:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002d6a:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8002d6e:	d103      	bne.n	8002d78 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002d76:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 8002d78:	89fa      	ldrh	r2, [r7, #14]
 8002d7a:	89bb      	ldrh	r3, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002d80:	e7d4      	b.n	8002d2c <u8g2_string_width+0x24>
			break;
 8002d82:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01b      	beq.n	8002dc6 <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 8002d8e:	89fa      	ldrh	r2, [r7, #14]
 8002d90:	89bb      	ldrh	r3, [r7, #12]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	89fb      	ldrh	r3, [r7, #14]
 8002da0:	4413      	add	r3, r2
 8002da2:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	89fb      	ldrh	r3, [r7, #14]
 8002dae:	4413      	add	r3, r2
 8002db0:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 8002db2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	dd05      	ble.n	8002dc6 <u8g2_string_width+0xbe>
			w += initial_x_offset;
 8002dba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	89fb      	ldrh	r3, [r7, #14]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 8002dc6:	89fb      	ldrh	r3, [r7, #14]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <u8g2_GetStrWidth+0x24>)
 8002dde:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 8002de0:	6839      	ldr	r1, [r7, #0]
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ff90 	bl	8002d08 <u8g2_string_width>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	080035df 	.word	0x080035df

08002df8 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <u8g2_GetUTF8Width+0x24>)
 8002e06:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 8002e08:	6839      	ldr	r1, [r7, #0]
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ff7c 	bl	8002d08 <u8g2_string_width>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	0800360b 	.word	0x0800360b

08002e20 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	460b      	mov	r3, r1
 8002e30:	80fb      	strh	r3, [r7, #6]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002e3c:	8afb      	ldrh	r3, [r7, #22]
 8002e3e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	881a      	ldrh	r2, [r3, #0]
 8002e44:	8abb      	ldrh	r3, [r7, #20]
 8002e46:	4413      	add	r3, r2
 8002e48:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002e4a:	8afa      	ldrh	r2, [r7, #22]
 8002e4c:	8abb      	ldrh	r3, [r7, #20]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d90b      	bls.n	8002e6a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002e52:	8afa      	ldrh	r2, [r7, #22]
 8002e54:	88bb      	ldrh	r3, [r7, #4]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d205      	bcs.n	8002e66 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002e5a:	88bb      	ldrh	r3, [r7, #4]
 8002e5c:	82bb      	strh	r3, [r7, #20]
      b--;
 8002e5e:	8abb      	ldrh	r3, [r7, #20]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	82bb      	strh	r3, [r7, #20]
 8002e64:	e001      	b.n	8002e6a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002e6a:	8afa      	ldrh	r2, [r7, #22]
 8002e6c:	88bb      	ldrh	r3, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d301      	bcc.n	8002e76 <u8g2_clip_intersection2+0x56>
    return 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e01c      	b.n	8002eb0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002e76:	8aba      	ldrh	r2, [r7, #20]
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d801      	bhi.n	8002e82 <u8g2_clip_intersection2+0x62>
    return 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e016      	b.n	8002eb0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002e82:	8afa      	ldrh	r2, [r7, #22]
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d201      	bcs.n	8002e8e <u8g2_clip_intersection2+0x6e>
    a = c;
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002e8e:	8aba      	ldrh	r2, [r7, #20]
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d901      	bls.n	8002e9a <u8g2_clip_intersection2+0x7a>
    b = d;
 8002e96:	88bb      	ldrh	r3, [r7, #4]
 8002e98:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8afa      	ldrh	r2, [r7, #22]
 8002e9e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002ea0:	8aba      	ldrh	r2, [r7, #20]
 8002ea2:	8afb      	ldrh	r3, [r7, #22]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	8aba      	ldrh	r2, [r7, #20]
 8002eac:	801a      	strh	r2, [r3, #0]
  return 1;
 8002eae:	2301      	movs	r3, #1
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002eba:	b590      	push	{r4, r7, lr}
 8002ebc:	b087      	sub	sp, #28
 8002ebe:	af02      	add	r7, sp, #8
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	4608      	mov	r0, r1
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4603      	mov	r3, r0
 8002eca:	817b      	strh	r3, [r7, #10]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	813b      	strh	r3, [r7, #8]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed8:	893a      	ldrh	r2, [r7, #8]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002ee2:	88f8      	ldrh	r0, [r7, #6]
 8002ee4:	893a      	ldrh	r2, [r7, #8]
 8002ee6:	8979      	ldrh	r1, [r7, #10]
 8002ee8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	4603      	mov	r3, r0
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	47a0      	blx	r4
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd90      	pop	{r4, r7, pc}

08002efc <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d075      	beq.n	800300c <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d072      	beq.n	800300c <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d91a      	bls.n	8002f62 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002f2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d109      	bne.n	8002f48 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002f34:	897a      	ldrh	r2, [r7, #10]
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	817b      	strh	r3, [r7, #10]
	  x++;
 8002f3e:	897b      	ldrh	r3, [r7, #10]
 8002f40:	3301      	adds	r3, #1
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	817b      	strh	r3, [r7, #10]
 8002f46:	e00c      	b.n	8002f62 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002f48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d108      	bne.n	8002f62 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002f50:	893a      	ldrh	r2, [r7, #8]
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	813b      	strh	r3, [r7, #8]
	  y++;
 8002f5a:	893b      	ldrh	r3, [r7, #8]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002f62:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002f6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d11a      	bne.n	8002fac <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002f7c:	893b      	ldrh	r3, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d83b      	bhi.n	8002ffa <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002f88:	893b      	ldrh	r3, [r7, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d937      	bls.n	8002ffe <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002f9a:	1db9      	adds	r1, r7, #6
 8002f9c:	f107 000a 	add.w	r0, r7, #10
 8002fa0:	f7ff ff3e 	bl	8002e20 <u8g2_clip_intersection2>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11a      	bne.n	8002fe0 <u8g2_DrawHVLine+0xe4>
	  return;
 8002faa:	e02f      	b.n	800300c <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d824      	bhi.n	8003002 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002fbe:	897b      	ldrh	r3, [r7, #10]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d920      	bls.n	8003006 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002fd0:	1db9      	adds	r1, r7, #6
 8002fd2:	f107 0008 	add.w	r0, r7, #8
 8002fd6:	f7ff ff23 	bl	8002e20 <u8g2_clip_intersection2>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d014      	beq.n	800300a <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	689c      	ldr	r4, [r3, #8]
 8002fe6:	8979      	ldrh	r1, [r7, #10]
 8002fe8:	893a      	ldrh	r2, [r7, #8]
 8002fea:	88f8      	ldrh	r0, [r7, #6]
 8002fec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	47a0      	blx	r4
 8002ff8:	e008      	b.n	800300c <u8g2_DrawHVLine+0x110>
	  return;
 8002ffa:	bf00      	nop
 8002ffc:	e006      	b.n	800300c <u8g2_DrawHVLine+0x110>
	  return;
 8002ffe:	bf00      	nop
 8003000:	e004      	b.n	800300c <u8g2_DrawHVLine+0x110>
	  return;
 8003002:	bf00      	nop
 8003004:	e002      	b.n	800300c <u8g2_DrawHVLine+0x110>
	  return;
 8003006:	bf00      	nop
 8003008:	e000      	b.n	800300c <u8g2_DrawHVLine+0x110>
	  return;
 800300a:	bf00      	nop
    }
}
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	bd90      	pop	{r4, r7, pc}

08003012 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	4608      	mov	r0, r1
 800301c:	4611      	mov	r1, r2
 800301e:	461a      	mov	r2, r3
 8003020:	4603      	mov	r3, r0
 8003022:	817b      	strh	r3, [r7, #10]
 8003024:	460b      	mov	r3, r1
 8003026:	813b      	strh	r3, [r7, #8]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	893a      	ldrh	r2, [r7, #8]
 8003030:	8979      	ldrh	r1, [r7, #10]
 8003032:	2000      	movs	r0, #0
 8003034:	9000      	str	r0, [sp, #0]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f7ff ff60 	bl	8002efc <u8g2_DrawHVLine>
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	4608      	mov	r0, r1
 800304e:	4611      	mov	r1, r2
 8003050:	461a      	mov	r2, r3
 8003052:	4603      	mov	r3, r0
 8003054:	817b      	strh	r3, [r7, #10]
 8003056:	460b      	mov	r3, r1
 8003058:	813b      	strh	r3, [r7, #8]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	893a      	ldrh	r2, [r7, #8]
 8003062:	8979      	ldrh	r1, [r7, #10]
 8003064:	2001      	movs	r0, #1
 8003066:	9000      	str	r0, [sp, #0]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff ff47 	bl	8002efc <u8g2_DrawHVLine>
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af02      	add	r7, sp, #8
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	807b      	strh	r3, [r7, #2]
 8003082:	4613      	mov	r3, r2
 8003084:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800308c:	883a      	ldrh	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d31a      	bcc.n	80030c8 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003098:	883a      	ldrh	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d216      	bcs.n	80030cc <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80030a4:	887a      	ldrh	r2, [r7, #2]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d312      	bcc.n	80030d0 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80030b0:	887a      	ldrh	r2, [r7, #2]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d20e      	bcs.n	80030d4 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80030b6:	883a      	ldrh	r2, [r7, #0]
 80030b8:	8879      	ldrh	r1, [r7, #2]
 80030ba:	2300      	movs	r3, #0
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2301      	movs	r3, #1
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff ff1b 	bl	8002efc <u8g2_DrawHVLine>
 80030c6:	e006      	b.n	80030d6 <u8g2_DrawPixel+0x60>
    return;
 80030c8:	bf00      	nop
 80030ca:	e004      	b.n	80030d6 <u8g2_DrawPixel+0x60>
    return;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <u8g2_DrawPixel+0x60>
    return;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <u8g2_DrawPixel+0x60>
    return;
 80030d4:	bf00      	nop
}
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d903      	bls.n	80030fe <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003108:	b490      	push	{r4, r7}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	4604      	mov	r4, r0
 8003110:	4608      	mov	r0, r1
 8003112:	4611      	mov	r1, r2
 8003114:	461a      	mov	r2, r3
 8003116:	4623      	mov	r3, r4
 8003118:	80fb      	strh	r3, [r7, #6]
 800311a:	4603      	mov	r3, r0
 800311c:	80bb      	strh	r3, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	807b      	strh	r3, [r7, #2]
 8003122:	4613      	mov	r3, r2
 8003124:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	88bb      	ldrh	r3, [r7, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	d20d      	bcs.n	800314a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800312e:	883a      	ldrh	r2, [r7, #0]
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	429a      	cmp	r2, r3
 8003134:	d901      	bls.n	800313a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8003136:	2301      	movs	r3, #1
 8003138:	e014      	b.n	8003164 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	883b      	ldrh	r3, [r7, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d901      	bls.n	8003146 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8003142:	2301      	movs	r3, #1
 8003144:	e00e      	b.n	8003164 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003146:	2300      	movs	r3, #0
 8003148:	e00c      	b.n	8003164 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800314a:	883a      	ldrh	r2, [r7, #0]
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	429a      	cmp	r2, r3
 8003150:	d907      	bls.n	8003162 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	883b      	ldrh	r3, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d901      	bls.n	800315e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800315a:	2301      	movs	r3, #1
 800315c:	e002      	b.n	8003164 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8003162:	2300      	movs	r3, #0
    }
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bc90      	pop	{r4, r7}
 800316c:	4770      	bx	lr

0800316e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	4608      	mov	r0, r1
 8003178:	4611      	mov	r1, r2
 800317a:	461a      	mov	r2, r3
 800317c:	4603      	mov	r3, r0
 800317e:	817b      	strh	r3, [r7, #10]
 8003180:	460b      	mov	r3, r1
 8003182:	813b      	strh	r3, [r7, #8]
 8003184:	4613      	mov	r3, r2
 8003186:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8003194:	8b3b      	ldrh	r3, [r7, #24]
 8003196:	893a      	ldrh	r2, [r7, #8]
 8003198:	f7ff ffb6 	bl	8003108 <u8g2_is_intersection_decision_tree>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <u8g2_IsIntersection+0x38>
    return 0; 
 80031a2:	2300      	movs	r3, #0
 80031a4:	e00a      	b.n	80031bc <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	897a      	ldrh	r2, [r7, #10]
 80031b6:	f7ff ffa7 	bl	8003108 <u8g2_is_intersection_decision_tree>
 80031ba:	4603      	mov	r3, r0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	817b      	strh	r3, [r7, #10]
 80031d6:	460b      	mov	r3, r1
 80031d8:	813b      	strh	r3, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80031de:	893b      	ldrh	r3, [r7, #8]
 80031e0:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80031e2:	7efb      	ldrb	r3, [r7, #27]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80031ea:	2301      	movs	r3, #1
 80031ec:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80031ee:	7e3a      	ldrb	r2, [r7, #24]
 80031f0:	7efb      	ldrb	r3, [r7, #27]
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003206:	2b01      	cmp	r3, #1
 8003208:	d801      	bhi.n	800320e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800320a:	7e3b      	ldrb	r3, [r7, #24]
 800320c:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003214:	2b01      	cmp	r3, #1
 8003216:	d001      	beq.n	800321c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003218:	7e3b      	ldrb	r3, [r7, #24]
 800321a:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800321c:	893b      	ldrh	r3, [r7, #8]
 800321e:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8003220:	8afb      	ldrh	r3, [r7, #22]
 8003222:	f023 0307 	bic.w	r3, r3, #7
 8003226:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	7c1b      	ldrb	r3, [r3, #16]
 800322e:	b29b      	uxth	r3, r3
 8003230:	8afa      	ldrh	r2, [r7, #22]
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800323e:	8afb      	ldrh	r3, [r7, #22]
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8003246:	897b      	ldrh	r3, [r7, #10]
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	4413      	add	r3, r2
 800324c:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800324e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d117      	bne.n	8003286 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	7ebb      	ldrb	r3, [r7, #26]
 800325c:	4313      	orrs	r3, r2
 800325e:	b2da      	uxtb	r2, r3
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	781a      	ldrb	r2, [r3, #0]
 8003268:	7e7b      	ldrb	r3, [r7, #25]
 800326a:	4053      	eors	r3, r2
 800326c:	b2da      	uxtb	r2, r3
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3301      	adds	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
	len--;
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	3b01      	subs	r3, #1
 800327c:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e8      	bne.n	8003256 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003284:	e038      	b.n	80032f8 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	7ebb      	ldrb	r3, [r7, #26]
 800328c:	4313      	orrs	r3, r2
 800328e:	b2da      	uxtb	r2, r3
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	781a      	ldrb	r2, [r3, #0]
 8003298:	7e7b      	ldrb	r3, [r7, #25]
 800329a:	4053      	eors	r3, r2
 800329c:	b2da      	uxtb	r2, r3
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80032a2:	7efb      	ldrb	r3, [r7, #27]
 80032a4:	3301      	adds	r3, #1
 80032a6:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80032a8:	7efb      	ldrb	r3, [r7, #27]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	76fb      	strb	r3, [r7, #27]
      len--;
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80032b6:	7efb      	ldrb	r3, [r7, #27]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d114      	bne.n	80032e6 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80032c0:	461a      	mov	r2, r3
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	4413      	add	r3, r2
 80032c6:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d801      	bhi.n	80032d6 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80032d2:	2301      	movs	r3, #1
 80032d4:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d008      	beq.n	80032f2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80032e0:	2301      	movs	r3, #1
 80032e2:	767b      	strb	r3, [r7, #25]
 80032e4:	e005      	b.n	80032f2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80032e6:	7ebb      	ldrb	r3, [r7, #26]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80032ec:	7e7b      	ldrb	r3, [r7, #25]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1c6      	bne.n	8003286 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80032f8:	bf00      	nop
 80032fa:	3724      	adds	r7, #36	; 0x24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003320:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	79fa      	ldrb	r2, [r7, #7]
 8003366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7ff ffad 	bl	8003302 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f7ff fc65 	bl	8002c78 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033d2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80033d4:	89fb      	ldrh	r3, [r7, #14]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	89fa      	ldrh	r2, [r7, #14]
 80033de:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	7c1b      	ldrb	r3, [r3, #16]
 80033e4:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80033e6:	89fb      	ldrh	r3, [r7, #14]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	89fa      	ldrh	r2, [r7, #14]
 80033f0:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033f8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80033fa:	89fb      	ldrh	r3, [r7, #14]
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	89fa      	ldrh	r2, [r7, #14]
 8003404:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800340c:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800340e:	89fb      	ldrh	r3, [r7, #14]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003416:	4413      	add	r3, r2
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	7c52      	ldrb	r2, [r2, #17]
 800341c:	4293      	cmp	r3, r2
 800341e:	dd08      	ble.n	8003432 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	7c5b      	ldrb	r3, [r3, #17]
 8003424:	b29a      	uxth	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800342c:	b29b      	uxth	r3, r3
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003432:	89fb      	ldrh	r3, [r7, #14]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003454:	89fb      	ldrh	r3, [r7, #14]
 8003456:	4413      	add	r3, r2
 8003458:	b29a      	uxth	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	8a9a      	ldrh	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	8ada      	ldrh	r2, [r3, #22]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af02      	add	r7, sp, #8
 8003484:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	4603      	mov	r3, r0
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff fe63 	bl	800316e <u8g2_IsIntersection>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d104      	bne.n	80034b8 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80034b6:	e03b      	b.n	8003530 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d205      	bcs.n	80034dc <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d905      	bls.n	80034f8 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003504:	429a      	cmp	r2, r3
 8003506:	d205      	bcs.n	8003514 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003520:	429a      	cmp	r2, r3
 8003522:	d905      	bls.n	8003530 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff3c 	bl	80033be <u8g2_update_dimension_common>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ff7b 	bl	800347e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	4608      	mov	r0, r1
 800359a:	4611      	mov	r1, r2
 800359c:	461a      	mov	r2, r3
 800359e:	4603      	mov	r3, r0
 80035a0:	817b      	strh	r3, [r7, #10]
 80035a2:	460b      	mov	r3, r1
 80035a4:	813b      	strh	r3, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80035aa:	88f8      	ldrh	r0, [r7, #6]
 80035ac:	893a      	ldrh	r2, [r7, #8]
 80035ae:	8979      	ldrh	r1, [r7, #10]
 80035b0:	7e3b      	ldrb	r3, [r7, #24]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4603      	mov	r3, r0
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f7ff fc7f 	bl	8002eba <u8g2_draw_hv_line_2dir>
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <u8x8_ascii_next+0x18>
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	2b0a      	cmp	r3, #10
 80035f4:	d102      	bne.n	80035fc <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80035f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035fa:	e001      	b.n	8003600 <u8x8_ascii_next+0x22>
  return b;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	b29b      	uxth	r3, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <u8x8_utf8_next+0x18>
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	2b0a      	cmp	r3, #10
 8003620:	d102      	bne.n	8003628 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8003622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003626:	e06e      	b.n	8003706 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800362e:	2b00      	cmp	r3, #0
 8003630:	d145      	bne.n	80036be <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	2bfb      	cmp	r3, #251	; 0xfb
 8003636:	d908      	bls.n	800364a <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2205      	movs	r2, #5
 800363c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	70fb      	strb	r3, [r7, #3]
 8003648:	e032      	b.n	80036b0 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	2bf7      	cmp	r3, #247	; 0xf7
 800364e:	d908      	bls.n	8003662 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2204      	movs	r2, #4
 8003654:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	70fb      	strb	r3, [r7, #3]
 8003660:	e026      	b.n	80036b0 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	2bef      	cmp	r3, #239	; 0xef
 8003666:	d908      	bls.n	800367a <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2203      	movs	r2, #3
 800366c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	70fb      	strb	r3, [r7, #3]
 8003678:	e01a      	b.n	80036b0 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	2bdf      	cmp	r3, #223	; 0xdf
 800367e:	d908      	bls.n	8003692 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	70fb      	strb	r3, [r7, #3]
 8003690:	e00e      	b.n	80036b0 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	2bbf      	cmp	r3, #191	; 0xbf
 8003696:	d908      	bls.n	80036aa <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	70fb      	strb	r3, [r7, #3]
 80036a8:	e002      	b.n	80036b0 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	e02a      	b.n	8003706 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 80036b0:	78fb      	ldrb	r3, [r7, #3]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 80036b8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80036bc:	e023      	b.n	8003706 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	8c1b      	ldrh	r3, [r3, #32]
 80036d2:	019b      	lsls	r3, r3, #6
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e0:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8c1a      	ldrh	r2, [r3, #32]
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4313      	orrs	r3, r2
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80036fc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003700:	e001      	b.n	8003706 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8c1b      	ldrh	r3, [r3, #32]
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691c      	ldr	r4, [r3, #16]
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	2300      	movs	r3, #0
 8003724:	2120      	movs	r1, #32
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	47a0      	blx	r4
 800372a:	4603      	mov	r3, r0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}

08003734 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	460b      	mov	r3, r1
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691c      	ldr	r4, [r3, #16]
 8003746:	7afa      	ldrb	r2, [r7, #11]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2117      	movs	r1, #23
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	47a0      	blx	r4
 8003750:	4603      	mov	r3, r0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bd90      	pop	{r4, r7, pc}

0800375a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003766:	1cfb      	adds	r3, r7, #3
 8003768:	461a      	mov	r2, r3
 800376a:	2101      	movs	r1, #1
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ffe1 	bl	8003734 <u8x8_byte_SendBytes>
 8003772:	4603      	mov	r3, r0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68dc      	ldr	r4, [r3, #12]
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	2300      	movs	r3, #0
 8003790:	2115      	movs	r1, #21
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	47a0      	blx	r4
 8003796:	4603      	mov	r3, r0
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}

080037a0 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68dc      	ldr	r4, [r3, #12]
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	2300      	movs	r3, #0
 80037b4:	2116      	movs	r1, #22
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	47a0      	blx	r4
 80037ba:	4603      	mov	r3, r0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd90      	pop	{r4, r7, pc}

080037c4 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	460b      	mov	r3, r1
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68dc      	ldr	r4, [r3, #12]
 80037d6:	7afa      	ldrb	r2, [r7, #11]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2117      	movs	r1, #23
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	47a0      	blx	r4
 80037e0:	4603      	mov	r3, r0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd90      	pop	{r4, r7, pc}

080037ea <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80037ea:	b590      	push	{r4, r7, lr}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68dc      	ldr	r4, [r3, #12]
 80037f6:	2300      	movs	r3, #0
 80037f8:	2200      	movs	r2, #0
 80037fa:	2118      	movs	r1, #24
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	47a0      	blx	r4
 8003800:	4603      	mov	r3, r0
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	bd90      	pop	{r4, r7, pc}

0800380a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800380a:	b590      	push	{r4, r7, lr}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68dc      	ldr	r4, [r3, #12]
 8003816:	2300      	movs	r3, #0
 8003818:	2200      	movs	r2, #0
 800381a:	2119      	movs	r1, #25
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	47a0      	blx	r4
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	bd90      	pop	{r4, r7, pc}

0800382a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800382a:	b590      	push	{r4, r7, lr}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	73fb      	strb	r3, [r7, #15]
    data++;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2bfe      	cmp	r3, #254	; 0xfe
 8003844:	d031      	beq.n	80038aa <u8x8_cad_SendSequence+0x80>
 8003846:	2bfe      	cmp	r3, #254	; 0xfe
 8003848:	dc3d      	bgt.n	80038c6 <u8x8_cad_SendSequence+0x9c>
 800384a:	2b19      	cmp	r3, #25
 800384c:	dc3b      	bgt.n	80038c6 <u8x8_cad_SendSequence+0x9c>
 800384e:	2b18      	cmp	r3, #24
 8003850:	da23      	bge.n	800389a <u8x8_cad_SendSequence+0x70>
 8003852:	2b16      	cmp	r3, #22
 8003854:	dc02      	bgt.n	800385c <u8x8_cad_SendSequence+0x32>
 8003856:	2b15      	cmp	r3, #21
 8003858:	da03      	bge.n	8003862 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800385a:	e034      	b.n	80038c6 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800385c:	2b17      	cmp	r3, #23
 800385e:	d00e      	beq.n	800387e <u8x8_cad_SendSequence+0x54>
	return;
 8003860:	e031      	b.n	80038c6 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68dc      	ldr	r4, [r3, #12]
 800386c:	7bba      	ldrb	r2, [r7, #14]
 800386e:	7bf9      	ldrb	r1, [r7, #15]
 8003870:	2300      	movs	r3, #0
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	47a0      	blx	r4
	  data++;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	603b      	str	r3, [r7, #0]
	  break;
 800387c:	e022      	b.n	80038c4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003884:	f107 030e 	add.w	r3, r7, #14
 8003888:	461a      	mov	r2, r3
 800388a:	2101      	movs	r1, #1
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff99 	bl	80037c4 <u8x8_cad_SendData>
	  data++;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	603b      	str	r3, [r7, #0]
	  break;
 8003898:	e014      	b.n	80038c4 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68dc      	ldr	r4, [r3, #12]
 800389e:	7bf9      	ldrb	r1, [r7, #15]
 80038a0:	2300      	movs	r3, #0
 80038a2:	2200      	movs	r2, #0
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	47a0      	blx	r4
	  break;
 80038a8:	e00c      	b.n	80038c4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80038b0:	7bbb      	ldrb	r3, [r7, #14]
 80038b2:	461a      	mov	r2, r3
 80038b4:	2129      	movs	r1, #41	; 0x29
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f9ed 	bl	8003c96 <u8x8_gpio_call>
	  data++;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	3301      	adds	r3, #1
 80038c0:	603b      	str	r3, [r7, #0]
	  break;
 80038c2:	bf00      	nop
    cmd = *data;
 80038c4:	e7b6      	b.n	8003834 <u8x8_cad_SendSequence+0xa>
	return;
 80038c6:	bf00      	nop
    }
  }
}
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd90      	pop	{r4, r7, pc}
	...

080038d0 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	72fb      	strb	r3, [r7, #11]
 80038de:	4613      	mov	r3, r2
 80038e0:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80038e2:	7afb      	ldrb	r3, [r7, #11]
 80038e4:	3b14      	subs	r3, #20
 80038e6:	2b05      	cmp	r3, #5
 80038e8:	d82f      	bhi.n	800394a <u8x8_cad_001+0x7a>
 80038ea:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <u8x8_cad_001+0x20>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	08003939 	.word	0x08003939
 80038f4:	08003909 	.word	0x08003909
 80038f8:	0800391d 	.word	0x0800391d
 80038fc:	08003931 	.word	0x08003931
 8003900:	08003939 	.word	0x08003939
 8003904:	08003939 	.word	0x08003939
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003908:	2100      	movs	r1, #0
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f7ff ff00 	bl	8003710 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003910:	7abb      	ldrb	r3, [r7, #10]
 8003912:	4619      	mov	r1, r3
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f7ff ff20 	bl	800375a <u8x8_byte_SendByte>
      break;
 800391a:	e018      	b.n	800394e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800391c:	2100      	movs	r1, #0
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f7ff fef6 	bl	8003710 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003924:	7abb      	ldrb	r3, [r7, #10]
 8003926:	4619      	mov	r1, r3
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7ff ff16 	bl	800375a <u8x8_byte_SendByte>
      break;
 800392e:	e00e      	b.n	800394e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003930:	2101      	movs	r1, #1
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff feec 	bl	8003710 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691c      	ldr	r4, [r3, #16]
 800393c:	7aba      	ldrb	r2, [r7, #10]
 800393e:	7af9      	ldrb	r1, [r7, #11]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	47a0      	blx	r4
 8003946:	4603      	mov	r3, r0
 8003948:	e002      	b.n	8003950 <u8x8_cad_001+0x80>
    default:
      return 0;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <u8x8_cad_001+0x80>
  }
  return 1;
 800394e:	2301      	movs	r3, #1
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bd90      	pop	{r4, r7, pc}

08003958 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	72fb      	strb	r3, [r7, #11]
 8003966:	4613      	mov	r3, r2
 8003968:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 800396a:	7afb      	ldrb	r3, [r7, #11]
 800396c:	3b0b      	subs	r3, #11
 800396e:	2b04      	cmp	r3, #4
 8003970:	f200 808e 	bhi.w	8003a90 <u8x8_d_uc1604_common+0x138>
 8003974:	a201      	add	r2, pc, #4	; (adr r2, 800397c <u8x8_d_uc1604_common+0x24>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	08003a25 	.word	0x08003a25
 8003980:	08003a91 	.word	0x08003a91
 8003984:	08003a3f 	.word	0x08003a3f
 8003988:	08003a71 	.word	0x08003a71
 800398c:	08003991 	.word	0x08003991
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f7ff ff2a 	bl	80037ea <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	795b      	ldrb	r3, [r3, #5]
 800399a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fee5 	bl	800377c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f043 0310 	orr.w	r3, r3, #16
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	4619      	mov	r1, r3
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fedb 	bl	800377c <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	799b      	ldrb	r3, [r3, #6]
 80039ca:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80039d2:	7dbb      	ldrb	r3, [r7, #22]
 80039d4:	4413      	add	r3, r2
 80039d6:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 80039d8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	b25b      	sxtb	r3, r3
 80039e2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4619      	mov	r1, r3
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f7ff fec5 	bl	800377c <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	791b      	ldrb	r3, [r3, #4]
 80039f6:	757b      	strb	r3, [r7, #21]
      c *= 8;
 80039f8:	7d7b      	ldrb	r3, [r7, #21]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8003a04:	7d7b      	ldrb	r3, [r7, #21]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff feda 	bl	80037c4 <u8x8_cad_SendData>
	arg_int--;
 8003a10:	7abb      	ldrb	r3, [r7, #10]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003a16:	7abb      	ldrb	r3, [r7, #10]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f3      	bne.n	8003a04 <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f7ff fef4 	bl	800380a <u8x8_cad_EndTransfer>
      break;
 8003a22:	e037      	b.n	8003a94 <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003a24:	7abb      	ldrb	r3, [r7, #10]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 8003a2a:	491d      	ldr	r1, [pc, #116]	; (8003aa0 <u8x8_d_uc1604_common+0x148>)
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff fefc 	bl	800382a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 8003a32:	e02f      	b.n	8003a94 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 8003a34:	491b      	ldr	r1, [pc, #108]	; (8003aa4 <u8x8_d_uc1604_common+0x14c>)
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff fef7 	bl	800382a <u8x8_cad_SendSequence>
      break;
 8003a3c:	e02a      	b.n	8003a94 <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003a3e:	7abb      	ldrb	r3, [r7, #10]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 8003a44:	4918      	ldr	r1, [pc, #96]	; (8003aa8 <u8x8_d_uc1604_common+0x150>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7ff feef 	bl	800382a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	7c9a      	ldrb	r2, [r3, #18]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8003a58:	e01c      	b.n	8003a94 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 8003a5a:	4914      	ldr	r1, [pc, #80]	; (8003aac <u8x8_d_uc1604_common+0x154>)
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff fee4 	bl	800382a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	7cda      	ldrb	r2, [r3, #19]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003a6e:	e011      	b.n	8003a94 <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff feba 	bl	80037ea <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003a76:	2181      	movs	r1, #129	; 0x81
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f7ff fe7f 	bl	800377c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 8003a7e:	7abb      	ldrb	r3, [r7, #10]
 8003a80:	4619      	mov	r1, r3
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f7ff fe8c 	bl	80037a0 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f7ff febe 	bl	800380a <u8x8_cad_EndTransfer>
      break;
 8003a8e:	e001      	b.n	8003a94 <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 8003a94:	2301      	movs	r3, #1
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	0800e1d4 	.word	0x0800e1d4
 8003aa4:	0800e1e4 	.word	0x0800e1e4
 8003aa8:	0800e1ec 	.word	0x0800e1ec
 8003aac:	0800e1f4 	.word	0x0800e1f4

08003ab0 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	72fb      	strb	r3, [r7, #11]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003ac2:	7aba      	ldrb	r2, [r7, #10]
 8003ac4:	7af9      	ldrb	r1, [r7, #11]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7ff ff45 	bl	8003958 <u8x8_d_uc1604_common>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d114      	bne.n	8003afe <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003ad4:	7afb      	ldrb	r3, [r7, #11]
 8003ad6:	2b09      	cmp	r3, #9
 8003ad8:	d002      	beq.n	8003ae0 <u8x8_d_uc1604_jlx19264+0x30>
 8003ada:	2b0a      	cmp	r3, #10
 8003adc:	d005      	beq.n	8003aea <u8x8_d_uc1604_jlx19264+0x3a>
 8003ade:	e00c      	b.n	8003afa <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8003ae0:	490a      	ldr	r1, [pc, #40]	; (8003b0c <u8x8_d_uc1604_jlx19264+0x5c>)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f816 	bl	8003b14 <u8x8_d_helper_display_setup_memory>
	break;
 8003ae8:	e00a      	b.n	8003b00 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f825 	bl	8003b3a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8003af0:	4907      	ldr	r1, [pc, #28]	; (8003b10 <u8x8_d_uc1604_jlx19264+0x60>)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff fe99 	bl	800382a <u8x8_cad_SendSequence>
	break;
 8003af8:	e002      	b.n	8003b00 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 8003afa:	2300      	movs	r3, #0
 8003afc:	e001      	b.n	8003b02 <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 8003afe:	bf00      	nop
  return 1;
 8003b00:	2301      	movs	r3, #1
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	0800e1fc 	.word	0x0800e1fc
 8003b10:	0800e214 	.word	0x0800e214

08003b14 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	7c9a      	ldrb	r2, [r3, #18]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr

08003b3a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003b3a:	b590      	push	{r4, r7, lr}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695c      	ldr	r4, [r3, #20]
 8003b46:	2300      	movs	r3, #0
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2128      	movs	r1, #40	; 0x28
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68dc      	ldr	r4, [r3, #12]
 8003b54:	2300      	movs	r3, #0
 8003b56:	2200      	movs	r2, #0
 8003b58:	2114      	movs	r1, #20
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003b5e:	2201      	movs	r2, #1
 8003b60:	214b      	movs	r1, #75	; 0x4b
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f897 	bl	8003c96 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	791b      	ldrb	r3, [r3, #4]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2129      	movs	r1, #41	; 0x29
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f88f 	bl	8003c96 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	214b      	movs	r1, #75	; 0x4b
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f88a 	bl	8003c96 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	791b      	ldrb	r3, [r3, #4]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2129      	movs	r1, #41	; 0x29
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f882 	bl	8003c96 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003b92:	2201      	movs	r2, #1
 8003b94:	214b      	movs	r1, #75	; 0x4b
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f87d 	bl	8003c96 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	795b      	ldrb	r3, [r3, #5]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2129      	movs	r1, #41	; 0x29
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f875 	bl	8003c96 <u8x8_gpio_call>
}    
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd90      	pop	{r4, r7, pc}

08003bb4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	70fb      	strb	r3, [r7, #3]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	70bb      	strb	r3, [r7, #2]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003bd2:	78bb      	ldrb	r3, [r7, #2]
 8003bd4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003bd6:	787b      	ldrb	r3, [r7, #1]
 8003bd8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689c      	ldr	r4, [r3, #8]
 8003be2:	f107 0308 	add.w	r3, r7, #8
 8003be6:	2201      	movs	r2, #1
 8003be8:	210f      	movs	r1, #15
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	47a0      	blx	r4
 8003bee:	4603      	mov	r3, r0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd90      	pop	{r4, r7, pc}

08003bf8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689c      	ldr	r4, [r3, #8]
 8003c04:	2300      	movs	r3, #0
 8003c06:	2200      	movs	r2, #0
 8003c08:	2109      	movs	r1, #9
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	47a0      	blx	r4
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd90      	pop	{r4, r7, pc}

08003c16 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003c16:	b590      	push	{r4, r7, lr}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689c      	ldr	r4, [r3, #8]
 8003c22:	2300      	movs	r3, #0
 8003c24:	2200      	movs	r2, #0
 8003c26:	210a      	movs	r1, #10
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	47a0      	blx	r4
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd90      	pop	{r4, r7, pc}

08003c34 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689c      	ldr	r4, [r3, #8]
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	2300      	movs	r3, #0
 8003c48:	210b      	movs	r1, #11
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	47a0      	blx	r4
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}

08003c56 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8003c56:	b590      	push	{r4, r7, lr}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689c      	ldr	r4, [r3, #8]
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	210e      	movs	r1, #14
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	47a0      	blx	r4
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd90      	pop	{r4, r7, pc}

08003c78 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689c      	ldr	r4, [r3, #8]
 8003c84:	2300      	movs	r3, #0
 8003c86:	2200      	movs	r2, #0
 8003c88:	2110      	movs	r1, #16
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	47a0      	blx	r4
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd90      	pop	{r4, r7, pc}

08003c96 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003c96:	b590      	push	{r4, r7, lr}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	70fb      	strb	r3, [r7, #3]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695c      	ldr	r4, [r3, #20]
 8003caa:	78ba      	ldrb	r2, [r7, #2]
 8003cac:	78f9      	ldrb	r1, [r7, #3]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	47a0      	blx	r4
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd90      	pop	{r4, r7, pc}

08003cbc <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	72fb      	strb	r3, [r7, #11]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
	...

08003cdc <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <u8x8_SetupDefaults+0x58>)
 8003cee:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a10      	ldr	r2, [pc, #64]	; (8003d34 <u8x8_SetupDefaults+0x58>)
 8003cf4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <u8x8_SetupDefaults+0x58>)
 8003cfa:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <u8x8_SetupDefaults+0x58>)
 8003d00:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	22ff      	movs	r2, #255	; 0xff
 8003d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	22ff      	movs	r2, #255	; 0xff
 8003d24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	08003cbd 	.word	0x08003cbd

08003d38 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7ff ffc8 	bl	8003cdc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff ff47 	bl	8003bf8 <u8x8_SetupMemory>
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d74:	480c      	ldr	r0, [pc, #48]	; (8003da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d76:	490d      	ldr	r1, [pc, #52]	; (8003dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d78:	4a0d      	ldr	r2, [pc, #52]	; (8003db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d7c:	e002      	b.n	8003d84 <LoopCopyDataInit>

08003d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d82:	3304      	adds	r3, #4

08003d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d88:	d3f9      	bcc.n	8003d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d8c:	4c0a      	ldr	r4, [pc, #40]	; (8003db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d90:	e001      	b.n	8003d96 <LoopFillZerobss>

08003d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d94:	3204      	adds	r2, #4

08003d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d98:	d3fb      	bcc.n	8003d92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d9a:	f7fd fde5 	bl	8001968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d9e:	f008 fdcb 	bl	800c938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003da2:	f7fd fa0b 	bl	80011bc <main>
  bx lr
 8003da6:	4770      	bx	lr
  ldr r0, =_sdata
 8003da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dac:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8003db0:	0800e274 	.word	0x0800e274
  ldr r2, =_sbss
 8003db4:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 8003db8:	20001ee0 	.word	0x20001ee0

08003dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003dbc:	e7fe      	b.n	8003dbc <ADC1_2_IRQHandler>
	...

08003dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_Init+0x28>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a07      	ldr	r2, [pc, #28]	; (8003de8 <HAL_Init+0x28>)
 8003dca:	f043 0310 	orr.w	r3, r3, #16
 8003dce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	f000 f981 	bl	80040d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dd6:	200f      	movs	r0, #15
 8003dd8:	f000 f808 	bl	8003dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ddc:	f7fd fc38 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40022000 	.word	0x40022000

08003dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <HAL_InitTick+0x54>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <HAL_InitTick+0x58>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f9ab 	bl	8004166 <HAL_SYSTICK_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00e      	b.n	8003e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b0f      	cmp	r3, #15
 8003e1e:	d80a      	bhi.n	8003e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e20:	2200      	movs	r2, #0
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e28:	f000 f961 	bl	80040ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e2c:	4a06      	ldr	r2, [pc, #24]	; (8003e48 <HAL_InitTick+0x5c>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20000230 	.word	0x20000230
 8003e44:	20000238 	.word	0x20000238
 8003e48:	20000234 	.word	0x20000234

08003e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_IncTick+0x1c>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_IncTick+0x20>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	4a03      	ldr	r2, [pc, #12]	; (8003e6c <HAL_IncTick+0x20>)
 8003e5e:	6013      	str	r3, [r2, #0]
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	20000238 	.word	0x20000238
 8003e6c:	20000d28 	.word	0x20000d28

08003e70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return uwTick;
 8003e74:	4b02      	ldr	r3, [pc, #8]	; (8003e80 <HAL_GetTick+0x10>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	20000d28 	.word	0x20000d28

08003e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e8c:	f7ff fff0 	bl	8003e70 <HAL_GetTick>
 8003e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e9c:	d005      	beq.n	8003eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <HAL_Delay+0x44>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003eaa:	bf00      	nop
 8003eac:	f7ff ffe0 	bl	8003e70 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d8f7      	bhi.n	8003eac <HAL_Delay+0x28>
  {
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000238 	.word	0x20000238

08003ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <__NVIC_SetPriorityGrouping+0x44>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ee8:	4013      	ands	r3, r2
 8003eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003efe:	4a04      	ldr	r2, [pc, #16]	; (8003f10 <__NVIC_SetPriorityGrouping+0x44>)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	60d3      	str	r3, [r2, #12]
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000ed00 	.word	0xe000ed00

08003f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f18:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <__NVIC_GetPriorityGrouping+0x18>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	f003 0307 	and.w	r3, r3, #7
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000ed00 	.word	0xe000ed00

08003f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	db0b      	blt.n	8003f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	f003 021f 	and.w	r2, r3, #31
 8003f48:	4906      	ldr	r1, [pc, #24]	; (8003f64 <__NVIC_EnableIRQ+0x34>)
 8003f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2001      	movs	r0, #1
 8003f52:	fa00 f202 	lsl.w	r2, r0, r2
 8003f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	e000e100 	.word	0xe000e100

08003f68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	db12      	blt.n	8003fa0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	f003 021f 	and.w	r2, r3, #31
 8003f80:	490a      	ldr	r1, [pc, #40]	; (8003fac <__NVIC_DisableIRQ+0x44>)
 8003f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2001      	movs	r0, #1
 8003f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f8e:	3320      	adds	r3, #32
 8003f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f94:	f3bf 8f4f 	dsb	sy
}
 8003f98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f9a:	f3bf 8f6f 	isb	sy
}
 8003f9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	e000e100 	.word	0xe000e100

08003fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	6039      	str	r1, [r7, #0]
 8003fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	db0a      	blt.n	8003fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	490c      	ldr	r1, [pc, #48]	; (8003ffc <__NVIC_SetPriority+0x4c>)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	0112      	lsls	r2, r2, #4
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fd8:	e00a      	b.n	8003ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4908      	ldr	r1, [pc, #32]	; (8004000 <__NVIC_SetPriority+0x50>)
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	0112      	lsls	r2, r2, #4
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	440b      	add	r3, r1
 8003fee:	761a      	strb	r2, [r3, #24]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	e000e100 	.word	0xe000e100
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f1c3 0307 	rsb	r3, r3, #7
 800401e:	2b04      	cmp	r3, #4
 8004020:	bf28      	it	cs
 8004022:	2304      	movcs	r3, #4
 8004024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3304      	adds	r3, #4
 800402a:	2b06      	cmp	r3, #6
 800402c:	d902      	bls.n	8004034 <NVIC_EncodePriority+0x30>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3b03      	subs	r3, #3
 8004032:	e000      	b.n	8004036 <NVIC_EncodePriority+0x32>
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	401a      	ands	r2, r3
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800404c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	43d9      	mvns	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	4313      	orrs	r3, r2
         );
}
 800405e:	4618      	mov	r0, r3
 8004060:	3724      	adds	r7, #36	; 0x24
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800406c:	f3bf 8f4f 	dsb	sy
}
 8004070:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <__NVIC_SystemReset+0x24>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800407a:	4904      	ldr	r1, [pc, #16]	; (800408c <__NVIC_SystemReset+0x24>)
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <__NVIC_SystemReset+0x28>)
 800407e:	4313      	orrs	r3, r2
 8004080:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004082:	f3bf 8f4f 	dsb	sy
}
 8004086:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004088:	bf00      	nop
 800408a:	e7fd      	b.n	8004088 <__NVIC_SystemReset+0x20>
 800408c:	e000ed00 	.word	0xe000ed00
 8004090:	05fa0004 	.word	0x05fa0004

08004094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3b01      	subs	r3, #1
 80040a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040a4:	d301      	bcc.n	80040aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040a6:	2301      	movs	r3, #1
 80040a8:	e00f      	b.n	80040ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040aa:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <SysTick_Config+0x40>)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040b2:	210f      	movs	r1, #15
 80040b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b8:	f7ff ff7a 	bl	8003fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <SysTick_Config+0x40>)
 80040be:	2200      	movs	r2, #0
 80040c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040c2:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <SysTick_Config+0x40>)
 80040c4:	2207      	movs	r2, #7
 80040c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	e000e010 	.word	0xe000e010

080040d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fef3 	bl	8003ecc <__NVIC_SetPriorityGrouping>
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	4603      	mov	r3, r0
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004100:	f7ff ff08 	bl	8003f14 <__NVIC_GetPriorityGrouping>
 8004104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	6978      	ldr	r0, [r7, #20]
 800410c:	f7ff ff7a 	bl	8004004 <NVIC_EncodePriority>
 8004110:	4602      	mov	r2, r0
 8004112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004116:	4611      	mov	r1, r2
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff ff49 	bl	8003fb0 <__NVIC_SetPriority>
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b082      	sub	sp, #8
 800412a:	af00      	add	r7, sp, #0
 800412c:	4603      	mov	r3, r0
 800412e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fefb 	bl	8003f30 <__NVIC_EnableIRQ>
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b082      	sub	sp, #8
 8004146:	af00      	add	r7, sp, #0
 8004148:	4603      	mov	r3, r0
 800414a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800414c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004150:	4618      	mov	r0, r3
 8004152:	f7ff ff09 	bl	8003f68 <__NVIC_DisableIRQ>
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004162:	f7ff ff81 	bl	8004068 <__NVIC_SystemReset>

08004166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ff90 	bl	8004094 <SysTick_Config>
 8004174:	4603      	mov	r3, r0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004180:	b480      	push	{r7}
 8004182:	b08b      	sub	sp, #44	; 0x2c
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800418a:	2300      	movs	r3, #0
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800418e:	2300      	movs	r3, #0
 8004190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004192:	e169      	b.n	8004468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004194:	2201      	movs	r2, #1
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	fa02 f303 	lsl.w	r3, r2, r3
 800419c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	f040 8158 	bne.w	8004462 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4a9a      	ldr	r2, [pc, #616]	; (8004420 <HAL_GPIO_Init+0x2a0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d05e      	beq.n	800427a <HAL_GPIO_Init+0xfa>
 80041bc:	4a98      	ldr	r2, [pc, #608]	; (8004420 <HAL_GPIO_Init+0x2a0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d875      	bhi.n	80042ae <HAL_GPIO_Init+0x12e>
 80041c2:	4a98      	ldr	r2, [pc, #608]	; (8004424 <HAL_GPIO_Init+0x2a4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d058      	beq.n	800427a <HAL_GPIO_Init+0xfa>
 80041c8:	4a96      	ldr	r2, [pc, #600]	; (8004424 <HAL_GPIO_Init+0x2a4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d86f      	bhi.n	80042ae <HAL_GPIO_Init+0x12e>
 80041ce:	4a96      	ldr	r2, [pc, #600]	; (8004428 <HAL_GPIO_Init+0x2a8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d052      	beq.n	800427a <HAL_GPIO_Init+0xfa>
 80041d4:	4a94      	ldr	r2, [pc, #592]	; (8004428 <HAL_GPIO_Init+0x2a8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d869      	bhi.n	80042ae <HAL_GPIO_Init+0x12e>
 80041da:	4a94      	ldr	r2, [pc, #592]	; (800442c <HAL_GPIO_Init+0x2ac>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d04c      	beq.n	800427a <HAL_GPIO_Init+0xfa>
 80041e0:	4a92      	ldr	r2, [pc, #584]	; (800442c <HAL_GPIO_Init+0x2ac>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d863      	bhi.n	80042ae <HAL_GPIO_Init+0x12e>
 80041e6:	4a92      	ldr	r2, [pc, #584]	; (8004430 <HAL_GPIO_Init+0x2b0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d046      	beq.n	800427a <HAL_GPIO_Init+0xfa>
 80041ec:	4a90      	ldr	r2, [pc, #576]	; (8004430 <HAL_GPIO_Init+0x2b0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d85d      	bhi.n	80042ae <HAL_GPIO_Init+0x12e>
 80041f2:	2b12      	cmp	r3, #18
 80041f4:	d82a      	bhi.n	800424c <HAL_GPIO_Init+0xcc>
 80041f6:	2b12      	cmp	r3, #18
 80041f8:	d859      	bhi.n	80042ae <HAL_GPIO_Init+0x12e>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <HAL_GPIO_Init+0x80>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	0800427b 	.word	0x0800427b
 8004204:	08004255 	.word	0x08004255
 8004208:	08004267 	.word	0x08004267
 800420c:	080042a9 	.word	0x080042a9
 8004210:	080042af 	.word	0x080042af
 8004214:	080042af 	.word	0x080042af
 8004218:	080042af 	.word	0x080042af
 800421c:	080042af 	.word	0x080042af
 8004220:	080042af 	.word	0x080042af
 8004224:	080042af 	.word	0x080042af
 8004228:	080042af 	.word	0x080042af
 800422c:	080042af 	.word	0x080042af
 8004230:	080042af 	.word	0x080042af
 8004234:	080042af 	.word	0x080042af
 8004238:	080042af 	.word	0x080042af
 800423c:	080042af 	.word	0x080042af
 8004240:	080042af 	.word	0x080042af
 8004244:	0800425d 	.word	0x0800425d
 8004248:	08004271 	.word	0x08004271
 800424c:	4a79      	ldr	r2, [pc, #484]	; (8004434 <HAL_GPIO_Init+0x2b4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d013      	beq.n	800427a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004252:	e02c      	b.n	80042ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	623b      	str	r3, [r7, #32]
          break;
 800425a:	e029      	b.n	80042b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	3304      	adds	r3, #4
 8004262:	623b      	str	r3, [r7, #32]
          break;
 8004264:	e024      	b.n	80042b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	3308      	adds	r3, #8
 800426c:	623b      	str	r3, [r7, #32]
          break;
 800426e:	e01f      	b.n	80042b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	330c      	adds	r3, #12
 8004276:	623b      	str	r3, [r7, #32]
          break;
 8004278:	e01a      	b.n	80042b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004282:	2304      	movs	r3, #4
 8004284:	623b      	str	r3, [r7, #32]
          break;
 8004286:	e013      	b.n	80042b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004290:	2308      	movs	r3, #8
 8004292:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	611a      	str	r2, [r3, #16]
          break;
 800429a:	e009      	b.n	80042b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800429c:	2308      	movs	r3, #8
 800429e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69fa      	ldr	r2, [r7, #28]
 80042a4:	615a      	str	r2, [r3, #20]
          break;
 80042a6:	e003      	b.n	80042b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042a8:	2300      	movs	r3, #0
 80042aa:	623b      	str	r3, [r7, #32]
          break;
 80042ac:	e000      	b.n	80042b0 <HAL_GPIO_Init+0x130>
          break;
 80042ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2bff      	cmp	r3, #255	; 0xff
 80042b4:	d801      	bhi.n	80042ba <HAL_GPIO_Init+0x13a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	e001      	b.n	80042be <HAL_GPIO_Init+0x13e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3304      	adds	r3, #4
 80042be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2bff      	cmp	r3, #255	; 0xff
 80042c4:	d802      	bhi.n	80042cc <HAL_GPIO_Init+0x14c>
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	e002      	b.n	80042d2 <HAL_GPIO_Init+0x152>
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	3b08      	subs	r3, #8
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	210f      	movs	r1, #15
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	6a39      	ldr	r1, [r7, #32]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	431a      	orrs	r2, r3
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80b1 	beq.w	8004462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004300:	4b4d      	ldr	r3, [pc, #308]	; (8004438 <HAL_GPIO_Init+0x2b8>)
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	4a4c      	ldr	r2, [pc, #304]	; (8004438 <HAL_GPIO_Init+0x2b8>)
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	6193      	str	r3, [r2, #24]
 800430c:	4b4a      	ldr	r3, [pc, #296]	; (8004438 <HAL_GPIO_Init+0x2b8>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004318:	4a48      	ldr	r2, [pc, #288]	; (800443c <HAL_GPIO_Init+0x2bc>)
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	089b      	lsrs	r3, r3, #2
 800431e:	3302      	adds	r3, #2
 8004320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004324:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	220f      	movs	r2, #15
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4013      	ands	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a40      	ldr	r2, [pc, #256]	; (8004440 <HAL_GPIO_Init+0x2c0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <HAL_GPIO_Init+0x1ec>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a3f      	ldr	r2, [pc, #252]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00d      	beq.n	8004368 <HAL_GPIO_Init+0x1e8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a3e      	ldr	r2, [pc, #248]	; (8004448 <HAL_GPIO_Init+0x2c8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d007      	beq.n	8004364 <HAL_GPIO_Init+0x1e4>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a3d      	ldr	r2, [pc, #244]	; (800444c <HAL_GPIO_Init+0x2cc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d101      	bne.n	8004360 <HAL_GPIO_Init+0x1e0>
 800435c:	2303      	movs	r3, #3
 800435e:	e006      	b.n	800436e <HAL_GPIO_Init+0x1ee>
 8004360:	2304      	movs	r3, #4
 8004362:	e004      	b.n	800436e <HAL_GPIO_Init+0x1ee>
 8004364:	2302      	movs	r3, #2
 8004366:	e002      	b.n	800436e <HAL_GPIO_Init+0x1ee>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_GPIO_Init+0x1ee>
 800436c:	2300      	movs	r3, #0
 800436e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004370:	f002 0203 	and.w	r2, r2, #3
 8004374:	0092      	lsls	r2, r2, #2
 8004376:	4093      	lsls	r3, r2
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800437e:	492f      	ldr	r1, [pc, #188]	; (800443c <HAL_GPIO_Init+0x2bc>)
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	089b      	lsrs	r3, r3, #2
 8004384:	3302      	adds	r3, #2
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d006      	beq.n	80043a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004398:	4b2d      	ldr	r3, [pc, #180]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	492c      	ldr	r1, [pc, #176]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]
 80043a4:	e006      	b.n	80043b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043a6:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	43db      	mvns	r3, r3
 80043ae:	4928      	ldr	r1, [pc, #160]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d006      	beq.n	80043ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043c0:	4b23      	ldr	r3, [pc, #140]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	4922      	ldr	r1, [pc, #136]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
 80043cc:	e006      	b.n	80043dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	491e      	ldr	r1, [pc, #120]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 80043d8:	4013      	ands	r3, r2
 80043da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d006      	beq.n	80043f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	4918      	ldr	r1, [pc, #96]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	608b      	str	r3, [r1, #8]
 80043f4:	e006      	b.n	8004404 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043f6:	4b16      	ldr	r3, [pc, #88]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	4914      	ldr	r1, [pc, #80]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 8004400:	4013      	ands	r3, r2
 8004402:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d021      	beq.n	8004454 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	490e      	ldr	r1, [pc, #56]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	4313      	orrs	r3, r2
 800441a:	60cb      	str	r3, [r1, #12]
 800441c:	e021      	b.n	8004462 <HAL_GPIO_Init+0x2e2>
 800441e:	bf00      	nop
 8004420:	10320000 	.word	0x10320000
 8004424:	10310000 	.word	0x10310000
 8004428:	10220000 	.word	0x10220000
 800442c:	10210000 	.word	0x10210000
 8004430:	10120000 	.word	0x10120000
 8004434:	10110000 	.word	0x10110000
 8004438:	40021000 	.word	0x40021000
 800443c:	40010000 	.word	0x40010000
 8004440:	40010800 	.word	0x40010800
 8004444:	40010c00 	.word	0x40010c00
 8004448:	40011000 	.word	0x40011000
 800444c:	40011400 	.word	0x40011400
 8004450:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_GPIO_Init+0x304>)
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	43db      	mvns	r3, r3
 800445c:	4909      	ldr	r1, [pc, #36]	; (8004484 <HAL_GPIO_Init+0x304>)
 800445e:	4013      	ands	r3, r2
 8004460:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	3301      	adds	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	fa22 f303 	lsr.w	r3, r2, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	f47f ae8e 	bne.w	8004194 <HAL_GPIO_Init+0x14>
  }
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	372c      	adds	r7, #44	; 0x2c
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	40010400 	.word	0x40010400

08004488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
 8004494:	4613      	mov	r3, r2
 8004496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004498:	787b      	ldrb	r3, [r7, #1]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449e:	887a      	ldrh	r2, [r7, #2]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044a4:	e003      	b.n	80044ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	041a      	lsls	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	611a      	str	r2, [r3, #16]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044ca:	887a      	ldrh	r2, [r7, #2]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4013      	ands	r3, r2
 80044d0:	041a      	lsls	r2, r3, #16
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	43d9      	mvns	r1, r3
 80044d6:	887b      	ldrh	r3, [r7, #2]
 80044d8:	400b      	ands	r3, r1
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	611a      	str	r2, [r3, #16]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d006      	beq.n	8004510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004502:	4a05      	ldr	r2, [pc, #20]	; (8004518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc fe38 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40010400 	.word	0x40010400

0800451c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800451c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451e:	b08b      	sub	sp, #44	; 0x2c
 8004520:	af06      	add	r7, sp, #24
 8004522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e0fd      	b.n	800472a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f007 ff40 	bl	800c3c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2203      	movs	r2, #3
 800454c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f003 fc10 	bl	8007d7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	687e      	ldr	r6, [r7, #4]
 8004562:	466d      	mov	r5, sp
 8004564:	f106 0410 	add.w	r4, r6, #16
 8004568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800456a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	1d33      	adds	r3, r6, #4
 8004572:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004574:	6838      	ldr	r0, [r7, #0]
 8004576:	f003 fbda 	bl	8007d2e <USB_CoreInit>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0ce      	b.n	800472a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f003 fc0b 	bl	8007dae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004598:	2300      	movs	r3, #0
 800459a:	73fb      	strb	r3, [r7, #15]
 800459c:	e04c      	b.n	8004638 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	440b      	add	r3, r1
 80045ae:	3301      	adds	r3, #1
 80045b0:	2201      	movs	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	440b      	add	r3, r1
 80045c4:	7bfa      	ldrb	r2, [r7, #15]
 80045c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045c8:	7bfa      	ldrb	r2, [r7, #15]
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	b298      	uxth	r0, r3
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	440b      	add	r3, r1
 80045da:	3336      	adds	r3, #54	; 0x36
 80045dc:	4602      	mov	r2, r0
 80045de:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	440b      	add	r3, r1
 80045f0:	3303      	adds	r3, #3
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	440b      	add	r3, r1
 8004604:	3338      	adds	r3, #56	; 0x38
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800460a:	7bfa      	ldrb	r2, [r7, #15]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	440b      	add	r3, r1
 8004618:	333c      	adds	r3, #60	; 0x3c
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800461e:	7bfa      	ldrb	r2, [r7, #15]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	440b      	add	r3, r1
 800462c:	3340      	adds	r3, #64	; 0x40
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	3301      	adds	r3, #1
 8004636:	73fb      	strb	r3, [r7, #15]
 8004638:	7bfa      	ldrb	r2, [r7, #15]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	429a      	cmp	r2, r3
 8004640:	d3ad      	bcc.n	800459e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	e044      	b.n	80046d2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	440b      	add	r3, r1
 8004656:	f203 1369 	addw	r3, r3, #361	; 0x169
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800465e:	7bfa      	ldrb	r2, [r7, #15]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	440b      	add	r3, r1
 800466c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	440b      	add	r3, r1
 8004682:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800468a:	7bfa      	ldrb	r2, [r7, #15]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	440b      	add	r3, r1
 8004698:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046a0:	7bfa      	ldrb	r2, [r7, #15]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	440b      	add	r3, r1
 80046ae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046b6:	7bfa      	ldrb	r2, [r7, #15]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	440b      	add	r3, r1
 80046c4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	3301      	adds	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d3b5      	bcc.n	8004648 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	687e      	ldr	r6, [r7, #4]
 80046e4:	466d      	mov	r5, sp
 80046e6:	f106 0410 	add.w	r4, r6, #16
 80046ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	1d33      	adds	r3, r6, #4
 80046f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046f6:	6838      	ldr	r0, [r7, #0]
 80046f8:	f003 fb65 	bl	8007dc6 <USB_DevInit>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e00d      	b.n	800472a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f006 f818 	bl	800a758 <USB_DevDisconnect>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004732 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_PCD_Start+0x16>
 8004744:	2302      	movs	r3, #2
 8004746:	e016      	b.n	8004776 <HAL_PCD_Start+0x44>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f003 fafa 	bl	8007d4e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800475a:	2101      	movs	r1, #1
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f008 f8ae 	bl	800c8be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f005 ffec 	bl	800a744 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b088      	sub	sp, #32
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f005 ffee 	bl	800a76c <USB_ReadInterrupts>
 8004790:	4603      	mov	r3, r0
 8004792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479a:	d102      	bne.n	80047a2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fb5f 	bl	8004e60 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f005 ffe0 	bl	800a76c <USB_ReadInterrupts>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b6:	d112      	bne.n	80047de <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ca:	b292      	uxth	r2, r2
 80047cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f007 fe7c 	bl	800c4ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80047d6:	2100      	movs	r1, #0
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f923 	bl	8004a24 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f005 ffc2 	bl	800a76c <USB_ReadInterrupts>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047f2:	d10b      	bne.n	800480c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004806:	b292      	uxth	r2, r2
 8004808:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f005 ffab 	bl	800a76c <USB_ReadInterrupts>
 8004816:	4603      	mov	r3, r0
 8004818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800481c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004820:	d10b      	bne.n	800483a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004834:	b292      	uxth	r2, r2
 8004836:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f005 ff94 	bl	800a76c <USB_ReadInterrupts>
 8004844:	4603      	mov	r3, r0
 8004846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800484a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800484e:	d126      	bne.n	800489e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004858:	b29a      	uxth	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0204 	bic.w	r2, r2, #4
 8004862:	b292      	uxth	r2, r2
 8004864:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0208 	bic.w	r2, r2, #8
 800487a:	b292      	uxth	r2, r2
 800487c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f007 fe5d 	bl	800c540 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004898:	b292      	uxth	r2, r2
 800489a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f005 ff62 	bl	800a76c <USB_ReadInterrupts>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b2:	f040 8082 	bne.w	80049ba <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80048b6:	2300      	movs	r3, #0
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	e010      	b.n	80048de <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	7ffb      	ldrb	r3, [r7, #31]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	441a      	add	r2, r3
 80048c8:	7ffb      	ldrb	r3, [r7, #31]
 80048ca:	8812      	ldrh	r2, [r2, #0]
 80048cc:	b292      	uxth	r2, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	3320      	adds	r3, #32
 80048d2:	443b      	add	r3, r7
 80048d4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80048d8:	7ffb      	ldrb	r3, [r7, #31]
 80048da:	3301      	adds	r3, #1
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	7ffb      	ldrb	r3, [r7, #31]
 80048e0:	2b07      	cmp	r3, #7
 80048e2:	d9eb      	bls.n	80048bc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	b292      	uxth	r2, r2
 80048f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004904:	b29a      	uxth	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	b292      	uxth	r2, r2
 8004910:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004914:	bf00      	nop
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800491e:	b29b      	uxth	r3, r3
 8004920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f6      	beq.n	8004916 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493a:	b292      	uxth	r2, r2
 800493c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004940:	2300      	movs	r3, #0
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e00f      	b.n	8004966 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004946:	7ffb      	ldrb	r3, [r7, #31]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	4611      	mov	r1, r2
 800494e:	7ffa      	ldrb	r2, [r7, #31]
 8004950:	0092      	lsls	r2, r2, #2
 8004952:	440a      	add	r2, r1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	3320      	adds	r3, #32
 8004958:	443b      	add	r3, r7
 800495a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800495e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004960:	7ffb      	ldrb	r3, [r7, #31]
 8004962:	3301      	adds	r3, #1
 8004964:	77fb      	strb	r3, [r7, #31]
 8004966:	7ffb      	ldrb	r3, [r7, #31]
 8004968:	2b07      	cmp	r3, #7
 800496a:	d9ec      	bls.n	8004946 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004974:	b29a      	uxth	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0208 	orr.w	r2, r2, #8
 800497e:	b292      	uxth	r2, r2
 8004980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800498c:	b29a      	uxth	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004996:	b292      	uxth	r2, r2
 8004998:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0204 	orr.w	r2, r2, #4
 80049ae:	b292      	uxth	r2, r2
 80049b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f007 fda9 	bl	800c50c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f005 fed4 	bl	800a76c <USB_ReadInterrupts>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ce:	d10e      	bne.n	80049ee <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049e2:	b292      	uxth	r2, r2
 80049e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f007 fd62 	bl	800c4b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f005 feba 	bl	800a76c <USB_ReadInterrupts>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a02:	d10b      	bne.n	8004a1c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a16:	b292      	uxth	r2, r2
 8004a18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	3720      	adds	r7, #32
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_PCD_SetAddress+0x1a>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e013      	b.n	8004a66 <HAL_PCD_SetAddress+0x42>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	78fa      	ldrb	r2, [r7, #3]
 8004a4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f005 fe61 	bl	800a71e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	4608      	mov	r0, r1
 8004a78:	4611      	mov	r1, r2
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	70fb      	strb	r3, [r7, #3]
 8004a80:	460b      	mov	r3, r1
 8004a82:	803b      	strh	r3, [r7, #0]
 8004a84:	4613      	mov	r3, r2
 8004a86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	da0e      	bge.n	8004ab2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	705a      	strb	r2, [r3, #1]
 8004ab0:	e00e      	b.n	8004ad0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	f003 0207 	and.w	r2, r3, #7
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004adc:	883a      	ldrh	r2, [r7, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	78ba      	ldrb	r2, [r7, #2]
 8004ae6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	785b      	ldrb	r3, [r3, #1]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004afa:	78bb      	ldrb	r3, [r7, #2]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d102      	bne.n	8004b06 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_PCD_EP_Open+0xa6>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e00e      	b.n	8004b32 <HAL_PCD_EP_Open+0xc4>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68f9      	ldr	r1, [r7, #12]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f003 f970 	bl	8007e08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004b30:	7afb      	ldrb	r3, [r7, #11]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	da0e      	bge.n	8004b6c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	705a      	strb	r2, [r3, #1]
 8004b6a:	e00e      	b.n	8004b8a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	f003 0207 	and.w	r2, r3, #7
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4413      	add	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_PCD_EP_Close+0x6a>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e00e      	b.n	8004bc2 <HAL_PCD_EP_Close+0x88>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f003 fc92 	bl	80084dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bda:	7afb      	ldrb	r3, [r7, #11]
 8004bdc:	f003 0207 	and.w	r2, r3, #7
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2200      	movs	r2, #0
 8004c08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0a:	7afb      	ldrb	r3, [r7, #11]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c16:	7afb      	ldrb	r3, [r7, #11]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d106      	bne.n	8004c2e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f003 fe44 	bl	80088b4 <USB_EPStartXfer>
 8004c2c:	e005      	b.n	8004c3a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f003 fe3d 	bl	80088b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	f003 0207 	and.w	r2, r3, #7
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	440b      	add	r3, r1
 8004c62:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c82:	7afb      	ldrb	r3, [r7, #11]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cbe:	7afb      	ldrb	r3, [r7, #11]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cca:	7afb      	ldrb	r3, [r7, #11]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f003 fdea 	bl	80088b4 <USB_EPStartXfer>
 8004ce0:	e005      	b.n	8004cee <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6979      	ldr	r1, [r7, #20]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f003 fde3 	bl	80088b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	f003 0207 	and.w	r2, r3, #7
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d901      	bls.n	8004d16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e04c      	b.n	8004db0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	da0e      	bge.n	8004d3c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	705a      	strb	r2, [r3, #1]
 8004d3a:	e00c      	b.n	8004d56 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d101      	bne.n	8004d76 <HAL_PCD_EP_SetStall+0x7e>
 8004d72:	2302      	movs	r3, #2
 8004d74:	e01c      	b.n	8004db0 <HAL_PCD_EP_SetStall+0xb8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f005 fbcd 	bl	800a524 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d108      	bne.n	8004da6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f005 fcf2 	bl	800a78a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d901      	bls.n	8004dd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e040      	b.n	8004e58 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	da0e      	bge.n	8004dfc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4413      	add	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	705a      	strb	r2, [r3, #1]
 8004dfa:	e00e      	b.n	8004e1a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 0207 	and.w	r2, r3, #7
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	4413      	add	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_PCD_EP_ClrStall+0x82>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e00e      	b.n	8004e58 <HAL_PCD_EP_ClrStall+0xa0>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f005 fbbb 	bl	800a5c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08e      	sub	sp, #56	; 0x38
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e68:	e2ec      	b.n	8005444 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e72:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004e74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004e80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f040 8161 	bne.w	800514c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004e8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d152      	bne.n	8004f3a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea4:	81fb      	strh	r3, [r7, #14]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	89fb      	ldrh	r3, [r7, #14]
 8004eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3328      	adds	r3, #40	; 0x28
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	441a      	add	r2, r3
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004ef8:	2100      	movs	r1, #0
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f007 fabf 	bl	800c47e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 829b 	beq.w	8005444 <PCD_EP_ISR_Handler+0x5e4>
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f040 8296 	bne.w	8005444 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	b292      	uxth	r2, r2
 8004f2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f38:	e284      	b.n	8005444 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004f4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d034      	beq.n	8004fbe <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	4413      	add	r3, r2
 8004f68:	3306      	adds	r3, #6
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f005 fc49 	bl	800a82a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	823b      	strh	r3, [r7, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	8a3a      	ldrh	r2, [r7, #16]
 8004fae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fb2:	b292      	uxth	r2, r2
 8004fb4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f007 fa34 	bl	800c424 <HAL_PCD_SetupStageCallback>
 8004fbc:	e242      	b.n	8005444 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fbe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f280 823e 	bge.w	8005444 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	83bb      	strh	r3, [r7, #28]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	8bba      	ldrh	r2, [r7, #28]
 8004fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fe2:	b292      	uxth	r2, r2
 8004fe4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3306      	adds	r3, #6
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d019      	beq.n	800504e <PCD_EP_ISR_Handler+0x1ee>
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d015      	beq.n	800504e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	6959      	ldr	r1, [r3, #20]
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005032:	b29b      	uxth	r3, r3
 8005034:	f005 fbf9 	bl	800a82a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	441a      	add	r2, r3
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005046:	2100      	movs	r1, #0
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f007 f9fd 	bl	800c448 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 81f2 	bne.w	8005444 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506e:	b29b      	uxth	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	4413      	add	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d112      	bne.n	80050ae <PCD_EP_ISR_Handler+0x24e>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005092:	b29a      	uxth	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	e02f      	b.n	800510e <PCD_EP_ISR_Handler+0x2ae>
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b3e      	cmp	r3, #62	; 0x3e
 80050b4:	d813      	bhi.n	80050de <PCD_EP_ISR_Handler+0x27e>
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	633b      	str	r3, [r7, #48]	; 0x30
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <PCD_EP_ISR_Handler+0x270>
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	3301      	adds	r3, #1
 80050ce:	633b      	str	r3, [r7, #48]	; 0x30
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	029b      	lsls	r3, r3, #10
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	801a      	strh	r2, [r3, #0]
 80050dc:	e017      	b.n	800510e <PCD_EP_ISR_Handler+0x2ae>
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d102      	bne.n	80050f8 <PCD_EP_ISR_Handler+0x298>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	3b01      	subs	r3, #1
 80050f6:	633b      	str	r3, [r7, #48]	; 0x30
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	029b      	lsls	r3, r3, #10
 80050fe:	b29b      	uxth	r3, r3
 8005100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005108:	b29a      	uxth	r2, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800511a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511e:	827b      	strh	r3, [r7, #18]
 8005120:	8a7b      	ldrh	r3, [r7, #18]
 8005122:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005126:	827b      	strh	r3, [r7, #18]
 8005128:	8a7b      	ldrh	r3, [r7, #18]
 800512a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800512e:	827b      	strh	r3, [r7, #18]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	8a7b      	ldrh	r3, [r7, #18]
 8005136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800513a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005146:	b29b      	uxth	r3, r3
 8005148:	8013      	strh	r3, [r2, #0]
 800514a:	e17b      	b.n	8005444 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800515e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005162:	2b00      	cmp	r3, #0
 8005164:	f280 80ea 	bge.w	800533c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29a      	uxth	r2, r3
 800517a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800517e:	4013      	ands	r3, r2
 8005180:	853b      	strh	r3, [r7, #40]	; 0x28
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005192:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005196:	b292      	uxth	r2, r2
 8005198:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800519a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	7b1b      	ldrb	r3, [r3, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d122      	bne.n	80051fe <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4413      	add	r3, r2
 80051cc:	3306      	adds	r3, #6
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80051e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8087 	beq.w	80052f8 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	6959      	ldr	r1, [r3, #20]
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	88da      	ldrh	r2, [r3, #6]
 80051f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051f8:	f005 fb17 	bl	800a82a <USB_ReadPMA>
 80051fc:	e07c      	b.n	80052f8 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	78db      	ldrb	r3, [r3, #3]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d108      	bne.n	8005218 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005206:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005208:	461a      	mov	r2, r3
 800520a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f927 	bl	8005460 <HAL_PCD_EP_DB_Receive>
 8005212:	4603      	mov	r3, r0
 8005214:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005216:	e06f      	b.n	80052f8 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	847b      	strh	r3, [r7, #34]	; 0x22
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005250:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005254:	b29b      	uxth	r3, r3
 8005256:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d021      	beq.n	80052b6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527a:	b29b      	uxth	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	3302      	adds	r3, #2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6812      	ldr	r2, [r2, #0]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800529a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800529c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d02a      	beq.n	80052f8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	6959      	ldr	r1, [r3, #20]
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	891a      	ldrh	r2, [r3, #8]
 80052ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052b0:	f005 fabb 	bl	800a82a <USB_ReadPMA>
 80052b4:	e020      	b.n	80052f8 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052be:	b29b      	uxth	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4413      	add	r3, r2
 80052ca:	3306      	adds	r3, #6
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052de:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80052e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	6959      	ldr	r1, [r3, #20]
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	895a      	ldrh	r2, [r3, #10]
 80052f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052f4:	f005 fa99 	bl	800a82a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80052fe:	441a      	add	r2, r3
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	695a      	ldr	r2, [r3, #20]
 8005308:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800530a:	441a      	add	r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <PCD_EP_ISR_Handler+0x4c2>
 8005318:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	429a      	cmp	r2, r3
 8005320:	d206      	bcs.n	8005330 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f007 f88d 	bl	800c448 <HAL_PCD_DataOutStageCallback>
 800532e:	e005      	b.n	800533c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005336:	4618      	mov	r0, r3
 8005338:	f003 fabc 	bl	80088b4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800533c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b00      	cmp	r3, #0
 8005344:	d07e      	beq.n	8005444 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005346:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	4413      	add	r3, r2
 8005358:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005374:	843b      	strh	r3, [r7, #32]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	8c3b      	ldrh	r3, [r7, #32]
 8005386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538e:	b29b      	uxth	r3, r3
 8005390:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	78db      	ldrb	r3, [r3, #3]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d00c      	beq.n	80053b4 <PCD_EP_ISR_Handler+0x554>
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	78db      	ldrb	r3, [r3, #3]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d146      	bne.n	8005438 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80053aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d141      	bne.n	8005438 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053bc:	b29b      	uxth	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	4413      	add	r3, r2
 80053c8:	3302      	adds	r3, #2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053dc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	8bfb      	ldrh	r3, [r7, #30]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d906      	bls.n	80053f6 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	8bfb      	ldrh	r3, [r7, #30]
 80053ee:	1ad2      	subs	r2, r2, r3
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	619a      	str	r2, [r3, #24]
 80053f4:	e002      	b.n	80053fc <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	2200      	movs	r2, #0
 80053fa:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	4619      	mov	r1, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f007 f837 	bl	800c47e <HAL_PCD_DataInStageCallback>
 8005410:	e018      	b.n	8005444 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	8bfb      	ldrh	r3, [r7, #30]
 8005418:	441a      	add	r2, r3
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	69da      	ldr	r2, [r3, #28]
 8005422:	8bfb      	ldrh	r3, [r7, #30]
 8005424:	441a      	add	r2, r3
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005430:	4618      	mov	r0, r3
 8005432:	f003 fa3f 	bl	80088b4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005436:	e005      	b.n	8005444 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005438:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800543a:	461a      	mov	r2, r3
 800543c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f91b 	bl	800567a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800544c:	b29b      	uxth	r3, r3
 800544e:	b21b      	sxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	f6ff ad0a 	blt.w	8004e6a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3738      	adds	r7, #56	; 0x38
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d07e      	beq.n	8005576 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005480:	b29b      	uxth	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	4413      	add	r3, r2
 800548c:	3302      	adds	r3, #2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	8b7b      	ldrh	r3, [r7, #26]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d306      	bcc.n	80054ba <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	8b7b      	ldrh	r3, [r7, #26]
 80054b2:	1ad2      	subs	r2, r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	619a      	str	r2, [r3, #24]
 80054b8:	e002      	b.n	80054c0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d123      	bne.n	8005510 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	833b      	strh	r3, [r7, #24]
 80054e4:	8b3b      	ldrh	r3, [r7, #24]
 80054e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054ea:	833b      	strh	r3, [r7, #24]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	8b3b      	ldrh	r3, [r7, #24]
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01f      	beq.n	800555a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005534:	82fb      	strh	r3, [r7, #22]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	441a      	add	r2, r3
 8005544:	8afb      	ldrh	r3, [r7, #22]
 8005546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005552:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005556:	b29b      	uxth	r3, r3
 8005558:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800555a:	8b7b      	ldrh	r3, [r7, #26]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8087 	beq.w	8005670 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	6959      	ldr	r1, [r3, #20]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	891a      	ldrh	r2, [r3, #8]
 800556e:	8b7b      	ldrh	r3, [r7, #26]
 8005570:	f005 f95b 	bl	800a82a <USB_ReadPMA>
 8005574:	e07c      	b.n	8005670 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	3306      	adds	r3, #6
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800559e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	8b7b      	ldrh	r3, [r7, #26]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d306      	bcc.n	80055b8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	8b7b      	ldrh	r3, [r7, #26]
 80055b0:	1ad2      	subs	r2, r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	619a      	str	r2, [r3, #24]
 80055b6:	e002      	b.n	80055be <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2200      	movs	r2, #0
 80055bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d123      	bne.n	800560e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e0:	83fb      	strh	r3, [r7, #30]
 80055e2:	8bfb      	ldrh	r3, [r7, #30]
 80055e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055e8:	83fb      	strh	r3, [r7, #30]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	441a      	add	r2, r3
 80055f8:	8bfb      	ldrh	r3, [r7, #30]
 80055fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560a:	b29b      	uxth	r3, r3
 800560c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b00      	cmp	r3, #0
 8005616:	d11f      	bne.n	8005658 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005632:	83bb      	strh	r3, [r7, #28]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	8bbb      	ldrh	r3, [r7, #28]
 8005644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005650:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005654:	b29b      	uxth	r3, r3
 8005656:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005658:	8b7b      	ldrh	r3, [r7, #26]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6959      	ldr	r1, [r3, #20]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	895a      	ldrh	r2, [r3, #10]
 800566a:	8b7b      	ldrh	r3, [r7, #26]
 800566c:	f005 f8dd 	bl	800a82a <USB_ReadPMA>
    }
  }

  return count;
 8005670:	8b7b      	ldrh	r3, [r7, #26]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b0a2      	sub	sp, #136	; 0x88
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	4613      	mov	r3, r2
 8005686:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 81c7 	beq.w	8005a22 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569c:	b29b      	uxth	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4413      	add	r3, r2
 80056a8:	3302      	adds	r3, #2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d907      	bls.n	80056dc <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056d4:	1ad2      	subs	r2, r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	619a      	str	r2, [r3, #24]
 80056da:	e002      	b.n	80056e2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f040 80b9 	bne.w	800585e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	785b      	ldrb	r3, [r3, #1]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d126      	bne.n	8005742 <HAL_PCD_EP_DB_Transmit+0xc8>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	4413      	add	r3, r2
 800570a:	62bb      	str	r3, [r7, #40]	; 0x28
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	011a      	lsls	r2, r3, #4
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	4413      	add	r3, r2
 8005716:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005726:	b29a      	uxth	r2, r3
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800573a:	b29a      	uxth	r2, r3
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	801a      	strh	r2, [r3, #0]
 8005740:	e01a      	b.n	8005778 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d116      	bne.n	8005778 <HAL_PCD_EP_DB_Transmit+0xfe>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	633b      	str	r3, [r7, #48]	; 0x30
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005758:	b29b      	uxth	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	4413      	add	r3, r2
 8005760:	633b      	str	r3, [r7, #48]	; 0x30
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	011a      	lsls	r2, r3, #4
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	4413      	add	r3, r2
 800576c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	2200      	movs	r2, #0
 8005776:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	623b      	str	r3, [r7, #32]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d126      	bne.n	80057d4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	4413      	add	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	011a      	lsls	r2, r3, #4
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	4413      	add	r3, r2
 80057a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	e017      	b.n	8005804 <HAL_PCD_EP_DB_Transmit+0x18a>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d113      	bne.n	8005804 <HAL_PCD_EP_DB_Transmit+0x18a>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	4413      	add	r3, r2
 80057ec:	623b      	str	r3, [r7, #32]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	011a      	lsls	r2, r3, #4
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	4413      	add	r3, r2
 80057f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	2200      	movs	r2, #0
 8005802:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	4619      	mov	r1, r3
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f006 fe37 	bl	800c47e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005810:	88fb      	ldrh	r3, [r7, #6]
 8005812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 82d4 	beq.w	8005dc4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b29b      	uxth	r3, r3
 800582e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	827b      	strh	r3, [r7, #18]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	441a      	add	r2, r3
 8005846:	8a7b      	ldrh	r3, [r7, #18]
 8005848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800584c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005858:	b29b      	uxth	r3, r3
 800585a:	8013      	strh	r3, [r2, #0]
 800585c:	e2b2      	b.n	8005dc4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d021      	beq.n	80058ac <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800587e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005882:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	441a      	add	r2, r3
 8005894:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800589c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	f040 8286 	bne.w	8005dc4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	695a      	ldr	r2, [r3, #20]
 80058bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058c0:	441a      	add	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	69da      	ldr	r2, [r3, #28]
 80058ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058ce:	441a      	add	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6a1a      	ldr	r2, [r3, #32]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d309      	bcc.n	80058f4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	6a1a      	ldr	r2, [r3, #32]
 80058ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ec:	1ad2      	subs	r2, r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	621a      	str	r2, [r3, #32]
 80058f2:	e015      	b.n	8005920 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d107      	bne.n	800590c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80058fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005900:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800590a:	e009      	b.n	8005920 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2200      	movs	r2, #0
 800591e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d155      	bne.n	80059d4 <HAL_PCD_EP_DB_Transmit+0x35a>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	63bb      	str	r3, [r7, #56]	; 0x38
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005936:	b29b      	uxth	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	4413      	add	r3, r2
 800593e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	011a      	lsls	r2, r3, #4
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	4413      	add	r3, r2
 800594a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
 8005950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005952:	2b00      	cmp	r3, #0
 8005954:	d112      	bne.n	800597c <HAL_PCD_EP_DB_Transmit+0x302>
 8005956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005960:	b29a      	uxth	r2, r3
 8005962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005974:	b29a      	uxth	r2, r3
 8005976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005978:	801a      	strh	r2, [r3, #0]
 800597a:	e047      	b.n	8005a0c <HAL_PCD_EP_DB_Transmit+0x392>
 800597c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800597e:	2b3e      	cmp	r3, #62	; 0x3e
 8005980:	d811      	bhi.n	80059a6 <HAL_PCD_EP_DB_Transmit+0x32c>
 8005982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	64bb      	str	r3, [r7, #72]	; 0x48
 8005988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005994:	3301      	adds	r3, #1
 8005996:	64bb      	str	r3, [r7, #72]	; 0x48
 8005998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800599a:	b29b      	uxth	r3, r3
 800599c:	029b      	lsls	r3, r3, #10
 800599e:	b29a      	uxth	r2, r3
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	801a      	strh	r2, [r3, #0]
 80059a4:	e032      	b.n	8005a0c <HAL_PCD_EP_DB_Transmit+0x392>
 80059a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80059ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <HAL_PCD_EP_DB_Transmit+0x342>
 80059b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b8:	3b01      	subs	r3, #1
 80059ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80059bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059be:	b29b      	uxth	r3, r3
 80059c0:	029b      	lsls	r3, r3, #10
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	e01b      	b.n	8005a0c <HAL_PCD_EP_DB_Transmit+0x392>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d117      	bne.n	8005a0c <HAL_PCD_EP_DB_Transmit+0x392>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	643b      	str	r3, [r7, #64]	; 0x40
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f0:	4413      	add	r3, r2
 80059f2:	643b      	str	r3, [r7, #64]	; 0x40
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	011a      	lsls	r2, r3, #4
 80059fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059fc:	4413      	add	r3, r2
 80059fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6959      	ldr	r1, [r3, #20]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	891a      	ldrh	r2, [r3, #8]
 8005a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f004 fec0 	bl	800a7a0 <USB_WritePMA>
 8005a20:	e1d0      	b.n	8005dc4 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	4413      	add	r3, r2
 8005a36:	3306      	adds	r3, #6
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d307      	bcc.n	8005a6a <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a62:	1ad2      	subs	r2, r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	619a      	str	r2, [r3, #24]
 8005a68:	e002      	b.n	8005a70 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 80c4 	bne.w	8005c02 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	785b      	ldrb	r3, [r3, #1]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d126      	bne.n	8005ad0 <HAL_PCD_EP_DB_Transmit+0x456>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a96:	4413      	add	r3, r2
 8005a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	011a      	lsls	r2, r3, #4
 8005aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aa8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	e01a      	b.n	8005b06 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d116      	bne.n	8005b06 <HAL_PCD_EP_DB_Transmit+0x48c>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	677b      	str	r3, [r7, #116]	; 0x74
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aec:	4413      	add	r3, r2
 8005aee:	677b      	str	r3, [r7, #116]	; 0x74
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	011a      	lsls	r2, r3, #4
 8005af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005af8:	4413      	add	r3, r2
 8005afa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005afe:	673b      	str	r3, [r7, #112]	; 0x70
 8005b00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b02:	2200      	movs	r2, #0
 8005b04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d12f      	bne.n	8005b74 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	011a      	lsls	r2, r3, #4
 8005b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	e017      	b.n	8005ba4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d113      	bne.n	8005ba4 <HAL_PCD_EP_DB_Transmit+0x52a>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b8a:	4413      	add	r3, r2
 8005b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	011a      	lsls	r2, r3, #4
 8005b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f006 fc67 	bl	800c47e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f040 8104 	bne.w	8005dc4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	441a      	add	r2, r3
 8005be8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	8013      	strh	r3, [r2, #0]
 8005c00:	e0e0      	b.n	8005dc4 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d121      	bne.n	8005c50 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	441a      	add	r2, r3
 8005c38:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	f040 80b4 	bne.w	8005dc4 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c64:	441a      	add	r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	69da      	ldr	r2, [r3, #28]
 8005c6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005c72:	441a      	add	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d309      	bcc.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6a1a      	ldr	r2, [r3, #32]
 8005c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c90:	1ad2      	subs	r2, r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	621a      	str	r2, [r3, #32]
 8005c96:	e015      	b.n	8005cc4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d107      	bne.n	8005cb0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ca4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005cae:	e009      	b.n	8005cc4 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d155      	bne.n	8005d7e <HAL_PCD_EP_DB_Transmit+0x704>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce6:	4413      	add	r3, r2
 8005ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	011a      	lsls	r2, r3, #4
 8005cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cf8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d112      	bne.n	8005d26 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d0e:	801a      	strh	r2, [r3, #0]
 8005d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d22:	801a      	strh	r2, [r3, #0]
 8005d24:	e044      	b.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x736>
 8005d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d28:	2b3e      	cmp	r3, #62	; 0x3e
 8005d2a:	d811      	bhi.n	8005d50 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	657b      	str	r3, [r7, #84]	; 0x54
 8005d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d3e:	3301      	adds	r3, #1
 8005d40:	657b      	str	r3, [r7, #84]	; 0x54
 8005d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	029b      	lsls	r3, r3, #10
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d4c:	801a      	strh	r2, [r3, #0]
 8005d4e:	e02f      	b.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x736>
 8005d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	657b      	str	r3, [r7, #84]	; 0x54
 8005d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d102      	bne.n	8005d66 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d62:	3b01      	subs	r3, #1
 8005d64:	657b      	str	r3, [r7, #84]	; 0x54
 8005d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	029b      	lsls	r3, r3, #10
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e018      	b.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x736>
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d114      	bne.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x736>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d94:	4413      	add	r3, r2
 8005d96:	667b      	str	r3, [r7, #100]	; 0x64
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	011a      	lsls	r2, r3, #4
 8005d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005da0:	4413      	add	r3, r2
 8005da2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005da6:	663b      	str	r3, [r7, #96]	; 0x60
 8005da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dae:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	6959      	ldr	r1, [r3, #20]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	895a      	ldrh	r2, [r3, #10]
 8005dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f004 fcee 	bl	800a7a0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dde:	823b      	strh	r3, [r7, #16]
 8005de0:	8a3b      	ldrh	r3, [r7, #16]
 8005de2:	f083 0310 	eor.w	r3, r3, #16
 8005de6:	823b      	strh	r3, [r7, #16]
 8005de8:	8a3b      	ldrh	r3, [r7, #16]
 8005dea:	f083 0320 	eor.w	r3, r3, #32
 8005dee:	823b      	strh	r3, [r7, #16]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	441a      	add	r2, r3
 8005dfe:	8a3b      	ldrh	r3, [r7, #16]
 8005e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3788      	adds	r7, #136	; 0x88
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	817b      	strh	r3, [r7, #10]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e30:	897b      	ldrh	r3, [r7, #10]
 8005e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e3c:	897b      	ldrh	r3, [r7, #10]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	e009      	b.n	8005e68 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e54:	897a      	ldrh	r2, [r7, #10]
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005e68:	893b      	ldrh	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d107      	bne.n	8005e7e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2200      	movs	r2, #0
 8005e72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	80da      	strh	r2, [r3, #6]
 8005e7c:	e00b      	b.n	8005e96 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2201      	movs	r2, #1
 8005e82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr
	...

08005ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e272      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8087 	beq.w	8005fd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ec4:	4b92      	ldr	r3, [pc, #584]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 030c 	and.w	r3, r3, #12
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d00c      	beq.n	8005eea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005ed0:	4b8f      	ldr	r3, [pc, #572]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 030c 	and.w	r3, r3, #12
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d112      	bne.n	8005f02 <HAL_RCC_OscConfig+0x5e>
 8005edc:	4b8c      	ldr	r3, [pc, #560]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee8:	d10b      	bne.n	8005f02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eea:	4b89      	ldr	r3, [pc, #548]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d06c      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x12c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d168      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e24c      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0a:	d106      	bne.n	8005f1a <HAL_RCC_OscConfig+0x76>
 8005f0c:	4b80      	ldr	r3, [pc, #512]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a7f      	ldr	r2, [pc, #508]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	e02e      	b.n	8005f78 <HAL_RCC_OscConfig+0xd4>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10c      	bne.n	8005f3c <HAL_RCC_OscConfig+0x98>
 8005f22:	4b7b      	ldr	r3, [pc, #492]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a7a      	ldr	r2, [pc, #488]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	4b78      	ldr	r3, [pc, #480]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a77      	ldr	r2, [pc, #476]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e01d      	b.n	8005f78 <HAL_RCC_OscConfig+0xd4>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCC_OscConfig+0xbc>
 8005f46:	4b72      	ldr	r3, [pc, #456]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a71      	ldr	r2, [pc, #452]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	4b6f      	ldr	r3, [pc, #444]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a6e      	ldr	r2, [pc, #440]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	e00b      	b.n	8005f78 <HAL_RCC_OscConfig+0xd4>
 8005f60:	4b6b      	ldr	r3, [pc, #428]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a6a      	ldr	r2, [pc, #424]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4b68      	ldr	r3, [pc, #416]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a67      	ldr	r2, [pc, #412]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d013      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f80:	f7fd ff76 	bl	8003e70 <HAL_GetTick>
 8005f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f86:	e008      	b.n	8005f9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f88:	f7fd ff72 	bl	8003e70 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b64      	cmp	r3, #100	; 0x64
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e200      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9a:	4b5d      	ldr	r3, [pc, #372]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0f0      	beq.n	8005f88 <HAL_RCC_OscConfig+0xe4>
 8005fa6:	e014      	b.n	8005fd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa8:	f7fd ff62 	bl	8003e70 <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb0:	f7fd ff5e 	bl	8003e70 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b64      	cmp	r3, #100	; 0x64
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e1ec      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fc2:	4b53      	ldr	r3, [pc, #332]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1f0      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x10c>
 8005fce:	e000      	b.n	8005fd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d063      	beq.n	80060a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fde:	4b4c      	ldr	r3, [pc, #304]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005fea:	4b49      	ldr	r3, [pc, #292]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d11c      	bne.n	8006030 <HAL_RCC_OscConfig+0x18c>
 8005ff6:	4b46      	ldr	r3, [pc, #280]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d116      	bne.n	8006030 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006002:	4b43      	ldr	r3, [pc, #268]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <HAL_RCC_OscConfig+0x176>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d001      	beq.n	800601a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e1c0      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601a:	4b3d      	ldr	r3, [pc, #244]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	4939      	ldr	r1, [pc, #228]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 800602a:	4313      	orrs	r3, r2
 800602c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800602e:	e03a      	b.n	80060a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d020      	beq.n	800607a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006038:	4b36      	ldr	r3, [pc, #216]	; (8006114 <HAL_RCC_OscConfig+0x270>)
 800603a:	2201      	movs	r2, #1
 800603c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603e:	f7fd ff17 	bl	8003e70 <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006046:	f7fd ff13 	bl	8003e70 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e1a1      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006058:	4b2d      	ldr	r3, [pc, #180]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006064:	4b2a      	ldr	r3, [pc, #168]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	4927      	ldr	r1, [pc, #156]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 8006074:	4313      	orrs	r3, r2
 8006076:	600b      	str	r3, [r1, #0]
 8006078:	e015      	b.n	80060a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800607a:	4b26      	ldr	r3, [pc, #152]	; (8006114 <HAL_RCC_OscConfig+0x270>)
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006080:	f7fd fef6 	bl	8003e70 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006088:	f7fd fef2 	bl	8003e70 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e180      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800609a:	4b1d      	ldr	r3, [pc, #116]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f0      	bne.n	8006088 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d03a      	beq.n	8006128 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d019      	beq.n	80060ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ba:	4b17      	ldr	r3, [pc, #92]	; (8006118 <HAL_RCC_OscConfig+0x274>)
 80060bc:	2201      	movs	r2, #1
 80060be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c0:	f7fd fed6 	bl	8003e70 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060c8:	f7fd fed2 	bl	8003e70 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e160      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <HAL_RCC_OscConfig+0x26c>)
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f0      	beq.n	80060c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80060e6:	2001      	movs	r0, #1
 80060e8:	f000 faa6 	bl	8006638 <RCC_Delay>
 80060ec:	e01c      	b.n	8006128 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ee:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <HAL_RCC_OscConfig+0x274>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060f4:	f7fd febc 	bl	8003e70 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060fa:	e00f      	b.n	800611c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060fc:	f7fd feb8 	bl	8003e70 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d908      	bls.n	800611c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e146      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
 800610e:	bf00      	nop
 8006110:	40021000 	.word	0x40021000
 8006114:	42420000 	.word	0x42420000
 8006118:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800611c:	4b92      	ldr	r3, [pc, #584]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e9      	bne.n	80060fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80a6 	beq.w	8006282 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800613a:	4b8b      	ldr	r3, [pc, #556]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10d      	bne.n	8006162 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006146:	4b88      	ldr	r3, [pc, #544]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	4a87      	ldr	r2, [pc, #540]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 800614c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006150:	61d3      	str	r3, [r2, #28]
 8006152:	4b85      	ldr	r3, [pc, #532]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615a:	60bb      	str	r3, [r7, #8]
 800615c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800615e:	2301      	movs	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006162:	4b82      	ldr	r3, [pc, #520]	; (800636c <HAL_RCC_OscConfig+0x4c8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616a:	2b00      	cmp	r3, #0
 800616c:	d118      	bne.n	80061a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800616e:	4b7f      	ldr	r3, [pc, #508]	; (800636c <HAL_RCC_OscConfig+0x4c8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a7e      	ldr	r2, [pc, #504]	; (800636c <HAL_RCC_OscConfig+0x4c8>)
 8006174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800617a:	f7fd fe79 	bl	8003e70 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006182:	f7fd fe75 	bl	8003e70 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b64      	cmp	r3, #100	; 0x64
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e103      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006194:	4b75      	ldr	r3, [pc, #468]	; (800636c <HAL_RCC_OscConfig+0x4c8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0f0      	beq.n	8006182 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d106      	bne.n	80061b6 <HAL_RCC_OscConfig+0x312>
 80061a8:	4b6f      	ldr	r3, [pc, #444]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	4a6e      	ldr	r2, [pc, #440]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061ae:	f043 0301 	orr.w	r3, r3, #1
 80061b2:	6213      	str	r3, [r2, #32]
 80061b4:	e02d      	b.n	8006212 <HAL_RCC_OscConfig+0x36e>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10c      	bne.n	80061d8 <HAL_RCC_OscConfig+0x334>
 80061be:	4b6a      	ldr	r3, [pc, #424]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	4a69      	ldr	r2, [pc, #420]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	6213      	str	r3, [r2, #32]
 80061ca:	4b67      	ldr	r3, [pc, #412]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	4a66      	ldr	r2, [pc, #408]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061d0:	f023 0304 	bic.w	r3, r3, #4
 80061d4:	6213      	str	r3, [r2, #32]
 80061d6:	e01c      	b.n	8006212 <HAL_RCC_OscConfig+0x36e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	2b05      	cmp	r3, #5
 80061de:	d10c      	bne.n	80061fa <HAL_RCC_OscConfig+0x356>
 80061e0:	4b61      	ldr	r3, [pc, #388]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	4a60      	ldr	r2, [pc, #384]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061e6:	f043 0304 	orr.w	r3, r3, #4
 80061ea:	6213      	str	r3, [r2, #32]
 80061ec:	4b5e      	ldr	r3, [pc, #376]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	4a5d      	ldr	r2, [pc, #372]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	6213      	str	r3, [r2, #32]
 80061f8:	e00b      	b.n	8006212 <HAL_RCC_OscConfig+0x36e>
 80061fa:	4b5b      	ldr	r3, [pc, #364]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	4a5a      	ldr	r2, [pc, #360]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 8006200:	f023 0301 	bic.w	r3, r3, #1
 8006204:	6213      	str	r3, [r2, #32]
 8006206:	4b58      	ldr	r3, [pc, #352]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	4a57      	ldr	r2, [pc, #348]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 800620c:	f023 0304 	bic.w	r3, r3, #4
 8006210:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d015      	beq.n	8006246 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621a:	f7fd fe29 	bl	8003e70 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006220:	e00a      	b.n	8006238 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006222:	f7fd fe25 	bl	8003e70 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006230:	4293      	cmp	r3, r2
 8006232:	d901      	bls.n	8006238 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e0b1      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006238:	4b4b      	ldr	r3, [pc, #300]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0ee      	beq.n	8006222 <HAL_RCC_OscConfig+0x37e>
 8006244:	e014      	b.n	8006270 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006246:	f7fd fe13 	bl	8003e70 <HAL_GetTick>
 800624a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800624c:	e00a      	b.n	8006264 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624e:	f7fd fe0f 	bl	8003e70 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	f241 3288 	movw	r2, #5000	; 0x1388
 800625c:	4293      	cmp	r3, r2
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e09b      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006264:	4b40      	ldr	r3, [pc, #256]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1ee      	bne.n	800624e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d105      	bne.n	8006282 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006276:	4b3c      	ldr	r3, [pc, #240]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	4a3b      	ldr	r2, [pc, #236]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 800627c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006280:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 8087 	beq.w	800639a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800628c:	4b36      	ldr	r3, [pc, #216]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f003 030c 	and.w	r3, r3, #12
 8006294:	2b08      	cmp	r3, #8
 8006296:	d061      	beq.n	800635c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	2b02      	cmp	r3, #2
 800629e:	d146      	bne.n	800632e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062a0:	4b33      	ldr	r3, [pc, #204]	; (8006370 <HAL_RCC_OscConfig+0x4cc>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a6:	f7fd fde3 	bl	8003e70 <HAL_GetTick>
 80062aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062ac:	e008      	b.n	80062c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ae:	f7fd fddf 	bl	8003e70 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e06d      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062c0:	4b29      	ldr	r3, [pc, #164]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f0      	bne.n	80062ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d4:	d108      	bne.n	80062e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80062d6:	4b24      	ldr	r3, [pc, #144]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	4921      	ldr	r1, [pc, #132]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062e8:	4b1f      	ldr	r3, [pc, #124]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a19      	ldr	r1, [r3, #32]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	430b      	orrs	r3, r1
 80062fa:	491b      	ldr	r1, [pc, #108]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006300:	4b1b      	ldr	r3, [pc, #108]	; (8006370 <HAL_RCC_OscConfig+0x4cc>)
 8006302:	2201      	movs	r2, #1
 8006304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006306:	f7fd fdb3 	bl	8003e70 <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800630e:	f7fd fdaf 	bl	8003e70 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e03d      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006320:	4b11      	ldr	r3, [pc, #68]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f0      	beq.n	800630e <HAL_RCC_OscConfig+0x46a>
 800632c:	e035      	b.n	800639a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800632e:	4b10      	ldr	r3, [pc, #64]	; (8006370 <HAL_RCC_OscConfig+0x4cc>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006334:	f7fd fd9c 	bl	8003e70 <HAL_GetTick>
 8006338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800633c:	f7fd fd98 	bl	8003e70 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e026      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800634e:	4b06      	ldr	r3, [pc, #24]	; (8006368 <HAL_RCC_OscConfig+0x4c4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f0      	bne.n	800633c <HAL_RCC_OscConfig+0x498>
 800635a:	e01e      	b.n	800639a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d107      	bne.n	8006374 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e019      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
 8006368:	40021000 	.word	0x40021000
 800636c:	40007000 	.word	0x40007000
 8006370:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <HAL_RCC_OscConfig+0x500>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	429a      	cmp	r2, r3
 8006386:	d106      	bne.n	8006396 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006392:	429a      	cmp	r2, r3
 8006394:	d001      	beq.n	800639a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40021000 	.word	0x40021000

080063a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0d0      	b.n	800655e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063bc:	4b6a      	ldr	r3, [pc, #424]	; (8006568 <HAL_RCC_ClockConfig+0x1c0>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d910      	bls.n	80063ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ca:	4b67      	ldr	r3, [pc, #412]	; (8006568 <HAL_RCC_ClockConfig+0x1c0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f023 0207 	bic.w	r2, r3, #7
 80063d2:	4965      	ldr	r1, [pc, #404]	; (8006568 <HAL_RCC_ClockConfig+0x1c0>)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063da:	4b63      	ldr	r3, [pc, #396]	; (8006568 <HAL_RCC_ClockConfig+0x1c0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d001      	beq.n	80063ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e0b8      	b.n	800655e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d020      	beq.n	800643a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006404:	4b59      	ldr	r3, [pc, #356]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	4a58      	ldr	r2, [pc, #352]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 800640a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800640e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800641c:	4b53      	ldr	r3, [pc, #332]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4a52      	ldr	r2, [pc, #328]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006428:	4b50      	ldr	r3, [pc, #320]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	494d      	ldr	r1, [pc, #308]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006436:	4313      	orrs	r3, r2
 8006438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d040      	beq.n	80064c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d107      	bne.n	800645e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800644e:	4b47      	ldr	r3, [pc, #284]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d115      	bne.n	8006486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e07f      	b.n	800655e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d107      	bne.n	8006476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006466:	4b41      	ldr	r3, [pc, #260]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e073      	b.n	800655e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006476:	4b3d      	ldr	r3, [pc, #244]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e06b      	b.n	800655e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006486:	4b39      	ldr	r3, [pc, #228]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f023 0203 	bic.w	r2, r3, #3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4936      	ldr	r1, [pc, #216]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006494:	4313      	orrs	r3, r2
 8006496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006498:	f7fd fcea 	bl	8003e70 <HAL_GetTick>
 800649c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649e:	e00a      	b.n	80064b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a0:	f7fd fce6 	bl	8003e70 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e053      	b.n	800655e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064b6:	4b2d      	ldr	r3, [pc, #180]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 020c 	and.w	r2, r3, #12
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d1eb      	bne.n	80064a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064c8:	4b27      	ldr	r3, [pc, #156]	; (8006568 <HAL_RCC_ClockConfig+0x1c0>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d210      	bcs.n	80064f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d6:	4b24      	ldr	r3, [pc, #144]	; (8006568 <HAL_RCC_ClockConfig+0x1c0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f023 0207 	bic.w	r2, r3, #7
 80064de:	4922      	ldr	r1, [pc, #136]	; (8006568 <HAL_RCC_ClockConfig+0x1c0>)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e6:	4b20      	ldr	r3, [pc, #128]	; (8006568 <HAL_RCC_ClockConfig+0x1c0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d001      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e032      	b.n	800655e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d008      	beq.n	8006516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006504:	4b19      	ldr	r3, [pc, #100]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4916      	ldr	r1, [pc, #88]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006512:	4313      	orrs	r3, r2
 8006514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d009      	beq.n	8006536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	490e      	ldr	r1, [pc, #56]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 8006532:	4313      	orrs	r3, r2
 8006534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006536:	f000 f821 	bl	800657c <HAL_RCC_GetSysClockFreq>
 800653a:	4602      	mov	r2, r0
 800653c:	4b0b      	ldr	r3, [pc, #44]	; (800656c <HAL_RCC_ClockConfig+0x1c4>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	091b      	lsrs	r3, r3, #4
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	490a      	ldr	r1, [pc, #40]	; (8006570 <HAL_RCC_ClockConfig+0x1c8>)
 8006548:	5ccb      	ldrb	r3, [r1, r3]
 800654a:	fa22 f303 	lsr.w	r3, r2, r3
 800654e:	4a09      	ldr	r2, [pc, #36]	; (8006574 <HAL_RCC_ClockConfig+0x1cc>)
 8006550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <HAL_RCC_ClockConfig+0x1d0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f7fd fc48 	bl	8003dec <HAL_InitTick>

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40022000 	.word	0x40022000
 800656c:	40021000 	.word	0x40021000
 8006570:	0800d3d4 	.word	0x0800d3d4
 8006574:	20000230 	.word	0x20000230
 8006578:	20000234 	.word	0x20000234

0800657c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800657c:	b490      	push	{r4, r7}
 800657e:	b08a      	sub	sp, #40	; 0x28
 8006580:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006582:	4b29      	ldr	r3, [pc, #164]	; (8006628 <HAL_RCC_GetSysClockFreq+0xac>)
 8006584:	1d3c      	adds	r4, r7, #4
 8006586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800658c:	f240 2301 	movw	r3, #513	; 0x201
 8006590:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]
 8006596:	2300      	movs	r3, #0
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	2300      	movs	r3, #0
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
 800659e:	2300      	movs	r3, #0
 80065a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80065a6:	4b21      	ldr	r3, [pc, #132]	; (800662c <HAL_RCC_GetSysClockFreq+0xb0>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d002      	beq.n	80065bc <HAL_RCC_GetSysClockFreq+0x40>
 80065b6:	2b08      	cmp	r3, #8
 80065b8:	d003      	beq.n	80065c2 <HAL_RCC_GetSysClockFreq+0x46>
 80065ba:	e02b      	b.n	8006614 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80065bc:	4b1c      	ldr	r3, [pc, #112]	; (8006630 <HAL_RCC_GetSysClockFreq+0xb4>)
 80065be:	623b      	str	r3, [r7, #32]
      break;
 80065c0:	e02b      	b.n	800661a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	0c9b      	lsrs	r3, r3, #18
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	3328      	adds	r3, #40	; 0x28
 80065cc:	443b      	add	r3, r7
 80065ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80065d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d012      	beq.n	8006604 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80065de:	4b13      	ldr	r3, [pc, #76]	; (800662c <HAL_RCC_GetSysClockFreq+0xb0>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	0c5b      	lsrs	r3, r3, #17
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	3328      	adds	r3, #40	; 0x28
 80065ea:	443b      	add	r3, r7
 80065ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80065f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4a0e      	ldr	r2, [pc, #56]	; (8006630 <HAL_RCC_GetSysClockFreq+0xb4>)
 80065f6:	fb03 f202 	mul.w	r2, r3, r2
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
 8006602:	e004      	b.n	800660e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	4a0b      	ldr	r2, [pc, #44]	; (8006634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006608:	fb02 f303 	mul.w	r3, r2, r3
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	623b      	str	r3, [r7, #32]
      break;
 8006612:	e002      	b.n	800661a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006614:	4b06      	ldr	r3, [pc, #24]	; (8006630 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006616:	623b      	str	r3, [r7, #32]
      break;
 8006618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800661a:	6a3b      	ldr	r3, [r7, #32]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3728      	adds	r7, #40	; 0x28
 8006620:	46bd      	mov	sp, r7
 8006622:	bc90      	pop	{r4, r7}
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	0800d38c 	.word	0x0800d38c
 800662c:	40021000 	.word	0x40021000
 8006630:	007a1200 	.word	0x007a1200
 8006634:	003d0900 	.word	0x003d0900

08006638 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <RCC_Delay+0x34>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <RCC_Delay+0x38>)
 8006646:	fba2 2303 	umull	r2, r3, r2, r3
 800664a:	0a5b      	lsrs	r3, r3, #9
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	fb02 f303 	mul.w	r3, r2, r3
 8006652:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006654:	bf00      	nop
  }
  while (Delay --);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1e5a      	subs	r2, r3, #1
 800665a:	60fa      	str	r2, [r7, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1f9      	bne.n	8006654 <RCC_Delay+0x1c>
}
 8006660:	bf00      	nop
 8006662:	bf00      	nop
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr
 800666c:	20000230 	.word	0x20000230
 8006670:	10624dd3 	.word	0x10624dd3

08006674 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	2300      	movs	r3, #0
 8006682:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d07d      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006690:	2300      	movs	r3, #0
 8006692:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006694:	4b4f      	ldr	r3, [pc, #316]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10d      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066a0:	4b4c      	ldr	r3, [pc, #304]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	4a4b      	ldr	r2, [pc, #300]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066aa:	61d3      	str	r3, [r2, #28]
 80066ac:	4b49      	ldr	r3, [pc, #292]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b4:	60bb      	str	r3, [r7, #8]
 80066b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066bc:	4b46      	ldr	r3, [pc, #280]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d118      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066c8:	4b43      	ldr	r3, [pc, #268]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a42      	ldr	r2, [pc, #264]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066d4:	f7fd fbcc 	bl	8003e70 <HAL_GetTick>
 80066d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066da:	e008      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066dc:	f7fd fbc8 	bl	8003e70 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b64      	cmp	r3, #100	; 0x64
 80066e8:	d901      	bls.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e06d      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ee:	4b3a      	ldr	r3, [pc, #232]	; (80067d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f0      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066fa:	4b36      	ldr	r3, [pc, #216]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006702:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d02e      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	429a      	cmp	r2, r3
 8006716:	d027      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006718:	4b2e      	ldr	r3, [pc, #184]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006720:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006722:	4b2e      	ldr	r3, [pc, #184]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006724:	2201      	movs	r2, #1
 8006726:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006728:	4b2c      	ldr	r3, [pc, #176]	; (80067dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800672e:	4a29      	ldr	r2, [pc, #164]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d014      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673e:	f7fd fb97 	bl	8003e70 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006744:	e00a      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006746:	f7fd fb93 	bl	8003e70 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	f241 3288 	movw	r2, #5000	; 0x1388
 8006754:	4293      	cmp	r3, r2
 8006756:	d901      	bls.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e036      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800675c:	4b1d      	ldr	r3, [pc, #116]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0ee      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006768:	4b1a      	ldr	r3, [pc, #104]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	4917      	ldr	r1, [pc, #92]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006776:	4313      	orrs	r3, r2
 8006778:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d105      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006780:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800678a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d008      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006798:	4b0e      	ldr	r3, [pc, #56]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	490b      	ldr	r1, [pc, #44]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0310 	and.w	r3, r3, #16
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d008      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067b6:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	4904      	ldr	r1, [pc, #16]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40021000 	.word	0x40021000
 80067d8:	40007000 	.word	0x40007000
 80067dc:	42420440 	.word	0x42420440

080067e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e076      	b.n	80068e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d108      	bne.n	800680c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006802:	d009      	beq.n	8006818 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	61da      	str	r2, [r3, #28]
 800680a:	e005      	b.n	8006818 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fa ff4e 	bl	80016d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689c:	ea42 0103 	orr.w	r1, r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	0c1a      	lsrs	r2, r3, #16
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f002 0204 	and.w	r2, r2, #4
 80068be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69da      	ldr	r2, [r3, #28]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b088      	sub	sp, #32
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	4613      	mov	r3, r2
 80068f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_SPI_Transmit+0x22>
 8006906:	2302      	movs	r3, #2
 8006908:	e126      	b.n	8006b58 <HAL_SPI_Transmit+0x270>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006912:	f7fd faad 	bl	8003e70 <HAL_GetTick>
 8006916:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	d002      	beq.n	800692e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006928:	2302      	movs	r3, #2
 800692a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800692c:	e10b      	b.n	8006b46 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_SPI_Transmit+0x52>
 8006934:	88fb      	ldrh	r3, [r7, #6]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d102      	bne.n	8006940 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800693e:	e102      	b.n	8006b46 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2203      	movs	r2, #3
 8006944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006986:	d10f      	bne.n	80069a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006996:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d007      	beq.n	80069c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ce:	d14b      	bne.n	8006a68 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_SPI_Transmit+0xf6>
 80069d8:	8afb      	ldrh	r3, [r7, #22]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d13e      	bne.n	8006a5c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	881a      	ldrh	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	1c9a      	adds	r2, r3, #2
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a02:	e02b      	b.n	8006a5c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d112      	bne.n	8006a38 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	881a      	ldrh	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	1c9a      	adds	r2, r3, #2
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a36:	e011      	b.n	8006a5c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a38:	f7fd fa1a 	bl	8003e70 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d803      	bhi.n	8006a50 <HAL_SPI_Transmit+0x168>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a4e:	d102      	bne.n	8006a56 <HAL_SPI_Transmit+0x16e>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d102      	bne.n	8006a5c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a5a:	e074      	b.n	8006b46 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1ce      	bne.n	8006a04 <HAL_SPI_Transmit+0x11c>
 8006a66:	e04c      	b.n	8006b02 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <HAL_SPI_Transmit+0x18e>
 8006a70:	8afb      	ldrh	r3, [r7, #22]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d140      	bne.n	8006af8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	330c      	adds	r3, #12
 8006a80:	7812      	ldrb	r2, [r2, #0]
 8006a82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a9c:	e02c      	b.n	8006af8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d113      	bne.n	8006ad4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	330c      	adds	r3, #12
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ad2:	e011      	b.n	8006af8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ad4:	f7fd f9cc 	bl	8003e70 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d803      	bhi.n	8006aec <HAL_SPI_Transmit+0x204>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aea:	d102      	bne.n	8006af2 <HAL_SPI_Transmit+0x20a>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006af6:	e026      	b.n	8006b46 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1cd      	bne.n	8006a9e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 f8b2 	bl	8006c70 <SPI_EndRxTxTransaction>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2220      	movs	r2, #32
 8006b16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	613b      	str	r3, [r7, #16]
 8006b34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	77fb      	strb	r3, [r7, #31]
 8006b42:	e000      	b.n	8006b46 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006b44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b56:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b70:	f7fd f97e 	bl	8003e70 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b80:	f7fd f976 	bl	8003e70 <HAL_GetTick>
 8006b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b86:	4b39      	ldr	r3, [pc, #228]	; (8006c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	015b      	lsls	r3, r3, #5
 8006b8c:	0d1b      	lsrs	r3, r3, #20
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	fb02 f303 	mul.w	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b96:	e054      	b.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b9e:	d050      	beq.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ba0:	f7fd f966 	bl	8003e70 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d902      	bls.n	8006bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d13d      	bne.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bce:	d111      	bne.n	8006bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd8:	d004      	beq.n	8006be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be2:	d107      	bne.n	8006bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfc:	d10f      	bne.n	8006c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e017      	b.n	8006c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	bf0c      	ite	eq
 8006c52:	2301      	moveq	r3, #1
 8006c54:	2300      	movne	r3, #0
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d19b      	bne.n	8006b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000230 	.word	0x20000230

08006c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2200      	movs	r2, #0
 8006c84:	2180      	movs	r1, #128	; 0x80
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff ff6a 	bl	8006b60 <SPI_WaitFlagStateUntilTimeout>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e000      	b.n	8006ca4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e041      	b.n	8006d42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fa fd3c 	bl	8001750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f000 fcba 	bl	8007664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d001      	beq.n	8006d64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e03a      	b.n	8006dda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a18      	ldr	r2, [pc, #96]	; (8006de4 <HAL_TIM_Base_Start_IT+0x98>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00e      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x58>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8e:	d009      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x58>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a14      	ldr	r2, [pc, #80]	; (8006de8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <HAL_TIM_Base_Start_IT+0x58>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a13      	ldr	r2, [pc, #76]	; (8006dec <HAL_TIM_Base_Start_IT+0xa0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d111      	bne.n	8006dc8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b06      	cmp	r3, #6
 8006db4:	d010      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0201 	orr.w	r2, r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc6:	e007      	b.n	8006dd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr
 8006de4:	40012c00 	.word	0x40012c00
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40000800 	.word	0x40000800

08006df0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0201 	bic.w	r2, r2, #1
 8006e06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6a1a      	ldr	r2, [r3, #32]
 8006e0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10f      	bne.n	8006e38 <HAL_TIM_Base_Stop_IT+0x48>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6a1a      	ldr	r2, [r3, #32]
 8006e1e:	f240 4344 	movw	r3, #1092	; 0x444
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d107      	bne.n	8006e38 <HAL_TIM_Base_Stop_IT+0x48>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0201 	bic.w	r2, r2, #1
 8006e36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e041      	b.n	8006ee2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f839 	bl	8006eea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f000 fbea 	bl	8007664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr

08006efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d109      	bne.n	8006f20 <HAL_TIM_PWM_Start+0x24>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	bf14      	ite	ne
 8006f18:	2301      	movne	r3, #1
 8006f1a:	2300      	moveq	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e022      	b.n	8006f66 <HAL_TIM_PWM_Start+0x6a>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d109      	bne.n	8006f3a <HAL_TIM_PWM_Start+0x3e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	e015      	b.n	8006f66 <HAL_TIM_PWM_Start+0x6a>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d109      	bne.n	8006f54 <HAL_TIM_PWM_Start+0x58>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	e008      	b.n	8006f66 <HAL_TIM_PWM_Start+0x6a>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	bf14      	ite	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	2300      	moveq	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e05e      	b.n	800702c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <HAL_TIM_PWM_Start+0x82>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f7c:	e013      	b.n	8006fa6 <HAL_TIM_PWM_Start+0xaa>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d104      	bne.n	8006f8e <HAL_TIM_PWM_Start+0x92>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f8c:	e00b      	b.n	8006fa6 <HAL_TIM_PWM_Start+0xaa>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d104      	bne.n	8006f9e <HAL_TIM_PWM_Start+0xa2>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f9c:	e003      	b.n	8006fa6 <HAL_TIM_PWM_Start+0xaa>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2201      	movs	r2, #1
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fdd8 	bl	8007b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1e      	ldr	r2, [pc, #120]	; (8007034 <HAL_TIM_PWM_Start+0x138>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d107      	bne.n	8006fce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a18      	ldr	r2, [pc, #96]	; (8007034 <HAL_TIM_PWM_Start+0x138>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d00e      	beq.n	8006ff6 <HAL_TIM_PWM_Start+0xfa>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe0:	d009      	beq.n	8006ff6 <HAL_TIM_PWM_Start+0xfa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a14      	ldr	r2, [pc, #80]	; (8007038 <HAL_TIM_PWM_Start+0x13c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d004      	beq.n	8006ff6 <HAL_TIM_PWM_Start+0xfa>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a12      	ldr	r2, [pc, #72]	; (800703c <HAL_TIM_PWM_Start+0x140>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d111      	bne.n	800701a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b06      	cmp	r3, #6
 8007006:	d010      	beq.n	800702a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007018:	e007      	b.n	800702a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0201 	orr.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40000400 	.word	0x40000400
 800703c:	40000800 	.word	0x40000800

08007040 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2200      	movs	r2, #0
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fd86 	bl	8007b64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a29      	ldr	r2, [pc, #164]	; (8007104 <HAL_TIM_PWM_Stop+0xc4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d117      	bne.n	8007092 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	f241 1311 	movw	r3, #4369	; 0x1111
 800706c:	4013      	ands	r3, r2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10f      	bne.n	8007092 <HAL_TIM_PWM_Stop+0x52>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6a1a      	ldr	r2, [r3, #32]
 8007078:	f240 4344 	movw	r3, #1092	; 0x444
 800707c:	4013      	ands	r3, r2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d107      	bne.n	8007092 <HAL_TIM_PWM_Stop+0x52>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a1a      	ldr	r2, [r3, #32]
 8007098:	f241 1311 	movw	r3, #4369	; 0x1111
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10f      	bne.n	80070c2 <HAL_TIM_PWM_Stop+0x82>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6a1a      	ldr	r2, [r3, #32]
 80070a8:	f240 4344 	movw	r3, #1092	; 0x444
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d107      	bne.n	80070c2 <HAL_TIM_PWM_Stop+0x82>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0201 	bic.w	r2, r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <HAL_TIM_PWM_Stop+0x92>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070d0:	e013      	b.n	80070fa <HAL_TIM_PWM_Stop+0xba>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d104      	bne.n	80070e2 <HAL_TIM_PWM_Stop+0xa2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070e0:	e00b      	b.n	80070fa <HAL_TIM_PWM_Stop+0xba>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d104      	bne.n	80070f2 <HAL_TIM_PWM_Stop+0xb2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070f0:	e003      	b.n	80070fa <HAL_TIM_PWM_Stop+0xba>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3708      	adds	r7, #8
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40012c00 	.word	0x40012c00

08007108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b02      	cmp	r3, #2
 800711c:	d122      	bne.n	8007164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b02      	cmp	r3, #2
 800712a:	d11b      	bne.n	8007164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0202 	mvn.w	r2, #2
 8007134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa6f 	bl	800762e <HAL_TIM_IC_CaptureCallback>
 8007150:	e005      	b.n	800715e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa62 	bl	800761c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fa71 	bl	8007640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b04      	cmp	r3, #4
 8007170:	d122      	bne.n	80071b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b04      	cmp	r3, #4
 800717e:	d11b      	bne.n	80071b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f06f 0204 	mvn.w	r2, #4
 8007188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2202      	movs	r2, #2
 800718e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fa45 	bl	800762e <HAL_TIM_IC_CaptureCallback>
 80071a4:	e005      	b.n	80071b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa38 	bl	800761c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fa47 	bl	8007640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d122      	bne.n	800720c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d11b      	bne.n	800720c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0208 	mvn.w	r2, #8
 80071dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2204      	movs	r2, #4
 80071e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa1b 	bl	800762e <HAL_TIM_IC_CaptureCallback>
 80071f8:	e005      	b.n	8007206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fa0e 	bl	800761c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fa1d 	bl	8007640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b10      	cmp	r3, #16
 8007218:	d122      	bne.n	8007260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b10      	cmp	r3, #16
 8007226:	d11b      	bne.n	8007260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f06f 0210 	mvn.w	r2, #16
 8007230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2208      	movs	r2, #8
 8007236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f9f1 	bl	800762e <HAL_TIM_IC_CaptureCallback>
 800724c:	e005      	b.n	800725a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f9e4 	bl	800761c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f9f3 	bl	8007640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d10e      	bne.n	800728c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b01      	cmp	r3, #1
 800727a:	d107      	bne.n	800728c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0201 	mvn.w	r2, #1
 8007284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7f9 f83e 	bl	8000308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007296:	2b80      	cmp	r3, #128	; 0x80
 8007298:	d10e      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a4:	2b80      	cmp	r3, #128	; 0x80
 80072a6:	d107      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fd32 	bl	8007d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d10e      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d0:	2b40      	cmp	r3, #64	; 0x40
 80072d2:	d107      	bne.n	80072e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f9b7 	bl	8007652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d10e      	bne.n	8007310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	d107      	bne.n	8007310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0220 	mvn.w	r2, #32
 8007308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fcfd 	bl	8007d0a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732a:	2b01      	cmp	r3, #1
 800732c:	d101      	bne.n	8007332 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800732e:	2302      	movs	r3, #2
 8007330:	e0ac      	b.n	800748c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b0c      	cmp	r3, #12
 800733e:	f200 809f 	bhi.w	8007480 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007342:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	0800737d 	.word	0x0800737d
 800734c:	08007481 	.word	0x08007481
 8007350:	08007481 	.word	0x08007481
 8007354:	08007481 	.word	0x08007481
 8007358:	080073bd 	.word	0x080073bd
 800735c:	08007481 	.word	0x08007481
 8007360:	08007481 	.word	0x08007481
 8007364:	08007481 	.word	0x08007481
 8007368:	080073ff 	.word	0x080073ff
 800736c:	08007481 	.word	0x08007481
 8007370:	08007481 	.word	0x08007481
 8007374:	08007481 	.word	0x08007481
 8007378:	0800743f 	.word	0x0800743f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 f9d0 	bl	8007728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699a      	ldr	r2, [r3, #24]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 0208 	orr.w	r2, r2, #8
 8007396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0204 	bic.w	r2, r2, #4
 80073a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6999      	ldr	r1, [r3, #24]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	619a      	str	r2, [r3, #24]
      break;
 80073ba:	e062      	b.n	8007482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68b9      	ldr	r1, [r7, #8]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fa16 	bl	80077f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6999      	ldr	r1, [r3, #24]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	021a      	lsls	r2, r3, #8
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	619a      	str	r2, [r3, #24]
      break;
 80073fc:	e041      	b.n	8007482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fa5f 	bl	80078c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69da      	ldr	r2, [r3, #28]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0208 	orr.w	r2, r2, #8
 8007418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0204 	bic.w	r2, r2, #4
 8007428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69d9      	ldr	r1, [r3, #28]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	61da      	str	r2, [r3, #28]
      break;
 800743c:	e021      	b.n	8007482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68b9      	ldr	r1, [r7, #8]
 8007444:	4618      	mov	r0, r3
 8007446:	f000 faa9 	bl	800799c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69da      	ldr	r2, [r3, #28]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	021a      	lsls	r2, r3, #8
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	61da      	str	r2, [r3, #28]
      break;
 800747e:	e000      	b.n	8007482 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007480:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_TIM_ConfigClockSource+0x18>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e0b3      	b.n	8007614 <HAL_TIM_ConfigClockSource+0x180>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e4:	d03e      	beq.n	8007564 <HAL_TIM_ConfigClockSource+0xd0>
 80074e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ea:	f200 8087 	bhi.w	80075fc <HAL_TIM_ConfigClockSource+0x168>
 80074ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f2:	f000 8085 	beq.w	8007600 <HAL_TIM_ConfigClockSource+0x16c>
 80074f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074fa:	d87f      	bhi.n	80075fc <HAL_TIM_ConfigClockSource+0x168>
 80074fc:	2b70      	cmp	r3, #112	; 0x70
 80074fe:	d01a      	beq.n	8007536 <HAL_TIM_ConfigClockSource+0xa2>
 8007500:	2b70      	cmp	r3, #112	; 0x70
 8007502:	d87b      	bhi.n	80075fc <HAL_TIM_ConfigClockSource+0x168>
 8007504:	2b60      	cmp	r3, #96	; 0x60
 8007506:	d050      	beq.n	80075aa <HAL_TIM_ConfigClockSource+0x116>
 8007508:	2b60      	cmp	r3, #96	; 0x60
 800750a:	d877      	bhi.n	80075fc <HAL_TIM_ConfigClockSource+0x168>
 800750c:	2b50      	cmp	r3, #80	; 0x50
 800750e:	d03c      	beq.n	800758a <HAL_TIM_ConfigClockSource+0xf6>
 8007510:	2b50      	cmp	r3, #80	; 0x50
 8007512:	d873      	bhi.n	80075fc <HAL_TIM_ConfigClockSource+0x168>
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d058      	beq.n	80075ca <HAL_TIM_ConfigClockSource+0x136>
 8007518:	2b40      	cmp	r3, #64	; 0x40
 800751a:	d86f      	bhi.n	80075fc <HAL_TIM_ConfigClockSource+0x168>
 800751c:	2b30      	cmp	r3, #48	; 0x30
 800751e:	d064      	beq.n	80075ea <HAL_TIM_ConfigClockSource+0x156>
 8007520:	2b30      	cmp	r3, #48	; 0x30
 8007522:	d86b      	bhi.n	80075fc <HAL_TIM_ConfigClockSource+0x168>
 8007524:	2b20      	cmp	r3, #32
 8007526:	d060      	beq.n	80075ea <HAL_TIM_ConfigClockSource+0x156>
 8007528:	2b20      	cmp	r3, #32
 800752a:	d867      	bhi.n	80075fc <HAL_TIM_ConfigClockSource+0x168>
 800752c:	2b00      	cmp	r3, #0
 800752e:	d05c      	beq.n	80075ea <HAL_TIM_ConfigClockSource+0x156>
 8007530:	2b10      	cmp	r3, #16
 8007532:	d05a      	beq.n	80075ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007534:	e062      	b.n	80075fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6899      	ldr	r1, [r3, #8]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f000 faee 	bl	8007b26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007558:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	609a      	str	r2, [r3, #8]
      break;
 8007562:	e04e      	b.n	8007602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	6899      	ldr	r1, [r3, #8]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f000 fad7 	bl	8007b26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007586:	609a      	str	r2, [r3, #8]
      break;
 8007588:	e03b      	b.n	8007602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	6859      	ldr	r1, [r3, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	461a      	mov	r2, r3
 8007598:	f000 fa4e 	bl	8007a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2150      	movs	r1, #80	; 0x50
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 faa5 	bl	8007af2 <TIM_ITRx_SetConfig>
      break;
 80075a8:	e02b      	b.n	8007602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6818      	ldr	r0, [r3, #0]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	6859      	ldr	r1, [r3, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f000 fa6c 	bl	8007a94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2160      	movs	r1, #96	; 0x60
 80075c2:	4618      	mov	r0, r3
 80075c4:	f000 fa95 	bl	8007af2 <TIM_ITRx_SetConfig>
      break;
 80075c8:	e01b      	b.n	8007602 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	6859      	ldr	r1, [r3, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f000 fa2e 	bl	8007a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2140      	movs	r1, #64	; 0x40
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fa85 	bl	8007af2 <TIM_ITRx_SetConfig>
      break;
 80075e8:	e00b      	b.n	8007602 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4619      	mov	r1, r3
 80075f4:	4610      	mov	r0, r2
 80075f6:	f000 fa7c 	bl	8007af2 <TIM_ITRx_SetConfig>
        break;
 80075fa:	e002      	b.n	8007602 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007600:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr

0800762e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr

08007640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr

08007652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800765a:	bf00      	nop
 800765c:	370c      	adds	r7, #12
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a29      	ldr	r2, [pc, #164]	; (800771c <TIM_Base_SetConfig+0xb8>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d00b      	beq.n	8007694 <TIM_Base_SetConfig+0x30>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007682:	d007      	beq.n	8007694 <TIM_Base_SetConfig+0x30>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a26      	ldr	r2, [pc, #152]	; (8007720 <TIM_Base_SetConfig+0xbc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d003      	beq.n	8007694 <TIM_Base_SetConfig+0x30>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a25      	ldr	r2, [pc, #148]	; (8007724 <TIM_Base_SetConfig+0xc0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d108      	bne.n	80076a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a1c      	ldr	r2, [pc, #112]	; (800771c <TIM_Base_SetConfig+0xb8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00b      	beq.n	80076c6 <TIM_Base_SetConfig+0x62>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b4:	d007      	beq.n	80076c6 <TIM_Base_SetConfig+0x62>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a19      	ldr	r2, [pc, #100]	; (8007720 <TIM_Base_SetConfig+0xbc>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d003      	beq.n	80076c6 <TIM_Base_SetConfig+0x62>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a18      	ldr	r2, [pc, #96]	; (8007724 <TIM_Base_SetConfig+0xc0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d108      	bne.n	80076d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a07      	ldr	r2, [pc, #28]	; (800771c <TIM_Base_SetConfig+0xb8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d103      	bne.n	800770c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	691a      	ldr	r2, [r3, #16]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	615a      	str	r2, [r3, #20]
}
 8007712:	bf00      	nop
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr
 800771c:	40012c00 	.word	0x40012c00
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800

08007728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f023 0201 	bic.w	r2, r3, #1
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f023 0302 	bic.w	r3, r3, #2
 8007770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	4313      	orrs	r3, r2
 800777a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a1c      	ldr	r2, [pc, #112]	; (80077f0 <TIM_OC1_SetConfig+0xc8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d10c      	bne.n	800779e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f023 0308 	bic.w	r3, r3, #8
 800778a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f023 0304 	bic.w	r3, r3, #4
 800779c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a13      	ldr	r2, [pc, #76]	; (80077f0 <TIM_OC1_SetConfig+0xc8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d111      	bne.n	80077ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	699b      	ldr	r3, [r3, #24]
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	621a      	str	r2, [r3, #32]
}
 80077e4:	bf00      	nop
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	40012c00 	.word	0x40012c00

080077f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b087      	sub	sp, #28
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a1b      	ldr	r3, [r3, #32]
 8007802:	f023 0210 	bic.w	r2, r3, #16
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	4313      	orrs	r3, r2
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f023 0320 	bic.w	r3, r3, #32
 800783e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	011b      	lsls	r3, r3, #4
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a1d      	ldr	r2, [pc, #116]	; (80078c4 <TIM_OC2_SetConfig+0xd0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d10d      	bne.n	8007870 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800785a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800786e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a14      	ldr	r2, [pc, #80]	; (80078c4 <TIM_OC2_SetConfig+0xd0>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d113      	bne.n	80078a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800787e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	4313      	orrs	r3, r2
 800789e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	621a      	str	r2, [r3, #32]
}
 80078ba:	bf00      	nop
 80078bc:	371c      	adds	r7, #28
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr
 80078c4:	40012c00 	.word	0x40012c00

080078c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0303 	bic.w	r3, r3, #3
 80078fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	4313      	orrs	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	4313      	orrs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a1d      	ldr	r2, [pc, #116]	; (8007998 <TIM_OC3_SetConfig+0xd0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d10d      	bne.n	8007942 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800792c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a14      	ldr	r2, [pc, #80]	; (8007998 <TIM_OC3_SetConfig+0xd0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d113      	bne.n	8007972 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	4313      	orrs	r3, r2
 8007970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	621a      	str	r2, [r3, #32]
}
 800798c:	bf00      	nop
 800798e:	371c      	adds	r7, #28
 8007990:	46bd      	mov	sp, r7
 8007992:	bc80      	pop	{r7}
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	40012c00 	.word	0x40012c00

0800799c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	031b      	lsls	r3, r3, #12
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a0f      	ldr	r2, [pc, #60]	; (8007a34 <TIM_OC4_SetConfig+0x98>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d109      	bne.n	8007a10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	019b      	lsls	r3, r3, #6
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	621a      	str	r2, [r3, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr
 8007a34:	40012c00 	.word	0x40012c00

08007a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	f023 0201 	bic.w	r2, r3, #1
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f023 030a 	bic.w	r3, r3, #10
 8007a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	621a      	str	r2, [r3, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr

08007a94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	f023 0210 	bic.w	r2, r3, #16
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007abe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	031b      	lsls	r3, r3, #12
 8007ac4:	697a      	ldr	r2, [r7, #20]
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ad0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	621a      	str	r2, [r3, #32]
}
 8007ae8:	bf00      	nop
 8007aea:	371c      	adds	r7, #28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b085      	sub	sp, #20
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	f043 0307 	orr.w	r3, r3, #7
 8007b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	609a      	str	r2, [r3, #8]
}
 8007b1c:	bf00      	nop
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr

08007b26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b087      	sub	sp, #28
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	607a      	str	r2, [r7, #4]
 8007b32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	021a      	lsls	r2, r3, #8
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	609a      	str	r2, [r3, #8]
}
 8007b5a:	bf00      	nop
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr

08007b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b087      	sub	sp, #28
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	2201      	movs	r2, #1
 8007b78:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6a1a      	ldr	r2, [r3, #32]
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	43db      	mvns	r3, r3
 8007b86:	401a      	ands	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a1a      	ldr	r2, [r3, #32]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	f003 031f 	and.w	r3, r3, #31
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	621a      	str	r2, [r3, #32]
}
 8007ba2:	bf00      	nop
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr

08007bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e046      	b.n	8007c52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a16      	ldr	r2, [pc, #88]	; (8007c5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d00e      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c10:	d009      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a12      	ldr	r2, [pc, #72]	; (8007c60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d004      	beq.n	8007c26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a10      	ldr	r2, [pc, #64]	; (8007c64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d10c      	bne.n	8007c40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bc80      	pop	{r7}
 8007c5a:	4770      	bx	lr
 8007c5c:	40012c00 	.word	0x40012c00
 8007c60:	40000400 	.word	0x40000400
 8007c64:	40000800 	.word	0x40000800

08007c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e03d      	b.n	8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc80      	pop	{r7}
 8007d08:	4770      	bx	lr

08007d0a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b083      	sub	sp, #12
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bc80      	pop	{r7}
 8007d2c:	4770      	bx	lr

08007d2e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007d2e:	b084      	sub	sp, #16
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	f107 0014 	add.w	r0, r7, #20
 8007d3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	b004      	add	sp, #16
 8007d4c:	4770      	bx	lr

08007d4e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d5e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d62:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr

08007d7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007d82:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007d86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	43db      	mvns	r3, r3
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	4013      	ands	r3, r2
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr

08007dae <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr

08007dc6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	f107 0014 	add.w	r0, r7, #20
 8007dd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	b004      	add	sp, #16
 8007e04:	4770      	bx	lr
	...

08007e08 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b09b      	sub	sp, #108	; 0x6c
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	78db      	ldrb	r3, [r3, #3]
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d81f      	bhi.n	8007e7a <USB_ActivateEndpoint+0x72>
 8007e3a:	a201      	add	r2, pc, #4	; (adr r2, 8007e40 <USB_ActivateEndpoint+0x38>)
 8007e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e40:	08007e51 	.word	0x08007e51
 8007e44:	08007e6d 	.word	0x08007e6d
 8007e48:	08007e83 	.word	0x08007e83
 8007e4c:	08007e5f 	.word	0x08007e5f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007e50:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e58:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e5c:	e012      	b.n	8007e84 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007e5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e62:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007e66:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e6a:	e00b      	b.n	8007e84 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007e6c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007e78:	e004      	b.n	8007e84 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007e80:	e000      	b.n	8007e84 <USB_ActivateEndpoint+0x7c>
      break;
 8007e82:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	441a      	add	r2, r3
 8007e8e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007e92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	441a      	add	r2, r3
 8007ed4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	7b1b      	ldrb	r3, [r3, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f040 8149 	bne.w	8008188 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 8084 	beq.w	8008008 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	4413      	add	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	011a      	lsls	r2, r3, #4
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f22:	613b      	str	r3, [r7, #16]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	88db      	ldrh	r3, [r3, #6]
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	81fb      	strh	r3, [r7, #14]
 8007f42:	89fb      	ldrh	r3, [r7, #14]
 8007f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01b      	beq.n	8007f84 <USB_ActivateEndpoint+0x17c>
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f62:	81bb      	strh	r3, [r7, #12]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	441a      	add	r2, r3
 8007f6e:	89bb      	ldrh	r3, [r7, #12]
 8007f70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	78db      	ldrb	r3, [r3, #3]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d020      	beq.n	8007fce <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fa2:	813b      	strh	r3, [r7, #8]
 8007fa4:	893b      	ldrh	r3, [r7, #8]
 8007fa6:	f083 0320 	eor.w	r3, r3, #32
 8007faa:	813b      	strh	r3, [r7, #8]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	441a      	add	r2, r3
 8007fb6:	893b      	ldrh	r3, [r7, #8]
 8007fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	8013      	strh	r3, [r2, #0]
 8007fcc:	e27f      	b.n	80084ce <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe4:	817b      	strh	r3, [r7, #10]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	441a      	add	r2, r3
 8007ff0:	897b      	ldrh	r3, [r7, #10]
 8007ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008002:	b29b      	uxth	r3, r3
 8008004:	8013      	strh	r3, [r2, #0]
 8008006:	e262      	b.n	80084ce <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008012:	b29b      	uxth	r3, r3
 8008014:	461a      	mov	r2, r3
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	4413      	add	r3, r2
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	011a      	lsls	r2, r3, #4
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	4413      	add	r3, r2
 8008026:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	88db      	ldrh	r3, [r3, #6]
 8008030:	085b      	lsrs	r3, r3, #1
 8008032:	b29b      	uxth	r3, r3
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	b29a      	uxth	r2, r3
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008046:	b29b      	uxth	r3, r3
 8008048:	461a      	mov	r2, r3
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	4413      	add	r3, r2
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	011a      	lsls	r2, r3, #4
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	4413      	add	r3, r2
 800805a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800805e:	623b      	str	r3, [r7, #32]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d112      	bne.n	800808e <USB_ActivateEndpoint+0x286>
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008072:	b29a      	uxth	r2, r3
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	801a      	strh	r2, [r3, #0]
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	b29b      	uxth	r3, r3
 800807e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008086:	b29a      	uxth	r2, r3
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	801a      	strh	r2, [r3, #0]
 800808c:	e02f      	b.n	80080ee <USB_ActivateEndpoint+0x2e6>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b3e      	cmp	r3, #62	; 0x3e
 8008094:	d813      	bhi.n	80080be <USB_ActivateEndpoint+0x2b6>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	085b      	lsrs	r3, r3, #1
 800809c:	663b      	str	r3, [r7, #96]	; 0x60
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <USB_ActivateEndpoint+0x2a8>
 80080aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080ac:	3301      	adds	r3, #1
 80080ae:	663b      	str	r3, [r7, #96]	; 0x60
 80080b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	029b      	lsls	r3, r3, #10
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	801a      	strh	r2, [r3, #0]
 80080bc:	e017      	b.n	80080ee <USB_ActivateEndpoint+0x2e6>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	095b      	lsrs	r3, r3, #5
 80080c4:	663b      	str	r3, [r7, #96]	; 0x60
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 031f 	and.w	r3, r3, #31
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d102      	bne.n	80080d8 <USB_ActivateEndpoint+0x2d0>
 80080d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080d4:	3b01      	subs	r3, #1
 80080d6:	663b      	str	r3, [r7, #96]	; 0x60
 80080d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080da:	b29b      	uxth	r3, r3
 80080dc:	029b      	lsls	r3, r3, #10
 80080de:	b29b      	uxth	r3, r3
 80080e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	83fb      	strh	r3, [r7, #30]
 80080fc:	8bfb      	ldrh	r3, [r7, #30]
 80080fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d01b      	beq.n	800813e <USB_ActivateEndpoint+0x336>
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811c:	83bb      	strh	r3, [r7, #28]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	441a      	add	r2, r3
 8008128:	8bbb      	ldrh	r3, [r7, #28]
 800812a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813a:	b29b      	uxth	r3, r3
 800813c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	b29b      	uxth	r3, r3
 800814c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008154:	837b      	strh	r3, [r7, #26]
 8008156:	8b7b      	ldrh	r3, [r7, #26]
 8008158:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800815c:	837b      	strh	r3, [r7, #26]
 800815e:	8b7b      	ldrh	r3, [r7, #26]
 8008160:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008164:	837b      	strh	r3, [r7, #26]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	441a      	add	r2, r3
 8008170:	8b7b      	ldrh	r3, [r7, #26]
 8008172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800817a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800817e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008182:	b29b      	uxth	r3, r3
 8008184:	8013      	strh	r3, [r2, #0]
 8008186:	e1a2      	b.n	80084ce <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	881b      	ldrh	r3, [r3, #0]
 8008194:	b29b      	uxth	r3, r3
 8008196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	441a      	add	r2, r3
 80081ac:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80081b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80081bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081d4:	4413      	add	r3, r2
 80081d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	011a      	lsls	r2, r3, #4
 80081de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081e6:	657b      	str	r3, [r7, #84]	; 0x54
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	891b      	ldrh	r3, [r3, #8]
 80081ec:	085b      	lsrs	r3, r3, #1
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081f6:	801a      	strh	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	653b      	str	r3, [r7, #80]	; 0x50
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008202:	b29b      	uxth	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008208:	4413      	add	r3, r2
 800820a:	653b      	str	r3, [r7, #80]	; 0x50
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	011a      	lsls	r2, r3, #4
 8008212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008214:	4413      	add	r3, r2
 8008216:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800821a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	895b      	ldrh	r3, [r3, #10]
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	b29b      	uxth	r3, r3
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	b29a      	uxth	r2, r3
 8008228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f040 8091 	bne.w	8008358 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008244:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d01b      	beq.n	8008286 <USB_ActivateEndpoint+0x47e>
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008264:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	441a      	add	r2, r3
 8008270:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800827a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800827e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008282:	b29b      	uxth	r3, r3
 8008284:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	873b      	strh	r3, [r7, #56]	; 0x38
 8008294:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829a:	2b00      	cmp	r3, #0
 800829c:	d01b      	beq.n	80082d6 <USB_ActivateEndpoint+0x4ce>
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	441a      	add	r2, r3
 80082c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ec:	86bb      	strh	r3, [r7, #52]	; 0x34
 80082ee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80082f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80082f4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80082f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80082f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	441a      	add	r2, r3
 8008308:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800830a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800830e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800831a:	b29b      	uxth	r3, r3
 800831c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	b29b      	uxth	r3, r3
 800832c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008334:	867b      	strh	r3, [r7, #50]	; 0x32
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	441a      	add	r2, r3
 8008340:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800834a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800834e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008352:	b29b      	uxth	r3, r3
 8008354:	8013      	strh	r3, [r2, #0]
 8008356:	e0ba      	b.n	80084ce <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008368:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800836c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d01d      	beq.n	80083b0 <USB_ActivateEndpoint+0x5a8>
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	441a      	add	r2, r3
 8008398:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800839c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	881b      	ldrh	r3, [r3, #0]
 80083bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80083c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01d      	beq.n	8008408 <USB_ActivateEndpoint+0x600>
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	441a      	add	r2, r3
 80083f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80083f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008400:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008404:	b29b      	uxth	r3, r3
 8008406:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	78db      	ldrb	r3, [r3, #3]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d024      	beq.n	800845a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008426:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800842a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800842e:	f083 0320 	eor.w	r3, r3, #32
 8008432:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	441a      	add	r2, r3
 8008440:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800844c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008454:	b29b      	uxth	r3, r3
 8008456:	8013      	strh	r3, [r2, #0]
 8008458:	e01d      	b.n	8008496 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	b29b      	uxth	r3, r3
 8008468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800846c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008470:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	441a      	add	r2, r3
 800847e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800848a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800848e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008492:	b29b      	uxth	r3, r3
 8008494:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	441a      	add	r2, r3
 80084b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80084ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	376c      	adds	r7, #108	; 0x6c
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr

080084dc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084dc:	b480      	push	{r7}
 80084de:	b08d      	sub	sp, #52	; 0x34
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	7b1b      	ldrb	r3, [r3, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f040 808e 	bne.w	800860c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d044      	beq.n	8008582 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	81bb      	strh	r3, [r7, #12]
 8008506:	89bb      	ldrh	r3, [r7, #12]
 8008508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01b      	beq.n	8008548 <USB_DeactivateEndpoint+0x6c>
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	4413      	add	r3, r2
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008526:	817b      	strh	r3, [r7, #10]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	441a      	add	r2, r3
 8008532:	897b      	ldrh	r3, [r7, #10]
 8008534:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008538:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800853c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008540:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008544:	b29b      	uxth	r3, r3
 8008546:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800855e:	813b      	strh	r3, [r7, #8]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	441a      	add	r2, r3
 800856a:	893b      	ldrh	r3, [r7, #8]
 800856c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008570:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008574:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800857c:	b29b      	uxth	r3, r3
 800857e:	8013      	strh	r3, [r2, #0]
 8008580:	e192      	b.n	80088a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	881b      	ldrh	r3, [r3, #0]
 800858e:	827b      	strh	r3, [r7, #18]
 8008590:	8a7b      	ldrh	r3, [r7, #18]
 8008592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01b      	beq.n	80085d2 <USB_DeactivateEndpoint+0xf6>
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b0:	823b      	strh	r3, [r7, #16]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	441a      	add	r2, r3
 80085bc:	8a3b      	ldrh	r3, [r7, #16]
 80085be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e8:	81fb      	strh	r3, [r7, #14]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	441a      	add	r2, r3
 80085f4:	89fb      	ldrh	r3, [r7, #14]
 80085f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008606:	b29b      	uxth	r3, r3
 8008608:	8013      	strh	r3, [r2, #0]
 800860a:	e14d      	b.n	80088a8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	785b      	ldrb	r3, [r3, #1]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f040 80a5 	bne.w	8008760 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	843b      	strh	r3, [r7, #32]
 8008624:	8c3b      	ldrh	r3, [r7, #32]
 8008626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01b      	beq.n	8008666 <USB_DeactivateEndpoint+0x18a>
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008644:	83fb      	strh	r3, [r7, #30]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	441a      	add	r2, r3
 8008650:	8bfb      	ldrh	r3, [r7, #30]
 8008652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800865e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008662:	b29b      	uxth	r3, r3
 8008664:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	83bb      	strh	r3, [r7, #28]
 8008674:	8bbb      	ldrh	r3, [r7, #28]
 8008676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d01b      	beq.n	80086b6 <USB_DeactivateEndpoint+0x1da>
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	4413      	add	r3, r2
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	b29b      	uxth	r3, r3
 800868c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008694:	837b      	strh	r3, [r7, #26]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	441a      	add	r2, r3
 80086a0:	8b7b      	ldrh	r3, [r7, #26]
 80086a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086cc:	833b      	strh	r3, [r7, #24]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	441a      	add	r2, r3
 80086d8:	8b3b      	ldrh	r3, [r7, #24]
 80086da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008704:	82fb      	strh	r3, [r7, #22]
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	441a      	add	r2, r3
 8008710:	8afb      	ldrh	r3, [r7, #22]
 8008712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800871a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800871e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008722:	b29b      	uxth	r3, r3
 8008724:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	b29b      	uxth	r3, r3
 8008734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800873c:	82bb      	strh	r3, [r7, #20]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	441a      	add	r2, r3
 8008748:	8abb      	ldrh	r3, [r7, #20]
 800874a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875a:	b29b      	uxth	r3, r3
 800875c:	8013      	strh	r3, [r2, #0]
 800875e:	e0a3      	b.n	80088a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800876e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01b      	beq.n	80087b0 <USB_DeactivateEndpoint+0x2d4>
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	881b      	ldrh	r3, [r3, #0]
 8008784:	b29b      	uxth	r3, r3
 8008786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	441a      	add	r2, r3
 800879a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800879c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80087be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80087c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01b      	beq.n	8008800 <USB_DeactivateEndpoint+0x324>
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	881b      	ldrh	r3, [r3, #0]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	853b      	strh	r3, [r7, #40]	; 0x28
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	441a      	add	r2, r3
 80087ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	4413      	add	r3, r2
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	b29b      	uxth	r3, r3
 800880e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008816:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	441a      	add	r2, r3
 8008822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800882c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008834:	b29b      	uxth	r3, r3
 8008836:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800884a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800884e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	441a      	add	r2, r3
 800885a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800885c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800886c:	b29b      	uxth	r3, r3
 800886e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008886:	847b      	strh	r3, [r7, #34]	; 0x22
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	441a      	add	r2, r3
 8008892:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800889c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3734      	adds	r7, #52	; 0x34
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bc80      	pop	{r7}
 80088b2:	4770      	bx	lr

080088b4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b0cc      	sub	sp, #304	; 0x130
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088c2:	6018      	str	r0, [r3, #0]
 80088c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088cc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	f041 817d 	bne.w	8009bda <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80088e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	699a      	ldr	r2, [r3, #24]
 80088ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d908      	bls.n	800890e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80088fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800890c:	e007      	b.n	800891e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800890e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800891e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	7b1b      	ldrb	r3, [r3, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d152      	bne.n	80089d4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800892e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6959      	ldr	r1, [r3, #20]
 800893a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800893e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	88da      	ldrh	r2, [r3, #6]
 8008946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800894a:	b29b      	uxth	r3, r3
 800894c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008950:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008954:	6800      	ldr	r0, [r0, #0]
 8008956:	f001 ff23 	bl	800a7a0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800895a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800895e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008962:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008966:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008972:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800897c:	b29b      	uxth	r3, r3
 800897e:	4619      	mov	r1, r3
 8008980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008984:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008988:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800898c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	440a      	add	r2, r1
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800899a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	011a      	lsls	r2, r3, #4
 80089a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4413      	add	r3, r2
 80089b0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80089b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	801a      	strh	r2, [r3, #0]
 80089d0:	f001 b8b5 	b.w	8009b3e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80089d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	78db      	ldrb	r3, [r3, #3]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	f040 84c6 	bne.w	8009372 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80089e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6a1a      	ldr	r2, [r3, #32]
 80089f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	f240 8443 	bls.w	800928a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a2a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	441a      	add	r2, r3
 8008a48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a54:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6a1a      	ldr	r2, [r3, #32]
 8008a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a70:	1ad2      	subs	r2, r2, r3
 8008a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4413      	add	r3, r2
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 823e 	beq.w	8008f22 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aaa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008aae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ab2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	785b      	ldrb	r3, [r3, #1]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f040 809a 	bne.w	8008c00 <USB_EPStartXfer+0x34c>
 8008acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ad8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008adc:	6812      	ldr	r2, [r2, #0]
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	4619      	mov	r1, r3
 8008af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008afa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008afe:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008b02:	6812      	ldr	r2, [r2, #0]
 8008b04:	440a      	add	r2, r1
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	011a      	lsls	r2, r3, #4
 8008b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4413      	add	r3, r2
 8008b22:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d122      	bne.n	8008b7e <USB_EPStartXfer+0x2ca>
 8008b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	801a      	strh	r2, [r3, #0]
 8008b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	801a      	strh	r2, [r3, #0]
 8008b7c:	e079      	b.n	8008c72 <USB_EPStartXfer+0x3be>
 8008b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b82:	2b3e      	cmp	r3, #62	; 0x3e
 8008b84:	d81b      	bhi.n	8008bbe <USB_EPStartXfer+0x30a>
 8008b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b8a:	085b      	lsrs	r3, r3, #1
 8008b8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d004      	beq.n	8008ba6 <USB_EPStartXfer+0x2f2>
 8008b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ba6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	029b      	lsls	r3, r3, #10
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	801a      	strh	r2, [r3, #0]
 8008bbc:	e059      	b.n	8008c72 <USB_EPStartXfer+0x3be>
 8008bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bc2:	095b      	lsrs	r3, r3, #5
 8008bc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bcc:	f003 031f 	and.w	r3, r3, #31
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d104      	bne.n	8008bde <USB_EPStartXfer+0x32a>
 8008bd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008bde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	029b      	lsls	r3, r3, #10
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	801a      	strh	r2, [r3, #0]
 8008bfe:	e038      	b.n	8008c72 <USB_EPStartXfer+0x3be>
 8008c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	785b      	ldrb	r3, [r3, #1]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d130      	bne.n	8008c72 <USB_EPStartXfer+0x3be>
 8008c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	4619      	mov	r1, r3
 8008c22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c26:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008c2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c2e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8008c32:	6812      	ldr	r2, [r2, #0]
 8008c34:	440a      	add	r2, r1
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	011a      	lsls	r2, r3, #4
 8008c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c4a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4413      	add	r3, r2
 8008c52:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	895b      	ldrh	r3, [r3, #10]
 8008c7e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6959      	ldr	r1, [r3, #20]
 8008c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c98:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008c9c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008ca0:	6800      	ldr	r0, [r0, #0]
 8008ca2:	f001 fd7d 	bl	800a7a0 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	695a      	ldr	r2, [r3, #20]
 8008cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb6:	441a      	add	r2, r3
 8008cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	6a1a      	ldr	r2, [r3, #32]
 8008cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d90f      	bls.n	8008d00 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6a1a      	ldr	r2, [r3, #32]
 8008cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cf0:	1ad2      	subs	r2, r2, r3
 8008cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	621a      	str	r2, [r3, #32]
 8008cfe:	e00e      	b.n	8008d1e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f040 809a 	bne.w	8008e64 <USB_EPStartXfer+0x5b0>
 8008d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d3c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d40:	6812      	ldr	r2, [r2, #0]
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	4619      	mov	r1, r3
 8008d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d62:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008d66:	6812      	ldr	r2, [r2, #0]
 8008d68:	440a      	add	r2, r1
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	011a      	lsls	r2, r3, #4
 8008d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d7e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4413      	add	r3, r2
 8008d86:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d122      	bne.n	8008de2 <USB_EPStartXfer+0x52e>
 8008d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008db4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	801a      	strh	r2, [r3, #0]
 8008dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	e083      	b.n	8008eea <USB_EPStartXfer+0x636>
 8008de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008de6:	2b3e      	cmp	r3, #62	; 0x3e
 8008de8:	d81b      	bhi.n	8008e22 <USB_EPStartXfer+0x56e>
 8008dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dee:	085b      	lsrs	r3, r3, #1
 8008df0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df8:	f003 0301 	and.w	r3, r3, #1
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d004      	beq.n	8008e0a <USB_EPStartXfer+0x556>
 8008e00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e04:	3301      	adds	r3, #1
 8008e06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	029b      	lsls	r3, r3, #10
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	801a      	strh	r2, [r3, #0]
 8008e20:	e063      	b.n	8008eea <USB_EPStartXfer+0x636>
 8008e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e26:	095b      	lsrs	r3, r3, #5
 8008e28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e30:	f003 031f 	and.w	r3, r3, #31
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d104      	bne.n	8008e42 <USB_EPStartXfer+0x58e>
 8008e38:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008e42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	029b      	lsls	r3, r3, #10
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	801a      	strh	r2, [r3, #0]
 8008e62:	e042      	b.n	8008eea <USB_EPStartXfer+0x636>
 8008e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	785b      	ldrb	r3, [r3, #1]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d13a      	bne.n	8008eea <USB_EPStartXfer+0x636>
 8008e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e78:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008e7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e80:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008e84:	6812      	ldr	r2, [r2, #0]
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	4619      	mov	r1, r3
 8008e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e9e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008ea2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ea6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8008eaa:	6812      	ldr	r2, [r2, #0]
 8008eac:	440a      	add	r2, r1
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	011a      	lsls	r2, r3, #4
 8008ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	891b      	ldrh	r3, [r3, #8]
 8008ef6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6959      	ldr	r1, [r3, #20]
 8008f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008f10:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008f14:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008f18:	6800      	ldr	r0, [r0, #0]
 8008f1a:	f001 fc41 	bl	800a7a0 <USB_WritePMA>
 8008f1e:	f000 be0e 	b.w	8009b3e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d16d      	bne.n	800900e <USB_EPStartXfer+0x75a>
 8008f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f52:	4413      	add	r3, r2
 8008f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	011a      	lsls	r2, r3, #4
 8008f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f66:	4413      	add	r3, r2
 8008f68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8008f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d112      	bne.n	8008f9c <USB_EPStartXfer+0x6e8>
 8008f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f84:	801a      	strh	r2, [r3, #0]
 8008f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f98:	801a      	strh	r2, [r3, #0]
 8008f9a:	e063      	b.n	8009064 <USB_EPStartXfer+0x7b0>
 8008f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa0:	2b3e      	cmp	r3, #62	; 0x3e
 8008fa2:	d817      	bhi.n	8008fd4 <USB_EPStartXfer+0x720>
 8008fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa8:	085b      	lsrs	r3, r3, #1
 8008faa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d004      	beq.n	8008fc4 <USB_EPStartXfer+0x710>
 8008fba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008fc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	029b      	lsls	r3, r3, #10
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fd0:	801a      	strh	r2, [r3, #0]
 8008fd2:	e047      	b.n	8009064 <USB_EPStartXfer+0x7b0>
 8008fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fd8:	095b      	lsrs	r3, r3, #5
 8008fda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe2:	f003 031f 	and.w	r3, r3, #31
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d104      	bne.n	8008ff4 <USB_EPStartXfer+0x740>
 8008fea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	029b      	lsls	r3, r3, #10
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009006:	b29a      	uxth	r2, r3
 8009008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800900a:	801a      	strh	r2, [r3, #0]
 800900c:	e02a      	b.n	8009064 <USB_EPStartXfer+0x7b0>
 800900e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	785b      	ldrb	r3, [r3, #1]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d122      	bne.n	8009064 <USB_EPStartXfer+0x7b0>
 800901e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	653b      	str	r3, [r7, #80]	; 0x50
 800902a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800902e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009038:	b29b      	uxth	r3, r3
 800903a:	461a      	mov	r2, r3
 800903c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800903e:	4413      	add	r3, r2
 8009040:	653b      	str	r3, [r7, #80]	; 0x50
 8009042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	011a      	lsls	r2, r3, #4
 8009050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009052:	4413      	add	r3, r2
 8009054:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009058:	64fb      	str	r3, [r7, #76]	; 0x4c
 800905a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800905e:	b29a      	uxth	r2, r3
 8009060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009062:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	891b      	ldrh	r3, [r3, #8]
 8009070:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6959      	ldr	r1, [r3, #20]
 8009080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009084:	b29b      	uxth	r3, r3
 8009086:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800908a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800908e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009092:	6800      	ldr	r0, [r0, #0]
 8009094:	f001 fb84 	bl	800a7a0 <USB_WritePMA>
            ep->xfer_buff += len;
 8009098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	695a      	ldr	r2, [r3, #20]
 80090a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a8:	441a      	add	r2, r3
 80090aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80090b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6a1a      	ldr	r2, [r3, #32]
 80090c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d90f      	bls.n	80090f2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80090d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6a1a      	ldr	r2, [r3, #32]
 80090de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e2:	1ad2      	subs	r2, r2, r3
 80090e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	621a      	str	r2, [r3, #32]
 80090f0:	e00e      	b.n	8009110 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80090f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2200      	movs	r2, #0
 800910e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009114:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	643b      	str	r3, [r7, #64]	; 0x40
 800911c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	785b      	ldrb	r3, [r3, #1]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d16d      	bne.n	8009208 <USB_EPStartXfer+0x954>
 800912c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	63bb      	str	r3, [r7, #56]	; 0x38
 8009138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800913c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009146:	b29b      	uxth	r3, r3
 8009148:	461a      	mov	r2, r3
 800914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914c:	4413      	add	r3, r2
 800914e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	011a      	lsls	r2, r3, #4
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	4413      	add	r3, r2
 8009162:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009166:	637b      	str	r3, [r7, #52]	; 0x34
 8009168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d112      	bne.n	8009196 <USB_EPStartXfer+0x8e2>
 8009170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	b29b      	uxth	r3, r3
 8009176:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800917a:	b29a      	uxth	r2, r3
 800917c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917e:	801a      	strh	r2, [r3, #0]
 8009180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	b29b      	uxth	r3, r3
 8009186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800918a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800918e:	b29a      	uxth	r2, r3
 8009190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009192:	801a      	strh	r2, [r3, #0]
 8009194:	e05d      	b.n	8009252 <USB_EPStartXfer+0x99e>
 8009196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919a:	2b3e      	cmp	r3, #62	; 0x3e
 800919c:	d817      	bhi.n	80091ce <USB_EPStartXfer+0x91a>
 800919e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a2:	085b      	lsrs	r3, r3, #1
 80091a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80091a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d004      	beq.n	80091be <USB_EPStartXfer+0x90a>
 80091b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091b8:	3301      	adds	r3, #1
 80091ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80091be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	029b      	lsls	r3, r3, #10
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ca:	801a      	strh	r2, [r3, #0]
 80091cc:	e041      	b.n	8009252 <USB_EPStartXfer+0x99e>
 80091ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091d2:	095b      	lsrs	r3, r3, #5
 80091d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80091d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091dc:	f003 031f 	and.w	r3, r3, #31
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d104      	bne.n	80091ee <USB_EPStartXfer+0x93a>
 80091e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091e8:	3b01      	subs	r3, #1
 80091ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80091ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	029b      	lsls	r3, r3, #10
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009200:	b29a      	uxth	r2, r3
 8009202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009204:	801a      	strh	r2, [r3, #0]
 8009206:	e024      	b.n	8009252 <USB_EPStartXfer+0x99e>
 8009208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800920c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d11c      	bne.n	8009252 <USB_EPStartXfer+0x99e>
 8009218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800921c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009226:	b29b      	uxth	r3, r3
 8009228:	461a      	mov	r2, r3
 800922a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800922c:	4413      	add	r3, r2
 800922e:	643b      	str	r3, [r7, #64]	; 0x40
 8009230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	011a      	lsls	r2, r3, #4
 800923e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009240:	4413      	add	r3, r2
 8009242:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800924c:	b29a      	uxth	r2, r3
 800924e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009250:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	895b      	ldrh	r3, [r3, #10]
 800925e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6959      	ldr	r1, [r3, #20]
 800926e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009272:	b29b      	uxth	r3, r3
 8009274:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009278:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800927c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009280:	6800      	ldr	r0, [r0, #0]
 8009282:	f001 fa8d 	bl	800a7a0 <USB_WritePMA>
 8009286:	f000 bc5a 	b.w	8009b3e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800928a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800929a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800929e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80092bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092c0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80092c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	441a      	add	r2, r3
 80092de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80092e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80092f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009306:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009310:	b29b      	uxth	r3, r3
 8009312:	461a      	mov	r2, r3
 8009314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009316:	4413      	add	r3, r2
 8009318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800931a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	011a      	lsls	r2, r3, #4
 8009328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800932a:	4413      	add	r3, r2
 800932c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009330:	65bb      	str	r3, [r7, #88]	; 0x58
 8009332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009336:	b29a      	uxth	r2, r3
 8009338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800933a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800933c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	891b      	ldrh	r3, [r3, #8]
 8009348:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800934c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6959      	ldr	r1, [r3, #20]
 8009358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800935c:	b29b      	uxth	r3, r3
 800935e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009362:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009366:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	f001 fa18 	bl	800a7a0 <USB_WritePMA>
 8009370:	e3e5      	b.n	8009b3e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009376:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	b29b      	uxth	r3, r3
 8009390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009398:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800939c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	441a      	add	r2, r3
 80093b6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80093ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80093c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80093ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6a1a      	ldr	r2, [r3, #32]
 80093da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093de:	1ad2      	subs	r2, r2, r3
 80093e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80093ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4413      	add	r3, r2
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	b29b      	uxth	r3, r3
 800940a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 81bc 	beq.w	800978c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	785b      	ldrb	r3, [r3, #1]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d16d      	bne.n	800950e <USB_EPStartXfer+0xc5a>
 8009432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	67bb      	str	r3, [r7, #120]	; 0x78
 800943e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800944c:	b29b      	uxth	r3, r3
 800944e:	461a      	mov	r2, r3
 8009450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009452:	4413      	add	r3, r2
 8009454:	67bb      	str	r3, [r7, #120]	; 0x78
 8009456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800945a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	011a      	lsls	r2, r3, #4
 8009464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009466:	4413      	add	r3, r2
 8009468:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800946c:	677b      	str	r3, [r7, #116]	; 0x74
 800946e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d112      	bne.n	800949c <USB_EPStartXfer+0xbe8>
 8009476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	b29b      	uxth	r3, r3
 800947c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009480:	b29a      	uxth	r2, r3
 8009482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009484:	801a      	strh	r2, [r3, #0]
 8009486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	b29b      	uxth	r3, r3
 800948c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009494:	b29a      	uxth	r2, r3
 8009496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009498:	801a      	strh	r2, [r3, #0]
 800949a:	e060      	b.n	800955e <USB_EPStartXfer+0xcaa>
 800949c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a0:	2b3e      	cmp	r3, #62	; 0x3e
 80094a2:	d817      	bhi.n	80094d4 <USB_EPStartXfer+0xc20>
 80094a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a8:	085b      	lsrs	r3, r3, #1
 80094aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d004      	beq.n	80094c4 <USB_EPStartXfer+0xc10>
 80094ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094be:	3301      	adds	r3, #1
 80094c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	029b      	lsls	r3, r3, #10
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d0:	801a      	strh	r2, [r3, #0]
 80094d2:	e044      	b.n	800955e <USB_EPStartXfer+0xcaa>
 80094d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d8:	095b      	lsrs	r3, r3, #5
 80094da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094e2:	f003 031f 	and.w	r3, r3, #31
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d104      	bne.n	80094f4 <USB_EPStartXfer+0xc40>
 80094ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094ee:	3b01      	subs	r3, #1
 80094f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80094f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	029b      	lsls	r3, r3, #10
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009506:	b29a      	uxth	r2, r3
 8009508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800950a:	801a      	strh	r2, [r3, #0]
 800950c:	e027      	b.n	800955e <USB_EPStartXfer+0xcaa>
 800950e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d11f      	bne.n	800955e <USB_EPStartXfer+0xcaa>
 800951e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009522:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800952c:	b29b      	uxth	r3, r3
 800952e:	461a      	mov	r2, r3
 8009530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009534:	4413      	add	r3, r2
 8009536:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800953a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800953e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	011a      	lsls	r2, r3, #4
 8009548:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800954c:	4413      	add	r3, r2
 800954e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009552:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009558:	b29a      	uxth	r2, r3
 800955a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800955c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800955e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	895b      	ldrh	r3, [r3, #10]
 800956a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800956e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6959      	ldr	r1, [r3, #20]
 800957a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800957e:	b29b      	uxth	r3, r3
 8009580:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009584:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009588:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800958c:	6800      	ldr	r0, [r0, #0]
 800958e:	f001 f907 	bl	800a7a0 <USB_WritePMA>
          ep->xfer_buff += len;
 8009592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	695a      	ldr	r2, [r3, #20]
 800959e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a2:	441a      	add	r2, r3
 80095a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80095b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6a1a      	ldr	r2, [r3, #32]
 80095bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d90f      	bls.n	80095ec <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80095cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6a1a      	ldr	r2, [r3, #32]
 80095d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095dc:	1ad2      	subs	r2, r2, r3
 80095de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	621a      	str	r2, [r3, #32]
 80095ea:	e00e      	b.n	800960a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80095ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80095fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2200      	movs	r2, #0
 8009608:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800960a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 8295 	beq.w	8009b3e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	785b      	ldrb	r3, [r3, #1]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d16d      	bne.n	8009700 <USB_EPStartXfer+0xe4c>
 8009624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800963e:	b29b      	uxth	r3, r3
 8009640:	461a      	mov	r2, r3
 8009642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009644:	4413      	add	r3, r2
 8009646:	66bb      	str	r3, [r7, #104]	; 0x68
 8009648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	011a      	lsls	r2, r3, #4
 8009656:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009658:	4413      	add	r3, r2
 800965a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800965e:	667b      	str	r3, [r7, #100]	; 0x64
 8009660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d112      	bne.n	800968e <USB_EPStartXfer+0xdda>
 8009668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	b29b      	uxth	r3, r3
 800966e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009672:	b29a      	uxth	r2, r3
 8009674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009676:	801a      	strh	r2, [r3, #0]
 8009678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	b29b      	uxth	r3, r3
 800967e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009686:	b29a      	uxth	r2, r3
 8009688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800968a:	801a      	strh	r2, [r3, #0]
 800968c:	e063      	b.n	8009756 <USB_EPStartXfer+0xea2>
 800968e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009692:	2b3e      	cmp	r3, #62	; 0x3e
 8009694:	d817      	bhi.n	80096c6 <USB_EPStartXfer+0xe12>
 8009696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800969a:	085b      	lsrs	r3, r3, #1
 800969c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d004      	beq.n	80096b6 <USB_EPStartXfer+0xe02>
 80096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b0:	3301      	adds	r3, #1
 80096b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	029b      	lsls	r3, r3, #10
 80096be:	b29a      	uxth	r2, r3
 80096c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096c2:	801a      	strh	r2, [r3, #0]
 80096c4:	e047      	b.n	8009756 <USB_EPStartXfer+0xea2>
 80096c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ca:	095b      	lsrs	r3, r3, #5
 80096cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d4:	f003 031f 	and.w	r3, r3, #31
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d104      	bne.n	80096e6 <USB_EPStartXfer+0xe32>
 80096dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e0:	3b01      	subs	r3, #1
 80096e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80096e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	029b      	lsls	r3, r3, #10
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096fc:	801a      	strh	r2, [r3, #0]
 80096fe:	e02a      	b.n	8009756 <USB_EPStartXfer+0xea2>
 8009700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	785b      	ldrb	r3, [r3, #1]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d122      	bne.n	8009756 <USB_EPStartXfer+0xea2>
 8009710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	673b      	str	r3, [r7, #112]	; 0x70
 800971c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009720:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800972a:	b29b      	uxth	r3, r3
 800972c:	461a      	mov	r2, r3
 800972e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009730:	4413      	add	r3, r2
 8009732:	673b      	str	r3, [r7, #112]	; 0x70
 8009734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	011a      	lsls	r2, r3, #4
 8009742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009744:	4413      	add	r3, r2
 8009746:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800974a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800974c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009750:	b29a      	uxth	r2, r3
 8009752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009754:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800975a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	891b      	ldrh	r3, [r3, #8]
 8009762:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800976a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6959      	ldr	r1, [r3, #20]
 8009772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009776:	b29b      	uxth	r3, r3
 8009778:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800977c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009780:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009784:	6800      	ldr	r0, [r0, #0]
 8009786:	f001 f80b 	bl	800a7a0 <USB_WritePMA>
 800978a:	e1d8      	b.n	8009b3e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800978c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	785b      	ldrb	r3, [r3, #1]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d178      	bne.n	800988e <USB_EPStartXfer+0xfda>
 800979c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	461a      	mov	r2, r3
 80097bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097c0:	4413      	add	r3, r2
 80097c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	011a      	lsls	r2, r3, #4
 80097d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097d8:	4413      	add	r3, r2
 80097da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d116      	bne.n	8009818 <USB_EPStartXfer+0xf64>
 80097ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097fc:	801a      	strh	r2, [r3, #0]
 80097fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	b29b      	uxth	r3, r3
 8009806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800980a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800980e:	b29a      	uxth	r2, r3
 8009810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009814:	801a      	strh	r2, [r3, #0]
 8009816:	e06b      	b.n	80098f0 <USB_EPStartXfer+0x103c>
 8009818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800981c:	2b3e      	cmp	r3, #62	; 0x3e
 800981e:	d818      	bhi.n	8009852 <USB_EPStartXfer+0xf9e>
 8009820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009824:	085b      	lsrs	r3, r3, #1
 8009826:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800982a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	d004      	beq.n	8009840 <USB_EPStartXfer+0xf8c>
 8009836:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800983a:	3301      	adds	r3, #1
 800983c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009840:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009844:	b29b      	uxth	r3, r3
 8009846:	029b      	lsls	r3, r3, #10
 8009848:	b29a      	uxth	r2, r3
 800984a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800984e:	801a      	strh	r2, [r3, #0]
 8009850:	e04e      	b.n	80098f0 <USB_EPStartXfer+0x103c>
 8009852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009856:	095b      	lsrs	r3, r3, #5
 8009858:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800985c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009860:	f003 031f 	and.w	r3, r3, #31
 8009864:	2b00      	cmp	r3, #0
 8009866:	d104      	bne.n	8009872 <USB_EPStartXfer+0xfbe>
 8009868:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800986c:	3b01      	subs	r3, #1
 800986e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009872:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009876:	b29b      	uxth	r3, r3
 8009878:	029b      	lsls	r3, r3, #10
 800987a:	b29b      	uxth	r3, r3
 800987c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009884:	b29a      	uxth	r2, r3
 8009886:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	e030      	b.n	80098f0 <USB_EPStartXfer+0x103c>
 800988e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	785b      	ldrb	r3, [r3, #1]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d128      	bne.n	80098f0 <USB_EPStartXfer+0x103c>
 800989e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80098ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	461a      	mov	r2, r3
 80098be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098c2:	4413      	add	r3, r2
 80098c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80098c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	011a      	lsls	r2, r3, #4
 80098d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098da:	4413      	add	r3, r2
 80098dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80098e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80098f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	891b      	ldrh	r3, [r3, #8]
 80098fc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6959      	ldr	r1, [r3, #20]
 800990c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009910:	b29b      	uxth	r3, r3
 8009912:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009916:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800991a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800991e:	6800      	ldr	r0, [r0, #0]
 8009920:	f000 ff3e 	bl	800a7a0 <USB_WritePMA>
          ep->xfer_buff += len;
 8009924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	695a      	ldr	r2, [r3, #20]
 8009930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009934:	441a      	add	r2, r3
 8009936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800993a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6a1a      	ldr	r2, [r3, #32]
 800994e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	429a      	cmp	r2, r3
 800995c:	d90f      	bls.n	800997e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800995e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6a1a      	ldr	r2, [r3, #32]
 800996a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800996e:	1ad2      	subs	r2, r2, r3
 8009970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	621a      	str	r2, [r3, #32]
 800997c:	e00e      	b.n	800999c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800997e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800998e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2200      	movs	r2, #0
 800999a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800999c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 80cc 	beq.w	8009b3e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80099a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80099b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	785b      	ldrb	r3, [r3, #1]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d178      	bne.n	8009ab6 <USB_EPStartXfer+0x1202>
 80099c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80099d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	461a      	mov	r2, r3
 80099e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099e8:	4413      	add	r3, r2
 80099ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80099ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	011a      	lsls	r2, r3, #4
 80099fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a00:	4413      	add	r3, r2
 8009a02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d116      	bne.n	8009a40 <USB_EPStartXfer+0x118c>
 8009a12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a16:	881b      	ldrh	r3, [r3, #0]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a24:	801a      	strh	r2, [r3, #0]
 8009a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a3c:	801a      	strh	r2, [r3, #0]
 8009a3e:	e064      	b.n	8009b0a <USB_EPStartXfer+0x1256>
 8009a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a44:	2b3e      	cmp	r3, #62	; 0x3e
 8009a46:	d818      	bhi.n	8009a7a <USB_EPStartXfer+0x11c6>
 8009a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a4c:	085b      	lsrs	r3, r3, #1
 8009a4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d004      	beq.n	8009a68 <USB_EPStartXfer+0x11b4>
 8009a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a62:	3301      	adds	r3, #1
 8009a64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	029b      	lsls	r3, r3, #10
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a76:	801a      	strh	r2, [r3, #0]
 8009a78:	e047      	b.n	8009b0a <USB_EPStartXfer+0x1256>
 8009a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a7e:	095b      	lsrs	r3, r3, #5
 8009a80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a88:	f003 031f 	and.w	r3, r3, #31
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d104      	bne.n	8009a9a <USB_EPStartXfer+0x11e6>
 8009a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a94:	3b01      	subs	r3, #1
 8009a96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	029b      	lsls	r3, r3, #10
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ab2:	801a      	strh	r2, [r3, #0]
 8009ab4:	e029      	b.n	8009b0a <USB_EPStartXfer+0x1256>
 8009ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	785b      	ldrb	r3, [r3, #1]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d121      	bne.n	8009b0a <USB_EPStartXfer+0x1256>
 8009ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009adc:	4413      	add	r3, r2
 8009ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	011a      	lsls	r2, r3, #4
 8009af0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009af4:	4413      	add	r3, r2
 8009af6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	895b      	ldrh	r3, [r3, #10]
 8009b16:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6959      	ldr	r1, [r3, #20]
 8009b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b30:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009b34:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009b38:	6800      	ldr	r0, [r0, #0]
 8009b3a:	f000 fe31 	bl	800a7a0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b60:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b6c:	8013      	strh	r3, [r2, #0]
 8009b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b72:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009b76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b7a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009b7e:	8812      	ldrh	r2, [r2, #0]
 8009b80:	f082 0210 	eor.w	r2, r2, #16
 8009b84:	801a      	strh	r2, [r3, #0]
 8009b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b8a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009b8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b92:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8009b96:	8812      	ldrh	r2, [r2, #0]
 8009b98:	f082 0220 	eor.w	r2, r2, #32
 8009b9c:	801a      	strh	r2, [r3, #0]
 8009b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ba2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	441a      	add	r2, r3
 8009bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bbc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	8013      	strh	r3, [r2, #0]
 8009bd6:	f000 bc9f 	b.w	800a518 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	7b1b      	ldrb	r3, [r3, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f040 80ae 	bne.w	8009d48 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	699a      	ldr	r2, [r3, #24]
 8009bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d917      	bls.n	8009c38 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8009c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8009c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	699a      	ldr	r2, [r3, #24]
 8009c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c28:	1ad2      	subs	r2, r2, r3
 8009c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	619a      	str	r2, [r3, #24]
 8009c36:	e00e      	b.n	8009c56 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8009c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8009c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2200      	movs	r2, #0
 8009c54:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	461a      	mov	r2, r3
 8009c76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	011a      	lsls	r2, r3, #4
 8009c8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c92:	4413      	add	r3, r2
 8009c94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d116      	bne.n	8009cd2 <USB_EPStartXfer+0x141e>
 8009ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	e3e8      	b.n	800a4a4 <USB_EPStartXfer+0x1bf0>
 8009cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd6:	2b3e      	cmp	r3, #62	; 0x3e
 8009cd8:	d818      	bhi.n	8009d0c <USB_EPStartXfer+0x1458>
 8009cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d004      	beq.n	8009cfa <USB_EPStartXfer+0x1446>
 8009cf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009cfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	029b      	lsls	r3, r3, #10
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d08:	801a      	strh	r2, [r3, #0]
 8009d0a:	e3cb      	b.n	800a4a4 <USB_EPStartXfer+0x1bf0>
 8009d0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d10:	095b      	lsrs	r3, r3, #5
 8009d12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d1a:	f003 031f 	and.w	r3, r3, #31
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d104      	bne.n	8009d2c <USB_EPStartXfer+0x1478>
 8009d22:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d26:	3b01      	subs	r3, #1
 8009d28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009d2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	029b      	lsls	r3, r3, #10
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d44:	801a      	strh	r2, [r3, #0]
 8009d46:	e3ad      	b.n	800a4a4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	78db      	ldrb	r3, [r3, #3]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	f040 8200 	bne.w	800a15a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	785b      	ldrb	r3, [r3, #1]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f040 8091 	bne.w	8009e8e <USB_EPStartXfer+0x15da>
 8009d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009d90:	4413      	add	r3, r2
 8009d92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	011a      	lsls	r2, r3, #4
 8009da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009da8:	4413      	add	r3, r2
 8009daa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009dae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d116      	bne.n	8009df0 <USB_EPStartXfer+0x153c>
 8009dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dd4:	801a      	strh	r2, [r3, #0]
 8009dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dec:	801a      	strh	r2, [r3, #0]
 8009dee:	e083      	b.n	8009ef8 <USB_EPStartXfer+0x1644>
 8009df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8009dfe:	d820      	bhi.n	8009e42 <USB_EPStartXfer+0x158e>
 8009e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	085b      	lsrs	r3, r3, #1
 8009e0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d004      	beq.n	8009e30 <USB_EPStartXfer+0x157c>
 8009e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	029b      	lsls	r3, r3, #10
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e3e:	801a      	strh	r2, [r3, #0]
 8009e40:	e05a      	b.n	8009ef8 <USB_EPStartXfer+0x1644>
 8009e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	095b      	lsrs	r3, r3, #5
 8009e50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	f003 031f 	and.w	r3, r3, #31
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d104      	bne.n	8009e72 <USB_EPStartXfer+0x15be>
 8009e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	029b      	lsls	r3, r3, #10
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009e8a:	801a      	strh	r2, [r3, #0]
 8009e8c:	e034      	b.n	8009ef8 <USB_EPStartXfer+0x1644>
 8009e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d12c      	bne.n	8009ef8 <USB_EPStartXfer+0x1644>
 8009e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	011a      	lsls	r2, r3, #4
 8009ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eda:	4413      	add	r3, r2
 8009edc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009ef6:	801a      	strh	r2, [r3, #0]
 8009ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f040 8091 	bne.w	800a03a <USB_EPStartXfer+0x1786>
 8009f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	461a      	mov	r2, r3
 8009f38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f3c:	4413      	add	r3, r2
 8009f3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	011a      	lsls	r2, r3, #4
 8009f50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009f54:	4413      	add	r3, r2
 8009f56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d116      	bne.n	8009f9c <USB_EPStartXfer+0x16e8>
 8009f6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f80:	801a      	strh	r2, [r3, #0]
 8009f82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009f98:	801a      	strh	r2, [r3, #0]
 8009f9a:	e07c      	b.n	800a096 <USB_EPStartXfer+0x17e2>
 8009f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8009faa:	d820      	bhi.n	8009fee <USB_EPStartXfer+0x173a>
 8009fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	085b      	lsrs	r3, r3, #1
 8009fba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f003 0301 	and.w	r3, r3, #1
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d004      	beq.n	8009fdc <USB_EPStartXfer+0x1728>
 8009fd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009fdc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	029b      	lsls	r3, r3, #10
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fea:	801a      	strh	r2, [r3, #0]
 8009fec:	e053      	b.n	800a096 <USB_EPStartXfer+0x17e2>
 8009fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	095b      	lsrs	r3, r3, #5
 8009ffc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	f003 031f 	and.w	r3, r3, #31
 800a010:	2b00      	cmp	r3, #0
 800a012:	d104      	bne.n	800a01e <USB_EPStartXfer+0x176a>
 800a014:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a018:	3b01      	subs	r3, #1
 800a01a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a01e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a022:	b29b      	uxth	r3, r3
 800a024:	029b      	lsls	r3, r3, #10
 800a026:	b29b      	uxth	r3, r3
 800a028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a02c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a030:	b29a      	uxth	r2, r3
 800a032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a036:	801a      	strh	r2, [r3, #0]
 800a038:	e02d      	b.n	800a096 <USB_EPStartXfer+0x17e2>
 800a03a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a03e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	785b      	ldrb	r3, [r3, #1]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d125      	bne.n	800a096 <USB_EPStartXfer+0x17e2>
 800a04a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a04e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a058:	b29b      	uxth	r3, r3
 800a05a:	461a      	mov	r2, r3
 800a05c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a060:	4413      	add	r3, r2
 800a062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a06a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	011a      	lsls	r2, r3, #4
 800a074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a078:	4413      	add	r3, r2
 800a07a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a07e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	b29a      	uxth	r2, r3
 800a090:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a094:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a09a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 81fe 	beq.w	800a4a4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a0a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a0c8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d005      	beq.n	800a0e0 <USB_EPStartXfer+0x182c>
 800a0d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10d      	bne.n	800a0fc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f040 81db 	bne.w	800a4a4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a0ee:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f040 81d4 	bne.w	800a4a4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a0fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a10a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	4413      	add	r3, r2
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	b29b      	uxth	r3, r3
 800a11a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a122:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a12a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	441a      	add	r2, r3
 800a140:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a14c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a150:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a154:	b29b      	uxth	r3, r3
 800a156:	8013      	strh	r3, [r2, #0]
 800a158:	e1a4      	b.n	800a4a4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a15a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a15e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	78db      	ldrb	r3, [r3, #3]
 800a166:	2b01      	cmp	r3, #1
 800a168:	f040 819a 	bne.w	800a4a0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a16c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	699a      	ldr	r2, [r3, #24]
 800a178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a17c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	429a      	cmp	r2, r3
 800a186:	d917      	bls.n	800a1b8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a18c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a19c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	699a      	ldr	r2, [r3, #24]
 800a1a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a8:	1ad2      	subs	r2, r2, r3
 800a1aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	619a      	str	r2, [r3, #24]
 800a1b6:	e00e      	b.n	800a1d6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a1b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a1c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a1d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	785b      	ldrb	r3, [r3, #1]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d178      	bne.n	800a2d8 <USB_EPStartXfer+0x1a24>
 800a1e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a1f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a202:	b29b      	uxth	r3, r3
 800a204:	461a      	mov	r2, r3
 800a206:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a20a:	4413      	add	r3, r2
 800a20c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	011a      	lsls	r2, r3, #4
 800a21e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a222:	4413      	add	r3, r2
 800a224:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a228:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a22c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d116      	bne.n	800a262 <USB_EPStartXfer+0x19ae>
 800a234:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a238:	881b      	ldrh	r3, [r3, #0]
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a240:	b29a      	uxth	r2, r3
 800a242:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a246:	801a      	strh	r2, [r3, #0]
 800a248:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a258:	b29a      	uxth	r2, r3
 800a25a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a25e:	801a      	strh	r2, [r3, #0]
 800a260:	e06b      	b.n	800a33a <USB_EPStartXfer+0x1a86>
 800a262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a266:	2b3e      	cmp	r3, #62	; 0x3e
 800a268:	d818      	bhi.n	800a29c <USB_EPStartXfer+0x19e8>
 800a26a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a26e:	085b      	lsrs	r3, r3, #1
 800a270:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d004      	beq.n	800a28a <USB_EPStartXfer+0x19d6>
 800a280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a284:	3301      	adds	r3, #1
 800a286:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a28a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a28e:	b29b      	uxth	r3, r3
 800a290:	029b      	lsls	r3, r3, #10
 800a292:	b29a      	uxth	r2, r3
 800a294:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a298:	801a      	strh	r2, [r3, #0]
 800a29a:	e04e      	b.n	800a33a <USB_EPStartXfer+0x1a86>
 800a29c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2a0:	095b      	lsrs	r3, r3, #5
 800a2a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a2a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2aa:	f003 031f 	and.w	r3, r3, #31
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d104      	bne.n	800a2bc <USB_EPStartXfer+0x1a08>
 800a2b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a2bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	029b      	lsls	r3, r3, #10
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2d4:	801a      	strh	r2, [r3, #0]
 800a2d6:	e030      	b.n	800a33a <USB_EPStartXfer+0x1a86>
 800a2d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	785b      	ldrb	r3, [r3, #1]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d128      	bne.n	800a33a <USB_EPStartXfer+0x1a86>
 800a2e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a2f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a304:	b29b      	uxth	r3, r3
 800a306:	461a      	mov	r2, r3
 800a308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a30c:	4413      	add	r3, r2
 800a30e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	011a      	lsls	r2, r3, #4
 800a320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a324:	4413      	add	r3, r2
 800a326:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a32a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a32e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a332:	b29a      	uxth	r2, r3
 800a334:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a338:	801a      	strh	r2, [r3, #0]
 800a33a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a33e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a34c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d178      	bne.n	800a44a <USB_EPStartXfer+0x1b96>
 800a358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a35c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a374:	b29b      	uxth	r3, r3
 800a376:	461a      	mov	r2, r3
 800a378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a37c:	4413      	add	r3, r2
 800a37e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	011a      	lsls	r2, r3, #4
 800a390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a394:	4413      	add	r3, r2
 800a396:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a39a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a39e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d116      	bne.n	800a3d4 <USB_EPStartXfer+0x1b20>
 800a3a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3b8:	801a      	strh	r2, [r3, #0]
 800a3ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3be:	881b      	ldrh	r3, [r3, #0]
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3d0:	801a      	strh	r2, [r3, #0]
 800a3d2:	e067      	b.n	800a4a4 <USB_EPStartXfer+0x1bf0>
 800a3d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3d8:	2b3e      	cmp	r3, #62	; 0x3e
 800a3da:	d818      	bhi.n	800a40e <USB_EPStartXfer+0x1b5a>
 800a3dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3e0:	085b      	lsrs	r3, r3, #1
 800a3e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a3e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d004      	beq.n	800a3fc <USB_EPStartXfer+0x1b48>
 800a3f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a3fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a400:	b29b      	uxth	r3, r3
 800a402:	029b      	lsls	r3, r3, #10
 800a404:	b29a      	uxth	r2, r3
 800a406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a40a:	801a      	strh	r2, [r3, #0]
 800a40c:	e04a      	b.n	800a4a4 <USB_EPStartXfer+0x1bf0>
 800a40e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a412:	095b      	lsrs	r3, r3, #5
 800a414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a41c:	f003 031f 	and.w	r3, r3, #31
 800a420:	2b00      	cmp	r3, #0
 800a422:	d104      	bne.n	800a42e <USB_EPStartXfer+0x1b7a>
 800a424:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a428:	3b01      	subs	r3, #1
 800a42a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a42e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a432:	b29b      	uxth	r3, r3
 800a434:	029b      	lsls	r3, r3, #10
 800a436:	b29b      	uxth	r3, r3
 800a438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a43c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a440:	b29a      	uxth	r2, r3
 800a442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a446:	801a      	strh	r2, [r3, #0]
 800a448:	e02c      	b.n	800a4a4 <USB_EPStartXfer+0x1bf0>
 800a44a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a44e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	785b      	ldrb	r3, [r3, #1]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d124      	bne.n	800a4a4 <USB_EPStartXfer+0x1bf0>
 800a45a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a45e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a468:	b29b      	uxth	r3, r3
 800a46a:	461a      	mov	r2, r3
 800a46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a470:	4413      	add	r3, r2
 800a472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a47a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	011a      	lsls	r2, r3, #4
 800a484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a488:	4413      	add	r3, r2
 800a48a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a48e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a496:	b29a      	uxth	r2, r3
 800a498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a49c:	801a      	strh	r2, [r3, #0]
 800a49e:	e001      	b.n	800a4a4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e03a      	b.n	800a51a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a4c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a4ce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a4d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a4d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a4da:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a4de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a4e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a4e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	441a      	add	r2, r3
 800a500:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a50c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a514:	b29b      	uxth	r3, r3
 800a516:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	785b      	ldrb	r3, [r3, #1]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d020      	beq.n	800a578 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	4413      	add	r3, r2
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	b29b      	uxth	r3, r3
 800a544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a54c:	81bb      	strh	r3, [r7, #12]
 800a54e:	89bb      	ldrh	r3, [r7, #12]
 800a550:	f083 0310 	eor.w	r3, r3, #16
 800a554:	81bb      	strh	r3, [r7, #12]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	441a      	add	r2, r3
 800a560:	89bb      	ldrh	r3, [r7, #12]
 800a562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a56a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a56e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a572:	b29b      	uxth	r3, r3
 800a574:	8013      	strh	r3, [r2, #0]
 800a576:	e01f      	b.n	800a5b8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	b29b      	uxth	r3, r3
 800a586:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a58a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a58e:	81fb      	strh	r3, [r7, #14]
 800a590:	89fb      	ldrh	r3, [r7, #14]
 800a592:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a596:	81fb      	strh	r3, [r7, #14]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	441a      	add	r2, r3
 800a5a2:	89fb      	ldrh	r3, [r7, #14]
 800a5a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3714      	adds	r7, #20
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bc80      	pop	{r7}
 800a5c2:	4770      	bx	lr

0800a5c4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	7b1b      	ldrb	r3, [r3, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	f040 809d 	bne.w	800a712 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	785b      	ldrb	r3, [r3, #1]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d04c      	beq.n	800a67a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	881b      	ldrh	r3, [r3, #0]
 800a5ec:	823b      	strh	r3, [r7, #16]
 800a5ee:	8a3b      	ldrh	r3, [r7, #16]
 800a5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d01b      	beq.n	800a630 <USB_EPClearStall+0x6c>
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	b29b      	uxth	r3, r3
 800a606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a60e:	81fb      	strh	r3, [r7, #14]
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	441a      	add	r2, r3
 800a61a:	89fb      	ldrh	r3, [r7, #14]
 800a61c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a628:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	78db      	ldrb	r3, [r3, #3]
 800a634:	2b01      	cmp	r3, #1
 800a636:	d06c      	beq.n	800a712 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	b29b      	uxth	r3, r3
 800a646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a64a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a64e:	81bb      	strh	r3, [r7, #12]
 800a650:	89bb      	ldrh	r3, [r7, #12]
 800a652:	f083 0320 	eor.w	r3, r3, #32
 800a656:	81bb      	strh	r3, [r7, #12]
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	441a      	add	r2, r3
 800a662:	89bb      	ldrh	r3, [r7, #12]
 800a664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a66c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a674:	b29b      	uxth	r3, r3
 800a676:	8013      	strh	r3, [r2, #0]
 800a678:	e04b      	b.n	800a712 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	82fb      	strh	r3, [r7, #22]
 800a688:	8afb      	ldrh	r3, [r7, #22]
 800a68a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d01b      	beq.n	800a6ca <USB_EPClearStall+0x106>
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	881b      	ldrh	r3, [r3, #0]
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a8:	82bb      	strh	r3, [r7, #20]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	441a      	add	r2, r3
 800a6b4:	8abb      	ldrh	r3, [r7, #20]
 800a6b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6e0:	827b      	strh	r3, [r7, #18]
 800a6e2:	8a7b      	ldrh	r3, [r7, #18]
 800a6e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a6e8:	827b      	strh	r3, [r7, #18]
 800a6ea:	8a7b      	ldrh	r3, [r7, #18]
 800a6ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a6f0:	827b      	strh	r3, [r7, #18]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	441a      	add	r2, r3
 800a6fc:	8a7b      	ldrh	r3, [r7, #18]
 800a6fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a70a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a70e:	b29b      	uxth	r3, r3
 800a710:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	371c      	adds	r7, #28
 800a718:	46bd      	mov	sp, r7
 800a71a:	bc80      	pop	{r7}
 800a71c:	4770      	bx	lr

0800a71e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	460b      	mov	r3, r1
 800a728:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a72a:	78fb      	ldrb	r3, [r7, #3]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d103      	bne.n	800a738 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2280      	movs	r2, #128	; 0x80
 800a734:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	bc80      	pop	{r7}
 800a742:	4770      	bx	lr

0800a744 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	bc80      	pop	{r7}
 800a756:	4770      	bx	lr

0800a758 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	bc80      	pop	{r7}
 800a76a:	4770      	bx	lr

0800a76c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a77e:	68fb      	ldr	r3, [r7, #12]
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	bc80      	pop	{r7}
 800a788:	4770      	bx	lr

0800a78a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bc80      	pop	{r7}
 800a79e:	4770      	bx	lr

0800a7a0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b08d      	sub	sp, #52	; 0x34
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	80fb      	strh	r3, [r7, #6]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a7b6:	88bb      	ldrh	r3, [r7, #4]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	085b      	lsrs	r3, r3, #1
 800a7bc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	005a      	lsls	r2, r3, #1
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7d2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7d8:	e01e      	b.n	800a818 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	021b      	lsls	r3, r3, #8
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	3302      	adds	r3, #2
 800a804:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800a806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a808:	3302      	adds	r3, #2
 800a80a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800a80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80e:	3301      	adds	r3, #1
 800a810:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a814:	3b01      	subs	r3, #1
 800a816:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1dd      	bne.n	800a7da <USB_WritePMA+0x3a>
  }
}
 800a81e:	bf00      	nop
 800a820:	bf00      	nop
 800a822:	3734      	adds	r7, #52	; 0x34
 800a824:	46bd      	mov	sp, r7
 800a826:	bc80      	pop	{r7}
 800a828:	4770      	bx	lr

0800a82a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b08b      	sub	sp, #44	; 0x2c
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	60b9      	str	r1, [r7, #8]
 800a834:	4611      	mov	r1, r2
 800a836:	461a      	mov	r2, r3
 800a838:	460b      	mov	r3, r1
 800a83a:	80fb      	strh	r3, [r7, #6]
 800a83c:	4613      	mov	r3, r2
 800a83e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a840:	88bb      	ldrh	r3, [r7, #4]
 800a842:	085b      	lsrs	r3, r3, #1
 800a844:	b29b      	uxth	r3, r3
 800a846:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a850:	88fb      	ldrh	r3, [r7, #6]
 800a852:	005a      	lsls	r2, r3, #1
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	4413      	add	r3, r2
 800a858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a85c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	627b      	str	r3, [r7, #36]	; 0x24
 800a862:	e01b      	b.n	800a89c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	3302      	adds	r3, #2
 800a870:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	b2da      	uxtb	r2, r3
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	3301      	adds	r3, #1
 800a87e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	b2da      	uxtb	r2, r3
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	3301      	adds	r3, #1
 800a88e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	3302      	adds	r3, #2
 800a894:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a898:	3b01      	subs	r3, #1
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e0      	bne.n	800a864 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a8a2:	88bb      	ldrh	r3, [r7, #4]
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d007      	beq.n	800a8be <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	701a      	strb	r2, [r3, #0]
  }
}
 800a8be:	bf00      	nop
 800a8c0:	372c      	adds	r7, #44	; 0x2c
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bc80      	pop	{r7}
 800a8c6:	4770      	bx	lr

0800a8c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	7c1b      	ldrb	r3, [r3, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d115      	bne.n	800a90c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a8e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8e4:	2202      	movs	r2, #2
 800a8e6:	2181      	movs	r1, #129	; 0x81
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f001 feac 	bl	800c646 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f001 fea2 	bl	800c646 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a90a:	e012      	b.n	800a932 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a90c:	2340      	movs	r3, #64	; 0x40
 800a90e:	2202      	movs	r2, #2
 800a910:	2181      	movs	r1, #129	; 0x81
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f001 fe97 	bl	800c646 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a91e:	2340      	movs	r3, #64	; 0x40
 800a920:	2202      	movs	r2, #2
 800a922:	2101      	movs	r1, #1
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f001 fe8e 	bl	800c646 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a932:	2308      	movs	r3, #8
 800a934:	2203      	movs	r2, #3
 800a936:	2182      	movs	r1, #130	; 0x82
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f001 fe84 	bl	800c646 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a944:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a948:	f001 ffa4 	bl	800c894 <USBD_static_malloc>
 800a94c:	4602      	mov	r2, r0
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d102      	bne.n	800a964 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a95e:	2301      	movs	r3, #1
 800a960:	73fb      	strb	r3, [r7, #15]
 800a962:	e026      	b.n	800a9b2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a96a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	2200      	movs	r2, #0
 800a97a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2200      	movs	r2, #0
 800a982:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	7c1b      	ldrb	r3, [r3, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a994:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a998:	2101      	movs	r1, #1
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f001 ff44 	bl	800c828 <USBD_LL_PrepareReceive>
 800a9a0:	e007      	b.n	800a9b2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9a8:	2340      	movs	r3, #64	; 0x40
 800a9aa:	2101      	movs	r1, #1
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f001 ff3b 	bl	800c828 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a9cc:	2181      	movs	r1, #129	; 0x81
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f001 fe5f 	bl	800c692 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a9da:	2101      	movs	r1, #1
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 fe58 	bl	800c692 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a9ea:	2182      	movs	r1, #130	; 0x82
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 fe50 	bl	800c692 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00e      	beq.n	800aa20 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa12:	4618      	mov	r0, r3
 800aa14:	f001 ff4a 	bl	800c8ac <USBD_static_free>
    pdev->pClassData = NULL;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800aa20:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b086      	sub	sp, #24
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa3a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d039      	beq.n	800aac8 <USBD_CDC_Setup+0x9e>
 800aa54:	2b20      	cmp	r3, #32
 800aa56:	d17f      	bne.n	800ab58 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	88db      	ldrh	r3, [r3, #6]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d029      	beq.n	800aab4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	b25b      	sxtb	r3, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	da11      	bge.n	800aa8e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800aa76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	88d2      	ldrh	r2, [r2, #6]
 800aa7c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aa7e:	6939      	ldr	r1, [r7, #16]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	88db      	ldrh	r3, [r3, #6]
 800aa84:	461a      	mov	r2, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f001 fa09 	bl	800be9e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800aa8c:	e06b      	b.n	800ab66 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	785a      	ldrb	r2, [r3, #1]
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	88db      	ldrh	r3, [r3, #6]
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800aaa4:	6939      	ldr	r1, [r7, #16]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	88db      	ldrh	r3, [r3, #6]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 fa24 	bl	800befa <USBD_CtlPrepareRx>
      break;
 800aab2:	e058      	b.n	800ab66 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	7850      	ldrb	r0, [r2, #1]
 800aac0:	2200      	movs	r2, #0
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	4798      	blx	r3
      break;
 800aac6:	e04e      	b.n	800ab66 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	785b      	ldrb	r3, [r3, #1]
 800aacc:	2b0b      	cmp	r3, #11
 800aace:	d02e      	beq.n	800ab2e <USBD_CDC_Setup+0x104>
 800aad0:	2b0b      	cmp	r3, #11
 800aad2:	dc38      	bgt.n	800ab46 <USBD_CDC_Setup+0x11c>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <USBD_CDC_Setup+0xb4>
 800aad8:	2b0a      	cmp	r3, #10
 800aada:	d014      	beq.n	800ab06 <USBD_CDC_Setup+0xdc>
 800aadc:	e033      	b.n	800ab46 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	d107      	bne.n	800aaf8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800aae8:	f107 030c 	add.w	r3, r7, #12
 800aaec:	2202      	movs	r2, #2
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f001 f9d4 	bl	800be9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aaf6:	e02e      	b.n	800ab56 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f001 f965 	bl	800bdca <USBD_CtlError>
            ret = USBD_FAIL;
 800ab00:	2302      	movs	r3, #2
 800ab02:	75fb      	strb	r3, [r7, #23]
          break;
 800ab04:	e027      	b.n	800ab56 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	d107      	bne.n	800ab20 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ab10:	f107 030f 	add.w	r3, r7, #15
 800ab14:	2201      	movs	r2, #1
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f001 f9c0 	bl	800be9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab1e:	e01a      	b.n	800ab56 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f001 f951 	bl	800bdca <USBD_CtlError>
            ret = USBD_FAIL;
 800ab28:	2302      	movs	r3, #2
 800ab2a:	75fb      	strb	r3, [r7, #23]
          break;
 800ab2c:	e013      	b.n	800ab56 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d00d      	beq.n	800ab54 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f001 f945 	bl	800bdca <USBD_CtlError>
            ret = USBD_FAIL;
 800ab40:	2302      	movs	r3, #2
 800ab42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ab44:	e006      	b.n	800ab54 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800ab46:	6839      	ldr	r1, [r7, #0]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f001 f93e 	bl	800bdca <USBD_CtlError>
          ret = USBD_FAIL;
 800ab4e:	2302      	movs	r3, #2
 800ab50:	75fb      	strb	r3, [r7, #23]
          break;
 800ab52:	e000      	b.n	800ab56 <USBD_CDC_Setup+0x12c>
          break;
 800ab54:	bf00      	nop
      }
      break;
 800ab56:	e006      	b.n	800ab66 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 f935 	bl	800bdca <USBD_CtlError>
      ret = USBD_FAIL;
 800ab60:	2302      	movs	r3, #2
 800ab62:	75fb      	strb	r3, [r7, #23]
      break;
 800ab64:	bf00      	nop
  }

  return ret;
 800ab66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab82:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab8a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d03a      	beq.n	800ac0c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ab96:	78fa      	ldrb	r2, [r7, #3]
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	440b      	add	r3, r1
 800aba4:	331c      	adds	r3, #28
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d029      	beq.n	800ac00 <USBD_CDC_DataIn+0x90>
 800abac:	78fa      	ldrb	r2, [r7, #3]
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	4613      	mov	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	440b      	add	r3, r1
 800abba:	331c      	adds	r3, #28
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	78f9      	ldrb	r1, [r7, #3]
 800abc0:	68b8      	ldr	r0, [r7, #8]
 800abc2:	460b      	mov	r3, r1
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	440b      	add	r3, r1
 800abc8:	00db      	lsls	r3, r3, #3
 800abca:	4403      	add	r3, r0
 800abcc:	3338      	adds	r3, #56	; 0x38
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	fbb2 f1f3 	udiv	r1, r2, r3
 800abd4:	fb01 f303 	mul.w	r3, r1, r3
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d110      	bne.n	800ac00 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800abde:	78fa      	ldrb	r2, [r7, #3]
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	4613      	mov	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	4413      	add	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	440b      	add	r3, r1
 800abec:	331c      	adds	r3, #28
 800abee:	2200      	movs	r2, #0
 800abf0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800abf2:	78f9      	ldrb	r1, [r7, #3]
 800abf4:	2300      	movs	r3, #0
 800abf6:	2200      	movs	r2, #0
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f001 fdf2 	bl	800c7e2 <USBD_LL_Transmit>
 800abfe:	e003      	b.n	800ac08 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	e000      	b.n	800ac0e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800ac0c:	2302      	movs	r3, #2
  }
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b084      	sub	sp, #16
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac28:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f001 fe1d 	bl	800c86e <USBD_LL_GetRxDataSize>
 800ac34:	4602      	mov	r2, r0
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00d      	beq.n	800ac62 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4798      	blx	r3

    return USBD_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e000      	b.n	800ac64 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ac62:	2302      	movs	r3, #2
  }
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d015      	beq.n	800acb2 <USBD_CDC_EP0_RxReady+0x46>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac8c:	2bff      	cmp	r3, #255	; 0xff
 800ac8e:	d010      	beq.n	800acb2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ac9e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800aca6:	b292      	uxth	r2, r2
 800aca8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	22ff      	movs	r2, #255	; 0xff
 800acae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2243      	movs	r2, #67	; 0x43
 800acc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800acca:	4b03      	ldr	r3, [pc, #12]	; (800acd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800accc:	4618      	mov	r0, r3
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bc80      	pop	{r7}
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	200002c4 	.word	0x200002c4

0800acdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2243      	movs	r2, #67	; 0x43
 800ace8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800acea:	4b03      	ldr	r3, [pc, #12]	; (800acf8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800acec:	4618      	mov	r0, r3
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bc80      	pop	{r7}
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	20000280 	.word	0x20000280

0800acfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2243      	movs	r2, #67	; 0x43
 800ad08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ad0a:	4b03      	ldr	r3, [pc, #12]	; (800ad18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bc80      	pop	{r7}
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	20000308 	.word	0x20000308

0800ad1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	220a      	movs	r2, #10
 800ad28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ad2a:	4b03      	ldr	r3, [pc, #12]	; (800ad38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bc80      	pop	{r7}
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	2000023c 	.word	0x2000023c

0800ad3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ad46:	2302      	movs	r3, #2
 800ad48:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d005      	beq.n	800ad5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bc80      	pop	{r7}
 800ad66:	4770      	bx	lr

0800ad68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b087      	sub	sp, #28
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	4613      	mov	r3, r2
 800ad74:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ad86:	88fa      	ldrh	r2, [r7, #6]
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	371c      	adds	r7, #28
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bc80      	pop	{r7}
 800ad98:	4770      	bx	lr

0800ad9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b085      	sub	sp, #20
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adaa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	683a      	ldr	r2, [r7, #0]
 800adb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	bc80      	pop	{r7}
 800adbe:	4770      	bx	lr

0800adc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800add6:	2b00      	cmp	r3, #0
 800add8:	d01c      	beq.n	800ae14 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d115      	bne.n	800ae10 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2201      	movs	r2, #1
 800ade8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	2181      	movs	r1, #129	; 0x81
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f001 fceb 	bl	800c7e2 <USBD_LL_Transmit>

      return USBD_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e002      	b.n	800ae16 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e000      	b.n	800ae16 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ae14:	2302      	movs	r3, #2
  }
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b084      	sub	sp, #16
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae2c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d017      	beq.n	800ae68 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	7c1b      	ldrb	r3, [r3, #16]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d109      	bne.n	800ae54 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f001 fceb 	bl	800c828 <USBD_LL_PrepareReceive>
 800ae52:	e007      	b.n	800ae64 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae5a:	2340      	movs	r3, #64	; 0x40
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f001 fce2 	bl	800c828 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	e000      	b.n	800ae6a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ae68:	2302      	movs	r3, #2
  }
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	60f8      	str	r0, [r7, #12]
 800ae7a:	60b9      	str	r1, [r7, #8]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d101      	bne.n	800ae8a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ae86:	2302      	movs	r3, #2
 800ae88:	e01a      	b.n	800aec0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d003      	beq.n	800ae9c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	79fa      	ldrb	r2, [r7, #7]
 800aeb6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f001 fb4f 	bl	800c55c <USBD_LL_Init>

  return USBD_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b085      	sub	sp, #20
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d006      	beq.n	800aeea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	73fb      	strb	r3, [r7, #15]
 800aee8:	e001      	b.n	800aeee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800aeea:	2302      	movs	r3, #2
 800aeec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bc80      	pop	{r7}
 800aef8:	4770      	bx	lr

0800aefa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b082      	sub	sp, #8
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f001 fb84 	bl	800c610 <USBD_LL_Start>

  return USBD_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800af12:	b480      	push	{r7}
 800af14:	b083      	sub	sp, #12
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	bc80      	pop	{r7}
 800af24:	4770      	bx	lr

0800af26 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b084      	sub	sp, #16
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	460b      	mov	r3, r1
 800af30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800af32:	2302      	movs	r3, #2
 800af34:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d00c      	beq.n	800af5a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	78fa      	ldrb	r2, [r7, #3]
 800af4a:	4611      	mov	r1, r2
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	4798      	blx	r3
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	78fa      	ldrb	r2, [r7, #3]
 800af7a:	4611      	mov	r1, r2
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	4798      	blx	r3

  return USBD_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 fed8 	bl	800bd52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2201      	movs	r2, #1
 800afa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800afb0:	461a      	mov	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800afbe:	f003 031f 	and.w	r3, r3, #31
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d016      	beq.n	800aff4 <USBD_LL_SetupStage+0x6a>
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d81c      	bhi.n	800b004 <USBD_LL_SetupStage+0x7a>
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <USBD_LL_SetupStage+0x4a>
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d008      	beq.n	800afe4 <USBD_LL_SetupStage+0x5a>
 800afd2:	e017      	b.n	800b004 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f9cb 	bl	800b378 <USBD_StdDevReq>
      break;
 800afe2:	e01a      	b.n	800b01a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 fa2d 	bl	800b44c <USBD_StdItfReq>
      break;
 800aff2:	e012      	b.n	800b01a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fa6d 	bl	800b4dc <USBD_StdEPReq>
      break;
 800b002:	e00a      	b.n	800b01a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b00a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f001 fb5c 	bl	800c6d0 <USBD_LL_StallEP>
      break;
 800b018:	bf00      	nop
  }

  return USBD_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3708      	adds	r7, #8
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	460b      	mov	r3, r1
 800b02e:	607a      	str	r2, [r7, #4]
 800b030:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b032:	7afb      	ldrb	r3, [r7, #11]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d14b      	bne.n	800b0d0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b03e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b046:	2b03      	cmp	r3, #3
 800b048:	d134      	bne.n	800b0b4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	68da      	ldr	r2, [r3, #12]
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	429a      	cmp	r2, r3
 800b054:	d919      	bls.n	800b08a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	68da      	ldr	r2, [r3, #12]
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	1ad2      	subs	r2, r2, r3
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	68da      	ldr	r2, [r3, #12]
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d203      	bcs.n	800b078 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b074:	b29b      	uxth	r3, r3
 800b076:	e002      	b.n	800b07e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	461a      	mov	r2, r3
 800b080:	6879      	ldr	r1, [r7, #4]
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 ff57 	bl	800bf36 <USBD_CtlContinueRx>
 800b088:	e038      	b.n	800b0fc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00a      	beq.n	800b0ac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b09c:	2b03      	cmp	r3, #3
 800b09e:	d105      	bne.n	800b0ac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f000 ff54 	bl	800bf5a <USBD_CtlSendStatus>
 800b0b2:	e023      	b.n	800b0fc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0ba:	2b05      	cmp	r3, #5
 800b0bc:	d11e      	bne.n	800b0fc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f001 fb01 	bl	800c6d0 <USBD_LL_StallEP>
 800b0ce:	e015      	b.n	800b0fc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00d      	beq.n	800b0f8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d108      	bne.n	800b0f8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	7afa      	ldrb	r2, [r7, #11]
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	4798      	blx	r3
 800b0f6:	e001      	b.n	800b0fc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e000      	b.n	800b0fe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b086      	sub	sp, #24
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	60f8      	str	r0, [r7, #12]
 800b10e:	460b      	mov	r3, r1
 800b110:	607a      	str	r2, [r7, #4]
 800b112:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b114:	7afb      	ldrb	r3, [r7, #11]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d17f      	bne.n	800b21a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	3314      	adds	r3, #20
 800b11e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b126:	2b02      	cmp	r3, #2
 800b128:	d15c      	bne.n	800b1e4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	68da      	ldr	r2, [r3, #12]
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	429a      	cmp	r2, r3
 800b134:	d915      	bls.n	800b162 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	68da      	ldr	r2, [r3, #12]
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	1ad2      	subs	r2, r2, r3
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	b29b      	uxth	r3, r3
 800b14a:	461a      	mov	r2, r3
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 fec1 	bl	800bed6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b154:	2300      	movs	r3, #0
 800b156:	2200      	movs	r2, #0
 800b158:	2100      	movs	r1, #0
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f001 fb64 	bl	800c828 <USBD_LL_PrepareReceive>
 800b160:	e04e      	b.n	800b200 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	6912      	ldr	r2, [r2, #16]
 800b16a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b16e:	fb01 f202 	mul.w	r2, r1, r2
 800b172:	1a9b      	subs	r3, r3, r2
 800b174:	2b00      	cmp	r3, #0
 800b176:	d11c      	bne.n	800b1b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b180:	429a      	cmp	r2, r3
 800b182:	d316      	bcc.n	800b1b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	689a      	ldr	r2, [r3, #8]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b18e:	429a      	cmp	r2, r3
 800b190:	d20f      	bcs.n	800b1b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b192:	2200      	movs	r2, #0
 800b194:	2100      	movs	r1, #0
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f000 fe9d 	bl	800bed6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f001 fb3c 	bl	800c828 <USBD_LL_PrepareReceive>
 800b1b0:	e026      	b.n	800b200 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00a      	beq.n	800b1d4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b1c4:	2b03      	cmp	r3, #3
 800b1c6:	d105      	bne.n	800b1d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b1d4:	2180      	movs	r1, #128	; 0x80
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f001 fa7a 	bl	800c6d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f000 fecf 	bl	800bf80 <USBD_CtlReceiveStatus>
 800b1e2:	e00d      	b.n	800b200 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1ea:	2b04      	cmp	r3, #4
 800b1ec:	d004      	beq.n	800b1f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d103      	bne.n	800b200 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b1f8:	2180      	movs	r1, #128	; 0x80
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f001 fa68 	bl	800c6d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b206:	2b01      	cmp	r3, #1
 800b208:	d11d      	bne.n	800b246 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b20a:	68f8      	ldr	r0, [r7, #12]
 800b20c:	f7ff fe81 	bl	800af12 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b218:	e015      	b.n	800b246 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00d      	beq.n	800b242 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b22c:	2b03      	cmp	r3, #3
 800b22e:	d108      	bne.n	800b242 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	7afa      	ldrb	r2, [r7, #11]
 800b23a:	4611      	mov	r1, r2
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	4798      	blx	r3
 800b240:	e001      	b.n	800b246 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b242:	2302      	movs	r3, #2
 800b244:	e000      	b.n	800b248 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3718      	adds	r7, #24
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b258:	2340      	movs	r3, #64	; 0x40
 800b25a:	2200      	movs	r2, #0
 800b25c:	2100      	movs	r1, #0
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f001 f9f1 	bl	800c646 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2240      	movs	r2, #64	; 0x40
 800b270:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b274:	2340      	movs	r3, #64	; 0x40
 800b276:	2200      	movs	r2, #0
 800b278:	2180      	movs	r1, #128	; 0x80
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f001 f9e3 	bl	800c646 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2240      	movs	r2, #64	; 0x40
 800b28a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d009      	beq.n	800b2c8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	6852      	ldr	r2, [r2, #4]
 800b2c0:	b2d2      	uxtb	r2, r2
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	4798      	blx	r3
  }

  return USBD_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b2d2:	b480      	push	{r7}
 800b2d4:	b083      	sub	sp, #12
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	78fa      	ldrb	r2, [r7, #3]
 800b2e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bc80      	pop	{r7}
 800b2ee:	4770      	bx	lr

0800b2f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2204      	movs	r2, #4
 800b308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	bc80      	pop	{r7}
 800b316:	4770      	bx	lr

0800b318 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b326:	2b04      	cmp	r3, #4
 800b328:	d105      	bne.n	800b336 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bc80      	pop	{r7}
 800b340:	4770      	bx	lr

0800b342 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b082      	sub	sp, #8
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b350:	2b03      	cmp	r3, #3
 800b352:	d10b      	bne.n	800b36c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d005      	beq.n	800b36c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b366:	69db      	ldr	r3, [r3, #28]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
	...

0800b378 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b38e:	2b40      	cmp	r3, #64	; 0x40
 800b390:	d005      	beq.n	800b39e <USBD_StdDevReq+0x26>
 800b392:	2b40      	cmp	r3, #64	; 0x40
 800b394:	d84f      	bhi.n	800b436 <USBD_StdDevReq+0xbe>
 800b396:	2b00      	cmp	r3, #0
 800b398:	d009      	beq.n	800b3ae <USBD_StdDevReq+0x36>
 800b39a:	2b20      	cmp	r3, #32
 800b39c:	d14b      	bne.n	800b436 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	6839      	ldr	r1, [r7, #0]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	4798      	blx	r3
      break;
 800b3ac:	e048      	b.n	800b440 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	785b      	ldrb	r3, [r3, #1]
 800b3b2:	2b09      	cmp	r3, #9
 800b3b4:	d839      	bhi.n	800b42a <USBD_StdDevReq+0xb2>
 800b3b6:	a201      	add	r2, pc, #4	; (adr r2, 800b3bc <USBD_StdDevReq+0x44>)
 800b3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3bc:	0800b40d 	.word	0x0800b40d
 800b3c0:	0800b421 	.word	0x0800b421
 800b3c4:	0800b42b 	.word	0x0800b42b
 800b3c8:	0800b417 	.word	0x0800b417
 800b3cc:	0800b42b 	.word	0x0800b42b
 800b3d0:	0800b3ef 	.word	0x0800b3ef
 800b3d4:	0800b3e5 	.word	0x0800b3e5
 800b3d8:	0800b42b 	.word	0x0800b42b
 800b3dc:	0800b403 	.word	0x0800b403
 800b3e0:	0800b3f9 	.word	0x0800b3f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f9dc 	bl	800b7a4 <USBD_GetDescriptor>
          break;
 800b3ec:	e022      	b.n	800b434 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fb3f 	bl	800ba74 <USBD_SetAddress>
          break;
 800b3f6:	e01d      	b.n	800b434 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b3f8:	6839      	ldr	r1, [r7, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 fb7e 	bl	800bafc <USBD_SetConfig>
          break;
 800b400:	e018      	b.n	800b434 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 fc07 	bl	800bc18 <USBD_GetConfig>
          break;
 800b40a:	e013      	b.n	800b434 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fc37 	bl	800bc82 <USBD_GetStatus>
          break;
 800b414:	e00e      	b.n	800b434 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fc65 	bl	800bce8 <USBD_SetFeature>
          break;
 800b41e:	e009      	b.n	800b434 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fc74 	bl	800bd10 <USBD_ClrFeature>
          break;
 800b428:	e004      	b.n	800b434 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fccc 	bl	800bdca <USBD_CtlError>
          break;
 800b432:	bf00      	nop
      }
      break;
 800b434:	e004      	b.n	800b440 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fcc6 	bl	800bdca <USBD_CtlError>
      break;
 800b43e:	bf00      	nop
  }

  return ret;
 800b440:	7bfb      	ldrb	r3, [r7, #15]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop

0800b44c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b462:	2b40      	cmp	r3, #64	; 0x40
 800b464:	d005      	beq.n	800b472 <USBD_StdItfReq+0x26>
 800b466:	2b40      	cmp	r3, #64	; 0x40
 800b468:	d82e      	bhi.n	800b4c8 <USBD_StdItfReq+0x7c>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <USBD_StdItfReq+0x26>
 800b46e:	2b20      	cmp	r3, #32
 800b470:	d12a      	bne.n	800b4c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b478:	3b01      	subs	r3, #1
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d81d      	bhi.n	800b4ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	889b      	ldrh	r3, [r3, #4]
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b01      	cmp	r3, #1
 800b486:	d813      	bhi.n	800b4b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	4798      	blx	r3
 800b496:	4603      	mov	r3, r0
 800b498:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	88db      	ldrh	r3, [r3, #6]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d110      	bne.n	800b4c4 <USBD_StdItfReq+0x78>
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10d      	bne.n	800b4c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 fd56 	bl	800bf5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4ae:	e009      	b.n	800b4c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fc89 	bl	800bdca <USBD_CtlError>
          break;
 800b4b8:	e004      	b.n	800b4c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b4ba:	6839      	ldr	r1, [r7, #0]
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fc84 	bl	800bdca <USBD_CtlError>
          break;
 800b4c2:	e000      	b.n	800b4c6 <USBD_StdItfReq+0x7a>
          break;
 800b4c4:	bf00      	nop
      }
      break;
 800b4c6:	e004      	b.n	800b4d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fc7d 	bl	800bdca <USBD_CtlError>
      break;
 800b4d0:	bf00      	nop
  }

  return USBD_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	889b      	ldrh	r3, [r3, #4]
 800b4ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4f8:	2b40      	cmp	r3, #64	; 0x40
 800b4fa:	d007      	beq.n	800b50c <USBD_StdEPReq+0x30>
 800b4fc:	2b40      	cmp	r3, #64	; 0x40
 800b4fe:	f200 8146 	bhi.w	800b78e <USBD_StdEPReq+0x2b2>
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00a      	beq.n	800b51c <USBD_StdEPReq+0x40>
 800b506:	2b20      	cmp	r3, #32
 800b508:	f040 8141 	bne.w	800b78e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	4798      	blx	r3
      break;
 800b51a:	e13d      	b.n	800b798 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b524:	2b20      	cmp	r3, #32
 800b526:	d10a      	bne.n	800b53e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	4798      	blx	r3
 800b536:	4603      	mov	r3, r0
 800b538:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
 800b53c:	e12d      	b.n	800b79a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	785b      	ldrb	r3, [r3, #1]
 800b542:	2b03      	cmp	r3, #3
 800b544:	d007      	beq.n	800b556 <USBD_StdEPReq+0x7a>
 800b546:	2b03      	cmp	r3, #3
 800b548:	f300 811b 	bgt.w	800b782 <USBD_StdEPReq+0x2a6>
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d072      	beq.n	800b636 <USBD_StdEPReq+0x15a>
 800b550:	2b01      	cmp	r3, #1
 800b552:	d03a      	beq.n	800b5ca <USBD_StdEPReq+0xee>
 800b554:	e115      	b.n	800b782 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d002      	beq.n	800b566 <USBD_StdEPReq+0x8a>
 800b560:	2b03      	cmp	r3, #3
 800b562:	d015      	beq.n	800b590 <USBD_StdEPReq+0xb4>
 800b564:	e02b      	b.n	800b5be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00c      	beq.n	800b586 <USBD_StdEPReq+0xaa>
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	2b80      	cmp	r3, #128	; 0x80
 800b570:	d009      	beq.n	800b586 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b572:	7bbb      	ldrb	r3, [r7, #14]
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f001 f8aa 	bl	800c6d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b57c:	2180      	movs	r1, #128	; 0x80
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 f8a6 	bl	800c6d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b584:	e020      	b.n	800b5c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fc1e 	bl	800bdca <USBD_CtlError>
              break;
 800b58e:	e01b      	b.n	800b5c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	885b      	ldrh	r3, [r3, #2]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10e      	bne.n	800b5b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800b598:	7bbb      	ldrb	r3, [r7, #14]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00b      	beq.n	800b5b6 <USBD_StdEPReq+0xda>
 800b59e:	7bbb      	ldrb	r3, [r7, #14]
 800b5a0:	2b80      	cmp	r3, #128	; 0x80
 800b5a2:	d008      	beq.n	800b5b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	88db      	ldrh	r3, [r3, #6]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d104      	bne.n	800b5b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b5ac:	7bbb      	ldrb	r3, [r7, #14]
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f001 f88d 	bl	800c6d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 fccf 	bl	800bf5a <USBD_CtlSendStatus>

              break;
 800b5bc:	e004      	b.n	800b5c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fc02 	bl	800bdca <USBD_CtlError>
              break;
 800b5c6:	bf00      	nop
          }
          break;
 800b5c8:	e0e0      	b.n	800b78c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d002      	beq.n	800b5da <USBD_StdEPReq+0xfe>
 800b5d4:	2b03      	cmp	r3, #3
 800b5d6:	d015      	beq.n	800b604 <USBD_StdEPReq+0x128>
 800b5d8:	e026      	b.n	800b628 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5da:	7bbb      	ldrb	r3, [r7, #14]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00c      	beq.n	800b5fa <USBD_StdEPReq+0x11e>
 800b5e0:	7bbb      	ldrb	r3, [r7, #14]
 800b5e2:	2b80      	cmp	r3, #128	; 0x80
 800b5e4:	d009      	beq.n	800b5fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b5e6:	7bbb      	ldrb	r3, [r7, #14]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 f870 	bl	800c6d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b5f0:	2180      	movs	r1, #128	; 0x80
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 f86c 	bl	800c6d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5f8:	e01c      	b.n	800b634 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 fbe4 	bl	800bdca <USBD_CtlError>
              break;
 800b602:	e017      	b.n	800b634 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	885b      	ldrh	r3, [r3, #2]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d112      	bne.n	800b632 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	4619      	mov	r1, r3
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f001 f877 	bl	800c70e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fc9a 	bl	800bf5a <USBD_CtlSendStatus>
              }
              break;
 800b626:	e004      	b.n	800b632 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800b628:	6839      	ldr	r1, [r7, #0]
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fbcd 	bl	800bdca <USBD_CtlError>
              break;
 800b630:	e000      	b.n	800b634 <USBD_StdEPReq+0x158>
              break;
 800b632:	bf00      	nop
          }
          break;
 800b634:	e0aa      	b.n	800b78c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d002      	beq.n	800b646 <USBD_StdEPReq+0x16a>
 800b640:	2b03      	cmp	r3, #3
 800b642:	d032      	beq.n	800b6aa <USBD_StdEPReq+0x1ce>
 800b644:	e097      	b.n	800b776 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d007      	beq.n	800b65c <USBD_StdEPReq+0x180>
 800b64c:	7bbb      	ldrb	r3, [r7, #14]
 800b64e:	2b80      	cmp	r3, #128	; 0x80
 800b650:	d004      	beq.n	800b65c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 fbb8 	bl	800bdca <USBD_CtlError>
                break;
 800b65a:	e091      	b.n	800b780 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b65c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b660:	2b00      	cmp	r3, #0
 800b662:	da0b      	bge.n	800b67c <USBD_StdEPReq+0x1a0>
 800b664:	7bbb      	ldrb	r3, [r7, #14]
 800b666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	3310      	adds	r3, #16
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	4413      	add	r3, r2
 800b678:	3304      	adds	r3, #4
 800b67a:	e00b      	b.n	800b694 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b67c:	7bbb      	ldrb	r3, [r7, #14]
 800b67e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b682:	4613      	mov	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	4413      	add	r3, r2
 800b692:	3304      	adds	r3, #4
 800b694:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2200      	movs	r2, #0
 800b69a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fbfb 	bl	800be9e <USBD_CtlSendData>
              break;
 800b6a8:	e06a      	b.n	800b780 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	da11      	bge.n	800b6d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6b2:	7bbb      	ldrb	r3, [r7, #14]
 800b6b4:	f003 020f 	and.w	r2, r3, #15
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	440b      	add	r3, r1
 800b6c4:	3318      	adds	r3, #24
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d117      	bne.n	800b6fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b6cc:	6839      	ldr	r1, [r7, #0]
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fb7b 	bl	800bdca <USBD_CtlError>
                  break;
 800b6d4:	e054      	b.n	800b780 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6d6:	7bbb      	ldrb	r3, [r7, #14]
 800b6d8:	f003 020f 	and.w	r2, r3, #15
 800b6dc:	6879      	ldr	r1, [r7, #4]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4413      	add	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	440b      	add	r3, r1
 800b6e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d104      	bne.n	800b6fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fb68 	bl	800bdca <USBD_CtlError>
                  break;
 800b6fa:	e041      	b.n	800b780 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b700:	2b00      	cmp	r3, #0
 800b702:	da0b      	bge.n	800b71c <USBD_StdEPReq+0x240>
 800b704:	7bbb      	ldrb	r3, [r7, #14]
 800b706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b70a:	4613      	mov	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	4413      	add	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	3310      	adds	r3, #16
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	4413      	add	r3, r2
 800b718:	3304      	adds	r3, #4
 800b71a:	e00b      	b.n	800b734 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
 800b71e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b722:	4613      	mov	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	4413      	add	r3, r2
 800b732:	3304      	adds	r3, #4
 800b734:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b736:	7bbb      	ldrb	r3, [r7, #14]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <USBD_StdEPReq+0x266>
 800b73c:	7bbb      	ldrb	r3, [r7, #14]
 800b73e:	2b80      	cmp	r3, #128	; 0x80
 800b740:	d103      	bne.n	800b74a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	2200      	movs	r2, #0
 800b746:	601a      	str	r2, [r3, #0]
 800b748:	e00e      	b.n	800b768 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b74a:	7bbb      	ldrb	r3, [r7, #14]
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fffc 	bl	800c74c <USBD_LL_IsStallEP>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2201      	movs	r2, #1
 800b75e:	601a      	str	r2, [r3, #0]
 800b760:	e002      	b.n	800b768 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2200      	movs	r2, #0
 800b766:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	2202      	movs	r2, #2
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fb95 	bl	800be9e <USBD_CtlSendData>
              break;
 800b774:	e004      	b.n	800b780 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fb26 	bl	800bdca <USBD_CtlError>
              break;
 800b77e:	bf00      	nop
          }
          break;
 800b780:	e004      	b.n	800b78c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fb20 	bl	800bdca <USBD_CtlError>
          break;
 800b78a:	bf00      	nop
      }
      break;
 800b78c:	e004      	b.n	800b798 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 fb1a 	bl	800bdca <USBD_CtlError>
      break;
 800b796:	bf00      	nop
  }

  return ret;
 800b798:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
	...

0800b7a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	885b      	ldrh	r3, [r3, #2]
 800b7be:	0a1b      	lsrs	r3, r3, #8
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	2b06      	cmp	r3, #6
 800b7c6:	f200 8128 	bhi.w	800ba1a <USBD_GetDescriptor+0x276>
 800b7ca:	a201      	add	r2, pc, #4	; (adr r2, 800b7d0 <USBD_GetDescriptor+0x2c>)
 800b7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d0:	0800b7ed 	.word	0x0800b7ed
 800b7d4:	0800b805 	.word	0x0800b805
 800b7d8:	0800b845 	.word	0x0800b845
 800b7dc:	0800ba1b 	.word	0x0800ba1b
 800b7e0:	0800ba1b 	.word	0x0800ba1b
 800b7e4:	0800b9bb 	.word	0x0800b9bb
 800b7e8:	0800b9e7 	.word	0x0800b9e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	7c12      	ldrb	r2, [r2, #16]
 800b7f8:	f107 0108 	add.w	r1, r7, #8
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	4798      	blx	r3
 800b800:	60f8      	str	r0, [r7, #12]
      break;
 800b802:	e112      	b.n	800ba2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	7c1b      	ldrb	r3, [r3, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10d      	bne.n	800b828 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b814:	f107 0208 	add.w	r2, r7, #8
 800b818:	4610      	mov	r0, r2
 800b81a:	4798      	blx	r3
 800b81c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3301      	adds	r3, #1
 800b822:	2202      	movs	r2, #2
 800b824:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b826:	e100      	b.n	800ba2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	f107 0208 	add.w	r2, r7, #8
 800b834:	4610      	mov	r0, r2
 800b836:	4798      	blx	r3
 800b838:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	3301      	adds	r3, #1
 800b83e:	2202      	movs	r2, #2
 800b840:	701a      	strb	r2, [r3, #0]
      break;
 800b842:	e0f2      	b.n	800ba2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	885b      	ldrh	r3, [r3, #2]
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	2b05      	cmp	r3, #5
 800b84c:	f200 80ac 	bhi.w	800b9a8 <USBD_GetDescriptor+0x204>
 800b850:	a201      	add	r2, pc, #4	; (adr r2, 800b858 <USBD_GetDescriptor+0xb4>)
 800b852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b856:	bf00      	nop
 800b858:	0800b871 	.word	0x0800b871
 800b85c:	0800b8a5 	.word	0x0800b8a5
 800b860:	0800b8d9 	.word	0x0800b8d9
 800b864:	0800b90d 	.word	0x0800b90d
 800b868:	0800b941 	.word	0x0800b941
 800b86c:	0800b975 	.word	0x0800b975
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00b      	beq.n	800b894 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	7c12      	ldrb	r2, [r2, #16]
 800b888:	f107 0108 	add.w	r1, r7, #8
 800b88c:	4610      	mov	r0, r2
 800b88e:	4798      	blx	r3
 800b890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b892:	e091      	b.n	800b9b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fa97 	bl	800bdca <USBD_CtlError>
            err++;
 800b89c:	7afb      	ldrb	r3, [r7, #11]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8a2:	e089      	b.n	800b9b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00b      	beq.n	800b8c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	7c12      	ldrb	r2, [r2, #16]
 800b8bc:	f107 0108 	add.w	r1, r7, #8
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	4798      	blx	r3
 800b8c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8c6:	e077      	b.n	800b9b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fa7d 	bl	800bdca <USBD_CtlError>
            err++;
 800b8d0:	7afb      	ldrb	r3, [r7, #11]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8d6:	e06f      	b.n	800b9b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00b      	beq.n	800b8fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	7c12      	ldrb	r2, [r2, #16]
 800b8f0:	f107 0108 	add.w	r1, r7, #8
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	4798      	blx	r3
 800b8f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8fa:	e05d      	b.n	800b9b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fa63 	bl	800bdca <USBD_CtlError>
            err++;
 800b904:	7afb      	ldrb	r3, [r7, #11]
 800b906:	3301      	adds	r3, #1
 800b908:	72fb      	strb	r3, [r7, #11]
          break;
 800b90a:	e055      	b.n	800b9b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00b      	beq.n	800b930 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b91e:	691b      	ldr	r3, [r3, #16]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	7c12      	ldrb	r2, [r2, #16]
 800b924:	f107 0108 	add.w	r1, r7, #8
 800b928:	4610      	mov	r0, r2
 800b92a:	4798      	blx	r3
 800b92c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b92e:	e043      	b.n	800b9b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fa49 	bl	800bdca <USBD_CtlError>
            err++;
 800b938:	7afb      	ldrb	r3, [r7, #11]
 800b93a:	3301      	adds	r3, #1
 800b93c:	72fb      	strb	r3, [r7, #11]
          break;
 800b93e:	e03b      	b.n	800b9b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b946:	695b      	ldr	r3, [r3, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00b      	beq.n	800b964 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b952:	695b      	ldr	r3, [r3, #20]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	7c12      	ldrb	r2, [r2, #16]
 800b958:	f107 0108 	add.w	r1, r7, #8
 800b95c:	4610      	mov	r0, r2
 800b95e:	4798      	blx	r3
 800b960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b962:	e029      	b.n	800b9b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fa2f 	bl	800bdca <USBD_CtlError>
            err++;
 800b96c:	7afb      	ldrb	r3, [r7, #11]
 800b96e:	3301      	adds	r3, #1
 800b970:	72fb      	strb	r3, [r7, #11]
          break;
 800b972:	e021      	b.n	800b9b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00b      	beq.n	800b998 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	7c12      	ldrb	r2, [r2, #16]
 800b98c:	f107 0108 	add.w	r1, r7, #8
 800b990:	4610      	mov	r0, r2
 800b992:	4798      	blx	r3
 800b994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b996:	e00f      	b.n	800b9b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 fa15 	bl	800bdca <USBD_CtlError>
            err++;
 800b9a0:	7afb      	ldrb	r3, [r7, #11]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9a6:	e007      	b.n	800b9b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b9a8:	6839      	ldr	r1, [r7, #0]
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fa0d 	bl	800bdca <USBD_CtlError>
          err++;
 800b9b0:	7afb      	ldrb	r3, [r7, #11]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b9b6:	e038      	b.n	800ba2a <USBD_GetDescriptor+0x286>
 800b9b8:	e037      	b.n	800ba2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	7c1b      	ldrb	r3, [r3, #16]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d109      	bne.n	800b9d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ca:	f107 0208 	add.w	r2, r7, #8
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	4798      	blx	r3
 800b9d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9d4:	e029      	b.n	800ba2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 f9f6 	bl	800bdca <USBD_CtlError>
        err++;
 800b9de:	7afb      	ldrb	r3, [r7, #11]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	72fb      	strb	r3, [r7, #11]
      break;
 800b9e4:	e021      	b.n	800ba2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	7c1b      	ldrb	r3, [r3, #16]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10d      	bne.n	800ba0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9f6:	f107 0208 	add.w	r2, r7, #8
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	4798      	blx	r3
 800b9fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3301      	adds	r3, #1
 800ba04:	2207      	movs	r2, #7
 800ba06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba08:	e00f      	b.n	800ba2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba0a:	6839      	ldr	r1, [r7, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f9dc 	bl	800bdca <USBD_CtlError>
        err++;
 800ba12:	7afb      	ldrb	r3, [r7, #11]
 800ba14:	3301      	adds	r3, #1
 800ba16:	72fb      	strb	r3, [r7, #11]
      break;
 800ba18:	e007      	b.n	800ba2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f9d4 	bl	800bdca <USBD_CtlError>
      err++;
 800ba22:	7afb      	ldrb	r3, [r7, #11]
 800ba24:	3301      	adds	r3, #1
 800ba26:	72fb      	strb	r3, [r7, #11]
      break;
 800ba28:	bf00      	nop
  }

  if (err != 0U)
 800ba2a:	7afb      	ldrb	r3, [r7, #11]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d11c      	bne.n	800ba6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ba30:	893b      	ldrh	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d011      	beq.n	800ba5a <USBD_GetDescriptor+0x2b6>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	88db      	ldrh	r3, [r3, #6]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00d      	beq.n	800ba5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	88da      	ldrh	r2, [r3, #6]
 800ba42:	893b      	ldrh	r3, [r7, #8]
 800ba44:	4293      	cmp	r3, r2
 800ba46:	bf28      	it	cs
 800ba48:	4613      	movcs	r3, r2
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba4e:	893b      	ldrh	r3, [r7, #8]
 800ba50:	461a      	mov	r2, r3
 800ba52:	68f9      	ldr	r1, [r7, #12]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fa22 	bl	800be9e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	88db      	ldrh	r3, [r3, #6]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d104      	bne.n	800ba6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 fa79 	bl	800bf5a <USBD_CtlSendStatus>
 800ba68:	e000      	b.n	800ba6c <USBD_GetDescriptor+0x2c8>
    return;
 800ba6a:	bf00      	nop
    }
  }
}
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop

0800ba74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	889b      	ldrh	r3, [r3, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d130      	bne.n	800bae8 <USBD_SetAddress+0x74>
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	88db      	ldrh	r3, [r3, #6]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d12c      	bne.n	800bae8 <USBD_SetAddress+0x74>
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	885b      	ldrh	r3, [r3, #2]
 800ba92:	2b7f      	cmp	r3, #127	; 0x7f
 800ba94:	d828      	bhi.n	800bae8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	885b      	ldrh	r3, [r3, #2]
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baa8:	2b03      	cmp	r3, #3
 800baaa:	d104      	bne.n	800bab6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f98b 	bl	800bdca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bab4:	e01d      	b.n	800baf2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	7bfa      	ldrb	r2, [r7, #15]
 800baba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800babe:	7bfb      	ldrb	r3, [r7, #15]
 800bac0:	4619      	mov	r1, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fe6e 	bl	800c7a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fa46 	bl	800bf5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d004      	beq.n	800bade <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2202      	movs	r2, #2
 800bad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800badc:	e009      	b.n	800baf2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae6:	e004      	b.n	800baf2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 f96d 	bl	800bdca <USBD_CtlError>
  }
}
 800baf0:	bf00      	nop
 800baf2:	bf00      	nop
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	885b      	ldrh	r3, [r3, #2]
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	4b41      	ldr	r3, [pc, #260]	; (800bc14 <USBD_SetConfig+0x118>)
 800bb0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb10:	4b40      	ldr	r3, [pc, #256]	; (800bc14 <USBD_SetConfig+0x118>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d904      	bls.n	800bb22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f955 	bl	800bdca <USBD_CtlError>
 800bb20:	e075      	b.n	800bc0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d002      	beq.n	800bb32 <USBD_SetConfig+0x36>
 800bb2c:	2b03      	cmp	r3, #3
 800bb2e:	d023      	beq.n	800bb78 <USBD_SetConfig+0x7c>
 800bb30:	e062      	b.n	800bbf8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bb32:	4b38      	ldr	r3, [pc, #224]	; (800bc14 <USBD_SetConfig+0x118>)
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d01a      	beq.n	800bb70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bb3a:	4b36      	ldr	r3, [pc, #216]	; (800bc14 <USBD_SetConfig+0x118>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2203      	movs	r2, #3
 800bb48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bb4c:	4b31      	ldr	r3, [pc, #196]	; (800bc14 <USBD_SetConfig+0x118>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7ff f9e7 	bl	800af26 <USBD_SetClassConfig>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d104      	bne.n	800bb68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f932 	bl	800bdca <USBD_CtlError>
            return;
 800bb66:	e052      	b.n	800bc0e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f9f6 	bl	800bf5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bb6e:	e04e      	b.n	800bc0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f9f2 	bl	800bf5a <USBD_CtlSendStatus>
        break;
 800bb76:	e04a      	b.n	800bc0e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bb78:	4b26      	ldr	r3, [pc, #152]	; (800bc14 <USBD_SetConfig+0x118>)
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d112      	bne.n	800bba6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2202      	movs	r2, #2
 800bb84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800bb88:	4b22      	ldr	r3, [pc, #136]	; (800bc14 <USBD_SetConfig+0x118>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bb92:	4b20      	ldr	r3, [pc, #128]	; (800bc14 <USBD_SetConfig+0x118>)
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	4619      	mov	r1, r3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f7ff f9e3 	bl	800af64 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f9db 	bl	800bf5a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bba4:	e033      	b.n	800bc0e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800bba6:	4b1b      	ldr	r3, [pc, #108]	; (800bc14 <USBD_SetConfig+0x118>)
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	461a      	mov	r2, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d01d      	beq.n	800bbf0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	4619      	mov	r1, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7ff f9d1 	bl	800af64 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800bbc2:	4b14      	ldr	r3, [pc, #80]	; (800bc14 <USBD_SetConfig+0x118>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bbcc:	4b11      	ldr	r3, [pc, #68]	; (800bc14 <USBD_SetConfig+0x118>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f7ff f9a7 	bl	800af26 <USBD_SetClassConfig>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b02      	cmp	r3, #2
 800bbdc:	d104      	bne.n	800bbe8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800bbde:	6839      	ldr	r1, [r7, #0]
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 f8f2 	bl	800bdca <USBD_CtlError>
            return;
 800bbe6:	e012      	b.n	800bc0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f9b6 	bl	800bf5a <USBD_CtlSendStatus>
        break;
 800bbee:	e00e      	b.n	800bc0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f9b2 	bl	800bf5a <USBD_CtlSendStatus>
        break;
 800bbf6:	e00a      	b.n	800bc0e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f8e5 	bl	800bdca <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800bc00:	4b04      	ldr	r3, [pc, #16]	; (800bc14 <USBD_SetConfig+0x118>)
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	4619      	mov	r1, r3
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7ff f9ac 	bl	800af64 <USBD_ClrClassConfig>
        break;
 800bc0c:	bf00      	nop
    }
  }
}
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	20000d2c 	.word	0x20000d2c

0800bc18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	88db      	ldrh	r3, [r3, #6]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d004      	beq.n	800bc34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f8cc 	bl	800bdca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bc32:	e022      	b.n	800bc7a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	dc02      	bgt.n	800bc44 <USBD_GetConfig+0x2c>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	dc03      	bgt.n	800bc4a <USBD_GetConfig+0x32>
 800bc42:	e015      	b.n	800bc70 <USBD_GetConfig+0x58>
 800bc44:	2b03      	cmp	r3, #3
 800bc46:	d00b      	beq.n	800bc60 <USBD_GetConfig+0x48>
 800bc48:	e012      	b.n	800bc70 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	3308      	adds	r3, #8
 800bc54:	2201      	movs	r2, #1
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f920 	bl	800be9e <USBD_CtlSendData>
        break;
 800bc5e:	e00c      	b.n	800bc7a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	3304      	adds	r3, #4
 800bc64:	2201      	movs	r2, #1
 800bc66:	4619      	mov	r1, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f918 	bl	800be9e <USBD_CtlSendData>
        break;
 800bc6e:	e004      	b.n	800bc7a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f8a9 	bl	800bdca <USBD_CtlError>
        break;
 800bc78:	bf00      	nop
}
 800bc7a:	bf00      	nop
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b082      	sub	sp, #8
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc92:	3b01      	subs	r3, #1
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	d81e      	bhi.n	800bcd6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	88db      	ldrh	r3, [r3, #6]
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d004      	beq.n	800bcaa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f891 	bl	800bdca <USBD_CtlError>
        break;
 800bca8:	e01a      	b.n	800bce0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2201      	movs	r2, #1
 800bcae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d005      	beq.n	800bcc6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	f043 0202 	orr.w	r2, r3, #2
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	330c      	adds	r3, #12
 800bcca:	2202      	movs	r2, #2
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f8e5 	bl	800be9e <USBD_CtlSendData>
      break;
 800bcd4:	e004      	b.n	800bce0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f876 	bl	800bdca <USBD_CtlError>
      break;
 800bcde:	bf00      	nop
  }
}
 800bce0:	bf00      	nop
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	885b      	ldrh	r3, [r3, #2]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d106      	bne.n	800bd08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 f929 	bl	800bf5a <USBD_CtlSendStatus>
  }
}
 800bd08:	bf00      	nop
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd20:	3b01      	subs	r3, #1
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d80b      	bhi.n	800bd3e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	885b      	ldrh	r3, [r3, #2]
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d10c      	bne.n	800bd48 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 f90f 	bl	800bf5a <USBD_CtlSendStatus>
      }
      break;
 800bd3c:	e004      	b.n	800bd48 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f842 	bl	800bdca <USBD_CtlError>
      break;
 800bd46:	e000      	b.n	800bd4a <USBD_ClrFeature+0x3a>
      break;
 800bd48:	bf00      	nop
  }
}
 800bd4a:	bf00      	nop
 800bd4c:	3708      	adds	r7, #8
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bd52:	b480      	push	{r7}
 800bd54:	b083      	sub	sp, #12
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781a      	ldrb	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	785a      	ldrb	r2, [r3, #1]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	3302      	adds	r3, #2
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	3303      	adds	r3, #3
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	021b      	lsls	r3, r3, #8
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	4413      	add	r3, r2
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	3305      	adds	r3, #5
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	021b      	lsls	r3, r3, #8
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	4413      	add	r3, r2
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	3306      	adds	r3, #6
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	3307      	adds	r3, #7
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	021b      	lsls	r3, r3, #8
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	4413      	add	r3, r2
 800bdba:	b29a      	uxth	r2, r3
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	80da      	strh	r2, [r3, #6]

}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bc80      	pop	{r7}
 800bdc8:	4770      	bx	lr

0800bdca <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b082      	sub	sp, #8
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bdd4:	2180      	movs	r1, #128	; 0x80
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fc7a 	bl	800c6d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800bddc:	2100      	movs	r1, #0
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fc76 	bl	800c6d0 <USBD_LL_StallEP>
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d032      	beq.n	800be68 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f000 f834 	bl	800be70 <USBD_GetLen>
 800be08:	4603      	mov	r3, r0
 800be0a:	3301      	adds	r3, #1
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	b29a      	uxth	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800be16:	7dfb      	ldrb	r3, [r7, #23]
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	75fa      	strb	r2, [r7, #23]
 800be1c:	461a      	mov	r2, r3
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	4413      	add	r3, r2
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	7812      	ldrb	r2, [r2, #0]
 800be26:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800be28:	7dfb      	ldrb	r3, [r7, #23]
 800be2a:	1c5a      	adds	r2, r3, #1
 800be2c:	75fa      	strb	r2, [r7, #23]
 800be2e:	461a      	mov	r2, r3
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	4413      	add	r3, r2
 800be34:	2203      	movs	r2, #3
 800be36:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800be38:	e012      	b.n	800be60 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	1c5a      	adds	r2, r3, #1
 800be3e:	60fa      	str	r2, [r7, #12]
 800be40:	7dfa      	ldrb	r2, [r7, #23]
 800be42:	1c51      	adds	r1, r2, #1
 800be44:	75f9      	strb	r1, [r7, #23]
 800be46:	4611      	mov	r1, r2
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	440a      	add	r2, r1
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800be50:	7dfb      	ldrb	r3, [r7, #23]
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	75fa      	strb	r2, [r7, #23]
 800be56:	461a      	mov	r2, r3
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	4413      	add	r3, r2
 800be5c:	2200      	movs	r2, #0
 800be5e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1e8      	bne.n	800be3a <USBD_GetString+0x4e>
    }
  }
}
 800be68:	bf00      	nop
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be78:	2300      	movs	r3, #0
 800be7a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800be7c:	e005      	b.n	800be8a <USBD_GetLen+0x1a>
  {
    len++;
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
 800be80:	3301      	adds	r3, #1
 800be82:	73fb      	strb	r3, [r7, #15]
    buf++;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	3301      	adds	r3, #1
 800be88:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1f5      	bne.n	800be7e <USBD_GetLen+0xe>
  }

  return len;
 800be92:	7bfb      	ldrb	r3, [r7, #15]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3714      	adds	r7, #20
 800be98:	46bd      	mov	sp, r7
 800be9a:	bc80      	pop	{r7}
 800be9c:	4770      	bx	lr

0800be9e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	60f8      	str	r0, [r7, #12]
 800bea6:	60b9      	str	r1, [r7, #8]
 800bea8:	4613      	mov	r3, r2
 800beaa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2202      	movs	r2, #2
 800beb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800beb4:	88fa      	ldrh	r2, [r7, #6]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800beba:	88fa      	ldrh	r2, [r7, #6]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bec0:	88fb      	ldrh	r3, [r7, #6]
 800bec2:	68ba      	ldr	r2, [r7, #8]
 800bec4:	2100      	movs	r1, #0
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f000 fc8b 	bl	800c7e2 <USBD_LL_Transmit>

  return USBD_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}

0800bed6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bed6:	b580      	push	{r7, lr}
 800bed8:	b084      	sub	sp, #16
 800beda:	af00      	add	r7, sp, #0
 800bedc:	60f8      	str	r0, [r7, #12]
 800bede:	60b9      	str	r1, [r7, #8]
 800bee0:	4613      	mov	r3, r2
 800bee2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bee4:	88fb      	ldrh	r3, [r7, #6]
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	2100      	movs	r1, #0
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f000 fc79 	bl	800c7e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b084      	sub	sp, #16
 800befe:	af00      	add	r7, sp, #0
 800bf00:	60f8      	str	r0, [r7, #12]
 800bf02:	60b9      	str	r1, [r7, #8]
 800bf04:	4613      	mov	r3, r2
 800bf06:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2203      	movs	r2, #3
 800bf0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bf10:	88fa      	ldrh	r2, [r7, #6]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800bf18:	88fa      	ldrh	r2, [r7, #6]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf20:	88fb      	ldrh	r3, [r7, #6]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	2100      	movs	r1, #0
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f000 fc7e 	bl	800c828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b084      	sub	sp, #16
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	60f8      	str	r0, [r7, #12]
 800bf3e:	60b9      	str	r1, [r7, #8]
 800bf40:	4613      	mov	r3, r2
 800bf42:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bf44:	88fb      	ldrh	r3, [r7, #6]
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	2100      	movs	r1, #0
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f000 fc6c 	bl	800c828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf50:	2300      	movs	r3, #0
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}

0800bf5a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bf5a:	b580      	push	{r7, lr}
 800bf5c:	b082      	sub	sp, #8
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2204      	movs	r2, #4
 800bf66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2100      	movs	r1, #0
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fc36 	bl	800c7e2 <USBD_LL_Transmit>

  return USBD_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2205      	movs	r2, #5
 800bf8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf90:	2300      	movs	r3, #0
 800bf92:	2200      	movs	r2, #0
 800bf94:	2100      	movs	r1, #0
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fc46 	bl	800c828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
	...

0800bfa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bfac:	2200      	movs	r2, #0
 800bfae:	4912      	ldr	r1, [pc, #72]	; (800bff8 <MX_USB_DEVICE_Init+0x50>)
 800bfb0:	4812      	ldr	r0, [pc, #72]	; (800bffc <MX_USB_DEVICE_Init+0x54>)
 800bfb2:	f7fe ff5e 	bl	800ae72 <USBD_Init>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bfbc:	f7f5 fb42 	bl	8001644 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bfc0:	490f      	ldr	r1, [pc, #60]	; (800c000 <MX_USB_DEVICE_Init+0x58>)
 800bfc2:	480e      	ldr	r0, [pc, #56]	; (800bffc <MX_USB_DEVICE_Init+0x54>)
 800bfc4:	f7fe ff80 	bl	800aec8 <USBD_RegisterClass>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bfce:	f7f5 fb39 	bl	8001644 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bfd2:	490c      	ldr	r1, [pc, #48]	; (800c004 <MX_USB_DEVICE_Init+0x5c>)
 800bfd4:	4809      	ldr	r0, [pc, #36]	; (800bffc <MX_USB_DEVICE_Init+0x54>)
 800bfd6:	f7fe feb1 	bl	800ad3c <USBD_CDC_RegisterInterface>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bfe0:	f7f5 fb30 	bl	8001644 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bfe4:	4805      	ldr	r0, [pc, #20]	; (800bffc <MX_USB_DEVICE_Init+0x54>)
 800bfe6:	f7fe ff88 	bl	800aefa <USBD_Start>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d001      	beq.n	800bff4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bff0:	f7f5 fb28 	bl	8001644 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bff4:	bf00      	nop
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20000364 	.word	0x20000364
 800bffc:	20000d30 	.word	0x20000d30
 800c000:	20000248 	.word	0x20000248
 800c004:	20000354 	.word	0x20000354

0800c008 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c00c:	2200      	movs	r2, #0
 800c00e:	4905      	ldr	r1, [pc, #20]	; (800c024 <CDC_Init_FS+0x1c>)
 800c010:	4805      	ldr	r0, [pc, #20]	; (800c028 <CDC_Init_FS+0x20>)
 800c012:	f7fe fea9 	bl	800ad68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c016:	4905      	ldr	r1, [pc, #20]	; (800c02c <CDC_Init_FS+0x24>)
 800c018:	4803      	ldr	r0, [pc, #12]	; (800c028 <CDC_Init_FS+0x20>)
 800c01a:	f7fe febe 	bl	800ad9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c01e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c020:	4618      	mov	r0, r3
 800c022:	bd80      	pop	{r7, pc}
 800c024:	200013dc 	.word	0x200013dc
 800c028:	20000d30 	.word	0x20000d30
 800c02c:	20000ff4 	.word	0x20000ff4

0800c030 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c030:	b480      	push	{r7}
 800c032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c034:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c036:	4618      	mov	r0, r3
 800c038:	46bd      	mov	sp, r7
 800c03a:	bc80      	pop	{r7}
 800c03c:	4770      	bx	lr
	...

0800c040 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	4603      	mov	r3, r0
 800c048:	6039      	str	r1, [r7, #0]
 800c04a:	71fb      	strb	r3, [r7, #7]
 800c04c:	4613      	mov	r3, r2
 800c04e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c050:	79fb      	ldrb	r3, [r7, #7]
 800c052:	2b23      	cmp	r3, #35	; 0x23
 800c054:	d85c      	bhi.n	800c110 <CDC_Control_FS+0xd0>
 800c056:	a201      	add	r2, pc, #4	; (adr r2, 800c05c <CDC_Control_FS+0x1c>)
 800c058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05c:	0800c111 	.word	0x0800c111
 800c060:	0800c111 	.word	0x0800c111
 800c064:	0800c111 	.word	0x0800c111
 800c068:	0800c111 	.word	0x0800c111
 800c06c:	0800c111 	.word	0x0800c111
 800c070:	0800c111 	.word	0x0800c111
 800c074:	0800c111 	.word	0x0800c111
 800c078:	0800c111 	.word	0x0800c111
 800c07c:	0800c111 	.word	0x0800c111
 800c080:	0800c111 	.word	0x0800c111
 800c084:	0800c111 	.word	0x0800c111
 800c088:	0800c111 	.word	0x0800c111
 800c08c:	0800c111 	.word	0x0800c111
 800c090:	0800c111 	.word	0x0800c111
 800c094:	0800c111 	.word	0x0800c111
 800c098:	0800c111 	.word	0x0800c111
 800c09c:	0800c111 	.word	0x0800c111
 800c0a0:	0800c111 	.word	0x0800c111
 800c0a4:	0800c111 	.word	0x0800c111
 800c0a8:	0800c111 	.word	0x0800c111
 800c0ac:	0800c111 	.word	0x0800c111
 800c0b0:	0800c111 	.word	0x0800c111
 800c0b4:	0800c111 	.word	0x0800c111
 800c0b8:	0800c111 	.word	0x0800c111
 800c0bc:	0800c111 	.word	0x0800c111
 800c0c0:	0800c111 	.word	0x0800c111
 800c0c4:	0800c111 	.word	0x0800c111
 800c0c8:	0800c111 	.word	0x0800c111
 800c0cc:	0800c111 	.word	0x0800c111
 800c0d0:	0800c111 	.word	0x0800c111
 800c0d4:	0800c111 	.word	0x0800c111
 800c0d8:	0800c111 	.word	0x0800c111
 800c0dc:	0800c0ed 	.word	0x0800c0ed
 800c0e0:	0800c0ff 	.word	0x0800c0ff
 800c0e4:	0800c111 	.word	0x0800c111
 800c0e8:	0800c111 	.word	0x0800c111
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800c0ec:	4b0c      	ldr	r3, [pc, #48]	; (800c120 <CDC_Control_FS+0xe0>)
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	6810      	ldr	r0, [r2, #0]
 800c0f2:	6018      	str	r0, [r3, #0]
 800c0f4:	8891      	ldrh	r1, [r2, #4]
 800c0f6:	7992      	ldrb	r2, [r2, #6]
 800c0f8:	8099      	strh	r1, [r3, #4]
 800c0fa:	719a      	strb	r2, [r3, #6]
    break;
 800c0fc:	e009      	b.n	800c112 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	4a07      	ldr	r2, [pc, #28]	; (800c120 <CDC_Control_FS+0xe0>)
 800c102:	6810      	ldr	r0, [r2, #0]
 800c104:	6018      	str	r0, [r3, #0]
 800c106:	8891      	ldrh	r1, [r2, #4]
 800c108:	7992      	ldrb	r2, [r2, #6]
 800c10a:	8099      	strh	r1, [r3, #4]
 800c10c:	719a      	strb	r2, [r3, #6]
    break;
 800c10e:	e000      	b.n	800c112 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c110:	bf00      	nop
  }

  return (USBD_OK);
 800c112:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	bc80      	pop	{r7}
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	2000034c 	.word	0x2000034c

0800c124 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d005      	beq.n	800c142 <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4619      	mov	r1, r3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7f4 fa4f 	bl	80005e0 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c142:	6879      	ldr	r1, [r7, #4]
 800c144:	4805      	ldr	r0, [pc, #20]	; (800c15c <CDC_Receive_FS+0x38>)
 800c146:	f7fe fe28 	bl	800ad9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c14a:	4804      	ldr	r0, [pc, #16]	; (800c15c <CDC_Receive_FS+0x38>)
 800c14c:	f7fe fe67 	bl	800ae1e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c150:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c152:	4618      	mov	r0, r3
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	20000d30 	.word	0x20000d30

0800c160 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c170:	4b0d      	ldr	r3, [pc, #52]	; (800c1a8 <CDC_Transmit_FS+0x48>)
 800c172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c176:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d001      	beq.n	800c186 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c182:	2301      	movs	r3, #1
 800c184:	e00b      	b.n	800c19e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c186:	887b      	ldrh	r3, [r7, #2]
 800c188:	461a      	mov	r2, r3
 800c18a:	6879      	ldr	r1, [r7, #4]
 800c18c:	4806      	ldr	r0, [pc, #24]	; (800c1a8 <CDC_Transmit_FS+0x48>)
 800c18e:	f7fe fdeb 	bl	800ad68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c192:	4805      	ldr	r0, [pc, #20]	; (800c1a8 <CDC_Transmit_FS+0x48>)
 800c194:	f7fe fe14 	bl	800adc0 <USBD_CDC_TransmitPacket>
 800c198:	4603      	mov	r3, r0
 800c19a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20000d30 	.word	0x20000d30

0800c1ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	6039      	str	r1, [r7, #0]
 800c1b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	2212      	movs	r2, #18
 800c1bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1be:	4b03      	ldr	r3, [pc, #12]	; (800c1cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bc80      	pop	{r7}
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	20000380 	.word	0x20000380

0800c1d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	6039      	str	r1, [r7, #0]
 800c1da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	2204      	movs	r2, #4
 800c1e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c1e2:	4b03      	ldr	r3, [pc, #12]	; (800c1f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bc80      	pop	{r7}
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	20000394 	.word	0x20000394

0800c1f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	6039      	str	r1, [r7, #0]
 800c1fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c200:	79fb      	ldrb	r3, [r7, #7]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d105      	bne.n	800c212 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	4907      	ldr	r1, [pc, #28]	; (800c228 <USBD_FS_ProductStrDescriptor+0x34>)
 800c20a:	4808      	ldr	r0, [pc, #32]	; (800c22c <USBD_FS_ProductStrDescriptor+0x38>)
 800c20c:	f7ff fdee 	bl	800bdec <USBD_GetString>
 800c210:	e004      	b.n	800c21c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	4904      	ldr	r1, [pc, #16]	; (800c228 <USBD_FS_ProductStrDescriptor+0x34>)
 800c216:	4805      	ldr	r0, [pc, #20]	; (800c22c <USBD_FS_ProductStrDescriptor+0x38>)
 800c218:	f7ff fde8 	bl	800bdec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c21c:	4b02      	ldr	r3, [pc, #8]	; (800c228 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	200017c4 	.word	0x200017c4
 800c22c:	0800d39c 	.word	0x0800d39c

0800c230 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	4603      	mov	r3, r0
 800c238:	6039      	str	r1, [r7, #0]
 800c23a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	4904      	ldr	r1, [pc, #16]	; (800c250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c240:	4804      	ldr	r0, [pc, #16]	; (800c254 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c242:	f7ff fdd3 	bl	800bdec <USBD_GetString>
  return USBD_StrDesc;
 800c246:	4b02      	ldr	r3, [pc, #8]	; (800c250 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3708      	adds	r7, #8
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	200017c4 	.word	0x200017c4
 800c254:	0800d3b0 	.word	0x0800d3b0

0800c258 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	6039      	str	r1, [r7, #0]
 800c262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	221a      	movs	r2, #26
 800c268:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c26a:	f000 f843 	bl	800c2f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c26e:	4b02      	ldr	r3, [pc, #8]	; (800c278 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c270:	4618      	mov	r0, r3
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	20000398 	.word	0x20000398

0800c27c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	4603      	mov	r3, r0
 800c284:	6039      	str	r1, [r7, #0]
 800c286:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c288:	79fb      	ldrb	r3, [r7, #7]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d105      	bne.n	800c29a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	4907      	ldr	r1, [pc, #28]	; (800c2b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c292:	4808      	ldr	r0, [pc, #32]	; (800c2b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c294:	f7ff fdaa 	bl	800bdec <USBD_GetString>
 800c298:	e004      	b.n	800c2a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c29a:	683a      	ldr	r2, [r7, #0]
 800c29c:	4904      	ldr	r1, [pc, #16]	; (800c2b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c29e:	4805      	ldr	r0, [pc, #20]	; (800c2b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2a0:	f7ff fda4 	bl	800bdec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2a4:	4b02      	ldr	r3, [pc, #8]	; (800c2b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3708      	adds	r7, #8
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	200017c4 	.word	0x200017c4
 800c2b4:	0800d3b8 	.word	0x0800d3b8

0800c2b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	4603      	mov	r3, r0
 800c2c0:	6039      	str	r1, [r7, #0]
 800c2c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2c4:	79fb      	ldrb	r3, [r7, #7]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d105      	bne.n	800c2d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	4907      	ldr	r1, [pc, #28]	; (800c2ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2ce:	4808      	ldr	r0, [pc, #32]	; (800c2f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2d0:	f7ff fd8c 	bl	800bdec <USBD_GetString>
 800c2d4:	e004      	b.n	800c2e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2d6:	683a      	ldr	r2, [r7, #0]
 800c2d8:	4904      	ldr	r1, [pc, #16]	; (800c2ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2da:	4805      	ldr	r0, [pc, #20]	; (800c2f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2dc:	f7ff fd86 	bl	800bdec <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2e0:	4b02      	ldr	r3, [pc, #8]	; (800c2ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	200017c4 	.word	0x200017c4
 800c2f0:	0800d3c4 	.word	0x0800d3c4

0800c2f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c2fa:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <Get_SerialNum+0x44>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c300:	4b0e      	ldr	r3, [pc, #56]	; (800c33c <Get_SerialNum+0x48>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c306:	4b0e      	ldr	r3, [pc, #56]	; (800c340 <Get_SerialNum+0x4c>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4413      	add	r3, r2
 800c312:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d009      	beq.n	800c32e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c31a:	2208      	movs	r2, #8
 800c31c:	4909      	ldr	r1, [pc, #36]	; (800c344 <Get_SerialNum+0x50>)
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f000 f814 	bl	800c34c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c324:	2204      	movs	r2, #4
 800c326:	4908      	ldr	r1, [pc, #32]	; (800c348 <Get_SerialNum+0x54>)
 800c328:	68b8      	ldr	r0, [r7, #8]
 800c32a:	f000 f80f 	bl	800c34c <IntToUnicode>
  }
}
 800c32e:	bf00      	nop
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	1ffff7e8 	.word	0x1ffff7e8
 800c33c:	1ffff7ec 	.word	0x1ffff7ec
 800c340:	1ffff7f0 	.word	0x1ffff7f0
 800c344:	2000039a 	.word	0x2000039a
 800c348:	200003aa 	.word	0x200003aa

0800c34c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b087      	sub	sp, #28
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	4613      	mov	r3, r2
 800c358:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c35e:	2300      	movs	r3, #0
 800c360:	75fb      	strb	r3, [r7, #23]
 800c362:	e027      	b.n	800c3b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	0f1b      	lsrs	r3, r3, #28
 800c368:	2b09      	cmp	r3, #9
 800c36a:	d80b      	bhi.n	800c384 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	0f1b      	lsrs	r3, r3, #28
 800c370:	b2da      	uxtb	r2, r3
 800c372:	7dfb      	ldrb	r3, [r7, #23]
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	4619      	mov	r1, r3
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	440b      	add	r3, r1
 800c37c:	3230      	adds	r2, #48	; 0x30
 800c37e:	b2d2      	uxtb	r2, r2
 800c380:	701a      	strb	r2, [r3, #0]
 800c382:	e00a      	b.n	800c39a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	0f1b      	lsrs	r3, r3, #28
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	7dfb      	ldrb	r3, [r7, #23]
 800c38c:	005b      	lsls	r3, r3, #1
 800c38e:	4619      	mov	r1, r3
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	440b      	add	r3, r1
 800c394:	3237      	adds	r2, #55	; 0x37
 800c396:	b2d2      	uxtb	r2, r2
 800c398:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	011b      	lsls	r3, r3, #4
 800c39e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3a0:	7dfb      	ldrb	r3, [r7, #23]
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3ae:	7dfb      	ldrb	r3, [r7, #23]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	75fb      	strb	r3, [r7, #23]
 800c3b4:	7dfa      	ldrb	r2, [r7, #23]
 800c3b6:	79fb      	ldrb	r3, [r7, #7]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d3d3      	bcc.n	800c364 <IntToUnicode+0x18>
  }
}
 800c3bc:	bf00      	nop
 800c3be:	bf00      	nop
 800c3c0:	371c      	adds	r7, #28
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bc80      	pop	{r7}
 800c3c6:	4770      	bx	lr

0800c3c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a11      	ldr	r2, [pc, #68]	; (800c41c <HAL_PCD_MspInit+0x54>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d11b      	bne.n	800c412 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c3da:	4b11      	ldr	r3, [pc, #68]	; (800c420 <HAL_PCD_MspInit+0x58>)
 800c3dc:	69db      	ldr	r3, [r3, #28]
 800c3de:	4a10      	ldr	r2, [pc, #64]	; (800c420 <HAL_PCD_MspInit+0x58>)
 800c3e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c3e4:	61d3      	str	r3, [r2, #28]
 800c3e6:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <HAL_PCD_MspInit+0x58>)
 800c3e8:	69db      	ldr	r3, [r3, #28]
 800c3ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3ee:	60fb      	str	r3, [r7, #12]
 800c3f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	2013      	movs	r0, #19
 800c3f8:	f7f7 fe79 	bl	80040ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800c3fc:	2013      	movs	r0, #19
 800c3fe:	f7f7 fe92 	bl	8004126 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c402:	2200      	movs	r2, #0
 800c404:	2100      	movs	r1, #0
 800c406:	2014      	movs	r0, #20
 800c408:	f7f7 fe71 	bl	80040ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c40c:	2014      	movs	r0, #20
 800c40e:	f7f7 fe8a 	bl	8004126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c412:	bf00      	nop
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	40005c00 	.word	0x40005c00
 800c420:	40021000 	.word	0x40021000

0800c424 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c438:	4619      	mov	r1, r3
 800c43a:	4610      	mov	r0, r2
 800c43c:	f7fe fda5 	bl	800af8a <USBD_LL_SetupStage>
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	460b      	mov	r3, r1
 800c452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c45a:	78fa      	ldrb	r2, [r7, #3]
 800c45c:	6879      	ldr	r1, [r7, #4]
 800c45e:	4613      	mov	r3, r2
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	4413      	add	r3, r2
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	440b      	add	r3, r1
 800c468:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	78fb      	ldrb	r3, [r7, #3]
 800c470:	4619      	mov	r1, r3
 800c472:	f7fe fdd7 	bl	800b024 <USBD_LL_DataOutStage>
}
 800c476:	bf00      	nop
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b082      	sub	sp, #8
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	460b      	mov	r3, r1
 800c488:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c490:	78fa      	ldrb	r2, [r7, #3]
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	4613      	mov	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	440b      	add	r3, r1
 800c49e:	333c      	adds	r3, #60	; 0x3c
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	78fb      	ldrb	r3, [r7, #3]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	f7fe fe2e 	bl	800b106 <USBD_LL_DataInStage>
}
 800c4aa:	bf00      	nop
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b082      	sub	sp, #8
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7fe ff3e 	bl	800b342 <USBD_LL_SOF>
}
 800c4c6:	bf00      	nop
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	d001      	beq.n	800c4e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c4e2:	f7f5 f8af 	bl	8001644 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c4ec:	7bfa      	ldrb	r2, [r7, #15]
 800c4ee:	4611      	mov	r1, r2
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fe feee 	bl	800b2d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7fe fea7 	bl	800b250 <USBD_LL_Reset>
}
 800c502:	bf00      	nop
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fe fee8 	bl	800b2f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	699b      	ldr	r3, [r3, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d005      	beq.n	800c534 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c528:	4b04      	ldr	r3, [pc, #16]	; (800c53c <HAL_PCD_SuspendCallback+0x30>)
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	4a03      	ldr	r2, [pc, #12]	; (800c53c <HAL_PCD_SuspendCallback+0x30>)
 800c52e:	f043 0306 	orr.w	r3, r3, #6
 800c532:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c534:	bf00      	nop
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	e000ed00 	.word	0xe000ed00

0800c540 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fe fee2 	bl	800b318 <USBD_LL_Resume>
}
 800c554:	bf00      	nop
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c564:	4a28      	ldr	r2, [pc, #160]	; (800c608 <USBD_LL_Init+0xac>)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a26      	ldr	r2, [pc, #152]	; (800c608 <USBD_LL_Init+0xac>)
 800c570:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c574:	4b24      	ldr	r3, [pc, #144]	; (800c608 <USBD_LL_Init+0xac>)
 800c576:	4a25      	ldr	r2, [pc, #148]	; (800c60c <USBD_LL_Init+0xb0>)
 800c578:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c57a:	4b23      	ldr	r3, [pc, #140]	; (800c608 <USBD_LL_Init+0xac>)
 800c57c:	2208      	movs	r2, #8
 800c57e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c580:	4b21      	ldr	r3, [pc, #132]	; (800c608 <USBD_LL_Init+0xac>)
 800c582:	2202      	movs	r2, #2
 800c584:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c586:	4b20      	ldr	r3, [pc, #128]	; (800c608 <USBD_LL_Init+0xac>)
 800c588:	2200      	movs	r2, #0
 800c58a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c58c:	4b1e      	ldr	r3, [pc, #120]	; (800c608 <USBD_LL_Init+0xac>)
 800c58e:	2200      	movs	r2, #0
 800c590:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c592:	4b1d      	ldr	r3, [pc, #116]	; (800c608 <USBD_LL_Init+0xac>)
 800c594:	2200      	movs	r2, #0
 800c596:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c598:	481b      	ldr	r0, [pc, #108]	; (800c608 <USBD_LL_Init+0xac>)
 800c59a:	f7f7 ffbf 	bl	800451c <HAL_PCD_Init>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d001      	beq.n	800c5a8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c5a4:	f7f5 f84e 	bl	8001644 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c5ae:	2318      	movs	r3, #24
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	f7f9 fc33 	bl	8005e1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c5be:	2358      	movs	r3, #88	; 0x58
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2180      	movs	r1, #128	; 0x80
 800c5c4:	f7f9 fc2b 	bl	8005e1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c5ce:	23c0      	movs	r3, #192	; 0xc0
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	2181      	movs	r1, #129	; 0x81
 800c5d4:	f7f9 fc23 	bl	8005e1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c5de:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	f7f9 fc1a 	bl	8005e1e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c5f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	2182      	movs	r1, #130	; 0x82
 800c5f8:	f7f9 fc11 	bl	8005e1e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c5fc:	2300      	movs	r3, #0
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	200019c4 	.word	0x200019c4
 800c60c:	40005c00 	.word	0x40005c00

0800c610 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c618:	2300      	movs	r3, #0
 800c61a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c61c:	2300      	movs	r3, #0
 800c61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c626:	4618      	mov	r0, r3
 800c628:	f7f8 f883 	bl	8004732 <HAL_PCD_Start>
 800c62c:	4603      	mov	r3, r0
 800c62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	4618      	mov	r0, r3
 800c634:	f000 f94e 	bl	800c8d4 <USBD_Get_USB_Status>
 800c638:	4603      	mov	r3, r0
 800c63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	4608      	mov	r0, r1
 800c650:	4611      	mov	r1, r2
 800c652:	461a      	mov	r2, r3
 800c654:	4603      	mov	r3, r0
 800c656:	70fb      	strb	r3, [r7, #3]
 800c658:	460b      	mov	r3, r1
 800c65a:	70bb      	strb	r3, [r7, #2]
 800c65c:	4613      	mov	r3, r2
 800c65e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c660:	2300      	movs	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c664:	2300      	movs	r3, #0
 800c666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c66e:	78bb      	ldrb	r3, [r7, #2]
 800c670:	883a      	ldrh	r2, [r7, #0]
 800c672:	78f9      	ldrb	r1, [r7, #3]
 800c674:	f7f8 f9fb 	bl	8004a6e <HAL_PCD_EP_Open>
 800c678:	4603      	mov	r3, r0
 800c67a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 f928 	bl	800c8d4 <USBD_Get_USB_Status>
 800c684:	4603      	mov	r3, r0
 800c686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c688:	7bbb      	ldrb	r3, [r7, #14]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3710      	adds	r7, #16
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c692:	b580      	push	{r7, lr}
 800c694:	b084      	sub	sp, #16
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	460b      	mov	r3, r1
 800c69c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6ac:	78fa      	ldrb	r2, [r7, #3]
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7f8 fa42 	bl	8004b3a <HAL_PCD_EP_Close>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f000 f909 	bl	800c8d4 <USBD_Get_USB_Status>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6ea:	78fa      	ldrb	r2, [r7, #3]
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7f8 fb02 	bl	8004cf8 <HAL_PCD_EP_SetStall>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 f8ea 	bl	800c8d4 <USBD_Get_USB_Status>
 800c700:	4603      	mov	r3, r0
 800c702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c704:	7bbb      	ldrb	r3, [r7, #14]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b084      	sub	sp, #16
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	460b      	mov	r3, r1
 800c718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c728:	78fa      	ldrb	r2, [r7, #3]
 800c72a:	4611      	mov	r1, r2
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7f8 fb43 	bl	8004db8 <HAL_PCD_EP_ClrStall>
 800c732:	4603      	mov	r3, r0
 800c734:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c736:	7bfb      	ldrb	r3, [r7, #15]
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 f8cb 	bl	800c8d4 <USBD_Get_USB_Status>
 800c73e:	4603      	mov	r3, r0
 800c740:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c742:	7bbb      	ldrb	r3, [r7, #14]
}
 800c744:	4618      	mov	r0, r3
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	460b      	mov	r3, r1
 800c756:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c75e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c764:	2b00      	cmp	r3, #0
 800c766:	da0c      	bge.n	800c782 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c768:	78fb      	ldrb	r3, [r7, #3]
 800c76a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c76e:	68f9      	ldr	r1, [r7, #12]
 800c770:	1c5a      	adds	r2, r3, #1
 800c772:	4613      	mov	r3, r2
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	4413      	add	r3, r2
 800c778:	00db      	lsls	r3, r3, #3
 800c77a:	440b      	add	r3, r1
 800c77c:	3302      	adds	r3, #2
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	e00b      	b.n	800c79a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c782:	78fb      	ldrb	r3, [r7, #3]
 800c784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c788:	68f9      	ldr	r1, [r7, #12]
 800c78a:	4613      	mov	r3, r2
 800c78c:	009b      	lsls	r3, r3, #2
 800c78e:	4413      	add	r3, r2
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	440b      	add	r3, r1
 800c794:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c798:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bc80      	pop	{r7}
 800c7a2:	4770      	bx	lr

0800c7a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7be:	78fa      	ldrb	r2, [r7, #3]
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7f8 f92e 	bl	8004a24 <HAL_PCD_SetAddress>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f000 f880 	bl	800c8d4 <USBD_Get_USB_Status>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b086      	sub	sp, #24
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	60f8      	str	r0, [r7, #12]
 800c7ea:	607a      	str	r2, [r7, #4]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	72fb      	strb	r3, [r7, #11]
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c804:	893b      	ldrh	r3, [r7, #8]
 800c806:	7af9      	ldrb	r1, [r7, #11]
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	f7f8 fa32 	bl	8004c72 <HAL_PCD_EP_Transmit>
 800c80e:	4603      	mov	r3, r0
 800c810:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c812:	7dfb      	ldrb	r3, [r7, #23]
 800c814:	4618      	mov	r0, r3
 800c816:	f000 f85d 	bl	800c8d4 <USBD_Get_USB_Status>
 800c81a:	4603      	mov	r3, r0
 800c81c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c81e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3718      	adds	r7, #24
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	607a      	str	r2, [r7, #4]
 800c832:	461a      	mov	r2, r3
 800c834:	460b      	mov	r3, r1
 800c836:	72fb      	strb	r3, [r7, #11]
 800c838:	4613      	mov	r3, r2
 800c83a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c840:	2300      	movs	r3, #0
 800c842:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c84a:	893b      	ldrh	r3, [r7, #8]
 800c84c:	7af9      	ldrb	r1, [r7, #11]
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	f7f8 f9bb 	bl	8004bca <HAL_PCD_EP_Receive>
 800c854:	4603      	mov	r3, r0
 800c856:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c858:	7dfb      	ldrb	r3, [r7, #23]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f000 f83a 	bl	800c8d4 <USBD_Get_USB_Status>
 800c860:	4603      	mov	r3, r0
 800c862:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c864:	7dbb      	ldrb	r3, [r7, #22]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3718      	adds	r7, #24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b082      	sub	sp, #8
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	460b      	mov	r3, r1
 800c878:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c880:	78fa      	ldrb	r2, [r7, #3]
 800c882:	4611      	mov	r1, r2
 800c884:	4618      	mov	r0, r3
 800c886:	f7f8 f9dd 	bl	8004c44 <HAL_PCD_EP_GetRxCount>
 800c88a:	4603      	mov	r3, r0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c89c:	4b02      	ldr	r3, [pc, #8]	; (800c8a8 <USBD_static_malloc+0x14>)
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bc80      	pop	{r7}
 800c8a6:	4770      	bx	lr
 800c8a8:	20001cb0 	.word	0x20001cb0

0800c8ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]

}
 800c8b4:	bf00      	nop
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bc80      	pop	{r7}
 800c8bc:	4770      	bx	lr

0800c8be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b083      	sub	sp, #12
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c8ca:	bf00      	nop
 800c8cc:	370c      	adds	r7, #12
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bc80      	pop	{r7}
 800c8d2:	4770      	bx	lr

0800c8d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	4603      	mov	r3, r0
 800c8dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d817      	bhi.n	800c918 <USBD_Get_USB_Status+0x44>
 800c8e8:	a201      	add	r2, pc, #4	; (adr r2, 800c8f0 <USBD_Get_USB_Status+0x1c>)
 800c8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ee:	bf00      	nop
 800c8f0:	0800c901 	.word	0x0800c901
 800c8f4:	0800c907 	.word	0x0800c907
 800c8f8:	0800c90d 	.word	0x0800c90d
 800c8fc:	0800c913 	.word	0x0800c913
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c900:	2300      	movs	r3, #0
 800c902:	73fb      	strb	r3, [r7, #15]
    break;
 800c904:	e00b      	b.n	800c91e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c906:	2302      	movs	r3, #2
 800c908:	73fb      	strb	r3, [r7, #15]
    break;
 800c90a:	e008      	b.n	800c91e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c90c:	2301      	movs	r3, #1
 800c90e:	73fb      	strb	r3, [r7, #15]
    break;
 800c910:	e005      	b.n	800c91e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c912:	2302      	movs	r3, #2
 800c914:	73fb      	strb	r3, [r7, #15]
    break;
 800c916:	e002      	b.n	800c91e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c918:	2302      	movs	r3, #2
 800c91a:	73fb      	strb	r3, [r7, #15]
    break;
 800c91c:	bf00      	nop
  }
  return usb_status;
 800c91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c920:	4618      	mov	r0, r3
 800c922:	3714      	adds	r7, #20
 800c924:	46bd      	mov	sp, r7
 800c926:	bc80      	pop	{r7}
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop

0800c92c <__errno>:
 800c92c:	4b01      	ldr	r3, [pc, #4]	; (800c934 <__errno+0x8>)
 800c92e:	6818      	ldr	r0, [r3, #0]
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	200003b4 	.word	0x200003b4

0800c938 <__libc_init_array>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	2600      	movs	r6, #0
 800c93c:	4d0c      	ldr	r5, [pc, #48]	; (800c970 <__libc_init_array+0x38>)
 800c93e:	4c0d      	ldr	r4, [pc, #52]	; (800c974 <__libc_init_array+0x3c>)
 800c940:	1b64      	subs	r4, r4, r5
 800c942:	10a4      	asrs	r4, r4, #2
 800c944:	42a6      	cmp	r6, r4
 800c946:	d109      	bne.n	800c95c <__libc_init_array+0x24>
 800c948:	f000 fcd6 	bl	800d2f8 <_init>
 800c94c:	2600      	movs	r6, #0
 800c94e:	4d0a      	ldr	r5, [pc, #40]	; (800c978 <__libc_init_array+0x40>)
 800c950:	4c0a      	ldr	r4, [pc, #40]	; (800c97c <__libc_init_array+0x44>)
 800c952:	1b64      	subs	r4, r4, r5
 800c954:	10a4      	asrs	r4, r4, #2
 800c956:	42a6      	cmp	r6, r4
 800c958:	d105      	bne.n	800c966 <__libc_init_array+0x2e>
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c960:	4798      	blx	r3
 800c962:	3601      	adds	r6, #1
 800c964:	e7ee      	b.n	800c944 <__libc_init_array+0xc>
 800c966:	f855 3b04 	ldr.w	r3, [r5], #4
 800c96a:	4798      	blx	r3
 800c96c:	3601      	adds	r6, #1
 800c96e:	e7f2      	b.n	800c956 <__libc_init_array+0x1e>
 800c970:	0800e26c 	.word	0x0800e26c
 800c974:	0800e26c 	.word	0x0800e26c
 800c978:	0800e26c 	.word	0x0800e26c
 800c97c:	0800e270 	.word	0x0800e270

0800c980 <memcpy>:
 800c980:	440a      	add	r2, r1
 800c982:	4291      	cmp	r1, r2
 800c984:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c988:	d100      	bne.n	800c98c <memcpy+0xc>
 800c98a:	4770      	bx	lr
 800c98c:	b510      	push	{r4, lr}
 800c98e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c992:	4291      	cmp	r1, r2
 800c994:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c998:	d1f9      	bne.n	800c98e <memcpy+0xe>
 800c99a:	bd10      	pop	{r4, pc}

0800c99c <memset>:
 800c99c:	4603      	mov	r3, r0
 800c99e:	4402      	add	r2, r0
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d100      	bne.n	800c9a6 <memset+0xa>
 800c9a4:	4770      	bx	lr
 800c9a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c9aa:	e7f9      	b.n	800c9a0 <memset+0x4>

0800c9ac <sniprintf>:
 800c9ac:	b40c      	push	{r2, r3}
 800c9ae:	b530      	push	{r4, r5, lr}
 800c9b0:	4b17      	ldr	r3, [pc, #92]	; (800ca10 <sniprintf+0x64>)
 800c9b2:	1e0c      	subs	r4, r1, #0
 800c9b4:	681d      	ldr	r5, [r3, #0]
 800c9b6:	b09d      	sub	sp, #116	; 0x74
 800c9b8:	da08      	bge.n	800c9cc <sniprintf+0x20>
 800c9ba:	238b      	movs	r3, #139	; 0x8b
 800c9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9c0:	602b      	str	r3, [r5, #0]
 800c9c2:	b01d      	add	sp, #116	; 0x74
 800c9c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9c8:	b002      	add	sp, #8
 800c9ca:	4770      	bx	lr
 800c9cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c9d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c9d4:	bf0c      	ite	eq
 800c9d6:	4623      	moveq	r3, r4
 800c9d8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c9dc:	9304      	str	r3, [sp, #16]
 800c9de:	9307      	str	r3, [sp, #28]
 800c9e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c9e4:	9002      	str	r0, [sp, #8]
 800c9e6:	9006      	str	r0, [sp, #24]
 800c9e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	ab21      	add	r3, sp, #132	; 0x84
 800c9f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c9f2:	a902      	add	r1, sp, #8
 800c9f4:	9301      	str	r3, [sp, #4]
 800c9f6:	f000 f88f 	bl	800cb18 <_svfiprintf_r>
 800c9fa:	1c43      	adds	r3, r0, #1
 800c9fc:	bfbc      	itt	lt
 800c9fe:	238b      	movlt	r3, #139	; 0x8b
 800ca00:	602b      	strlt	r3, [r5, #0]
 800ca02:	2c00      	cmp	r4, #0
 800ca04:	d0dd      	beq.n	800c9c2 <sniprintf+0x16>
 800ca06:	2200      	movs	r2, #0
 800ca08:	9b02      	ldr	r3, [sp, #8]
 800ca0a:	701a      	strb	r2, [r3, #0]
 800ca0c:	e7d9      	b.n	800c9c2 <sniprintf+0x16>
 800ca0e:	bf00      	nop
 800ca10:	200003b4 	.word	0x200003b4

0800ca14 <strncmp>:
 800ca14:	4603      	mov	r3, r0
 800ca16:	b510      	push	{r4, lr}
 800ca18:	b172      	cbz	r2, 800ca38 <strncmp+0x24>
 800ca1a:	3901      	subs	r1, #1
 800ca1c:	1884      	adds	r4, r0, r2
 800ca1e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ca22:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ca26:	4290      	cmp	r0, r2
 800ca28:	d101      	bne.n	800ca2e <strncmp+0x1a>
 800ca2a:	42a3      	cmp	r3, r4
 800ca2c:	d101      	bne.n	800ca32 <strncmp+0x1e>
 800ca2e:	1a80      	subs	r0, r0, r2
 800ca30:	bd10      	pop	{r4, pc}
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d1f3      	bne.n	800ca1e <strncmp+0xa>
 800ca36:	e7fa      	b.n	800ca2e <strncmp+0x1a>
 800ca38:	4610      	mov	r0, r2
 800ca3a:	e7f9      	b.n	800ca30 <strncmp+0x1c>

0800ca3c <strncpy>:
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	b510      	push	{r4, lr}
 800ca40:	3901      	subs	r1, #1
 800ca42:	b132      	cbz	r2, 800ca52 <strncpy+0x16>
 800ca44:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ca48:	3a01      	subs	r2, #1
 800ca4a:	f803 4b01 	strb.w	r4, [r3], #1
 800ca4e:	2c00      	cmp	r4, #0
 800ca50:	d1f7      	bne.n	800ca42 <strncpy+0x6>
 800ca52:	2100      	movs	r1, #0
 800ca54:	441a      	add	r2, r3
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d100      	bne.n	800ca5c <strncpy+0x20>
 800ca5a:	bd10      	pop	{r4, pc}
 800ca5c:	f803 1b01 	strb.w	r1, [r3], #1
 800ca60:	e7f9      	b.n	800ca56 <strncpy+0x1a>

0800ca62 <__ssputs_r>:
 800ca62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca66:	688e      	ldr	r6, [r1, #8]
 800ca68:	4682      	mov	sl, r0
 800ca6a:	429e      	cmp	r6, r3
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	4690      	mov	r8, r2
 800ca70:	461f      	mov	r7, r3
 800ca72:	d838      	bhi.n	800cae6 <__ssputs_r+0x84>
 800ca74:	898a      	ldrh	r2, [r1, #12]
 800ca76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca7a:	d032      	beq.n	800cae2 <__ssputs_r+0x80>
 800ca7c:	6825      	ldr	r5, [r4, #0]
 800ca7e:	6909      	ldr	r1, [r1, #16]
 800ca80:	3301      	adds	r3, #1
 800ca82:	eba5 0901 	sub.w	r9, r5, r1
 800ca86:	6965      	ldr	r5, [r4, #20]
 800ca88:	444b      	add	r3, r9
 800ca8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca92:	106d      	asrs	r5, r5, #1
 800ca94:	429d      	cmp	r5, r3
 800ca96:	bf38      	it	cc
 800ca98:	461d      	movcc	r5, r3
 800ca9a:	0553      	lsls	r3, r2, #21
 800ca9c:	d531      	bpl.n	800cb02 <__ssputs_r+0xa0>
 800ca9e:	4629      	mov	r1, r5
 800caa0:	f000 fb60 	bl	800d164 <_malloc_r>
 800caa4:	4606      	mov	r6, r0
 800caa6:	b950      	cbnz	r0, 800cabe <__ssputs_r+0x5c>
 800caa8:	230c      	movs	r3, #12
 800caaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caae:	f8ca 3000 	str.w	r3, [sl]
 800cab2:	89a3      	ldrh	r3, [r4, #12]
 800cab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cab8:	81a3      	strh	r3, [r4, #12]
 800caba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cabe:	464a      	mov	r2, r9
 800cac0:	6921      	ldr	r1, [r4, #16]
 800cac2:	f7ff ff5d 	bl	800c980 <memcpy>
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cad0:	81a3      	strh	r3, [r4, #12]
 800cad2:	6126      	str	r6, [r4, #16]
 800cad4:	444e      	add	r6, r9
 800cad6:	6026      	str	r6, [r4, #0]
 800cad8:	463e      	mov	r6, r7
 800cada:	6165      	str	r5, [r4, #20]
 800cadc:	eba5 0509 	sub.w	r5, r5, r9
 800cae0:	60a5      	str	r5, [r4, #8]
 800cae2:	42be      	cmp	r6, r7
 800cae4:	d900      	bls.n	800cae8 <__ssputs_r+0x86>
 800cae6:	463e      	mov	r6, r7
 800cae8:	4632      	mov	r2, r6
 800caea:	4641      	mov	r1, r8
 800caec:	6820      	ldr	r0, [r4, #0]
 800caee:	f000 fab7 	bl	800d060 <memmove>
 800caf2:	68a3      	ldr	r3, [r4, #8]
 800caf4:	2000      	movs	r0, #0
 800caf6:	1b9b      	subs	r3, r3, r6
 800caf8:	60a3      	str	r3, [r4, #8]
 800cafa:	6823      	ldr	r3, [r4, #0]
 800cafc:	4433      	add	r3, r6
 800cafe:	6023      	str	r3, [r4, #0]
 800cb00:	e7db      	b.n	800caba <__ssputs_r+0x58>
 800cb02:	462a      	mov	r2, r5
 800cb04:	f000 fba2 	bl	800d24c <_realloc_r>
 800cb08:	4606      	mov	r6, r0
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d1e1      	bne.n	800cad2 <__ssputs_r+0x70>
 800cb0e:	4650      	mov	r0, sl
 800cb10:	6921      	ldr	r1, [r4, #16]
 800cb12:	f000 fabf 	bl	800d094 <_free_r>
 800cb16:	e7c7      	b.n	800caa8 <__ssputs_r+0x46>

0800cb18 <_svfiprintf_r>:
 800cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb1c:	4698      	mov	r8, r3
 800cb1e:	898b      	ldrh	r3, [r1, #12]
 800cb20:	4607      	mov	r7, r0
 800cb22:	061b      	lsls	r3, r3, #24
 800cb24:	460d      	mov	r5, r1
 800cb26:	4614      	mov	r4, r2
 800cb28:	b09d      	sub	sp, #116	; 0x74
 800cb2a:	d50e      	bpl.n	800cb4a <_svfiprintf_r+0x32>
 800cb2c:	690b      	ldr	r3, [r1, #16]
 800cb2e:	b963      	cbnz	r3, 800cb4a <_svfiprintf_r+0x32>
 800cb30:	2140      	movs	r1, #64	; 0x40
 800cb32:	f000 fb17 	bl	800d164 <_malloc_r>
 800cb36:	6028      	str	r0, [r5, #0]
 800cb38:	6128      	str	r0, [r5, #16]
 800cb3a:	b920      	cbnz	r0, 800cb46 <_svfiprintf_r+0x2e>
 800cb3c:	230c      	movs	r3, #12
 800cb3e:	603b      	str	r3, [r7, #0]
 800cb40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb44:	e0d1      	b.n	800ccea <_svfiprintf_r+0x1d2>
 800cb46:	2340      	movs	r3, #64	; 0x40
 800cb48:	616b      	str	r3, [r5, #20]
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb4e:	2320      	movs	r3, #32
 800cb50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb54:	2330      	movs	r3, #48	; 0x30
 800cb56:	f04f 0901 	mov.w	r9, #1
 800cb5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd04 <_svfiprintf_r+0x1ec>
 800cb62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb66:	4623      	mov	r3, r4
 800cb68:	469a      	mov	sl, r3
 800cb6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb6e:	b10a      	cbz	r2, 800cb74 <_svfiprintf_r+0x5c>
 800cb70:	2a25      	cmp	r2, #37	; 0x25
 800cb72:	d1f9      	bne.n	800cb68 <_svfiprintf_r+0x50>
 800cb74:	ebba 0b04 	subs.w	fp, sl, r4
 800cb78:	d00b      	beq.n	800cb92 <_svfiprintf_r+0x7a>
 800cb7a:	465b      	mov	r3, fp
 800cb7c:	4622      	mov	r2, r4
 800cb7e:	4629      	mov	r1, r5
 800cb80:	4638      	mov	r0, r7
 800cb82:	f7ff ff6e 	bl	800ca62 <__ssputs_r>
 800cb86:	3001      	adds	r0, #1
 800cb88:	f000 80aa 	beq.w	800cce0 <_svfiprintf_r+0x1c8>
 800cb8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb8e:	445a      	add	r2, fp
 800cb90:	9209      	str	r2, [sp, #36]	; 0x24
 800cb92:	f89a 3000 	ldrb.w	r3, [sl]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f000 80a2 	beq.w	800cce0 <_svfiprintf_r+0x1c8>
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cba6:	f10a 0a01 	add.w	sl, sl, #1
 800cbaa:	9304      	str	r3, [sp, #16]
 800cbac:	9307      	str	r3, [sp, #28]
 800cbae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbb2:	931a      	str	r3, [sp, #104]	; 0x68
 800cbb4:	4654      	mov	r4, sl
 800cbb6:	2205      	movs	r2, #5
 800cbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbbc:	4851      	ldr	r0, [pc, #324]	; (800cd04 <_svfiprintf_r+0x1ec>)
 800cbbe:	f000 fa41 	bl	800d044 <memchr>
 800cbc2:	9a04      	ldr	r2, [sp, #16]
 800cbc4:	b9d8      	cbnz	r0, 800cbfe <_svfiprintf_r+0xe6>
 800cbc6:	06d0      	lsls	r0, r2, #27
 800cbc8:	bf44      	itt	mi
 800cbca:	2320      	movmi	r3, #32
 800cbcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbd0:	0711      	lsls	r1, r2, #28
 800cbd2:	bf44      	itt	mi
 800cbd4:	232b      	movmi	r3, #43	; 0x2b
 800cbd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbda:	f89a 3000 	ldrb.w	r3, [sl]
 800cbde:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe0:	d015      	beq.n	800cc0e <_svfiprintf_r+0xf6>
 800cbe2:	4654      	mov	r4, sl
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	f04f 0c0a 	mov.w	ip, #10
 800cbea:	9a07      	ldr	r2, [sp, #28]
 800cbec:	4621      	mov	r1, r4
 800cbee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbf2:	3b30      	subs	r3, #48	; 0x30
 800cbf4:	2b09      	cmp	r3, #9
 800cbf6:	d94e      	bls.n	800cc96 <_svfiprintf_r+0x17e>
 800cbf8:	b1b0      	cbz	r0, 800cc28 <_svfiprintf_r+0x110>
 800cbfa:	9207      	str	r2, [sp, #28]
 800cbfc:	e014      	b.n	800cc28 <_svfiprintf_r+0x110>
 800cbfe:	eba0 0308 	sub.w	r3, r0, r8
 800cc02:	fa09 f303 	lsl.w	r3, r9, r3
 800cc06:	4313      	orrs	r3, r2
 800cc08:	46a2      	mov	sl, r4
 800cc0a:	9304      	str	r3, [sp, #16]
 800cc0c:	e7d2      	b.n	800cbb4 <_svfiprintf_r+0x9c>
 800cc0e:	9b03      	ldr	r3, [sp, #12]
 800cc10:	1d19      	adds	r1, r3, #4
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	9103      	str	r1, [sp, #12]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	bfbb      	ittet	lt
 800cc1a:	425b      	neglt	r3, r3
 800cc1c:	f042 0202 	orrlt.w	r2, r2, #2
 800cc20:	9307      	strge	r3, [sp, #28]
 800cc22:	9307      	strlt	r3, [sp, #28]
 800cc24:	bfb8      	it	lt
 800cc26:	9204      	strlt	r2, [sp, #16]
 800cc28:	7823      	ldrb	r3, [r4, #0]
 800cc2a:	2b2e      	cmp	r3, #46	; 0x2e
 800cc2c:	d10c      	bne.n	800cc48 <_svfiprintf_r+0x130>
 800cc2e:	7863      	ldrb	r3, [r4, #1]
 800cc30:	2b2a      	cmp	r3, #42	; 0x2a
 800cc32:	d135      	bne.n	800cca0 <_svfiprintf_r+0x188>
 800cc34:	9b03      	ldr	r3, [sp, #12]
 800cc36:	3402      	adds	r4, #2
 800cc38:	1d1a      	adds	r2, r3, #4
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	9203      	str	r2, [sp, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	bfb8      	it	lt
 800cc42:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cc46:	9305      	str	r3, [sp, #20]
 800cc48:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cd08 <_svfiprintf_r+0x1f0>
 800cc4c:	2203      	movs	r2, #3
 800cc4e:	4650      	mov	r0, sl
 800cc50:	7821      	ldrb	r1, [r4, #0]
 800cc52:	f000 f9f7 	bl	800d044 <memchr>
 800cc56:	b140      	cbz	r0, 800cc6a <_svfiprintf_r+0x152>
 800cc58:	2340      	movs	r3, #64	; 0x40
 800cc5a:	eba0 000a 	sub.w	r0, r0, sl
 800cc5e:	fa03 f000 	lsl.w	r0, r3, r0
 800cc62:	9b04      	ldr	r3, [sp, #16]
 800cc64:	3401      	adds	r4, #1
 800cc66:	4303      	orrs	r3, r0
 800cc68:	9304      	str	r3, [sp, #16]
 800cc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc6e:	2206      	movs	r2, #6
 800cc70:	4826      	ldr	r0, [pc, #152]	; (800cd0c <_svfiprintf_r+0x1f4>)
 800cc72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc76:	f000 f9e5 	bl	800d044 <memchr>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d038      	beq.n	800ccf0 <_svfiprintf_r+0x1d8>
 800cc7e:	4b24      	ldr	r3, [pc, #144]	; (800cd10 <_svfiprintf_r+0x1f8>)
 800cc80:	bb1b      	cbnz	r3, 800ccca <_svfiprintf_r+0x1b2>
 800cc82:	9b03      	ldr	r3, [sp, #12]
 800cc84:	3307      	adds	r3, #7
 800cc86:	f023 0307 	bic.w	r3, r3, #7
 800cc8a:	3308      	adds	r3, #8
 800cc8c:	9303      	str	r3, [sp, #12]
 800cc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc90:	4433      	add	r3, r6
 800cc92:	9309      	str	r3, [sp, #36]	; 0x24
 800cc94:	e767      	b.n	800cb66 <_svfiprintf_r+0x4e>
 800cc96:	460c      	mov	r4, r1
 800cc98:	2001      	movs	r0, #1
 800cc9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc9e:	e7a5      	b.n	800cbec <_svfiprintf_r+0xd4>
 800cca0:	2300      	movs	r3, #0
 800cca2:	f04f 0c0a 	mov.w	ip, #10
 800cca6:	4619      	mov	r1, r3
 800cca8:	3401      	adds	r4, #1
 800ccaa:	9305      	str	r3, [sp, #20]
 800ccac:	4620      	mov	r0, r4
 800ccae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccb2:	3a30      	subs	r2, #48	; 0x30
 800ccb4:	2a09      	cmp	r2, #9
 800ccb6:	d903      	bls.n	800ccc0 <_svfiprintf_r+0x1a8>
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d0c5      	beq.n	800cc48 <_svfiprintf_r+0x130>
 800ccbc:	9105      	str	r1, [sp, #20]
 800ccbe:	e7c3      	b.n	800cc48 <_svfiprintf_r+0x130>
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccc8:	e7f0      	b.n	800ccac <_svfiprintf_r+0x194>
 800ccca:	ab03      	add	r3, sp, #12
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	462a      	mov	r2, r5
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	4b10      	ldr	r3, [pc, #64]	; (800cd14 <_svfiprintf_r+0x1fc>)
 800ccd4:	a904      	add	r1, sp, #16
 800ccd6:	f3af 8000 	nop.w
 800ccda:	1c42      	adds	r2, r0, #1
 800ccdc:	4606      	mov	r6, r0
 800ccde:	d1d6      	bne.n	800cc8e <_svfiprintf_r+0x176>
 800cce0:	89ab      	ldrh	r3, [r5, #12]
 800cce2:	065b      	lsls	r3, r3, #25
 800cce4:	f53f af2c 	bmi.w	800cb40 <_svfiprintf_r+0x28>
 800cce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccea:	b01d      	add	sp, #116	; 0x74
 800ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf0:	ab03      	add	r3, sp, #12
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	462a      	mov	r2, r5
 800ccf6:	4638      	mov	r0, r7
 800ccf8:	4b06      	ldr	r3, [pc, #24]	; (800cd14 <_svfiprintf_r+0x1fc>)
 800ccfa:	a904      	add	r1, sp, #16
 800ccfc:	f000 f87c 	bl	800cdf8 <_printf_i>
 800cd00:	e7eb      	b.n	800ccda <_svfiprintf_r+0x1c2>
 800cd02:	bf00      	nop
 800cd04:	0800e237 	.word	0x0800e237
 800cd08:	0800e23d 	.word	0x0800e23d
 800cd0c:	0800e241 	.word	0x0800e241
 800cd10:	00000000 	.word	0x00000000
 800cd14:	0800ca63 	.word	0x0800ca63

0800cd18 <_printf_common>:
 800cd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd1c:	4616      	mov	r6, r2
 800cd1e:	4699      	mov	r9, r3
 800cd20:	688a      	ldr	r2, [r1, #8]
 800cd22:	690b      	ldr	r3, [r1, #16]
 800cd24:	4607      	mov	r7, r0
 800cd26:	4293      	cmp	r3, r2
 800cd28:	bfb8      	it	lt
 800cd2a:	4613      	movlt	r3, r2
 800cd2c:	6033      	str	r3, [r6, #0]
 800cd2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd32:	460c      	mov	r4, r1
 800cd34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd38:	b10a      	cbz	r2, 800cd3e <_printf_common+0x26>
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	6033      	str	r3, [r6, #0]
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	0699      	lsls	r1, r3, #26
 800cd42:	bf42      	ittt	mi
 800cd44:	6833      	ldrmi	r3, [r6, #0]
 800cd46:	3302      	addmi	r3, #2
 800cd48:	6033      	strmi	r3, [r6, #0]
 800cd4a:	6825      	ldr	r5, [r4, #0]
 800cd4c:	f015 0506 	ands.w	r5, r5, #6
 800cd50:	d106      	bne.n	800cd60 <_printf_common+0x48>
 800cd52:	f104 0a19 	add.w	sl, r4, #25
 800cd56:	68e3      	ldr	r3, [r4, #12]
 800cd58:	6832      	ldr	r2, [r6, #0]
 800cd5a:	1a9b      	subs	r3, r3, r2
 800cd5c:	42ab      	cmp	r3, r5
 800cd5e:	dc28      	bgt.n	800cdb2 <_printf_common+0x9a>
 800cd60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd64:	1e13      	subs	r3, r2, #0
 800cd66:	6822      	ldr	r2, [r4, #0]
 800cd68:	bf18      	it	ne
 800cd6a:	2301      	movne	r3, #1
 800cd6c:	0692      	lsls	r2, r2, #26
 800cd6e:	d42d      	bmi.n	800cdcc <_printf_common+0xb4>
 800cd70:	4649      	mov	r1, r9
 800cd72:	4638      	mov	r0, r7
 800cd74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd78:	47c0      	blx	r8
 800cd7a:	3001      	adds	r0, #1
 800cd7c:	d020      	beq.n	800cdc0 <_printf_common+0xa8>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	68e5      	ldr	r5, [r4, #12]
 800cd82:	f003 0306 	and.w	r3, r3, #6
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	bf18      	it	ne
 800cd8a:	2500      	movne	r5, #0
 800cd8c:	6832      	ldr	r2, [r6, #0]
 800cd8e:	f04f 0600 	mov.w	r6, #0
 800cd92:	68a3      	ldr	r3, [r4, #8]
 800cd94:	bf08      	it	eq
 800cd96:	1aad      	subeq	r5, r5, r2
 800cd98:	6922      	ldr	r2, [r4, #16]
 800cd9a:	bf08      	it	eq
 800cd9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cda0:	4293      	cmp	r3, r2
 800cda2:	bfc4      	itt	gt
 800cda4:	1a9b      	subgt	r3, r3, r2
 800cda6:	18ed      	addgt	r5, r5, r3
 800cda8:	341a      	adds	r4, #26
 800cdaa:	42b5      	cmp	r5, r6
 800cdac:	d11a      	bne.n	800cde4 <_printf_common+0xcc>
 800cdae:	2000      	movs	r0, #0
 800cdb0:	e008      	b.n	800cdc4 <_printf_common+0xac>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	4652      	mov	r2, sl
 800cdb6:	4649      	mov	r1, r9
 800cdb8:	4638      	mov	r0, r7
 800cdba:	47c0      	blx	r8
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d103      	bne.n	800cdc8 <_printf_common+0xb0>
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc8:	3501      	adds	r5, #1
 800cdca:	e7c4      	b.n	800cd56 <_printf_common+0x3e>
 800cdcc:	2030      	movs	r0, #48	; 0x30
 800cdce:	18e1      	adds	r1, r4, r3
 800cdd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdd4:	1c5a      	adds	r2, r3, #1
 800cdd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdda:	4422      	add	r2, r4
 800cddc:	3302      	adds	r3, #2
 800cdde:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cde2:	e7c5      	b.n	800cd70 <_printf_common+0x58>
 800cde4:	2301      	movs	r3, #1
 800cde6:	4622      	mov	r2, r4
 800cde8:	4649      	mov	r1, r9
 800cdea:	4638      	mov	r0, r7
 800cdec:	47c0      	blx	r8
 800cdee:	3001      	adds	r0, #1
 800cdf0:	d0e6      	beq.n	800cdc0 <_printf_common+0xa8>
 800cdf2:	3601      	adds	r6, #1
 800cdf4:	e7d9      	b.n	800cdaa <_printf_common+0x92>
	...

0800cdf8 <_printf_i>:
 800cdf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdfc:	7e0f      	ldrb	r7, [r1, #24]
 800cdfe:	4691      	mov	r9, r2
 800ce00:	2f78      	cmp	r7, #120	; 0x78
 800ce02:	4680      	mov	r8, r0
 800ce04:	460c      	mov	r4, r1
 800ce06:	469a      	mov	sl, r3
 800ce08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce0e:	d807      	bhi.n	800ce20 <_printf_i+0x28>
 800ce10:	2f62      	cmp	r7, #98	; 0x62
 800ce12:	d80a      	bhi.n	800ce2a <_printf_i+0x32>
 800ce14:	2f00      	cmp	r7, #0
 800ce16:	f000 80d9 	beq.w	800cfcc <_printf_i+0x1d4>
 800ce1a:	2f58      	cmp	r7, #88	; 0x58
 800ce1c:	f000 80a4 	beq.w	800cf68 <_printf_i+0x170>
 800ce20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce28:	e03a      	b.n	800cea0 <_printf_i+0xa8>
 800ce2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce2e:	2b15      	cmp	r3, #21
 800ce30:	d8f6      	bhi.n	800ce20 <_printf_i+0x28>
 800ce32:	a101      	add	r1, pc, #4	; (adr r1, 800ce38 <_printf_i+0x40>)
 800ce34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce38:	0800ce91 	.word	0x0800ce91
 800ce3c:	0800cea5 	.word	0x0800cea5
 800ce40:	0800ce21 	.word	0x0800ce21
 800ce44:	0800ce21 	.word	0x0800ce21
 800ce48:	0800ce21 	.word	0x0800ce21
 800ce4c:	0800ce21 	.word	0x0800ce21
 800ce50:	0800cea5 	.word	0x0800cea5
 800ce54:	0800ce21 	.word	0x0800ce21
 800ce58:	0800ce21 	.word	0x0800ce21
 800ce5c:	0800ce21 	.word	0x0800ce21
 800ce60:	0800ce21 	.word	0x0800ce21
 800ce64:	0800cfb3 	.word	0x0800cfb3
 800ce68:	0800ced5 	.word	0x0800ced5
 800ce6c:	0800cf95 	.word	0x0800cf95
 800ce70:	0800ce21 	.word	0x0800ce21
 800ce74:	0800ce21 	.word	0x0800ce21
 800ce78:	0800cfd5 	.word	0x0800cfd5
 800ce7c:	0800ce21 	.word	0x0800ce21
 800ce80:	0800ced5 	.word	0x0800ced5
 800ce84:	0800ce21 	.word	0x0800ce21
 800ce88:	0800ce21 	.word	0x0800ce21
 800ce8c:	0800cf9d 	.word	0x0800cf9d
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	1d1a      	adds	r2, r3, #4
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	602a      	str	r2, [r5, #0]
 800ce98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cea0:	2301      	movs	r3, #1
 800cea2:	e0a4      	b.n	800cfee <_printf_i+0x1f6>
 800cea4:	6820      	ldr	r0, [r4, #0]
 800cea6:	6829      	ldr	r1, [r5, #0]
 800cea8:	0606      	lsls	r6, r0, #24
 800ceaa:	f101 0304 	add.w	r3, r1, #4
 800ceae:	d50a      	bpl.n	800cec6 <_printf_i+0xce>
 800ceb0:	680e      	ldr	r6, [r1, #0]
 800ceb2:	602b      	str	r3, [r5, #0]
 800ceb4:	2e00      	cmp	r6, #0
 800ceb6:	da03      	bge.n	800cec0 <_printf_i+0xc8>
 800ceb8:	232d      	movs	r3, #45	; 0x2d
 800ceba:	4276      	negs	r6, r6
 800cebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cec0:	230a      	movs	r3, #10
 800cec2:	485e      	ldr	r0, [pc, #376]	; (800d03c <_printf_i+0x244>)
 800cec4:	e019      	b.n	800cefa <_printf_i+0x102>
 800cec6:	680e      	ldr	r6, [r1, #0]
 800cec8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cecc:	602b      	str	r3, [r5, #0]
 800cece:	bf18      	it	ne
 800ced0:	b236      	sxthne	r6, r6
 800ced2:	e7ef      	b.n	800ceb4 <_printf_i+0xbc>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	6820      	ldr	r0, [r4, #0]
 800ced8:	1d19      	adds	r1, r3, #4
 800ceda:	6029      	str	r1, [r5, #0]
 800cedc:	0601      	lsls	r1, r0, #24
 800cede:	d501      	bpl.n	800cee4 <_printf_i+0xec>
 800cee0:	681e      	ldr	r6, [r3, #0]
 800cee2:	e002      	b.n	800ceea <_printf_i+0xf2>
 800cee4:	0646      	lsls	r6, r0, #25
 800cee6:	d5fb      	bpl.n	800cee0 <_printf_i+0xe8>
 800cee8:	881e      	ldrh	r6, [r3, #0]
 800ceea:	2f6f      	cmp	r7, #111	; 0x6f
 800ceec:	bf0c      	ite	eq
 800ceee:	2308      	moveq	r3, #8
 800cef0:	230a      	movne	r3, #10
 800cef2:	4852      	ldr	r0, [pc, #328]	; (800d03c <_printf_i+0x244>)
 800cef4:	2100      	movs	r1, #0
 800cef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cefa:	6865      	ldr	r5, [r4, #4]
 800cefc:	2d00      	cmp	r5, #0
 800cefe:	bfa8      	it	ge
 800cf00:	6821      	ldrge	r1, [r4, #0]
 800cf02:	60a5      	str	r5, [r4, #8]
 800cf04:	bfa4      	itt	ge
 800cf06:	f021 0104 	bicge.w	r1, r1, #4
 800cf0a:	6021      	strge	r1, [r4, #0]
 800cf0c:	b90e      	cbnz	r6, 800cf12 <_printf_i+0x11a>
 800cf0e:	2d00      	cmp	r5, #0
 800cf10:	d04d      	beq.n	800cfae <_printf_i+0x1b6>
 800cf12:	4615      	mov	r5, r2
 800cf14:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf18:	fb03 6711 	mls	r7, r3, r1, r6
 800cf1c:	5dc7      	ldrb	r7, [r0, r7]
 800cf1e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf22:	4637      	mov	r7, r6
 800cf24:	42bb      	cmp	r3, r7
 800cf26:	460e      	mov	r6, r1
 800cf28:	d9f4      	bls.n	800cf14 <_printf_i+0x11c>
 800cf2a:	2b08      	cmp	r3, #8
 800cf2c:	d10b      	bne.n	800cf46 <_printf_i+0x14e>
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	07de      	lsls	r6, r3, #31
 800cf32:	d508      	bpl.n	800cf46 <_printf_i+0x14e>
 800cf34:	6923      	ldr	r3, [r4, #16]
 800cf36:	6861      	ldr	r1, [r4, #4]
 800cf38:	4299      	cmp	r1, r3
 800cf3a:	bfde      	ittt	le
 800cf3c:	2330      	movle	r3, #48	; 0x30
 800cf3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf42:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cf46:	1b52      	subs	r2, r2, r5
 800cf48:	6122      	str	r2, [r4, #16]
 800cf4a:	464b      	mov	r3, r9
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	4640      	mov	r0, r8
 800cf50:	f8cd a000 	str.w	sl, [sp]
 800cf54:	aa03      	add	r2, sp, #12
 800cf56:	f7ff fedf 	bl	800cd18 <_printf_common>
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	d14c      	bne.n	800cff8 <_printf_i+0x200>
 800cf5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf62:	b004      	add	sp, #16
 800cf64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf68:	4834      	ldr	r0, [pc, #208]	; (800d03c <_printf_i+0x244>)
 800cf6a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf6e:	6829      	ldr	r1, [r5, #0]
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf76:	6029      	str	r1, [r5, #0]
 800cf78:	061d      	lsls	r5, r3, #24
 800cf7a:	d514      	bpl.n	800cfa6 <_printf_i+0x1ae>
 800cf7c:	07df      	lsls	r7, r3, #31
 800cf7e:	bf44      	itt	mi
 800cf80:	f043 0320 	orrmi.w	r3, r3, #32
 800cf84:	6023      	strmi	r3, [r4, #0]
 800cf86:	b91e      	cbnz	r6, 800cf90 <_printf_i+0x198>
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	f023 0320 	bic.w	r3, r3, #32
 800cf8e:	6023      	str	r3, [r4, #0]
 800cf90:	2310      	movs	r3, #16
 800cf92:	e7af      	b.n	800cef4 <_printf_i+0xfc>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	f043 0320 	orr.w	r3, r3, #32
 800cf9a:	6023      	str	r3, [r4, #0]
 800cf9c:	2378      	movs	r3, #120	; 0x78
 800cf9e:	4828      	ldr	r0, [pc, #160]	; (800d040 <_printf_i+0x248>)
 800cfa0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cfa4:	e7e3      	b.n	800cf6e <_printf_i+0x176>
 800cfa6:	0659      	lsls	r1, r3, #25
 800cfa8:	bf48      	it	mi
 800cfaa:	b2b6      	uxthmi	r6, r6
 800cfac:	e7e6      	b.n	800cf7c <_printf_i+0x184>
 800cfae:	4615      	mov	r5, r2
 800cfb0:	e7bb      	b.n	800cf2a <_printf_i+0x132>
 800cfb2:	682b      	ldr	r3, [r5, #0]
 800cfb4:	6826      	ldr	r6, [r4, #0]
 800cfb6:	1d18      	adds	r0, r3, #4
 800cfb8:	6961      	ldr	r1, [r4, #20]
 800cfba:	6028      	str	r0, [r5, #0]
 800cfbc:	0635      	lsls	r5, r6, #24
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	d501      	bpl.n	800cfc6 <_printf_i+0x1ce>
 800cfc2:	6019      	str	r1, [r3, #0]
 800cfc4:	e002      	b.n	800cfcc <_printf_i+0x1d4>
 800cfc6:	0670      	lsls	r0, r6, #25
 800cfc8:	d5fb      	bpl.n	800cfc2 <_printf_i+0x1ca>
 800cfca:	8019      	strh	r1, [r3, #0]
 800cfcc:	2300      	movs	r3, #0
 800cfce:	4615      	mov	r5, r2
 800cfd0:	6123      	str	r3, [r4, #16]
 800cfd2:	e7ba      	b.n	800cf4a <_printf_i+0x152>
 800cfd4:	682b      	ldr	r3, [r5, #0]
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	1d1a      	adds	r2, r3, #4
 800cfda:	602a      	str	r2, [r5, #0]
 800cfdc:	681d      	ldr	r5, [r3, #0]
 800cfde:	6862      	ldr	r2, [r4, #4]
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f000 f82f 	bl	800d044 <memchr>
 800cfe6:	b108      	cbz	r0, 800cfec <_printf_i+0x1f4>
 800cfe8:	1b40      	subs	r0, r0, r5
 800cfea:	6060      	str	r0, [r4, #4]
 800cfec:	6863      	ldr	r3, [r4, #4]
 800cfee:	6123      	str	r3, [r4, #16]
 800cff0:	2300      	movs	r3, #0
 800cff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cff6:	e7a8      	b.n	800cf4a <_printf_i+0x152>
 800cff8:	462a      	mov	r2, r5
 800cffa:	4649      	mov	r1, r9
 800cffc:	4640      	mov	r0, r8
 800cffe:	6923      	ldr	r3, [r4, #16]
 800d000:	47d0      	blx	sl
 800d002:	3001      	adds	r0, #1
 800d004:	d0ab      	beq.n	800cf5e <_printf_i+0x166>
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	079b      	lsls	r3, r3, #30
 800d00a:	d413      	bmi.n	800d034 <_printf_i+0x23c>
 800d00c:	68e0      	ldr	r0, [r4, #12]
 800d00e:	9b03      	ldr	r3, [sp, #12]
 800d010:	4298      	cmp	r0, r3
 800d012:	bfb8      	it	lt
 800d014:	4618      	movlt	r0, r3
 800d016:	e7a4      	b.n	800cf62 <_printf_i+0x16a>
 800d018:	2301      	movs	r3, #1
 800d01a:	4632      	mov	r2, r6
 800d01c:	4649      	mov	r1, r9
 800d01e:	4640      	mov	r0, r8
 800d020:	47d0      	blx	sl
 800d022:	3001      	adds	r0, #1
 800d024:	d09b      	beq.n	800cf5e <_printf_i+0x166>
 800d026:	3501      	adds	r5, #1
 800d028:	68e3      	ldr	r3, [r4, #12]
 800d02a:	9903      	ldr	r1, [sp, #12]
 800d02c:	1a5b      	subs	r3, r3, r1
 800d02e:	42ab      	cmp	r3, r5
 800d030:	dcf2      	bgt.n	800d018 <_printf_i+0x220>
 800d032:	e7eb      	b.n	800d00c <_printf_i+0x214>
 800d034:	2500      	movs	r5, #0
 800d036:	f104 0619 	add.w	r6, r4, #25
 800d03a:	e7f5      	b.n	800d028 <_printf_i+0x230>
 800d03c:	0800e248 	.word	0x0800e248
 800d040:	0800e259 	.word	0x0800e259

0800d044 <memchr>:
 800d044:	4603      	mov	r3, r0
 800d046:	b510      	push	{r4, lr}
 800d048:	b2c9      	uxtb	r1, r1
 800d04a:	4402      	add	r2, r0
 800d04c:	4293      	cmp	r3, r2
 800d04e:	4618      	mov	r0, r3
 800d050:	d101      	bne.n	800d056 <memchr+0x12>
 800d052:	2000      	movs	r0, #0
 800d054:	e003      	b.n	800d05e <memchr+0x1a>
 800d056:	7804      	ldrb	r4, [r0, #0]
 800d058:	3301      	adds	r3, #1
 800d05a:	428c      	cmp	r4, r1
 800d05c:	d1f6      	bne.n	800d04c <memchr+0x8>
 800d05e:	bd10      	pop	{r4, pc}

0800d060 <memmove>:
 800d060:	4288      	cmp	r0, r1
 800d062:	b510      	push	{r4, lr}
 800d064:	eb01 0402 	add.w	r4, r1, r2
 800d068:	d902      	bls.n	800d070 <memmove+0x10>
 800d06a:	4284      	cmp	r4, r0
 800d06c:	4623      	mov	r3, r4
 800d06e:	d807      	bhi.n	800d080 <memmove+0x20>
 800d070:	1e43      	subs	r3, r0, #1
 800d072:	42a1      	cmp	r1, r4
 800d074:	d008      	beq.n	800d088 <memmove+0x28>
 800d076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d07a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d07e:	e7f8      	b.n	800d072 <memmove+0x12>
 800d080:	4601      	mov	r1, r0
 800d082:	4402      	add	r2, r0
 800d084:	428a      	cmp	r2, r1
 800d086:	d100      	bne.n	800d08a <memmove+0x2a>
 800d088:	bd10      	pop	{r4, pc}
 800d08a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d08e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d092:	e7f7      	b.n	800d084 <memmove+0x24>

0800d094 <_free_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	4605      	mov	r5, r0
 800d098:	2900      	cmp	r1, #0
 800d09a:	d040      	beq.n	800d11e <_free_r+0x8a>
 800d09c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0a0:	1f0c      	subs	r4, r1, #4
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	bfb8      	it	lt
 800d0a6:	18e4      	addlt	r4, r4, r3
 800d0a8:	f000 f910 	bl	800d2cc <__malloc_lock>
 800d0ac:	4a1c      	ldr	r2, [pc, #112]	; (800d120 <_free_r+0x8c>)
 800d0ae:	6813      	ldr	r3, [r2, #0]
 800d0b0:	b933      	cbnz	r3, 800d0c0 <_free_r+0x2c>
 800d0b2:	6063      	str	r3, [r4, #4]
 800d0b4:	6014      	str	r4, [r2, #0]
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0bc:	f000 b90c 	b.w	800d2d8 <__malloc_unlock>
 800d0c0:	42a3      	cmp	r3, r4
 800d0c2:	d908      	bls.n	800d0d6 <_free_r+0x42>
 800d0c4:	6820      	ldr	r0, [r4, #0]
 800d0c6:	1821      	adds	r1, r4, r0
 800d0c8:	428b      	cmp	r3, r1
 800d0ca:	bf01      	itttt	eq
 800d0cc:	6819      	ldreq	r1, [r3, #0]
 800d0ce:	685b      	ldreq	r3, [r3, #4]
 800d0d0:	1809      	addeq	r1, r1, r0
 800d0d2:	6021      	streq	r1, [r4, #0]
 800d0d4:	e7ed      	b.n	800d0b2 <_free_r+0x1e>
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	b10b      	cbz	r3, 800d0e0 <_free_r+0x4c>
 800d0dc:	42a3      	cmp	r3, r4
 800d0de:	d9fa      	bls.n	800d0d6 <_free_r+0x42>
 800d0e0:	6811      	ldr	r1, [r2, #0]
 800d0e2:	1850      	adds	r0, r2, r1
 800d0e4:	42a0      	cmp	r0, r4
 800d0e6:	d10b      	bne.n	800d100 <_free_r+0x6c>
 800d0e8:	6820      	ldr	r0, [r4, #0]
 800d0ea:	4401      	add	r1, r0
 800d0ec:	1850      	adds	r0, r2, r1
 800d0ee:	4283      	cmp	r3, r0
 800d0f0:	6011      	str	r1, [r2, #0]
 800d0f2:	d1e0      	bne.n	800d0b6 <_free_r+0x22>
 800d0f4:	6818      	ldr	r0, [r3, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	4401      	add	r1, r0
 800d0fa:	6011      	str	r1, [r2, #0]
 800d0fc:	6053      	str	r3, [r2, #4]
 800d0fe:	e7da      	b.n	800d0b6 <_free_r+0x22>
 800d100:	d902      	bls.n	800d108 <_free_r+0x74>
 800d102:	230c      	movs	r3, #12
 800d104:	602b      	str	r3, [r5, #0]
 800d106:	e7d6      	b.n	800d0b6 <_free_r+0x22>
 800d108:	6820      	ldr	r0, [r4, #0]
 800d10a:	1821      	adds	r1, r4, r0
 800d10c:	428b      	cmp	r3, r1
 800d10e:	bf01      	itttt	eq
 800d110:	6819      	ldreq	r1, [r3, #0]
 800d112:	685b      	ldreq	r3, [r3, #4]
 800d114:	1809      	addeq	r1, r1, r0
 800d116:	6021      	streq	r1, [r4, #0]
 800d118:	6063      	str	r3, [r4, #4]
 800d11a:	6054      	str	r4, [r2, #4]
 800d11c:	e7cb      	b.n	800d0b6 <_free_r+0x22>
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	20001ed0 	.word	0x20001ed0

0800d124 <sbrk_aligned>:
 800d124:	b570      	push	{r4, r5, r6, lr}
 800d126:	4e0e      	ldr	r6, [pc, #56]	; (800d160 <sbrk_aligned+0x3c>)
 800d128:	460c      	mov	r4, r1
 800d12a:	6831      	ldr	r1, [r6, #0]
 800d12c:	4605      	mov	r5, r0
 800d12e:	b911      	cbnz	r1, 800d136 <sbrk_aligned+0x12>
 800d130:	f000 f8bc 	bl	800d2ac <_sbrk_r>
 800d134:	6030      	str	r0, [r6, #0]
 800d136:	4621      	mov	r1, r4
 800d138:	4628      	mov	r0, r5
 800d13a:	f000 f8b7 	bl	800d2ac <_sbrk_r>
 800d13e:	1c43      	adds	r3, r0, #1
 800d140:	d00a      	beq.n	800d158 <sbrk_aligned+0x34>
 800d142:	1cc4      	adds	r4, r0, #3
 800d144:	f024 0403 	bic.w	r4, r4, #3
 800d148:	42a0      	cmp	r0, r4
 800d14a:	d007      	beq.n	800d15c <sbrk_aligned+0x38>
 800d14c:	1a21      	subs	r1, r4, r0
 800d14e:	4628      	mov	r0, r5
 800d150:	f000 f8ac 	bl	800d2ac <_sbrk_r>
 800d154:	3001      	adds	r0, #1
 800d156:	d101      	bne.n	800d15c <sbrk_aligned+0x38>
 800d158:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d15c:	4620      	mov	r0, r4
 800d15e:	bd70      	pop	{r4, r5, r6, pc}
 800d160:	20001ed4 	.word	0x20001ed4

0800d164 <_malloc_r>:
 800d164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d168:	1ccd      	adds	r5, r1, #3
 800d16a:	f025 0503 	bic.w	r5, r5, #3
 800d16e:	3508      	adds	r5, #8
 800d170:	2d0c      	cmp	r5, #12
 800d172:	bf38      	it	cc
 800d174:	250c      	movcc	r5, #12
 800d176:	2d00      	cmp	r5, #0
 800d178:	4607      	mov	r7, r0
 800d17a:	db01      	blt.n	800d180 <_malloc_r+0x1c>
 800d17c:	42a9      	cmp	r1, r5
 800d17e:	d905      	bls.n	800d18c <_malloc_r+0x28>
 800d180:	230c      	movs	r3, #12
 800d182:	2600      	movs	r6, #0
 800d184:	603b      	str	r3, [r7, #0]
 800d186:	4630      	mov	r0, r6
 800d188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d18c:	4e2e      	ldr	r6, [pc, #184]	; (800d248 <_malloc_r+0xe4>)
 800d18e:	f000 f89d 	bl	800d2cc <__malloc_lock>
 800d192:	6833      	ldr	r3, [r6, #0]
 800d194:	461c      	mov	r4, r3
 800d196:	bb34      	cbnz	r4, 800d1e6 <_malloc_r+0x82>
 800d198:	4629      	mov	r1, r5
 800d19a:	4638      	mov	r0, r7
 800d19c:	f7ff ffc2 	bl	800d124 <sbrk_aligned>
 800d1a0:	1c43      	adds	r3, r0, #1
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	d14d      	bne.n	800d242 <_malloc_r+0xde>
 800d1a6:	6834      	ldr	r4, [r6, #0]
 800d1a8:	4626      	mov	r6, r4
 800d1aa:	2e00      	cmp	r6, #0
 800d1ac:	d140      	bne.n	800d230 <_malloc_r+0xcc>
 800d1ae:	6823      	ldr	r3, [r4, #0]
 800d1b0:	4631      	mov	r1, r6
 800d1b2:	4638      	mov	r0, r7
 800d1b4:	eb04 0803 	add.w	r8, r4, r3
 800d1b8:	f000 f878 	bl	800d2ac <_sbrk_r>
 800d1bc:	4580      	cmp	r8, r0
 800d1be:	d13a      	bne.n	800d236 <_malloc_r+0xd2>
 800d1c0:	6821      	ldr	r1, [r4, #0]
 800d1c2:	3503      	adds	r5, #3
 800d1c4:	1a6d      	subs	r5, r5, r1
 800d1c6:	f025 0503 	bic.w	r5, r5, #3
 800d1ca:	3508      	adds	r5, #8
 800d1cc:	2d0c      	cmp	r5, #12
 800d1ce:	bf38      	it	cc
 800d1d0:	250c      	movcc	r5, #12
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	f7ff ffa5 	bl	800d124 <sbrk_aligned>
 800d1da:	3001      	adds	r0, #1
 800d1dc:	d02b      	beq.n	800d236 <_malloc_r+0xd2>
 800d1de:	6823      	ldr	r3, [r4, #0]
 800d1e0:	442b      	add	r3, r5
 800d1e2:	6023      	str	r3, [r4, #0]
 800d1e4:	e00e      	b.n	800d204 <_malloc_r+0xa0>
 800d1e6:	6822      	ldr	r2, [r4, #0]
 800d1e8:	1b52      	subs	r2, r2, r5
 800d1ea:	d41e      	bmi.n	800d22a <_malloc_r+0xc6>
 800d1ec:	2a0b      	cmp	r2, #11
 800d1ee:	d916      	bls.n	800d21e <_malloc_r+0xba>
 800d1f0:	1961      	adds	r1, r4, r5
 800d1f2:	42a3      	cmp	r3, r4
 800d1f4:	6025      	str	r5, [r4, #0]
 800d1f6:	bf18      	it	ne
 800d1f8:	6059      	strne	r1, [r3, #4]
 800d1fa:	6863      	ldr	r3, [r4, #4]
 800d1fc:	bf08      	it	eq
 800d1fe:	6031      	streq	r1, [r6, #0]
 800d200:	5162      	str	r2, [r4, r5]
 800d202:	604b      	str	r3, [r1, #4]
 800d204:	4638      	mov	r0, r7
 800d206:	f104 060b 	add.w	r6, r4, #11
 800d20a:	f000 f865 	bl	800d2d8 <__malloc_unlock>
 800d20e:	f026 0607 	bic.w	r6, r6, #7
 800d212:	1d23      	adds	r3, r4, #4
 800d214:	1af2      	subs	r2, r6, r3
 800d216:	d0b6      	beq.n	800d186 <_malloc_r+0x22>
 800d218:	1b9b      	subs	r3, r3, r6
 800d21a:	50a3      	str	r3, [r4, r2]
 800d21c:	e7b3      	b.n	800d186 <_malloc_r+0x22>
 800d21e:	6862      	ldr	r2, [r4, #4]
 800d220:	42a3      	cmp	r3, r4
 800d222:	bf0c      	ite	eq
 800d224:	6032      	streq	r2, [r6, #0]
 800d226:	605a      	strne	r2, [r3, #4]
 800d228:	e7ec      	b.n	800d204 <_malloc_r+0xa0>
 800d22a:	4623      	mov	r3, r4
 800d22c:	6864      	ldr	r4, [r4, #4]
 800d22e:	e7b2      	b.n	800d196 <_malloc_r+0x32>
 800d230:	4634      	mov	r4, r6
 800d232:	6876      	ldr	r6, [r6, #4]
 800d234:	e7b9      	b.n	800d1aa <_malloc_r+0x46>
 800d236:	230c      	movs	r3, #12
 800d238:	4638      	mov	r0, r7
 800d23a:	603b      	str	r3, [r7, #0]
 800d23c:	f000 f84c 	bl	800d2d8 <__malloc_unlock>
 800d240:	e7a1      	b.n	800d186 <_malloc_r+0x22>
 800d242:	6025      	str	r5, [r4, #0]
 800d244:	e7de      	b.n	800d204 <_malloc_r+0xa0>
 800d246:	bf00      	nop
 800d248:	20001ed0 	.word	0x20001ed0

0800d24c <_realloc_r>:
 800d24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d250:	4680      	mov	r8, r0
 800d252:	4614      	mov	r4, r2
 800d254:	460e      	mov	r6, r1
 800d256:	b921      	cbnz	r1, 800d262 <_realloc_r+0x16>
 800d258:	4611      	mov	r1, r2
 800d25a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d25e:	f7ff bf81 	b.w	800d164 <_malloc_r>
 800d262:	b92a      	cbnz	r2, 800d270 <_realloc_r+0x24>
 800d264:	f7ff ff16 	bl	800d094 <_free_r>
 800d268:	4625      	mov	r5, r4
 800d26a:	4628      	mov	r0, r5
 800d26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d270:	f000 f838 	bl	800d2e4 <_malloc_usable_size_r>
 800d274:	4284      	cmp	r4, r0
 800d276:	4607      	mov	r7, r0
 800d278:	d802      	bhi.n	800d280 <_realloc_r+0x34>
 800d27a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d27e:	d812      	bhi.n	800d2a6 <_realloc_r+0x5a>
 800d280:	4621      	mov	r1, r4
 800d282:	4640      	mov	r0, r8
 800d284:	f7ff ff6e 	bl	800d164 <_malloc_r>
 800d288:	4605      	mov	r5, r0
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d0ed      	beq.n	800d26a <_realloc_r+0x1e>
 800d28e:	42bc      	cmp	r4, r7
 800d290:	4622      	mov	r2, r4
 800d292:	4631      	mov	r1, r6
 800d294:	bf28      	it	cs
 800d296:	463a      	movcs	r2, r7
 800d298:	f7ff fb72 	bl	800c980 <memcpy>
 800d29c:	4631      	mov	r1, r6
 800d29e:	4640      	mov	r0, r8
 800d2a0:	f7ff fef8 	bl	800d094 <_free_r>
 800d2a4:	e7e1      	b.n	800d26a <_realloc_r+0x1e>
 800d2a6:	4635      	mov	r5, r6
 800d2a8:	e7df      	b.n	800d26a <_realloc_r+0x1e>
	...

0800d2ac <_sbrk_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	4d05      	ldr	r5, [pc, #20]	; (800d2c8 <_sbrk_r+0x1c>)
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	4608      	mov	r0, r1
 800d2b6:	602b      	str	r3, [r5, #0]
 800d2b8:	f7f4 fb20 	bl	80018fc <_sbrk>
 800d2bc:	1c43      	adds	r3, r0, #1
 800d2be:	d102      	bne.n	800d2c6 <_sbrk_r+0x1a>
 800d2c0:	682b      	ldr	r3, [r5, #0]
 800d2c2:	b103      	cbz	r3, 800d2c6 <_sbrk_r+0x1a>
 800d2c4:	6023      	str	r3, [r4, #0]
 800d2c6:	bd38      	pop	{r3, r4, r5, pc}
 800d2c8:	20001ed8 	.word	0x20001ed8

0800d2cc <__malloc_lock>:
 800d2cc:	4801      	ldr	r0, [pc, #4]	; (800d2d4 <__malloc_lock+0x8>)
 800d2ce:	f000 b811 	b.w	800d2f4 <__retarget_lock_acquire_recursive>
 800d2d2:	bf00      	nop
 800d2d4:	20001edc 	.word	0x20001edc

0800d2d8 <__malloc_unlock>:
 800d2d8:	4801      	ldr	r0, [pc, #4]	; (800d2e0 <__malloc_unlock+0x8>)
 800d2da:	f000 b80c 	b.w	800d2f6 <__retarget_lock_release_recursive>
 800d2de:	bf00      	nop
 800d2e0:	20001edc 	.word	0x20001edc

0800d2e4 <_malloc_usable_size_r>:
 800d2e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2e8:	1f18      	subs	r0, r3, #4
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	bfbc      	itt	lt
 800d2ee:	580b      	ldrlt	r3, [r1, r0]
 800d2f0:	18c0      	addlt	r0, r0, r3
 800d2f2:	4770      	bx	lr

0800d2f4 <__retarget_lock_acquire_recursive>:
 800d2f4:	4770      	bx	lr

0800d2f6 <__retarget_lock_release_recursive>:
 800d2f6:	4770      	bx	lr

0800d2f8 <_init>:
 800d2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2fa:	bf00      	nop
 800d2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2fe:	bc08      	pop	{r3}
 800d300:	469e      	mov	lr, r3
 800d302:	4770      	bx	lr

0800d304 <_fini>:
 800d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d306:	bf00      	nop
 800d308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d30a:	bc08      	pop	{r3}
 800d30c:	469e      	mov	lr, r3
 800d30e:	4770      	bx	lr
