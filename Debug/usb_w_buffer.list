
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c578  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f6c  0800c684  0800c684  0001c684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5f0  0800d5f0  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  0800d5f0  0800d5f0  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d5f0  0800d5f0  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5f0  0800d5f0  0001d5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5f4  0800d5f4  0001d5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  0800d5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a10  20000418  0800da10  00020418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e28  0800da10  00021e28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003de4c  00000000  00000000  00020441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005abd  00000000  00000000  0005e28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022a8  00000000  00000000  00063d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fb0  00000000  00000000  00065ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df82  00000000  00000000  00067fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c3c  00000000  00000000  00085f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f9f4  00000000  00000000  000a8b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014855a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094b4  00000000  00000000  001485ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000418 	.word	0x20000418
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c66c 	.word	0x0800c66c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000041c 	.word	0x2000041c
 8000148:	0800c66c 	.word	0x0800c66c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern SPI_HandleTypeDef hspi1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f003 fc4e 	bl	8003a2c <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f003 fc49 	bl	8003a2c <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f003 ff44 	bl	8004030 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f003 ff3d 	bl	8004030 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f006 f930 	bl	8006490 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f003 fef9 	bl	8004030 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200005cc 	.word	0x200005cc
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Kpd_Irqv_Init();
 800025c:	f000 fe04 	bl	8000e68 <Kpd_Irqv_Init>

	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 8000260:	4b16      	ldr	r3, [pc, #88]	; (80002bc <Start_APP+0x64>)
 8000262:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <Start_APP+0x68>)
 8000264:	4917      	ldr	r1, [pc, #92]	; (80002c4 <Start_APP+0x6c>)
 8000266:	4818      	ldr	r0, [pc, #96]	; (80002c8 <Start_APP+0x70>)
 8000268:	f001 fcf2 	bl	8001c50 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 800026c:	4816      	ldr	r0, [pc, #88]	; (80002c8 <Start_APP+0x70>)
 800026e:	f003 faa6 	bl	80037be <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 8000272:	2100      	movs	r1, #0
 8000274:	4814      	ldr	r0, [pc, #80]	; (80002c8 <Start_APP+0x70>)
 8000276:	f003 fab1 	bl	80037dc <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 800027a:	2004      	movs	r0, #4
 800027c:	f000 fc0a 	bl	8000a94 <set_contrast>

		u8g2_SetBitmapMode(&u8g2,0);
 8000280:	2100      	movs	r1, #0
 8000282:	4811      	ldr	r0, [pc, #68]	; (80002c8 <Start_APP+0x70>)
 8000284:	f001 f94a 	bl	800151c <u8g2_SetBitmapMode>


		u8g2_SetDrawColor(&u8g2, 1);
 8000288:	2101      	movs	r1, #1
 800028a:	480f      	ldr	r0, [pc, #60]	; (80002c8 <Start_APP+0x70>)
 800028c:	f002 fcfa 	bl	8002c84 <u8g2_SetDrawColor>
		u8g2_SetFontMode(&u8g2, 0);
 8000290:	2100      	movs	r1, #0
 8000292:	480d      	ldr	r0, [pc, #52]	; (80002c8 <Start_APP+0x70>)
 8000294:	f002 f976 	bl	8002584 <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 8000298:	480b      	ldr	r0, [pc, #44]	; (80002c8 <Start_APP+0x70>)
 800029a:	f002 fae1 	bl	8002860 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_crox2c_mf);
 800029e:	490b      	ldr	r1, [pc, #44]	; (80002cc <Start_APP+0x74>)
 80002a0:	4809      	ldr	r0, [pc, #36]	; (80002c8 <Start_APP+0x70>)
 80002a2:	f002 faeb 	bl	800287c <u8g2_SetFont>
		disp_splash();
 80002a6:	f000 fc09 	bl	8000abc <disp_splash>
		text_insertion_point(0 , 0);
 80002aa:	2100      	movs	r1, #0
 80002ac:	2000      	movs	r0, #0
 80002ae:	f000 faa1 	bl	80007f4 <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002b2:	f000 fa63 	bl	800077c <monitor_begin>
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	0800015d 	.word	0x0800015d
 80002c0:	080001cd 	.word	0x080001cd
 80002c4:	0800d54c 	.word	0x0800d54c
 80002c8:	20000434 	.word	0x20000434
 80002cc:	0800c768 	.word	0x0800c768

080002d0 <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_FS(cmd, strlen(buf)) == USBD_OK)
 80002d8:	bf00      	nop
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f7ff ff36 	bl	800014c <strlen>
 80002e0:	4603      	mov	r3, r0
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	4619      	mov	r1, r3
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <monitor_send_string+0x2c>)
 80002e8:	f00b f8f4 	bl	800b4d4 <CDC_Transmit_FS>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d0f3      	beq.n	80002da <monitor_send_string+0xa>
		;
	//isso é a melhor forma de try til it works que eu consegui pensar
}
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200004c8 	.word	0x200004c8

08000300 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800030a:	2201      	movs	r2, #1
 800030c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 800030e:	4805      	ldr	r0, [pc, #20]	; (8000324 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000310:	f006 fb42 	bl	8006998 <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 8000314:	f000 f962 	bl	80005dc <monitor_interrupt>
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200005b8 	.word	0x200005b8
 8000324:	20000624 	.word	0x20000624

08000328 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af02      	add	r7, sp, #8
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 8000332:	2204      	movs	r2, #4
 8000334:	498c      	ldr	r1, [pc, #560]	; (8000568 <monitor_check_cmd+0x240>)
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f00b fd26 	bl	800bd88 <strncmp>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d108      	bne.n	8000354 <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 8000342:	4a8a      	ldr	r2, [pc, #552]	; (800056c <monitor_check_cmd+0x244>)
 8000344:	2190      	movs	r1, #144	; 0x90
 8000346:	488a      	ldr	r0, [pc, #552]	; (8000570 <monitor_check_cmd+0x248>)
 8000348:	f00b fcea 	bl	800bd20 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 800034c:	4888      	ldr	r0, [pc, #544]	; (8000570 <monitor_check_cmd+0x248>)
 800034e:	f7ff ffbf 	bl	80002d0 <monitor_send_string>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
		}

	}
}
 8000352:	e105      	b.n	8000560 <monitor_check_cmd+0x238>
	else if (cmd[0] == LCD_CMD) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2bfe      	cmp	r3, #254	; 0xfe
 800035a:	f040 8101 	bne.w	8000560 <monitor_check_cmd+0x238>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3301      	adds	r3, #1
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b31      	cmp	r3, #49	; 0x31
 8000366:	d109      	bne.n	800037c <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000368:	4b82      	ldr	r3, [pc, #520]	; (8000574 <monitor_check_cmd+0x24c>)
 800036a:	4a83      	ldr	r2, [pc, #524]	; (8000578 <monitor_check_cmd+0x250>)
 800036c:	2190      	movs	r1, #144	; 0x90
 800036e:	4880      	ldr	r0, [pc, #512]	; (8000570 <monitor_check_cmd+0x248>)
 8000370:	f00b fcd6 	bl	800bd20 <sniprintf>
			monitor_send_string(ans);
 8000374:	487e      	ldr	r0, [pc, #504]	; (8000570 <monitor_check_cmd+0x248>)
 8000376:	f7ff ffab 	bl	80002d0 <monitor_send_string>
}
 800037a:	e0f1      	b.n	8000560 <monitor_check_cmd+0x238>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3301      	adds	r3, #1
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	2b30      	cmp	r3, #48	; 0x30
 8000384:	d109      	bne.n	800039a <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 8000386:	4b7b      	ldr	r3, [pc, #492]	; (8000574 <monitor_check_cmd+0x24c>)
 8000388:	4a7c      	ldr	r2, [pc, #496]	; (800057c <monitor_check_cmd+0x254>)
 800038a:	2190      	movs	r1, #144	; 0x90
 800038c:	4878      	ldr	r0, [pc, #480]	; (8000570 <monitor_check_cmd+0x248>)
 800038e:	f00b fcc7 	bl	800bd20 <sniprintf>
			monitor_send_string(ans);
 8000392:	4877      	ldr	r0, [pc, #476]	; (8000570 <monitor_check_cmd+0x248>)
 8000394:	f7ff ff9c 	bl	80002d0 <monitor_send_string>
}
 8000398:	e0e2      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_SOFT_RESET) {
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	3301      	adds	r3, #1
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b56      	cmp	r3, #86	; 0x56
 80003a2:	d102      	bne.n	80003aa <monitor_check_cmd+0x82>
			lcd_soft_reset();
 80003a4:	f000 fb50 	bl	8000a48 <lcd_soft_reset>
}
 80003a8:	e0da      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3301      	adds	r3, #1
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b42      	cmp	r3, #66	; 0x42
 80003b2:	d103      	bne.n	80003bc <monitor_check_cmd+0x94>
			enable_backlight(true);
 80003b4:	2001      	movs	r0, #1
 80003b6:	f000 fb5b 	bl	8000a70 <enable_backlight>
}
 80003ba:	e0d1      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3301      	adds	r3, #1
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b46      	cmp	r3, #70	; 0x46
 80003c4:	d103      	bne.n	80003ce <monitor_check_cmd+0xa6>
			enable_backlight(false);
 80003c6:	2000      	movs	r0, #0
 80003c8:	f000 fb52 	bl	8000a70 <enable_backlight>
}
 80003cc:	e0c8      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b66      	cmp	r3, #102	; 0x66
 80003d6:	d103      	bne.n	80003e0 <monitor_check_cmd+0xb8>
			inverse_text(true);
 80003d8:	2001      	movs	r0, #1
 80003da:	f000 fa37 	bl	800084c <inverse_text>
}
 80003de:	e0bf      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3301      	adds	r3, #1
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b67      	cmp	r3, #103	; 0x67
 80003e8:	d103      	bne.n	80003f2 <monitor_check_cmd+0xca>
			inverse_text(false);
 80003ea:	2000      	movs	r0, #0
 80003ec:	f000 fa2e 	bl	800084c <inverse_text>
}
 80003f0:	e0b6      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_CLEAR) {
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3301      	adds	r3, #1
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b58      	cmp	r3, #88	; 0x58
 80003fa:	d102      	bne.n	8000402 <monitor_check_cmd+0xda>
			clear_display();
 80003fc:	f000 fb2a 	bl	8000a54 <clear_display>
}
 8000400:	e0ae      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	3301      	adds	r3, #1
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b70      	cmp	r3, #112	; 0x70
 800040a:	d10a      	bne.n	8000422 <monitor_check_cmd+0xfa>
			put_pixel(cmd[3], cmd[2]);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3303      	adds	r3, #3
 8000410:	781a      	ldrb	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3302      	adds	r3, #2
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	4610      	mov	r0, r2
 800041c:	f000 fad8 	bl	80009d0 <put_pixel>
}
 8000420:	e09e      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3301      	adds	r3, #1
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b71      	cmp	r3, #113	; 0x71
 800042a:	d10a      	bne.n	8000442 <monitor_check_cmd+0x11a>
			erase_pixel(cmd[3], cmd[2]);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3303      	adds	r3, #3
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3302      	adds	r3, #2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f000 fae6 	bl	8000a0c <erase_pixel>
}
 8000440:	e08e      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b43      	cmp	r3, #67	; 0x43
 800044a:	d103      	bne.n	8000454 <monitor_check_cmd+0x12c>
			auto_line_wrap(true);
 800044c:	2001      	movs	r0, #1
 800044e:	f000 f9c1 	bl	80007d4 <auto_line_wrap>
}
 8000452:	e085      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3301      	adds	r3, #1
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b44      	cmp	r3, #68	; 0x44
 800045c:	d103      	bne.n	8000466 <monitor_check_cmd+0x13e>
			auto_line_wrap(false);
 800045e:	2000      	movs	r0, #0
 8000460:	f000 f9b8 	bl	80007d4 <auto_line_wrap>
}
 8000464:	e07c      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_SET_INSERT) {
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3301      	adds	r3, #1
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b47      	cmp	r3, #71	; 0x47
 800046e:	d10a      	bne.n	8000486 <monitor_check_cmd+0x15e>
			text_insertion_point(cmd[2], cmd[3]);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3302      	adds	r3, #2
 8000474:	781a      	ldrb	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3303      	adds	r3, #3
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4619      	mov	r1, r3
 800047e:	4610      	mov	r0, r2
 8000480:	f000 f9b8 	bl	80007f4 <text_insertion_point>
}
 8000484:	e06c      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_HOME_INSERT) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3301      	adds	r3, #1
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b48      	cmp	r3, #72	; 0x48
 800048e:	d104      	bne.n	800049a <monitor_check_cmd+0x172>
			text_insertion_point(0, 0);
 8000490:	2100      	movs	r1, #0
 8000492:	2000      	movs	r0, #0
 8000494:	f000 f9ae 	bl	80007f4 <text_insertion_point>
}
 8000498:	e062      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_READ_GPI) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3301      	adds	r3, #1
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b65      	cmp	r3, #101	; 0x65
 80004a2:	d114      	bne.n	80004ce <monitor_check_cmd+0x1a6>
			if (cmd[2] == '0') {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3302      	adds	r3, #2
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b30      	cmp	r3, #48	; 0x30
 80004ac:	d158      	bne.n	8000560 <monitor_check_cmd+0x238>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 80004ae:	4b34      	ldr	r3, [pc, #208]	; (8000580 <monitor_check_cmd+0x258>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	461a      	mov	r2, r3
						ddp[1]);
 80004b4:	4b32      	ldr	r3, [pc, #200]	; (8000580 <monitor_check_cmd+0x258>)
 80004b6:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	4613      	mov	r3, r2
 80004bc:	4a31      	ldr	r2, [pc, #196]	; (8000584 <monitor_check_cmd+0x25c>)
 80004be:	2190      	movs	r1, #144	; 0x90
 80004c0:	482b      	ldr	r0, [pc, #172]	; (8000570 <monitor_check_cmd+0x248>)
 80004c2:	f00b fc2d 	bl	800bd20 <sniprintf>
				monitor_send_string(ans);
 80004c6:	482a      	ldr	r0, [pc, #168]	; (8000570 <monitor_check_cmd+0x248>)
 80004c8:	f7ff ff02 	bl	80002d0 <monitor_send_string>
}
 80004cc:	e048      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3301      	adds	r3, #1
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b69      	cmp	r3, #105	; 0x69
 80004d6:	d102      	bne.n	80004de <monitor_check_cmd+0x1b6>
			disp_splash();
 80004d8:	f000 faf0 	bl	8000abc <disp_splash>
}
 80004dc:	e040      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3301      	adds	r3, #1
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b76      	cmp	r3, #118	; 0x76
 80004e6:	d102      	bne.n	80004ee <monitor_check_cmd+0x1c6>
			def_thick_v_bar();
 80004e8:	f000 f9c0 	bl	800086c <def_thick_v_bar>
}
 80004ec:	e038      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	3301      	adds	r3, #1
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b73      	cmp	r3, #115	; 0x73
 80004f6:	d102      	bne.n	80004fe <monitor_check_cmd+0x1d6>
			def_thin_v_bar();
 80004f8:	f000 f9c4 	bl	8000884 <def_thin_v_bar>
}
 80004fc:	e030      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3301      	adds	r3, #1
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b3d      	cmp	r3, #61	; 0x3d
 8000506:	d10a      	bne.n	800051e <monitor_check_cmd+0x1f6>
			draw_v_bar_graph(cmd[2], cmd[3]);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3302      	adds	r3, #2
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	3303      	adds	r3, #3
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4610      	mov	r0, r2
 8000518:	f000 f9c0 	bl	800089c <draw_v_bar_graph>
}
 800051c:	e020      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3301      	adds	r3, #1
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b3d      	cmp	r3, #61	; 0x3d
 8000526:	d10a      	bne.n	800053e <monitor_check_cmd+0x216>
			erase_v_bar_graph(cmd[2], cmd[3]);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3302      	adds	r3, #2
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3303      	adds	r3, #3
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	4610      	mov	r0, r2
 8000538:	f000 f9e0 	bl	80008fc <erase_v_bar_graph>
}
 800053c:	e010      	b.n	8000560 <monitor_check_cmd+0x238>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH) {
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3301      	adds	r3, #1
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b7c      	cmp	r3, #124	; 0x7c
 8000546:	d10b      	bne.n	8000560 <monitor_check_cmd+0x238>
			draw_h_bar_graph(cmd[2], cmd[3], cmd[4]);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3302      	adds	r3, #2
 800054c:	7818      	ldrb	r0, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3303      	adds	r3, #3
 8000552:	7819      	ldrb	r1, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	461a      	mov	r2, r3
 800055c:	f000 f9fe 	bl	800095c <draw_h_bar_graph>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	0800c684 	.word	0x0800c684
 800056c:	0800c68c 	.word	0x0800c68c
 8000570:	20000558 	.word	0x20000558
 8000574:	0800c6c4 	.word	0x0800c6c4
 8000578:	0800c6c8 	.word	0x0800c6c8
 800057c:	0800c6e0 	.word	0x0800c6e0
 8000580:	20000000 	.word	0x20000000
 8000584:	0800c6f4 	.word	0x0800c6f4

08000588 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]

	memcpy(cmd + size, buf, len);
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <app_usb_cbk+0x44>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <app_usb_cbk+0x48>)
 8000598:	4413      	add	r3, r2
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	f00b fba8 	bl	800bcf4 <memcpy>
	size += len;
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <app_usb_cbk+0x44>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	4413      	add	r3, r2
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <app_usb_cbk+0x44>)
 80005ae:	6013      	str	r3, [r2, #0]

	if (size >= CMD_BUF_SIZE) {
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <app_usb_cbk+0x44>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b8f      	cmp	r3, #143	; 0x8f
 80005b6:	d902      	bls.n	80005be <app_usb_cbk+0x36>
		new_cmd = true;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <app_usb_cbk+0x4c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <app_usb_cbk+0x50>)
 80005c0:	f006 f998 	bl	80068f4 <HAL_TIM_Base_Start_IT>

}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200005b4 	.word	0x200005b4
 80005d0:	200004c8 	.word	0x200004c8
 80005d4:	200005b8 	.word	0x200005b8
 80005d8:	20000624 	.word	0x20000624

080005dc <monitor_interrupt>:

void monitor_interrupt(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	if (new_cmd) {
 80005e2:	4b62      	ldr	r3, [pc, #392]	; (800076c <monitor_interrupt+0x190>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	f000 80bb 	beq.w	8000762 <monitor_interrupt+0x186>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 80005f0:	4b5f      	ldr	r3, [pc, #380]	; (8000770 <monitor_interrupt+0x194>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 80005f6:	2300      	movs	r3, #0
 80005f8:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 80005fa:	2300      	movs	r3, #0
 80005fc:	70fb      	strb	r3, [r7, #3]

//		o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
//		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
//		 começa o inicializador

		for (offset = 0; offset <= size; offset++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	e091      	b.n	8000728 <monitor_interrupt+0x14c>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a5b      	ldr	r2, [pc, #364]	; (8000774 <monitor_interrupt+0x198>)
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2bfd      	cmp	r3, #253	; 0xfd
 800060e:	d110      	bne.n	8000632 <monitor_interrupt+0x56>
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	3301      	adds	r3, #1
 8000614:	4a57      	ldr	r2, [pc, #348]	; (8000774 <monitor_interrupt+0x198>)
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2bfe      	cmp	r3, #254	; 0xfe
 800061c:	d009      	beq.n	8000632 <monitor_interrupt+0x56>
					&& *(cmd + offset + 1) != 20) {
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	3301      	adds	r3, #1
 8000622:	4a54      	ldr	r2, [pc, #336]	; (8000774 <monitor_interrupt+0x198>)
 8000624:	4413      	add	r3, r2
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b14      	cmp	r3, #20
 800062a:	d002      	beq.n	8000632 <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	3301      	adds	r3, #1
 8000630:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00c      	beq.n	8000652 <monitor_interrupt+0x76>
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4a4e      	ldr	r2, [pc, #312]	; (8000774 <monitor_interrupt+0x198>)
 800063c:	4413      	add	r3, r2
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2bfe      	cmp	r3, #254	; 0xfe
 8000642:	d106      	bne.n	8000652 <monitor_interrupt+0x76>
					&& *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	3b01      	subs	r3, #1
 8000648:	4a4a      	ldr	r2, [pc, #296]	; (8000774 <monitor_interrupt+0x198>)
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2bfd      	cmp	r3, #253	; 0xfd
 8000650:	d104      	bne.n	800065c <monitor_interrupt+0x80>
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	4b46      	ldr	r3, [pc, #280]	; (8000770 <monitor_interrupt+0x194>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	429a      	cmp	r2, r3
 800065a:	d103      	bne.n	8000664 <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o fim de outro
				printable = true;
 800065c:	2301      	movs	r3, #1
 800065e:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d029      	beq.n	80006be <monitor_interrupt+0xe2>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 800066a:	79bb      	ldrb	r3, [r7, #6]
 800066c:	4a41      	ldr	r2, [pc, #260]	; (8000774 <monitor_interrupt+0x198>)
 800066e:	1899      	adds	r1, r3, r2
 8000670:	797a      	ldrb	r2, [r7, #5]
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	461a      	mov	r2, r3
 8000678:	483f      	ldr	r0, [pc, #252]	; (8000778 <monitor_interrupt+0x19c>)
 800067a:	f00b fb99 	bl	800bdb0 <strncpy>
				CDC_Transmit_FS(ans, end_print - bgn_print);
 800067e:	797b      	ldrb	r3, [r7, #5]
 8000680:	b29a      	uxth	r2, r3
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	b29b      	uxth	r3, r3
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	b29b      	uxth	r3, r3
 800068a:	4619      	mov	r1, r3
 800068c:	483a      	ldr	r0, [pc, #232]	; (8000778 <monitor_interrupt+0x19c>)
 800068e:	f00a ff21 	bl	800b4d4 <CDC_Transmit_FS>
				lcd_print(ans);
 8000692:	4839      	ldr	r0, [pc, #228]	; (8000778 <monitor_interrupt+0x19c>)
 8000694:	f000 fac2 	bl	8000c1c <lcd_print>
				memset(ans, 0, ANS_BUF_SIZE);
 8000698:	225a      	movs	r2, #90	; 0x5a
 800069a:	2100      	movs	r1, #0
 800069c:	4836      	ldr	r0, [pc, #216]	; (8000778 <monitor_interrupt+0x19c>)
 800069e:	f00b fb37 	bl	800bd10 <memset>
				printable = !printable;
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf14      	ite	ne
 80006a8:	2301      	movne	r3, #1
 80006aa:	2300      	moveq	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f083 0301 	eor.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	70fb      	strb	r3, [r7, #3]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	70fb      	strb	r3, [r7, #3]
			}

			if (*(cmd + offset) == LCD_CMD) {
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <monitor_interrupt+0x198>)
 80006c2:	4413      	add	r3, r2
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2bfe      	cmp	r3, #254	; 0xfe
 80006c8:	d117      	bne.n	80006fa <monitor_interrupt+0x11e>
				monitor_check_cmd((char*) cmd + offset, size);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4a29      	ldr	r2, [pc, #164]	; (8000774 <monitor_interrupt+0x198>)
 80006ce:	4413      	add	r3, r2
 80006d0:	4a27      	ldr	r2, [pc, #156]	; (8000770 <monitor_interrupt+0x194>)
 80006d2:	6812      	ldr	r2, [r2, #0]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fe26 	bl	8000328 <monitor_check_cmd>
				is_cmd = !is_cmd;
 80006dc:	793b      	ldrb	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf14      	ite	ne
 80006e2:	2301      	movne	r3, #1
 80006e4:	2300      	moveq	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f083 0301 	eor.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	713b      	strb	r3, [r7, #4]
 80006f0:	793b      	ldrb	r3, [r7, #4]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	713b      	strb	r3, [r7, #4]
 80006f8:	e013      	b.n	8000722 <monitor_interrupt+0x146>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4a1d      	ldr	r2, [pc, #116]	; (8000774 <monitor_interrupt+0x198>)
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2bfd      	cmp	r3, #253	; 0xfd
 8000704:	d10d      	bne.n	8000722 <monitor_interrupt+0x146>
				is_cmd = !is_cmd;
 8000706:	793b      	ldrb	r3, [r7, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf14      	ite	ne
 800070c:	2301      	movne	r3, #1
 800070e:	2300      	moveq	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f083 0301 	eor.w	r3, r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	713b      	strb	r3, [r7, #4]
 800071a:	793b      	ldrb	r3, [r7, #4]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	713b      	strb	r3, [r7, #4]
		for (offset = 0; offset <= size; offset++) {
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	3301      	adds	r3, #1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	79fa      	ldrb	r2, [r7, #7]
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <monitor_interrupt+0x194>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	f67f af68 	bls.w	8000604 <monitor_interrupt+0x28>
			}
		}
		size = 0;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <monitor_interrupt+0x194>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 800073a:	2290      	movs	r2, #144	; 0x90
 800073c:	2100      	movs	r1, #0
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <monitor_interrupt+0x198>)
 8000740:	f00b fae6 	bl	800bd10 <memset>
		new_cmd = !new_cmd;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <monitor_interrupt+0x190>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2db      	uxtb	r3, r3
 8000752:	f083 0301 	eor.w	r3, r3, #1
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b03      	ldr	r3, [pc, #12]	; (800076c <monitor_interrupt+0x190>)
 8000760:	701a      	strb	r2, [r3, #0]
	}
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200005b8 	.word	0x200005b8
 8000770:	200005b4 	.word	0x200005b4
 8000774:	200004c8 	.word	0x200004c8
 8000778:	20000558 	.word	0x20000558

0800077c <monitor_begin>:

void monitor_begin(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <monitor_begin+0x48>)
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <monitor_begin+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
	 test_font();
	 clear_display();
	 put_cursor();*/

	//mensagem de inicialização
	snprintf((char*) ans, CMD_BUF_SIZE, "hora do show!\r\n");
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <monitor_begin+0x50>)
 8000790:	2190      	movs	r1, #144	; 0x90
 8000792:	480f      	ldr	r0, [pc, #60]	; (80007d0 <monitor_begin+0x54>)
 8000794:	f00b fac4 	bl	800bd20 <sniprintf>
	monitor_send_string(ans);
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <monitor_begin+0x54>)
 800079a:	f7ff fd99 	bl	80002d0 <monitor_send_string>
	for (i = 0; i < strlen("hora do show!\r\n"); i++) {
 800079e:	2300      	movs	r3, #0
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	e006      	b.n	80007b2 <monitor_begin+0x36>
		ans[i] = '\0';
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <monitor_begin+0x54>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < strlen("hora do show!\r\n"); i++) {
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	3301      	adds	r3, #1
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b0e      	cmp	r3, #14
 80007b6:	d9f5      	bls.n	80007a4 <monitor_begin+0x28>
	}
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200005b4 	.word	0x200005b4
 80007c8:	200005b8 	.word	0x200005b8
 80007cc:	0800c700 	.word	0x0800c700
 80007d0:	20000558 	.word	0x20000558

080007d4 <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <auto_line_wrap+0x1c>)
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	7013      	strb	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200005ba 	.word	0x200005ba

080007f4 <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <text_insertion_point+0x4c>)
 8000806:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800080a:	b2db      	uxtb	r3, r3
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	fb02 f303 	mul.w	r3, r2, r3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <text_insertion_point+0x50>)
 8000816:	701a      	strb	r2, [r3, #0]
	cursor[1] = row
			* (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <text_insertion_point+0x4c>)
 800081a:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800081e:	461a      	mov	r2, r3
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <text_insertion_point+0x54>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	1ad3      	subs	r3, r2, r3
	cursor[1] = row
 8000826:	b2db      	uxtb	r3, r3
 8000828:	79ba      	ldrb	r2, [r7, #6]
 800082a:	fb02 f303 	mul.w	r3, r2, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <text_insertion_point+0x50>)
 8000832:	705a      	strb	r2, [r3, #1]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000434 	.word	0x20000434
 8000844:	200005bc 	.word	0x200005bc
 8000848:	2000022d 	.word	0x2000022d

0800084c <inverse_text>:
 *	desativa a inversão de texto
 *		FE 67 FD
 *		254 103 253
 *		254 `g` 253
 */
void inverse_text(bool state) {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 8000856:	4a04      	ldr	r2, [pc, #16]	; (8000868 <inverse_text+0x1c>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	7013      	strb	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	200005b9 	.word	0x200005b9

0800086c <def_thick_v_bar>:
 *	Define a barra vertical como com 5px de largura
 *	FE 76 FD
 *	254 118 253
 *	254 `v` 253
 */
void def_thick_v_bar(void) {
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
	vertical_bar_width = 5;
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <def_thick_v_bar+0x14>)
 8000872:	2205      	movs	r2, #5
 8000874:	701a      	strb	r2, [r3, #0]
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	2000022c 	.word	0x2000022c

08000884 <def_thin_v_bar>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_thin_v_bar(void) {
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	vertical_bar_width = 2;
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <def_thin_v_bar+0x14>)
 800088a:	2202      	movs	r2, #2
 800088c:	701a      	strb	r2, [r3, #0]
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	2000022c 	.word	0x2000022c

0800089c <draw_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_v_bar_graph(uint8_t col, uint8_t height) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	4613      	mov	r3, r2
 80008aa:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <draw_v_bar_graph+0x54>)
 80008ae:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	79fa      	ldrb	r2, [r7, #7]
 80008b6:	fb02 f303 	mul.w	r3, r2, r3
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <draw_v_bar_graph+0x58>)
 80008be:	701a      	strb	r2, [r3, #0]

	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <draw_v_bar_graph+0x58>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b299      	uxth	r1, r3
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <draw_v_bar_graph+0x58>)
 80008c8:	785b      	ldrb	r3, [r3, #1]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <draw_v_bar_graph+0x5c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b298      	uxth	r0, r3
 80008d2:	79bb      	ldrb	r3, [r7, #6]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	4603      	mov	r3, r0
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <draw_v_bar_graph+0x54>)
 80008dc:	f000 fede 	bl	800169c <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <draw_v_bar_graph+0x54>)
 80008e2:	f000 ffe1 	bl	80018a8 <u8g2_SendBuffer>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000434 	.word	0x20000434
 80008f4:	200005bc 	.word	0x200005bc
 80008f8:	2000022c 	.word	0x2000022c

080008fc <erase_v_bar_graph>:
 *	com height	variando [[0x00] a [0x20]] (0 a 32)
 *	FE 2D [col] [height] FD
 * 	254 45 [col] [height] 253
 *	254 `-` [col] [height] 253
 */
void erase_v_bar_graph(uint8_t col, uint8_t height) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af02      	add	r7, sp, #8
 8000902:	4603      	mov	r3, r0
 8000904:	460a      	mov	r2, r1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4613      	mov	r3, r2
 800090a:	71bb      	strb	r3, [r7, #6]
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <erase_v_bar_graph+0x54>)
 800090e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000912:	b2db      	uxtb	r3, r3
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	fb02 f303 	mul.w	r3, r2, r3
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <erase_v_bar_graph+0x58>)
 800091e:	701a      	strb	r2, [r3, #0]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height);
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <erase_v_bar_graph+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b299      	uxth	r1, r3
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <erase_v_bar_graph+0x58>)
 8000928:	785b      	ldrb	r3, [r3, #1]
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <erase_v_bar_graph+0x5c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b298      	uxth	r0, r3
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	b29b      	uxth	r3, r3
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	4603      	mov	r3, r0
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <erase_v_bar_graph+0x54>)
 800093c:	f000 feae 	bl	800169c <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <erase_v_bar_graph+0x54>)
 8000942:	f000 ffb1 	bl	80018a8 <u8g2_SendBuffer>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000434 	.word	0x20000434
 8000954:	200005bc 	.word	0x200005bc
 8000958:	2000022c 	.word	0x2000022c

0800095c <draw_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af02      	add	r7, sp, #8
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	460b      	mov	r3, r1
 8000968:	71bb      	strb	r3, [r7, #6]
 800096a:	4613      	mov	r3, r2
 800096c:	717b      	strb	r3, [r7, #5]
	cursor[0] = (col) * u8g2_GetMaxCharHeight(&u8g2);
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <draw_h_bar_graph+0x6c>)
 8000970:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000974:	b2db      	uxtb	r3, r3
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	fb02 f303 	mul.w	r3, r2, r3
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <draw_h_bar_graph+0x70>)
 8000980:	701a      	strb	r2, [r3, #0]
	cursor[1] = (row) * u8g2_GetMaxCharWidth(&u8g2);
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <draw_h_bar_graph+0x6c>)
 8000984:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000988:	b2db      	uxtb	r3, r3
 800098a:	79ba      	ldrb	r2, [r7, #6]
 800098c:	fb02 f303 	mul.w	r3, r2, r3
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <draw_h_bar_graph+0x70>)
 8000994:	705a      	strb	r2, [r3, #1]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <draw_h_bar_graph+0x70>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b299      	uxth	r1, r3
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <draw_h_bar_graph+0x70>)
 800099e:	785b      	ldrb	r3, [r3, #1]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	797b      	ldrb	r3, [r7, #5]
 80009a4:	b298      	uxth	r0, r3
			u8g2_GetMaxCharHeight(&u8g2));
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <draw_h_bar_graph+0x6c>)
 80009a8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght,
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	4603      	mov	r3, r0
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <draw_h_bar_graph+0x6c>)
 80009b4:	f000 fe72 	bl	800169c <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <draw_h_bar_graph+0x6c>)
 80009ba:	f000 ff75 	bl	80018a8 <u8g2_SendBuffer>
	//u8g2_DrawVLine(&u8g2, col, u8g2_uint_t y, u8g2_uint_t h);
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000434 	.word	0x20000434
 80009cc:	200005bc 	.word	0x200005bc

080009d0 <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	460a      	mov	r2, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 80009e0:	2101      	movs	r1, #1
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <put_pixel+0x38>)
 80009e4:	f002 f94e 	bl	8002c84 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	79ba      	ldrb	r2, [r7, #6]
 80009ee:	b292      	uxth	r2, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <put_pixel+0x38>)
 80009f4:	f002 f913 	bl	8002c1e <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <put_pixel+0x38>)
 80009fa:	f000 ff55 	bl	80018a8 <u8g2_SendBuffer>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000434 	.word	0x20000434

08000a0c <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4809      	ldr	r0, [pc, #36]	; (8000a44 <erase_pixel+0x38>)
 8000a20:	f002 f930 	bl	8002c84 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	79ba      	ldrb	r2, [r7, #6]
 8000a2a:	b292      	uxth	r2, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <erase_pixel+0x38>)
 8000a30:	f002 f8f5 	bl	8002c1e <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <erase_pixel+0x38>)
 8000a36:	f000 ff37 	bl	80018a8 <u8g2_SendBuffer>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000434 	.word	0x20000434

08000a48 <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8000a4c:	f003 f95b 	bl	8003d06 <HAL_NVIC_SystemReset>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	text_insertion_point(0, 0);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f7ff feca 	bl	80007f4 <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <clear_display+0x18>)
 8000a62:	f001 f8cf 	bl	8001c04 <u8g2_ClearDisplay>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000434 	.word	0x20000434

08000a70 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2110      	movs	r1, #16
 8000a80:	4803      	ldr	r0, [pc, #12]	; (8000a90 <enable_backlight+0x20>)
 8000a82:	f003 fad5 	bl	8004030 <HAL_GPIO_WritePin>
			enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40010800 	.word	0x40010800

08000a94 <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast) * 9);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	00d2      	lsls	r2, r2, #3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <set_contrast+0x24>)
 8000aac:	f002 fea7 	bl	80037fe <u8x8_SetContrast>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000434 	.word	0x20000434

08000abc <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <disp_splash+0x28>)
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	2318      	movs	r3, #24
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	23b4      	movs	r3, #180	; 0xb4
 8000acc:	2214      	movs	r2, #20
 8000ace:	2106      	movs	r1, #6
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <disp_splash+0x2c>)
 8000ad2:	f000 fda0 	bl	8001616 <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <disp_splash+0x2c>)
 8000ad8:	f000 fee6 	bl	80018a8 <u8g2_SendBuffer>

}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000004 	.word	0x20000004
 8000ae8:	20000434 	.word	0x20000434

08000aec <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap_t *wrap, uint8_t *txt) {
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux;
 8000af6:	2300      	movs	r3, #0
 8000af8:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	737b      	strb	r3, [r7, #13]

	index = strlen(txt);
 8000afe:	6838      	ldr	r0, [r7, #0]
 8000b00:	f7ff fb24 	bl	800014c <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	73bb      	strb	r3, [r7, #14]
	wrap->wrap_times = index / MAX_CHARS_ONSCREEN;
 8000b08:	7bba      	ldrb	r2, [r7, #14]
 8000b0a:	4b43      	ldr	r3, [pc, #268]	; (8000c18 <str_warper+0x12c>)
 8000b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8000b10:	1ad2      	subs	r2, r2, r3
 8000b12:	0852      	lsrs	r2, r2, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	if (wrap->wrap_times) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d071      	beq.n	8000c0e <str_warper+0x122>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
 8000b2e:	e068      	b.n	8000c02 <str_warper+0x116>
			if (aux < N_LINES) {
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d82f      	bhi.n	8000b96 <str_warper+0xaa>

				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000b36:	7bfa      	ldrb	r2, [r7, #15]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	461a      	mov	r2, r3
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	781b      	ldrb	r3, [r3, #0]
						1 : 0;
 8000b48:	2b20      	cmp	r3, #32
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000b52:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8000b54:	7bfa      	ldrb	r2, [r7, #15]
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	00da      	lsls	r2, r3, #3
 8000b5e:	1ad2      	subs	r2, r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1898      	adds	r0, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)),
 8000b64:	7bfa      	ldrb	r2, [r7, #15]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00da      	lsls	r2, r3, #3
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8000b76:	2214      	movs	r2, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f00b f919 	bl	800bdb0 <strncpy>
						MAX_CHARS_ONSCREEN - 1);
				wrap->wrap_str[aux][MAX_CHARS_ONSCREEN - 1] = '\0';
 8000b7e:	7bfa      	ldrb	r2, [r7, #15]
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	4613      	mov	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	00da      	lsls	r2, r3, #3
 8000b8a:	1ad2      	subs	r2, r2, r3
 8000b8c:	188b      	adds	r3, r1, r2
 8000b8e:	3314      	adds	r3, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e032      	b.n	8000bfc <str_warper+0x110>
			} else {
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000b96:	7bfa      	ldrb	r2, [r7, #15]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	781b      	ldrb	r3, [r3, #0]
						0 : 1;
 8000ba8:	2b20      	cmp	r3, #32
 8000baa:	bf14      	ite	ne
 8000bac:	2301      	movne	r3, #1
 8000bae:	2300      	moveq	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8000bb2:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8000bb4:	7bfa      	ldrb	r2, [r7, #15]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	00da      	lsls	r2, r3, #3
 8000bbe:	1ad2      	subs	r2, r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	189c      	adds	r4, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)) + shift,
 8000bc4:	7bfa      	ldrb	r2, [r7, #15]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00da      	lsls	r2, r3, #3
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	7b7b      	ldrb	r3, [r7, #13]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	18d5      	adds	r5, r2, r3
						strlen(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))));
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	461a      	mov	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff faae 	bl	800014c <strlen>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4629      	mov	r1, r5
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f00b f8da 	bl	800bdb0 <strncpy>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d990      	bls.n	8000b30 <str_warper+0x44>
			}
		}
	}
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bdb0      	pop	{r4, r5, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	86186187 	.word	0x86186187

08000c1c <lcd_print>:
void test_font(void) {
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}

void lcd_print(uint8_t *txt) {
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b0a3      	sub	sp, #140	; 0x8c
 8000c20:	af04      	add	r7, sp, #16
 8000c22:	6078      	str	r0, [r7, #4]
	txt_wrap_t wrap;
	uint8_t aux = 0, i;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	bool clean_it = false;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	if (text_invertion) {
 8000c30:	4b88      	ldr	r3, [pc, #544]	; (8000e54 <lcd_print+0x238>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d06e      	beq.n	8000d16 <lcd_print+0xfa>
		if (text_wrap) {
 8000c38:	4b87      	ldr	r3, [pc, #540]	; (8000e58 <lcd_print+0x23c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d047      	beq.n	8000cd0 <lcd_print+0xb4>
			str_warper(&wrap, txt);
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff50 	bl	8000aec <str_warper>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000c52:	e036      	b.n	8000cc2 <lcd_print+0xa6>
				//cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000c54:	4b81      	ldr	r3, [pc, #516]	; (8000e5c <lcd_print+0x240>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b298      	uxth	r0, r3
 8000c5a:	4b80      	ldr	r3, [pc, #512]	; (8000e5c <lcd_print+0x240>)
 8000c5c:	785b      	ldrb	r3, [r3, #1]
 8000c5e:	b29c      	uxth	r4, r3
						0, 0, 0, wrap.wrap_str[aux]);
 8000c60:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000c64:	f107 010c 	add.w	r1, r7, #12
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00da      	lsls	r2, r3, #3
 8000c70:	1ad2      	subs	r2, r2, r3
 8000c72:	188b      	adds	r3, r1, r2
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000c74:	9303      	str	r3, [sp, #12]
 8000c76:	2300      	movs	r3, #0
 8000c78:	9302      	str	r3, [sp, #8]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9301      	str	r3, [sp, #4]
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	2320      	movs	r3, #32
 8000c84:	4622      	mov	r2, r4
 8000c86:	4601      	mov	r1, r0
 8000c88:	4875      	ldr	r0, [pc, #468]	; (8000e60 <lcd_print+0x244>)
 8000c8a:	f000 ff67 	bl	8001b5c <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 8000c8e:	4874      	ldr	r0, [pc, #464]	; (8000e60 <lcd_print+0x244>)
 8000c90:	f000 fe0a 	bl	80018a8 <u8g2_SendBuffer>
				clean_it = !clean_it;
 8000c94:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	bf14      	ite	ne
 8000c9c:	2301      	movne	r3, #1
 8000c9e:	2300      	moveq	r3, #0
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000cac:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000cb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000cc2:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000cc6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d9c2      	bls.n	8000c54 <lcd_print+0x38>
 8000cce:	e0a0      	b.n	8000e12 <lcd_print+0x1f6>
				 cursor[0] += u8g2_GetStrWidth(&u8g2,
				 wrap.wrap_str[aux - 1]);
				 }*/
			}
		} else {
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 8000cd0:	4b62      	ldr	r3, [pc, #392]	; (8000e5c <lcd_print+0x240>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b299      	uxth	r1, r3
 8000cd6:	4b61      	ldr	r3, [pc, #388]	; (8000e5c <lcd_print+0x240>)
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	9303      	str	r3, [sp, #12]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	9302      	str	r3, [sp, #8]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2320      	movs	r3, #32
 8000cee:	485c      	ldr	r0, [pc, #368]	; (8000e60 <lcd_print+0x244>)
 8000cf0:	f000 ff34 	bl	8001b5c <u8g2_DrawButtonUTF8>
					0, txt);
			u8g2_SendBuffer(&u8g2);
 8000cf4:	485a      	ldr	r0, [pc, #360]	; (8000e60 <lcd_print+0x244>)
 8000cf6:	f000 fdd7 	bl	80018a8 <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4858      	ldr	r0, [pc, #352]	; (8000e60 <lcd_print+0x244>)
 8000cfe:	f001 fe3b 	bl	8002978 <u8g2_GetStrWidth>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4619      	mov	r1, r3
 8000d06:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <lcd_print+0x240>)
 8000d08:	781a      	ldrb	r2, [r3, #0]
 8000d0a:	b2cb      	uxtb	r3, r1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b52      	ldr	r3, [pc, #328]	; (8000e5c <lcd_print+0x240>)
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	e07d      	b.n	8000e12 <lcd_print+0x1f6>
		}

	} else {
		if (text_wrap) {
 8000d16:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <lcd_print+0x23c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d05f      	beq.n	8000dde <lcd_print+0x1c2>
			str_warper(&wrap, txt);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fee1 	bl	8000aec <str_warper>
			if (wrap.wrap_times) {
 8000d2a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d047      	beq.n	8000dc2 <lcd_print+0x1a6>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000d38:	e03c      	b.n	8000db4 <lcd_print+0x198>
					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],
 8000d3a:	4b48      	ldr	r3, [pc, #288]	; (8000e5c <lcd_print+0x240>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b298      	uxth	r0, r3
 8000d40:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <lcd_print+0x240>)
 8000d42:	785b      	ldrb	r3, [r3, #1]
 8000d44:	b29c      	uxth	r4, r3
							wrap.wrap_str[aux]);
 8000d46:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000d4a:	f107 010c 	add.w	r1, r7, #12
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	00da      	lsls	r2, r3, #3
 8000d56:	1ad2      	subs	r2, r2, r3
 8000d58:	188b      	adds	r3, r1, r2
					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],
 8000d5a:	4622      	mov	r2, r4
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	4840      	ldr	r0, [pc, #256]	; (8000e60 <lcd_print+0x244>)
 8000d60:	f001 fcce 	bl	8002700 <u8g2_DrawUTF8>
					u8g2_SendBuffer(&u8g2);
 8000d64:	483e      	ldr	r0, [pc, #248]	; (8000e60 <lcd_print+0x244>)
 8000d66:	f000 fd9f 	bl	80018a8 <u8g2_SendBuffer>

					cursor[1] += (u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS;
 8000d6a:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <lcd_print+0x240>)
 8000d6c:	785a      	ldrb	r2, [r3, #1]
 8000d6e:	4b3c      	ldr	r3, [pc, #240]	; (8000e60 <lcd_print+0x244>)
 8000d70:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000d74:	b2d9      	uxtb	r1, r3
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <lcd_print+0x248>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	1acb      	subs	r3, r1, r3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	4413      	add	r3, r2
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <lcd_print+0x240>)
 8000d84:	705a      	strb	r2, [r3, #1]

					clean_it = !clean_it;
 8000d86:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf14      	ite	ne
 8000d8e:	2301      	movne	r3, #1
 8000d90:	2300      	moveq	r3, #0
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	f083 0301 	eor.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000d9e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8000daa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000dae:	3301      	adds	r3, #1
 8000db0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000db4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000db8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d9bc      	bls.n	8000d3a <lcd_print+0x11e>
 8000dc0:	e027      	b.n	8000e12 <lcd_print+0x1f6>
				}
			} else {
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <lcd_print+0x240>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b299      	uxth	r1, r3
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <lcd_print+0x240>)
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4823      	ldr	r0, [pc, #140]	; (8000e60 <lcd_print+0x244>)
 8000dd2:	f001 fc95 	bl	8002700 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 8000dd6:	4822      	ldr	r0, [pc, #136]	; (8000e60 <lcd_print+0x244>)
 8000dd8:	f000 fd66 	bl	80018a8 <u8g2_SendBuffer>
 8000ddc:	e019      	b.n	8000e12 <lcd_print+0x1f6>
			 cursor[0] = 0;
			 } else {
			 cursor[0] += u8g2_GetStrWidth(&u8g2, wrap.wrap_str[aux - 1]);
			 }*/
		} else {
			u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <lcd_print+0x240>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b299      	uxth	r1, r3
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <lcd_print+0x240>)
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	481c      	ldr	r0, [pc, #112]	; (8000e60 <lcd_print+0x244>)
 8000dee:	f001 fc87 	bl	8002700 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 8000df2:	481b      	ldr	r0, [pc, #108]	; (8000e60 <lcd_print+0x244>)
 8000df4:	f000 fd58 	bl	80018a8 <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	4819      	ldr	r0, [pc, #100]	; (8000e60 <lcd_print+0x244>)
 8000dfc:	f001 fdbc 	bl	8002978 <u8g2_GetStrWidth>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <lcd_print+0x240>)
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	b2cb      	uxtb	r3, r1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <lcd_print+0x240>)
 8000e10:	701a      	strb	r2, [r3, #0]
		}
	}
	if (clean_it) {
 8000e12:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d018      	beq.n	8000e4c <lcd_print+0x230>

		memset(wrap.wrap_str, 0, sizeof(wrap.wrap_str));
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2269      	movs	r2, #105	; 0x69
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00a ff74 	bl	800bd10 <memset>
		clean_it = !clean_it;
 8000e28:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf14      	ite	ne
 8000e30:	2301      	movne	r3, #1
 8000e32:	2300      	moveq	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f083 0301 	eor.w	r3, r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000e40:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	}
}
 8000e4c:	bf00      	nop
 8000e4e:	377c      	adds	r7, #124	; 0x7c
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	200005b9 	.word	0x200005b9
 8000e58:	200005ba 	.word	0x200005ba
 8000e5c:	200005bc 	.word	0x200005bc
 8000e60:	20000434 	.word	0x20000434
 8000e64:	2000022d 	.word	0x2000022d

08000e68 <Kpd_Irqv_Init>:
#include "usbd_cdc_if.h"

//{set,reset,up,down,left,right}
key_ih IRQ_VECTOR[6];

void Kpd_Irqv_Init(void) {
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	//
	IRQ_VECTOR[0].IRQn_p = SET_P_EXTI_IRQn;
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000e6e:	220a      	movs	r2, #10
 8000e70:	705a      	strb	r2, [r3, #1]
	IRQ_VECTOR[0].deb_counter = 0;
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
	//
	IRQ_VECTOR[1].IRQn_p = RESET_P_EXTI_IRQn;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000e7a:	2217      	movs	r2, #23
 8000e7c:	70da      	strb	r2, [r3, #3]
	IRQ_VECTOR[1].deb_counter = 0;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	709a      	strb	r2, [r3, #2]
	//
	IRQ_VECTOR[2].IRQn_p = UP_P_EXTI_IRQn;
 8000e84:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000e86:	2217      	movs	r2, #23
 8000e88:	715a      	strb	r2, [r3, #5]
	IRQ_VECTOR[2].deb_counter = 0;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	711a      	strb	r2, [r3, #4]
	//
	IRQ_VECTOR[3].IRQn_p = DOWN_P_EXTI_IRQn;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000e92:	2217      	movs	r2, #23
 8000e94:	71da      	strb	r2, [r3, #7]
	IRQ_VECTOR[3].deb_counter = 0;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	719a      	strb	r2, [r3, #6]
	//
	IRQ_VECTOR[4].IRQn_p = LEFT_P_EXTI_IRQn;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000e9e:	2217      	movs	r2, #23
 8000ea0:	725a      	strb	r2, [r3, #9]
	IRQ_VECTOR[4].deb_counter = 0;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	721a      	strb	r2, [r3, #8]
	//
	IRQ_VECTOR[5].IRQn_p = RIGHT_P_EXTI_IRQn;
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000eaa:	2217      	movs	r2, #23
 8000eac:	72da      	strb	r2, [r3, #11]
	IRQ_VECTOR[5].deb_counter = 0;
 8000eae:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <Kpd_Irqv_Init+0x54>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	729a      	strb	r2, [r3, #10]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	200005c0 	.word	0x200005c0

08000ec0 <SystickCallback>:

void SystickCallback(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 6; i++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	e01b      	b.n	8000f04 <SystickCallback+0x44>
		if (IRQ_VECTOR[i].deb_counter == 0) {
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <SystickCallback+0x54>)
 8000ed0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d109      	bne.n	8000eec <SystickCallback+0x2c>
			HAL_NVIC_EnableIRQ(IRQ_VECTOR[i].IRQn_p);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <SystickCallback+0x54>)
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f002 fef2 	bl	8003cce <HAL_NVIC_EnableIRQ>
 8000eea:	e008      	b.n	8000efe <SystickCallback+0x3e>
		} else {
			IRQ_VECTOR[i].deb_counter--;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <SystickCallback+0x54>)
 8000ef0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8000ef4:	3a01      	subs	r2, #1
 8000ef6:	b2d1      	uxtb	r1, r2
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <SystickCallback+0x54>)
 8000efa:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 6; i++) {
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	3301      	adds	r3, #1
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	2b05      	cmp	r3, #5
 8000f08:	d9e0      	bls.n	8000ecc <SystickCallback+0xc>
		}
	}
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200005c0 	.word	0x200005c0

08000f18 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SET_P_Pin) {
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	2b10      	cmp	r3, #16
 8000f26:	d10d      	bne.n	8000f44 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_NVIC_DisableIRQ(IRQ_VECTOR[0].IRQn_p);
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x34>)
 8000f2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fedb 	bl	8003cea <HAL_NVIC_DisableIRQ>
		IRQ_VECTOR[0].deb_counter = DEBOUNCE_TIME;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x34>)
 8000f36:	22f4      	movs	r2, #244	; 0xf4
 8000f38:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x38>)
 8000f40:	f003 f88e 	bl	8004060 <HAL_GPIO_TogglePin>
	}
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200005c0 	.word	0x200005c0
 8000f50:	40011000 	.word	0x40011000

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f002 fd06 	bl	8003968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f80c 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 f8e6 	bl	8001130 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f64:	f00a f9da 	bl	800b31c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000f68:	f000 f860 	bl	800102c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000f6c:	f000 f894 	bl	8001098 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 8000f70:	f7ff f972 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 8000f74:	bf30      	wfi
 8000f76:	e7fd      	b.n	8000f74 <main+0x20>

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	; 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f82:	2228      	movs	r2, #40	; 0x28
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f00a fec2 	bl	800bd10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 fd3c 	bl	8005a4c <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fda:	f000 f94f 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	230f      	movs	r3, #15
 8000fe0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 ffa8 	bl	8005f50 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001006:	f000 f939 	bl	800127c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800100a:	2310      	movs	r3, #16
 800100c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4618      	mov	r0, r3
 8001016:	f005 f901 	bl	800621c <HAL_RCCEx_PeriphCLKConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001020:	f000 f92c 	bl	800127c <Error_Handler>
  }
}
 8001024:	bf00      	nop
 8001026:	3750      	adds	r7, #80	; 0x50
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_SPI1_Init+0x64>)
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_SPI1_Init+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_SPI1_Init+0x64>)
 8001038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800103c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_SPI1_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_SPI1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_SPI1_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_SPI1_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_SPI1_Init+0x64>)
 8001058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_SPI1_Init+0x64>)
 8001060:	2208      	movs	r2, #8
 8001062:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_SPI1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_SPI1_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MX_SPI1_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_SPI1_Init+0x64>)
 8001078:	220a      	movs	r2, #10
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_SPI1_Init+0x64>)
 800107e:	f005 f983 	bl	8006388 <HAL_SPI_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001088:	f000 f8f8 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200005cc 	.word	0x200005cc
 8001094:	40013000 	.word	0x40013000

08001098 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <MX_TIM2_Init+0x94>)
 80010b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_TIM2_Init+0x94>)
 80010be:	f64e 2260 	movw	r2, #60000	; 0xea60
 80010c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <MX_TIM2_Init+0x94>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_TIM2_Init+0x94>)
 80010cc:	221d      	movs	r2, #29
 80010ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_TIM2_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <MX_TIM2_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010dc:	4813      	ldr	r0, [pc, #76]	; (800112c <MX_TIM2_Init+0x94>)
 80010de:	f005 fbb9 	bl	8006854 <HAL_TIM_Base_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010e8:	f000 f8c8 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <MX_TIM2_Init+0x94>)
 80010fa:	f005 fd83 	bl	8006c04 <HAL_TIM_ConfigClockSource>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001104:	f000 f8ba 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_TIM2_Init+0x94>)
 8001116:	f005 ff55 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001120:	f000 f8ac 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000624 	.word	0x20000624

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001144:	4b48      	ldr	r3, [pc, #288]	; (8001268 <MX_GPIO_Init+0x138>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a47      	ldr	r2, [pc, #284]	; (8001268 <MX_GPIO_Init+0x138>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b45      	ldr	r3, [pc, #276]	; (8001268 <MX_GPIO_Init+0x138>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115c:	4b42      	ldr	r3, [pc, #264]	; (8001268 <MX_GPIO_Init+0x138>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a41      	ldr	r2, [pc, #260]	; (8001268 <MX_GPIO_Init+0x138>)
 8001162:	f043 0320 	orr.w	r3, r3, #32
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <MX_GPIO_Init+0x138>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0320 	and.w	r3, r3, #32
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <MX_GPIO_Init+0x138>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a3b      	ldr	r2, [pc, #236]	; (8001268 <MX_GPIO_Init+0x138>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <MX_GPIO_Init+0x138>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	4b36      	ldr	r3, [pc, #216]	; (8001268 <MX_GPIO_Init+0x138>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a35      	ldr	r2, [pc, #212]	; (8001268 <MX_GPIO_Init+0x138>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b33      	ldr	r3, [pc, #204]	; (8001268 <MX_GPIO_Init+0x138>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011aa:	4830      	ldr	r0, [pc, #192]	; (800126c <MX_GPIO_Init+0x13c>)
 80011ac:	f002 ff40 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2110      	movs	r1, #16
 80011b4:	482e      	ldr	r0, [pc, #184]	; (8001270 <MX_GPIO_Init+0x140>)
 80011b6:	f002 ff3b 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2140      	movs	r1, #64	; 0x40
 80011be:	482c      	ldr	r0, [pc, #176]	; (8001270 <MX_GPIO_Init+0x140>)
 80011c0:	f002 ff36 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2103      	movs	r1, #3
 80011c8:	482a      	ldr	r0, [pc, #168]	; (8001274 <MX_GPIO_Init+0x144>)
 80011ca:	f002 ff31 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2302      	movs	r3, #2
 80011de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4619      	mov	r1, r3
 80011e6:	4821      	ldr	r0, [pc, #132]	; (800126c <MX_GPIO_Init+0x13c>)
 80011e8:	f002 fd9e 	bl	8003d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80011ec:	2350      	movs	r3, #80	; 0x50
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	481b      	ldr	r0, [pc, #108]	; (8001270 <MX_GPIO_Init+0x140>)
 8001204:	f002 fd90 	bl	8003d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001208:	2303      	movs	r3, #3
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2302      	movs	r3, #2
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	4619      	mov	r1, r3
 800121e:	4815      	ldr	r0, [pc, #84]	; (8001274 <MX_GPIO_Init+0x144>)
 8001220:	f002 fd82 	bl	8003d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_P_Pin RESET_P_Pin UP_P_Pin DOWN_P_Pin
                           LEFT_P_Pin RIGHT_P_Pin */
  GPIO_InitStruct.Pin = SET_P_Pin|RESET_P_Pin|UP_P_Pin|DOWN_P_Pin
 8001224:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001228:	613b      	str	r3, [r7, #16]
                          |LEFT_P_Pin|RIGHT_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_GPIO_Init+0x148>)
 800122c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122e:	2301      	movs	r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001232:	f107 0310 	add.w	r3, r7, #16
 8001236:	4619      	mov	r1, r3
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_GPIO_Init+0x144>)
 800123a:	f002 fd75 	bl	8003d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	200a      	movs	r0, #10
 8001244:	f002 fd27 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001248:	200a      	movs	r0, #10
 800124a:	f002 fd40 	bl	8003cce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2017      	movs	r0, #23
 8001254:	f002 fd1f 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001258:	2017      	movs	r0, #23
 800125a:	f002 fd38 	bl	8003cce <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	40011000 	.word	0x40011000
 8001270:	40010800 	.word	0x40010800
 8001274:	40010c00 	.word	0x40010c00
 8001278:	10210000 	.word	0x10210000

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <HAL_MspInit+0x7c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <HAL_MspInit+0x7c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_MspInit+0x7c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_MspInit+0x7c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a16      	ldr	r2, [pc, #88]	; (8001304 <HAL_MspInit+0x7c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_MspInit+0x7c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2005      	movs	r0, #5
 80012c4:	f002 fce7 	bl	8003c96 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80012c8:	2005      	movs	r0, #5
 80012ca:	f002 fd00 	bl	8003cce <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2005      	movs	r0, #5
 80012d4:	f002 fcdf 	bl	8003c96 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80012d8:	2005      	movs	r0, #5
 80012da:	f002 fcf8 	bl	8003cce <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_MspInit+0x80>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_MspInit+0x80>)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000

0800130c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a15      	ldr	r2, [pc, #84]	; (800137c <HAL_SPI_MspInit+0x70>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d123      	bne.n	8001374 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <HAL_SPI_MspInit+0x74>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a13      	ldr	r2, [pc, #76]	; (8001380 <HAL_SPI_MspInit+0x74>)
 8001332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <HAL_SPI_MspInit+0x74>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_SPI_MspInit+0x74>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HAL_SPI_MspInit+0x74>)
 800134a:	f043 0304 	orr.w	r3, r3, #4
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_SPI_MspInit+0x74>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800135c:	23a0      	movs	r3, #160	; 0xa0
 800135e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <HAL_SPI_MspInit+0x78>)
 8001370:	f002 fcda 	bl	8003d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001374:	bf00      	nop
 8001376:	3720      	adds	r7, #32
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40013000 	.word	0x40013000
 8001380:	40021000 	.word	0x40021000
 8001384:	40010800 	.word	0x40010800

08001388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001398:	d113      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <HAL_TIM_Base_MspInit+0x44>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_TIM_Base_MspInit+0x44>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_TIM_Base_MspInit+0x44>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	201c      	movs	r0, #28
 80013b8:	f002 fc6d 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013bc:	201c      	movs	r0, #28
 80013be:	f002 fc86 	bl	8003cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler+0x4>

080013ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickCallback();
 8001416:	f7ff fd53 	bl	8000ec0 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141a:	f002 faeb 	bl	80039f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}

08001422 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_P_Pin);
 8001432:	2010      	movs	r0, #16
 8001434:	f002 fe2e 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001442:	f002 ff70 	bl	8004326 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000190c 	.word	0x2000190c

08001450 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001456:	f002 ff66 	bl	8004326 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000190c 	.word	0x2000190c

08001464 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_P_Pin);
 8001468:	2020      	movs	r0, #32
 800146a:	f002 fe13 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_P_Pin);
 800146e:	2040      	movs	r0, #64	; 0x40
 8001470:	f002 fe10 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_P_Pin);
 8001474:	2080      	movs	r0, #128	; 0x80
 8001476:	f002 fe0d 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_P_Pin);
 800147a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800147e:	f002 fe09 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_P_Pin);
 8001482:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001486:	f002 fe05 	bl	8004094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM2_IRQHandler+0x10>)
 8001496:	f005 faad 	bl	80069f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000624 	.word	0x20000624

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f00a fbe4 	bl	800bca0 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20005000 	.word	0x20005000
 8001504:	00000400 	.word	0x00000400
 8001508:	2000066c 	.word	0x2000066c
 800150c:	20001e28 	.word	0x20001e28

08001510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b088      	sub	sp, #32
 800153e:	af02      	add	r7, sp, #8
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	4608      	mov	r0, r1
 8001544:	4611      	mov	r1, r2
 8001546:	461a      	mov	r2, r3
 8001548:	4603      	mov	r3, r0
 800154a:	817b      	strh	r3, [r7, #10]
 800154c:	460b      	mov	r3, r1
 800154e:	813b      	strh	r3, [r7, #8]
 8001550:	4613      	mov	r3, r2
 8001552:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800155a:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800155c:	7dbb      	ldrb	r3, [r7, #22]
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf0c      	ite	eq
 8001562:	2301      	moveq	r3, #1
 8001564:	2300      	movne	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800156a:	897a      	ldrh	r2, [r7, #10]
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4413      	add	r3, r2
 8001570:	b298      	uxth	r0, r3
 8001572:	893b      	ldrh	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	893a      	ldrh	r2, [r7, #8]
 800157a:	8979      	ldrh	r1, [r7, #10]
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4603      	mov	r3, r0
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f001 fbc8 	bl	8002d16 <u8g2_IsIntersection>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d040      	beq.n	800160e <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800158c:	2301      	movs	r3, #1
 800158e:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001590:	e035      	b.n	80015fe <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	4013      	ands	r3, r2
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00c      	beq.n	80015ba <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	7dba      	ldrb	r2, [r7, #22]
 80015a4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80015a8:	893a      	ldrh	r2, [r7, #8]
 80015aa:	8979      	ldrh	r1, [r7, #10]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f001 fa76 	bl	8002aa4 <u8g2_DrawHVLine>
 80015b8:	e010      	b.n	80015dc <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d10b      	bne.n	80015dc <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	7d7a      	ldrb	r2, [r7, #21]
 80015c8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80015cc:	893a      	ldrh	r2, [r7, #8]
 80015ce:	8979      	ldrh	r1, [r7, #10]
 80015d0:	2300      	movs	r3, #0
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f001 fa64 	bl	8002aa4 <u8g2_DrawHVLine>
    }
    x++;
 80015dc:	897b      	ldrh	r3, [r7, #10]
 80015de:	3301      	adds	r3, #1
 80015e0:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d104      	bne.n	80015f8 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
      b++;
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	3301      	adds	r3, #1
 80015f6:	623b      	str	r3, [r7, #32]
    }
    len--;
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1c6      	bne.n	8001592 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	7dba      	ldrb	r2, [r7, #22]
 8001608:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800160c:	e000      	b.n	8001610 <u8g2_DrawHXBM+0xd6>
    return;
 800160e:	bf00      	nop
}
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b088      	sub	sp, #32
 800161a:	af02      	add	r7, sp, #8
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	4608      	mov	r0, r1
 8001620:	4611      	mov	r1, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4603      	mov	r3, r0
 8001626:	817b      	strh	r3, [r7, #10]
 8001628:	460b      	mov	r3, r1
 800162a:	813b      	strh	r3, [r7, #8]
 800162c:	4613      	mov	r3, r2
 800162e:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001634:	8afb      	ldrh	r3, [r7, #22]
 8001636:	3307      	adds	r3, #7
 8001638:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 800163a:	8afb      	ldrh	r3, [r7, #22]
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001640:	897a      	ldrh	r2, [r7, #10]
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	4413      	add	r3, r2
 8001646:	b298      	uxth	r0, r3
 8001648:	893a      	ldrh	r2, [r7, #8]
 800164a:	8c3b      	ldrh	r3, [r7, #32]
 800164c:	4413      	add	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	893a      	ldrh	r2, [r7, #8]
 8001652:	8979      	ldrh	r1, [r7, #10]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4603      	mov	r3, r0
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f001 fb5c 	bl	8002d16 <u8g2_IsIntersection>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d017      	beq.n	8001694 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001664:	e012      	b.n	800168c <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001666:	88f8      	ldrh	r0, [r7, #6]
 8001668:	893a      	ldrh	r2, [r7, #8]
 800166a:	8979      	ldrh	r1, [r7, #10]
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	4603      	mov	r3, r0
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff ff61 	bl	800153a <u8g2_DrawHXBM>
    bitmap += blen;
 8001678:	8afb      	ldrh	r3, [r7, #22]
 800167a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167c:	4413      	add	r3, r2
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001680:	893b      	ldrh	r3, [r7, #8]
 8001682:	3301      	adds	r3, #1
 8001684:	813b      	strh	r3, [r7, #8]
    h--;
 8001686:	8c3b      	ldrh	r3, [r7, #32]
 8001688:	3b01      	subs	r3, #1
 800168a:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 800168c:	8c3b      	ldrh	r3, [r7, #32]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1e9      	bne.n	8001666 <u8g2_DrawXBM+0x50>
 8001692:	e000      	b.n	8001696 <u8g2_DrawXBM+0x80>
    return;
 8001694:	bf00      	nop
  }
}
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	817b      	strh	r3, [r7, #10]
 80016ae:	460b      	mov	r3, r1
 80016b0:	813b      	strh	r3, [r7, #8]
 80016b2:	4613      	mov	r3, r2
 80016b4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80016b6:	897a      	ldrh	r2, [r7, #10]
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	4413      	add	r3, r2
 80016bc:	b298      	uxth	r0, r3
 80016be:	893a      	ldrh	r2, [r7, #8]
 80016c0:	8b3b      	ldrh	r3, [r7, #24]
 80016c2:	4413      	add	r3, r2
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	893a      	ldrh	r2, [r7, #8]
 80016c8:	8979      	ldrh	r1, [r7, #10]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4603      	mov	r3, r0
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f001 fb21 	bl	8002d16 <u8g2_IsIntersection>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d012      	beq.n	8001700 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80016da:	e00d      	b.n	80016f8 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	893a      	ldrh	r2, [r7, #8]
 80016e0:	8979      	ldrh	r1, [r7, #10]
 80016e2:	2000      	movs	r0, #0
 80016e4:	9000      	str	r0, [sp, #0]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f001 f9dc 	bl	8002aa4 <u8g2_DrawHVLine>
    y++;    
 80016ec:	893b      	ldrh	r3, [r7, #8]
 80016ee:	3301      	adds	r3, #1
 80016f0:	813b      	strh	r3, [r7, #8]
    h--;
 80016f2:	8b3b      	ldrh	r3, [r7, #24]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 80016f8:	8b3b      	ldrh	r3, [r7, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ee      	bne.n	80016dc <u8g2_DrawBox+0x40>
 80016fe:	e000      	b.n	8001702 <u8g2_DrawBox+0x66>
    return;
 8001700:	bf00      	nop
  }
}
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	817b      	strh	r3, [r7, #10]
 800171a:	460b      	mov	r3, r1
 800171c:	813b      	strh	r3, [r7, #8]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001722:	897b      	ldrh	r3, [r7, #10]
 8001724:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001726:	897a      	ldrh	r2, [r7, #10]
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	4413      	add	r3, r2
 800172c:	b298      	uxth	r0, r3
 800172e:	893a      	ldrh	r2, [r7, #8]
 8001730:	8c3b      	ldrh	r3, [r7, #32]
 8001732:	4413      	add	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	893a      	ldrh	r2, [r7, #8]
 8001738:	8979      	ldrh	r1, [r7, #10]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4603      	mov	r3, r0
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f001 fae9 	bl	8002d16 <u8g2_IsIntersection>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d037      	beq.n	80017ba <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	893a      	ldrh	r2, [r7, #8]
 800174e:	8979      	ldrh	r1, [r7, #10]
 8001750:	2000      	movs	r0, #0
 8001752:	9000      	str	r0, [sp, #0]
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f001 f9a5 	bl	8002aa4 <u8g2_DrawHVLine>
  if (h >= 2) {
 800175a:	8c3b      	ldrh	r3, [r7, #32]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d92d      	bls.n	80017bc <u8g2_DrawFrame+0xb4>
    h-=2;
 8001760:	8c3b      	ldrh	r3, [r7, #32]
 8001762:	3b02      	subs	r3, #2
 8001764:	843b      	strh	r3, [r7, #32]
    y++;
 8001766:	893b      	ldrh	r3, [r7, #8]
 8001768:	3301      	adds	r3, #1
 800176a:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 800176c:	8c3b      	ldrh	r3, [r7, #32]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d01a      	beq.n	80017a8 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001772:	8c3b      	ldrh	r3, [r7, #32]
 8001774:	893a      	ldrh	r2, [r7, #8]
 8001776:	8979      	ldrh	r1, [r7, #10]
 8001778:	2001      	movs	r0, #1
 800177a:	9000      	str	r0, [sp, #0]
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f001 f991 	bl	8002aa4 <u8g2_DrawHVLine>
      x+=w;
 8001782:	897a      	ldrh	r2, [r7, #10]
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	4413      	add	r3, r2
 8001788:	817b      	strh	r3, [r7, #10]
      x--;
 800178a:	897b      	ldrh	r3, [r7, #10]
 800178c:	3b01      	subs	r3, #1
 800178e:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001790:	8c3b      	ldrh	r3, [r7, #32]
 8001792:	893a      	ldrh	r2, [r7, #8]
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	2001      	movs	r0, #1
 8001798:	9000      	str	r0, [sp, #0]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f001 f982 	bl	8002aa4 <u8g2_DrawHVLine>
      y+=h;
 80017a0:	893a      	ldrh	r2, [r7, #8]
 80017a2:	8c3b      	ldrh	r3, [r7, #32]
 80017a4:	4413      	add	r3, r2
 80017a6:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	893a      	ldrh	r2, [r7, #8]
 80017ac:	8af9      	ldrh	r1, [r7, #22]
 80017ae:	2000      	movs	r0, #0
 80017b0:	9000      	str	r0, [sp, #0]
 80017b2:	68f8      	ldr	r0, [r7, #12]
 80017b4:	f001 f976 	bl	8002aa4 <u8g2_DrawHVLine>
 80017b8:	e000      	b.n	80017bc <u8g2_DrawFrame+0xb4>
    return;
 80017ba:	bf00      	nop
  }
}
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b084      	sub	sp, #16
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	7c1b      	ldrb	r3, [r3, #16]
 80017d0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017d8:	461a      	mov	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00a fa8d 	bl	800bd10 <memset>
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af02      	add	r7, sp, #8
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	70fb      	strb	r3, [r7, #3]
 800180a:	4613      	mov	r3, r2
 800180c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	7c1b      	ldrb	r3, [r3, #16]
 8001814:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	b29b      	uxth	r3, r3
 8001824:	89ba      	ldrh	r2, [r7, #12]
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800182c:	89bb      	ldrh	r3, [r7, #12]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001832:	89bb      	ldrh	r3, [r7, #12]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	4413      	add	r3, r2
 8001838:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800183a:	7bf9      	ldrb	r1, [r7, #15]
 800183c:	78ba      	ldrb	r2, [r7, #2]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	460b      	mov	r3, r1
 8001844:	2100      	movs	r1, #0
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f001 ff88 	bl	800375c <u8x8_DrawTile>
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001866:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800186e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	7c5b      	ldrb	r3, [r3, #17]
 8001876:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001878:	7bba      	ldrb	r2, [r7, #14]
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffbd 	bl	80017fe <u8g2_send_tile_row>
    src_row++;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	3301      	adds	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800188a:	7bbb      	ldrb	r3, [r7, #14]
 800188c:	3301      	adds	r3, #1
 800188e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	7b7b      	ldrb	r3, [r7, #13]
 8001894:	429a      	cmp	r2, r3
 8001896:	d203      	bcs.n	80018a0 <u8g2_send_buffer+0x4c>
 8001898:	7bba      	ldrb	r2, [r7, #14]
 800189a:	7b3b      	ldrb	r3, [r7, #12]
 800189c:	429a      	cmp	r2, r3
 800189e:	d3eb      	bcc.n	8001878 <u8g2_send_buffer+0x24>
}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffcf 	bl	8001854 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f001 ffb2 	bl	8003820 <u8x8_RefreshDisplay>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	4798      	blx	r3
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff5b 	bl	80017c2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800190c:	2100      	movs	r1, #0
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffd8 	bl	80018c4 <u8g2_SetBufferCurrTileRow>
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff95 	bl	8001854 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001930:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	4413      	add	r3, r2
 800193c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	7c5b      	ldrb	r3, [r3, #17]
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	429a      	cmp	r2, r3
 8001948:	d304      	bcc.n	8001954 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f001 ff68 	bl	8003820 <u8x8_RefreshDisplay>
    return 0;
 8001950:	2300      	movs	r3, #0
 8001952:	e00d      	b.n	8001970 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ff2f 	bl	80017c2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ffab 	bl	80018c4 <u8g2_SetBufferCurrTileRow>
  return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	461a      	mov	r2, r3
 8001986:	4603      	mov	r3, r0
 8001988:	817b      	strh	r3, [r7, #10]
 800198a:	460b      	mov	r3, r1
 800198c:	813b      	strh	r3, [r7, #8]
 800198e:	4613      	mov	r3, r2
 8001990:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 8001992:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001994:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 8001996:	2308      	movs	r3, #8
 8001998:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80019a8:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80019b0:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80019b8:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 80019c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019c6:	3301      	adds	r3, #1
 80019c8:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 80019ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019cc:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 80019ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 80019d4:	897b      	ldrh	r3, [r7, #10]
 80019d6:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 80019d8:	8b7a      	ldrh	r2, [r7, #26]
 80019da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 80019e0:	8b7a      	ldrh	r2, [r7, #26]
 80019e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 80019e8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ec:	4413      	add	r3, r2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	8c3b      	ldrh	r3, [r7, #32]
 80019f6:	4413      	add	r3, r2
 80019f8:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 80019fa:	893b      	ldrh	r3, [r7, #8]
 80019fc:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	4798      	blx	r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	461a      	mov	r2, r3
 8001a0a:	8afb      	ldrh	r3, [r7, #22]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001a10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	8afa      	ldrh	r2, [r7, #22]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 8001a1c:	8afa      	ldrh	r2, [r7, #22]
 8001a1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8001a24:	8afa      	ldrh	r2, [r7, #22]
 8001a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 8001a2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a30:	b21a      	sxth	r2, r3
 8001a32:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001a40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a42:	440b      	add	r3, r1
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 8001a4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d067      	beq.n	8001b24 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8001a54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d109      	bne.n	8001a70 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 8001a5c:	7f7b      	ldrb	r3, [r7, #29]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf0c      	ite	eq
 8001a62:	2301      	moveq	r3, #1
 8001a64:	2300      	movne	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f001 f90a 	bl	8002c84 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8001a70:	8b38      	ldrh	r0, [r7, #24]
 8001a72:	8afa      	ldrh	r2, [r7, #22]
 8001a74:	8b79      	ldrh	r1, [r7, #26]
 8001a76:	8abb      	ldrh	r3, [r7, #20]
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff fe43 	bl	8001708 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001a82:	7f7b      	ldrb	r3, [r7, #29]
 8001a84:	4619      	mov	r1, r3
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f001 f8fc 	bl	8002c84 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	f003 0318 	and.w	r3, r3, #24
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d042      	beq.n	8001b1c <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 8001a96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d13c      	bne.n	8001b1c <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	10db      	asrs	r3, r3, #3
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8001aae:	8a7b      	ldrh	r3, [r7, #18]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ab8:	e02c      	b.n	8001b14 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 8001aba:	8b7a      	ldrh	r2, [r7, #26]
 8001abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	8a7b      	ldrh	r3, [r7, #18]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b299      	uxth	r1, r3
 8001ac8:	8afa      	ldrh	r2, [r7, #22]
 8001aca:	8abb      	ldrh	r3, [r7, #20]
 8001acc:	4413      	add	r3, r2
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	8a7b      	ldrh	r3, [r7, #18]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	8b3b      	ldrh	r3, [r7, #24]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f001 f86b 	bl	8002bba <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8001ae4:	8b7a      	ldrh	r2, [r7, #26]
 8001ae6:	8b3b      	ldrh	r3, [r7, #24]
 8001ae8:	4413      	add	r3, r2
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001aee:	4413      	add	r3, r2
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	8a7b      	ldrh	r3, [r7, #18]
 8001af4:	4413      	add	r3, r2
 8001af6:	b299      	uxth	r1, r3
 8001af8:	8afa      	ldrh	r2, [r7, #22]
 8001afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001afc:	4413      	add	r3, r2
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	8a7b      	ldrh	r3, [r7, #18]
 8001b02:	4413      	add	r3, r2
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	8abb      	ldrh	r3, [r7, #20]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f001 f86f 	bl	8002bec <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8001b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b10:	3301      	adds	r3, #1
 8001b12:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b14:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d3ce      	bcc.n	8001aba <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 8001b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8001b22:	e757      	b.n	80019d4 <u8g2_DrawButtonFrame+0x5c>
      break;
 8001b24:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d011      	beq.n	8001b54 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8001b30:	2102      	movs	r1, #2
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f001 f8a6 	bl	8002c84 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8001b38:	8b38      	ldrh	r0, [r7, #24]
 8001b3a:	8afa      	ldrh	r2, [r7, #22]
 8001b3c:	8b79      	ldrh	r1, [r7, #26]
 8001b3e:	8abb      	ldrh	r3, [r7, #20]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4603      	mov	r3, r0
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff fda9 	bl	800169c <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001b4a:	7f7b      	ldrb	r3, [r7, #29]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f001 f898 	bl	8002c84 <u8g2_SetDrawColor>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af04      	add	r7, sp, #16
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	4608      	mov	r0, r1
 8001b66:	4611      	mov	r1, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	817b      	strh	r3, [r7, #10]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	813b      	strh	r3, [r7, #8]
 8001b72:	4613      	mov	r3, r2
 8001b74:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 8001b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 ff11 	bl	80029a0 <u8g2_GetUTF8Width>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001b82:	2300      	movs	r3, #0
 8001b84:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d009      	beq.n	8001ba4 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8001b90:	8afb      	ldrh	r3, [r7, #22]
 8001b92:	3301      	adds	r3, #1
 8001b94:	0fda      	lsrs	r2, r3, #31
 8001b96:	4413      	add	r3, r2
 8001b98:	105b      	asrs	r3, r3, #1
 8001b9a:	425b      	negs	r3, r3
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	897b      	ldrh	r3, [r7, #10]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8001ba4:	8afa      	ldrh	r2, [r7, #22]
 8001ba6:	8c3b      	ldrh	r3, [r7, #32]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d20d      	bcs.n	8001bc8 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 8001bb6:	8c3a      	ldrh	r2, [r7, #32]
 8001bb8:	8afb      	ldrh	r3, [r7, #22]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	0fda      	lsrs	r2, r3, #31
 8001bbe:	4413      	add	r3, r2
 8001bc0:	105b      	asrs	r3, r3, #1
 8001bc2:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8001bc4:	8c3b      	ldrh	r3, [r7, #32]
 8001bc6:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 8001bc8:	2101      	movs	r1, #1
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f000 fcda 	bl	8002584 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8001bd0:	893a      	ldrh	r2, [r7, #8]
 8001bd2:	8979      	ldrh	r1, [r7, #10]
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f000 fd92 	bl	8002700 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8001bdc:	897a      	ldrh	r2, [r7, #10]
 8001bde:	8abb      	ldrh	r3, [r7, #20]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	b299      	uxth	r1, r3
 8001be4:	88f8      	ldrh	r0, [r7, #6]
 8001be6:	893a      	ldrh	r2, [r7, #8]
 8001be8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	8afb      	ldrh	r3, [r7, #22]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f7ff febe 	bl	8001978 <u8g2_DrawButtonFrame>
  
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff fe71 	bl	80018f4 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fe82 	bl	800191c <u8g2_NextPage>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f9      	bne.n	8001c12 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001c1e:	2100      	movs	r1, #0
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff fe4f 	bl	80018c4 <u8g2_SetBufferCurrTileRow>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2208      	movs	r2, #8
 8001c3c:	701a      	strb	r2, [r3, #0]
  return buf;
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000670 	.word	0x20000670

08001c50 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
 8001c5c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 8001c66:	490c      	ldr	r1, [pc, #48]	; (8001c98 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f001 fe39 	bl	80038e0 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 8001c6e:	f107 0313 	add.w	r3, r7, #19
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ffdc 	bl	8001c30 <u8g2_m_24_8_f>
 8001c78:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001c7a:	7cfa      	ldrb	r2, [r7, #19]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 8001c82:	6979      	ldr	r1, [r7, #20]
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f001 f92f 	bl	8002ee8 <u8g2_SetupBuffer>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	08003479 	.word	0x08003479
 8001c98:	08003659 	.word	0x08003659
 8001c9c:	08002d6d 	.word	0x08002d6d

08001ca0 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	81fb      	strh	r3, [r7, #14]
	font++;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	89fb      	ldrh	r3, [r7, #14]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	81fb      	strh	r3, [r7, #14]
	return pos;
 8001cf4:	89fb      	ldrh	r3, [r7, #14]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	6838      	ldr	r0, [r7, #0]
 8001d0e:	f7ff ffc7 	bl	8001ca0 <u8g2_font_get_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f7ff ffbf 	bl	8001ca0 <u8g2_font_get_byte>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461a      	mov	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	6838      	ldr	r0, [r7, #0]
 8001d2e:	f7ff ffb7 	bl	8001ca0 <u8g2_font_get_byte>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	6838      	ldr	r0, [r7, #0]
 8001d3e:	f7ff ffaf 	bl	8001ca0 <u8g2_font_get_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	6838      	ldr	r0, [r7, #0]
 8001d4e:	f7ff ffa7 	bl	8001ca0 <u8g2_font_get_byte>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001d5a:	2105      	movs	r1, #5
 8001d5c:	6838      	ldr	r0, [r7, #0]
 8001d5e:	f7ff ff9f 	bl	8001ca0 <u8g2_font_get_byte>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001d6a:	2106      	movs	r1, #6
 8001d6c:	6838      	ldr	r0, [r7, #0]
 8001d6e:	f7ff ff97 	bl	8001ca0 <u8g2_font_get_byte>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001d7a:	2107      	movs	r1, #7
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff ff8f 	bl	8001ca0 <u8g2_font_get_byte>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001d8a:	2108      	movs	r1, #8
 8001d8c:	6838      	ldr	r0, [r7, #0]
 8001d8e:	f7ff ff87 	bl	8001ca0 <u8g2_font_get_byte>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001d9a:	2109      	movs	r1, #9
 8001d9c:	6838      	ldr	r0, [r7, #0]
 8001d9e:	f7ff ff7f 	bl	8001ca0 <u8g2_font_get_byte>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b25a      	sxtb	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001daa:	210a      	movs	r1, #10
 8001dac:	6838      	ldr	r0, [r7, #0]
 8001dae:	f7ff ff77 	bl	8001ca0 <u8g2_font_get_byte>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b25a      	sxtb	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001dba:	210b      	movs	r1, #11
 8001dbc:	6838      	ldr	r0, [r7, #0]
 8001dbe:	f7ff ff6f 	bl	8001ca0 <u8g2_font_get_byte>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b25a      	sxtb	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001dca:	210c      	movs	r1, #12
 8001dcc:	6838      	ldr	r0, [r7, #0]
 8001dce:	f7ff ff67 	bl	8001ca0 <u8g2_font_get_byte>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b25a      	sxtb	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001dda:	210d      	movs	r1, #13
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f7ff ff5f 	bl	8001ca0 <u8g2_font_get_byte>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b25a      	sxtb	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001dea:	210e      	movs	r1, #14
 8001dec:	6838      	ldr	r0, [r7, #0]
 8001dee:	f7ff ff57 	bl	8001ca0 <u8g2_font_get_byte>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b25a      	sxtb	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	f7ff ff4f 	bl	8001ca0 <u8g2_font_get_byte>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b25a      	sxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	6838      	ldr	r0, [r7, #0]
 8001e0e:	f7ff ff47 	bl	8001ca0 <u8g2_font_get_byte>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b25a      	sxtb	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001e1a:	2111      	movs	r1, #17
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f7ff ff50 	bl	8001cc2 <u8g2_font_get_word>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8001e2a:	2113      	movs	r1, #19
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f7ff ff48 	bl	8001cc2 <u8g2_font_get_word>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 8001e3a:	2115      	movs	r1, #21
 8001e3c:	6838      	ldr	r0, [r7, #0]
 8001e3e:	f7ff ff40 	bl	8001cc2 <u8g2_font_get_word>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	82da      	strh	r2, [r3, #22]
#endif
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001e52:	b480      	push	{r7}
 8001e54:	b085      	sub	sp, #20
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7b1b      	ldrb	r3, [r3, #12]
 8001e62:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	7b7b      	ldrb	r3, [r7, #13]
 8001e70:	fa42 f303 	asr.w	r3, r2, r3
 8001e74:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 8001e76:	7b7b      	ldrb	r3, [r7, #13]
 8001e78:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 8001e7a:	7bba      	ldrb	r2, [r7, #14]
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	4413      	add	r3, r2
 8001e80:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 8001e82:	7bbb      	ldrb	r3, [r7, #14]
 8001e84:	2b07      	cmp	r3, #7
 8001e86:	d91a      	bls.n	8001ebe <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 8001e8c:	7b3a      	ldrb	r2, [r7, #12]
 8001e8e:	7b7b      	ldrb	r3, [r7, #13]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	7b3b      	ldrb	r3, [r7, #12]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	b25a      	sxtb	r2, r3
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 8001eb8:	7bbb      	ldrb	r3, [r7, #14]
 8001eba:	3b08      	subs	r3, #8
 8001ebc:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7bba      	ldrb	r2, [r7, #14]
 8001ed8:	731a      	strb	r2, [r3, #12]
	return val;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffab 	bl	8001e52 <u8g2_font_decode_get_unsigned_bits>
 8001efc:	4603      	mov	r3, r0
 8001efe:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 8001f0a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	73bb      	strb	r3, [r7, #14]
	v -= d;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	7bbb      	ldrb	r3, [r7, #14]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	73fb      	strb	r3, [r7, #15]
	return v;
 8001f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 8001f2c:	b490      	push	{r4, r7}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4604      	mov	r4, r0
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4623      	mov	r3, r4
 8001f3c:	80fb      	strh	r3, [r7, #6]
 8001f3e:	4603      	mov	r3, r0
 8001f40:	717b      	strb	r3, [r7, #5]
 8001f42:	460b      	mov	r3, r1
 8001f44:	713b      	strb	r3, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d014      	beq.n	8001f7a <u8g2_add_vector_y+0x4e>
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	dc19      	bgt.n	8001f88 <u8g2_add_vector_y+0x5c>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <u8g2_add_vector_y+0x32>
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d007      	beq.n	8001f6c <u8g2_add_vector_y+0x40>
 8001f5c:	e014      	b.n	8001f88 <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 8001f5e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	4413      	add	r3, r2
 8001f68:	80fb      	strh	r3, [r7, #6]
		break;
 8001f6a:	e014      	b.n	8001f96 <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 8001f6c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	4413      	add	r3, r2
 8001f76:	80fb      	strh	r3, [r7, #6]
		break;
 8001f78:	e00d      	b.n	8001f96 <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 8001f7a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	80fb      	strh	r3, [r7, #6]
		break;
 8001f86:	e006      	b.n	8001f96 <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 8001f88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	80fb      	strh	r3, [r7, #6]
		break;
 8001f94:	bf00      	nop
	}
	return dy;
 8001f96:	88fb      	ldrh	r3, [r7, #6]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc90      	pop	{r4, r7}
 8001fa0:	4770      	bx	lr

08001fa2 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8001fa2:	b490      	push	{r4, r7}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4604      	mov	r4, r0
 8001faa:	4608      	mov	r0, r1
 8001fac:	4611      	mov	r1, r2
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4623      	mov	r3, r4
 8001fb2:	80fb      	strh	r3, [r7, #6]
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	717b      	strb	r3, [r7, #5]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	713b      	strb	r3, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d014      	beq.n	8001ff0 <u8g2_add_vector_x+0x4e>
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	dc19      	bgt.n	8001ffe <u8g2_add_vector_x+0x5c>
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <u8g2_add_vector_x+0x32>
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d007      	beq.n	8001fe2 <u8g2_add_vector_x+0x40>
 8001fd2:	e014      	b.n	8001ffe <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8001fd4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	4413      	add	r3, r2
 8001fde:	80fb      	strh	r3, [r7, #6]
		break;
 8001fe0:	e014      	b.n	800200c <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8001fe2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	88fa      	ldrh	r2, [r7, #6]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	80fb      	strh	r3, [r7, #6]
		break;
 8001fee:	e00d      	b.n	800200c <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8001ff0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	88fa      	ldrh	r2, [r7, #6]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	80fb      	strh	r3, [r7, #6]
		break;
 8001ffc:	e006      	b.n	800200c <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 8001ffe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002002:	b29a      	uxth	r2, r3
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	4413      	add	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
		break;
 800200a:	bf00      	nop
	}
	return dx;
 800200c:	88fb      	ldrh	r3, [r7, #6]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bc90      	pop	{r4, r7}
 8002016:	4770      	bx	lr

08002018 <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af02      	add	r7, sp, #8
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
 8002024:	4613      	mov	r3, r2
 8002026:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3360      	adds	r3, #96	; 0x60
 800202c:	613b      	str	r3, [r7, #16]

	cnt = len;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002038:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002040:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002048:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	7d7b      	ldrb	r3, [r7, #21]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 8002056:	7dfa      	ldrb	r2, [r7, #23]
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	429a      	cmp	r2, r3
 800205c:	d201      	bcs.n	8002062 <u8g2_font_decode_len+0x4a>
			current = cnt;
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	889b      	ldrh	r3, [r3, #4]
 8002066:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	88db      	ldrh	r3, [r3, #6]
 800206c:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800206e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002072:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	7c1b      	ldrb	r3, [r3, #16]
 800207a:	89b8      	ldrh	r0, [r7, #12]
 800207c:	f7ff ff91 	bl	8001fa2 <u8g2_add_vector_x>
 8002080:	4603      	mov	r3, r0
 8002082:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002084:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002088:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	7c1b      	ldrb	r3, [r3, #16]
 8002090:	8978      	ldrh	r0, [r7, #10]
 8002092:	f7ff ff4b 	bl	8001f2c <u8g2_add_vector_y>
 8002096:	4603      	mov	r3, r0
 8002098:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 800209a:	78bb      	ldrb	r3, [r7, #2]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d010      	beq.n	80020c2 <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	7b9a      	ldrb	r2, [r3, #14]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 80020aa:	7dbb      	ldrb	r3, [r7, #22]
 80020ac:	b298      	uxth	r0, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	7c1b      	ldrb	r3, [r3, #16]
 80020b2:	897a      	ldrh	r2, [r7, #10]
 80020b4:	89b9      	ldrh	r1, [r7, #12]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	4603      	mov	r3, r0
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fcf2 	bl	8002aa4 <u8g2_DrawHVLine>
 80020c0:	e013      	b.n	80020ea <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	7b5b      	ldrb	r3, [r3, #13]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	7bda      	ldrb	r2, [r3, #15]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 80020d4:	7dbb      	ldrb	r3, [r7, #22]
 80020d6:	b298      	uxth	r0, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	7c1b      	ldrb	r3, [r3, #16]
 80020dc:	897a      	ldrh	r2, [r7, #10]
 80020de:	89b9      	ldrh	r1, [r7, #12]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4603      	mov	r3, r0
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fcdd 	bl	8002aa4 <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 80020ea:	7dfa      	ldrb	r2, [r7, #23]
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d309      	bcc.n	8002106 <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 80020f2:	7dfa      	ldrb	r2, [r7, #23]
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	757b      	strb	r3, [r7, #21]
		ly++;
 80020fe:	7d3b      	ldrb	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8002104:	e79d      	b.n	8002042 <u8g2_font_decode_len+0x2a>
			break;
 8002106:	bf00      	nop
	}
	lx += cnt;
 8002108:	7d7a      	ldrb	r2, [r7, #21]
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	4413      	add	r3, r2
 800210e:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8002110:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8002118:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	725a      	strb	r2, [r3, #9]

}
 8002120:	bf00      	nop
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3360      	adds	r3, #96	; 0x60
 8002136:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800214a:	4619      	mov	r1, r3
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7ff fe80 	bl	8001e52 <u8g2_font_decode_get_unsigned_bits>
 8002152:	4603      	mov	r3, r0
 8002154:	b25a      	sxtb	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002160:	4619      	mov	r1, r3
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f7ff fe75 	bl	8001e52 <u8g2_font_decode_get_unsigned_bits>
 8002168:	4603      	mov	r3, r0
 800216a:	b25a      	sxtb	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	7b9b      	ldrb	r3, [r3, #14]
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf0c      	ite	eq
 8002182:	2301      	moveq	r3, #1
 8002184:	2300      	movne	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	73da      	strb	r2, [r3, #15]
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af02      	add	r7, sp, #8
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3360      	adds	r3, #96	; 0x60
 80021a6:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 80021a8:	6839      	ldr	r1, [r7, #0]
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffbc 	bl	8002128 <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80021b6:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80021be:	4619      	mov	r1, r3
 80021c0:	6978      	ldr	r0, [r7, #20]
 80021c2:	f7ff fe90 	bl	8001ee6 <u8g2_font_decode_get_signed_bits>
 80021c6:	4603      	mov	r3, r0
 80021c8:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80021d0:	4619      	mov	r1, r3
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f7ff fe87 	bl	8001ee6 <u8g2_font_decode_get_signed_bits>
 80021d8:	4603      	mov	r3, r0
 80021da:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80021e2:	4619      	mov	r1, r3
 80021e4:	6978      	ldr	r0, [r7, #20]
 80021e6:	f7ff fe7e 	bl	8001ee6 <u8g2_font_decode_get_signed_bits>
 80021ea:	4603      	mov	r3, r0
 80021ec:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f340 80d7 	ble.w	80023a8 <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	8898      	ldrh	r0, [r3, #4]
 80021fe:	7cfa      	ldrb	r2, [r7, #19]
 8002200:	7c7b      	ldrb	r3, [r7, #17]
 8002202:	4413      	add	r3, r2
 8002204:	b2db      	uxtb	r3, r3
 8002206:	425b      	negs	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	b25a      	sxtb	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	7c1b      	ldrb	r3, [r3, #16]
 8002210:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002214:	f7ff fec5 	bl	8001fa2 <u8g2_add_vector_x>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	88d8      	ldrh	r0, [r3, #6]
 8002224:	7cfa      	ldrb	r2, [r7, #19]
 8002226:	7c7b      	ldrb	r3, [r7, #17]
 8002228:	4413      	add	r3, r2
 800222a:	b2db      	uxtb	r3, r3
 800222c:	425b      	negs	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	b25a      	sxtb	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	7c1b      	ldrb	r3, [r3, #16]
 8002236:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800223a:	f7ff fe77 	bl	8001f2c <u8g2_add_vector_y>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	889b      	ldrh	r3, [r3, #4]
 800224a:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	88db      	ldrh	r3, [r3, #6]
 8002250:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 8002252:	8bfb      	ldrh	r3, [r7, #30]
 8002254:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 8002256:	8b7b      	ldrh	r3, [r7, #26]
 8002258:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	7c1b      	ldrb	r3, [r3, #16]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d85a      	bhi.n	8002318 <u8g2_font_decode_glyph+0x180>
 8002262:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <u8g2_font_decode_glyph+0xd0>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	08002279 	.word	0x08002279
 800226c:	08002295 	.word	0x08002295
 8002270:	080022bd 	.word	0x080022bd
 8002274:	080022f1 	.word	0x080022f1
			case 0:
				x1 += decode->glyph_width;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800227e:	b29a      	uxth	r2, r3
 8002280:	8bbb      	ldrh	r3, [r7, #28]
 8002282:	4413      	add	r3, r2
 8002284:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 8002286:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800228a:	b29a      	uxth	r2, r3
 800228c:	8b3b      	ldrh	r3, [r7, #24]
 800228e:	4413      	add	r3, r2
 8002290:	833b      	strh	r3, [r7, #24]
				break;
 8002292:	e041      	b.n	8002318 <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 8002294:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002298:	b29b      	uxth	r3, r3
 800229a:	8bfa      	ldrh	r2, [r7, #30]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022a0:	8bfb      	ldrh	r3, [r7, #30]
 80022a2:	3301      	adds	r3, #1
 80022a4:	83fb      	strh	r3, [r7, #30]
				x1++;
 80022a6:	8bbb      	ldrh	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	8b3b      	ldrh	r3, [r7, #24]
 80022b6:	4413      	add	r3, r2
 80022b8:	833b      	strh	r3, [r7, #24]
				break;
 80022ba:	e02d      	b.n	8002318 <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	8bfa      	ldrh	r2, [r7, #30]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022ca:	8bfb      	ldrh	r3, [r7, #30]
 80022cc:	3301      	adds	r3, #1
 80022ce:	83fb      	strh	r3, [r7, #30]
				x1++;
 80022d0:	8bbb      	ldrh	r3, [r7, #28]
 80022d2:	3301      	adds	r3, #1
 80022d4:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 80022d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	8b7a      	ldrh	r2, [r7, #26]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022e2:	8b7b      	ldrh	r3, [r7, #26]
 80022e4:	3301      	adds	r3, #1
 80022e6:	837b      	strh	r3, [r7, #26]
				y1++;
 80022e8:	8b3b      	ldrh	r3, [r7, #24]
 80022ea:	3301      	adds	r3, #1
 80022ec:	833b      	strh	r3, [r7, #24]
				break;
 80022ee:	e013      	b.n	8002318 <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 80022f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	8bbb      	ldrh	r3, [r7, #28]
 80022f8:	4413      	add	r3, r2
 80022fa:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002302:	b29b      	uxth	r3, r3
 8002304:	8b7a      	ldrh	r2, [r7, #26]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 800230a:	8b7b      	ldrh	r3, [r7, #26]
 800230c:	3301      	adds	r3, #1
 800230e:	837b      	strh	r3, [r7, #26]
				y1++;
 8002310:	8b3b      	ldrh	r3, [r7, #24]
 8002312:	3301      	adds	r3, #1
 8002314:	833b      	strh	r3, [r7, #24]
				break;
 8002316:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8002318:	8bb8      	ldrh	r0, [r7, #28]
 800231a:	8b7a      	ldrh	r2, [r7, #26]
 800231c:	8bf9      	ldrh	r1, [r7, #30]
 800231e:	8b3b      	ldrh	r3, [r7, #24]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	4603      	mov	r3, r0
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fcf6 	bl	8002d16 <u8g2_IsIntersection>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <u8g2_font_decode_glyph+0x19e>
				return d;
 8002330:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002334:	e03a      	b.n	80023ac <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2200      	movs	r2, #0
 800233a:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2200      	movs	r2, #0
 8002340:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002348:	4619      	mov	r1, r3
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff fd81 	bl	8001e52 <u8g2_font_decode_get_unsigned_bits>
 8002350:	4603      	mov	r3, r0
 8002352:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800235a:	4619      	mov	r1, r3
 800235c:	6978      	ldr	r0, [r7, #20]
 800235e:	f7ff fd78 	bl	8001e52 <u8g2_font_decode_get_unsigned_bits>
 8002362:	4603      	mov	r3, r0
 8002364:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2200      	movs	r2, #0
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff fe53 	bl	8002018 <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 8002372:	7bbb      	ldrb	r3, [r7, #14]
 8002374:	2201      	movs	r2, #1
 8002376:	4619      	mov	r1, r3
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fe4d 	bl	8002018 <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 800237e:	2101      	movs	r1, #1
 8002380:	6978      	ldr	r0, [r7, #20]
 8002382:	f7ff fd66 	bl	8001e52 <u8g2_font_decode_get_unsigned_bits>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ec      	bne.n	8002366 <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002392:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002396:	429a      	cmp	r2, r3
 8002398:	dd00      	ble.n	800239c <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 800239a:	e7d2      	b.n	8002342 <u8g2_font_decode_glyph+0x1aa>
				break;
 800239c:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	7b9a      	ldrb	r2, [r3, #14]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 80023a8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3720      	adds	r7, #32
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3317      	adds	r3, #23
 80023ca:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	2bff      	cmp	r3, #255	; 0xff
 80023d0:	d82a      	bhi.n	8002428 <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	2b60      	cmp	r3, #96	; 0x60
 80023d6:	d907      	bls.n	80023e8 <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80023de:	461a      	mov	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	4413      	add	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e009      	b.n	80023fc <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d906      	bls.n	80023fc <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80023f4:	461a      	mov	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	4413      	add	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d04e      	beq.n	80024a4 <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b29b      	uxth	r3, r3
 800240c:	887a      	ldrh	r2, [r7, #2]
 800240e:	429a      	cmp	r2, r3
 8002410:	d102      	bne.n	8002418 <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3302      	adds	r3, #2
 8002416:	e049      	b.n	80024ac <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	4413      	add	r3, r2
 8002424:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002426:	e7e9      	b.n	80023fc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800242e:	461a      	mov	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	4413      	add	r3, r2
 8002434:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 800243a:	2100      	movs	r1, #0
 800243c:	6938      	ldr	r0, [r7, #16]
 800243e:	f7ff fc40 	bl	8001cc2 <u8g2_font_get_word>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4413      	add	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 800244c:	2102      	movs	r1, #2
 800244e:	6938      	ldr	r0, [r7, #16]
 8002450:	f7ff fc37 	bl	8001cc2 <u8g2_font_get_word>
 8002454:	4603      	mov	r3, r0
 8002456:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	3304      	adds	r3, #4
 800245c:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 800245e:	89fa      	ldrh	r2, [r7, #14]
 8002460:	887b      	ldrh	r3, [r7, #2]
 8002462:	429a      	cmp	r2, r3
 8002464:	d3e9      	bcc.n	800243a <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 800246c:	89fb      	ldrh	r3, [r7, #14]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3301      	adds	r3, #1
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b29a      	uxth	r2, r3
 800247a:	89fb      	ldrh	r3, [r7, #14]
 800247c:	4313      	orrs	r3, r2
 800247e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 8002486:	89fa      	ldrh	r2, [r7, #14]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	429a      	cmp	r2, r3
 800248c:	d102      	bne.n	8002494 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3303      	adds	r3, #3
 8002492:	e00b      	b.n	80024ac <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3302      	adds	r3, #2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	4413      	add	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 80024a2:	e7e0      	b.n	8002466 <u8g2_font_get_glyph_data+0xb2>
				break;
 80024a4:	bf00      	nop
 80024a6:	e000      	b.n	80024aa <u8g2_font_get_glyph_data+0xf6>
				break;
 80024a8:	bf00      	nop
		}
	}
#endif

	return NULL;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	817b      	strh	r3, [r7, #10]
 80024c6:	460b      	mov	r3, r1
 80024c8:	813b      	strh	r3, [r7, #8]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	897a      	ldrh	r2, [r7, #10]
 80024d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	893a      	ldrh	r2, [r7, #8]
 80024de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	4619      	mov	r1, r3
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f7ff ff64 	bl	80023b4 <u8g2_font_get_glyph_data>
 80024ec:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80024f4:	6939      	ldr	r1, [r7, #16]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff fe4e 	bl	8002198 <u8g2_font_decode_glyph>
 80024fc:	4603      	mov	r3, r0
 80024fe:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 8002500:	8afb      	ldrh	r3, [r7, #22]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	460b      	mov	r3, r1
 8002514:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	4619      	mov	r1, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff4a 	bl	80023b4 <u8g2_font_get_glyph_data>
 8002520:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <u8g2_GetGlyphWidth+0x22>
		return 0;
 8002528:	2300      	movs	r3, #0
 800252a:	e027      	b.n	800257c <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 800252c:	68f9      	ldr	r1, [r7, #12]
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fdfa 	bl	8002128 <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f7ff fccf 	bl	8001ee6 <u8g2_font_decode_get_signed_bits>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800255e:	4619      	mov	r1, r3
 8002560:	4610      	mov	r0, r2
 8002562:	f7ff fcc0 	bl	8001ee6 <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7ff fcb6 	bl	8001ee6 <u8g2_font_decode_get_signed_bits>
 800257a:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
	...

080025a4 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	817b      	strh	r3, [r7, #10]
 80025b6:	460b      	mov	r3, r1
 80025b8:	813b      	strh	r3, [r7, #8]
 80025ba:	4613      	mov	r3, r2
 80025bc:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d833      	bhi.n	8002630 <u8g2_DrawGlyph+0x8c>
 80025c8:	a201      	add	r2, pc, #4	; (adr r2, 80025d0 <u8g2_DrawGlyph+0x2c>)
 80025ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ce:	bf00      	nop
 80025d0:	080025e1 	.word	0x080025e1
 80025d4:	080025f5 	.word	0x080025f5
 80025d8:	08002609 	.word	0x08002609
 80025dc:	0800261d 	.word	0x0800261d
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	4798      	blx	r3
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	893b      	ldrh	r3, [r7, #8]
 80025ee:	4413      	add	r3, r2
 80025f0:	813b      	strh	r3, [r7, #8]
		break;
 80025f2:	e01d      	b.n	8002630 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	4798      	blx	r3
 80025fc:	4603      	mov	r3, r0
 80025fe:	461a      	mov	r2, r3
 8002600:	897b      	ldrh	r3, [r7, #10]
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	817b      	strh	r3, [r7, #10]
		break;
 8002606:	e013      	b.n	8002630 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	4798      	blx	r3
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	893b      	ldrh	r3, [r7, #8]
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	813b      	strh	r3, [r7, #8]
		break;
 800261a:	e009      	b.n	8002630 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	4798      	blx	r3
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	897b      	ldrh	r3, [r7, #10]
 800262a:	4413      	add	r3, r2
 800262c:	817b      	strh	r3, [r7, #10]
		break;
 800262e:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	893a      	ldrh	r2, [r7, #8]
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ff3c 	bl	80024b4 <u8g2_font_draw_glyph>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop

08002648 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	817b      	strh	r3, [r7, #10]
 8002656:	4613      	mov	r3, r2
 8002658:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fd86 	bl	800316c <u8x8_utf8_init>
	sum = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	4611      	mov	r1, r2
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	4798      	blx	r3
 8002672:	4603      	mov	r3, r0
 8002674:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 8002676:	8abb      	ldrh	r3, [r7, #20]
 8002678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800267c:	4293      	cmp	r3, r2
 800267e:	d038      	beq.n	80026f2 <u8g2_draw_string+0xaa>
			break;
		str++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3301      	adds	r3, #1
 8002684:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 8002686:	8abb      	ldrh	r3, [r7, #20]
 8002688:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800268c:	4293      	cmp	r3, r2
 800268e:	d0e9      	beq.n	8002664 <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002690:	8abb      	ldrh	r3, [r7, #20]
 8002692:	893a      	ldrh	r2, [r7, #8]
 8002694:	8979      	ldrh	r1, [r7, #10]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7ff ff84 	bl	80025a4 <u8g2_DrawGlyph>
 800269c:	4603      	mov	r3, r0
 800269e:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d81e      	bhi.n	80026e8 <u8g2_draw_string+0xa0>
 80026aa:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <u8g2_draw_string+0x68>)
 80026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b0:	080026c1 	.word	0x080026c1
 80026b4:	080026cb 	.word	0x080026cb
 80026b8:	080026d5 	.word	0x080026d5
 80026bc:	080026df 	.word	0x080026df
			case 0:
				x += delta;
 80026c0:	897a      	ldrh	r2, [r7, #10]
 80026c2:	8a7b      	ldrh	r3, [r7, #18]
 80026c4:	4413      	add	r3, r2
 80026c6:	817b      	strh	r3, [r7, #10]
				break;
 80026c8:	e00e      	b.n	80026e8 <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 80026ca:	893a      	ldrh	r2, [r7, #8]
 80026cc:	8a7b      	ldrh	r3, [r7, #18]
 80026ce:	4413      	add	r3, r2
 80026d0:	813b      	strh	r3, [r7, #8]
				break;
 80026d2:	e009      	b.n	80026e8 <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 80026d4:	897a      	ldrh	r2, [r7, #10]
 80026d6:	8a7b      	ldrh	r3, [r7, #18]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	817b      	strh	r3, [r7, #10]
				break;
 80026dc:	e004      	b.n	80026e8 <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 80026de:	893a      	ldrh	r2, [r7, #8]
 80026e0:	8a7b      	ldrh	r3, [r7, #18]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	813b      	strh	r3, [r7, #8]
				break;
 80026e6:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 80026e8:	8afa      	ldrh	r2, [r7, #22]
 80026ea:	8a7b      	ldrh	r3, [r7, #18]
 80026ec:	4413      	add	r3, r2
 80026ee:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80026f0:	e7b8      	b.n	8002664 <u8g2_draw_string+0x1c>
			break;
 80026f2:	bf00      	nop
		}
	}
	return sum;
 80026f4:	8afb      	ldrh	r3, [r7, #22]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop

08002700 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	817b      	strh	r3, [r7, #10]
 800270e:	4613      	mov	r3, r2
 8002710:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4a06      	ldr	r2, [pc, #24]	; (8002730 <u8g2_DrawUTF8+0x30>)
 8002716:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 8002718:	893a      	ldrh	r2, [r7, #8]
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7ff ff92 	bl	8002648 <u8g2_draw_string>
 8002724:	4603      	mov	r3, r0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	080031b3 	.word	0x080031b3

08002734 <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	2b00      	cmp	r3, #0
 8002742:	d05d      	beq.n	8002800 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002762:	2b00      	cmp	r3, #0
 8002764:	d04d      	beq.n	8002802 <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800276c:	2b01      	cmp	r3, #1
 800276e:	d11c      	bne.n	80027aa <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 800277c:	429a      	cmp	r2, r3
 800277e:	da05      	bge.n	800278c <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002798:	429a      	cmp	r2, r3
 800279a:	dd32      	ble.n	8002802 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80027a8:	e02b      	b.n	8002802 <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80027b0:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80027b8:	4619      	mov	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80027c0:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 80027c2:	429a      	cmp	r2, r3
 80027c4:	da0d      	bge.n	80027e2 <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80027cc:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80027ee:	429a      	cmp	r2, r3
 80027f0:	dd07      	ble.n	8002802 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80027fe:	e000      	b.n	8002802 <u8g2_UpdateRefHeight+0xce>
		return;
 8002800:	bf00      	nop
	}
}
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	return 0;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
	...

08002820 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a03      	ldr	r2, [pc, #12]	; (8002838 <u8g2_SetFontPosBaseline+0x18>)
 800282c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	0800280b 	.word	0x0800280b

0800283c <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 800284a:	81fb      	strh	r3, [r7, #14]
	tmp++;
 800284c:	89fb      	ldrh	r3, [r7, #14]
 800284e:	3301      	adds	r3, #1
 8002850:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8002852:	89fb      	ldrh	r3, [r7, #14]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
	...

08002860 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a03      	ldr	r2, [pc, #12]	; (8002878 <u8g2_SetFontPosTop+0x18>)
 800286c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	0800283d 	.word	0x0800283d

0800287c <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d00b      	beq.n	80028a8 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3374      	adds	r3, #116	; 0x74
 800289a:	6839      	ldr	r1, [r7, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fa2f 	bl	8001d00 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ff46 	bl	8002734 <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 80028ba:	23c0      	movs	r3, #192	; 0xc0
 80028bc:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fc50 	bl	800316c <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	7812      	ldrb	r2, [r2, #0]
 80028dc:	4611      	mov	r1, r2
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
 80028e2:	4603      	mov	r3, r0
 80028e4:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 80028e6:	893b      	ldrh	r3, [r7, #8]
 80028e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d01c      	beq.n	800292a <u8g2_string_width+0x7a>
			break;
		str++;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 80028f6:	893b      	ldrh	r3, [r7, #8]
 80028f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d0e9      	beq.n	80028d4 <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 8002900:	893b      	ldrh	r3, [r7, #8]
 8002902:	4619      	mov	r1, r3
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fe00 	bl	800250a <u8g2_GetGlyphWidth>
 800290a:	4603      	mov	r3, r0
 800290c:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 800290e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002912:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8002916:	d103      	bne.n	8002920 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800291e:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 8002920:	89fa      	ldrh	r2, [r7, #14]
 8002922:	89bb      	ldrh	r3, [r7, #12]
 8002924:	4413      	add	r3, r2
 8002926:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002928:	e7d4      	b.n	80028d4 <u8g2_string_width+0x24>
			break;
 800292a:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002932:	2b00      	cmp	r3, #0
 8002934:	d01b      	beq.n	800296e <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 8002936:	89fa      	ldrh	r2, [r7, #14]
 8002938:	89bb      	ldrh	r3, [r7, #12]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002944:	b29a      	uxth	r2, r3
 8002946:	89fb      	ldrh	r3, [r7, #14]
 8002948:	4413      	add	r3, r2
 800294a:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8002952:	b29a      	uxth	r2, r3
 8002954:	89fb      	ldrh	r3, [r7, #14]
 8002956:	4413      	add	r3, r2
 8002958:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 800295a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800295e:	2b00      	cmp	r3, #0
 8002960:	dd05      	ble.n	800296e <u8g2_string_width+0xbe>
			w += initial_x_offset;
 8002962:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002966:	b29a      	uxth	r2, r3
 8002968:	89fb      	ldrh	r3, [r7, #14]
 800296a:	4413      	add	r3, r2
 800296c:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 800296e:	89fb      	ldrh	r3, [r7, #14]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a05      	ldr	r2, [pc, #20]	; (800299c <u8g2_GetStrWidth+0x24>)
 8002986:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff90 	bl	80028b0 <u8g2_string_width>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	08003187 	.word	0x08003187

080029a0 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <u8g2_GetUTF8Width+0x24>)
 80029ae:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 80029b0:	6839      	ldr	r1, [r7, #0]
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ff7c 	bl	80028b0 <u8g2_string_width>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	080031b3 	.word	0x080031b3

080029c8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	460b      	mov	r3, r1
 80029d8:	80fb      	strh	r3, [r7, #6]
 80029da:	4613      	mov	r3, r2
 80029dc:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80029e4:	8afb      	ldrh	r3, [r7, #22]
 80029e6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	8abb      	ldrh	r3, [r7, #20]
 80029ee:	4413      	add	r3, r2
 80029f0:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80029f2:	8afa      	ldrh	r2, [r7, #22]
 80029f4:	8abb      	ldrh	r3, [r7, #20]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d90b      	bls.n	8002a12 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80029fa:	8afa      	ldrh	r2, [r7, #22]
 80029fc:	88bb      	ldrh	r3, [r7, #4]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d205      	bcs.n	8002a0e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002a02:	88bb      	ldrh	r3, [r7, #4]
 8002a04:	82bb      	strh	r3, [r7, #20]
      b--;
 8002a06:	8abb      	ldrh	r3, [r7, #20]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	82bb      	strh	r3, [r7, #20]
 8002a0c:	e001      	b.n	8002a12 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002a12:	8afa      	ldrh	r2, [r7, #22]
 8002a14:	88bb      	ldrh	r3, [r7, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d301      	bcc.n	8002a1e <u8g2_clip_intersection2+0x56>
    return 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e01c      	b.n	8002a58 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002a1e:	8aba      	ldrh	r2, [r7, #20]
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d801      	bhi.n	8002a2a <u8g2_clip_intersection2+0x62>
    return 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e016      	b.n	8002a58 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002a2a:	8afa      	ldrh	r2, [r7, #22]
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d201      	bcs.n	8002a36 <u8g2_clip_intersection2+0x6e>
    a = c;
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002a36:	8aba      	ldrh	r2, [r7, #20]
 8002a38:	88bb      	ldrh	r3, [r7, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d901      	bls.n	8002a42 <u8g2_clip_intersection2+0x7a>
    b = d;
 8002a3e:	88bb      	ldrh	r3, [r7, #4]
 8002a40:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8afa      	ldrh	r2, [r7, #22]
 8002a46:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002a48:	8aba      	ldrh	r2, [r7, #20]
 8002a4a:	8afb      	ldrh	r3, [r7, #22]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	8aba      	ldrh	r2, [r7, #20]
 8002a54:	801a      	strh	r2, [r3, #0]
  return 1;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a62:	b590      	push	{r4, r7, lr}
 8002a64:	b087      	sub	sp, #28
 8002a66:	af02      	add	r7, sp, #8
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	4608      	mov	r0, r1
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4603      	mov	r3, r0
 8002a72:	817b      	strh	r3, [r7, #10]
 8002a74:	460b      	mov	r3, r1
 8002a76:	813b      	strh	r3, [r7, #8]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a80:	893a      	ldrh	r2, [r7, #8]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002a8a:	88f8      	ldrh	r0, [r7, #6]
 8002a8c:	893a      	ldrh	r2, [r7, #8]
 8002a8e:	8979      	ldrh	r1, [r7, #10]
 8002a90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	4603      	mov	r3, r0
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	47a0      	blx	r4
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd90      	pop	{r4, r7, pc}

08002aa4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	4608      	mov	r0, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	817b      	strh	r3, [r7, #10]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	813b      	strh	r3, [r7, #8]
 8002aba:	4613      	mov	r3, r2
 8002abc:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d075      	beq.n	8002bb4 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d072      	beq.n	8002bb4 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d91a      	bls.n	8002b0a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002ad4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d109      	bne.n	8002af0 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002adc:	897a      	ldrh	r2, [r7, #10]
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	817b      	strh	r3, [r7, #10]
	  x++;
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	817b      	strh	r3, [r7, #10]
 8002aee:	e00c      	b.n	8002b0a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002af0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d108      	bne.n	8002b0a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002af8:	893a      	ldrh	r2, [r7, #8]
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	813b      	strh	r3, [r7, #8]
	  y++;
 8002b02:	893b      	ldrh	r3, [r7, #8]
 8002b04:	3301      	adds	r3, #1
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002b0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002b16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11a      	bne.n	8002b54 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002b24:	893b      	ldrh	r3, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d83b      	bhi.n	8002ba2 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002b30:	893b      	ldrh	r3, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d937      	bls.n	8002ba6 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002b42:	1db9      	adds	r1, r7, #6
 8002b44:	f107 000a 	add.w	r0, r7, #10
 8002b48:	f7ff ff3e 	bl	80029c8 <u8g2_clip_intersection2>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11a      	bne.n	8002b88 <u8g2_DrawHVLine+0xe4>
	  return;
 8002b52:	e02f      	b.n	8002bb4 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d824      	bhi.n	8002baa <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d920      	bls.n	8002bae <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002b78:	1db9      	adds	r1, r7, #6
 8002b7a:	f107 0008 	add.w	r0, r7, #8
 8002b7e:	f7ff ff23 	bl	80029c8 <u8g2_clip_intersection2>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d014      	beq.n	8002bb2 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	689c      	ldr	r4, [r3, #8]
 8002b8e:	8979      	ldrh	r1, [r7, #10]
 8002b90:	893a      	ldrh	r2, [r7, #8]
 8002b92:	88f8      	ldrh	r0, [r7, #6]
 8002b94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	47a0      	blx	r4
 8002ba0:	e008      	b.n	8002bb4 <u8g2_DrawHVLine+0x110>
	  return;
 8002ba2:	bf00      	nop
 8002ba4:	e006      	b.n	8002bb4 <u8g2_DrawHVLine+0x110>
	  return;
 8002ba6:	bf00      	nop
 8002ba8:	e004      	b.n	8002bb4 <u8g2_DrawHVLine+0x110>
	  return;
 8002baa:	bf00      	nop
 8002bac:	e002      	b.n	8002bb4 <u8g2_DrawHVLine+0x110>
	  return;
 8002bae:	bf00      	nop
 8002bb0:	e000      	b.n	8002bb4 <u8g2_DrawHVLine+0x110>
	  return;
 8002bb2:	bf00      	nop
    }
}
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}

08002bba <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	4608      	mov	r0, r1
 8002bc4:	4611      	mov	r1, r2
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4603      	mov	r3, r0
 8002bca:	817b      	strh	r3, [r7, #10]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	813b      	strh	r3, [r7, #8]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	893a      	ldrh	r2, [r7, #8]
 8002bd8:	8979      	ldrh	r1, [r7, #10]
 8002bda:	2000      	movs	r0, #0
 8002bdc:	9000      	str	r0, [sp, #0]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff ff60 	bl	8002aa4 <u8g2_DrawHVLine>
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	813b      	strh	r3, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	893a      	ldrh	r2, [r7, #8]
 8002c0a:	8979      	ldrh	r1, [r7, #10]
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	9000      	str	r0, [sp, #0]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff ff47 	bl	8002aa4 <u8g2_DrawHVLine>
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af02      	add	r7, sp, #8
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	460b      	mov	r3, r1
 8002c28:	807b      	strh	r3, [r7, #2]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8002c34:	883a      	ldrh	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d31a      	bcc.n	8002c70 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002c40:	883a      	ldrh	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d216      	bcs.n	8002c74 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8002c4c:	887a      	ldrh	r2, [r7, #2]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d312      	bcc.n	8002c78 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002c58:	887a      	ldrh	r2, [r7, #2]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d20e      	bcs.n	8002c7c <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002c5e:	883a      	ldrh	r2, [r7, #0]
 8002c60:	8879      	ldrh	r1, [r7, #2]
 8002c62:	2300      	movs	r3, #0
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2301      	movs	r3, #1
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ff1b 	bl	8002aa4 <u8g2_DrawHVLine>
 8002c6e:	e006      	b.n	8002c7e <u8g2_DrawPixel+0x60>
    return;
 8002c70:	bf00      	nop
 8002c72:	e004      	b.n	8002c7e <u8g2_DrawPixel+0x60>
    return;
 8002c74:	bf00      	nop
 8002c76:	e002      	b.n	8002c7e <u8g2_DrawPixel+0x60>
    return;
 8002c78:	bf00      	nop
 8002c7a:	e000      	b.n	8002c7e <u8g2_DrawPixel+0x60>
    return;
 8002c7c:	bf00      	nop
}
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d903      	bls.n	8002ca6 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002cb0:	b490      	push	{r4, r7}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4604      	mov	r4, r0
 8002cb8:	4608      	mov	r0, r1
 8002cba:	4611      	mov	r1, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	80fb      	strh	r3, [r7, #6]
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	80bb      	strh	r3, [r7, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	807b      	strh	r3, [r7, #2]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	88bb      	ldrh	r3, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d20d      	bcs.n	8002cf2 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002cd6:	883a      	ldrh	r2, [r7, #0]
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d901      	bls.n	8002ce2 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e014      	b.n	8002d0c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	883b      	ldrh	r3, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d901      	bls.n	8002cee <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00e      	b.n	8002d0c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e00c      	b.n	8002d0c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002cf2:	883a      	ldrh	r2, [r7, #0]
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d907      	bls.n	8002d0a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002cfa:	887a      	ldrh	r2, [r7, #2]
 8002cfc:	883b      	ldrh	r3, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d901      	bls.n	8002d06 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e002      	b.n	8002d0c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002d0a:	2300      	movs	r3, #0
    }
  }
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc90      	pop	{r4, r7}
 8002d14:	4770      	bx	lr

08002d16 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	4608      	mov	r0, r1
 8002d20:	4611      	mov	r1, r2
 8002d22:	461a      	mov	r2, r3
 8002d24:	4603      	mov	r3, r0
 8002d26:	817b      	strh	r3, [r7, #10]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	813b      	strh	r3, [r7, #8]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8002d3c:	8b3b      	ldrh	r3, [r7, #24]
 8002d3e:	893a      	ldrh	r2, [r7, #8]
 8002d40:	f7ff ffb6 	bl	8002cb0 <u8g2_is_intersection_decision_tree>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <u8g2_IsIntersection+0x38>
    return 0; 
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e00a      	b.n	8002d64 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	897a      	ldrh	r2, [r7, #10]
 8002d5e:	f7ff ffa7 	bl	8002cb0 <u8g2_is_intersection_decision_tree>
 8002d62:	4603      	mov	r3, r0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	; 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	4608      	mov	r0, r1
 8002d76:	4611      	mov	r1, r2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	817b      	strh	r3, [r7, #10]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	813b      	strh	r3, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002d86:	893b      	ldrh	r3, [r7, #8]
 8002d88:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002d8a:	7efb      	ldrb	r3, [r7, #27]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002d96:	7e3a      	ldrb	r2, [r7, #24]
 8002d98:	7efb      	ldrb	r3, [r7, #27]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d801      	bhi.n	8002db6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002db2:	7e3b      	ldrb	r3, [r7, #24]
 8002db4:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d001      	beq.n	8002dc4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002dc0:	7e3b      	ldrb	r3, [r7, #24]
 8002dc2:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002dc4:	893b      	ldrh	r3, [r7, #8]
 8002dc6:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002dc8:	8afb      	ldrh	r3, [r7, #22]
 8002dca:	f023 0307 	bic.w	r3, r3, #7
 8002dce:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	7c1b      	ldrb	r3, [r3, #16]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	8afa      	ldrh	r2, [r7, #22]
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002de6:	8afb      	ldrh	r3, [r7, #22]
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	4413      	add	r3, r2
 8002dec:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002dee:	897b      	ldrh	r3, [r7, #10]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002df6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d117      	bne.n	8002e2e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	7ebb      	ldrb	r3, [r7, #26]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	781a      	ldrb	r2, [r3, #0]
 8002e10:	7e7b      	ldrb	r3, [r7, #25]
 8002e12:	4053      	eors	r3, r2
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
	len--;
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e8      	bne.n	8002dfe <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002e2c:	e038      	b.n	8002ea0 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	781a      	ldrb	r2, [r3, #0]
 8002e32:	7ebb      	ldrb	r3, [r7, #26]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	7e7b      	ldrb	r3, [r7, #25]
 8002e42:	4053      	eors	r3, r2
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002e4a:	7efb      	ldrb	r3, [r7, #27]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002e50:	7efb      	ldrb	r3, [r7, #27]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	76fb      	strb	r3, [r7, #27]
      len--;
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002e5e:	7efb      	ldrb	r3, [r7, #27]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d114      	bne.n	8002e8e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002e68:	461a      	mov	r2, r3
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d801      	bhi.n	8002e7e <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d008      	beq.n	8002e9a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	767b      	strb	r3, [r7, #25]
 8002e8c:	e005      	b.n	8002e9a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002e8e:	7ebb      	ldrb	r3, [r7, #26]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002e94:	7e7b      	ldrb	r3, [r7, #25]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1c6      	bne.n	8002e2e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002ea0:	bf00      	nop
 8002ea2:	3724      	adds	r7, #36	; 0x24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	79fa      	ldrb	r2, [r7, #7]
 8002f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff ffad 	bl	8002eaa <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff fc65 	bl	8002820 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f7a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002f7c:	89fb      	ldrh	r3, [r7, #14]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	89fa      	ldrh	r2, [r7, #14]
 8002f86:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	7c1b      	ldrb	r3, [r3, #16]
 8002f8c:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002f8e:	89fb      	ldrh	r3, [r7, #14]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	89fa      	ldrh	r2, [r7, #14]
 8002f98:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fa0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002fa2:	89fb      	ldrh	r3, [r7, #14]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	89fa      	ldrh	r2, [r7, #14]
 8002fac:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb4:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002fb6:	89fb      	ldrh	r3, [r7, #14]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002fbe:	4413      	add	r3, r2
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	7c52      	ldrb	r2, [r2, #17]
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	dd08      	ble.n	8002fda <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	7c5b      	ldrb	r3, [r3, #17]
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002fda:	89fb      	ldrh	r3, [r7, #14]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002ffc:	89fb      	ldrh	r3, [r7, #14]
 8002ffe:	4413      	add	r3, r2
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	8a9a      	ldrh	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	8ada      	ldrh	r2, [r3, #22]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af02      	add	r7, sp, #8
 800302c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	4603      	mov	r3, r0
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff fe63 	bl	8002d16 <u8g2_IsIntersection>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800305e:	e03b      	b.n	80030d8 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003074:	429a      	cmp	r2, r3
 8003076:	d205      	bcs.n	8003084 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003090:	429a      	cmp	r2, r3
 8003092:	d905      	bls.n	80030a0 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d205      	bcs.n	80030bc <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d905      	bls.n	80030d8 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ff3c 	bl	8002f66 <u8g2_update_dimension_common>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff ff7b 	bl	8003026 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	461a      	mov	r2, r3
 8003146:	4603      	mov	r3, r0
 8003148:	817b      	strh	r3, [r7, #10]
 800314a:	460b      	mov	r3, r1
 800314c:	813b      	strh	r3, [r7, #8]
 800314e:	4613      	mov	r3, r2
 8003150:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003152:	88f8      	ldrh	r0, [r7, #6]
 8003154:	893a      	ldrh	r2, [r7, #8]
 8003156:	8979      	ldrh	r1, [r7, #10]
 8003158:	7e3b      	ldrb	r3, [r7, #24]
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	4603      	mov	r3, r0
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f7ff fc7f 	bl	8002a62 <u8g2_draw_hv_line_2dir>
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <u8x8_ascii_next+0x18>
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	2b0a      	cmp	r3, #10
 800319c:	d102      	bne.n	80031a4 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800319e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a2:	e001      	b.n	80031a8 <u8x8_ascii_next+0x22>
  return b;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	b29b      	uxth	r3, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <u8x8_utf8_next+0x18>
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	2b0a      	cmp	r3, #10
 80031c8:	d102      	bne.n	80031d0 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80031ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ce:	e06e      	b.n	80032ae <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d145      	bne.n	8003266 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	2bfb      	cmp	r3, #251	; 0xfb
 80031de:	d908      	bls.n	80031f2 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2205      	movs	r2, #5
 80031e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	70fb      	strb	r3, [r7, #3]
 80031f0:	e032      	b.n	8003258 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	2bf7      	cmp	r3, #247	; 0xf7
 80031f6:	d908      	bls.n	800320a <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2204      	movs	r2, #4
 80031fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	70fb      	strb	r3, [r7, #3]
 8003208:	e026      	b.n	8003258 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	2bef      	cmp	r3, #239	; 0xef
 800320e:	d908      	bls.n	8003222 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2203      	movs	r2, #3
 8003214:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	70fb      	strb	r3, [r7, #3]
 8003220:	e01a      	b.n	8003258 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	2bdf      	cmp	r3, #223	; 0xdf
 8003226:	d908      	bls.n	800323a <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	70fb      	strb	r3, [r7, #3]
 8003238:	e00e      	b.n	8003258 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	2bbf      	cmp	r3, #191	; 0xbf
 800323e:	d908      	bls.n	8003252 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	70fb      	strb	r3, [r7, #3]
 8003250:	e002      	b.n	8003258 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8003252:	78fb      	ldrb	r3, [r7, #3]
 8003254:	b29b      	uxth	r3, r3
 8003256:	e02a      	b.n	80032ae <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	b29a      	uxth	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003260:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003264:	e023      	b.n	80032ae <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800326c:	3b01      	subs	r3, #1
 800326e:	b2da      	uxtb	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	8c1b      	ldrh	r3, [r3, #32]
 800327a:	019b      	lsls	r3, r3, #6
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003288:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8c1a      	ldrh	r2, [r3, #32]
 800328e:	78fb      	ldrb	r3, [r7, #3]
 8003290:	b29b      	uxth	r3, r3
 8003292:	4313      	orrs	r3, r2
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80032a4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80032a8:	e001      	b.n	80032ae <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8c1b      	ldrh	r3, [r3, #32]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691c      	ldr	r4, [r3, #16]
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	2300      	movs	r3, #0
 80032cc:	2120      	movs	r1, #32
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	47a0      	blx	r4
 80032d2:	4603      	mov	r3, r0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}

080032dc <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	460b      	mov	r3, r1
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691c      	ldr	r4, [r3, #16]
 80032ee:	7afa      	ldrb	r2, [r7, #11]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2117      	movs	r1, #23
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	47a0      	blx	r4
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd90      	pop	{r4, r7, pc}

08003302 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800330e:	1cfb      	adds	r3, r7, #3
 8003310:	461a      	mov	r2, r3
 8003312:	2101      	movs	r1, #1
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ffe1 	bl	80032dc <u8x8_byte_SendBytes>
 800331a:	4603      	mov	r3, r0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68dc      	ldr	r4, [r3, #12]
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	2300      	movs	r3, #0
 8003338:	2115      	movs	r1, #21
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	47a0      	blx	r4
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bd90      	pop	{r4, r7, pc}

08003348 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003348:	b590      	push	{r4, r7, lr}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68dc      	ldr	r4, [r3, #12]
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	2300      	movs	r3, #0
 800335c:	2116      	movs	r1, #22
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	47a0      	blx	r4
 8003362:	4603      	mov	r3, r0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bd90      	pop	{r4, r7, pc}

0800336c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	460b      	mov	r3, r1
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68dc      	ldr	r4, [r3, #12]
 800337e:	7afa      	ldrb	r2, [r7, #11]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2117      	movs	r1, #23
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	47a0      	blx	r4
 8003388:	4603      	mov	r3, r0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}

08003392 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003392:	b590      	push	{r4, r7, lr}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68dc      	ldr	r4, [r3, #12]
 800339e:	2300      	movs	r3, #0
 80033a0:	2200      	movs	r2, #0
 80033a2:	2118      	movs	r1, #24
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	47a0      	blx	r4
 80033a8:	4603      	mov	r3, r0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd90      	pop	{r4, r7, pc}

080033b2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80033b2:	b590      	push	{r4, r7, lr}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68dc      	ldr	r4, [r3, #12]
 80033be:	2300      	movs	r3, #0
 80033c0:	2200      	movs	r2, #0
 80033c2:	2119      	movs	r1, #25
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	47a0      	blx	r4
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd90      	pop	{r4, r7, pc}

080033d2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80033d2:	b590      	push	{r4, r7, lr}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	73fb      	strb	r3, [r7, #15]
    data++;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	2bfe      	cmp	r3, #254	; 0xfe
 80033ec:	d031      	beq.n	8003452 <u8x8_cad_SendSequence+0x80>
 80033ee:	2bfe      	cmp	r3, #254	; 0xfe
 80033f0:	dc3d      	bgt.n	800346e <u8x8_cad_SendSequence+0x9c>
 80033f2:	2b19      	cmp	r3, #25
 80033f4:	dc3b      	bgt.n	800346e <u8x8_cad_SendSequence+0x9c>
 80033f6:	2b18      	cmp	r3, #24
 80033f8:	da23      	bge.n	8003442 <u8x8_cad_SendSequence+0x70>
 80033fa:	2b16      	cmp	r3, #22
 80033fc:	dc02      	bgt.n	8003404 <u8x8_cad_SendSequence+0x32>
 80033fe:	2b15      	cmp	r3, #21
 8003400:	da03      	bge.n	800340a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003402:	e034      	b.n	800346e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003404:	2b17      	cmp	r3, #23
 8003406:	d00e      	beq.n	8003426 <u8x8_cad_SendSequence+0x54>
	return;
 8003408:	e031      	b.n	800346e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68dc      	ldr	r4, [r3, #12]
 8003414:	7bba      	ldrb	r2, [r7, #14]
 8003416:	7bf9      	ldrb	r1, [r7, #15]
 8003418:	2300      	movs	r3, #0
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	47a0      	blx	r4
	  data++;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	3301      	adds	r3, #1
 8003422:	603b      	str	r3, [r7, #0]
	  break;
 8003424:	e022      	b.n	800346c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800342c:	f107 030e 	add.w	r3, r7, #14
 8003430:	461a      	mov	r2, r3
 8003432:	2101      	movs	r1, #1
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff99 	bl	800336c <u8x8_cad_SendData>
	  data++;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	603b      	str	r3, [r7, #0]
	  break;
 8003440:	e014      	b.n	800346c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68dc      	ldr	r4, [r3, #12]
 8003446:	7bf9      	ldrb	r1, [r7, #15]
 8003448:	2300      	movs	r3, #0
 800344a:	2200      	movs	r2, #0
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	47a0      	blx	r4
	  break;
 8003450:	e00c      	b.n	800346c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003458:	7bbb      	ldrb	r3, [r7, #14]
 800345a:	461a      	mov	r2, r3
 800345c:	2129      	movs	r1, #41	; 0x29
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f9ed 	bl	800383e <u8x8_gpio_call>
	  data++;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	3301      	adds	r3, #1
 8003468:	603b      	str	r3, [r7, #0]
	  break;
 800346a:	bf00      	nop
    cmd = *data;
 800346c:	e7b6      	b.n	80033dc <u8x8_cad_SendSequence+0xa>
	return;
 800346e:	bf00      	nop
    }
  }
}
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bd90      	pop	{r4, r7, pc}
	...

08003478 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	607b      	str	r3, [r7, #4]
 8003482:	460b      	mov	r3, r1
 8003484:	72fb      	strb	r3, [r7, #11]
 8003486:	4613      	mov	r3, r2
 8003488:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800348a:	7afb      	ldrb	r3, [r7, #11]
 800348c:	3b14      	subs	r3, #20
 800348e:	2b05      	cmp	r3, #5
 8003490:	d82f      	bhi.n	80034f2 <u8x8_cad_001+0x7a>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <u8x8_cad_001+0x20>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080034e1 	.word	0x080034e1
 800349c:	080034b1 	.word	0x080034b1
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080034e1 	.word	0x080034e1
 80034ac:	080034e1 	.word	0x080034e1
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80034b0:	2100      	movs	r1, #0
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff ff00 	bl	80032b8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80034b8:	7abb      	ldrb	r3, [r7, #10]
 80034ba:	4619      	mov	r1, r3
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f7ff ff20 	bl	8003302 <u8x8_byte_SendByte>
      break;
 80034c2:	e018      	b.n	80034f6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80034c4:	2100      	movs	r1, #0
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff fef6 	bl	80032b8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80034cc:	7abb      	ldrb	r3, [r7, #10]
 80034ce:	4619      	mov	r1, r3
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f7ff ff16 	bl	8003302 <u8x8_byte_SendByte>
      break;
 80034d6:	e00e      	b.n	80034f6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80034d8:	2101      	movs	r1, #1
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f7ff feec 	bl	80032b8 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	691c      	ldr	r4, [r3, #16]
 80034e4:	7aba      	ldrb	r2, [r7, #10]
 80034e6:	7af9      	ldrb	r1, [r7, #11]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	47a0      	blx	r4
 80034ee:	4603      	mov	r3, r0
 80034f0:	e002      	b.n	80034f8 <u8x8_cad_001+0x80>
    default:
      return 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <u8x8_cad_001+0x80>
  }
  return 1;
 80034f6:	2301      	movs	r3, #1
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd90      	pop	{r4, r7, pc}

08003500 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	72fb      	strb	r3, [r7, #11]
 800350e:	4613      	mov	r3, r2
 8003510:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8003512:	7afb      	ldrb	r3, [r7, #11]
 8003514:	3b0b      	subs	r3, #11
 8003516:	2b04      	cmp	r3, #4
 8003518:	f200 808e 	bhi.w	8003638 <u8x8_d_uc1604_common+0x138>
 800351c:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <u8x8_d_uc1604_common+0x24>)
 800351e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003522:	bf00      	nop
 8003524:	080035cd 	.word	0x080035cd
 8003528:	08003639 	.word	0x08003639
 800352c:	080035e7 	.word	0x080035e7
 8003530:	08003619 	.word	0x08003619
 8003534:	08003539 	.word	0x08003539
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff ff2a 	bl	8003392 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	795b      	ldrb	r3, [r3, #5]
 8003542:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 800354a:	7dfb      	ldrb	r3, [r7, #23]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	b2db      	uxtb	r3, r3
 8003552:	4619      	mov	r1, r3
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff fee5 	bl	8003324 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f043 0310 	orr.w	r3, r3, #16
 8003564:	b2db      	uxtb	r3, r3
 8003566:	4619      	mov	r1, r3
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fedb 	bl	8003324 <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	799b      	ldrb	r3, [r3, #6]
 8003572:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800357a:	7dbb      	ldrb	r3, [r7, #22]
 800357c:	4413      	add	r3, r2
 800357e:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8003580:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	b25b      	sxtb	r3, r3
 800358a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800358e:	b25b      	sxtb	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	4619      	mov	r1, r3
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7ff fec5 	bl	8003324 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	791b      	ldrb	r3, [r3, #4]
 800359e:	757b      	strb	r3, [r7, #21]
      c *= 8;
 80035a0:	7d7b      	ldrb	r3, [r7, #21]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80035ac:	7d7b      	ldrb	r3, [r7, #21]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4619      	mov	r1, r3
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7ff feda 	bl	800336c <u8x8_cad_SendData>
	arg_int--;
 80035b8:	7abb      	ldrb	r3, [r7, #10]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80035be:	7abb      	ldrb	r3, [r7, #10]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f3      	bne.n	80035ac <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f7ff fef4 	bl	80033b2 <u8x8_cad_EndTransfer>
      break;
 80035ca:	e037      	b.n	800363c <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80035cc:	7abb      	ldrb	r3, [r7, #10]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 80035d2:	491d      	ldr	r1, [pc, #116]	; (8003648 <u8x8_d_uc1604_common+0x148>)
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff fefc 	bl	80033d2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 80035da:	e02f      	b.n	800363c <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 80035dc:	491b      	ldr	r1, [pc, #108]	; (800364c <u8x8_d_uc1604_common+0x14c>)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7ff fef7 	bl	80033d2 <u8x8_cad_SendSequence>
      break;
 80035e4:	e02a      	b.n	800363c <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80035e6:	7abb      	ldrb	r3, [r7, #10]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 80035ec:	4918      	ldr	r1, [pc, #96]	; (8003650 <u8x8_d_uc1604_common+0x150>)
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f7ff feef 	bl	80033d2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	7c9a      	ldrb	r2, [r3, #18]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8003600:	e01c      	b.n	800363c <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 8003602:	4914      	ldr	r1, [pc, #80]	; (8003654 <u8x8_d_uc1604_common+0x154>)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff fee4 	bl	80033d2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	7cda      	ldrb	r2, [r3, #19]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003616:	e011      	b.n	800363c <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff feba 	bl	8003392 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800361e:	2181      	movs	r1, #129	; 0x81
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff fe7f 	bl	8003324 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 8003626:	7abb      	ldrb	r3, [r7, #10]
 8003628:	4619      	mov	r1, r3
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f7ff fe8c 	bl	8003348 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f7ff febe 	bl	80033b2 <u8x8_cad_EndTransfer>
      break;
 8003636:	e001      	b.n	800363c <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8003638:	2300      	movs	r3, #0
 800363a:	e000      	b.n	800363e <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 800363c:	2301      	movs	r3, #1
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	0800d558 	.word	0x0800d558
 800364c:	0800d568 	.word	0x0800d568
 8003650:	0800d570 	.word	0x0800d570
 8003654:	0800d578 	.word	0x0800d578

08003658 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	460b      	mov	r3, r1
 8003664:	72fb      	strb	r3, [r7, #11]
 8003666:	4613      	mov	r3, r2
 8003668:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 800366a:	7aba      	ldrb	r2, [r7, #10]
 800366c:	7af9      	ldrb	r1, [r7, #11]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff ff45 	bl	8003500 <u8x8_d_uc1604_common>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d114      	bne.n	80036a6 <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 800367c:	7afb      	ldrb	r3, [r7, #11]
 800367e:	2b09      	cmp	r3, #9
 8003680:	d002      	beq.n	8003688 <u8x8_d_uc1604_jlx19264+0x30>
 8003682:	2b0a      	cmp	r3, #10
 8003684:	d005      	beq.n	8003692 <u8x8_d_uc1604_jlx19264+0x3a>
 8003686:	e00c      	b.n	80036a2 <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8003688:	490a      	ldr	r1, [pc, #40]	; (80036b4 <u8x8_d_uc1604_jlx19264+0x5c>)
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f816 	bl	80036bc <u8x8_d_helper_display_setup_memory>
	break;
 8003690:	e00a      	b.n	80036a8 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f825 	bl	80036e2 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8003698:	4907      	ldr	r1, [pc, #28]	; (80036b8 <u8x8_d_uc1604_jlx19264+0x60>)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff fe99 	bl	80033d2 <u8x8_cad_SendSequence>
	break;
 80036a0:	e002      	b.n	80036a8 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 80036a2:	2300      	movs	r3, #0
 80036a4:	e001      	b.n	80036aa <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 80036a6:	bf00      	nop
  return 1;
 80036a8:	2301      	movs	r3, #1
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	0800d580 	.word	0x0800d580
 80036b8:	0800d598 	.word	0x0800d598

080036bc <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	7c9a      	ldrb	r2, [r3, #18]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80036e2:	b590      	push	{r4, r7, lr}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695c      	ldr	r4, [r3, #20]
 80036ee:	2300      	movs	r3, #0
 80036f0:	2200      	movs	r2, #0
 80036f2:	2128      	movs	r1, #40	; 0x28
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68dc      	ldr	r4, [r3, #12]
 80036fc:	2300      	movs	r3, #0
 80036fe:	2200      	movs	r2, #0
 8003700:	2114      	movs	r1, #20
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003706:	2201      	movs	r2, #1
 8003708:	214b      	movs	r1, #75	; 0x4b
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f897 	bl	800383e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	791b      	ldrb	r3, [r3, #4]
 8003716:	461a      	mov	r2, r3
 8003718:	2129      	movs	r1, #41	; 0x29
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f88f 	bl	800383e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003720:	2200      	movs	r2, #0
 8003722:	214b      	movs	r1, #75	; 0x4b
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f88a 	bl	800383e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	791b      	ldrb	r3, [r3, #4]
 8003730:	461a      	mov	r2, r3
 8003732:	2129      	movs	r1, #41	; 0x29
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f882 	bl	800383e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800373a:	2201      	movs	r2, #1
 800373c:	214b      	movs	r1, #75	; 0x4b
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f87d 	bl	800383e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	795b      	ldrb	r3, [r3, #5]
 800374a:	461a      	mov	r2, r3
 800374c:	2129      	movs	r1, #41	; 0x29
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f875 	bl	800383e <u8x8_gpio_call>
}    
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}

0800375c <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800375c:	b590      	push	{r4, r7, lr}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	461a      	mov	r2, r3
 800376a:	4603      	mov	r3, r0
 800376c:	70fb      	strb	r3, [r7, #3]
 800376e:	460b      	mov	r3, r1
 8003770:	70bb      	strb	r3, [r7, #2]
 8003772:	4613      	mov	r3, r2
 8003774:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003776:	78fb      	ldrb	r3, [r7, #3]
 8003778:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800377a:	78bb      	ldrb	r3, [r7, #2]
 800377c:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800377e:	787b      	ldrb	r3, [r7, #1]
 8003780:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689c      	ldr	r4, [r3, #8]
 800378a:	f107 0308 	add.w	r3, r7, #8
 800378e:	2201      	movs	r2, #1
 8003790:	210f      	movs	r1, #15
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	47a0      	blx	r4
 8003796:	4603      	mov	r3, r0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}

080037a0 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689c      	ldr	r4, [r3, #8]
 80037ac:	2300      	movs	r3, #0
 80037ae:	2200      	movs	r2, #0
 80037b0:	2109      	movs	r1, #9
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	47a0      	blx	r4
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd90      	pop	{r4, r7, pc}

080037be <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80037be:	b590      	push	{r4, r7, lr}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689c      	ldr	r4, [r3, #8]
 80037ca:	2300      	movs	r3, #0
 80037cc:	2200      	movs	r2, #0
 80037ce:	210a      	movs	r1, #10
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	47a0      	blx	r4
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd90      	pop	{r4, r7, pc}

080037dc <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80037dc:	b590      	push	{r4, r7, lr}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	460b      	mov	r3, r1
 80037e6:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689c      	ldr	r4, [r3, #8]
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	2300      	movs	r3, #0
 80037f0:	210b      	movs	r1, #11
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	47a0      	blx	r4
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}

080037fe <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 80037fe:	b590      	push	{r4, r7, lr}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689c      	ldr	r4, [r3, #8]
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	2300      	movs	r3, #0
 8003812:	210e      	movs	r1, #14
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	47a0      	blx	r4
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}

08003820 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003820:	b590      	push	{r4, r7, lr}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689c      	ldr	r4, [r3, #8]
 800382c:	2300      	movs	r3, #0
 800382e:	2200      	movs	r2, #0
 8003830:	2110      	movs	r1, #16
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	47a0      	blx	r4
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bd90      	pop	{r4, r7, pc}

0800383e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800383e:	b590      	push	{r4, r7, lr}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	70fb      	strb	r3, [r7, #3]
 800384a:	4613      	mov	r3, r2
 800384c:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695c      	ldr	r4, [r3, #20]
 8003852:	78ba      	ldrb	r2, [r7, #2]
 8003854:	78f9      	ldrb	r1, [r7, #3]
 8003856:	2300      	movs	r3, #0
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	47a0      	blx	r4
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bd90      	pop	{r4, r7, pc}

08003864 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	607b      	str	r3, [r7, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	72fb      	strb	r3, [r7, #11]
 8003872:	4613      	mov	r3, r2
 8003874:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
	...

08003884 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a11      	ldr	r2, [pc, #68]	; (80038dc <u8x8_SetupDefaults+0x58>)
 8003896:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <u8x8_SetupDefaults+0x58>)
 800389c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <u8x8_SetupDefaults+0x58>)
 80038a2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a0d      	ldr	r2, [pc, #52]	; (80038dc <u8x8_SetupDefaults+0x58>)
 80038a8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	22ff      	movs	r2, #255	; 0xff
 80038c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	08003865 	.word	0x08003865

080038e0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff ffc8 	bl	8003884 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff ff47 	bl	80037a0 <u8x8_SetupMemory>
}
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800391c:	480c      	ldr	r0, [pc, #48]	; (8003950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800391e:	490d      	ldr	r1, [pc, #52]	; (8003954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003920:	4a0d      	ldr	r2, [pc, #52]	; (8003958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003924:	e002      	b.n	800392c <LoopCopyDataInit>

08003926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800392a:	3304      	adds	r3, #4

0800392c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800392c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800392e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003930:	d3f9      	bcc.n	8003926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003934:	4c0a      	ldr	r4, [pc, #40]	; (8003960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003938:	e001      	b.n	800393e <LoopFillZerobss>

0800393a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800393a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800393c:	3204      	adds	r2, #4

0800393e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800393e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003940:	d3fb      	bcc.n	800393a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003942:	f7fd fde5 	bl	8001510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003946:	f008 f9b1 	bl	800bcac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800394a:	f7fd fb03 	bl	8000f54 <main>
  bx lr
 800394e:	4770      	bx	lr
  ldr r0, =_sdata
 8003950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003954:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8003958:	0800d5f8 	.word	0x0800d5f8
  ldr r2, =_sbss
 800395c:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 8003960:	20001e28 	.word	0x20001e28

08003964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003964:	e7fe      	b.n	8003964 <ADC1_2_IRQHandler>
	...

08003968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <HAL_Init+0x28>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a07      	ldr	r2, [pc, #28]	; (8003990 <HAL_Init+0x28>)
 8003972:	f043 0310 	orr.w	r3, r3, #16
 8003976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003978:	2003      	movs	r0, #3
 800397a:	f000 f981 	bl	8003c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800397e:	200f      	movs	r0, #15
 8003980:	f000 f808 	bl	8003994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003984:	f7fd fc80 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40022000 	.word	0x40022000

08003994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_InitTick+0x54>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_InitTick+0x58>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	4619      	mov	r1, r3
 80039a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f9ab 	bl	8003d0e <HAL_SYSTICK_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e00e      	b.n	80039e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b0f      	cmp	r3, #15
 80039c6:	d80a      	bhi.n	80039de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039c8:	2200      	movs	r2, #0
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039d0:	f000 f961 	bl	8003c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039d4:	4a06      	ldr	r2, [pc, #24]	; (80039f0 <HAL_InitTick+0x5c>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e000      	b.n	80039e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000230 	.word	0x20000230
 80039ec:	20000238 	.word	0x20000238
 80039f0:	20000234 	.word	0x20000234

080039f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_IncTick+0x1c>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	461a      	mov	r2, r3
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_IncTick+0x20>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4413      	add	r3, r2
 8003a04:	4a03      	ldr	r2, [pc, #12]	; (8003a14 <HAL_IncTick+0x20>)
 8003a06:	6013      	str	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	20000238 	.word	0x20000238
 8003a14:	20000c70 	.word	0x20000c70

08003a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a1c:	4b02      	ldr	r3, [pc, #8]	; (8003a28 <HAL_GetTick+0x10>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	20000c70 	.word	0x20000c70

08003a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a34:	f7ff fff0 	bl	8003a18 <HAL_GetTick>
 8003a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a44:	d005      	beq.n	8003a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <HAL_Delay+0x44>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a52:	bf00      	nop
 8003a54:	f7ff ffe0 	bl	8003a18 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d8f7      	bhi.n	8003a54 <HAL_Delay+0x28>
  {
  }
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000238 	.word	0x20000238

08003a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a90:	4013      	ands	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aa6:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	60d3      	str	r3, [r2, #12]
}
 8003aac:	bf00      	nop
 8003aae:	3714      	adds	r7, #20
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ac0:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	f003 0307 	and.w	r3, r3, #7
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	db0b      	blt.n	8003b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	f003 021f 	and.w	r2, r3, #31
 8003af0:	4906      	ldr	r1, [pc, #24]	; (8003b0c <__NVIC_EnableIRQ+0x34>)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	2001      	movs	r0, #1
 8003afa:	fa00 f202 	lsl.w	r2, r0, r2
 8003afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	e000e100 	.word	0xe000e100

08003b10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	db12      	blt.n	8003b48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	f003 021f 	and.w	r2, r3, #31
 8003b28:	490a      	ldr	r1, [pc, #40]	; (8003b54 <__NVIC_DisableIRQ+0x44>)
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2001      	movs	r0, #1
 8003b32:	fa00 f202 	lsl.w	r2, r0, r2
 8003b36:	3320      	adds	r3, #32
 8003b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b3c:	f3bf 8f4f 	dsb	sy
}
 8003b40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b42:	f3bf 8f6f 	isb	sy
}
 8003b46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000e100 	.word	0xe000e100

08003b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	db0a      	blt.n	8003b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	490c      	ldr	r1, [pc, #48]	; (8003ba4 <__NVIC_SetPriority+0x4c>)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b80:	e00a      	b.n	8003b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <__NVIC_SetPriority+0x50>)
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	0112      	lsls	r2, r2, #4
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	440b      	add	r3, r1
 8003b96:	761a      	strb	r2, [r3, #24]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	e000e100 	.word	0xe000e100
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f1c3 0307 	rsb	r3, r3, #7
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	bf28      	it	cs
 8003bca:	2304      	movcs	r3, #4
 8003bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2b06      	cmp	r3, #6
 8003bd4:	d902      	bls.n	8003bdc <NVIC_EncodePriority+0x30>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3b03      	subs	r3, #3
 8003bda:	e000      	b.n	8003bde <NVIC_EncodePriority+0x32>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43da      	mvns	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	401a      	ands	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	43d9      	mvns	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	4313      	orrs	r3, r2
         );
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	; 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003c14:	f3bf 8f4f 	dsb	sy
}
 8003c18:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <__NVIC_SystemReset+0x24>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003c22:	4904      	ldr	r1, [pc, #16]	; (8003c34 <__NVIC_SystemReset+0x24>)
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <__NVIC_SystemReset+0x28>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c2a:	f3bf 8f4f 	dsb	sy
}
 8003c2e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003c30:	bf00      	nop
 8003c32:	e7fd      	b.n	8003c30 <__NVIC_SystemReset+0x20>
 8003c34:	e000ed00 	.word	0xe000ed00
 8003c38:	05fa0004 	.word	0x05fa0004

08003c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c4c:	d301      	bcc.n	8003c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00f      	b.n	8003c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <SysTick_Config+0x40>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c5a:	210f      	movs	r1, #15
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c60:	f7ff ff7a 	bl	8003b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c64:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <SysTick_Config+0x40>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <SysTick_Config+0x40>)
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	e000e010 	.word	0xe000e010

08003c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff fef3 	bl	8003a74 <__NVIC_SetPriorityGrouping>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca8:	f7ff ff08 	bl	8003abc <__NVIC_GetPriorityGrouping>
 8003cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f7ff ff7a 	bl	8003bac <NVIC_EncodePriority>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff49 	bl	8003b58 <__NVIC_SetPriority>
}
 8003cc6:	bf00      	nop
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fefb 	bl	8003ad8 <__NVIC_EnableIRQ>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff09 	bl	8003b10 <__NVIC_DisableIRQ>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003d0a:	f7ff ff81 	bl	8003c10 <__NVIC_SystemReset>

08003d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ff90 	bl	8003c3c <SysTick_Config>
 8003d1c:	4603      	mov	r3, r0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b08b      	sub	sp, #44	; 0x2c
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d36:	2300      	movs	r3, #0
 8003d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d3a:	e169      	b.n	8004010 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	f040 8158 	bne.w	800400a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a9a      	ldr	r2, [pc, #616]	; (8003fc8 <HAL_GPIO_Init+0x2a0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d05e      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d64:	4a98      	ldr	r2, [pc, #608]	; (8003fc8 <HAL_GPIO_Init+0x2a0>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d875      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d6a:	4a98      	ldr	r2, [pc, #608]	; (8003fcc <HAL_GPIO_Init+0x2a4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d058      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d70:	4a96      	ldr	r2, [pc, #600]	; (8003fcc <HAL_GPIO_Init+0x2a4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d86f      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d76:	4a96      	ldr	r2, [pc, #600]	; (8003fd0 <HAL_GPIO_Init+0x2a8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d052      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d7c:	4a94      	ldr	r2, [pc, #592]	; (8003fd0 <HAL_GPIO_Init+0x2a8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d869      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d82:	4a94      	ldr	r2, [pc, #592]	; (8003fd4 <HAL_GPIO_Init+0x2ac>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d04c      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d88:	4a92      	ldr	r2, [pc, #584]	; (8003fd4 <HAL_GPIO_Init+0x2ac>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d863      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d8e:	4a92      	ldr	r2, [pc, #584]	; (8003fd8 <HAL_GPIO_Init+0x2b0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d046      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
 8003d94:	4a90      	ldr	r2, [pc, #576]	; (8003fd8 <HAL_GPIO_Init+0x2b0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d85d      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003d9a:	2b12      	cmp	r3, #18
 8003d9c:	d82a      	bhi.n	8003df4 <HAL_GPIO_Init+0xcc>
 8003d9e:	2b12      	cmp	r3, #18
 8003da0:	d859      	bhi.n	8003e56 <HAL_GPIO_Init+0x12e>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <HAL_GPIO_Init+0x80>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003e23 	.word	0x08003e23
 8003dac:	08003dfd 	.word	0x08003dfd
 8003db0:	08003e0f 	.word	0x08003e0f
 8003db4:	08003e51 	.word	0x08003e51
 8003db8:	08003e57 	.word	0x08003e57
 8003dbc:	08003e57 	.word	0x08003e57
 8003dc0:	08003e57 	.word	0x08003e57
 8003dc4:	08003e57 	.word	0x08003e57
 8003dc8:	08003e57 	.word	0x08003e57
 8003dcc:	08003e57 	.word	0x08003e57
 8003dd0:	08003e57 	.word	0x08003e57
 8003dd4:	08003e57 	.word	0x08003e57
 8003dd8:	08003e57 	.word	0x08003e57
 8003ddc:	08003e57 	.word	0x08003e57
 8003de0:	08003e57 	.word	0x08003e57
 8003de4:	08003e57 	.word	0x08003e57
 8003de8:	08003e57 	.word	0x08003e57
 8003dec:	08003e05 	.word	0x08003e05
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	4a79      	ldr	r2, [pc, #484]	; (8003fdc <HAL_GPIO_Init+0x2b4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003dfa:	e02c      	b.n	8003e56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	623b      	str	r3, [r7, #32]
          break;
 8003e02:	e029      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	623b      	str	r3, [r7, #32]
          break;
 8003e0c:	e024      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	3308      	adds	r3, #8
 8003e14:	623b      	str	r3, [r7, #32]
          break;
 8003e16:	e01f      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	623b      	str	r3, [r7, #32]
          break;
 8003e20:	e01a      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	623b      	str	r3, [r7, #32]
          break;
 8003e2e:	e013      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e38:	2308      	movs	r3, #8
 8003e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	611a      	str	r2, [r3, #16]
          break;
 8003e42:	e009      	b.n	8003e58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e44:	2308      	movs	r3, #8
 8003e46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	615a      	str	r2, [r3, #20]
          break;
 8003e4e:	e003      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e50:	2300      	movs	r3, #0
 8003e52:	623b      	str	r3, [r7, #32]
          break;
 8003e54:	e000      	b.n	8003e58 <HAL_GPIO_Init+0x130>
          break;
 8003e56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2bff      	cmp	r3, #255	; 0xff
 8003e5c:	d801      	bhi.n	8003e62 <HAL_GPIO_Init+0x13a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	e001      	b.n	8003e66 <HAL_GPIO_Init+0x13e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2bff      	cmp	r3, #255	; 0xff
 8003e6c:	d802      	bhi.n	8003e74 <HAL_GPIO_Init+0x14c>
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	e002      	b.n	8003e7a <HAL_GPIO_Init+0x152>
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	3b08      	subs	r3, #8
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	210f      	movs	r1, #15
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	fa01 f303 	lsl.w	r3, r1, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	431a      	orrs	r2, r3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80b1 	beq.w	800400a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ea8:	4b4d      	ldr	r3, [pc, #308]	; (8003fe0 <HAL_GPIO_Init+0x2b8>)
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	; (8003fe0 <HAL_GPIO_Init+0x2b8>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6193      	str	r3, [r2, #24]
 8003eb4:	4b4a      	ldr	r3, [pc, #296]	; (8003fe0 <HAL_GPIO_Init+0x2b8>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ec0:	4a48      	ldr	r2, [pc, #288]	; (8003fe4 <HAL_GPIO_Init+0x2bc>)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ecc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	220f      	movs	r2, #15
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a40      	ldr	r2, [pc, #256]	; (8003fe8 <HAL_GPIO_Init+0x2c0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d013      	beq.n	8003f14 <HAL_GPIO_Init+0x1ec>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a3f      	ldr	r2, [pc, #252]	; (8003fec <HAL_GPIO_Init+0x2c4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00d      	beq.n	8003f10 <HAL_GPIO_Init+0x1e8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a3e      	ldr	r2, [pc, #248]	; (8003ff0 <HAL_GPIO_Init+0x2c8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d007      	beq.n	8003f0c <HAL_GPIO_Init+0x1e4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3d      	ldr	r2, [pc, #244]	; (8003ff4 <HAL_GPIO_Init+0x2cc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <HAL_GPIO_Init+0x1e0>
 8003f04:	2303      	movs	r3, #3
 8003f06:	e006      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	e004      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e002      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_GPIO_Init+0x1ee>
 8003f14:	2300      	movs	r3, #0
 8003f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f18:	f002 0203 	and.w	r2, r2, #3
 8003f1c:	0092      	lsls	r2, r2, #2
 8003f1e:	4093      	lsls	r3, r2
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f26:	492f      	ldr	r1, [pc, #188]	; (8003fe4 <HAL_GPIO_Init+0x2bc>)
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	089b      	lsrs	r3, r3, #2
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f40:	4b2d      	ldr	r3, [pc, #180]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	492c      	ldr	r1, [pc, #176]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e006      	b.n	8003f5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	4928      	ldr	r1, [pc, #160]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d006      	beq.n	8003f76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f68:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	4922      	ldr	r1, [pc, #136]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
 8003f74:	e006      	b.n	8003f84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f76:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	491e      	ldr	r1, [pc, #120]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d006      	beq.n	8003f9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	4918      	ldr	r1, [pc, #96]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]
 8003f9c:	e006      	b.n	8003fac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	4914      	ldr	r1, [pc, #80]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d021      	beq.n	8003ffc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	490e      	ldr	r1, [pc, #56]	; (8003ff8 <HAL_GPIO_Init+0x2d0>)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60cb      	str	r3, [r1, #12]
 8003fc4:	e021      	b.n	800400a <HAL_GPIO_Init+0x2e2>
 8003fc6:	bf00      	nop
 8003fc8:	10320000 	.word	0x10320000
 8003fcc:	10310000 	.word	0x10310000
 8003fd0:	10220000 	.word	0x10220000
 8003fd4:	10210000 	.word	0x10210000
 8003fd8:	10120000 	.word	0x10120000
 8003fdc:	10110000 	.word	0x10110000
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40010800 	.word	0x40010800
 8003fec:	40010c00 	.word	0x40010c00
 8003ff0:	40011000 	.word	0x40011000
 8003ff4:	40011400 	.word	0x40011400
 8003ff8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <HAL_GPIO_Init+0x304>)
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	43db      	mvns	r3, r3
 8004004:	4909      	ldr	r1, [pc, #36]	; (800402c <HAL_GPIO_Init+0x304>)
 8004006:	4013      	ands	r3, r2
 8004008:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	3301      	adds	r3, #1
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	f47f ae8e 	bne.w	8003d3c <HAL_GPIO_Init+0x14>
  }
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	372c      	adds	r7, #44	; 0x2c
 8004026:	46bd      	mov	sp, r7
 8004028:	bc80      	pop	{r7}
 800402a:	4770      	bx	lr
 800402c:	40010400 	.word	0x40010400

08004030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
 800403c:	4613      	mov	r3, r2
 800403e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004040:	787b      	ldrb	r3, [r7, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800404c:	e003      	b.n	8004056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	041a      	lsls	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	611a      	str	r2, [r3, #16]
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4013      	ands	r3, r2
 8004078:	041a      	lsls	r2, r3, #16
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	43d9      	mvns	r1, r3
 800407e:	887b      	ldrh	r3, [r7, #2]
 8004080:	400b      	ands	r3, r1
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	611a      	str	r2, [r3, #16]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr
	...

08004094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040aa:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040ac:	88fb      	ldrh	r3, [r7, #6]
 80040ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fc ff30 	bl	8000f18 <HAL_GPIO_EXTI_Callback>
  }
}
 80040b8:	bf00      	nop
 80040ba:	3708      	adds	r7, #8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40010400 	.word	0x40010400

080040c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	b08b      	sub	sp, #44	; 0x2c
 80040c8:	af06      	add	r7, sp, #24
 80040ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0fd      	b.n	80042d2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f007 fb26 	bl	800b73c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2203      	movs	r2, #3
 80040f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f002 fff7 	bl	80070f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	687e      	ldr	r6, [r7, #4]
 800410a:	466d      	mov	r5, sp
 800410c:	f106 0410 	add.w	r4, r6, #16
 8004110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	602b      	str	r3, [r5, #0]
 8004118:	1d33      	adds	r3, r6, #4
 800411a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	f002 ffc1 	bl	80070a4 <USB_CoreInit>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0ce      	b.n	80042d2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f002 fff2 	bl	8007124 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e04c      	b.n	80041e0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	440b      	add	r3, r1
 8004156:	3301      	adds	r3, #1
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	440b      	add	r3, r1
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004170:	7bfa      	ldrb	r2, [r7, #15]
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	b298      	uxth	r0, r3
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	440b      	add	r3, r1
 8004182:	3336      	adds	r3, #54	; 0x36
 8004184:	4602      	mov	r2, r0
 8004186:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	440b      	add	r3, r1
 8004198:	3303      	adds	r3, #3
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	440b      	add	r3, r1
 80041ac:	3338      	adds	r3, #56	; 0x38
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	440b      	add	r3, r1
 80041c0:	333c      	adds	r3, #60	; 0x3c
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041c6:	7bfa      	ldrb	r2, [r7, #15]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	440b      	add	r3, r1
 80041d4:	3340      	adds	r3, #64	; 0x40
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	3301      	adds	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3ad      	bcc.n	8004146 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	e044      	b.n	800427a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041f0:	7bfa      	ldrb	r2, [r7, #15]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	440b      	add	r3, r1
 80041fe:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	440b      	add	r3, r1
 8004214:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	440b      	add	r3, r1
 800422a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	440b      	add	r3, r1
 8004240:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	440b      	add	r3, r1
 8004256:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800425e:	7bfa      	ldrb	r2, [r7, #15]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	440b      	add	r3, r1
 800426c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	3301      	adds	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	7bfa      	ldrb	r2, [r7, #15]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	429a      	cmp	r2, r3
 8004282:	d3b5      	bcc.n	80041f0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	603b      	str	r3, [r7, #0]
 800428a:	687e      	ldr	r6, [r7, #4]
 800428c:	466d      	mov	r5, sp
 800428e:	f106 0410 	add.w	r4, r6, #16
 8004292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	602b      	str	r3, [r5, #0]
 800429a:	1d33      	adds	r3, r6, #4
 800429c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800429e:	6838      	ldr	r0, [r7, #0]
 80042a0:	f002 ff4c 	bl	800713c <USB_DevInit>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00d      	b.n	80042d2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f005 fbfe 	bl	8009acc <USB_DevDisconnect>

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_PCD_Start+0x16>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e016      	b.n	800431e <HAL_PCD_Start+0x44>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f002 fee1 	bl	80070c4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004302:	2101      	movs	r1, #1
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f007 fc94 	bl	800bc32 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f005 fbd2 	bl	8009ab8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b088      	sub	sp, #32
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f005 fbd4 	bl	8009ae0 <USB_ReadInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004342:	d102      	bne.n	800434a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fb5f 	bl	8004a08 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f005 fbc6 	bl	8009ae0 <USB_ReadInterrupts>
 8004354:	4603      	mov	r3, r0
 8004356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435e:	d112      	bne.n	8004386 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004368:	b29a      	uxth	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004372:	b292      	uxth	r2, r2
 8004374:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f007 fa62 	bl	800b842 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800437e:	2100      	movs	r1, #0
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f923 	bl	80045cc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f005 fba8 	bl	8009ae0 <USB_ReadInterrupts>
 8004390:	4603      	mov	r3, r0
 8004392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800439a:	d10b      	bne.n	80043b4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043ae:	b292      	uxth	r2, r2
 80043b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f005 fb91 	bl	8009ae0 <USB_ReadInterrupts>
 80043be:	4603      	mov	r3, r0
 80043c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c8:	d10b      	bne.n	80043e2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043dc:	b292      	uxth	r2, r2
 80043de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f005 fb7a 	bl	8009ae0 <USB_ReadInterrupts>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	d126      	bne.n	8004446 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004400:	b29a      	uxth	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0204 	bic.w	r2, r2, #4
 800440a:	b292      	uxth	r2, r2
 800440c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004418:	b29a      	uxth	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0208 	bic.w	r2, r2, #8
 8004422:	b292      	uxth	r2, r2
 8004424:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f007 fa43 	bl	800b8b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004440:	b292      	uxth	r2, r2
 8004442:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f005 fb48 	bl	8009ae0 <USB_ReadInterrupts>
 8004450:	4603      	mov	r3, r0
 8004452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	f040 8082 	bne.w	8004562 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	77fb      	strb	r3, [r7, #31]
 8004462:	e010      	b.n	8004486 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	7ffb      	ldrb	r3, [r7, #31]
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	441a      	add	r2, r3
 8004470:	7ffb      	ldrb	r3, [r7, #31]
 8004472:	8812      	ldrh	r2, [r2, #0]
 8004474:	b292      	uxth	r2, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	3320      	adds	r3, #32
 800447a:	443b      	add	r3, r7
 800447c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004480:	7ffb      	ldrb	r3, [r7, #31]
 8004482:	3301      	adds	r3, #1
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	7ffb      	ldrb	r3, [r7, #31]
 8004488:	2b07      	cmp	r3, #7
 800448a:	d9eb      	bls.n	8004464 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004494:	b29a      	uxth	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	b292      	uxth	r2, r2
 80044a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	b292      	uxth	r2, r2
 80044b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80044bc:	bf00      	nop
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f6      	beq.n	80044be <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044d8:	b29a      	uxth	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e2:	b292      	uxth	r2, r2
 80044e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e00f      	b.n	800450e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	4611      	mov	r1, r2
 80044f6:	7ffa      	ldrb	r2, [r7, #31]
 80044f8:	0092      	lsls	r2, r2, #2
 80044fa:	440a      	add	r2, r1
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	3320      	adds	r3, #32
 8004500:	443b      	add	r3, r7
 8004502:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004506:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004508:	7ffb      	ldrb	r3, [r7, #31]
 800450a:	3301      	adds	r3, #1
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	7ffb      	ldrb	r3, [r7, #31]
 8004510:	2b07      	cmp	r3, #7
 8004512:	d9ec      	bls.n	80044ee <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0208 	orr.w	r2, r2, #8
 8004526:	b292      	uxth	r2, r2
 8004528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004534:	b29a      	uxth	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800453e:	b292      	uxth	r2, r2
 8004540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800454c:	b29a      	uxth	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0204 	orr.w	r2, r2, #4
 8004556:	b292      	uxth	r2, r2
 8004558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f007 f98f 	bl	800b880 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f005 faba 	bl	8009ae0 <USB_ReadInterrupts>
 800456c:	4603      	mov	r3, r0
 800456e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004576:	d10e      	bne.n	8004596 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800458a:	b292      	uxth	r2, r2
 800458c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f007 f948 	bl	800b826 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f005 faa0 	bl	8009ae0 <USB_ReadInterrupts>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045aa:	d10b      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045be:	b292      	uxth	r2, r2
 80045c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80045c4:	bf00      	nop
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_PCD_SetAddress+0x1a>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e013      	b.n	800460e <HAL_PCD_SetAddress+0x42>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f005 fa47 	bl	8009a92 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	4608      	mov	r0, r1
 8004620:	4611      	mov	r1, r2
 8004622:	461a      	mov	r2, r3
 8004624:	4603      	mov	r3, r0
 8004626:	70fb      	strb	r3, [r7, #3]
 8004628:	460b      	mov	r3, r1
 800462a:	803b      	strh	r3, [r7, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004638:	2b00      	cmp	r3, #0
 800463a:	da0e      	bge.n	800465a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	705a      	strb	r2, [r3, #1]
 8004658:	e00e      	b.n	8004678 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 0207 	and.w	r2, r3, #7
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	4413      	add	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	b2da      	uxtb	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004684:	883a      	ldrh	r2, [r7, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	78ba      	ldrb	r2, [r7, #2]
 800468e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d004      	beq.n	80046a2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046a2:	78bb      	ldrb	r3, [r7, #2]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d102      	bne.n	80046ae <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_PCD_EP_Open+0xa6>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e00e      	b.n	80046da <HAL_PCD_EP_Open+0xc4>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f002 fd56 	bl	800717c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80046d8:	7afb      	ldrb	r3, [r7, #11]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da0e      	bge.n	8004714 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	705a      	strb	r2, [r3, #1]
 8004712:	e00e      	b.n	8004732 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	f003 0207 	and.w	r2, r3, #7
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_PCD_EP_Close+0x6a>
 8004748:	2302      	movs	r3, #2
 800474a:	e00e      	b.n	800476a <HAL_PCD_EP_Close+0x88>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68f9      	ldr	r1, [r7, #12]
 800475a:	4618      	mov	r0, r3
 800475c:	f003 f878 	bl	8007850 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	460b      	mov	r3, r1
 8004780:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004782:	7afb      	ldrb	r3, [r7, #11]
 8004784:	f003 0207 	and.w	r2, r3, #7
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2200      	movs	r2, #0
 80047aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2200      	movs	r2, #0
 80047b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047b2:	7afb      	ldrb	r3, [r7, #11]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047be:	7afb      	ldrb	r3, [r7, #11]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6979      	ldr	r1, [r7, #20]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f003 fa2a 	bl	8007c28 <USB_EPStartXfer>
 80047d4:	e005      	b.n	80047e2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6979      	ldr	r1, [r7, #20]
 80047dc:	4618      	mov	r0, r3
 80047de:	f003 fa23 	bl	8007c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	f003 0207 	and.w	r2, r3, #7
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	440b      	add	r3, r1
 800480a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr

0800481a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b086      	sub	sp, #24
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	460b      	mov	r3, r1
 8004828:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800482a:	7afb      	ldrb	r3, [r7, #11]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2200      	movs	r2, #0
 800485e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2201      	movs	r2, #1
 8004864:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004866:	7afb      	ldrb	r3, [r7, #11]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	b2da      	uxtb	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004872:	7afb      	ldrb	r3, [r7, #11]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6979      	ldr	r1, [r7, #20]
 8004882:	4618      	mov	r0, r3
 8004884:	f003 f9d0 	bl	8007c28 <USB_EPStartXfer>
 8004888:	e005      	b.n	8004896 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6979      	ldr	r1, [r7, #20]
 8004890:	4618      	mov	r0, r3
 8004892:	f003 f9c9 	bl	8007c28 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	f003 0207 	and.w	r2, r3, #7
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d901      	bls.n	80048be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e04c      	b.n	8004958 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	da0e      	bge.n	80048e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4413      	add	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	705a      	strb	r2, [r3, #1]
 80048e2:	e00c      	b.n	80048fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4413      	add	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_PCD_EP_SetStall+0x7e>
 800491a:	2302      	movs	r3, #2
 800491c:	e01c      	b.n	8004958 <HAL_PCD_EP_SetStall+0xb8>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68f9      	ldr	r1, [r7, #12]
 800492c:	4618      	mov	r0, r3
 800492e:	f004 ffb3 	bl	8009898 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004932:	78fb      	ldrb	r3, [r7, #3]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	2b00      	cmp	r3, #0
 800493a:	d108      	bne.n	800494e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f005 f8d8 	bl	8009afe <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	f003 020f 	and.w	r2, r3, #15
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	429a      	cmp	r2, r3
 8004978:	d901      	bls.n	800497e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e040      	b.n	8004a00 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800497e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004982:	2b00      	cmp	r3, #0
 8004984:	da0e      	bge.n	80049a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	705a      	strb	r2, [r3, #1]
 80049a2:	e00e      	b.n	80049c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	f003 0207 	and.w	r2, r3, #7
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	4413      	add	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_PCD_EP_ClrStall+0x82>
 80049de:	2302      	movs	r3, #2
 80049e0:	e00e      	b.n	8004a00 <HAL_PCD_EP_ClrStall+0xa0>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f004 ffa1 	bl	8009938 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08e      	sub	sp, #56	; 0x38
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a10:	e2ec      	b.n	8004fec <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a1a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004a28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 8161 	bne.w	8004cf4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d152      	bne.n	8004ae2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4c:	81fb      	strh	r3, [r7, #14]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	89fb      	ldrh	r3, [r7, #14]
 8004a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3328      	adds	r3, #40	; 0x28
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	3302      	adds	r3, #2
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	695a      	ldr	r2, [r3, #20]
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	441a      	add	r2, r3
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f006 fea5 	bl	800b7f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 829b 	beq.w	8004fec <PCD_EP_ISR_Handler+0x5e4>
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f040 8296 	bne.w	8004fec <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	b292      	uxth	r2, r2
 8004ad4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004ae0:	e284      	b.n	8004fec <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004af2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d034      	beq.n	8004b66 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	461a      	mov	r2, r3
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	3306      	adds	r3, #6
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f005 f82f 	bl	8009b9e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	823b      	strh	r3, [r7, #16]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	8a3a      	ldrh	r2, [r7, #16]
 8004b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b5a:	b292      	uxth	r2, r2
 8004b5c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f006 fe1a 	bl	800b798 <HAL_PCD_SetupStageCallback>
 8004b64:	e242      	b.n	8004fec <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b66:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f280 823e 	bge.w	8004fec <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	83bb      	strh	r3, [r7, #28]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	8bba      	ldrh	r2, [r7, #28]
 8004b86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b8a:	b292      	uxth	r2, r2
 8004b8c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3306      	adds	r3, #6
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6812      	ldr	r2, [r2, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d019      	beq.n	8004bf6 <PCD_EP_ISR_Handler+0x1ee>
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d015      	beq.n	8004bf6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	6959      	ldr	r1, [r3, #20]
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f004 ffdf 	bl	8009b9e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	695a      	ldr	r2, [r3, #20]
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	441a      	add	r2, r3
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004bee:	2100      	movs	r1, #0
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f006 fde3 	bl	800b7bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 81f2 	bne.w	8004fec <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d112      	bne.n	8004c56 <PCD_EP_ISR_Handler+0x24e>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	801a      	strh	r2, [r3, #0]
 8004c54:	e02f      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x2ae>
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004c5c:	d813      	bhi.n	8004c86 <PCD_EP_ISR_Handler+0x27e>
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	633b      	str	r3, [r7, #48]	; 0x30
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <PCD_EP_ISR_Handler+0x270>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	3301      	adds	r3, #1
 8004c76:	633b      	str	r3, [r7, #48]	; 0x30
 8004c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	029b      	lsls	r3, r3, #10
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	801a      	strh	r2, [r3, #0]
 8004c84:	e017      	b.n	8004cb6 <PCD_EP_ISR_Handler+0x2ae>
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d102      	bne.n	8004ca0 <PCD_EP_ISR_Handler+0x298>
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	029b      	lsls	r3, r3, #10
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc6:	827b      	strh	r3, [r7, #18]
 8004cc8:	8a7b      	ldrh	r3, [r7, #18]
 8004cca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cce:	827b      	strh	r3, [r7, #18]
 8004cd0:	8a7b      	ldrh	r3, [r7, #18]
 8004cd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cd6:	827b      	strh	r3, [r7, #18]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	8a7b      	ldrh	r3, [r7, #18]
 8004cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	8013      	strh	r3, [r2, #0]
 8004cf2:	e17b      	b.n	8004fec <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d06:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f280 80ea 	bge.w	8004ee4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004d26:	4013      	ands	r3, r2
 8004d28:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d3e:	b292      	uxth	r2, r2
 8004d40:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d42:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	4413      	add	r3, r2
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	7b1b      	ldrb	r3, [r3, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d122      	bne.n	8004da6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	4413      	add	r3, r2
 8004d74:	3306      	adds	r3, #6
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6812      	ldr	r2, [r2, #0]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d88:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8004d8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8087 	beq.w	8004ea0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	6959      	ldr	r1, [r3, #20]
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	88da      	ldrh	r2, [r3, #6]
 8004d9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004da0:	f004 fefd 	bl	8009b9e <USB_ReadPMA>
 8004da4:	e07c      	b.n	8004ea0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	78db      	ldrb	r3, [r3, #3]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d108      	bne.n	8004dc0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004dae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004db0:	461a      	mov	r2, r3
 8004db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f927 	bl	8005008 <HAL_PCD_EP_DB_Receive>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004dbe:	e06f      	b.n	8004ea0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d021      	beq.n	8004e5e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3302      	adds	r3, #2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e42:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004e44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d02a      	beq.n	8004ea0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	6959      	ldr	r1, [r3, #20]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	891a      	ldrh	r2, [r3, #8]
 8004e56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e58:	f004 fea1 	bl	8009b9e <USB_ReadPMA>
 8004e5c:	e020      	b.n	8004ea0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	3306      	adds	r3, #6
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e86:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004e88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	6959      	ldr	r1, [r3, #20]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	895a      	ldrh	r2, [r3, #10]
 8004e9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e9c:	f004 fe7f 	bl	8009b9e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ea6:	441a      	add	r2, r3
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004eb2:	441a      	add	r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <PCD_EP_ISR_Handler+0x4c2>
 8004ec0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d206      	bcs.n	8004ed8 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f006 fc73 	bl	800b7bc <HAL_PCD_DataOutStageCallback>
 8004ed6:	e005      	b.n	8004ee4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f002 fea2 	bl	8007c28 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ee4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d07e      	beq.n	8004fec <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8004eee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	4413      	add	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	4413      	add	r3, r2
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1c:	843b      	strh	r3, [r7, #32]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	8c3b      	ldrh	r3, [r7, #32]
 8004f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	78db      	ldrb	r3, [r3, #3]
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d00c      	beq.n	8004f5c <PCD_EP_ISR_Handler+0x554>
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	78db      	ldrb	r3, [r3, #3]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d146      	bne.n	8004fe0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004f52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d141      	bne.n	8004fe0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	461a      	mov	r2, r3
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4413      	add	r3, r2
 8004f70:	3302      	adds	r3, #2
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f84:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	8bfb      	ldrh	r3, [r7, #30]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d906      	bls.n	8004f9e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	699a      	ldr	r2, [r3, #24]
 8004f94:	8bfb      	ldrh	r3, [r7, #30]
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	619a      	str	r2, [r3, #24]
 8004f9c:	e002      	b.n	8004fa4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f006 fc1d 	bl	800b7f2 <HAL_PCD_DataInStageCallback>
 8004fb8:	e018      	b.n	8004fec <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	8bfb      	ldrh	r3, [r7, #30]
 8004fc0:	441a      	add	r2, r3
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	8bfb      	ldrh	r3, [r7, #30]
 8004fcc:	441a      	add	r2, r3
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f002 fe25 	bl	8007c28 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004fde:	e005      	b.n	8004fec <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004fe0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f91b 	bl	8005222 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	b21b      	sxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f6ff ad0a 	blt.w	8004a12 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3738      	adds	r7, #56	; 0x38
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d07e      	beq.n	800511e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005028:	b29b      	uxth	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	3302      	adds	r3, #2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	6812      	ldr	r2, [r2, #0]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005048:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	8b7b      	ldrh	r3, [r7, #26]
 8005050:	429a      	cmp	r2, r3
 8005052:	d306      	bcc.n	8005062 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	8b7b      	ldrh	r3, [r7, #26]
 800505a:	1ad2      	subs	r2, r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	619a      	str	r2, [r3, #24]
 8005060:	e002      	b.n	8005068 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2200      	movs	r2, #0
 8005066:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d123      	bne.n	80050b8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	833b      	strh	r3, [r7, #24]
 800508c:	8b3b      	ldrh	r3, [r7, #24]
 800508e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005092:	833b      	strh	r3, [r7, #24]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	441a      	add	r2, r3
 80050a2:	8b3b      	ldrh	r3, [r7, #24]
 80050a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d01f      	beq.n	8005102 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050dc:	82fb      	strh	r3, [r7, #22]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	441a      	add	r2, r3
 80050ec:	8afb      	ldrh	r3, [r7, #22]
 80050ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050fe:	b29b      	uxth	r3, r3
 8005100:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005102:	8b7b      	ldrh	r3, [r7, #26]
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8087 	beq.w	8005218 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	6959      	ldr	r1, [r3, #20]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	891a      	ldrh	r2, [r3, #8]
 8005116:	8b7b      	ldrh	r3, [r7, #26]
 8005118:	f004 fd41 	bl	8009b9e <USB_ReadPMA>
 800511c:	e07c      	b.n	8005218 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005126:	b29b      	uxth	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	3306      	adds	r3, #6
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	6812      	ldr	r2, [r2, #0]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005146:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	8b7b      	ldrh	r3, [r7, #26]
 800514e:	429a      	cmp	r2, r3
 8005150:	d306      	bcc.n	8005160 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	8b7b      	ldrh	r3, [r7, #26]
 8005158:	1ad2      	subs	r2, r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	619a      	str	r2, [r3, #24]
 800515e:	e002      	b.n	8005166 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d123      	bne.n	80051b6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	83fb      	strh	r3, [r7, #30]
 800518a:	8bfb      	ldrh	r3, [r7, #30]
 800518c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005190:	83fb      	strh	r3, [r7, #30]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	441a      	add	r2, r3
 80051a0:	8bfb      	ldrh	r3, [r7, #30]
 80051a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d11f      	bne.n	8005200 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051da:	83bb      	strh	r3, [r7, #28]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	8bbb      	ldrh	r3, [r7, #28]
 80051ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005200:	8b7b      	ldrh	r3, [r7, #26]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d008      	beq.n	8005218 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	6959      	ldr	r1, [r3, #20]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	895a      	ldrh	r2, [r3, #10]
 8005212:	8b7b      	ldrh	r3, [r7, #26]
 8005214:	f004 fcc3 	bl	8009b9e <USB_ReadPMA>
    }
  }

  return count;
 8005218:	8b7b      	ldrh	r3, [r7, #26]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b0a2      	sub	sp, #136	; 0x88
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	4613      	mov	r3, r2
 800522e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 81c7 	beq.w	80055ca <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005244:	b29b      	uxth	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	4413      	add	r3, r2
 8005250:	3302      	adds	r3, #2
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005264:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005270:	429a      	cmp	r2, r3
 8005272:	d907      	bls.n	8005284 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	699a      	ldr	r2, [r3, #24]
 8005278:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800527c:	1ad2      	subs	r2, r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	619a      	str	r2, [r3, #24]
 8005282:	e002      	b.n	800528a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 80b9 	bne.w	8005406 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d126      	bne.n	80052ea <HAL_PCD_EP_DB_Transmit+0xc8>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	4413      	add	r3, r2
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	011a      	lsls	r2, r3, #4
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	4413      	add	r3, r2
 80052be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	801a      	strh	r2, [r3, #0]
 80052e8:	e01a      	b.n	8005320 <HAL_PCD_EP_DB_Transmit+0xfe>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d116      	bne.n	8005320 <HAL_PCD_EP_DB_Transmit+0xfe>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005300:	b29b      	uxth	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	4413      	add	r3, r2
 8005308:	633b      	str	r3, [r7, #48]	; 0x30
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	011a      	lsls	r2, r3, #4
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	4413      	add	r3, r2
 8005314:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	2200      	movs	r2, #0
 800531e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	623b      	str	r3, [r7, #32]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	785b      	ldrb	r3, [r3, #1]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d126      	bne.n	800537c <HAL_PCD_EP_DB_Transmit+0x15a>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533c:	b29b      	uxth	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	4413      	add	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	011a      	lsls	r2, r3, #4
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	4413      	add	r3, r2
 8005350:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005360:	b29a      	uxth	r2, r3
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	801a      	strh	r2, [r3, #0]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005374:	b29a      	uxth	r2, r3
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	e017      	b.n	80053ac <HAL_PCD_EP_DB_Transmit+0x18a>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d113      	bne.n	80053ac <HAL_PCD_EP_DB_Transmit+0x18a>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538c:	b29b      	uxth	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	6a3b      	ldr	r3, [r7, #32]
 8005392:	4413      	add	r3, r2
 8005394:	623b      	str	r3, [r7, #32]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	011a      	lsls	r2, r3, #4
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	4413      	add	r3, r2
 80053a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	2200      	movs	r2, #0
 80053aa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	4619      	mov	r1, r3
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f006 fa1d 	bl	800b7f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053b8:	88fb      	ldrh	r3, [r7, #6]
 80053ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 82d4 	beq.w	800596c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	827b      	strh	r3, [r7, #18]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	441a      	add	r2, r3
 80053ee:	8a7b      	ldrh	r3, [r7, #18]
 80053f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005400:	b29b      	uxth	r3, r3
 8005402:	8013      	strh	r3, [r2, #0]
 8005404:	e2b2      	b.n	800596c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d021      	beq.n	8005454 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	441a      	add	r2, r3
 800543c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800544c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005450:	b29b      	uxth	r3, r3
 8005452:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800545a:	2b01      	cmp	r3, #1
 800545c:	f040 8286 	bne.w	800596c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	695a      	ldr	r2, [r3, #20]
 8005464:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005468:	441a      	add	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005476:	441a      	add	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	6a1a      	ldr	r2, [r3, #32]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	429a      	cmp	r2, r3
 8005486:	d309      	bcc.n	800549c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	6a1a      	ldr	r2, [r3, #32]
 8005492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005494:	1ad2      	subs	r2, r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	621a      	str	r2, [r3, #32]
 800549a:	e015      	b.n	80054c8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d107      	bne.n	80054b4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80054a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80054a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054b2:	e009      	b.n	80054c8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2200      	movs	r2, #0
 80054c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d155      	bne.n	800557c <HAL_PCD_EP_DB_Transmit+0x35a>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054de:	b29b      	uxth	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	4413      	add	r3, r2
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	011a      	lsls	r2, r3, #4
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	4413      	add	r3, r2
 80054f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
 80054f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d112      	bne.n	8005524 <HAL_PCD_EP_DB_Transmit+0x302>
 80054fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005508:	b29a      	uxth	r2, r3
 800550a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550c:	801a      	strh	r2, [r3, #0]
 800550e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551c:	b29a      	uxth	r2, r3
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	801a      	strh	r2, [r3, #0]
 8005522:	e047      	b.n	80055b4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005526:	2b3e      	cmp	r3, #62	; 0x3e
 8005528:	d811      	bhi.n	800554e <HAL_PCD_EP_DB_Transmit+0x32c>
 800552a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <HAL_PCD_EP_DB_Transmit+0x31e>
 800553a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800553c:	3301      	adds	r3, #1
 800553e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005542:	b29b      	uxth	r3, r3
 8005544:	029b      	lsls	r3, r3, #10
 8005546:	b29a      	uxth	r2, r3
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e032      	b.n	80055b4 <HAL_PCD_EP_DB_Transmit+0x392>
 800554e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	64bb      	str	r3, [r7, #72]	; 0x48
 8005554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	2b00      	cmp	r3, #0
 800555c:	d102      	bne.n	8005564 <HAL_PCD_EP_DB_Transmit+0x342>
 800555e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005560:	3b01      	subs	r3, #1
 8005562:	64bb      	str	r3, [r7, #72]	; 0x48
 8005564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005566:	b29b      	uxth	r3, r3
 8005568:	029b      	lsls	r3, r3, #10
 800556a:	b29b      	uxth	r3, r3
 800556c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005574:	b29a      	uxth	r2, r3
 8005576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	e01b      	b.n	80055b4 <HAL_PCD_EP_DB_Transmit+0x392>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d117      	bne.n	80055b4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	643b      	str	r3, [r7, #64]	; 0x40
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005592:	b29b      	uxth	r3, r3
 8005594:	461a      	mov	r2, r3
 8005596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005598:	4413      	add	r3, r2
 800559a:	643b      	str	r3, [r7, #64]	; 0x40
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	011a      	lsls	r2, r3, #4
 80055a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a4:	4413      	add	r3, r2
 80055a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	6959      	ldr	r1, [r3, #20]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	891a      	ldrh	r2, [r3, #8]
 80055c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f004 faa6 	bl	8009b14 <USB_WritePMA>
 80055c8:	e1d0      	b.n	800596c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4413      	add	r3, r2
 80055de:	3306      	adds	r3, #6
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055fe:	429a      	cmp	r2, r3
 8005600:	d307      	bcc.n	8005612 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800560a:	1ad2      	subs	r2, r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	619a      	str	r2, [r3, #24]
 8005610:	e002      	b.n	8005618 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2200      	movs	r2, #0
 8005616:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f040 80c4 	bne.w	80057aa <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d126      	bne.n	8005678 <HAL_PCD_EP_DB_Transmit+0x456>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005638:	b29b      	uxth	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563e:	4413      	add	r3, r2
 8005640:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	011a      	lsls	r2, r3, #4
 8005648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800564a:	4413      	add	r3, r2
 800564c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005650:	66bb      	str	r3, [r7, #104]	; 0x68
 8005652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800565c:	b29a      	uxth	r2, r3
 800565e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005670:	b29a      	uxth	r2, r3
 8005672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	e01a      	b.n	80056ae <HAL_PCD_EP_DB_Transmit+0x48c>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	785b      	ldrb	r3, [r3, #1]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d116      	bne.n	80056ae <HAL_PCD_EP_DB_Transmit+0x48c>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	677b      	str	r3, [r7, #116]	; 0x74
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568e:	b29b      	uxth	r3, r3
 8005690:	461a      	mov	r2, r3
 8005692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005694:	4413      	add	r3, r2
 8005696:	677b      	str	r3, [r7, #116]	; 0x74
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	011a      	lsls	r2, r3, #4
 800569e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a0:	4413      	add	r3, r2
 80056a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056a6:	673b      	str	r3, [r7, #112]	; 0x70
 80056a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056aa:	2200      	movs	r2, #0
 80056ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	785b      	ldrb	r3, [r3, #1]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d12f      	bne.n	800571c <HAL_PCD_EP_DB_Transmit+0x4fa>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056d4:	4413      	add	r3, r2
 80056d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	011a      	lsls	r2, r3, #4
 80056e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056e4:	4413      	add	r3, r2
 80056e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005712:	b29a      	uxth	r2, r3
 8005714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	e017      	b.n	800574c <HAL_PCD_EP_DB_Transmit+0x52a>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d113      	bne.n	800574c <HAL_PCD_EP_DB_Transmit+0x52a>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572c:	b29b      	uxth	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005732:	4413      	add	r3, r2
 8005734:	67bb      	str	r3, [r7, #120]	; 0x78
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	011a      	lsls	r2, r3, #4
 800573c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800573e:	4413      	add	r3, r2
 8005740:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005744:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005746:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005748:	2200      	movs	r2, #0
 800574a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	4619      	mov	r1, r3
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f006 f84d 	bl	800b7f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8104 	bne.w	800596c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29b      	uxth	r3, r3
 8005776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	441a      	add	r2, r3
 8005790:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	8013      	strh	r3, [r2, #0]
 80057a8:	e0e0      	b.n	800596c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d121      	bne.n	80057f8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	441a      	add	r2, r3
 80057e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80057e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057fe:	2b01      	cmp	r3, #1
 8005800:	f040 80b4 	bne.w	800596c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	695a      	ldr	r2, [r3, #20]
 8005808:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800580c:	441a      	add	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	69da      	ldr	r2, [r3, #28]
 8005816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800581a:	441a      	add	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	6a1a      	ldr	r2, [r3, #32]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	429a      	cmp	r2, r3
 800582a:	d309      	bcc.n	8005840 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6a1a      	ldr	r2, [r3, #32]
 8005836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	621a      	str	r2, [r3, #32]
 800583e:	e015      	b.n	800586c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d107      	bne.n	8005858 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005848:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800584c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005856:	e009      	b.n	800586c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2200      	movs	r2, #0
 8005862:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	667b      	str	r3, [r7, #100]	; 0x64
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d155      	bne.n	8005926 <HAL_PCD_EP_DB_Transmit+0x704>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588e:	4413      	add	r3, r2
 8005890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	011a      	lsls	r2, r3, #4
 8005898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800589a:	4413      	add	r3, r2
 800589c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80058a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d112      	bne.n	80058ce <HAL_PCD_EP_DB_Transmit+0x6ac>
 80058a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	e044      	b.n	8005958 <HAL_PCD_EP_DB_Transmit+0x736>
 80058ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d0:	2b3e      	cmp	r3, #62	; 0x3e
 80058d2:	d811      	bhi.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80058d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d6:	085b      	lsrs	r3, r3, #1
 80058d8:	657b      	str	r3, [r7, #84]	; 0x54
 80058da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_PCD_EP_DB_Transmit+0x6c8>
 80058e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e6:	3301      	adds	r3, #1
 80058e8:	657b      	str	r3, [r7, #84]	; 0x54
 80058ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	029b      	lsls	r3, r3, #10
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e02f      	b.n	8005958 <HAL_PCD_EP_DB_Transmit+0x736>
 80058f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	657b      	str	r3, [r7, #84]	; 0x54
 80058fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800590a:	3b01      	subs	r3, #1
 800590c:	657b      	str	r3, [r7, #84]	; 0x54
 800590e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005910:	b29b      	uxth	r3, r3
 8005912:	029b      	lsls	r3, r3, #10
 8005914:	b29b      	uxth	r3, r3
 8005916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591e:	b29a      	uxth	r2, r3
 8005920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	e018      	b.n	8005958 <HAL_PCD_EP_DB_Transmit+0x736>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	785b      	ldrb	r3, [r3, #1]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d114      	bne.n	8005958 <HAL_PCD_EP_DB_Transmit+0x736>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005936:	b29b      	uxth	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800593c:	4413      	add	r3, r2
 800593e:	667b      	str	r3, [r7, #100]	; 0x64
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	011a      	lsls	r2, r3, #4
 8005946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005948:	4413      	add	r3, r2
 800594a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800594e:	663b      	str	r3, [r7, #96]	; 0x60
 8005950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005952:	b29a      	uxth	r2, r3
 8005954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005956:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6959      	ldr	r1, [r3, #20]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	895a      	ldrh	r2, [r3, #10]
 8005964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005966:	b29b      	uxth	r3, r3
 8005968:	f004 f8d4 	bl	8009b14 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005986:	823b      	strh	r3, [r7, #16]
 8005988:	8a3b      	ldrh	r3, [r7, #16]
 800598a:	f083 0310 	eor.w	r3, r3, #16
 800598e:	823b      	strh	r3, [r7, #16]
 8005990:	8a3b      	ldrh	r3, [r7, #16]
 8005992:	f083 0320 	eor.w	r3, r3, #32
 8005996:	823b      	strh	r3, [r7, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	441a      	add	r2, r3
 80059a6:	8a3b      	ldrh	r3, [r7, #16]
 80059a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3788      	adds	r7, #136	; 0x88
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b087      	sub	sp, #28
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	817b      	strh	r3, [r7, #10]
 80059d4:	4613      	mov	r3, r2
 80059d6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80059d8:	897b      	ldrh	r3, [r7, #10]
 80059da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00b      	beq.n	80059fc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059e4:	897b      	ldrh	r3, [r7, #10]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	e009      	b.n	8005a10 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059fc:	897a      	ldrh	r2, [r7, #10]
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005a10:	893b      	ldrh	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d107      	bne.n	8005a26 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	80da      	strh	r2, [r3, #6]
 8005a24:	e00b      	b.n	8005a3e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	0c1b      	lsrs	r3, r3, #16
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bc80      	pop	{r7}
 8005a48:	4770      	bx	lr
	...

08005a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e272      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 8087 	beq.w	8005b7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a6c:	4b92      	ldr	r3, [pc, #584]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f003 030c 	and.w	r3, r3, #12
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d00c      	beq.n	8005a92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a78:	4b8f      	ldr	r3, [pc, #572]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d112      	bne.n	8005aaa <HAL_RCC_OscConfig+0x5e>
 8005a84:	4b8c      	ldr	r3, [pc, #560]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a90:	d10b      	bne.n	8005aaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a92:	4b89      	ldr	r3, [pc, #548]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d06c      	beq.n	8005b78 <HAL_RCC_OscConfig+0x12c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d168      	bne.n	8005b78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e24c      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab2:	d106      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x76>
 8005ab4:	4b80      	ldr	r3, [pc, #512]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a7f      	ldr	r2, [pc, #508]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	e02e      	b.n	8005b20 <HAL_RCC_OscConfig+0xd4>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10c      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x98>
 8005aca:	4b7b      	ldr	r3, [pc, #492]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a7a      	ldr	r2, [pc, #488]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	4b78      	ldr	r3, [pc, #480]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a77      	ldr	r2, [pc, #476]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e01d      	b.n	8005b20 <HAL_RCC_OscConfig+0xd4>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aec:	d10c      	bne.n	8005b08 <HAL_RCC_OscConfig+0xbc>
 8005aee:	4b72      	ldr	r3, [pc, #456]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a71      	ldr	r2, [pc, #452]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	4b6f      	ldr	r3, [pc, #444]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a6e      	ldr	r2, [pc, #440]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e00b      	b.n	8005b20 <HAL_RCC_OscConfig+0xd4>
 8005b08:	4b6b      	ldr	r3, [pc, #428]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a6a      	ldr	r2, [pc, #424]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	4b68      	ldr	r3, [pc, #416]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a67      	ldr	r2, [pc, #412]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d013      	beq.n	8005b50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b28:	f7fd ff76 	bl	8003a18 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b30:	f7fd ff72 	bl	8003a18 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b64      	cmp	r3, #100	; 0x64
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e200      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b42:	4b5d      	ldr	r3, [pc, #372]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0xe4>
 8005b4e:	e014      	b.n	8005b7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b50:	f7fd ff62 	bl	8003a18 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b58:	f7fd ff5e 	bl	8003a18 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b64      	cmp	r3, #100	; 0x64
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e1ec      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b6a:	4b53      	ldr	r3, [pc, #332]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f0      	bne.n	8005b58 <HAL_RCC_OscConfig+0x10c>
 8005b76:	e000      	b.n	8005b7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d063      	beq.n	8005c4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b86:	4b4c      	ldr	r3, [pc, #304]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 030c 	and.w	r3, r3, #12
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005b92:	4b49      	ldr	r3, [pc, #292]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d11c      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x18c>
 8005b9e:	4b46      	ldr	r3, [pc, #280]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d116      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005baa:	4b43      	ldr	r3, [pc, #268]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x176>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d001      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e1c0      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc2:	4b3d      	ldr	r3, [pc, #244]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	4939      	ldr	r1, [pc, #228]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bd6:	e03a      	b.n	8005c4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d020      	beq.n	8005c22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005be0:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be6:	f7fd ff17 	bl	8003a18 <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bee:	f7fd ff13 	bl	8003a18 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e1a1      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c00:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f0      	beq.n	8005bee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c0c:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4927      	ldr	r1, [pc, #156]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	600b      	str	r3, [r1, #0]
 8005c20:	e015      	b.n	8005c4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c22:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <HAL_RCC_OscConfig+0x270>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c28:	f7fd fef6 	bl	8003a18 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c30:	f7fd fef2 	bl	8003a18 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e180      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c42:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d03a      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d019      	beq.n	8005c96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c62:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <HAL_RCC_OscConfig+0x274>)
 8005c64:	2201      	movs	r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c68:	f7fd fed6 	bl	8003a18 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c70:	f7fd fed2 	bl	8003a18 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e160      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c82:	4b0d      	ldr	r3, [pc, #52]	; (8005cb8 <HAL_RCC_OscConfig+0x26c>)
 8005c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0f0      	beq.n	8005c70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005c8e:	2001      	movs	r0, #1
 8005c90:	f000 faa6 	bl	80061e0 <RCC_Delay>
 8005c94:	e01c      	b.n	8005cd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c96:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <HAL_RCC_OscConfig+0x274>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c9c:	f7fd febc 	bl	8003a18 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca2:	e00f      	b.n	8005cc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca4:	f7fd feb8 	bl	8003a18 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d908      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e146      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	42420000 	.word	0x42420000
 8005cc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc4:	4b92      	ldr	r3, [pc, #584]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e9      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80a6 	beq.w	8005e2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce2:	4b8b      	ldr	r3, [pc, #556]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10d      	bne.n	8005d0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cee:	4b88      	ldr	r3, [pc, #544]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	4a87      	ldr	r2, [pc, #540]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf8:	61d3      	str	r3, [r2, #28]
 8005cfa:	4b85      	ldr	r3, [pc, #532]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0a:	4b82      	ldr	r3, [pc, #520]	; (8005f14 <HAL_RCC_OscConfig+0x4c8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d118      	bne.n	8005d48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d16:	4b7f      	ldr	r3, [pc, #508]	; (8005f14 <HAL_RCC_OscConfig+0x4c8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a7e      	ldr	r2, [pc, #504]	; (8005f14 <HAL_RCC_OscConfig+0x4c8>)
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d22:	f7fd fe79 	bl	8003a18 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2a:	f7fd fe75 	bl	8003a18 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b64      	cmp	r3, #100	; 0x64
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e103      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3c:	4b75      	ldr	r3, [pc, #468]	; (8005f14 <HAL_RCC_OscConfig+0x4c8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0f0      	beq.n	8005d2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d106      	bne.n	8005d5e <HAL_RCC_OscConfig+0x312>
 8005d50:	4b6f      	ldr	r3, [pc, #444]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	4a6e      	ldr	r2, [pc, #440]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	6213      	str	r3, [r2, #32]
 8005d5c:	e02d      	b.n	8005dba <HAL_RCC_OscConfig+0x36e>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10c      	bne.n	8005d80 <HAL_RCC_OscConfig+0x334>
 8005d66:	4b6a      	ldr	r3, [pc, #424]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	4a69      	ldr	r2, [pc, #420]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005d6c:	f023 0301 	bic.w	r3, r3, #1
 8005d70:	6213      	str	r3, [r2, #32]
 8005d72:	4b67      	ldr	r3, [pc, #412]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	4a66      	ldr	r2, [pc, #408]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	6213      	str	r3, [r2, #32]
 8005d7e:	e01c      	b.n	8005dba <HAL_RCC_OscConfig+0x36e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	d10c      	bne.n	8005da2 <HAL_RCC_OscConfig+0x356>
 8005d88:	4b61      	ldr	r3, [pc, #388]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	4a60      	ldr	r2, [pc, #384]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005d8e:	f043 0304 	orr.w	r3, r3, #4
 8005d92:	6213      	str	r3, [r2, #32]
 8005d94:	4b5e      	ldr	r3, [pc, #376]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	4a5d      	ldr	r2, [pc, #372]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6213      	str	r3, [r2, #32]
 8005da0:	e00b      	b.n	8005dba <HAL_RCC_OscConfig+0x36e>
 8005da2:	4b5b      	ldr	r3, [pc, #364]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	4a5a      	ldr	r2, [pc, #360]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005da8:	f023 0301 	bic.w	r3, r3, #1
 8005dac:	6213      	str	r3, [r2, #32]
 8005dae:	4b58      	ldr	r3, [pc, #352]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	4a57      	ldr	r2, [pc, #348]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005db4:	f023 0304 	bic.w	r3, r3, #4
 8005db8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d015      	beq.n	8005dee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dc2:	f7fd fe29 	bl	8003a18 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc8:	e00a      	b.n	8005de0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dca:	f7fd fe25 	bl	8003a18 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e0b1      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de0:	4b4b      	ldr	r3, [pc, #300]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0ee      	beq.n	8005dca <HAL_RCC_OscConfig+0x37e>
 8005dec:	e014      	b.n	8005e18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dee:	f7fd fe13 	bl	8003a18 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df4:	e00a      	b.n	8005e0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df6:	f7fd fe0f 	bl	8003a18 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e09b      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e0c:	4b40      	ldr	r3, [pc, #256]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1ee      	bne.n	8005df6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d105      	bne.n	8005e2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e1e:	4b3c      	ldr	r3, [pc, #240]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	4a3b      	ldr	r2, [pc, #236]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 8087 	beq.w	8005f42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e34:	4b36      	ldr	r3, [pc, #216]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 030c 	and.w	r3, r3, #12
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d061      	beq.n	8005f04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d146      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e48:	4b33      	ldr	r3, [pc, #204]	; (8005f18 <HAL_RCC_OscConfig+0x4cc>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4e:	f7fd fde3 	bl	8003a18 <HAL_GetTick>
 8005e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e56:	f7fd fddf 	bl	8003a18 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e06d      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005e68:	4b29      	ldr	r3, [pc, #164]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1f0      	bne.n	8005e56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7c:	d108      	bne.n	8005e90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005e7e:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	4921      	ldr	r1, [pc, #132]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e90:	4b1f      	ldr	r3, [pc, #124]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a19      	ldr	r1, [r3, #32]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	430b      	orrs	r3, r1
 8005ea2:	491b      	ldr	r1, [pc, #108]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <HAL_RCC_OscConfig+0x4cc>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eae:	f7fd fdb3 	bl	8003a18 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb6:	f7fd fdaf 	bl	8003a18 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e03d      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ec8:	4b11      	ldr	r3, [pc, #68]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x46a>
 8005ed4:	e035      	b.n	8005f42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <HAL_RCC_OscConfig+0x4cc>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005edc:	f7fd fd9c 	bl	8003a18 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee4:	f7fd fd98 	bl	8003a18 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e026      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ef6:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <HAL_RCC_OscConfig+0x4c4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1f0      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x498>
 8005f02:	e01e      	b.n	8005f42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e019      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
 8005f10:	40021000 	.word	0x40021000
 8005f14:	40007000 	.word	0x40007000
 8005f18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <HAL_RCC_OscConfig+0x500>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d001      	beq.n	8005f42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40021000 	.word	0x40021000

08005f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e0d0      	b.n	8006106 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f64:	4b6a      	ldr	r3, [pc, #424]	; (8006110 <HAL_RCC_ClockConfig+0x1c0>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d910      	bls.n	8005f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f72:	4b67      	ldr	r3, [pc, #412]	; (8006110 <HAL_RCC_ClockConfig+0x1c0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f023 0207 	bic.w	r2, r3, #7
 8005f7a:	4965      	ldr	r1, [pc, #404]	; (8006110 <HAL_RCC_ClockConfig+0x1c0>)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f82:	4b63      	ldr	r3, [pc, #396]	; (8006110 <HAL_RCC_ClockConfig+0x1c0>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e0b8      	b.n	8006106 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d020      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fac:	4b59      	ldr	r3, [pc, #356]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	4a58      	ldr	r2, [pc, #352]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005fb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fc4:	4b53      	ldr	r3, [pc, #332]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	4a52      	ldr	r2, [pc, #328]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8005fca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005fce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fd0:	4b50      	ldr	r3, [pc, #320]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	494d      	ldr	r1, [pc, #308]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d040      	beq.n	8006070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d107      	bne.n	8006006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ff6:	4b47      	ldr	r3, [pc, #284]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d115      	bne.n	800602e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e07f      	b.n	8006106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d107      	bne.n	800601e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800600e:	4b41      	ldr	r3, [pc, #260]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e073      	b.n	8006106 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800601e:	4b3d      	ldr	r3, [pc, #244]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e06b      	b.n	8006106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800602e:	4b39      	ldr	r3, [pc, #228]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f023 0203 	bic.w	r2, r3, #3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	4936      	ldr	r1, [pc, #216]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 800603c:	4313      	orrs	r3, r2
 800603e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006040:	f7fd fcea 	bl	8003a18 <HAL_GetTick>
 8006044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006046:	e00a      	b.n	800605e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006048:	f7fd fce6 	bl	8003a18 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	f241 3288 	movw	r2, #5000	; 0x1388
 8006056:	4293      	cmp	r3, r2
 8006058:	d901      	bls.n	800605e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e053      	b.n	8006106 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605e:	4b2d      	ldr	r3, [pc, #180]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f003 020c 	and.w	r2, r3, #12
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	429a      	cmp	r2, r3
 800606e:	d1eb      	bne.n	8006048 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006070:	4b27      	ldr	r3, [pc, #156]	; (8006110 <HAL_RCC_ClockConfig+0x1c0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d210      	bcs.n	80060a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607e:	4b24      	ldr	r3, [pc, #144]	; (8006110 <HAL_RCC_ClockConfig+0x1c0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f023 0207 	bic.w	r2, r3, #7
 8006086:	4922      	ldr	r1, [pc, #136]	; (8006110 <HAL_RCC_ClockConfig+0x1c0>)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	4313      	orrs	r3, r2
 800608c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800608e:	4b20      	ldr	r3, [pc, #128]	; (8006110 <HAL_RCC_ClockConfig+0x1c0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d001      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e032      	b.n	8006106 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ac:	4b19      	ldr	r3, [pc, #100]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	4916      	ldr	r1, [pc, #88]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80060ca:	4b12      	ldr	r3, [pc, #72]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	490e      	ldr	r1, [pc, #56]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060de:	f000 f821 	bl	8006124 <HAL_RCC_GetSysClockFreq>
 80060e2:	4602      	mov	r2, r0
 80060e4:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <HAL_RCC_ClockConfig+0x1c4>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	091b      	lsrs	r3, r3, #4
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	490a      	ldr	r1, [pc, #40]	; (8006118 <HAL_RCC_ClockConfig+0x1c8>)
 80060f0:	5ccb      	ldrb	r3, [r1, r3]
 80060f2:	fa22 f303 	lsr.w	r3, r2, r3
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <HAL_RCC_ClockConfig+0x1cc>)
 80060f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <HAL_RCC_ClockConfig+0x1d0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fd fc48 	bl	8003994 <HAL_InitTick>

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40022000 	.word	0x40022000
 8006114:	40021000 	.word	0x40021000
 8006118:	0800c758 	.word	0x0800c758
 800611c:	20000230 	.word	0x20000230
 8006120:	20000234 	.word	0x20000234

08006124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006124:	b490      	push	{r4, r7}
 8006126:	b08a      	sub	sp, #40	; 0x28
 8006128:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800612a:	4b29      	ldr	r3, [pc, #164]	; (80061d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800612c:	1d3c      	adds	r4, r7, #4
 800612e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006134:	f240 2301 	movw	r3, #513	; 0x201
 8006138:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	2300      	movs	r3, #0
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800614e:	4b21      	ldr	r3, [pc, #132]	; (80061d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	2b04      	cmp	r3, #4
 800615c:	d002      	beq.n	8006164 <HAL_RCC_GetSysClockFreq+0x40>
 800615e:	2b08      	cmp	r3, #8
 8006160:	d003      	beq.n	800616a <HAL_RCC_GetSysClockFreq+0x46>
 8006162:	e02b      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006164:	4b1c      	ldr	r3, [pc, #112]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006166:	623b      	str	r3, [r7, #32]
      break;
 8006168:	e02b      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	0c9b      	lsrs	r3, r3, #18
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	3328      	adds	r3, #40	; 0x28
 8006174:	443b      	add	r3, r7
 8006176:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800617a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d012      	beq.n	80061ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006186:	4b13      	ldr	r3, [pc, #76]	; (80061d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	0c5b      	lsrs	r3, r3, #17
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	3328      	adds	r3, #40	; 0x28
 8006192:	443b      	add	r3, r7
 8006194:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006198:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4a0e      	ldr	r2, [pc, #56]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800619e:	fb03 f202 	mul.w	r2, r3, r2
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
 80061aa:	e004      	b.n	80061b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4a0b      	ldr	r2, [pc, #44]	; (80061dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	623b      	str	r3, [r7, #32]
      break;
 80061ba:	e002      	b.n	80061c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80061bc:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80061be:	623b      	str	r3, [r7, #32]
      break;
 80061c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061c2:	6a3b      	ldr	r3, [r7, #32]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3728      	adds	r7, #40	; 0x28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc90      	pop	{r4, r7}
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	0800c710 	.word	0x0800c710
 80061d4:	40021000 	.word	0x40021000
 80061d8:	007a1200 	.word	0x007a1200
 80061dc:	003d0900 	.word	0x003d0900

080061e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80061e8:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <RCC_Delay+0x34>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a0a      	ldr	r2, [pc, #40]	; (8006218 <RCC_Delay+0x38>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	0a5b      	lsrs	r3, r3, #9
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80061fc:	bf00      	nop
  }
  while (Delay --);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1e5a      	subs	r2, r3, #1
 8006202:	60fa      	str	r2, [r7, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f9      	bne.n	80061fc <RCC_Delay+0x1c>
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr
 8006214:	20000230 	.word	0x20000230
 8006218:	10624dd3 	.word	0x10624dd3

0800621c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d07d      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006238:	2300      	movs	r3, #0
 800623a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800623c:	4b4f      	ldr	r3, [pc, #316]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10d      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006248:	4b4c      	ldr	r3, [pc, #304]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	4a4b      	ldr	r2, [pc, #300]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800624e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006252:	61d3      	str	r3, [r2, #28]
 8006254:	4b49      	ldr	r3, [pc, #292]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006260:	2301      	movs	r3, #1
 8006262:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006264:	4b46      	ldr	r3, [pc, #280]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d118      	bne.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006270:	4b43      	ldr	r3, [pc, #268]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a42      	ldr	r2, [pc, #264]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800627c:	f7fd fbcc 	bl	8003a18 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006282:	e008      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006284:	f7fd fbc8 	bl	8003a18 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b64      	cmp	r3, #100	; 0x64
 8006290:	d901      	bls.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e06d      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006296:	4b3a      	ldr	r3, [pc, #232]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062a2:	4b36      	ldr	r3, [pc, #216]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d02e      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d027      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062c0:	4b2e      	ldr	r3, [pc, #184]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062ca:	4b2e      	ldr	r3, [pc, #184]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062d0:	4b2c      	ldr	r3, [pc, #176]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062d6:	4a29      	ldr	r2, [pc, #164]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d014      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e6:	f7fd fb97 	bl	8003a18 <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ec:	e00a      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ee:	f7fd fb93 	bl	8003a18 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d901      	bls.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e036      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006304:	4b1d      	ldr	r3, [pc, #116]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0ee      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006310:	4b1a      	ldr	r3, [pc, #104]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4917      	ldr	r1, [pc, #92]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800631e:	4313      	orrs	r3, r2
 8006320:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d105      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006328:	4b14      	ldr	r3, [pc, #80]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	4a13      	ldr	r2, [pc, #76]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800632e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006332:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006340:	4b0e      	ldr	r3, [pc, #56]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	490b      	ldr	r1, [pc, #44]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800634e:	4313      	orrs	r3, r2
 8006350:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	2b00      	cmp	r3, #0
 800635c:	d008      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800635e:	4b07      	ldr	r3, [pc, #28]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	4904      	ldr	r1, [pc, #16]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800636c:	4313      	orrs	r3, r2
 800636e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40021000 	.word	0x40021000
 8006380:	40007000 	.word	0x40007000
 8006384:	42420440 	.word	0x42420440

08006388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e076      	b.n	8006488 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d108      	bne.n	80063b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063aa:	d009      	beq.n	80063c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	61da      	str	r2, [r3, #28]
 80063b2:	e005      	b.n	80063c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d106      	bne.n	80063e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fa ff96 	bl	800130c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006444:	ea42 0103 	orr.w	r1, r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	0c1a      	lsrs	r2, r3, #16
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f002 0204 	and.w	r2, r2, #4
 8006466:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69da      	ldr	r2, [r3, #28]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006476:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b088      	sub	sp, #32
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_SPI_Transmit+0x22>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e126      	b.n	8006700 <HAL_SPI_Transmit+0x270>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ba:	f7fd faad 	bl	8003a18 <HAL_GetTick>
 80064be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d002      	beq.n	80064d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064d0:	2302      	movs	r3, #2
 80064d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064d4:	e10b      	b.n	80066ee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <HAL_SPI_Transmit+0x52>
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d102      	bne.n	80064e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064e6:	e102      	b.n	80066ee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2203      	movs	r2, #3
 80064ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	88fa      	ldrh	r2, [r7, #6]
 8006500:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800652e:	d10f      	bne.n	8006550 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800653e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800654e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d007      	beq.n	800656e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800656c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006576:	d14b      	bne.n	8006610 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_SPI_Transmit+0xf6>
 8006580:	8afb      	ldrh	r3, [r7, #22]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d13e      	bne.n	8006604 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	881a      	ldrh	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	1c9a      	adds	r2, r3, #2
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065aa:	e02b      	b.n	8006604 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d112      	bne.n	80065e0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065be:	881a      	ldrh	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ca:	1c9a      	adds	r2, r3, #2
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80065de:	e011      	b.n	8006604 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065e0:	f7fd fa1a 	bl	8003a18 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d803      	bhi.n	80065f8 <HAL_SPI_Transmit+0x168>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065f6:	d102      	bne.n	80065fe <HAL_SPI_Transmit+0x16e>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d102      	bne.n	8006604 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006602:	e074      	b.n	80066ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1ce      	bne.n	80065ac <HAL_SPI_Transmit+0x11c>
 800660e:	e04c      	b.n	80066aa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <HAL_SPI_Transmit+0x18e>
 8006618:	8afb      	ldrh	r3, [r7, #22]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d140      	bne.n	80066a0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006644:	e02c      	b.n	80066a0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b02      	cmp	r3, #2
 8006652:	d113      	bne.n	800667c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	7812      	ldrb	r2, [r2, #0]
 8006660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006670:	b29b      	uxth	r3, r3
 8006672:	3b01      	subs	r3, #1
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	86da      	strh	r2, [r3, #54]	; 0x36
 800667a:	e011      	b.n	80066a0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800667c:	f7fd f9cc 	bl	8003a18 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d803      	bhi.n	8006694 <HAL_SPI_Transmit+0x204>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006692:	d102      	bne.n	800669a <HAL_SPI_Transmit+0x20a>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800669e:	e026      	b.n	80066ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1cd      	bne.n	8006646 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f8b2 	bl	8006818 <SPI_EndRxTxTransaction>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2220      	movs	r2, #32
 80066be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	613b      	str	r3, [r7, #16]
 80066dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e000      	b.n	80066ee <HAL_SPI_Transmit+0x25e>
  }

error:
 80066ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3720      	adds	r7, #32
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	4613      	mov	r3, r2
 8006716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006718:	f7fd f97e 	bl	8003a18 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	4413      	add	r3, r2
 8006726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006728:	f7fd f976 	bl	8003a18 <HAL_GetTick>
 800672c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800672e:	4b39      	ldr	r3, [pc, #228]	; (8006814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	015b      	lsls	r3, r3, #5
 8006734:	0d1b      	lsrs	r3, r3, #20
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800673e:	e054      	b.n	80067ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006746:	d050      	beq.n	80067ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006748:	f7fd f966 	bl	8003a18 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	429a      	cmp	r2, r3
 8006756:	d902      	bls.n	800675e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d13d      	bne.n	80067da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800676c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006776:	d111      	bne.n	800679c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006780:	d004      	beq.n	800678c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678a:	d107      	bne.n	800679c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800679a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a4:	d10f      	bne.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e017      	b.n	800680a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	4013      	ands	r3, r2
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	bf0c      	ite	eq
 80067fa:	2301      	moveq	r3, #1
 80067fc:	2300      	movne	r3, #0
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	461a      	mov	r2, r3
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	429a      	cmp	r2, r3
 8006806:	d19b      	bne.n	8006740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000230 	.word	0x20000230

08006818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2200      	movs	r2, #0
 800682c:	2180      	movs	r1, #128	; 0x80
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff ff6a 	bl	8006708 <SPI_WaitFlagStateUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d007      	beq.n	800684a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683e:	f043 0220 	orr.w	r2, r3, #32
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e000      	b.n	800684c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e041      	b.n	80068ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fa fd84 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3304      	adds	r3, #4
 8006890:	4619      	mov	r1, r3
 8006892:	4610      	mov	r0, r2
 8006894:	f000 fa9e 	bl	8006dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	d001      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e03a      	b.n	8006982 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0201 	orr.w	r2, r2, #1
 8006922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a18      	ldr	r2, [pc, #96]	; (800698c <HAL_TIM_Base_Start_IT+0x98>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00e      	beq.n	800694c <HAL_TIM_Base_Start_IT+0x58>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006936:	d009      	beq.n	800694c <HAL_TIM_Base_Start_IT+0x58>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a14      	ldr	r2, [pc, #80]	; (8006990 <HAL_TIM_Base_Start_IT+0x9c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d004      	beq.n	800694c <HAL_TIM_Base_Start_IT+0x58>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a13      	ldr	r2, [pc, #76]	; (8006994 <HAL_TIM_Base_Start_IT+0xa0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d111      	bne.n	8006970 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b06      	cmp	r3, #6
 800695c:	d010      	beq.n	8006980 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0201 	orr.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696e:	e007      	b.n	8006980 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3714      	adds	r7, #20
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr
 800698c:	40012c00 	.word	0x40012c00
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800

08006998 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0201 	bic.w	r2, r2, #1
 80069ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6a1a      	ldr	r2, [r3, #32]
 80069b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80069ba:	4013      	ands	r3, r2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10f      	bne.n	80069e0 <HAL_TIM_Base_Stop_IT+0x48>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6a1a      	ldr	r2, [r3, #32]
 80069c6:	f240 4344 	movw	r3, #1092	; 0x444
 80069ca:	4013      	ands	r3, r2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d107      	bne.n	80069e0 <HAL_TIM_Base_Stop_IT+0x48>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d122      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d11b      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0202 	mvn.w	r2, #2
 8006a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9b1 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006a3c:	e005      	b.n	8006a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9a4 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f9b3 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d122      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d11b      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0204 	mvn.w	r2, #4
 8006a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f987 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006a90:	e005      	b.n	8006a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f97a 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f989 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d122      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d11b      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0208 	mvn.w	r2, #8
 8006ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2204      	movs	r2, #4
 8006ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f95d 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006ae4:	e005      	b.n	8006af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f950 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f95f 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0310 	and.w	r3, r3, #16
 8006b02:	2b10      	cmp	r3, #16
 8006b04:	d122      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0310 	and.w	r3, r3, #16
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d11b      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0210 	mvn.w	r2, #16
 8006b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2208      	movs	r2, #8
 8006b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f933 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006b38:	e005      	b.n	8006b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f926 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f935 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d10e      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d107      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0201 	mvn.w	r2, #1
 8006b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7f9 fbc4 	bl	8000300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	2b80      	cmp	r3, #128	; 0x80
 8006b84:	d10e      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b90:	2b80      	cmp	r3, #128	; 0x80
 8006b92:	d107      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa77 	bl	8007092 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d10e      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d107      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f8f9 	bl	8006dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d10e      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d107      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f06f 0220 	mvn.w	r2, #32
 8006bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa42 	bl	8007080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_TIM_ConfigClockSource+0x18>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e0b3      	b.n	8006d84 <HAL_TIM_ConfigClockSource+0x180>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c54:	d03e      	beq.n	8006cd4 <HAL_TIM_ConfigClockSource+0xd0>
 8006c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5a:	f200 8087 	bhi.w	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c62:	f000 8085 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x16c>
 8006c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6a:	d87f      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c6c:	2b70      	cmp	r3, #112	; 0x70
 8006c6e:	d01a      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0xa2>
 8006c70:	2b70      	cmp	r3, #112	; 0x70
 8006c72:	d87b      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c74:	2b60      	cmp	r3, #96	; 0x60
 8006c76:	d050      	beq.n	8006d1a <HAL_TIM_ConfigClockSource+0x116>
 8006c78:	2b60      	cmp	r3, #96	; 0x60
 8006c7a:	d877      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c7c:	2b50      	cmp	r3, #80	; 0x50
 8006c7e:	d03c      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0xf6>
 8006c80:	2b50      	cmp	r3, #80	; 0x50
 8006c82:	d873      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d058      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0x136>
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d86f      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c8c:	2b30      	cmp	r3, #48	; 0x30
 8006c8e:	d064      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x156>
 8006c90:	2b30      	cmp	r3, #48	; 0x30
 8006c92:	d86b      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	d060      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x156>
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	d867      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d05c      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x156>
 8006ca0:	2b10      	cmp	r3, #16
 8006ca2:	d05a      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ca4:	e062      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6899      	ldr	r1, [r3, #8]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f000 f966 	bl	8006f86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	609a      	str	r2, [r3, #8]
      break;
 8006cd2:	e04e      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	6899      	ldr	r1, [r3, #8]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f000 f94f 	bl	8006f86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cf6:	609a      	str	r2, [r3, #8]
      break;
 8006cf8:	e03b      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6859      	ldr	r1, [r3, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f000 f8c6 	bl	8006e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2150      	movs	r1, #80	; 0x50
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 f91d 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006d18:	e02b      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	6859      	ldr	r1, [r3, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f000 f8e4 	bl	8006ef4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2160      	movs	r1, #96	; 0x60
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 f90d 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006d38:	e01b      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6859      	ldr	r1, [r3, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	461a      	mov	r2, r3
 8006d48:	f000 f8a6 	bl	8006e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2140      	movs	r1, #64	; 0x40
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 f8fd 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006d58:	e00b      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f000 f8f4 	bl	8006f52 <TIM_ITRx_SetConfig>
        break;
 8006d6a:	e002      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006d70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <TIM_Base_SetConfig+0xb8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_Base_SetConfig+0x30>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df2:	d007      	beq.n	8006e04 <TIM_Base_SetConfig+0x30>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a26      	ldr	r2, [pc, #152]	; (8006e90 <TIM_Base_SetConfig+0xbc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_Base_SetConfig+0x30>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a25      	ldr	r2, [pc, #148]	; (8006e94 <TIM_Base_SetConfig+0xc0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d108      	bne.n	8006e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a1c      	ldr	r2, [pc, #112]	; (8006e8c <TIM_Base_SetConfig+0xb8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00b      	beq.n	8006e36 <TIM_Base_SetConfig+0x62>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e24:	d007      	beq.n	8006e36 <TIM_Base_SetConfig+0x62>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a19      	ldr	r2, [pc, #100]	; (8006e90 <TIM_Base_SetConfig+0xbc>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <TIM_Base_SetConfig+0x62>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a18      	ldr	r2, [pc, #96]	; (8006e94 <TIM_Base_SetConfig+0xc0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d108      	bne.n	8006e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a07      	ldr	r2, [pc, #28]	; (8006e8c <TIM_Base_SetConfig+0xb8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d103      	bne.n	8006e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	615a      	str	r2, [r3, #20]
}
 8006e82:	bf00      	nop
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800

08006e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0201 	bic.w	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f023 030a 	bic.w	r3, r3, #10
 8006ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr

08006ef4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	f023 0210 	bic.w	r2, r3, #16
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	031b      	lsls	r3, r3, #12
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f043 0307 	orr.w	r3, r3, #7
 8006f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	609a      	str	r2, [r3, #8]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr

08006f86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b087      	sub	sp, #28
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
 8006f92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	021a      	lsls	r2, r3, #8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	609a      	str	r2, [r3, #8]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e046      	b.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a16      	ldr	r2, [pc, #88]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007028:	d009      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a12      	ldr	r2, [pc, #72]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a10      	ldr	r2, [pc, #64]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d10c      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4313      	orrs	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40000400 	.word	0x40000400
 800707c:	40000800 	.word	0x40000800

08007080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr

08007092 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	bc80      	pop	{r7}
 80070a2:	4770      	bx	lr

080070a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070a4:	b084      	sub	sp, #16
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	f107 0014 	add.w	r0, r7, #20
 80070b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	b004      	add	sp, #16
 80070c2:	4770      	bx	lr

080070c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80070d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	b29a      	uxth	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bc80      	pop	{r7}
 80070ee:	4770      	bx	lr

080070f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070f8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80070fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	b29b      	uxth	r3, r3
 800710a:	43db      	mvns	r3, r3
 800710c:	b29b      	uxth	r3, r3
 800710e:	4013      	ands	r3, r2
 8007110:	b29a      	uxth	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr

08007124 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr

0800713c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800713c:	b084      	sub	sp, #16
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	f107 0014 	add.w	r0, r7, #20
 800714a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	bc80      	pop	{r7}
 8007178:	b004      	add	sp, #16
 800717a:	4770      	bx	lr

0800717c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800717c:	b480      	push	{r7}
 800717e:	b09b      	sub	sp, #108	; 0x6c
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800719e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	78db      	ldrb	r3, [r3, #3]
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d81f      	bhi.n	80071ee <USB_ActivateEndpoint+0x72>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <USB_ActivateEndpoint+0x38>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071c5 	.word	0x080071c5
 80071b8:	080071e1 	.word	0x080071e1
 80071bc:	080071f7 	.word	0x080071f7
 80071c0:	080071d3 	.word	0x080071d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80071c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80071c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80071d0:	e012      	b.n	80071f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80071d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80071d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80071da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80071de:	e00b      	b.n	80071f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80071e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80071e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071e8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80071ec:	e004      	b.n	80071f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80071f4:	e000      	b.n	80071f8 <USB_ActivateEndpoint+0x7c>
      break;
 80071f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	441a      	add	r2, r3
 8007202:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800720e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007216:	b29b      	uxth	r3, r3
 8007218:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	b29b      	uxth	r3, r3
 8007228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800722c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007230:	b29a      	uxth	r2, r3
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	b29b      	uxth	r3, r3
 8007238:	4313      	orrs	r3, r2
 800723a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	441a      	add	r2, r3
 8007248:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800724c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725c:	b29b      	uxth	r3, r3
 800725e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	7b1b      	ldrb	r3, [r3, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f040 8149 	bne.w	80074fc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 8084 	beq.w	800737c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727e:	b29b      	uxth	r3, r3
 8007280:	461a      	mov	r2, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	011a      	lsls	r2, r3, #4
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	88db      	ldrh	r3, [r3, #6]
 800729c:	085b      	lsrs	r3, r3, #1
 800729e:	b29b      	uxth	r3, r3
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	81fb      	strh	r3, [r7, #14]
 80072b6:	89fb      	ldrh	r3, [r7, #14]
 80072b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01b      	beq.n	80072f8 <USB_ActivateEndpoint+0x17c>
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	81bb      	strh	r3, [r7, #12]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	441a      	add	r2, r3
 80072e2:	89bb      	ldrh	r3, [r7, #12]
 80072e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	78db      	ldrb	r3, [r3, #3]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d020      	beq.n	8007342 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007316:	813b      	strh	r3, [r7, #8]
 8007318:	893b      	ldrh	r3, [r7, #8]
 800731a:	f083 0320 	eor.w	r3, r3, #32
 800731e:	813b      	strh	r3, [r7, #8]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	441a      	add	r2, r3
 800732a:	893b      	ldrh	r3, [r7, #8]
 800732c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007330:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007334:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733c:	b29b      	uxth	r3, r3
 800733e:	8013      	strh	r3, [r2, #0]
 8007340:	e27f      	b.n	8007842 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007358:	817b      	strh	r3, [r7, #10]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	441a      	add	r2, r3
 8007364:	897b      	ldrh	r3, [r7, #10]
 8007366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800736a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800736e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007376:	b29b      	uxth	r3, r3
 8007378:	8013      	strh	r3, [r2, #0]
 800737a:	e262      	b.n	8007842 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	4413      	add	r3, r2
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	011a      	lsls	r2, r3, #4
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	4413      	add	r3, r2
 800739a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	88db      	ldrh	r3, [r3, #6]
 80073a4:	085b      	lsrs	r3, r3, #1
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	461a      	mov	r2, r3
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	4413      	add	r3, r2
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	011a      	lsls	r2, r3, #4
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	4413      	add	r3, r2
 80073ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073d2:	623b      	str	r3, [r7, #32]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d112      	bne.n	8007402 <USB_ActivateEndpoint+0x286>
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	801a      	strh	r2, [r3, #0]
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	e02f      	b.n	8007462 <USB_ActivateEndpoint+0x2e6>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b3e      	cmp	r3, #62	; 0x3e
 8007408:	d813      	bhi.n	8007432 <USB_ActivateEndpoint+0x2b6>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	085b      	lsrs	r3, r3, #1
 8007410:	663b      	str	r3, [r7, #96]	; 0x60
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <USB_ActivateEndpoint+0x2a8>
 800741e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007420:	3301      	adds	r3, #1
 8007422:	663b      	str	r3, [r7, #96]	; 0x60
 8007424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007426:	b29b      	uxth	r3, r3
 8007428:	029b      	lsls	r3, r3, #10
 800742a:	b29a      	uxth	r2, r3
 800742c:	6a3b      	ldr	r3, [r7, #32]
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e017      	b.n	8007462 <USB_ActivateEndpoint+0x2e6>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	663b      	str	r3, [r7, #96]	; 0x60
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <USB_ActivateEndpoint+0x2d0>
 8007446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007448:	3b01      	subs	r3, #1
 800744a:	663b      	str	r3, [r7, #96]	; 0x60
 800744c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800744e:	b29b      	uxth	r3, r3
 8007450:	029b      	lsls	r3, r3, #10
 8007452:	b29b      	uxth	r3, r3
 8007454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745c:	b29a      	uxth	r2, r3
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	83fb      	strh	r3, [r7, #30]
 8007470:	8bfb      	ldrh	r3, [r7, #30]
 8007472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01b      	beq.n	80074b2 <USB_ActivateEndpoint+0x336>
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	b29b      	uxth	r3, r3
 8007488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007490:	83bb      	strh	r3, [r7, #28]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	441a      	add	r2, r3
 800749c:	8bbb      	ldrh	r3, [r7, #28]
 800749e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29b      	uxth	r3, r3
 80074c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c8:	837b      	strh	r3, [r7, #26]
 80074ca:	8b7b      	ldrh	r3, [r7, #26]
 80074cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074d0:	837b      	strh	r3, [r7, #26]
 80074d2:	8b7b      	ldrh	r3, [r7, #26]
 80074d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074d8:	837b      	strh	r3, [r7, #26]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	441a      	add	r2, r3
 80074e4:	8b7b      	ldrh	r3, [r7, #26]
 80074e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	8013      	strh	r3, [r2, #0]
 80074fa:	e1a2      	b.n	8007842 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	b29b      	uxth	r3, r3
 800750a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800750e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007512:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007534:	b29b      	uxth	r3, r3
 8007536:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	65bb      	str	r3, [r7, #88]	; 0x58
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007542:	b29b      	uxth	r3, r3
 8007544:	461a      	mov	r2, r3
 8007546:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007548:	4413      	add	r3, r2
 800754a:	65bb      	str	r3, [r7, #88]	; 0x58
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	011a      	lsls	r2, r3, #4
 8007552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007554:	4413      	add	r3, r2
 8007556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800755a:	657b      	str	r3, [r7, #84]	; 0x54
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	891b      	ldrh	r3, [r3, #8]
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	b29b      	uxth	r3, r3
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	653b      	str	r3, [r7, #80]	; 0x50
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007576:	b29b      	uxth	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800757c:	4413      	add	r3, r2
 800757e:	653b      	str	r3, [r7, #80]	; 0x50
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	011a      	lsls	r2, r3, #4
 8007586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007588:	4413      	add	r3, r2
 800758a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800758e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	895b      	ldrh	r3, [r3, #10]
 8007594:	085b      	lsrs	r3, r3, #1
 8007596:	b29b      	uxth	r3, r3
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 8091 	bne.w	80076cc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80075b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80075ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d01b      	beq.n	80075fa <USB_ActivateEndpoint+0x47e>
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	441a      	add	r2, r3
 80075e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80075e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	873b      	strh	r3, [r7, #56]	; 0x38
 8007608:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800760a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d01b      	beq.n	800764a <USB_ActivateEndpoint+0x4ce>
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007628:	86fb      	strh	r3, [r7, #54]	; 0x36
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	441a      	add	r2, r3
 8007634:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800763a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007642:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007646:	b29b      	uxth	r3, r3
 8007648:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800765c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007660:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007662:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007664:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007668:	86bb      	strh	r3, [r7, #52]	; 0x34
 800766a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800766c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007670:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	441a      	add	r2, r3
 800767c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800767e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768e:	b29b      	uxth	r3, r3
 8007690:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	441a      	add	r2, r3
 80076b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80076b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	8013      	strh	r3, [r2, #0]
 80076ca:	e0ba      	b.n	8007842 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80076dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80076e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01d      	beq.n	8007724 <USB_ActivateEndpoint+0x5a8>
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	441a      	add	r2, r3
 800770c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	b29b      	uxth	r3, r3
 8007722:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	881b      	ldrh	r3, [r3, #0]
 8007730:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007734:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01d      	beq.n	800777c <USB_ActivateEndpoint+0x600>
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007756:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	441a      	add	r2, r3
 8007764:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800776c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007778:	b29b      	uxth	r3, r3
 800777a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	78db      	ldrb	r3, [r3, #3]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d024      	beq.n	80077ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	b29b      	uxth	r3, r3
 8007792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800779a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800779e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80077a2:	f083 0320 	eor.w	r3, r3, #32
 80077a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	441a      	add	r2, r3
 80077b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80077b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	8013      	strh	r3, [r2, #0]
 80077cc:	e01d      	b.n	800780a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	441a      	add	r2, r3
 80077f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80077f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007806:	b29b      	uxth	r3, r3
 8007808:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800781c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007820:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	441a      	add	r2, r3
 800782c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800782e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783e:	b29b      	uxth	r3, r3
 8007840:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8007842:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007846:	4618      	mov	r0, r3
 8007848:	376c      	adds	r7, #108	; 0x6c
 800784a:	46bd      	mov	sp, r7
 800784c:	bc80      	pop	{r7}
 800784e:	4770      	bx	lr

08007850 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007850:	b480      	push	{r7}
 8007852:	b08d      	sub	sp, #52	; 0x34
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	7b1b      	ldrb	r3, [r3, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	f040 808e 	bne.w	8007980 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d044      	beq.n	80078f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	81bb      	strh	r3, [r7, #12]
 800787a:	89bb      	ldrh	r3, [r7, #12]
 800787c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <USB_DeactivateEndpoint+0x6c>
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	b29b      	uxth	r3, r3
 8007892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800789a:	817b      	strh	r3, [r7, #10]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	441a      	add	r2, r3
 80078a6:	897b      	ldrh	r3, [r7, #10]
 80078a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078d2:	813b      	strh	r3, [r7, #8]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	441a      	add	r2, r3
 80078de:	893b      	ldrh	r3, [r7, #8]
 80078e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	8013      	strh	r3, [r2, #0]
 80078f4:	e192      	b.n	8007c1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	827b      	strh	r3, [r7, #18]
 8007904:	8a7b      	ldrh	r3, [r7, #18]
 8007906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01b      	beq.n	8007946 <USB_DeactivateEndpoint+0xf6>
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	881b      	ldrh	r3, [r3, #0]
 800791a:	b29b      	uxth	r3, r3
 800791c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007924:	823b      	strh	r3, [r7, #16]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	441a      	add	r2, r3
 8007930:	8a3b      	ldrh	r3, [r7, #16]
 8007932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800793a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800793e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007942:	b29b      	uxth	r3, r3
 8007944:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795c:	81fb      	strh	r3, [r7, #14]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	441a      	add	r2, r3
 8007968:	89fb      	ldrh	r3, [r7, #14]
 800796a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800796e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800797a:	b29b      	uxth	r3, r3
 800797c:	8013      	strh	r3, [r2, #0]
 800797e:	e14d      	b.n	8007c1c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 80a5 	bne.w	8007ad4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	843b      	strh	r3, [r7, #32]
 8007998:	8c3b      	ldrh	r3, [r7, #32]
 800799a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01b      	beq.n	80079da <USB_DeactivateEndpoint+0x18a>
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	881b      	ldrh	r3, [r3, #0]
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079b8:	83fb      	strh	r3, [r7, #30]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	441a      	add	r2, r3
 80079c4:	8bfb      	ldrh	r3, [r7, #30]
 80079c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	83bb      	strh	r3, [r7, #28]
 80079e8:	8bbb      	ldrh	r3, [r7, #28]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01b      	beq.n	8007a2a <USB_DeactivateEndpoint+0x1da>
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a08:	837b      	strh	r3, [r7, #26]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	441a      	add	r2, r3
 8007a14:	8b7b      	ldrh	r3, [r7, #26]
 8007a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a40:	833b      	strh	r3, [r7, #24]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	441a      	add	r2, r3
 8007a4c:	8b3b      	ldrh	r3, [r7, #24]
 8007a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a78:	82fb      	strh	r3, [r7, #22]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	441a      	add	r2, r3
 8007a84:	8afb      	ldrh	r3, [r7, #22]
 8007a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab0:	82bb      	strh	r3, [r7, #20]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	441a      	add	r2, r3
 8007abc:	8abb      	ldrh	r3, [r7, #20]
 8007abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	8013      	strh	r3, [r2, #0]
 8007ad2:	e0a3      	b.n	8007c1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d01b      	beq.n	8007b24 <USB_DeactivateEndpoint+0x2d4>
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	441a      	add	r2, r3
 8007b0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007b32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01b      	beq.n	8007b74 <USB_DeactivateEndpoint+0x324>
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b52:	853b      	strh	r3, [r7, #40]	; 0x28
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	441a      	add	r2, r3
 8007b5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	441a      	add	r2, r3
 8007bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfa:	847b      	strh	r3, [r7, #34]	; 0x22
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	441a      	add	r2, r3
 8007c06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3734      	adds	r7, #52	; 0x34
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b0cc      	sub	sp, #304	; 0x130
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c36:	6018      	str	r0, [r3, #0]
 8007c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c40:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	785b      	ldrb	r3, [r3, #1]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	f041 817d 	bne.w	8008f4e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	699a      	ldr	r2, [r3, #24]
 8007c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d908      	bls.n	8007c82 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007c80:	e007      	b.n	8007c92 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	7b1b      	ldrb	r3, [r3, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d152      	bne.n	8007d48 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6959      	ldr	r1, [r3, #20]
 8007cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	88da      	ldrh	r2, [r3, #6]
 8007cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007cc4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007cc8:	6800      	ldr	r0, [r0, #0]
 8007cca:	f001 ff23 	bl	8009b14 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007cd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cda:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007cde:	6812      	ldr	r2, [r2, #0]
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007cfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d00:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007d04:	6812      	ldr	r2, [r2, #0]
 8007d06:	440a      	add	r2, r1
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	011a      	lsls	r2, r3, #4
 8007d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4413      	add	r3, r2
 8007d24:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	801a      	strh	r2, [r3, #0]
 8007d44:	f001 b8b5 	b.w	8008eb2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	78db      	ldrb	r3, [r3, #3]
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	f040 84c6 	bne.w	80086e6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6a1a      	ldr	r2, [r3, #32]
 8007d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	f240 8443 	bls.w	80085fe <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	441a      	add	r2, r3
 8007dbc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dc8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6a1a      	ldr	r2, [r3, #32]
 8007de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de4:	1ad2      	subs	r2, r2, r3
 8007de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 823e 	beq.w	8008296 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e1e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007e22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e26:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007e2a:	6812      	ldr	r2, [r2, #0]
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f040 809a 	bne.w	8007f74 <USB_EPStartXfer+0x34c>
 8007e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e4c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007e50:	6812      	ldr	r2, [r2, #0]
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	4619      	mov	r1, r3
 8007e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e72:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	440a      	add	r2, r1
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	011a      	lsls	r2, r3, #4
 8007e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4413      	add	r3, r2
 8007e96:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d122      	bne.n	8007ef2 <USB_EPStartXfer+0x2ca>
 8007eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	801a      	strh	r2, [r3, #0]
 8007ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	801a      	strh	r2, [r3, #0]
 8007ef0:	e079      	b.n	8007fe6 <USB_EPStartXfer+0x3be>
 8007ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ef8:	d81b      	bhi.n	8007f32 <USB_EPStartXfer+0x30a>
 8007efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efe:	085b      	lsrs	r3, r3, #1
 8007f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <USB_EPStartXfer+0x2f2>
 8007f10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f14:	3301      	adds	r3, #1
 8007f16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	029b      	lsls	r3, r3, #10
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	801a      	strh	r2, [r3, #0]
 8007f30:	e059      	b.n	8007fe6 <USB_EPStartXfer+0x3be>
 8007f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <USB_EPStartXfer+0x32a>
 8007f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007f52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	029b      	lsls	r3, r3, #10
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	801a      	strh	r2, [r3, #0]
 8007f72:	e038      	b.n	8007fe6 <USB_EPStartXfer+0x3be>
 8007f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d130      	bne.n	8007fe6 <USB_EPStartXfer+0x3be>
 8007f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	4619      	mov	r1, r3
 8007f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007f9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fa2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007fa6:	6812      	ldr	r2, [r2, #0]
 8007fa8:	440a      	add	r2, r1
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	011a      	lsls	r2, r3, #4
 8007fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fbe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	895b      	ldrh	r3, [r3, #10]
 8007ff2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6959      	ldr	r1, [r3, #20]
 8008002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008006:	b29b      	uxth	r3, r3
 8008008:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800800c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008010:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008014:	6800      	ldr	r0, [r0, #0]
 8008016:	f001 fd7d 	bl	8009b14 <USB_WritePMA>
            ep->xfer_buff += len;
 800801a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695a      	ldr	r2, [r3, #20]
 8008026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800802a:	441a      	add	r2, r3
 800802c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6a1a      	ldr	r2, [r3, #32]
 8008044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	429a      	cmp	r2, r3
 8008052:	d90f      	bls.n	8008074 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8008054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6a1a      	ldr	r2, [r3, #32]
 8008060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008064:	1ad2      	subs	r2, r2, r3
 8008066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	621a      	str	r2, [r3, #32]
 8008072:	e00e      	b.n	8008092 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8008074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008088:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2200      	movs	r2, #0
 8008090:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	785b      	ldrb	r3, [r3, #1]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f040 809a 	bne.w	80081d8 <USB_EPStartXfer+0x5b0>
 80080a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80080ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080b0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80080b4:	6812      	ldr	r2, [r2, #0]
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	4619      	mov	r1, r3
 80080ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80080d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080d6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	440a      	add	r2, r1
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	011a      	lsls	r2, r3, #4
 80080ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4413      	add	r3, r2
 80080fa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80080fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008102:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008106:	601a      	str	r2, [r3, #0]
 8008108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810c:	2b00      	cmp	r3, #0
 800810e:	d122      	bne.n	8008156 <USB_EPStartXfer+0x52e>
 8008110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008114:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008122:	b29a      	uxth	r2, r3
 8008124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008128:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	801a      	strh	r2, [r3, #0]
 8008130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008134:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	b29b      	uxth	r3, r3
 800813e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008146:	b29a      	uxth	r2, r3
 8008148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	801a      	strh	r2, [r3, #0]
 8008154:	e083      	b.n	800825e <USB_EPStartXfer+0x636>
 8008156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800815a:	2b3e      	cmp	r3, #62	; 0x3e
 800815c:	d81b      	bhi.n	8008196 <USB_EPStartXfer+0x56e>
 800815e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <USB_EPStartXfer+0x556>
 8008174:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008178:	3301      	adds	r3, #1
 800817a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800817e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008182:	b29b      	uxth	r3, r3
 8008184:	029b      	lsls	r3, r3, #10
 8008186:	b29a      	uxth	r2, r3
 8008188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	801a      	strh	r2, [r3, #0]
 8008194:	e063      	b.n	800825e <USB_EPStartXfer+0x636>
 8008196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80081a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a4:	f003 031f 	and.w	r3, r3, #31
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <USB_EPStartXfer+0x58e>
 80081ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80081b0:	3b01      	subs	r3, #1
 80081b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80081b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	029b      	lsls	r3, r3, #10
 80081be:	b29b      	uxth	r3, r3
 80081c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	801a      	strh	r2, [r3, #0]
 80081d6:	e042      	b.n	800825e <USB_EPStartXfer+0x636>
 80081d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	785b      	ldrb	r3, [r3, #1]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d13a      	bne.n	800825e <USB_EPStartXfer+0x636>
 80081e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80081f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800820a:	b29b      	uxth	r3, r3
 800820c:	4619      	mov	r1, r3
 800820e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008212:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008216:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800821a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800821e:	6812      	ldr	r2, [r2, #0]
 8008220:	440a      	add	r2, r1
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	011a      	lsls	r2, r3, #4
 8008232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008236:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4413      	add	r3, r2
 800823e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008246:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008250:	b29a      	uxth	r2, r3
 8008252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008256:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800825e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	891b      	ldrh	r3, [r3, #8]
 800826a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800826e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6959      	ldr	r1, [r3, #20]
 800827a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827e:	b29b      	uxth	r3, r3
 8008280:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008284:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008288:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800828c:	6800      	ldr	r0, [r0, #0]
 800828e:	f001 fc41 	bl	8009b14 <USB_WritePMA>
 8008292:	f000 be0e 	b.w	8008eb2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d16d      	bne.n	8008382 <USB_EPStartXfer+0x75a>
 80082a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80082b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	461a      	mov	r2, r3
 80082c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c6:	4413      	add	r3, r2
 80082c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80082ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	011a      	lsls	r2, r3, #4
 80082d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082da:	4413      	add	r3, r2
 80082dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082e0:	647b      	str	r3, [r7, #68]	; 0x44
 80082e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d112      	bne.n	8008310 <USB_EPStartXfer+0x6e8>
 80082ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008308:	b29a      	uxth	r2, r3
 800830a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	e063      	b.n	80083d8 <USB_EPStartXfer+0x7b0>
 8008310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008314:	2b3e      	cmp	r3, #62	; 0x3e
 8008316:	d817      	bhi.n	8008348 <USB_EPStartXfer+0x720>
 8008318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <USB_EPStartXfer+0x710>
 800832e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008332:	3301      	adds	r3, #1
 8008334:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008338:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800833c:	b29b      	uxth	r3, r3
 800833e:	029b      	lsls	r3, r3, #10
 8008340:	b29a      	uxth	r2, r3
 8008342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008344:	801a      	strh	r2, [r3, #0]
 8008346:	e047      	b.n	80083d8 <USB_EPStartXfer+0x7b0>
 8008348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834c:	095b      	lsrs	r3, r3, #5
 800834e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008352:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008356:	f003 031f 	and.w	r3, r3, #31
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <USB_EPStartXfer+0x740>
 800835e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008362:	3b01      	subs	r3, #1
 8008364:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008368:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800836c:	b29b      	uxth	r3, r3
 800836e:	029b      	lsls	r3, r3, #10
 8008370:	b29b      	uxth	r3, r3
 8008372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800837a:	b29a      	uxth	r2, r3
 800837c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800837e:	801a      	strh	r2, [r3, #0]
 8008380:	e02a      	b.n	80083d8 <USB_EPStartXfer+0x7b0>
 8008382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008386:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d122      	bne.n	80083d8 <USB_EPStartXfer+0x7b0>
 8008392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008396:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	653b      	str	r3, [r7, #80]	; 0x50
 800839e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	461a      	mov	r2, r3
 80083b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083b2:	4413      	add	r3, r2
 80083b4:	653b      	str	r3, [r7, #80]	; 0x50
 80083b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	011a      	lsls	r2, r3, #4
 80083c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083c6:	4413      	add	r3, r2
 80083c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80083d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	891b      	ldrh	r3, [r3, #8]
 80083e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6959      	ldr	r1, [r3, #20]
 80083f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80083fe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008402:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008406:	6800      	ldr	r0, [r0, #0]
 8008408:	f001 fb84 	bl	8009b14 <USB_WritePMA>
            ep->xfer_buff += len;
 800840c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	695a      	ldr	r2, [r3, #20]
 8008418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800841c:	441a      	add	r2, r3
 800841e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800842a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6a1a      	ldr	r2, [r3, #32]
 8008436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	429a      	cmp	r2, r3
 8008444:	d90f      	bls.n	8008466 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8008446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800844a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6a1a      	ldr	r2, [r3, #32]
 8008452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008456:	1ad2      	subs	r2, r2, r3
 8008458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	621a      	str	r2, [r3, #32]
 8008464:	e00e      	b.n	8008484 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8008466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8008476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2200      	movs	r2, #0
 8008482:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	643b      	str	r3, [r7, #64]	; 0x40
 8008490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d16d      	bne.n	800857c <USB_EPStartXfer+0x954>
 80084a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80084ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	461a      	mov	r2, r3
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	4413      	add	r3, r2
 80084c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80084c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	011a      	lsls	r2, r3, #4
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	4413      	add	r3, r2
 80084d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
 80084dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d112      	bne.n	800850a <USB_EPStartXfer+0x8e2>
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008502:	b29a      	uxth	r2, r3
 8008504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008506:	801a      	strh	r2, [r3, #0]
 8008508:	e05d      	b.n	80085c6 <USB_EPStartXfer+0x99e>
 800850a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800850e:	2b3e      	cmp	r3, #62	; 0x3e
 8008510:	d817      	bhi.n	8008542 <USB_EPStartXfer+0x91a>
 8008512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008516:	085b      	lsrs	r3, r3, #1
 8008518:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800851c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	d004      	beq.n	8008532 <USB_EPStartXfer+0x90a>
 8008528:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800852c:	3301      	adds	r3, #1
 800852e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008532:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008536:	b29b      	uxth	r3, r3
 8008538:	029b      	lsls	r3, r3, #10
 800853a:	b29a      	uxth	r2, r3
 800853c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e041      	b.n	80085c6 <USB_EPStartXfer+0x99e>
 8008542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008546:	095b      	lsrs	r3, r3, #5
 8008548:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800854c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008550:	f003 031f 	and.w	r3, r3, #31
 8008554:	2b00      	cmp	r3, #0
 8008556:	d104      	bne.n	8008562 <USB_EPStartXfer+0x93a>
 8008558:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800855c:	3b01      	subs	r3, #1
 800855e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008562:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008566:	b29b      	uxth	r3, r3
 8008568:	029b      	lsls	r3, r3, #10
 800856a:	b29b      	uxth	r3, r3
 800856c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008574:	b29a      	uxth	r2, r3
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	801a      	strh	r2, [r3, #0]
 800857a:	e024      	b.n	80085c6 <USB_EPStartXfer+0x99e>
 800857c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d11c      	bne.n	80085c6 <USB_EPStartXfer+0x99e>
 800858c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800859a:	b29b      	uxth	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a0:	4413      	add	r3, r2
 80085a2:	643b      	str	r3, [r7, #64]	; 0x40
 80085a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	011a      	lsls	r2, r3, #4
 80085b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085b4:	4413      	add	r3, r2
 80085b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80085c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	895b      	ldrh	r3, [r3, #10]
 80085d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6959      	ldr	r1, [r3, #20]
 80085e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80085ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80085f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80085f4:	6800      	ldr	r0, [r0, #0]
 80085f6:	f001 fa8d 	bl	8009b14 <USB_WritePMA>
 80085fa:	f000 bc5a 	b.w	8008eb2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80085fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800860e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008612:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	b29b      	uxth	r3, r3
 800862c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008634:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	441a      	add	r2, r3
 8008652:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008666:	b29b      	uxth	r3, r3
 8008668:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800866a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008684:	b29b      	uxth	r3, r3
 8008686:	461a      	mov	r2, r3
 8008688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800868a:	4413      	add	r3, r2
 800868c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800868e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	011a      	lsls	r2, r3, #4
 800869c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800869e:	4413      	add	r3, r2
 80086a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80086a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80086b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	891b      	ldrh	r3, [r3, #8]
 80086bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6959      	ldr	r1, [r3, #20]
 80086cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80086d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80086da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80086de:	6800      	ldr	r0, [r0, #0]
 80086e0:	f001 fa18 	bl	8009b14 <USB_WritePMA>
 80086e4:	e3e5      	b.n	8008eb2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80086e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	b29b      	uxth	r3, r3
 8008704:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8008710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	441a      	add	r2, r3
 800872a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800872e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008736:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800873a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800873e:	b29b      	uxth	r3, r3
 8008740:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6a1a      	ldr	r2, [r3, #32]
 800874e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008752:	1ad2      	subs	r2, r2, r3
 8008754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	b29b      	uxth	r3, r3
 800877e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 81bc 	beq.w	8008b00 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	785b      	ldrb	r3, [r3, #1]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d16d      	bne.n	8008882 <USB_EPStartXfer+0xc5a>
 80087a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80087b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087c6:	4413      	add	r3, r2
 80087c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80087ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	011a      	lsls	r2, r3, #4
 80087d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087da:	4413      	add	r3, r2
 80087dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087e0:	677b      	str	r3, [r7, #116]	; 0x74
 80087e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d112      	bne.n	8008810 <USB_EPStartXfer+0xbe8>
 80087ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087f8:	801a      	strh	r2, [r3, #0]
 80087fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008808:	b29a      	uxth	r2, r3
 800880a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800880c:	801a      	strh	r2, [r3, #0]
 800880e:	e060      	b.n	80088d2 <USB_EPStartXfer+0xcaa>
 8008810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008814:	2b3e      	cmp	r3, #62	; 0x3e
 8008816:	d817      	bhi.n	8008848 <USB_EPStartXfer+0xc20>
 8008818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800881c:	085b      	lsrs	r3, r3, #1
 800881e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <USB_EPStartXfer+0xc10>
 800882e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008832:	3301      	adds	r3, #1
 8008834:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008838:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800883c:	b29b      	uxth	r3, r3
 800883e:	029b      	lsls	r3, r3, #10
 8008840:	b29a      	uxth	r2, r3
 8008842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008844:	801a      	strh	r2, [r3, #0]
 8008846:	e044      	b.n	80088d2 <USB_EPStartXfer+0xcaa>
 8008848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884c:	095b      	lsrs	r3, r3, #5
 800884e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008856:	f003 031f 	and.w	r3, r3, #31
 800885a:	2b00      	cmp	r3, #0
 800885c:	d104      	bne.n	8008868 <USB_EPStartXfer+0xc40>
 800885e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008862:	3b01      	subs	r3, #1
 8008864:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008868:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800886c:	b29b      	uxth	r3, r3
 800886e:	029b      	lsls	r3, r3, #10
 8008870:	b29b      	uxth	r3, r3
 8008872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800887a:	b29a      	uxth	r2, r3
 800887c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800887e:	801a      	strh	r2, [r3, #0]
 8008880:	e027      	b.n	80088d2 <USB_EPStartXfer+0xcaa>
 8008882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	785b      	ldrb	r3, [r3, #1]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d11f      	bne.n	80088d2 <USB_EPStartXfer+0xcaa>
 8008892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008896:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	461a      	mov	r2, r3
 80088a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088a8:	4413      	add	r3, r2
 80088aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	011a      	lsls	r2, r3, #4
 80088bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088c0:	4413      	add	r3, r2
 80088c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80088d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	895b      	ldrh	r3, [r3, #10]
 80088de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6959      	ldr	r1, [r3, #20]
 80088ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80088f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80088fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008900:	6800      	ldr	r0, [r0, #0]
 8008902:	f001 f907 	bl	8009b14 <USB_WritePMA>
          ep->xfer_buff += len;
 8008906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	695a      	ldr	r2, [r3, #20]
 8008912:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008916:	441a      	add	r2, r3
 8008918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800891c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6a1a      	ldr	r2, [r3, #32]
 8008930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	429a      	cmp	r2, r3
 800893e:	d90f      	bls.n	8008960 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8008940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6a1a      	ldr	r2, [r3, #32]
 800894c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008950:	1ad2      	subs	r2, r2, r3
 8008952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	621a      	str	r2, [r3, #32]
 800895e:	e00e      	b.n	800897e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8008960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6a1b      	ldr	r3, [r3, #32]
 800896c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2200      	movs	r2, #0
 800897c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800897e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 8295 	beq.w	8008eb2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800898c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d16d      	bne.n	8008a74 <USB_EPStartXfer+0xe4c>
 8008998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800899c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80089a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	461a      	mov	r2, r3
 80089b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089b8:	4413      	add	r3, r2
 80089ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80089bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	011a      	lsls	r2, r3, #4
 80089ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089cc:	4413      	add	r3, r2
 80089ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089d2:	667b      	str	r3, [r7, #100]	; 0x64
 80089d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d112      	bne.n	8008a02 <USB_EPStartXfer+0xdda>
 80089dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089ea:	801a      	strh	r2, [r3, #0]
 80089ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089fe:	801a      	strh	r2, [r3, #0]
 8008a00:	e063      	b.n	8008aca <USB_EPStartXfer+0xea2>
 8008a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a06:	2b3e      	cmp	r3, #62	; 0x3e
 8008a08:	d817      	bhi.n	8008a3a <USB_EPStartXfer+0xe12>
 8008a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a0e:	085b      	lsrs	r3, r3, #1
 8008a10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d004      	beq.n	8008a2a <USB_EPStartXfer+0xe02>
 8008a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a24:	3301      	adds	r3, #1
 8008a26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	029b      	lsls	r3, r3, #10
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	e047      	b.n	8008aca <USB_EPStartXfer+0xea2>
 8008a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3e:	095b      	lsrs	r3, r3, #5
 8008a40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a48:	f003 031f 	and.w	r3, r3, #31
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d104      	bne.n	8008a5a <USB_EPStartXfer+0xe32>
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a54:	3b01      	subs	r3, #1
 8008a56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	029b      	lsls	r3, r3, #10
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a70:	801a      	strh	r2, [r3, #0]
 8008a72:	e02a      	b.n	8008aca <USB_EPStartXfer+0xea2>
 8008a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	785b      	ldrb	r3, [r3, #1]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d122      	bne.n	8008aca <USB_EPStartXfer+0xea2>
 8008a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8008a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aa4:	4413      	add	r3, r2
 8008aa6:	673b      	str	r3, [r7, #112]	; 0x70
 8008aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	011a      	lsls	r2, r3, #4
 8008ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ab8:	4413      	add	r3, r2
 8008aba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008abe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	891b      	ldrh	r3, [r3, #8]
 8008ad6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6959      	ldr	r1, [r3, #20]
 8008ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008af0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008af4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008af8:	6800      	ldr	r0, [r0, #0]
 8008afa:	f001 f80b 	bl	8009b14 <USB_WritePMA>
 8008afe:	e1d8      	b.n	8008eb2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d178      	bne.n	8008c02 <USB_EPStartXfer+0xfda>
 8008b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b34:	4413      	add	r3, r2
 8008b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	011a      	lsls	r2, r3, #4
 8008b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d116      	bne.n	8008b8c <USB_EPStartXfer+0xf64>
 8008b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b70:	801a      	strh	r2, [r3, #0]
 8008b72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b88:	801a      	strh	r2, [r3, #0]
 8008b8a:	e06b      	b.n	8008c64 <USB_EPStartXfer+0x103c>
 8008b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b90:	2b3e      	cmp	r3, #62	; 0x3e
 8008b92:	d818      	bhi.n	8008bc6 <USB_EPStartXfer+0xf9e>
 8008b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b98:	085b      	lsrs	r3, r3, #1
 8008b9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d004      	beq.n	8008bb4 <USB_EPStartXfer+0xf8c>
 8008baa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008bae:	3301      	adds	r3, #1
 8008bb0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008bb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	029b      	lsls	r3, r3, #10
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bc2:	801a      	strh	r2, [r3, #0]
 8008bc4:	e04e      	b.n	8008c64 <USB_EPStartXfer+0x103c>
 8008bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bd4:	f003 031f 	and.w	r3, r3, #31
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d104      	bne.n	8008be6 <USB_EPStartXfer+0xfbe>
 8008bdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008be0:	3b01      	subs	r3, #1
 8008be2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008be6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	029b      	lsls	r3, r3, #10
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bfe:	801a      	strh	r2, [r3, #0]
 8008c00:	e030      	b.n	8008c64 <USB_EPStartXfer+0x103c>
 8008c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	785b      	ldrb	r3, [r3, #1]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d128      	bne.n	8008c64 <USB_EPStartXfer+0x103c>
 8008c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	461a      	mov	r2, r3
 8008c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c36:	4413      	add	r3, r2
 8008c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	011a      	lsls	r2, r3, #4
 8008c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c4e:	4413      	add	r3, r2
 8008c50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	891b      	ldrh	r3, [r3, #8]
 8008c70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6959      	ldr	r1, [r3, #20]
 8008c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008c8a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008c8e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008c92:	6800      	ldr	r0, [r0, #0]
 8008c94:	f000 ff3e 	bl	8009b14 <USB_WritePMA>
          ep->xfer_buff += len;
 8008c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	695a      	ldr	r2, [r3, #20]
 8008ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca8:	441a      	add	r2, r3
 8008caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8008cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6a1a      	ldr	r2, [r3, #32]
 8008cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d90f      	bls.n	8008cf2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8008cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6a1a      	ldr	r2, [r3, #32]
 8008cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce2:	1ad2      	subs	r2, r2, r3
 8008ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	621a      	str	r2, [r3, #32]
 8008cf0:	e00e      	b.n	8008d10 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8008cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 80cc 	beq.w	8008eb2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	785b      	ldrb	r3, [r3, #1]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d178      	bne.n	8008e2a <USB_EPStartXfer+0x1202>
 8008d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	461a      	mov	r2, r3
 8008d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	011a      	lsls	r2, r3, #4
 8008d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d74:	4413      	add	r3, r2
 8008d76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d116      	bne.n	8008db4 <USB_EPStartXfer+0x118c>
 8008d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d98:	801a      	strh	r2, [r3, #0]
 8008d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d9e:	881b      	ldrh	r3, [r3, #0]
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008db0:	801a      	strh	r2, [r3, #0]
 8008db2:	e064      	b.n	8008e7e <USB_EPStartXfer+0x1256>
 8008db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008db8:	2b3e      	cmp	r3, #62	; 0x3e
 8008dba:	d818      	bhi.n	8008dee <USB_EPStartXfer+0x11c6>
 8008dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc0:	085b      	lsrs	r3, r3, #1
 8008dc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d004      	beq.n	8008ddc <USB_EPStartXfer+0x11b4>
 8008dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	029b      	lsls	r3, r3, #10
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dea:	801a      	strh	r2, [r3, #0]
 8008dec:	e047      	b.n	8008e7e <USB_EPStartXfer+0x1256>
 8008dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dfc:	f003 031f 	and.w	r3, r3, #31
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d104      	bne.n	8008e0e <USB_EPStartXfer+0x11e6>
 8008e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	029b      	lsls	r3, r3, #10
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e029      	b.n	8008e7e <USB_EPStartXfer+0x1256>
 8008e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	785b      	ldrb	r3, [r3, #1]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d121      	bne.n	8008e7e <USB_EPStartXfer+0x1256>
 8008e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e50:	4413      	add	r3, r2
 8008e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	011a      	lsls	r2, r3, #4
 8008e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e68:	4413      	add	r3, r2
 8008e6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	895b      	ldrh	r3, [r3, #10]
 8008e8a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6959      	ldr	r1, [r3, #20]
 8008e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008ea4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008ea8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008eac:	6800      	ldr	r0, [r0, #0]
 8008eae:	f000 fe31 	bl	8009b14 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ed4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee0:	8013      	strh	r3, [r2, #0]
 8008ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008eea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008eee:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008ef2:	8812      	ldrh	r2, [r2, #0]
 8008ef4:	f082 0210 	eor.w	r2, r2, #16
 8008ef8:	801a      	strh	r2, [r3, #0]
 8008efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008efe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008f02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f06:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008f0a:	8812      	ldrh	r2, [r2, #0]
 8008f0c:	f082 0220 	eor.w	r2, r2, #32
 8008f10:	801a      	strh	r2, [r3, #0]
 8008f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	441a      	add	r2, r3
 8008f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f30:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	8013      	strh	r3, [r2, #0]
 8008f4a:	f000 bc9f 	b.w	800988c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	7b1b      	ldrb	r3, [r3, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f040 80ae 	bne.w	80090bc <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d917      	bls.n	8008fac <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	699a      	ldr	r2, [r3, #24]
 8008f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f9c:	1ad2      	subs	r2, r2, r3
 8008f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	619a      	str	r2, [r3, #24]
 8008faa:	e00e      	b.n	8008fca <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008fee:	4413      	add	r3, r2
 8008ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	011a      	lsls	r2, r3, #4
 8009002:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009006:	4413      	add	r3, r2
 8009008:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800900c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009014:	2b00      	cmp	r3, #0
 8009016:	d116      	bne.n	8009046 <USB_EPStartXfer+0x141e>
 8009018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800901c:	881b      	ldrh	r3, [r3, #0]
 800901e:	b29b      	uxth	r3, r3
 8009020:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009024:	b29a      	uxth	r2, r3
 8009026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800902a:	801a      	strh	r2, [r3, #0]
 800902c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	b29b      	uxth	r3, r3
 8009034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800903c:	b29a      	uxth	r2, r3
 800903e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009042:	801a      	strh	r2, [r3, #0]
 8009044:	e3e8      	b.n	8009818 <USB_EPStartXfer+0x1bf0>
 8009046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800904a:	2b3e      	cmp	r3, #62	; 0x3e
 800904c:	d818      	bhi.n	8009080 <USB_EPStartXfer+0x1458>
 800904e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009052:	085b      	lsrs	r3, r3, #1
 8009054:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d004      	beq.n	800906e <USB_EPStartXfer+0x1446>
 8009064:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009068:	3301      	adds	r3, #1
 800906a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800906e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009072:	b29b      	uxth	r3, r3
 8009074:	029b      	lsls	r3, r3, #10
 8009076:	b29a      	uxth	r2, r3
 8009078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800907c:	801a      	strh	r2, [r3, #0]
 800907e:	e3cb      	b.n	8009818 <USB_EPStartXfer+0x1bf0>
 8009080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009084:	095b      	lsrs	r3, r3, #5
 8009086:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800908a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800908e:	f003 031f 	and.w	r3, r3, #31
 8009092:	2b00      	cmp	r3, #0
 8009094:	d104      	bne.n	80090a0 <USB_EPStartXfer+0x1478>
 8009096:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800909a:	3b01      	subs	r3, #1
 800909c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80090a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	029b      	lsls	r3, r3, #10
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090b8:	801a      	strh	r2, [r3, #0]
 80090ba:	e3ad      	b.n	8009818 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80090bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	78db      	ldrb	r3, [r3, #3]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	f040 8200 	bne.w	80094ce <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80090ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	785b      	ldrb	r3, [r3, #1]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f040 8091 	bne.w	8009202 <USB_EPStartXfer+0x15da>
 80090e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	461a      	mov	r2, r3
 8009100:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009104:	4413      	add	r3, r2
 8009106:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800910a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800910e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	011a      	lsls	r2, r3, #4
 8009118:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800911c:	4413      	add	r3, r2
 800911e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800912a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d116      	bne.n	8009164 <USB_EPStartXfer+0x153c>
 8009136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	b29b      	uxth	r3, r3
 800913e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009142:	b29a      	uxth	r2, r3
 8009144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009148:	801a      	strh	r2, [r3, #0]
 800914a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	b29b      	uxth	r3, r3
 8009152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800915a:	b29a      	uxth	r2, r3
 800915c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009160:	801a      	strh	r2, [r3, #0]
 8009162:	e083      	b.n	800926c <USB_EPStartXfer+0x1644>
 8009164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009168:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	2b3e      	cmp	r3, #62	; 0x3e
 8009172:	d820      	bhi.n	80091b6 <USB_EPStartXfer+0x158e>
 8009174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009178:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800918a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d004      	beq.n	80091a4 <USB_EPStartXfer+0x157c>
 800919a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800919e:	3301      	adds	r3, #1
 80091a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	029b      	lsls	r3, r3, #10
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091b2:	801a      	strh	r2, [r3, #0]
 80091b4:	e05a      	b.n	800926c <USB_EPStartXfer+0x1644>
 80091b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	095b      	lsrs	r3, r3, #5
 80091c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <USB_EPStartXfer+0x15be>
 80091dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e0:	3b01      	subs	r3, #1
 80091e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80091e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	029b      	lsls	r3, r3, #10
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091fe:	801a      	strh	r2, [r3, #0]
 8009200:	e034      	b.n	800926c <USB_EPStartXfer+0x1644>
 8009202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	785b      	ldrb	r3, [r3, #1]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d12c      	bne.n	800926c <USB_EPStartXfer+0x1644>
 8009212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800922e:	b29b      	uxth	r3, r3
 8009230:	461a      	mov	r2, r3
 8009232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009236:	4413      	add	r3, r2
 8009238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800923c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	011a      	lsls	r2, r3, #4
 800924a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800924e:	4413      	add	r3, r2
 8009250:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800925c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	b29a      	uxth	r2, r3
 8009266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800926a:	801a      	strh	r2, [r3, #0]
 800926c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800927a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800927e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	785b      	ldrb	r3, [r3, #1]
 8009286:	2b00      	cmp	r3, #0
 8009288:	f040 8091 	bne.w	80093ae <USB_EPStartXfer+0x1786>
 800928c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009290:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800929a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800929e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	461a      	mov	r2, r3
 80092ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092b0:	4413      	add	r3, r2
 80092b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	011a      	lsls	r2, r3, #4
 80092c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092c8:	4413      	add	r3, r2
 80092ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d116      	bne.n	8009310 <USB_EPStartXfer+0x16e8>
 80092e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092e6:	881b      	ldrh	r3, [r3, #0]
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092f4:	801a      	strh	r2, [r3, #0]
 80092f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009306:	b29a      	uxth	r2, r3
 8009308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800930c:	801a      	strh	r2, [r3, #0]
 800930e:	e07c      	b.n	800940a <USB_EPStartXfer+0x17e2>
 8009310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	2b3e      	cmp	r3, #62	; 0x3e
 800931e:	d820      	bhi.n	8009362 <USB_EPStartXfer+0x173a>
 8009320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	085b      	lsrs	r3, r3, #1
 800932e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009336:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <USB_EPStartXfer+0x1728>
 8009346:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800934a:	3301      	adds	r3, #1
 800934c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009350:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009354:	b29b      	uxth	r3, r3
 8009356:	029b      	lsls	r3, r3, #10
 8009358:	b29a      	uxth	r2, r3
 800935a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800935e:	801a      	strh	r2, [r3, #0]
 8009360:	e053      	b.n	800940a <USB_EPStartXfer+0x17e2>
 8009362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	095b      	lsrs	r3, r3, #5
 8009370:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	f003 031f 	and.w	r3, r3, #31
 8009384:	2b00      	cmp	r3, #0
 8009386:	d104      	bne.n	8009392 <USB_EPStartXfer+0x176a>
 8009388:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800938c:	3b01      	subs	r3, #1
 800938e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009392:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009396:	b29b      	uxth	r3, r3
 8009398:	029b      	lsls	r3, r3, #10
 800939a:	b29b      	uxth	r3, r3
 800939c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093aa:	801a      	strh	r2, [r3, #0]
 80093ac:	e02d      	b.n	800940a <USB_EPStartXfer+0x17e2>
 80093ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	785b      	ldrb	r3, [r3, #1]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d125      	bne.n	800940a <USB_EPStartXfer+0x17e2>
 80093be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	461a      	mov	r2, r3
 80093d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093d4:	4413      	add	r3, r2
 80093d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	011a      	lsls	r2, r3, #4
 80093e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093ec:	4413      	add	r3, r2
 80093ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	b29a      	uxth	r2, r3
 8009404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009408:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800940a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 81fe 	beq.w	8009818 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800941c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009420:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800942a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800943c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <USB_EPStartXfer+0x182c>
 8009448:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800944c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10d      	bne.n	8009470 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009454:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800945c:	2b00      	cmp	r3, #0
 800945e:	f040 81db 	bne.w	8009818 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009462:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	f040 81d4 	bne.w	8009818 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800947e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	b29b      	uxth	r3, r3
 800948e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009496:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800949a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800949e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	441a      	add	r2, r3
 80094b4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80094b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	8013      	strh	r3, [r2, #0]
 80094cc:	e1a4      	b.n	8009818 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80094ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	78db      	ldrb	r3, [r3, #3]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	f040 819a 	bne.w	8009814 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80094e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d917      	bls.n	800952c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80094fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800950c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	699a      	ldr	r2, [r3, #24]
 8009518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800951c:	1ad2      	subs	r2, r2, r3
 800951e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	619a      	str	r2, [r3, #24]
 800952a:	e00e      	b.n	800954a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800952c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800953c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2200      	movs	r2, #0
 8009548:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800954a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800954e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d178      	bne.n	800964c <USB_EPStartXfer+0x1a24>
 800955a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800955e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800956c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009576:	b29b      	uxth	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800957e:	4413      	add	r3, r2
 8009580:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	011a      	lsls	r2, r3, #4
 8009592:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009596:	4413      	add	r3, r2
 8009598:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800959c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d116      	bne.n	80095d6 <USB_EPStartXfer+0x19ae>
 80095a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095ba:	801a      	strh	r2, [r3, #0]
 80095bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80095d2:	801a      	strh	r2, [r3, #0]
 80095d4:	e06b      	b.n	80096ae <USB_EPStartXfer+0x1a86>
 80095d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095da:	2b3e      	cmp	r3, #62	; 0x3e
 80095dc:	d818      	bhi.n	8009610 <USB_EPStartXfer+0x19e8>
 80095de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e2:	085b      	lsrs	r3, r3, #1
 80095e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ec:	f003 0301 	and.w	r3, r3, #1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d004      	beq.n	80095fe <USB_EPStartXfer+0x19d6>
 80095f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095f8:	3301      	adds	r3, #1
 80095fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009602:	b29b      	uxth	r3, r3
 8009604:	029b      	lsls	r3, r3, #10
 8009606:	b29a      	uxth	r2, r3
 8009608:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800960c:	801a      	strh	r2, [r3, #0]
 800960e:	e04e      	b.n	80096ae <USB_EPStartXfer+0x1a86>
 8009610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009614:	095b      	lsrs	r3, r3, #5
 8009616:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800961a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800961e:	f003 031f 	and.w	r3, r3, #31
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <USB_EPStartXfer+0x1a08>
 8009626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800962a:	3b01      	subs	r3, #1
 800962c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009634:	b29b      	uxth	r3, r3
 8009636:	029b      	lsls	r3, r3, #10
 8009638:	b29b      	uxth	r3, r3
 800963a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800963e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009642:	b29a      	uxth	r2, r3
 8009644:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009648:	801a      	strh	r2, [r3, #0]
 800964a:	e030      	b.n	80096ae <USB_EPStartXfer+0x1a86>
 800964c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	785b      	ldrb	r3, [r3, #1]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d128      	bne.n	80096ae <USB_EPStartXfer+0x1a86>
 800965c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800966a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800966e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009678:	b29b      	uxth	r3, r3
 800967a:	461a      	mov	r2, r3
 800967c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009680:	4413      	add	r3, r2
 8009682:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800968a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	011a      	lsls	r2, r3, #4
 8009694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009698:	4413      	add	r3, r2
 800969a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800969e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80096a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80096ac:	801a      	strh	r2, [r3, #0]
 80096ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	785b      	ldrb	r3, [r3, #1]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d178      	bne.n	80097be <USB_EPStartXfer+0x1b96>
 80096cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	461a      	mov	r2, r3
 80096ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096f0:	4413      	add	r3, r2
 80096f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80096f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	011a      	lsls	r2, r3, #4
 8009704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009708:	4413      	add	r3, r2
 800970a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800970e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009716:	2b00      	cmp	r3, #0
 8009718:	d116      	bne.n	8009748 <USB_EPStartXfer+0x1b20>
 800971a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009726:	b29a      	uxth	r2, r3
 8009728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800972c:	801a      	strh	r2, [r3, #0]
 800972e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	b29b      	uxth	r3, r3
 8009736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800973a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973e:	b29a      	uxth	r2, r3
 8009740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009744:	801a      	strh	r2, [r3, #0]
 8009746:	e067      	b.n	8009818 <USB_EPStartXfer+0x1bf0>
 8009748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800974c:	2b3e      	cmp	r3, #62	; 0x3e
 800974e:	d818      	bhi.n	8009782 <USB_EPStartXfer+0x1b5a>
 8009750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009754:	085b      	lsrs	r3, r3, #1
 8009756:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800975a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	d004      	beq.n	8009770 <USB_EPStartXfer+0x1b48>
 8009766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800976a:	3301      	adds	r3, #1
 800976c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009770:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009774:	b29b      	uxth	r3, r3
 8009776:	029b      	lsls	r3, r3, #10
 8009778:	b29a      	uxth	r2, r3
 800977a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800977e:	801a      	strh	r2, [r3, #0]
 8009780:	e04a      	b.n	8009818 <USB_EPStartXfer+0x1bf0>
 8009782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009786:	095b      	lsrs	r3, r3, #5
 8009788:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800978c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009790:	f003 031f 	and.w	r3, r3, #31
 8009794:	2b00      	cmp	r3, #0
 8009796:	d104      	bne.n	80097a2 <USB_EPStartXfer+0x1b7a>
 8009798:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800979c:	3b01      	subs	r3, #1
 800979e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	029b      	lsls	r3, r3, #10
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ba:	801a      	strh	r2, [r3, #0]
 80097bc:	e02c      	b.n	8009818 <USB_EPStartXfer+0x1bf0>
 80097be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	785b      	ldrb	r3, [r3, #1]
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d124      	bne.n	8009818 <USB_EPStartXfer+0x1bf0>
 80097ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097dc:	b29b      	uxth	r3, r3
 80097de:	461a      	mov	r2, r3
 80097e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097e4:	4413      	add	r3, r2
 80097e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	011a      	lsls	r2, r3, #4
 80097f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fc:	4413      	add	r3, r2
 80097fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009802:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800980a:	b29a      	uxth	r2, r3
 800980c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009810:	801a      	strh	r2, [r3, #0]
 8009812:	e001      	b.n	8009818 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e03a      	b.n	800988e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800981c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	b29b      	uxth	r3, r3
 8009836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800983a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800983e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8009842:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009846:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800984a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800984e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009852:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009856:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800985a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800985e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	441a      	add	r2, r3
 8009874:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800987c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009888:	b29b      	uxth	r3, r3
 800988a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	785b      	ldrb	r3, [r3, #1]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d020      	beq.n	80098ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098c0:	81bb      	strh	r3, [r7, #12]
 80098c2:	89bb      	ldrh	r3, [r7, #12]
 80098c4:	f083 0310 	eor.w	r3, r3, #16
 80098c8:	81bb      	strh	r3, [r7, #12]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	441a      	add	r2, r3
 80098d4:	89bb      	ldrh	r3, [r7, #12]
 80098d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	8013      	strh	r3, [r2, #0]
 80098ea:	e01f      	b.n	800992c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	881b      	ldrh	r3, [r3, #0]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009902:	81fb      	strh	r3, [r7, #14]
 8009904:	89fb      	ldrh	r3, [r7, #14]
 8009906:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800990a:	81fb      	strh	r3, [r7, #14]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	441a      	add	r2, r3
 8009916:	89fb      	ldrh	r3, [r7, #14]
 8009918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800991c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009928:	b29b      	uxth	r3, r3
 800992a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	bc80      	pop	{r7}
 8009936:	4770      	bx	lr

08009938 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	7b1b      	ldrb	r3, [r3, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	f040 809d 	bne.w	8009a86 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	785b      	ldrb	r3, [r3, #1]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d04c      	beq.n	80099ee <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	823b      	strh	r3, [r7, #16]
 8009962:	8a3b      	ldrh	r3, [r7, #16]
 8009964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d01b      	beq.n	80099a4 <USB_EPClearStall+0x6c>
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800997e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009982:	81fb      	strh	r3, [r7, #14]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	441a      	add	r2, r3
 800998e:	89fb      	ldrh	r3, [r7, #14]
 8009990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800999c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	78db      	ldrb	r3, [r3, #3]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d06c      	beq.n	8009a86 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c2:	81bb      	strh	r3, [r7, #12]
 80099c4:	89bb      	ldrh	r3, [r7, #12]
 80099c6:	f083 0320 	eor.w	r3, r3, #32
 80099ca:	81bb      	strh	r3, [r7, #12]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	441a      	add	r2, r3
 80099d6:	89bb      	ldrh	r3, [r7, #12]
 80099d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	8013      	strh	r3, [r2, #0]
 80099ec:	e04b      	b.n	8009a86 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	82fb      	strh	r3, [r7, #22]
 80099fc:	8afb      	ldrh	r3, [r7, #22]
 80099fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d01b      	beq.n	8009a3e <USB_EPClearStall+0x106>
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	4413      	add	r3, r2
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1c:	82bb      	strh	r3, [r7, #20]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	441a      	add	r2, r3
 8009a28:	8abb      	ldrh	r3, [r7, #20]
 8009a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	881b      	ldrh	r3, [r3, #0]
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a54:	827b      	strh	r3, [r7, #18]
 8009a56:	8a7b      	ldrh	r3, [r7, #18]
 8009a58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a5c:	827b      	strh	r3, [r7, #18]
 8009a5e:	8a7b      	ldrh	r3, [r7, #18]
 8009a60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a64:	827b      	strh	r3, [r7, #18]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	441a      	add	r2, r3
 8009a70:	8a7b      	ldrh	r3, [r7, #18]
 8009a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bc80      	pop	{r7}
 8009a90:	4770      	bx	lr

08009a92 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009a9e:	78fb      	ldrb	r3, [r7, #3]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d103      	bne.n	8009aac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2280      	movs	r2, #128	; 0x80
 8009aa8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bc80      	pop	{r7}
 8009ab6:	4770      	bx	lr

08009ab8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bc80      	pop	{r7}
 8009aca:	4770      	bx	lr

08009acc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bc80      	pop	{r7}
 8009ade:	4770      	bx	lr

08009ae0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009af2:	68fb      	ldr	r3, [r7, #12]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bc80      	pop	{r7}
 8009afc:	4770      	bx	lr

08009afe <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bc80      	pop	{r7}
 8009b12:	4770      	bx	lr

08009b14 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b08d      	sub	sp, #52	; 0x34
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	4611      	mov	r1, r2
 8009b20:	461a      	mov	r2, r3
 8009b22:	460b      	mov	r3, r1
 8009b24:	80fb      	strh	r3, [r7, #6]
 8009b26:	4613      	mov	r3, r2
 8009b28:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009b2a:	88bb      	ldrh	r3, [r7, #4]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	085b      	lsrs	r3, r3, #1
 8009b30:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b3a:	88fb      	ldrh	r3, [r7, #6]
 8009b3c:	005a      	lsls	r2, r3, #1
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b46:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009b48:	6a3b      	ldr	r3, [r7, #32]
 8009b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b4c:	e01e      	b.n	8009b8c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	3301      	adds	r3, #1
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	461a      	mov	r2, r3
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b76:	3302      	adds	r3, #2
 8009b78:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7c:	3302      	adds	r3, #2
 8009b7e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	3301      	adds	r3, #1
 8009b84:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1dd      	bne.n	8009b4e <USB_WritePMA+0x3a>
  }
}
 8009b92:	bf00      	nop
 8009b94:	bf00      	nop
 8009b96:	3734      	adds	r7, #52	; 0x34
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bc80      	pop	{r7}
 8009b9c:	4770      	bx	lr

08009b9e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b08b      	sub	sp, #44	; 0x2c
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	4611      	mov	r1, r2
 8009baa:	461a      	mov	r2, r3
 8009bac:	460b      	mov	r3, r1
 8009bae:	80fb      	strh	r3, [r7, #6]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009bb4:	88bb      	ldrh	r3, [r7, #4]
 8009bb6:	085b      	lsrs	r3, r3, #1
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009bc4:	88fb      	ldrh	r3, [r7, #6]
 8009bc6:	005a      	lsls	r2, r3, #1
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bd0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd6:	e01b      	b.n	8009c10 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	3302      	adds	r3, #2
 8009be4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	0a1b      	lsrs	r3, r3, #8
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	3301      	adds	r3, #1
 8009c02:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	3302      	adds	r3, #2
 8009c08:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e0      	bne.n	8009bd8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009c16:	88bb      	ldrh	r3, [r7, #4]
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d007      	beq.n	8009c32 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	881b      	ldrh	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	701a      	strb	r2, [r3, #0]
  }
}
 8009c32:	bf00      	nop
 8009c34:	372c      	adds	r7, #44	; 0x2c
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bc80      	pop	{r7}
 8009c3a:	4770      	bx	lr

08009c3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	7c1b      	ldrb	r3, [r3, #16]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d115      	bne.n	8009c80 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c58:	2202      	movs	r2, #2
 8009c5a:	2181      	movs	r1, #129	; 0x81
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 feac 	bl	800b9ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	2101      	movs	r1, #1
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 fea2 	bl	800b9ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009c7e:	e012      	b.n	8009ca6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c80:	2340      	movs	r3, #64	; 0x40
 8009c82:	2202      	movs	r2, #2
 8009c84:	2181      	movs	r1, #129	; 0x81
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 fe97 	bl	800b9ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c92:	2340      	movs	r3, #64	; 0x40
 8009c94:	2202      	movs	r2, #2
 8009c96:	2101      	movs	r1, #1
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 fe8e 	bl	800b9ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009ca6:	2308      	movs	r3, #8
 8009ca8:	2203      	movs	r2, #3
 8009caa:	2182      	movs	r1, #130	; 0x82
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 fe84 	bl	800b9ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009cb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009cbc:	f001 ffa4 	bl	800bc08 <USBD_static_malloc>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d102      	bne.n	8009cd8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	73fb      	strb	r3, [r7, #15]
 8009cd6:	e026      	b.n	8009d26 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cde:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	7c1b      	ldrb	r3, [r3, #16]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d109      	bne.n	8009d16 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d0c:	2101      	movs	r1, #1
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 ff44 	bl	800bb9c <USBD_LL_PrepareReceive>
 8009d14:	e007      	b.n	8009d26 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d1c:	2340      	movs	r3, #64	; 0x40
 8009d1e:	2101      	movs	r1, #1
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 ff3b 	bl	800bb9c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009d40:	2181      	movs	r1, #129	; 0x81
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f001 fe5f 	bl	800ba06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009d4e:	2101      	movs	r1, #1
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f001 fe58 	bl	800ba06 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d5e:	2182      	movs	r1, #130	; 0x82
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f001 fe50 	bl	800ba06 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00e      	beq.n	8009d94 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d86:	4618      	mov	r0, r3
 8009d88:	f001 ff4a 	bl	800bc20 <USBD_static_free>
    pdev->pClassData = NULL;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b086      	sub	sp, #24
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dae:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d039      	beq.n	8009e3c <USBD_CDC_Setup+0x9e>
 8009dc8:	2b20      	cmp	r3, #32
 8009dca:	d17f      	bne.n	8009ecc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	88db      	ldrh	r3, [r3, #6]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d029      	beq.n	8009e28 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	b25b      	sxtb	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da11      	bge.n	8009e02 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009dea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	88d2      	ldrh	r2, [r2, #6]
 8009df0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009df2:	6939      	ldr	r1, [r7, #16]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	88db      	ldrh	r3, [r3, #6]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 fa09 	bl	800b212 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009e00:	e06b      	b.n	8009eda <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	785a      	ldrb	r2, [r3, #1]
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	88db      	ldrh	r3, [r3, #6]
 8009e10:	b2da      	uxtb	r2, r3
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e18:	6939      	ldr	r1, [r7, #16]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	88db      	ldrh	r3, [r3, #6]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f001 fa24 	bl	800b26e <USBD_CtlPrepareRx>
      break;
 8009e26:	e058      	b.n	8009eda <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	7850      	ldrb	r0, [r2, #1]
 8009e34:	2200      	movs	r2, #0
 8009e36:	6839      	ldr	r1, [r7, #0]
 8009e38:	4798      	blx	r3
      break;
 8009e3a:	e04e      	b.n	8009eda <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	785b      	ldrb	r3, [r3, #1]
 8009e40:	2b0b      	cmp	r3, #11
 8009e42:	d02e      	beq.n	8009ea2 <USBD_CDC_Setup+0x104>
 8009e44:	2b0b      	cmp	r3, #11
 8009e46:	dc38      	bgt.n	8009eba <USBD_CDC_Setup+0x11c>
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <USBD_CDC_Setup+0xb4>
 8009e4c:	2b0a      	cmp	r3, #10
 8009e4e:	d014      	beq.n	8009e7a <USBD_CDC_Setup+0xdc>
 8009e50:	e033      	b.n	8009eba <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d107      	bne.n	8009e6c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009e5c:	f107 030c 	add.w	r3, r7, #12
 8009e60:	2202      	movs	r2, #2
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f001 f9d4 	bl	800b212 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e6a:	e02e      	b.n	8009eca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f001 f965 	bl	800b13e <USBD_CtlError>
            ret = USBD_FAIL;
 8009e74:	2302      	movs	r3, #2
 8009e76:	75fb      	strb	r3, [r7, #23]
          break;
 8009e78:	e027      	b.n	8009eca <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e80:	2b03      	cmp	r3, #3
 8009e82:	d107      	bne.n	8009e94 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e84:	f107 030f 	add.w	r3, r7, #15
 8009e88:	2201      	movs	r2, #1
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 f9c0 	bl	800b212 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e92:	e01a      	b.n	8009eca <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 f951 	bl	800b13e <USBD_CtlError>
            ret = USBD_FAIL;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	75fb      	strb	r3, [r7, #23]
          break;
 8009ea0:	e013      	b.n	8009eca <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d00d      	beq.n	8009ec8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f001 f945 	bl	800b13e <USBD_CtlError>
            ret = USBD_FAIL;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009eb8:	e006      	b.n	8009ec8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 f93e 	bl	800b13e <USBD_CtlError>
          ret = USBD_FAIL;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ec6:	e000      	b.n	8009eca <USBD_CDC_Setup+0x12c>
          break;
 8009ec8:	bf00      	nop
      }
      break;
 8009eca:	e006      	b.n	8009eda <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f001 f935 	bl	800b13e <USBD_CtlError>
      ret = USBD_FAIL;
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed8:	bf00      	nop
  }

  return ret;
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	460b      	mov	r3, r1
 8009eee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009efe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d03a      	beq.n	8009f80 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f0a:	78fa      	ldrb	r2, [r7, #3]
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	440b      	add	r3, r1
 8009f18:	331c      	adds	r3, #28
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d029      	beq.n	8009f74 <USBD_CDC_DataIn+0x90>
 8009f20:	78fa      	ldrb	r2, [r7, #3]
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	440b      	add	r3, r1
 8009f2e:	331c      	adds	r3, #28
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	78f9      	ldrb	r1, [r7, #3]
 8009f34:	68b8      	ldr	r0, [r7, #8]
 8009f36:	460b      	mov	r3, r1
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	440b      	add	r3, r1
 8009f3c:	00db      	lsls	r3, r3, #3
 8009f3e:	4403      	add	r3, r0
 8009f40:	3338      	adds	r3, #56	; 0x38
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f48:	fb01 f303 	mul.w	r3, r1, r3
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d110      	bne.n	8009f74 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	4613      	mov	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4413      	add	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	440b      	add	r3, r1
 8009f60:	331c      	adds	r3, #28
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f66:	78f9      	ldrb	r1, [r7, #3]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 fdf2 	bl	800bb56 <USBD_LL_Transmit>
 8009f72:	e003      	b.n	8009f7c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	e000      	b.n	8009f82 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009f80:	2302      	movs	r3, #2
  }
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f9c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 fe1d 	bl	800bbe2 <USBD_LL_GetRxDataSize>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00d      	beq.n	8009fd6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009fce:	4611      	mov	r1, r2
 8009fd0:	4798      	blx	r3

    return USBD_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	e000      	b.n	8009fd8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009fd6:	2302      	movs	r3, #2
  }
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d015      	beq.n	800a026 <USBD_CDC_EP0_RxReady+0x46>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a000:	2bff      	cmp	r3, #255	; 0xff
 800a002:	d010      	beq.n	800a026 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a012:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a01a:	b292      	uxth	r2, r2
 800a01c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	22ff      	movs	r2, #255	; 0xff
 800a022:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2243      	movs	r2, #67	; 0x43
 800a03c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a03e:	4b03      	ldr	r3, [pc, #12]	; (800a04c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a040:	4618      	mov	r0, r3
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	bc80      	pop	{r7}
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	200002c4 	.word	0x200002c4

0800a050 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2243      	movs	r2, #67	; 0x43
 800a05c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a05e:	4b03      	ldr	r3, [pc, #12]	; (800a06c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	bc80      	pop	{r7}
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	20000280 	.word	0x20000280

0800a070 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2243      	movs	r2, #67	; 0x43
 800a07c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a07e:	4b03      	ldr	r3, [pc, #12]	; (800a08c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	bc80      	pop	{r7}
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	20000308 	.word	0x20000308

0800a090 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	220a      	movs	r2, #10
 800a09c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a09e:	4b03      	ldr	r3, [pc, #12]	; (800a0ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bc80      	pop	{r7}
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	2000023c 	.word	0x2000023c

0800a0b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	683a      	ldr	r2, [r7, #0]
 800a0c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3714      	adds	r7, #20
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bc80      	pop	{r7}
 800a0da:	4770      	bx	lr

0800a0dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0fa:	88fa      	ldrh	r2, [r7, #6]
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	371c      	adds	r7, #28
 800a108:	46bd      	mov	sp, r7
 800a10a:	bc80      	pop	{r7}
 800a10c:	4770      	bx	lr

0800a10e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a10e:	b480      	push	{r7}
 800a110:	b085      	sub	sp, #20
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a11e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	bc80      	pop	{r7}
 800a132:	4770      	bx	lr

0800a134 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a142:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d01c      	beq.n	800a188 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a154:	2b00      	cmp	r3, #0
 800a156:	d115      	bne.n	800a184 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a176:	b29b      	uxth	r3, r3
 800a178:	2181      	movs	r1, #129	; 0x81
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f001 fceb 	bl	800bb56 <USBD_LL_Transmit>

      return USBD_OK;
 800a180:	2300      	movs	r3, #0
 800a182:	e002      	b.n	800a18a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a184:	2301      	movs	r3, #1
 800a186:	e000      	b.n	800a18a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a188:	2302      	movs	r3, #2
  }
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b084      	sub	sp, #16
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d017      	beq.n	800a1dc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	7c1b      	ldrb	r3, [r3, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d109      	bne.n	800a1c8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1be:	2101      	movs	r1, #1
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f001 fceb 	bl	800bb9c <USBD_LL_PrepareReceive>
 800a1c6:	e007      	b.n	800a1d8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1ce:	2340      	movs	r3, #64	; 0x40
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f001 fce2 	bl	800bb9c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	e000      	b.n	800a1de <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a1dc:	2302      	movs	r3, #2
  }
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	e01a      	b.n	800a234 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	79fa      	ldrb	r2, [r7, #7]
 800a22a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f001 fb4f 	bl	800b8d0 <USBD_LL_Init>

  return USBD_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d006      	beq.n	800a25e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a258:	2300      	movs	r3, #0
 800a25a:	73fb      	strb	r3, [r7, #15]
 800a25c:	e001      	b.n	800a262 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a25e:	2302      	movs	r3, #2
 800a260:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a262:	7bfb      	ldrb	r3, [r7, #15]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	bc80      	pop	{r7}
 800a26c:	4770      	bx	lr

0800a26e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b082      	sub	sp, #8
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f001 fb84 	bl	800b984 <USBD_LL_Start>

  return USBD_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a286:	b480      	push	{r7}
 800a288:	b083      	sub	sp, #12
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	bc80      	pop	{r7}
 800a298:	4770      	bx	lr

0800a29a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00c      	beq.n	800a2ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	78fa      	ldrb	r2, [r7, #3]
 800a2be:	4611      	mov	r1, r2
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	4798      	blx	r3
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	78fa      	ldrb	r2, [r7, #3]
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	4798      	blx	r3

  return USBD_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	4618      	mov	r0, r3
 800a312:	f000 fed8 	bl	800b0c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a324:	461a      	mov	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a332:	f003 031f 	and.w	r3, r3, #31
 800a336:	2b02      	cmp	r3, #2
 800a338:	d016      	beq.n	800a368 <USBD_LL_SetupStage+0x6a>
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d81c      	bhi.n	800a378 <USBD_LL_SetupStage+0x7a>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <USBD_LL_SetupStage+0x4a>
 800a342:	2b01      	cmp	r3, #1
 800a344:	d008      	beq.n	800a358 <USBD_LL_SetupStage+0x5a>
 800a346:	e017      	b.n	800a378 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f9cb 	bl	800a6ec <USBD_StdDevReq>
      break;
 800a356:	e01a      	b.n	800a38e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fa2d 	bl	800a7c0 <USBD_StdItfReq>
      break;
 800a366:	e012      	b.n	800a38e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fa6d 	bl	800a850 <USBD_StdEPReq>
      break;
 800a376:	e00a      	b.n	800a38e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a37e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a382:	b2db      	uxtb	r3, r3
 800a384:	4619      	mov	r1, r3
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f001 fb5c 	bl	800ba44 <USBD_LL_StallEP>
      break;
 800a38c:	bf00      	nop
  }

  return USBD_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	607a      	str	r2, [r7, #4]
 800a3a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a3a6:	7afb      	ldrb	r3, [r7, #11]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d14b      	bne.n	800a444 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a3b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d134      	bne.n	800a428 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	68da      	ldr	r2, [r3, #12]
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d919      	bls.n	800a3fe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	1ad2      	subs	r2, r2, r3
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	68da      	ldr	r2, [r3, #12]
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d203      	bcs.n	800a3ec <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	e002      	b.n	800a3f2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	6879      	ldr	r1, [r7, #4]
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f000 ff57 	bl	800b2aa <USBD_CtlContinueRx>
 800a3fc:	e038      	b.n	800a470 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a410:	2b03      	cmp	r3, #3
 800a412:	d105      	bne.n	800a420 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 ff54 	bl	800b2ce <USBD_CtlSendStatus>
 800a426:	e023      	b.n	800a470 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a42e:	2b05      	cmp	r3, #5
 800a430:	d11e      	bne.n	800a470 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a43a:	2100      	movs	r1, #0
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f001 fb01 	bl	800ba44 <USBD_LL_StallEP>
 800a442:	e015      	b.n	800a470 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00d      	beq.n	800a46c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a456:	2b03      	cmp	r3, #3
 800a458:	d108      	bne.n	800a46c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	7afa      	ldrb	r2, [r7, #11]
 800a464:	4611      	mov	r1, r2
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	4798      	blx	r3
 800a46a:	e001      	b.n	800a470 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a46c:	2302      	movs	r3, #2
 800a46e:	e000      	b.n	800a472 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3718      	adds	r7, #24
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b086      	sub	sp, #24
 800a47e:	af00      	add	r7, sp, #0
 800a480:	60f8      	str	r0, [r7, #12]
 800a482:	460b      	mov	r3, r1
 800a484:	607a      	str	r2, [r7, #4]
 800a486:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a488:	7afb      	ldrb	r3, [r7, #11]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d17f      	bne.n	800a58e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	3314      	adds	r3, #20
 800a492:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d15c      	bne.n	800a558 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	68da      	ldr	r2, [r3, #12]
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d915      	bls.n	800a4d6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	1ad2      	subs	r2, r2, r3
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	461a      	mov	r2, r3
 800a4c0:	6879      	ldr	r1, [r7, #4]
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f000 fec1 	bl	800b24a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f001 fb64 	bl	800bb9c <USBD_LL_PrepareReceive>
 800a4d4:	e04e      	b.n	800a574 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	6912      	ldr	r2, [r2, #16]
 800a4de:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4e2:	fb01 f202 	mul.w	r2, r1, r2
 800a4e6:	1a9b      	subs	r3, r3, r2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d11c      	bne.n	800a526 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d316      	bcc.n	800a526 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a502:	429a      	cmp	r2, r3
 800a504:	d20f      	bcs.n	800a526 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a506:	2200      	movs	r2, #0
 800a508:	2100      	movs	r1, #0
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f000 fe9d 	bl	800b24a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a518:	2300      	movs	r3, #0
 800a51a:	2200      	movs	r2, #0
 800a51c:	2100      	movs	r1, #0
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f001 fb3c 	bl	800bb9c <USBD_LL_PrepareReceive>
 800a524:	e026      	b.n	800a574 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00a      	beq.n	800a548 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a538:	2b03      	cmp	r3, #3
 800a53a:	d105      	bne.n	800a548 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a548:	2180      	movs	r1, #128	; 0x80
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f001 fa7a 	bl	800ba44 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f000 fecf 	bl	800b2f4 <USBD_CtlReceiveStatus>
 800a556:	e00d      	b.n	800a574 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a55e:	2b04      	cmp	r3, #4
 800a560:	d004      	beq.n	800a56c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d103      	bne.n	800a574 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a56c:	2180      	movs	r1, #128	; 0x80
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f001 fa68 	bl	800ba44 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d11d      	bne.n	800a5ba <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff fe81 	bl	800a286 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a58c:	e015      	b.n	800a5ba <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00d      	beq.n	800a5b6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a5a0:	2b03      	cmp	r3, #3
 800a5a2:	d108      	bne.n	800a5b6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	7afa      	ldrb	r2, [r7, #11]
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	4798      	blx	r3
 800a5b4:	e001      	b.n	800a5ba <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e000      	b.n	800a5bc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5cc:	2340      	movs	r3, #64	; 0x40
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f001 f9f1 	bl	800b9ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2240      	movs	r2, #64	; 0x40
 800a5e4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a5e8:	2340      	movs	r3, #64	; 0x40
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2180      	movs	r1, #128	; 0x80
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 f9e3 	bl	800b9ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2240      	movs	r2, #64	; 0x40
 800a5fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a624:	2b00      	cmp	r3, #0
 800a626:	d009      	beq.n	800a63c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	6852      	ldr	r2, [r2, #4]
 800a634:	b2d2      	uxtb	r2, r2
 800a636:	4611      	mov	r1, r2
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	4798      	blx	r3
  }

  return USBD_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a646:	b480      	push	{r7}
 800a648:	b083      	sub	sp, #12
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	460b      	mov	r3, r1
 800a650:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	78fa      	ldrb	r2, [r7, #3]
 800a656:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	bc80      	pop	{r7}
 800a662:	4770      	bx	lr

0800a664 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2204      	movs	r2, #4
 800a67c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	bc80      	pop	{r7}
 800a68a:	4770      	bx	lr

0800a68c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d105      	bne.n	800a6aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bc80      	pop	{r7}
 800a6b4:	4770      	bx	lr

0800a6b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d10b      	bne.n	800a6e0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d005      	beq.n	800a6e0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6da:	69db      	ldr	r3, [r3, #28]
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a702:	2b40      	cmp	r3, #64	; 0x40
 800a704:	d005      	beq.n	800a712 <USBD_StdDevReq+0x26>
 800a706:	2b40      	cmp	r3, #64	; 0x40
 800a708:	d84f      	bhi.n	800a7aa <USBD_StdDevReq+0xbe>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d009      	beq.n	800a722 <USBD_StdDevReq+0x36>
 800a70e:	2b20      	cmp	r3, #32
 800a710:	d14b      	bne.n	800a7aa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	6839      	ldr	r1, [r7, #0]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	4798      	blx	r3
      break;
 800a720:	e048      	b.n	800a7b4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	785b      	ldrb	r3, [r3, #1]
 800a726:	2b09      	cmp	r3, #9
 800a728:	d839      	bhi.n	800a79e <USBD_StdDevReq+0xb2>
 800a72a:	a201      	add	r2, pc, #4	; (adr r2, 800a730 <USBD_StdDevReq+0x44>)
 800a72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a730:	0800a781 	.word	0x0800a781
 800a734:	0800a795 	.word	0x0800a795
 800a738:	0800a79f 	.word	0x0800a79f
 800a73c:	0800a78b 	.word	0x0800a78b
 800a740:	0800a79f 	.word	0x0800a79f
 800a744:	0800a763 	.word	0x0800a763
 800a748:	0800a759 	.word	0x0800a759
 800a74c:	0800a79f 	.word	0x0800a79f
 800a750:	0800a777 	.word	0x0800a777
 800a754:	0800a76d 	.word	0x0800a76d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f9dc 	bl	800ab18 <USBD_GetDescriptor>
          break;
 800a760:	e022      	b.n	800a7a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a762:	6839      	ldr	r1, [r7, #0]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fb3f 	bl	800ade8 <USBD_SetAddress>
          break;
 800a76a:	e01d      	b.n	800a7a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fb7e 	bl	800ae70 <USBD_SetConfig>
          break;
 800a774:	e018      	b.n	800a7a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 fc07 	bl	800af8c <USBD_GetConfig>
          break;
 800a77e:	e013      	b.n	800a7a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a780:	6839      	ldr	r1, [r7, #0]
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fc37 	bl	800aff6 <USBD_GetStatus>
          break;
 800a788:	e00e      	b.n	800a7a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fc65 	bl	800b05c <USBD_SetFeature>
          break;
 800a792:	e009      	b.n	800a7a8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fc74 	bl	800b084 <USBD_ClrFeature>
          break;
 800a79c:	e004      	b.n	800a7a8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a79e:	6839      	ldr	r1, [r7, #0]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fccc 	bl	800b13e <USBD_CtlError>
          break;
 800a7a6:	bf00      	nop
      }
      break;
 800a7a8:	e004      	b.n	800a7b4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fcc6 	bl	800b13e <USBD_CtlError>
      break;
 800a7b2:	bf00      	nop
  }

  return ret;
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop

0800a7c0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7d6:	2b40      	cmp	r3, #64	; 0x40
 800a7d8:	d005      	beq.n	800a7e6 <USBD_StdItfReq+0x26>
 800a7da:	2b40      	cmp	r3, #64	; 0x40
 800a7dc:	d82e      	bhi.n	800a83c <USBD_StdItfReq+0x7c>
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <USBD_StdItfReq+0x26>
 800a7e2:	2b20      	cmp	r3, #32
 800a7e4:	d12a      	bne.n	800a83c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d81d      	bhi.n	800a82e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	889b      	ldrh	r3, [r3, #4]
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d813      	bhi.n	800a824 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	6839      	ldr	r1, [r7, #0]
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	4798      	blx	r3
 800a80a:	4603      	mov	r3, r0
 800a80c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	88db      	ldrh	r3, [r3, #6]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d110      	bne.n	800a838 <USBD_StdItfReq+0x78>
 800a816:	7bfb      	ldrb	r3, [r7, #15]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10d      	bne.n	800a838 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fd56 	bl	800b2ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a822:	e009      	b.n	800a838 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fc89 	bl	800b13e <USBD_CtlError>
          break;
 800a82c:	e004      	b.n	800a838 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a82e:	6839      	ldr	r1, [r7, #0]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f000 fc84 	bl	800b13e <USBD_CtlError>
          break;
 800a836:	e000      	b.n	800a83a <USBD_StdItfReq+0x7a>
          break;
 800a838:	bf00      	nop
      }
      break;
 800a83a:	e004      	b.n	800a846 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a83c:	6839      	ldr	r1, [r7, #0]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 fc7d 	bl	800b13e <USBD_CtlError>
      break;
 800a844:	bf00      	nop
  }

  return USBD_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	889b      	ldrh	r3, [r3, #4]
 800a862:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a86c:	2b40      	cmp	r3, #64	; 0x40
 800a86e:	d007      	beq.n	800a880 <USBD_StdEPReq+0x30>
 800a870:	2b40      	cmp	r3, #64	; 0x40
 800a872:	f200 8146 	bhi.w	800ab02 <USBD_StdEPReq+0x2b2>
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00a      	beq.n	800a890 <USBD_StdEPReq+0x40>
 800a87a:	2b20      	cmp	r3, #32
 800a87c:	f040 8141 	bne.w	800ab02 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
      break;
 800a88e:	e13d      	b.n	800ab0c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a898:	2b20      	cmp	r3, #32
 800a89a:	d10a      	bne.n	800a8b2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	4798      	blx	r3
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
 800a8b0:	e12d      	b.n	800ab0e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	d007      	beq.n	800a8ca <USBD_StdEPReq+0x7a>
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	f300 811b 	bgt.w	800aaf6 <USBD_StdEPReq+0x2a6>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d072      	beq.n	800a9aa <USBD_StdEPReq+0x15a>
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d03a      	beq.n	800a93e <USBD_StdEPReq+0xee>
 800a8c8:	e115      	b.n	800aaf6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d002      	beq.n	800a8da <USBD_StdEPReq+0x8a>
 800a8d4:	2b03      	cmp	r3, #3
 800a8d6:	d015      	beq.n	800a904 <USBD_StdEPReq+0xb4>
 800a8d8:	e02b      	b.n	800a932 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00c      	beq.n	800a8fa <USBD_StdEPReq+0xaa>
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	2b80      	cmp	r3, #128	; 0x80
 800a8e4:	d009      	beq.n	800a8fa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a8e6:	7bbb      	ldrb	r3, [r7, #14]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f001 f8aa 	bl	800ba44 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a8f0:	2180      	movs	r1, #128	; 0x80
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f001 f8a6 	bl	800ba44 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8f8:	e020      	b.n	800a93c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a8fa:	6839      	ldr	r1, [r7, #0]
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 fc1e 	bl	800b13e <USBD_CtlError>
              break;
 800a902:	e01b      	b.n	800a93c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	885b      	ldrh	r3, [r3, #2]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10e      	bne.n	800a92a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00b      	beq.n	800a92a <USBD_StdEPReq+0xda>
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	2b80      	cmp	r3, #128	; 0x80
 800a916:	d008      	beq.n	800a92a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	88db      	ldrh	r3, [r3, #6]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d104      	bne.n	800a92a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a920:	7bbb      	ldrb	r3, [r7, #14]
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f001 f88d 	bl	800ba44 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 fccf 	bl	800b2ce <USBD_CtlSendStatus>

              break;
 800a930:	e004      	b.n	800a93c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fc02 	bl	800b13e <USBD_CtlError>
              break;
 800a93a:	bf00      	nop
          }
          break;
 800a93c:	e0e0      	b.n	800ab00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a944:	2b02      	cmp	r3, #2
 800a946:	d002      	beq.n	800a94e <USBD_StdEPReq+0xfe>
 800a948:	2b03      	cmp	r3, #3
 800a94a:	d015      	beq.n	800a978 <USBD_StdEPReq+0x128>
 800a94c:	e026      	b.n	800a99c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00c      	beq.n	800a96e <USBD_StdEPReq+0x11e>
 800a954:	7bbb      	ldrb	r3, [r7, #14]
 800a956:	2b80      	cmp	r3, #128	; 0x80
 800a958:	d009      	beq.n	800a96e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a95a:	7bbb      	ldrb	r3, [r7, #14]
 800a95c:	4619      	mov	r1, r3
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f001 f870 	bl	800ba44 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a964:	2180      	movs	r1, #128	; 0x80
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f001 f86c 	bl	800ba44 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a96c:	e01c      	b.n	800a9a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fbe4 	bl	800b13e <USBD_CtlError>
              break;
 800a976:	e017      	b.n	800a9a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	885b      	ldrh	r3, [r3, #2]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d112      	bne.n	800a9a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a986:	2b00      	cmp	r3, #0
 800a988:	d004      	beq.n	800a994 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a98a:	7bbb      	ldrb	r3, [r7, #14]
 800a98c:	4619      	mov	r1, r3
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f001 f877 	bl	800ba82 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fc9a 	bl	800b2ce <USBD_CtlSendStatus>
              }
              break;
 800a99a:	e004      	b.n	800a9a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fbcd 	bl	800b13e <USBD_CtlError>
              break;
 800a9a4:	e000      	b.n	800a9a8 <USBD_StdEPReq+0x158>
              break;
 800a9a6:	bf00      	nop
          }
          break;
 800a9a8:	e0aa      	b.n	800ab00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d002      	beq.n	800a9ba <USBD_StdEPReq+0x16a>
 800a9b4:	2b03      	cmp	r3, #3
 800a9b6:	d032      	beq.n	800aa1e <USBD_StdEPReq+0x1ce>
 800a9b8:	e097      	b.n	800aaea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d007      	beq.n	800a9d0 <USBD_StdEPReq+0x180>
 800a9c0:	7bbb      	ldrb	r3, [r7, #14]
 800a9c2:	2b80      	cmp	r3, #128	; 0x80
 800a9c4:	d004      	beq.n	800a9d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fbb8 	bl	800b13e <USBD_CtlError>
                break;
 800a9ce:	e091      	b.n	800aaf4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	da0b      	bge.n	800a9f0 <USBD_StdEPReq+0x1a0>
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9de:	4613      	mov	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	3310      	adds	r3, #16
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	e00b      	b.n	800aa08 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
 800a9f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	4413      	add	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	4413      	add	r3, r2
 800aa06:	3304      	adds	r3, #4
 800aa08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	2202      	movs	r2, #2
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fbfb 	bl	800b212 <USBD_CtlSendData>
              break;
 800aa1c:	e06a      	b.n	800aaf4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	da11      	bge.n	800aa4a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa26:	7bbb      	ldrb	r3, [r7, #14]
 800aa28:	f003 020f 	and.w	r2, r3, #15
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	440b      	add	r3, r1
 800aa38:	3318      	adds	r3, #24
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d117      	bne.n	800aa70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fb7b 	bl	800b13e <USBD_CtlError>
                  break;
 800aa48:	e054      	b.n	800aaf4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	f003 020f 	and.w	r2, r3, #15
 800aa50:	6879      	ldr	r1, [r7, #4]
 800aa52:	4613      	mov	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	440b      	add	r3, r1
 800aa5c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d104      	bne.n	800aa70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fb68 	bl	800b13e <USBD_CtlError>
                  break;
 800aa6e:	e041      	b.n	800aaf4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	da0b      	bge.n	800aa90 <USBD_StdEPReq+0x240>
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	3310      	adds	r3, #16
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	e00b      	b.n	800aaa8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa96:	4613      	mov	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aaaa:	7bbb      	ldrb	r3, [r7, #14]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <USBD_StdEPReq+0x266>
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	2b80      	cmp	r3, #128	; 0x80
 800aab4:	d103      	bne.n	800aabe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	e00e      	b.n	800aadc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fffc 	bl	800bac0 <USBD_LL_IsStallEP>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2201      	movs	r2, #1
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	e002      	b.n	800aadc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2202      	movs	r2, #2
 800aae0:	4619      	mov	r1, r3
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fb95 	bl	800b212 <USBD_CtlSendData>
              break;
 800aae8:	e004      	b.n	800aaf4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fb26 	bl	800b13e <USBD_CtlError>
              break;
 800aaf2:	bf00      	nop
          }
          break;
 800aaf4:	e004      	b.n	800ab00 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fb20 	bl	800b13e <USBD_CtlError>
          break;
 800aafe:	bf00      	nop
      }
      break;
 800ab00:	e004      	b.n	800ab0c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fb1a 	bl	800b13e <USBD_CtlError>
      break;
 800ab0a:	bf00      	nop
  }

  return ret;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
	...

0800ab18 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab22:	2300      	movs	r3, #0
 800ab24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	885b      	ldrh	r3, [r3, #2]
 800ab32:	0a1b      	lsrs	r3, r3, #8
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	3b01      	subs	r3, #1
 800ab38:	2b06      	cmp	r3, #6
 800ab3a:	f200 8128 	bhi.w	800ad8e <USBD_GetDescriptor+0x276>
 800ab3e:	a201      	add	r2, pc, #4	; (adr r2, 800ab44 <USBD_GetDescriptor+0x2c>)
 800ab40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab44:	0800ab61 	.word	0x0800ab61
 800ab48:	0800ab79 	.word	0x0800ab79
 800ab4c:	0800abb9 	.word	0x0800abb9
 800ab50:	0800ad8f 	.word	0x0800ad8f
 800ab54:	0800ad8f 	.word	0x0800ad8f
 800ab58:	0800ad2f 	.word	0x0800ad2f
 800ab5c:	0800ad5b 	.word	0x0800ad5b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	7c12      	ldrb	r2, [r2, #16]
 800ab6c:	f107 0108 	add.w	r1, r7, #8
 800ab70:	4610      	mov	r0, r2
 800ab72:	4798      	blx	r3
 800ab74:	60f8      	str	r0, [r7, #12]
      break;
 800ab76:	e112      	b.n	800ad9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	7c1b      	ldrb	r3, [r3, #16]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10d      	bne.n	800ab9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab88:	f107 0208 	add.w	r2, r7, #8
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
 800ab90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3301      	adds	r3, #1
 800ab96:	2202      	movs	r2, #2
 800ab98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab9a:	e100      	b.n	800ad9e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba4:	f107 0208 	add.w	r2, r7, #8
 800aba8:	4610      	mov	r0, r2
 800abaa:	4798      	blx	r3
 800abac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3301      	adds	r3, #1
 800abb2:	2202      	movs	r2, #2
 800abb4:	701a      	strb	r2, [r3, #0]
      break;
 800abb6:	e0f2      	b.n	800ad9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	885b      	ldrh	r3, [r3, #2]
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b05      	cmp	r3, #5
 800abc0:	f200 80ac 	bhi.w	800ad1c <USBD_GetDescriptor+0x204>
 800abc4:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <USBD_GetDescriptor+0xb4>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800abe5 	.word	0x0800abe5
 800abd0:	0800ac19 	.word	0x0800ac19
 800abd4:	0800ac4d 	.word	0x0800ac4d
 800abd8:	0800ac81 	.word	0x0800ac81
 800abdc:	0800acb5 	.word	0x0800acb5
 800abe0:	0800ace9 	.word	0x0800ace9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00b      	beq.n	800ac08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	7c12      	ldrb	r2, [r2, #16]
 800abfc:	f107 0108 	add.w	r1, r7, #8
 800ac00:	4610      	mov	r0, r2
 800ac02:	4798      	blx	r3
 800ac04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac06:	e091      	b.n	800ad2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fa97 	bl	800b13e <USBD_CtlError>
            err++;
 800ac10:	7afb      	ldrb	r3, [r7, #11]
 800ac12:	3301      	adds	r3, #1
 800ac14:	72fb      	strb	r3, [r7, #11]
          break;
 800ac16:	e089      	b.n	800ad2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d00b      	beq.n	800ac3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	7c12      	ldrb	r2, [r2, #16]
 800ac30:	f107 0108 	add.w	r1, r7, #8
 800ac34:	4610      	mov	r0, r2
 800ac36:	4798      	blx	r3
 800ac38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac3a:	e077      	b.n	800ad2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac3c:	6839      	ldr	r1, [r7, #0]
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fa7d 	bl	800b13e <USBD_CtlError>
            err++;
 800ac44:	7afb      	ldrb	r3, [r7, #11]
 800ac46:	3301      	adds	r3, #1
 800ac48:	72fb      	strb	r3, [r7, #11]
          break;
 800ac4a:	e06f      	b.n	800ad2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00b      	beq.n	800ac70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	7c12      	ldrb	r2, [r2, #16]
 800ac64:	f107 0108 	add.w	r1, r7, #8
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
 800ac6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac6e:	e05d      	b.n	800ad2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fa63 	bl	800b13e <USBD_CtlError>
            err++;
 800ac78:	7afb      	ldrb	r3, [r7, #11]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac7e:	e055      	b.n	800ad2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00b      	beq.n	800aca4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	7c12      	ldrb	r2, [r2, #16]
 800ac98:	f107 0108 	add.w	r1, r7, #8
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
 800aca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aca2:	e043      	b.n	800ad2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fa49 	bl	800b13e <USBD_CtlError>
            err++;
 800acac:	7afb      	ldrb	r3, [r7, #11]
 800acae:	3301      	adds	r3, #1
 800acb0:	72fb      	strb	r3, [r7, #11]
          break;
 800acb2:	e03b      	b.n	800ad2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acba:	695b      	ldr	r3, [r3, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acc6:	695b      	ldr	r3, [r3, #20]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	7c12      	ldrb	r2, [r2, #16]
 800accc:	f107 0108 	add.w	r1, r7, #8
 800acd0:	4610      	mov	r0, r2
 800acd2:	4798      	blx	r3
 800acd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acd6:	e029      	b.n	800ad2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fa2f 	bl	800b13e <USBD_CtlError>
            err++;
 800ace0:	7afb      	ldrb	r3, [r7, #11]
 800ace2:	3301      	adds	r3, #1
 800ace4:	72fb      	strb	r3, [r7, #11]
          break;
 800ace6:	e021      	b.n	800ad2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00b      	beq.n	800ad0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800acfa:	699b      	ldr	r3, [r3, #24]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	7c12      	ldrb	r2, [r2, #16]
 800ad00:	f107 0108 	add.w	r1, r7, #8
 800ad04:	4610      	mov	r0, r2
 800ad06:	4798      	blx	r3
 800ad08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad0a:	e00f      	b.n	800ad2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad0c:	6839      	ldr	r1, [r7, #0]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 fa15 	bl	800b13e <USBD_CtlError>
            err++;
 800ad14:	7afb      	ldrb	r3, [r7, #11]
 800ad16:	3301      	adds	r3, #1
 800ad18:	72fb      	strb	r3, [r7, #11]
          break;
 800ad1a:	e007      	b.n	800ad2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa0d 	bl	800b13e <USBD_CtlError>
          err++;
 800ad24:	7afb      	ldrb	r3, [r7, #11]
 800ad26:	3301      	adds	r3, #1
 800ad28:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ad2a:	e038      	b.n	800ad9e <USBD_GetDescriptor+0x286>
 800ad2c:	e037      	b.n	800ad9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	7c1b      	ldrb	r3, [r3, #16]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d109      	bne.n	800ad4a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad3e:	f107 0208 	add.w	r2, r7, #8
 800ad42:	4610      	mov	r0, r2
 800ad44:	4798      	blx	r3
 800ad46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad48:	e029      	b.n	800ad9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f9f6 	bl	800b13e <USBD_CtlError>
        err++;
 800ad52:	7afb      	ldrb	r3, [r7, #11]
 800ad54:	3301      	adds	r3, #1
 800ad56:	72fb      	strb	r3, [r7, #11]
      break;
 800ad58:	e021      	b.n	800ad9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7c1b      	ldrb	r3, [r3, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d10d      	bne.n	800ad7e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6a:	f107 0208 	add.w	r2, r7, #8
 800ad6e:	4610      	mov	r0, r2
 800ad70:	4798      	blx	r3
 800ad72:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	3301      	adds	r3, #1
 800ad78:	2207      	movs	r2, #7
 800ad7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad7c:	e00f      	b.n	800ad9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f9dc 	bl	800b13e <USBD_CtlError>
        err++;
 800ad86:	7afb      	ldrb	r3, [r7, #11]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	72fb      	strb	r3, [r7, #11]
      break;
 800ad8c:	e007      	b.n	800ad9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f9d4 	bl	800b13e <USBD_CtlError>
      err++;
 800ad96:	7afb      	ldrb	r3, [r7, #11]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	72fb      	strb	r3, [r7, #11]
      break;
 800ad9c:	bf00      	nop
  }

  if (err != 0U)
 800ad9e:	7afb      	ldrb	r3, [r7, #11]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d11c      	bne.n	800adde <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ada4:	893b      	ldrh	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d011      	beq.n	800adce <USBD_GetDescriptor+0x2b6>
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	88db      	ldrh	r3, [r3, #6]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00d      	beq.n	800adce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	88da      	ldrh	r2, [r3, #6]
 800adb6:	893b      	ldrh	r3, [r7, #8]
 800adb8:	4293      	cmp	r3, r2
 800adba:	bf28      	it	cs
 800adbc:	4613      	movcs	r3, r2
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adc2:	893b      	ldrh	r3, [r7, #8]
 800adc4:	461a      	mov	r2, r3
 800adc6:	68f9      	ldr	r1, [r7, #12]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fa22 	bl	800b212 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	88db      	ldrh	r3, [r3, #6]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d104      	bne.n	800ade0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fa79 	bl	800b2ce <USBD_CtlSendStatus>
 800addc:	e000      	b.n	800ade0 <USBD_GetDescriptor+0x2c8>
    return;
 800adde:	bf00      	nop
    }
  }
}
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop

0800ade8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	889b      	ldrh	r3, [r3, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d130      	bne.n	800ae5c <USBD_SetAddress+0x74>
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	88db      	ldrh	r3, [r3, #6]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d12c      	bne.n	800ae5c <USBD_SetAddress+0x74>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	885b      	ldrh	r3, [r3, #2]
 800ae06:	2b7f      	cmp	r3, #127	; 0x7f
 800ae08:	d828      	bhi.n	800ae5c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	885b      	ldrh	r3, [r3, #2]
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	d104      	bne.n	800ae2a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f98b 	bl	800b13e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae28:	e01d      	b.n	800ae66 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	7bfa      	ldrb	r2, [r7, #15]
 800ae2e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae32:	7bfb      	ldrb	r3, [r7, #15]
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fe6e 	bl	800bb18 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fa46 	bl	800b2ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d004      	beq.n	800ae52 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae50:	e009      	b.n	800ae66 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae5a:	e004      	b.n	800ae66 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f96d 	bl	800b13e <USBD_CtlError>
  }
}
 800ae64:	bf00      	nop
 800ae66:	bf00      	nop
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
	...

0800ae70 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	885b      	ldrh	r3, [r3, #2]
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	4b41      	ldr	r3, [pc, #260]	; (800af88 <USBD_SetConfig+0x118>)
 800ae82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae84:	4b40      	ldr	r3, [pc, #256]	; (800af88 <USBD_SetConfig+0x118>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d904      	bls.n	800ae96 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f955 	bl	800b13e <USBD_CtlError>
 800ae94:	e075      	b.n	800af82 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d002      	beq.n	800aea6 <USBD_SetConfig+0x36>
 800aea0:	2b03      	cmp	r3, #3
 800aea2:	d023      	beq.n	800aeec <USBD_SetConfig+0x7c>
 800aea4:	e062      	b.n	800af6c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aea6:	4b38      	ldr	r3, [pc, #224]	; (800af88 <USBD_SetConfig+0x118>)
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d01a      	beq.n	800aee4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800aeae:	4b36      	ldr	r3, [pc, #216]	; (800af88 <USBD_SetConfig+0x118>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2203      	movs	r2, #3
 800aebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aec0:	4b31      	ldr	r3, [pc, #196]	; (800af88 <USBD_SetConfig+0x118>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff f9e7 	bl	800a29a <USBD_SetClassConfig>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d104      	bne.n	800aedc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aed2:	6839      	ldr	r1, [r7, #0]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f932 	bl	800b13e <USBD_CtlError>
            return;
 800aeda:	e052      	b.n	800af82 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f9f6 	bl	800b2ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aee2:	e04e      	b.n	800af82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f9f2 	bl	800b2ce <USBD_CtlSendStatus>
        break;
 800aeea:	e04a      	b.n	800af82 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aeec:	4b26      	ldr	r3, [pc, #152]	; (800af88 <USBD_SetConfig+0x118>)
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d112      	bne.n	800af1a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2202      	movs	r2, #2
 800aef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800aefc:	4b22      	ldr	r3, [pc, #136]	; (800af88 <USBD_SetConfig+0x118>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	461a      	mov	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800af06:	4b20      	ldr	r3, [pc, #128]	; (800af88 <USBD_SetConfig+0x118>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff f9e3 	bl	800a2d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f9db 	bl	800b2ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800af18:	e033      	b.n	800af82 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800af1a:	4b1b      	ldr	r3, [pc, #108]	; (800af88 <USBD_SetConfig+0x118>)
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	429a      	cmp	r2, r3
 800af26:	d01d      	beq.n	800af64 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	b2db      	uxtb	r3, r3
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7ff f9d1 	bl	800a2d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800af36:	4b14      	ldr	r3, [pc, #80]	; (800af88 <USBD_SetConfig+0x118>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af40:	4b11      	ldr	r3, [pc, #68]	; (800af88 <USBD_SetConfig+0x118>)
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f7ff f9a7 	bl	800a29a <USBD_SetClassConfig>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d104      	bne.n	800af5c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f8f2 	bl	800b13e <USBD_CtlError>
            return;
 800af5a:	e012      	b.n	800af82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f9b6 	bl	800b2ce <USBD_CtlSendStatus>
        break;
 800af62:	e00e      	b.n	800af82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f9b2 	bl	800b2ce <USBD_CtlSendStatus>
        break;
 800af6a:	e00a      	b.n	800af82 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f8e5 	bl	800b13e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800af74:	4b04      	ldr	r3, [pc, #16]	; (800af88 <USBD_SetConfig+0x118>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7ff f9ac 	bl	800a2d8 <USBD_ClrClassConfig>
        break;
 800af80:	bf00      	nop
    }
  }
}
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	20000c74 	.word	0x20000c74

0800af8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	88db      	ldrh	r3, [r3, #6]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d004      	beq.n	800afa8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f8cc 	bl	800b13e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afa6:	e022      	b.n	800afee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afae:	2b02      	cmp	r3, #2
 800afb0:	dc02      	bgt.n	800afb8 <USBD_GetConfig+0x2c>
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	dc03      	bgt.n	800afbe <USBD_GetConfig+0x32>
 800afb6:	e015      	b.n	800afe4 <USBD_GetConfig+0x58>
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d00b      	beq.n	800afd4 <USBD_GetConfig+0x48>
 800afbc:	e012      	b.n	800afe4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	3308      	adds	r3, #8
 800afc8:	2201      	movs	r2, #1
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f920 	bl	800b212 <USBD_CtlSendData>
        break;
 800afd2:	e00c      	b.n	800afee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3304      	adds	r3, #4
 800afd8:	2201      	movs	r2, #1
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f918 	bl	800b212 <USBD_CtlSendData>
        break;
 800afe2:	e004      	b.n	800afee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f8a9 	bl	800b13e <USBD_CtlError>
        break;
 800afec:	bf00      	nop
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b082      	sub	sp, #8
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b006:	3b01      	subs	r3, #1
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d81e      	bhi.n	800b04a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	88db      	ldrh	r3, [r3, #6]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d004      	beq.n	800b01e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f891 	bl	800b13e <USBD_CtlError>
        break;
 800b01c:	e01a      	b.n	800b054 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d005      	beq.n	800b03a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	f043 0202 	orr.w	r2, r3, #2
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	330c      	adds	r3, #12
 800b03e:	2202      	movs	r2, #2
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f8e5 	bl	800b212 <USBD_CtlSendData>
      break;
 800b048:	e004      	b.n	800b054 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 f876 	bl	800b13e <USBD_CtlError>
      break;
 800b052:	bf00      	nop
  }
}
 800b054:	bf00      	nop
 800b056:	3708      	adds	r7, #8
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	885b      	ldrh	r3, [r3, #2]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d106      	bne.n	800b07c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 f929 	bl	800b2ce <USBD_CtlSendStatus>
  }
}
 800b07c:	bf00      	nop
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b094:	3b01      	subs	r3, #1
 800b096:	2b02      	cmp	r3, #2
 800b098:	d80b      	bhi.n	800b0b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	885b      	ldrh	r3, [r3, #2]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d10c      	bne.n	800b0bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f90f 	bl	800b2ce <USBD_CtlSendStatus>
      }
      break;
 800b0b0:	e004      	b.n	800b0bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f842 	bl	800b13e <USBD_CtlError>
      break;
 800b0ba:	e000      	b.n	800b0be <USBD_ClrFeature+0x3a>
      break;
 800b0bc:	bf00      	nop
  }
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b083      	sub	sp, #12
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	781a      	ldrb	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	785a      	ldrb	r2, [r3, #1]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	3302      	adds	r3, #2
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	3303      	adds	r3, #3
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	021b      	lsls	r3, r3, #8
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	4413      	add	r3, r2
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	3304      	adds	r3, #4
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	b29a      	uxth	r2, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	3305      	adds	r3, #5
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	021b      	lsls	r3, r3, #8
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4413      	add	r3, r2
 800b112:	b29a      	uxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	3306      	adds	r3, #6
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	b29a      	uxth	r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	3307      	adds	r3, #7
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	b29b      	uxth	r3, r3
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	4413      	add	r3, r2
 800b12e:	b29a      	uxth	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	80da      	strh	r2, [r3, #6]

}
 800b134:	bf00      	nop
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	bc80      	pop	{r7}
 800b13c:	4770      	bx	lr

0800b13e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b13e:	b580      	push	{r7, lr}
 800b140:	b082      	sub	sp, #8
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
 800b146:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b148:	2180      	movs	r1, #128	; 0x80
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 fc7a 	bl	800ba44 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b150:	2100      	movs	r1, #0
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fc76 	bl	800ba44 <USBD_LL_StallEP>
}
 800b158:	bf00      	nop
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b086      	sub	sp, #24
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b16c:	2300      	movs	r3, #0
 800b16e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d032      	beq.n	800b1dc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 f834 	bl	800b1e4 <USBD_GetLen>
 800b17c:	4603      	mov	r3, r0
 800b17e:	3301      	adds	r3, #1
 800b180:	b29b      	uxth	r3, r3
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	b29a      	uxth	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b18a:	7dfb      	ldrb	r3, [r7, #23]
 800b18c:	1c5a      	adds	r2, r3, #1
 800b18e:	75fa      	strb	r2, [r7, #23]
 800b190:	461a      	mov	r2, r3
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	4413      	add	r3, r2
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	7812      	ldrb	r2, [r2, #0]
 800b19a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	1c5a      	adds	r2, r3, #1
 800b1a0:	75fa      	strb	r2, [r7, #23]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	2203      	movs	r2, #3
 800b1aa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b1ac:	e012      	b.n	800b1d4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	1c5a      	adds	r2, r3, #1
 800b1b2:	60fa      	str	r2, [r7, #12]
 800b1b4:	7dfa      	ldrb	r2, [r7, #23]
 800b1b6:	1c51      	adds	r1, r2, #1
 800b1b8:	75f9      	strb	r1, [r7, #23]
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	440a      	add	r2, r1
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b1c4:	7dfb      	ldrb	r3, [r7, #23]
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	75fa      	strb	r2, [r7, #23]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1e8      	bne.n	800b1ae <USBD_GetString+0x4e>
    }
  }
}
 800b1dc:	bf00      	nop
 800b1de:	3718      	adds	r7, #24
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b1f0:	e005      	b.n	800b1fe <USBD_GetLen+0x1a>
  {
    len++;
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1f5      	bne.n	800b1f2 <USBD_GetLen+0xe>
  }

  return len;
 800b206:	7bfb      	ldrb	r3, [r7, #15]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bc80      	pop	{r7}
 800b210:	4770      	bx	lr

0800b212 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b084      	sub	sp, #16
 800b216:	af00      	add	r7, sp, #0
 800b218:	60f8      	str	r0, [r7, #12]
 800b21a:	60b9      	str	r1, [r7, #8]
 800b21c:	4613      	mov	r3, r2
 800b21e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2202      	movs	r2, #2
 800b224:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b228:	88fa      	ldrh	r2, [r7, #6]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b22e:	88fa      	ldrh	r2, [r7, #6]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b234:	88fb      	ldrh	r3, [r7, #6]
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	2100      	movs	r1, #0
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f000 fc8b 	bl	800bb56 <USBD_LL_Transmit>

  return USBD_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b084      	sub	sp, #16
 800b24e:	af00      	add	r7, sp, #0
 800b250:	60f8      	str	r0, [r7, #12]
 800b252:	60b9      	str	r1, [r7, #8]
 800b254:	4613      	mov	r3, r2
 800b256:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b258:	88fb      	ldrh	r3, [r7, #6]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	2100      	movs	r1, #0
 800b25e:	68f8      	ldr	r0, [r7, #12]
 800b260:	f000 fc79 	bl	800bb56 <USBD_LL_Transmit>

  return USBD_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	60f8      	str	r0, [r7, #12]
 800b276:	60b9      	str	r1, [r7, #8]
 800b278:	4613      	mov	r3, r2
 800b27a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2203      	movs	r2, #3
 800b280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b284:	88fa      	ldrh	r2, [r7, #6]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b28c:	88fa      	ldrh	r2, [r7, #6]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b294:	88fb      	ldrh	r3, [r7, #6]
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	2100      	movs	r1, #0
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f000 fc7e 	bl	800bb9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b084      	sub	sp, #16
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2b8:	88fb      	ldrh	r3, [r7, #6]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	2100      	movs	r1, #0
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f000 fc6c 	bl	800bb9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b082      	sub	sp, #8
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2204      	movs	r2, #4
 800b2da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fc36 	bl	800bb56 <USBD_LL_Transmit>

  return USBD_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3708      	adds	r7, #8
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2205      	movs	r2, #5
 800b300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b304:	2300      	movs	r3, #0
 800b306:	2200      	movs	r2, #0
 800b308:	2100      	movs	r1, #0
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fc46 	bl	800bb9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b320:	2200      	movs	r2, #0
 800b322:	4912      	ldr	r1, [pc, #72]	; (800b36c <MX_USB_DEVICE_Init+0x50>)
 800b324:	4812      	ldr	r0, [pc, #72]	; (800b370 <MX_USB_DEVICE_Init+0x54>)
 800b326:	f7fe ff5e 	bl	800a1e6 <USBD_Init>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b330:	f7f5 ffa4 	bl	800127c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b334:	490f      	ldr	r1, [pc, #60]	; (800b374 <MX_USB_DEVICE_Init+0x58>)
 800b336:	480e      	ldr	r0, [pc, #56]	; (800b370 <MX_USB_DEVICE_Init+0x54>)
 800b338:	f7fe ff80 	bl	800a23c <USBD_RegisterClass>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b342:	f7f5 ff9b 	bl	800127c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b346:	490c      	ldr	r1, [pc, #48]	; (800b378 <MX_USB_DEVICE_Init+0x5c>)
 800b348:	4809      	ldr	r0, [pc, #36]	; (800b370 <MX_USB_DEVICE_Init+0x54>)
 800b34a:	f7fe feb1 	bl	800a0b0 <USBD_CDC_RegisterInterface>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b354:	f7f5 ff92 	bl	800127c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b358:	4805      	ldr	r0, [pc, #20]	; (800b370 <MX_USB_DEVICE_Init+0x54>)
 800b35a:	f7fe ff88 	bl	800a26e <USBD_Start>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b364:	f7f5 ff8a 	bl	800127c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b368:	bf00      	nop
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20000364 	.word	0x20000364
 800b370:	20000c78 	.word	0x20000c78
 800b374:	20000248 	.word	0x20000248
 800b378:	20000354 	.word	0x20000354

0800b37c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b380:	2200      	movs	r2, #0
 800b382:	4905      	ldr	r1, [pc, #20]	; (800b398 <CDC_Init_FS+0x1c>)
 800b384:	4805      	ldr	r0, [pc, #20]	; (800b39c <CDC_Init_FS+0x20>)
 800b386:	f7fe fea9 	bl	800a0dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b38a:	4905      	ldr	r1, [pc, #20]	; (800b3a0 <CDC_Init_FS+0x24>)
 800b38c:	4803      	ldr	r0, [pc, #12]	; (800b39c <CDC_Init_FS+0x20>)
 800b38e:	f7fe febe 	bl	800a10e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b392:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b394:	4618      	mov	r0, r3
 800b396:	bd80      	pop	{r7, pc}
 800b398:	20001324 	.word	0x20001324
 800b39c:	20000c78 	.word	0x20000c78
 800b3a0:	20000f3c 	.word	0x20000f3c

0800b3a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b3a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bc80      	pop	{r7}
 800b3b0:	4770      	bx	lr
	...

0800b3b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	6039      	str	r1, [r7, #0]
 800b3be:	71fb      	strb	r3, [r7, #7]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b3c4:	79fb      	ldrb	r3, [r7, #7]
 800b3c6:	2b23      	cmp	r3, #35	; 0x23
 800b3c8:	d85c      	bhi.n	800b484 <CDC_Control_FS+0xd0>
 800b3ca:	a201      	add	r2, pc, #4	; (adr r2, 800b3d0 <CDC_Control_FS+0x1c>)
 800b3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d0:	0800b485 	.word	0x0800b485
 800b3d4:	0800b485 	.word	0x0800b485
 800b3d8:	0800b485 	.word	0x0800b485
 800b3dc:	0800b485 	.word	0x0800b485
 800b3e0:	0800b485 	.word	0x0800b485
 800b3e4:	0800b485 	.word	0x0800b485
 800b3e8:	0800b485 	.word	0x0800b485
 800b3ec:	0800b485 	.word	0x0800b485
 800b3f0:	0800b485 	.word	0x0800b485
 800b3f4:	0800b485 	.word	0x0800b485
 800b3f8:	0800b485 	.word	0x0800b485
 800b3fc:	0800b485 	.word	0x0800b485
 800b400:	0800b485 	.word	0x0800b485
 800b404:	0800b485 	.word	0x0800b485
 800b408:	0800b485 	.word	0x0800b485
 800b40c:	0800b485 	.word	0x0800b485
 800b410:	0800b485 	.word	0x0800b485
 800b414:	0800b485 	.word	0x0800b485
 800b418:	0800b485 	.word	0x0800b485
 800b41c:	0800b485 	.word	0x0800b485
 800b420:	0800b485 	.word	0x0800b485
 800b424:	0800b485 	.word	0x0800b485
 800b428:	0800b485 	.word	0x0800b485
 800b42c:	0800b485 	.word	0x0800b485
 800b430:	0800b485 	.word	0x0800b485
 800b434:	0800b485 	.word	0x0800b485
 800b438:	0800b485 	.word	0x0800b485
 800b43c:	0800b485 	.word	0x0800b485
 800b440:	0800b485 	.word	0x0800b485
 800b444:	0800b485 	.word	0x0800b485
 800b448:	0800b485 	.word	0x0800b485
 800b44c:	0800b485 	.word	0x0800b485
 800b450:	0800b461 	.word	0x0800b461
 800b454:	0800b473 	.word	0x0800b473
 800b458:	0800b485 	.word	0x0800b485
 800b45c:	0800b485 	.word	0x0800b485
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800b460:	4b0c      	ldr	r3, [pc, #48]	; (800b494 <CDC_Control_FS+0xe0>)
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	6810      	ldr	r0, [r2, #0]
 800b466:	6018      	str	r0, [r3, #0]
 800b468:	8891      	ldrh	r1, [r2, #4]
 800b46a:	7992      	ldrb	r2, [r2, #6]
 800b46c:	8099      	strh	r1, [r3, #4]
 800b46e:	719a      	strb	r2, [r3, #6]
    break;
 800b470:	e009      	b.n	800b486 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	4a07      	ldr	r2, [pc, #28]	; (800b494 <CDC_Control_FS+0xe0>)
 800b476:	6810      	ldr	r0, [r2, #0]
 800b478:	6018      	str	r0, [r3, #0]
 800b47a:	8891      	ldrh	r1, [r2, #4]
 800b47c:	7992      	ldrb	r2, [r2, #6]
 800b47e:	8099      	strh	r1, [r3, #4]
 800b480:	719a      	strb	r2, [r3, #6]
    break;
 800b482:	e000      	b.n	800b486 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b484:	bf00      	nop
  }

  return (USBD_OK);
 800b486:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b488:	4618      	mov	r0, r3
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bc80      	pop	{r7}
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	2000034c 	.word	0x2000034c

0800b498 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d005      	beq.n	800b4b6 <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7f5 f869 	bl	8000588 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b4b6:	6879      	ldr	r1, [r7, #4]
 800b4b8:	4805      	ldr	r0, [pc, #20]	; (800b4d0 <CDC_Receive_FS+0x38>)
 800b4ba:	f7fe fe28 	bl	800a10e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4be:	4804      	ldr	r0, [pc, #16]	; (800b4d0 <CDC_Receive_FS+0x38>)
 800b4c0:	f7fe fe67 	bl	800a192 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b4c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20000c78 	.word	0x20000c78

0800b4d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b4e4:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <CDC_Transmit_FS+0x48>)
 800b4e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e00b      	b.n	800b512 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b4fa:	887b      	ldrh	r3, [r7, #2]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6879      	ldr	r1, [r7, #4]
 800b500:	4806      	ldr	r0, [pc, #24]	; (800b51c <CDC_Transmit_FS+0x48>)
 800b502:	f7fe fdeb 	bl	800a0dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b506:	4805      	ldr	r0, [pc, #20]	; (800b51c <CDC_Transmit_FS+0x48>)
 800b508:	f7fe fe14 	bl	800a134 <USBD_CDC_TransmitPacket>
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b510:	7bfb      	ldrb	r3, [r7, #15]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	20000c78 	.word	0x20000c78

0800b520 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	4603      	mov	r3, r0
 800b528:	6039      	str	r1, [r7, #0]
 800b52a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2212      	movs	r2, #18
 800b530:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b532:	4b03      	ldr	r3, [pc, #12]	; (800b540 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b534:	4618      	mov	r0, r3
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	bc80      	pop	{r7}
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	20000380 	.word	0x20000380

0800b544 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	6039      	str	r1, [r7, #0]
 800b54e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	2204      	movs	r2, #4
 800b554:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b556:	4b03      	ldr	r3, [pc, #12]	; (800b564 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b558:	4618      	mov	r0, r3
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bc80      	pop	{r7}
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	20000394 	.word	0x20000394

0800b568 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	4603      	mov	r3, r0
 800b570:	6039      	str	r1, [r7, #0]
 800b572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b574:	79fb      	ldrb	r3, [r7, #7]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d105      	bne.n	800b586 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	4907      	ldr	r1, [pc, #28]	; (800b59c <USBD_FS_ProductStrDescriptor+0x34>)
 800b57e:	4808      	ldr	r0, [pc, #32]	; (800b5a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b580:	f7ff fdee 	bl	800b160 <USBD_GetString>
 800b584:	e004      	b.n	800b590 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	4904      	ldr	r1, [pc, #16]	; (800b59c <USBD_FS_ProductStrDescriptor+0x34>)
 800b58a:	4805      	ldr	r0, [pc, #20]	; (800b5a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b58c:	f7ff fde8 	bl	800b160 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b590:	4b02      	ldr	r3, [pc, #8]	; (800b59c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	2000170c 	.word	0x2000170c
 800b5a0:	0800c720 	.word	0x0800c720

0800b5a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	6039      	str	r1, [r7, #0]
 800b5ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	4904      	ldr	r1, [pc, #16]	; (800b5c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b5b4:	4804      	ldr	r0, [pc, #16]	; (800b5c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b5b6:	f7ff fdd3 	bl	800b160 <USBD_GetString>
  return USBD_StrDesc;
 800b5ba:	4b02      	ldr	r3, [pc, #8]	; (800b5c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	2000170c 	.word	0x2000170c
 800b5c8:	0800c734 	.word	0x0800c734

0800b5cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	221a      	movs	r2, #26
 800b5dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b5de:	f000 f843 	bl	800b668 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b5e2:	4b02      	ldr	r3, [pc, #8]	; (800b5ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	20000398 	.word	0x20000398

0800b5f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	6039      	str	r1, [r7, #0]
 800b5fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d105      	bne.n	800b60e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	4907      	ldr	r1, [pc, #28]	; (800b624 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b606:	4808      	ldr	r0, [pc, #32]	; (800b628 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b608:	f7ff fdaa 	bl	800b160 <USBD_GetString>
 800b60c:	e004      	b.n	800b618 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	4904      	ldr	r1, [pc, #16]	; (800b624 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b612:	4805      	ldr	r0, [pc, #20]	; (800b628 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b614:	f7ff fda4 	bl	800b160 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b618:	4b02      	ldr	r3, [pc, #8]	; (800b624 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3708      	adds	r7, #8
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	2000170c 	.word	0x2000170c
 800b628:	0800c73c 	.word	0x0800c73c

0800b62c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	4603      	mov	r3, r0
 800b634:	6039      	str	r1, [r7, #0]
 800b636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b638:	79fb      	ldrb	r3, [r7, #7]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d105      	bne.n	800b64a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	4907      	ldr	r1, [pc, #28]	; (800b660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b642:	4808      	ldr	r0, [pc, #32]	; (800b664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b644:	f7ff fd8c 	bl	800b160 <USBD_GetString>
 800b648:	e004      	b.n	800b654 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	4904      	ldr	r1, [pc, #16]	; (800b660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b64e:	4805      	ldr	r0, [pc, #20]	; (800b664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b650:	f7ff fd86 	bl	800b160 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b654:	4b02      	ldr	r3, [pc, #8]	; (800b660 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b656:	4618      	mov	r0, r3
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	2000170c 	.word	0x2000170c
 800b664:	0800c748 	.word	0x0800c748

0800b668 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b66e:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <Get_SerialNum+0x44>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b674:	4b0e      	ldr	r3, [pc, #56]	; (800b6b0 <Get_SerialNum+0x48>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b67a:	4b0e      	ldr	r3, [pc, #56]	; (800b6b4 <Get_SerialNum+0x4c>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4413      	add	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d009      	beq.n	800b6a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b68e:	2208      	movs	r2, #8
 800b690:	4909      	ldr	r1, [pc, #36]	; (800b6b8 <Get_SerialNum+0x50>)
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f000 f814 	bl	800b6c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b698:	2204      	movs	r2, #4
 800b69a:	4908      	ldr	r1, [pc, #32]	; (800b6bc <Get_SerialNum+0x54>)
 800b69c:	68b8      	ldr	r0, [r7, #8]
 800b69e:	f000 f80f 	bl	800b6c0 <IntToUnicode>
  }
}
 800b6a2:	bf00      	nop
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	1ffff7e8 	.word	0x1ffff7e8
 800b6b0:	1ffff7ec 	.word	0x1ffff7ec
 800b6b4:	1ffff7f0 	.word	0x1ffff7f0
 800b6b8:	2000039a 	.word	0x2000039a
 800b6bc:	200003aa 	.word	0x200003aa

0800b6c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b087      	sub	sp, #28
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	75fb      	strb	r3, [r7, #23]
 800b6d6:	e027      	b.n	800b728 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	0f1b      	lsrs	r3, r3, #28
 800b6dc:	2b09      	cmp	r3, #9
 800b6de:	d80b      	bhi.n	800b6f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	0f1b      	lsrs	r3, r3, #28
 800b6e4:	b2da      	uxtb	r2, r3
 800b6e6:	7dfb      	ldrb	r3, [r7, #23]
 800b6e8:	005b      	lsls	r3, r3, #1
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	440b      	add	r3, r1
 800b6f0:	3230      	adds	r2, #48	; 0x30
 800b6f2:	b2d2      	uxtb	r2, r2
 800b6f4:	701a      	strb	r2, [r3, #0]
 800b6f6:	e00a      	b.n	800b70e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	0f1b      	lsrs	r3, r3, #28
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	4619      	mov	r1, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	440b      	add	r3, r1
 800b708:	3237      	adds	r2, #55	; 0x37
 800b70a:	b2d2      	uxtb	r2, r2
 800b70c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	011b      	lsls	r3, r3, #4
 800b712:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b714:	7dfb      	ldrb	r3, [r7, #23]
 800b716:	005b      	lsls	r3, r3, #1
 800b718:	3301      	adds	r3, #1
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	4413      	add	r3, r2
 800b71e:	2200      	movs	r2, #0
 800b720:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b722:	7dfb      	ldrb	r3, [r7, #23]
 800b724:	3301      	adds	r3, #1
 800b726:	75fb      	strb	r3, [r7, #23]
 800b728:	7dfa      	ldrb	r2, [r7, #23]
 800b72a:	79fb      	ldrb	r3, [r7, #7]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d3d3      	bcc.n	800b6d8 <IntToUnicode+0x18>
  }
}
 800b730:	bf00      	nop
 800b732:	bf00      	nop
 800b734:	371c      	adds	r7, #28
 800b736:	46bd      	mov	sp, r7
 800b738:	bc80      	pop	{r7}
 800b73a:	4770      	bx	lr

0800b73c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b084      	sub	sp, #16
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a11      	ldr	r2, [pc, #68]	; (800b790 <HAL_PCD_MspInit+0x54>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d11b      	bne.n	800b786 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b74e:	4b11      	ldr	r3, [pc, #68]	; (800b794 <HAL_PCD_MspInit+0x58>)
 800b750:	69db      	ldr	r3, [r3, #28]
 800b752:	4a10      	ldr	r2, [pc, #64]	; (800b794 <HAL_PCD_MspInit+0x58>)
 800b754:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b758:	61d3      	str	r3, [r2, #28]
 800b75a:	4b0e      	ldr	r3, [pc, #56]	; (800b794 <HAL_PCD_MspInit+0x58>)
 800b75c:	69db      	ldr	r3, [r3, #28]
 800b75e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b762:	60fb      	str	r3, [r7, #12]
 800b764:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800b766:	2200      	movs	r2, #0
 800b768:	2100      	movs	r1, #0
 800b76a:	2013      	movs	r0, #19
 800b76c:	f7f8 fa93 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800b770:	2013      	movs	r0, #19
 800b772:	f7f8 faac 	bl	8003cce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b776:	2200      	movs	r2, #0
 800b778:	2100      	movs	r1, #0
 800b77a:	2014      	movs	r0, #20
 800b77c:	f7f8 fa8b 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b780:	2014      	movs	r0, #20
 800b782:	f7f8 faa4 	bl	8003cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b786:	bf00      	nop
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	40005c00 	.word	0x40005c00
 800b794:	40021000 	.word	0x40021000

0800b798 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	4610      	mov	r0, r2
 800b7b0:	f7fe fda5 	bl	800a2fe <USBD_LL_SetupStage>
}
 800b7b4:	bf00      	nop
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b7ce:	78fa      	ldrb	r2, [r7, #3]
 800b7d0:	6879      	ldr	r1, [r7, #4]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	440b      	add	r3, r1
 800b7dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	78fb      	ldrb	r3, [r7, #3]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	f7fe fdd7 	bl	800a398 <USBD_LL_DataOutStage>
}
 800b7ea:	bf00      	nop
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b804:	78fa      	ldrb	r2, [r7, #3]
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	4613      	mov	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	4413      	add	r3, r2
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	440b      	add	r3, r1
 800b812:	333c      	adds	r3, #60	; 0x3c
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	78fb      	ldrb	r3, [r7, #3]
 800b818:	4619      	mov	r1, r3
 800b81a:	f7fe fe2e 	bl	800a47a <USBD_LL_DataInStage>
}
 800b81e:	bf00      	nop
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b082      	sub	sp, #8
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe ff3e 	bl	800a6b6 <USBD_LL_SOF>
}
 800b83a:	bf00      	nop
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b84a:	2301      	movs	r3, #1
 800b84c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	2b02      	cmp	r3, #2
 800b854:	d001      	beq.n	800b85a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b856:	f7f5 fd11 	bl	800127c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b860:	7bfa      	ldrb	r2, [r7, #15]
 800b862:	4611      	mov	r1, r2
 800b864:	4618      	mov	r0, r3
 800b866:	f7fe feee 	bl	800a646 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b870:	4618      	mov	r0, r3
 800b872:	f7fe fea7 	bl	800a5c4 <USBD_LL_Reset>
}
 800b876:	bf00      	nop
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe fee8 	bl	800a664 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d005      	beq.n	800b8a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b89c:	4b04      	ldr	r3, [pc, #16]	; (800b8b0 <HAL_PCD_SuspendCallback+0x30>)
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	4a03      	ldr	r2, [pc, #12]	; (800b8b0 <HAL_PCD_SuspendCallback+0x30>)
 800b8a2:	f043 0306 	orr.w	r3, r3, #6
 800b8a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b8a8:	bf00      	nop
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	e000ed00 	.word	0xe000ed00

0800b8b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fe fee2 	bl	800a68c <USBD_LL_Resume>
}
 800b8c8:	bf00      	nop
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}

0800b8d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b8d8:	4a28      	ldr	r2, [pc, #160]	; (800b97c <USBD_LL_Init+0xac>)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a26      	ldr	r2, [pc, #152]	; (800b97c <USBD_LL_Init+0xac>)
 800b8e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b8e8:	4b24      	ldr	r3, [pc, #144]	; (800b97c <USBD_LL_Init+0xac>)
 800b8ea:	4a25      	ldr	r2, [pc, #148]	; (800b980 <USBD_LL_Init+0xb0>)
 800b8ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b8ee:	4b23      	ldr	r3, [pc, #140]	; (800b97c <USBD_LL_Init+0xac>)
 800b8f0:	2208      	movs	r2, #8
 800b8f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b8f4:	4b21      	ldr	r3, [pc, #132]	; (800b97c <USBD_LL_Init+0xac>)
 800b8f6:	2202      	movs	r2, #2
 800b8f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b8fa:	4b20      	ldr	r3, [pc, #128]	; (800b97c <USBD_LL_Init+0xac>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b900:	4b1e      	ldr	r3, [pc, #120]	; (800b97c <USBD_LL_Init+0xac>)
 800b902:	2200      	movs	r2, #0
 800b904:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b906:	4b1d      	ldr	r3, [pc, #116]	; (800b97c <USBD_LL_Init+0xac>)
 800b908:	2200      	movs	r2, #0
 800b90a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b90c:	481b      	ldr	r0, [pc, #108]	; (800b97c <USBD_LL_Init+0xac>)
 800b90e:	f7f8 fbd9 	bl	80040c4 <HAL_PCD_Init>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b918:	f7f5 fcb0 	bl	800127c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b922:	2318      	movs	r3, #24
 800b924:	2200      	movs	r2, #0
 800b926:	2100      	movs	r1, #0
 800b928:	f7fa f84d 	bl	80059c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b932:	2358      	movs	r3, #88	; 0x58
 800b934:	2200      	movs	r2, #0
 800b936:	2180      	movs	r1, #128	; 0x80
 800b938:	f7fa f845 	bl	80059c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b942:	23c0      	movs	r3, #192	; 0xc0
 800b944:	2200      	movs	r2, #0
 800b946:	2181      	movs	r1, #129	; 0x81
 800b948:	f7fa f83d 	bl	80059c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b952:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b956:	2200      	movs	r2, #0
 800b958:	2101      	movs	r1, #1
 800b95a:	f7fa f834 	bl	80059c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b964:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b968:	2200      	movs	r2, #0
 800b96a:	2182      	movs	r1, #130	; 0x82
 800b96c:	f7fa f82b 	bl	80059c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	2000190c 	.word	0x2000190c
 800b980:	40005c00 	.word	0x40005c00

0800b984 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f8 fc9d 	bl	80042da <HAL_PCD_Start>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 f94e 	bl	800bc48 <USBD_Get_USB_Status>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b084      	sub	sp, #16
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
 800b9c2:	4608      	mov	r0, r1
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	70fb      	strb	r3, [r7, #3]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	70bb      	strb	r3, [r7, #2]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b9e2:	78bb      	ldrb	r3, [r7, #2]
 800b9e4:	883a      	ldrh	r2, [r7, #0]
 800b9e6:	78f9      	ldrb	r1, [r7, #3]
 800b9e8:	f7f8 fe15 	bl	8004616 <HAL_PCD_EP_Open>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 f928 	bl	800bc48 <USBD_Get_USB_Status>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	460b      	mov	r3, r1
 800ba10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba20:	78fa      	ldrb	r2, [r7, #3]
 800ba22:	4611      	mov	r1, r2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f8 fe5c 	bl	80046e2 <HAL_PCD_EP_Close>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 f909 	bl	800bc48 <USBD_Get_USB_Status>
 800ba36:	4603      	mov	r3, r0
 800ba38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba5e:	78fa      	ldrb	r2, [r7, #3]
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7f8 ff1c 	bl	80048a0 <HAL_PCD_EP_SetStall>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 f8ea 	bl	800bc48 <USBD_Get_USB_Status>
 800ba74:	4603      	mov	r3, r0
 800ba76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b084      	sub	sp, #16
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba9c:	78fa      	ldrb	r2, [r7, #3]
 800ba9e:	4611      	mov	r1, r2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7f8 ff5d 	bl	8004960 <HAL_PCD_EP_ClrStall>
 800baa6:	4603      	mov	r3, r0
 800baa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
 800baac:	4618      	mov	r0, r3
 800baae:	f000 f8cb 	bl	800bc48 <USBD_Get_USB_Status>
 800bab2:	4603      	mov	r3, r0
 800bab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bab6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bad2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	da0c      	bge.n	800baf6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae2:	68f9      	ldr	r1, [r7, #12]
 800bae4:	1c5a      	adds	r2, r3, #1
 800bae6:	4613      	mov	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	00db      	lsls	r3, r3, #3
 800baee:	440b      	add	r3, r1
 800baf0:	3302      	adds	r3, #2
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	e00b      	b.n	800bb0e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800baf6:	78fb      	ldrb	r3, [r7, #3]
 800baf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bafc:	68f9      	ldr	r1, [r7, #12]
 800bafe:	4613      	mov	r3, r2
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	4413      	add	r3, r2
 800bb04:	00db      	lsls	r3, r3, #3
 800bb06:	440b      	add	r3, r1
 800bb08:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800bb0c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bc80      	pop	{r7}
 800bb16:	4770      	bx	lr

0800bb18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb32:	78fa      	ldrb	r2, [r7, #3]
 800bb34:	4611      	mov	r1, r2
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7f8 fd48 	bl	80045cc <HAL_PCD_SetAddress>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
 800bb42:	4618      	mov	r0, r3
 800bb44:	f000 f880 	bl	800bc48 <USBD_Get_USB_Status>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b086      	sub	sp, #24
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	461a      	mov	r2, r3
 800bb62:	460b      	mov	r3, r1
 800bb64:	72fb      	strb	r3, [r7, #11]
 800bb66:	4613      	mov	r3, r2
 800bb68:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb78:	893b      	ldrh	r3, [r7, #8]
 800bb7a:	7af9      	ldrb	r1, [r7, #11]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	f7f8 fe4c 	bl	800481a <HAL_PCD_EP_Transmit>
 800bb82:	4603      	mov	r3, r0
 800bb84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 f85d 	bl	800bc48 <USBD_Get_USB_Status>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb92:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3718      	adds	r7, #24
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	607a      	str	r2, [r7, #4]
 800bba6:	461a      	mov	r2, r3
 800bba8:	460b      	mov	r3, r1
 800bbaa:	72fb      	strb	r3, [r7, #11]
 800bbac:	4613      	mov	r3, r2
 800bbae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bbbe:	893b      	ldrh	r3, [r7, #8]
 800bbc0:	7af9      	ldrb	r1, [r7, #11]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	f7f8 fdd5 	bl	8004772 <HAL_PCD_EP_Receive>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 f83a 	bl	800bc48 <USBD_Get_USB_Status>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	460b      	mov	r3, r1
 800bbec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbf4:	78fa      	ldrb	r2, [r7, #3]
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7f8 fdf7 	bl	80047ec <HAL_PCD_EP_GetRxCount>
 800bbfe:	4603      	mov	r3, r0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc10:	4b02      	ldr	r3, [pc, #8]	; (800bc1c <USBD_static_malloc+0x14>)
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	370c      	adds	r7, #12
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bc80      	pop	{r7}
 800bc1a:	4770      	bx	lr
 800bc1c:	20001bf8 	.word	0x20001bf8

0800bc20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]

}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bc80      	pop	{r7}
 800bc30:	4770      	bx	lr

0800bc32 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc32:	b480      	push	{r7}
 800bc34:	b083      	sub	sp, #12
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bc3e:	bf00      	nop
 800bc40:	370c      	adds	r7, #12
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bc80      	pop	{r7}
 800bc46:	4770      	bx	lr

0800bc48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc52:	2300      	movs	r3, #0
 800bc54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d817      	bhi.n	800bc8c <USBD_Get_USB_Status+0x44>
 800bc5c:	a201      	add	r2, pc, #4	; (adr r2, 800bc64 <USBD_Get_USB_Status+0x1c>)
 800bc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc62:	bf00      	nop
 800bc64:	0800bc75 	.word	0x0800bc75
 800bc68:	0800bc7b 	.word	0x0800bc7b
 800bc6c:	0800bc81 	.word	0x0800bc81
 800bc70:	0800bc87 	.word	0x0800bc87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73fb      	strb	r3, [r7, #15]
    break;
 800bc78:	e00b      	b.n	800bc92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc7a:	2302      	movs	r3, #2
 800bc7c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc7e:	e008      	b.n	800bc92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc80:	2301      	movs	r3, #1
 800bc82:	73fb      	strb	r3, [r7, #15]
    break;
 800bc84:	e005      	b.n	800bc92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc86:	2302      	movs	r3, #2
 800bc88:	73fb      	strb	r3, [r7, #15]
    break;
 800bc8a:	e002      	b.n	800bc92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc8c:	2302      	movs	r3, #2
 800bc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc90:	bf00      	nop
  }
  return usb_status;
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3714      	adds	r7, #20
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bc80      	pop	{r7}
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop

0800bca0 <__errno>:
 800bca0:	4b01      	ldr	r3, [pc, #4]	; (800bca8 <__errno+0x8>)
 800bca2:	6818      	ldr	r0, [r3, #0]
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	200003b4 	.word	0x200003b4

0800bcac <__libc_init_array>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	2600      	movs	r6, #0
 800bcb0:	4d0c      	ldr	r5, [pc, #48]	; (800bce4 <__libc_init_array+0x38>)
 800bcb2:	4c0d      	ldr	r4, [pc, #52]	; (800bce8 <__libc_init_array+0x3c>)
 800bcb4:	1b64      	subs	r4, r4, r5
 800bcb6:	10a4      	asrs	r4, r4, #2
 800bcb8:	42a6      	cmp	r6, r4
 800bcba:	d109      	bne.n	800bcd0 <__libc_init_array+0x24>
 800bcbc:	f000 fcd6 	bl	800c66c <_init>
 800bcc0:	2600      	movs	r6, #0
 800bcc2:	4d0a      	ldr	r5, [pc, #40]	; (800bcec <__libc_init_array+0x40>)
 800bcc4:	4c0a      	ldr	r4, [pc, #40]	; (800bcf0 <__libc_init_array+0x44>)
 800bcc6:	1b64      	subs	r4, r4, r5
 800bcc8:	10a4      	asrs	r4, r4, #2
 800bcca:	42a6      	cmp	r6, r4
 800bccc:	d105      	bne.n	800bcda <__libc_init_array+0x2e>
 800bcce:	bd70      	pop	{r4, r5, r6, pc}
 800bcd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcd4:	4798      	blx	r3
 800bcd6:	3601      	adds	r6, #1
 800bcd8:	e7ee      	b.n	800bcb8 <__libc_init_array+0xc>
 800bcda:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcde:	4798      	blx	r3
 800bce0:	3601      	adds	r6, #1
 800bce2:	e7f2      	b.n	800bcca <__libc_init_array+0x1e>
 800bce4:	0800d5f0 	.word	0x0800d5f0
 800bce8:	0800d5f0 	.word	0x0800d5f0
 800bcec:	0800d5f0 	.word	0x0800d5f0
 800bcf0:	0800d5f4 	.word	0x0800d5f4

0800bcf4 <memcpy>:
 800bcf4:	440a      	add	r2, r1
 800bcf6:	4291      	cmp	r1, r2
 800bcf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bcfc:	d100      	bne.n	800bd00 <memcpy+0xc>
 800bcfe:	4770      	bx	lr
 800bd00:	b510      	push	{r4, lr}
 800bd02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd06:	4291      	cmp	r1, r2
 800bd08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd0c:	d1f9      	bne.n	800bd02 <memcpy+0xe>
 800bd0e:	bd10      	pop	{r4, pc}

0800bd10 <memset>:
 800bd10:	4603      	mov	r3, r0
 800bd12:	4402      	add	r2, r0
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d100      	bne.n	800bd1a <memset+0xa>
 800bd18:	4770      	bx	lr
 800bd1a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd1e:	e7f9      	b.n	800bd14 <memset+0x4>

0800bd20 <sniprintf>:
 800bd20:	b40c      	push	{r2, r3}
 800bd22:	b530      	push	{r4, r5, lr}
 800bd24:	4b17      	ldr	r3, [pc, #92]	; (800bd84 <sniprintf+0x64>)
 800bd26:	1e0c      	subs	r4, r1, #0
 800bd28:	681d      	ldr	r5, [r3, #0]
 800bd2a:	b09d      	sub	sp, #116	; 0x74
 800bd2c:	da08      	bge.n	800bd40 <sniprintf+0x20>
 800bd2e:	238b      	movs	r3, #139	; 0x8b
 800bd30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd34:	602b      	str	r3, [r5, #0]
 800bd36:	b01d      	add	sp, #116	; 0x74
 800bd38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd3c:	b002      	add	sp, #8
 800bd3e:	4770      	bx	lr
 800bd40:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd44:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd48:	bf0c      	ite	eq
 800bd4a:	4623      	moveq	r3, r4
 800bd4c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bd50:	9304      	str	r3, [sp, #16]
 800bd52:	9307      	str	r3, [sp, #28]
 800bd54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd58:	9002      	str	r0, [sp, #8]
 800bd5a:	9006      	str	r0, [sp, #24]
 800bd5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd60:	4628      	mov	r0, r5
 800bd62:	ab21      	add	r3, sp, #132	; 0x84
 800bd64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bd66:	a902      	add	r1, sp, #8
 800bd68:	9301      	str	r3, [sp, #4]
 800bd6a:	f000 f88f 	bl	800be8c <_svfiprintf_r>
 800bd6e:	1c43      	adds	r3, r0, #1
 800bd70:	bfbc      	itt	lt
 800bd72:	238b      	movlt	r3, #139	; 0x8b
 800bd74:	602b      	strlt	r3, [r5, #0]
 800bd76:	2c00      	cmp	r4, #0
 800bd78:	d0dd      	beq.n	800bd36 <sniprintf+0x16>
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	9b02      	ldr	r3, [sp, #8]
 800bd7e:	701a      	strb	r2, [r3, #0]
 800bd80:	e7d9      	b.n	800bd36 <sniprintf+0x16>
 800bd82:	bf00      	nop
 800bd84:	200003b4 	.word	0x200003b4

0800bd88 <strncmp>:
 800bd88:	4603      	mov	r3, r0
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	b172      	cbz	r2, 800bdac <strncmp+0x24>
 800bd8e:	3901      	subs	r1, #1
 800bd90:	1884      	adds	r4, r0, r2
 800bd92:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd9a:	4290      	cmp	r0, r2
 800bd9c:	d101      	bne.n	800bda2 <strncmp+0x1a>
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	d101      	bne.n	800bda6 <strncmp+0x1e>
 800bda2:	1a80      	subs	r0, r0, r2
 800bda4:	bd10      	pop	{r4, pc}
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d1f3      	bne.n	800bd92 <strncmp+0xa>
 800bdaa:	e7fa      	b.n	800bda2 <strncmp+0x1a>
 800bdac:	4610      	mov	r0, r2
 800bdae:	e7f9      	b.n	800bda4 <strncmp+0x1c>

0800bdb0 <strncpy>:
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	b510      	push	{r4, lr}
 800bdb4:	3901      	subs	r1, #1
 800bdb6:	b132      	cbz	r2, 800bdc6 <strncpy+0x16>
 800bdb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bdbc:	3a01      	subs	r2, #1
 800bdbe:	f803 4b01 	strb.w	r4, [r3], #1
 800bdc2:	2c00      	cmp	r4, #0
 800bdc4:	d1f7      	bne.n	800bdb6 <strncpy+0x6>
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	441a      	add	r2, r3
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d100      	bne.n	800bdd0 <strncpy+0x20>
 800bdce:	bd10      	pop	{r4, pc}
 800bdd0:	f803 1b01 	strb.w	r1, [r3], #1
 800bdd4:	e7f9      	b.n	800bdca <strncpy+0x1a>

0800bdd6 <__ssputs_r>:
 800bdd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdda:	688e      	ldr	r6, [r1, #8]
 800bddc:	4682      	mov	sl, r0
 800bdde:	429e      	cmp	r6, r3
 800bde0:	460c      	mov	r4, r1
 800bde2:	4690      	mov	r8, r2
 800bde4:	461f      	mov	r7, r3
 800bde6:	d838      	bhi.n	800be5a <__ssputs_r+0x84>
 800bde8:	898a      	ldrh	r2, [r1, #12]
 800bdea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdee:	d032      	beq.n	800be56 <__ssputs_r+0x80>
 800bdf0:	6825      	ldr	r5, [r4, #0]
 800bdf2:	6909      	ldr	r1, [r1, #16]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	eba5 0901 	sub.w	r9, r5, r1
 800bdfa:	6965      	ldr	r5, [r4, #20]
 800bdfc:	444b      	add	r3, r9
 800bdfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be06:	106d      	asrs	r5, r5, #1
 800be08:	429d      	cmp	r5, r3
 800be0a:	bf38      	it	cc
 800be0c:	461d      	movcc	r5, r3
 800be0e:	0553      	lsls	r3, r2, #21
 800be10:	d531      	bpl.n	800be76 <__ssputs_r+0xa0>
 800be12:	4629      	mov	r1, r5
 800be14:	f000 fb60 	bl	800c4d8 <_malloc_r>
 800be18:	4606      	mov	r6, r0
 800be1a:	b950      	cbnz	r0, 800be32 <__ssputs_r+0x5c>
 800be1c:	230c      	movs	r3, #12
 800be1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be22:	f8ca 3000 	str.w	r3, [sl]
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be2c:	81a3      	strh	r3, [r4, #12]
 800be2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be32:	464a      	mov	r2, r9
 800be34:	6921      	ldr	r1, [r4, #16]
 800be36:	f7ff ff5d 	bl	800bcf4 <memcpy>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be44:	81a3      	strh	r3, [r4, #12]
 800be46:	6126      	str	r6, [r4, #16]
 800be48:	444e      	add	r6, r9
 800be4a:	6026      	str	r6, [r4, #0]
 800be4c:	463e      	mov	r6, r7
 800be4e:	6165      	str	r5, [r4, #20]
 800be50:	eba5 0509 	sub.w	r5, r5, r9
 800be54:	60a5      	str	r5, [r4, #8]
 800be56:	42be      	cmp	r6, r7
 800be58:	d900      	bls.n	800be5c <__ssputs_r+0x86>
 800be5a:	463e      	mov	r6, r7
 800be5c:	4632      	mov	r2, r6
 800be5e:	4641      	mov	r1, r8
 800be60:	6820      	ldr	r0, [r4, #0]
 800be62:	f000 fab7 	bl	800c3d4 <memmove>
 800be66:	68a3      	ldr	r3, [r4, #8]
 800be68:	2000      	movs	r0, #0
 800be6a:	1b9b      	subs	r3, r3, r6
 800be6c:	60a3      	str	r3, [r4, #8]
 800be6e:	6823      	ldr	r3, [r4, #0]
 800be70:	4433      	add	r3, r6
 800be72:	6023      	str	r3, [r4, #0]
 800be74:	e7db      	b.n	800be2e <__ssputs_r+0x58>
 800be76:	462a      	mov	r2, r5
 800be78:	f000 fba2 	bl	800c5c0 <_realloc_r>
 800be7c:	4606      	mov	r6, r0
 800be7e:	2800      	cmp	r0, #0
 800be80:	d1e1      	bne.n	800be46 <__ssputs_r+0x70>
 800be82:	4650      	mov	r0, sl
 800be84:	6921      	ldr	r1, [r4, #16]
 800be86:	f000 fabf 	bl	800c408 <_free_r>
 800be8a:	e7c7      	b.n	800be1c <__ssputs_r+0x46>

0800be8c <_svfiprintf_r>:
 800be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be90:	4698      	mov	r8, r3
 800be92:	898b      	ldrh	r3, [r1, #12]
 800be94:	4607      	mov	r7, r0
 800be96:	061b      	lsls	r3, r3, #24
 800be98:	460d      	mov	r5, r1
 800be9a:	4614      	mov	r4, r2
 800be9c:	b09d      	sub	sp, #116	; 0x74
 800be9e:	d50e      	bpl.n	800bebe <_svfiprintf_r+0x32>
 800bea0:	690b      	ldr	r3, [r1, #16]
 800bea2:	b963      	cbnz	r3, 800bebe <_svfiprintf_r+0x32>
 800bea4:	2140      	movs	r1, #64	; 0x40
 800bea6:	f000 fb17 	bl	800c4d8 <_malloc_r>
 800beaa:	6028      	str	r0, [r5, #0]
 800beac:	6128      	str	r0, [r5, #16]
 800beae:	b920      	cbnz	r0, 800beba <_svfiprintf_r+0x2e>
 800beb0:	230c      	movs	r3, #12
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800beb8:	e0d1      	b.n	800c05e <_svfiprintf_r+0x1d2>
 800beba:	2340      	movs	r3, #64	; 0x40
 800bebc:	616b      	str	r3, [r5, #20]
 800bebe:	2300      	movs	r3, #0
 800bec0:	9309      	str	r3, [sp, #36]	; 0x24
 800bec2:	2320      	movs	r3, #32
 800bec4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bec8:	2330      	movs	r3, #48	; 0x30
 800beca:	f04f 0901 	mov.w	r9, #1
 800bece:	f8cd 800c 	str.w	r8, [sp, #12]
 800bed2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c078 <_svfiprintf_r+0x1ec>
 800bed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beda:	4623      	mov	r3, r4
 800bedc:	469a      	mov	sl, r3
 800bede:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bee2:	b10a      	cbz	r2, 800bee8 <_svfiprintf_r+0x5c>
 800bee4:	2a25      	cmp	r2, #37	; 0x25
 800bee6:	d1f9      	bne.n	800bedc <_svfiprintf_r+0x50>
 800bee8:	ebba 0b04 	subs.w	fp, sl, r4
 800beec:	d00b      	beq.n	800bf06 <_svfiprintf_r+0x7a>
 800beee:	465b      	mov	r3, fp
 800bef0:	4622      	mov	r2, r4
 800bef2:	4629      	mov	r1, r5
 800bef4:	4638      	mov	r0, r7
 800bef6:	f7ff ff6e 	bl	800bdd6 <__ssputs_r>
 800befa:	3001      	adds	r0, #1
 800befc:	f000 80aa 	beq.w	800c054 <_svfiprintf_r+0x1c8>
 800bf00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf02:	445a      	add	r2, fp
 800bf04:	9209      	str	r2, [sp, #36]	; 0x24
 800bf06:	f89a 3000 	ldrb.w	r3, [sl]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 80a2 	beq.w	800c054 <_svfiprintf_r+0x1c8>
 800bf10:	2300      	movs	r3, #0
 800bf12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf1a:	f10a 0a01 	add.w	sl, sl, #1
 800bf1e:	9304      	str	r3, [sp, #16]
 800bf20:	9307      	str	r3, [sp, #28]
 800bf22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf26:	931a      	str	r3, [sp, #104]	; 0x68
 800bf28:	4654      	mov	r4, sl
 800bf2a:	2205      	movs	r2, #5
 800bf2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf30:	4851      	ldr	r0, [pc, #324]	; (800c078 <_svfiprintf_r+0x1ec>)
 800bf32:	f000 fa41 	bl	800c3b8 <memchr>
 800bf36:	9a04      	ldr	r2, [sp, #16]
 800bf38:	b9d8      	cbnz	r0, 800bf72 <_svfiprintf_r+0xe6>
 800bf3a:	06d0      	lsls	r0, r2, #27
 800bf3c:	bf44      	itt	mi
 800bf3e:	2320      	movmi	r3, #32
 800bf40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf44:	0711      	lsls	r1, r2, #28
 800bf46:	bf44      	itt	mi
 800bf48:	232b      	movmi	r3, #43	; 0x2b
 800bf4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf52:	2b2a      	cmp	r3, #42	; 0x2a
 800bf54:	d015      	beq.n	800bf82 <_svfiprintf_r+0xf6>
 800bf56:	4654      	mov	r4, sl
 800bf58:	2000      	movs	r0, #0
 800bf5a:	f04f 0c0a 	mov.w	ip, #10
 800bf5e:	9a07      	ldr	r2, [sp, #28]
 800bf60:	4621      	mov	r1, r4
 800bf62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf66:	3b30      	subs	r3, #48	; 0x30
 800bf68:	2b09      	cmp	r3, #9
 800bf6a:	d94e      	bls.n	800c00a <_svfiprintf_r+0x17e>
 800bf6c:	b1b0      	cbz	r0, 800bf9c <_svfiprintf_r+0x110>
 800bf6e:	9207      	str	r2, [sp, #28]
 800bf70:	e014      	b.n	800bf9c <_svfiprintf_r+0x110>
 800bf72:	eba0 0308 	sub.w	r3, r0, r8
 800bf76:	fa09 f303 	lsl.w	r3, r9, r3
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	46a2      	mov	sl, r4
 800bf7e:	9304      	str	r3, [sp, #16]
 800bf80:	e7d2      	b.n	800bf28 <_svfiprintf_r+0x9c>
 800bf82:	9b03      	ldr	r3, [sp, #12]
 800bf84:	1d19      	adds	r1, r3, #4
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	9103      	str	r1, [sp, #12]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	bfbb      	ittet	lt
 800bf8e:	425b      	neglt	r3, r3
 800bf90:	f042 0202 	orrlt.w	r2, r2, #2
 800bf94:	9307      	strge	r3, [sp, #28]
 800bf96:	9307      	strlt	r3, [sp, #28]
 800bf98:	bfb8      	it	lt
 800bf9a:	9204      	strlt	r2, [sp, #16]
 800bf9c:	7823      	ldrb	r3, [r4, #0]
 800bf9e:	2b2e      	cmp	r3, #46	; 0x2e
 800bfa0:	d10c      	bne.n	800bfbc <_svfiprintf_r+0x130>
 800bfa2:	7863      	ldrb	r3, [r4, #1]
 800bfa4:	2b2a      	cmp	r3, #42	; 0x2a
 800bfa6:	d135      	bne.n	800c014 <_svfiprintf_r+0x188>
 800bfa8:	9b03      	ldr	r3, [sp, #12]
 800bfaa:	3402      	adds	r4, #2
 800bfac:	1d1a      	adds	r2, r3, #4
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	9203      	str	r2, [sp, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	bfb8      	it	lt
 800bfb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bfba:	9305      	str	r3, [sp, #20]
 800bfbc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c07c <_svfiprintf_r+0x1f0>
 800bfc0:	2203      	movs	r2, #3
 800bfc2:	4650      	mov	r0, sl
 800bfc4:	7821      	ldrb	r1, [r4, #0]
 800bfc6:	f000 f9f7 	bl	800c3b8 <memchr>
 800bfca:	b140      	cbz	r0, 800bfde <_svfiprintf_r+0x152>
 800bfcc:	2340      	movs	r3, #64	; 0x40
 800bfce:	eba0 000a 	sub.w	r0, r0, sl
 800bfd2:	fa03 f000 	lsl.w	r0, r3, r0
 800bfd6:	9b04      	ldr	r3, [sp, #16]
 800bfd8:	3401      	adds	r4, #1
 800bfda:	4303      	orrs	r3, r0
 800bfdc:	9304      	str	r3, [sp, #16]
 800bfde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfe2:	2206      	movs	r2, #6
 800bfe4:	4826      	ldr	r0, [pc, #152]	; (800c080 <_svfiprintf_r+0x1f4>)
 800bfe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfea:	f000 f9e5 	bl	800c3b8 <memchr>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d038      	beq.n	800c064 <_svfiprintf_r+0x1d8>
 800bff2:	4b24      	ldr	r3, [pc, #144]	; (800c084 <_svfiprintf_r+0x1f8>)
 800bff4:	bb1b      	cbnz	r3, 800c03e <_svfiprintf_r+0x1b2>
 800bff6:	9b03      	ldr	r3, [sp, #12]
 800bff8:	3307      	adds	r3, #7
 800bffa:	f023 0307 	bic.w	r3, r3, #7
 800bffe:	3308      	adds	r3, #8
 800c000:	9303      	str	r3, [sp, #12]
 800c002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c004:	4433      	add	r3, r6
 800c006:	9309      	str	r3, [sp, #36]	; 0x24
 800c008:	e767      	b.n	800beda <_svfiprintf_r+0x4e>
 800c00a:	460c      	mov	r4, r1
 800c00c:	2001      	movs	r0, #1
 800c00e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c012:	e7a5      	b.n	800bf60 <_svfiprintf_r+0xd4>
 800c014:	2300      	movs	r3, #0
 800c016:	f04f 0c0a 	mov.w	ip, #10
 800c01a:	4619      	mov	r1, r3
 800c01c:	3401      	adds	r4, #1
 800c01e:	9305      	str	r3, [sp, #20]
 800c020:	4620      	mov	r0, r4
 800c022:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c026:	3a30      	subs	r2, #48	; 0x30
 800c028:	2a09      	cmp	r2, #9
 800c02a:	d903      	bls.n	800c034 <_svfiprintf_r+0x1a8>
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d0c5      	beq.n	800bfbc <_svfiprintf_r+0x130>
 800c030:	9105      	str	r1, [sp, #20]
 800c032:	e7c3      	b.n	800bfbc <_svfiprintf_r+0x130>
 800c034:	4604      	mov	r4, r0
 800c036:	2301      	movs	r3, #1
 800c038:	fb0c 2101 	mla	r1, ip, r1, r2
 800c03c:	e7f0      	b.n	800c020 <_svfiprintf_r+0x194>
 800c03e:	ab03      	add	r3, sp, #12
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	462a      	mov	r2, r5
 800c044:	4638      	mov	r0, r7
 800c046:	4b10      	ldr	r3, [pc, #64]	; (800c088 <_svfiprintf_r+0x1fc>)
 800c048:	a904      	add	r1, sp, #16
 800c04a:	f3af 8000 	nop.w
 800c04e:	1c42      	adds	r2, r0, #1
 800c050:	4606      	mov	r6, r0
 800c052:	d1d6      	bne.n	800c002 <_svfiprintf_r+0x176>
 800c054:	89ab      	ldrh	r3, [r5, #12]
 800c056:	065b      	lsls	r3, r3, #25
 800c058:	f53f af2c 	bmi.w	800beb4 <_svfiprintf_r+0x28>
 800c05c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c05e:	b01d      	add	sp, #116	; 0x74
 800c060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c064:	ab03      	add	r3, sp, #12
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	462a      	mov	r2, r5
 800c06a:	4638      	mov	r0, r7
 800c06c:	4b06      	ldr	r3, [pc, #24]	; (800c088 <_svfiprintf_r+0x1fc>)
 800c06e:	a904      	add	r1, sp, #16
 800c070:	f000 f87c 	bl	800c16c <_printf_i>
 800c074:	e7eb      	b.n	800c04e <_svfiprintf_r+0x1c2>
 800c076:	bf00      	nop
 800c078:	0800d5bb 	.word	0x0800d5bb
 800c07c:	0800d5c1 	.word	0x0800d5c1
 800c080:	0800d5c5 	.word	0x0800d5c5
 800c084:	00000000 	.word	0x00000000
 800c088:	0800bdd7 	.word	0x0800bdd7

0800c08c <_printf_common>:
 800c08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c090:	4616      	mov	r6, r2
 800c092:	4699      	mov	r9, r3
 800c094:	688a      	ldr	r2, [r1, #8]
 800c096:	690b      	ldr	r3, [r1, #16]
 800c098:	4607      	mov	r7, r0
 800c09a:	4293      	cmp	r3, r2
 800c09c:	bfb8      	it	lt
 800c09e:	4613      	movlt	r3, r2
 800c0a0:	6033      	str	r3, [r6, #0]
 800c0a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0ac:	b10a      	cbz	r2, 800c0b2 <_printf_common+0x26>
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	6033      	str	r3, [r6, #0]
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	0699      	lsls	r1, r3, #26
 800c0b6:	bf42      	ittt	mi
 800c0b8:	6833      	ldrmi	r3, [r6, #0]
 800c0ba:	3302      	addmi	r3, #2
 800c0bc:	6033      	strmi	r3, [r6, #0]
 800c0be:	6825      	ldr	r5, [r4, #0]
 800c0c0:	f015 0506 	ands.w	r5, r5, #6
 800c0c4:	d106      	bne.n	800c0d4 <_printf_common+0x48>
 800c0c6:	f104 0a19 	add.w	sl, r4, #25
 800c0ca:	68e3      	ldr	r3, [r4, #12]
 800c0cc:	6832      	ldr	r2, [r6, #0]
 800c0ce:	1a9b      	subs	r3, r3, r2
 800c0d0:	42ab      	cmp	r3, r5
 800c0d2:	dc28      	bgt.n	800c126 <_printf_common+0x9a>
 800c0d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0d8:	1e13      	subs	r3, r2, #0
 800c0da:	6822      	ldr	r2, [r4, #0]
 800c0dc:	bf18      	it	ne
 800c0de:	2301      	movne	r3, #1
 800c0e0:	0692      	lsls	r2, r2, #26
 800c0e2:	d42d      	bmi.n	800c140 <_printf_common+0xb4>
 800c0e4:	4649      	mov	r1, r9
 800c0e6:	4638      	mov	r0, r7
 800c0e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0ec:	47c0      	blx	r8
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	d020      	beq.n	800c134 <_printf_common+0xa8>
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	68e5      	ldr	r5, [r4, #12]
 800c0f6:	f003 0306 	and.w	r3, r3, #6
 800c0fa:	2b04      	cmp	r3, #4
 800c0fc:	bf18      	it	ne
 800c0fe:	2500      	movne	r5, #0
 800c100:	6832      	ldr	r2, [r6, #0]
 800c102:	f04f 0600 	mov.w	r6, #0
 800c106:	68a3      	ldr	r3, [r4, #8]
 800c108:	bf08      	it	eq
 800c10a:	1aad      	subeq	r5, r5, r2
 800c10c:	6922      	ldr	r2, [r4, #16]
 800c10e:	bf08      	it	eq
 800c110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c114:	4293      	cmp	r3, r2
 800c116:	bfc4      	itt	gt
 800c118:	1a9b      	subgt	r3, r3, r2
 800c11a:	18ed      	addgt	r5, r5, r3
 800c11c:	341a      	adds	r4, #26
 800c11e:	42b5      	cmp	r5, r6
 800c120:	d11a      	bne.n	800c158 <_printf_common+0xcc>
 800c122:	2000      	movs	r0, #0
 800c124:	e008      	b.n	800c138 <_printf_common+0xac>
 800c126:	2301      	movs	r3, #1
 800c128:	4652      	mov	r2, sl
 800c12a:	4649      	mov	r1, r9
 800c12c:	4638      	mov	r0, r7
 800c12e:	47c0      	blx	r8
 800c130:	3001      	adds	r0, #1
 800c132:	d103      	bne.n	800c13c <_printf_common+0xb0>
 800c134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c13c:	3501      	adds	r5, #1
 800c13e:	e7c4      	b.n	800c0ca <_printf_common+0x3e>
 800c140:	2030      	movs	r0, #48	; 0x30
 800c142:	18e1      	adds	r1, r4, r3
 800c144:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c148:	1c5a      	adds	r2, r3, #1
 800c14a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c14e:	4422      	add	r2, r4
 800c150:	3302      	adds	r3, #2
 800c152:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c156:	e7c5      	b.n	800c0e4 <_printf_common+0x58>
 800c158:	2301      	movs	r3, #1
 800c15a:	4622      	mov	r2, r4
 800c15c:	4649      	mov	r1, r9
 800c15e:	4638      	mov	r0, r7
 800c160:	47c0      	blx	r8
 800c162:	3001      	adds	r0, #1
 800c164:	d0e6      	beq.n	800c134 <_printf_common+0xa8>
 800c166:	3601      	adds	r6, #1
 800c168:	e7d9      	b.n	800c11e <_printf_common+0x92>
	...

0800c16c <_printf_i>:
 800c16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c170:	7e0f      	ldrb	r7, [r1, #24]
 800c172:	4691      	mov	r9, r2
 800c174:	2f78      	cmp	r7, #120	; 0x78
 800c176:	4680      	mov	r8, r0
 800c178:	460c      	mov	r4, r1
 800c17a:	469a      	mov	sl, r3
 800c17c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c17e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c182:	d807      	bhi.n	800c194 <_printf_i+0x28>
 800c184:	2f62      	cmp	r7, #98	; 0x62
 800c186:	d80a      	bhi.n	800c19e <_printf_i+0x32>
 800c188:	2f00      	cmp	r7, #0
 800c18a:	f000 80d9 	beq.w	800c340 <_printf_i+0x1d4>
 800c18e:	2f58      	cmp	r7, #88	; 0x58
 800c190:	f000 80a4 	beq.w	800c2dc <_printf_i+0x170>
 800c194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c19c:	e03a      	b.n	800c214 <_printf_i+0xa8>
 800c19e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1a2:	2b15      	cmp	r3, #21
 800c1a4:	d8f6      	bhi.n	800c194 <_printf_i+0x28>
 800c1a6:	a101      	add	r1, pc, #4	; (adr r1, 800c1ac <_printf_i+0x40>)
 800c1a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1ac:	0800c205 	.word	0x0800c205
 800c1b0:	0800c219 	.word	0x0800c219
 800c1b4:	0800c195 	.word	0x0800c195
 800c1b8:	0800c195 	.word	0x0800c195
 800c1bc:	0800c195 	.word	0x0800c195
 800c1c0:	0800c195 	.word	0x0800c195
 800c1c4:	0800c219 	.word	0x0800c219
 800c1c8:	0800c195 	.word	0x0800c195
 800c1cc:	0800c195 	.word	0x0800c195
 800c1d0:	0800c195 	.word	0x0800c195
 800c1d4:	0800c195 	.word	0x0800c195
 800c1d8:	0800c327 	.word	0x0800c327
 800c1dc:	0800c249 	.word	0x0800c249
 800c1e0:	0800c309 	.word	0x0800c309
 800c1e4:	0800c195 	.word	0x0800c195
 800c1e8:	0800c195 	.word	0x0800c195
 800c1ec:	0800c349 	.word	0x0800c349
 800c1f0:	0800c195 	.word	0x0800c195
 800c1f4:	0800c249 	.word	0x0800c249
 800c1f8:	0800c195 	.word	0x0800c195
 800c1fc:	0800c195 	.word	0x0800c195
 800c200:	0800c311 	.word	0x0800c311
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	1d1a      	adds	r2, r3, #4
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	602a      	str	r2, [r5, #0]
 800c20c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c214:	2301      	movs	r3, #1
 800c216:	e0a4      	b.n	800c362 <_printf_i+0x1f6>
 800c218:	6820      	ldr	r0, [r4, #0]
 800c21a:	6829      	ldr	r1, [r5, #0]
 800c21c:	0606      	lsls	r6, r0, #24
 800c21e:	f101 0304 	add.w	r3, r1, #4
 800c222:	d50a      	bpl.n	800c23a <_printf_i+0xce>
 800c224:	680e      	ldr	r6, [r1, #0]
 800c226:	602b      	str	r3, [r5, #0]
 800c228:	2e00      	cmp	r6, #0
 800c22a:	da03      	bge.n	800c234 <_printf_i+0xc8>
 800c22c:	232d      	movs	r3, #45	; 0x2d
 800c22e:	4276      	negs	r6, r6
 800c230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c234:	230a      	movs	r3, #10
 800c236:	485e      	ldr	r0, [pc, #376]	; (800c3b0 <_printf_i+0x244>)
 800c238:	e019      	b.n	800c26e <_printf_i+0x102>
 800c23a:	680e      	ldr	r6, [r1, #0]
 800c23c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	bf18      	it	ne
 800c244:	b236      	sxthne	r6, r6
 800c246:	e7ef      	b.n	800c228 <_printf_i+0xbc>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	6820      	ldr	r0, [r4, #0]
 800c24c:	1d19      	adds	r1, r3, #4
 800c24e:	6029      	str	r1, [r5, #0]
 800c250:	0601      	lsls	r1, r0, #24
 800c252:	d501      	bpl.n	800c258 <_printf_i+0xec>
 800c254:	681e      	ldr	r6, [r3, #0]
 800c256:	e002      	b.n	800c25e <_printf_i+0xf2>
 800c258:	0646      	lsls	r6, r0, #25
 800c25a:	d5fb      	bpl.n	800c254 <_printf_i+0xe8>
 800c25c:	881e      	ldrh	r6, [r3, #0]
 800c25e:	2f6f      	cmp	r7, #111	; 0x6f
 800c260:	bf0c      	ite	eq
 800c262:	2308      	moveq	r3, #8
 800c264:	230a      	movne	r3, #10
 800c266:	4852      	ldr	r0, [pc, #328]	; (800c3b0 <_printf_i+0x244>)
 800c268:	2100      	movs	r1, #0
 800c26a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c26e:	6865      	ldr	r5, [r4, #4]
 800c270:	2d00      	cmp	r5, #0
 800c272:	bfa8      	it	ge
 800c274:	6821      	ldrge	r1, [r4, #0]
 800c276:	60a5      	str	r5, [r4, #8]
 800c278:	bfa4      	itt	ge
 800c27a:	f021 0104 	bicge.w	r1, r1, #4
 800c27e:	6021      	strge	r1, [r4, #0]
 800c280:	b90e      	cbnz	r6, 800c286 <_printf_i+0x11a>
 800c282:	2d00      	cmp	r5, #0
 800c284:	d04d      	beq.n	800c322 <_printf_i+0x1b6>
 800c286:	4615      	mov	r5, r2
 800c288:	fbb6 f1f3 	udiv	r1, r6, r3
 800c28c:	fb03 6711 	mls	r7, r3, r1, r6
 800c290:	5dc7      	ldrb	r7, [r0, r7]
 800c292:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c296:	4637      	mov	r7, r6
 800c298:	42bb      	cmp	r3, r7
 800c29a:	460e      	mov	r6, r1
 800c29c:	d9f4      	bls.n	800c288 <_printf_i+0x11c>
 800c29e:	2b08      	cmp	r3, #8
 800c2a0:	d10b      	bne.n	800c2ba <_printf_i+0x14e>
 800c2a2:	6823      	ldr	r3, [r4, #0]
 800c2a4:	07de      	lsls	r6, r3, #31
 800c2a6:	d508      	bpl.n	800c2ba <_printf_i+0x14e>
 800c2a8:	6923      	ldr	r3, [r4, #16]
 800c2aa:	6861      	ldr	r1, [r4, #4]
 800c2ac:	4299      	cmp	r1, r3
 800c2ae:	bfde      	ittt	le
 800c2b0:	2330      	movle	r3, #48	; 0x30
 800c2b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2b6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c2ba:	1b52      	subs	r2, r2, r5
 800c2bc:	6122      	str	r2, [r4, #16]
 800c2be:	464b      	mov	r3, r9
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	f8cd a000 	str.w	sl, [sp]
 800c2c8:	aa03      	add	r2, sp, #12
 800c2ca:	f7ff fedf 	bl	800c08c <_printf_common>
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	d14c      	bne.n	800c36c <_printf_i+0x200>
 800c2d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2d6:	b004      	add	sp, #16
 800c2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2dc:	4834      	ldr	r0, [pc, #208]	; (800c3b0 <_printf_i+0x244>)
 800c2de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c2e2:	6829      	ldr	r1, [r5, #0]
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2ea:	6029      	str	r1, [r5, #0]
 800c2ec:	061d      	lsls	r5, r3, #24
 800c2ee:	d514      	bpl.n	800c31a <_printf_i+0x1ae>
 800c2f0:	07df      	lsls	r7, r3, #31
 800c2f2:	bf44      	itt	mi
 800c2f4:	f043 0320 	orrmi.w	r3, r3, #32
 800c2f8:	6023      	strmi	r3, [r4, #0]
 800c2fa:	b91e      	cbnz	r6, 800c304 <_printf_i+0x198>
 800c2fc:	6823      	ldr	r3, [r4, #0]
 800c2fe:	f023 0320 	bic.w	r3, r3, #32
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	2310      	movs	r3, #16
 800c306:	e7af      	b.n	800c268 <_printf_i+0xfc>
 800c308:	6823      	ldr	r3, [r4, #0]
 800c30a:	f043 0320 	orr.w	r3, r3, #32
 800c30e:	6023      	str	r3, [r4, #0]
 800c310:	2378      	movs	r3, #120	; 0x78
 800c312:	4828      	ldr	r0, [pc, #160]	; (800c3b4 <_printf_i+0x248>)
 800c314:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c318:	e7e3      	b.n	800c2e2 <_printf_i+0x176>
 800c31a:	0659      	lsls	r1, r3, #25
 800c31c:	bf48      	it	mi
 800c31e:	b2b6      	uxthmi	r6, r6
 800c320:	e7e6      	b.n	800c2f0 <_printf_i+0x184>
 800c322:	4615      	mov	r5, r2
 800c324:	e7bb      	b.n	800c29e <_printf_i+0x132>
 800c326:	682b      	ldr	r3, [r5, #0]
 800c328:	6826      	ldr	r6, [r4, #0]
 800c32a:	1d18      	adds	r0, r3, #4
 800c32c:	6961      	ldr	r1, [r4, #20]
 800c32e:	6028      	str	r0, [r5, #0]
 800c330:	0635      	lsls	r5, r6, #24
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	d501      	bpl.n	800c33a <_printf_i+0x1ce>
 800c336:	6019      	str	r1, [r3, #0]
 800c338:	e002      	b.n	800c340 <_printf_i+0x1d4>
 800c33a:	0670      	lsls	r0, r6, #25
 800c33c:	d5fb      	bpl.n	800c336 <_printf_i+0x1ca>
 800c33e:	8019      	strh	r1, [r3, #0]
 800c340:	2300      	movs	r3, #0
 800c342:	4615      	mov	r5, r2
 800c344:	6123      	str	r3, [r4, #16]
 800c346:	e7ba      	b.n	800c2be <_printf_i+0x152>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	2100      	movs	r1, #0
 800c34c:	1d1a      	adds	r2, r3, #4
 800c34e:	602a      	str	r2, [r5, #0]
 800c350:	681d      	ldr	r5, [r3, #0]
 800c352:	6862      	ldr	r2, [r4, #4]
 800c354:	4628      	mov	r0, r5
 800c356:	f000 f82f 	bl	800c3b8 <memchr>
 800c35a:	b108      	cbz	r0, 800c360 <_printf_i+0x1f4>
 800c35c:	1b40      	subs	r0, r0, r5
 800c35e:	6060      	str	r0, [r4, #4]
 800c360:	6863      	ldr	r3, [r4, #4]
 800c362:	6123      	str	r3, [r4, #16]
 800c364:	2300      	movs	r3, #0
 800c366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c36a:	e7a8      	b.n	800c2be <_printf_i+0x152>
 800c36c:	462a      	mov	r2, r5
 800c36e:	4649      	mov	r1, r9
 800c370:	4640      	mov	r0, r8
 800c372:	6923      	ldr	r3, [r4, #16]
 800c374:	47d0      	blx	sl
 800c376:	3001      	adds	r0, #1
 800c378:	d0ab      	beq.n	800c2d2 <_printf_i+0x166>
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	079b      	lsls	r3, r3, #30
 800c37e:	d413      	bmi.n	800c3a8 <_printf_i+0x23c>
 800c380:	68e0      	ldr	r0, [r4, #12]
 800c382:	9b03      	ldr	r3, [sp, #12]
 800c384:	4298      	cmp	r0, r3
 800c386:	bfb8      	it	lt
 800c388:	4618      	movlt	r0, r3
 800c38a:	e7a4      	b.n	800c2d6 <_printf_i+0x16a>
 800c38c:	2301      	movs	r3, #1
 800c38e:	4632      	mov	r2, r6
 800c390:	4649      	mov	r1, r9
 800c392:	4640      	mov	r0, r8
 800c394:	47d0      	blx	sl
 800c396:	3001      	adds	r0, #1
 800c398:	d09b      	beq.n	800c2d2 <_printf_i+0x166>
 800c39a:	3501      	adds	r5, #1
 800c39c:	68e3      	ldr	r3, [r4, #12]
 800c39e:	9903      	ldr	r1, [sp, #12]
 800c3a0:	1a5b      	subs	r3, r3, r1
 800c3a2:	42ab      	cmp	r3, r5
 800c3a4:	dcf2      	bgt.n	800c38c <_printf_i+0x220>
 800c3a6:	e7eb      	b.n	800c380 <_printf_i+0x214>
 800c3a8:	2500      	movs	r5, #0
 800c3aa:	f104 0619 	add.w	r6, r4, #25
 800c3ae:	e7f5      	b.n	800c39c <_printf_i+0x230>
 800c3b0:	0800d5cc 	.word	0x0800d5cc
 800c3b4:	0800d5dd 	.word	0x0800d5dd

0800c3b8 <memchr>:
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	b510      	push	{r4, lr}
 800c3bc:	b2c9      	uxtb	r1, r1
 800c3be:	4402      	add	r2, r0
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	d101      	bne.n	800c3ca <memchr+0x12>
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	e003      	b.n	800c3d2 <memchr+0x1a>
 800c3ca:	7804      	ldrb	r4, [r0, #0]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	428c      	cmp	r4, r1
 800c3d0:	d1f6      	bne.n	800c3c0 <memchr+0x8>
 800c3d2:	bd10      	pop	{r4, pc}

0800c3d4 <memmove>:
 800c3d4:	4288      	cmp	r0, r1
 800c3d6:	b510      	push	{r4, lr}
 800c3d8:	eb01 0402 	add.w	r4, r1, r2
 800c3dc:	d902      	bls.n	800c3e4 <memmove+0x10>
 800c3de:	4284      	cmp	r4, r0
 800c3e0:	4623      	mov	r3, r4
 800c3e2:	d807      	bhi.n	800c3f4 <memmove+0x20>
 800c3e4:	1e43      	subs	r3, r0, #1
 800c3e6:	42a1      	cmp	r1, r4
 800c3e8:	d008      	beq.n	800c3fc <memmove+0x28>
 800c3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3f2:	e7f8      	b.n	800c3e6 <memmove+0x12>
 800c3f4:	4601      	mov	r1, r0
 800c3f6:	4402      	add	r2, r0
 800c3f8:	428a      	cmp	r2, r1
 800c3fa:	d100      	bne.n	800c3fe <memmove+0x2a>
 800c3fc:	bd10      	pop	{r4, pc}
 800c3fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c406:	e7f7      	b.n	800c3f8 <memmove+0x24>

0800c408 <_free_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4605      	mov	r5, r0
 800c40c:	2900      	cmp	r1, #0
 800c40e:	d040      	beq.n	800c492 <_free_r+0x8a>
 800c410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c414:	1f0c      	subs	r4, r1, #4
 800c416:	2b00      	cmp	r3, #0
 800c418:	bfb8      	it	lt
 800c41a:	18e4      	addlt	r4, r4, r3
 800c41c:	f000 f910 	bl	800c640 <__malloc_lock>
 800c420:	4a1c      	ldr	r2, [pc, #112]	; (800c494 <_free_r+0x8c>)
 800c422:	6813      	ldr	r3, [r2, #0]
 800c424:	b933      	cbnz	r3, 800c434 <_free_r+0x2c>
 800c426:	6063      	str	r3, [r4, #4]
 800c428:	6014      	str	r4, [r2, #0]
 800c42a:	4628      	mov	r0, r5
 800c42c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c430:	f000 b90c 	b.w	800c64c <__malloc_unlock>
 800c434:	42a3      	cmp	r3, r4
 800c436:	d908      	bls.n	800c44a <_free_r+0x42>
 800c438:	6820      	ldr	r0, [r4, #0]
 800c43a:	1821      	adds	r1, r4, r0
 800c43c:	428b      	cmp	r3, r1
 800c43e:	bf01      	itttt	eq
 800c440:	6819      	ldreq	r1, [r3, #0]
 800c442:	685b      	ldreq	r3, [r3, #4]
 800c444:	1809      	addeq	r1, r1, r0
 800c446:	6021      	streq	r1, [r4, #0]
 800c448:	e7ed      	b.n	800c426 <_free_r+0x1e>
 800c44a:	461a      	mov	r2, r3
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	b10b      	cbz	r3, 800c454 <_free_r+0x4c>
 800c450:	42a3      	cmp	r3, r4
 800c452:	d9fa      	bls.n	800c44a <_free_r+0x42>
 800c454:	6811      	ldr	r1, [r2, #0]
 800c456:	1850      	adds	r0, r2, r1
 800c458:	42a0      	cmp	r0, r4
 800c45a:	d10b      	bne.n	800c474 <_free_r+0x6c>
 800c45c:	6820      	ldr	r0, [r4, #0]
 800c45e:	4401      	add	r1, r0
 800c460:	1850      	adds	r0, r2, r1
 800c462:	4283      	cmp	r3, r0
 800c464:	6011      	str	r1, [r2, #0]
 800c466:	d1e0      	bne.n	800c42a <_free_r+0x22>
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	4401      	add	r1, r0
 800c46e:	6011      	str	r1, [r2, #0]
 800c470:	6053      	str	r3, [r2, #4]
 800c472:	e7da      	b.n	800c42a <_free_r+0x22>
 800c474:	d902      	bls.n	800c47c <_free_r+0x74>
 800c476:	230c      	movs	r3, #12
 800c478:	602b      	str	r3, [r5, #0]
 800c47a:	e7d6      	b.n	800c42a <_free_r+0x22>
 800c47c:	6820      	ldr	r0, [r4, #0]
 800c47e:	1821      	adds	r1, r4, r0
 800c480:	428b      	cmp	r3, r1
 800c482:	bf01      	itttt	eq
 800c484:	6819      	ldreq	r1, [r3, #0]
 800c486:	685b      	ldreq	r3, [r3, #4]
 800c488:	1809      	addeq	r1, r1, r0
 800c48a:	6021      	streq	r1, [r4, #0]
 800c48c:	6063      	str	r3, [r4, #4]
 800c48e:	6054      	str	r4, [r2, #4]
 800c490:	e7cb      	b.n	800c42a <_free_r+0x22>
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	20001e18 	.word	0x20001e18

0800c498 <sbrk_aligned>:
 800c498:	b570      	push	{r4, r5, r6, lr}
 800c49a:	4e0e      	ldr	r6, [pc, #56]	; (800c4d4 <sbrk_aligned+0x3c>)
 800c49c:	460c      	mov	r4, r1
 800c49e:	6831      	ldr	r1, [r6, #0]
 800c4a0:	4605      	mov	r5, r0
 800c4a2:	b911      	cbnz	r1, 800c4aa <sbrk_aligned+0x12>
 800c4a4:	f000 f8bc 	bl	800c620 <_sbrk_r>
 800c4a8:	6030      	str	r0, [r6, #0]
 800c4aa:	4621      	mov	r1, r4
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	f000 f8b7 	bl	800c620 <_sbrk_r>
 800c4b2:	1c43      	adds	r3, r0, #1
 800c4b4:	d00a      	beq.n	800c4cc <sbrk_aligned+0x34>
 800c4b6:	1cc4      	adds	r4, r0, #3
 800c4b8:	f024 0403 	bic.w	r4, r4, #3
 800c4bc:	42a0      	cmp	r0, r4
 800c4be:	d007      	beq.n	800c4d0 <sbrk_aligned+0x38>
 800c4c0:	1a21      	subs	r1, r4, r0
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	f000 f8ac 	bl	800c620 <_sbrk_r>
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	d101      	bne.n	800c4d0 <sbrk_aligned+0x38>
 800c4cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	bd70      	pop	{r4, r5, r6, pc}
 800c4d4:	20001e1c 	.word	0x20001e1c

0800c4d8 <_malloc_r>:
 800c4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4dc:	1ccd      	adds	r5, r1, #3
 800c4de:	f025 0503 	bic.w	r5, r5, #3
 800c4e2:	3508      	adds	r5, #8
 800c4e4:	2d0c      	cmp	r5, #12
 800c4e6:	bf38      	it	cc
 800c4e8:	250c      	movcc	r5, #12
 800c4ea:	2d00      	cmp	r5, #0
 800c4ec:	4607      	mov	r7, r0
 800c4ee:	db01      	blt.n	800c4f4 <_malloc_r+0x1c>
 800c4f0:	42a9      	cmp	r1, r5
 800c4f2:	d905      	bls.n	800c500 <_malloc_r+0x28>
 800c4f4:	230c      	movs	r3, #12
 800c4f6:	2600      	movs	r6, #0
 800c4f8:	603b      	str	r3, [r7, #0]
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c500:	4e2e      	ldr	r6, [pc, #184]	; (800c5bc <_malloc_r+0xe4>)
 800c502:	f000 f89d 	bl	800c640 <__malloc_lock>
 800c506:	6833      	ldr	r3, [r6, #0]
 800c508:	461c      	mov	r4, r3
 800c50a:	bb34      	cbnz	r4, 800c55a <_malloc_r+0x82>
 800c50c:	4629      	mov	r1, r5
 800c50e:	4638      	mov	r0, r7
 800c510:	f7ff ffc2 	bl	800c498 <sbrk_aligned>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	4604      	mov	r4, r0
 800c518:	d14d      	bne.n	800c5b6 <_malloc_r+0xde>
 800c51a:	6834      	ldr	r4, [r6, #0]
 800c51c:	4626      	mov	r6, r4
 800c51e:	2e00      	cmp	r6, #0
 800c520:	d140      	bne.n	800c5a4 <_malloc_r+0xcc>
 800c522:	6823      	ldr	r3, [r4, #0]
 800c524:	4631      	mov	r1, r6
 800c526:	4638      	mov	r0, r7
 800c528:	eb04 0803 	add.w	r8, r4, r3
 800c52c:	f000 f878 	bl	800c620 <_sbrk_r>
 800c530:	4580      	cmp	r8, r0
 800c532:	d13a      	bne.n	800c5aa <_malloc_r+0xd2>
 800c534:	6821      	ldr	r1, [r4, #0]
 800c536:	3503      	adds	r5, #3
 800c538:	1a6d      	subs	r5, r5, r1
 800c53a:	f025 0503 	bic.w	r5, r5, #3
 800c53e:	3508      	adds	r5, #8
 800c540:	2d0c      	cmp	r5, #12
 800c542:	bf38      	it	cc
 800c544:	250c      	movcc	r5, #12
 800c546:	4638      	mov	r0, r7
 800c548:	4629      	mov	r1, r5
 800c54a:	f7ff ffa5 	bl	800c498 <sbrk_aligned>
 800c54e:	3001      	adds	r0, #1
 800c550:	d02b      	beq.n	800c5aa <_malloc_r+0xd2>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	442b      	add	r3, r5
 800c556:	6023      	str	r3, [r4, #0]
 800c558:	e00e      	b.n	800c578 <_malloc_r+0xa0>
 800c55a:	6822      	ldr	r2, [r4, #0]
 800c55c:	1b52      	subs	r2, r2, r5
 800c55e:	d41e      	bmi.n	800c59e <_malloc_r+0xc6>
 800c560:	2a0b      	cmp	r2, #11
 800c562:	d916      	bls.n	800c592 <_malloc_r+0xba>
 800c564:	1961      	adds	r1, r4, r5
 800c566:	42a3      	cmp	r3, r4
 800c568:	6025      	str	r5, [r4, #0]
 800c56a:	bf18      	it	ne
 800c56c:	6059      	strne	r1, [r3, #4]
 800c56e:	6863      	ldr	r3, [r4, #4]
 800c570:	bf08      	it	eq
 800c572:	6031      	streq	r1, [r6, #0]
 800c574:	5162      	str	r2, [r4, r5]
 800c576:	604b      	str	r3, [r1, #4]
 800c578:	4638      	mov	r0, r7
 800c57a:	f104 060b 	add.w	r6, r4, #11
 800c57e:	f000 f865 	bl	800c64c <__malloc_unlock>
 800c582:	f026 0607 	bic.w	r6, r6, #7
 800c586:	1d23      	adds	r3, r4, #4
 800c588:	1af2      	subs	r2, r6, r3
 800c58a:	d0b6      	beq.n	800c4fa <_malloc_r+0x22>
 800c58c:	1b9b      	subs	r3, r3, r6
 800c58e:	50a3      	str	r3, [r4, r2]
 800c590:	e7b3      	b.n	800c4fa <_malloc_r+0x22>
 800c592:	6862      	ldr	r2, [r4, #4]
 800c594:	42a3      	cmp	r3, r4
 800c596:	bf0c      	ite	eq
 800c598:	6032      	streq	r2, [r6, #0]
 800c59a:	605a      	strne	r2, [r3, #4]
 800c59c:	e7ec      	b.n	800c578 <_malloc_r+0xa0>
 800c59e:	4623      	mov	r3, r4
 800c5a0:	6864      	ldr	r4, [r4, #4]
 800c5a2:	e7b2      	b.n	800c50a <_malloc_r+0x32>
 800c5a4:	4634      	mov	r4, r6
 800c5a6:	6876      	ldr	r6, [r6, #4]
 800c5a8:	e7b9      	b.n	800c51e <_malloc_r+0x46>
 800c5aa:	230c      	movs	r3, #12
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	603b      	str	r3, [r7, #0]
 800c5b0:	f000 f84c 	bl	800c64c <__malloc_unlock>
 800c5b4:	e7a1      	b.n	800c4fa <_malloc_r+0x22>
 800c5b6:	6025      	str	r5, [r4, #0]
 800c5b8:	e7de      	b.n	800c578 <_malloc_r+0xa0>
 800c5ba:	bf00      	nop
 800c5bc:	20001e18 	.word	0x20001e18

0800c5c0 <_realloc_r>:
 800c5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c4:	4680      	mov	r8, r0
 800c5c6:	4614      	mov	r4, r2
 800c5c8:	460e      	mov	r6, r1
 800c5ca:	b921      	cbnz	r1, 800c5d6 <_realloc_r+0x16>
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d2:	f7ff bf81 	b.w	800c4d8 <_malloc_r>
 800c5d6:	b92a      	cbnz	r2, 800c5e4 <_realloc_r+0x24>
 800c5d8:	f7ff ff16 	bl	800c408 <_free_r>
 800c5dc:	4625      	mov	r5, r4
 800c5de:	4628      	mov	r0, r5
 800c5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e4:	f000 f838 	bl	800c658 <_malloc_usable_size_r>
 800c5e8:	4284      	cmp	r4, r0
 800c5ea:	4607      	mov	r7, r0
 800c5ec:	d802      	bhi.n	800c5f4 <_realloc_r+0x34>
 800c5ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5f2:	d812      	bhi.n	800c61a <_realloc_r+0x5a>
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	4640      	mov	r0, r8
 800c5f8:	f7ff ff6e 	bl	800c4d8 <_malloc_r>
 800c5fc:	4605      	mov	r5, r0
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d0ed      	beq.n	800c5de <_realloc_r+0x1e>
 800c602:	42bc      	cmp	r4, r7
 800c604:	4622      	mov	r2, r4
 800c606:	4631      	mov	r1, r6
 800c608:	bf28      	it	cs
 800c60a:	463a      	movcs	r2, r7
 800c60c:	f7ff fb72 	bl	800bcf4 <memcpy>
 800c610:	4631      	mov	r1, r6
 800c612:	4640      	mov	r0, r8
 800c614:	f7ff fef8 	bl	800c408 <_free_r>
 800c618:	e7e1      	b.n	800c5de <_realloc_r+0x1e>
 800c61a:	4635      	mov	r5, r6
 800c61c:	e7df      	b.n	800c5de <_realloc_r+0x1e>
	...

0800c620 <_sbrk_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	2300      	movs	r3, #0
 800c624:	4d05      	ldr	r5, [pc, #20]	; (800c63c <_sbrk_r+0x1c>)
 800c626:	4604      	mov	r4, r0
 800c628:	4608      	mov	r0, r1
 800c62a:	602b      	str	r3, [r5, #0]
 800c62c:	f7f4 ff3a 	bl	80014a4 <_sbrk>
 800c630:	1c43      	adds	r3, r0, #1
 800c632:	d102      	bne.n	800c63a <_sbrk_r+0x1a>
 800c634:	682b      	ldr	r3, [r5, #0]
 800c636:	b103      	cbz	r3, 800c63a <_sbrk_r+0x1a>
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	bd38      	pop	{r3, r4, r5, pc}
 800c63c:	20001e20 	.word	0x20001e20

0800c640 <__malloc_lock>:
 800c640:	4801      	ldr	r0, [pc, #4]	; (800c648 <__malloc_lock+0x8>)
 800c642:	f000 b811 	b.w	800c668 <__retarget_lock_acquire_recursive>
 800c646:	bf00      	nop
 800c648:	20001e24 	.word	0x20001e24

0800c64c <__malloc_unlock>:
 800c64c:	4801      	ldr	r0, [pc, #4]	; (800c654 <__malloc_unlock+0x8>)
 800c64e:	f000 b80c 	b.w	800c66a <__retarget_lock_release_recursive>
 800c652:	bf00      	nop
 800c654:	20001e24 	.word	0x20001e24

0800c658 <_malloc_usable_size_r>:
 800c658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c65c:	1f18      	subs	r0, r3, #4
 800c65e:	2b00      	cmp	r3, #0
 800c660:	bfbc      	itt	lt
 800c662:	580b      	ldrlt	r3, [r1, r0]
 800c664:	18c0      	addlt	r0, r0, r3
 800c666:	4770      	bx	lr

0800c668 <__retarget_lock_acquire_recursive>:
 800c668:	4770      	bx	lr

0800c66a <__retarget_lock_release_recursive>:
 800c66a:	4770      	bx	lr

0800c66c <_init>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	bf00      	nop
 800c670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c672:	bc08      	pop	{r3}
 800c674:	469e      	mov	lr, r3
 800c676:	4770      	bx	lr

0800c678 <_fini>:
 800c678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67a:	bf00      	nop
 800c67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c67e:	bc08      	pop	{r3}
 800c680:	469e      	mov	lr, r3
 800c682:	4770      	bx	lr
