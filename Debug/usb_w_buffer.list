
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .img_def      00000228  0800f000  0800f000  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000dd00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000f90  0800de0c  0800de0c  0001de0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ed9c  0800ed9c  0002f228  2**0
                  CONTENTS
  5 .ARM          00000000  0800ed9c  0800ed9c  0002f228  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800ed9c  0800ed9c  0002f228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ed9c  0800ed9c  0001ed9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800eda0  0800eda0  0001eda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001f0  20000000  0800eda4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001b34  200001f0  0800ef94  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001d24  0800ef94  00021d24  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002f228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003eec5  00000000  00000000  0002f251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005bc5  00000000  00000000  0006e116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002308  00000000  00000000  00073ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002010  00000000  00000000  00075fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001df5d  00000000  00000000  00077ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002347c  00000000  00000000  00095f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fc6f  00000000  00000000  000b93d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00159040  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000968c  00000000  00000000  00159090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800ddf4 	.word	0x0800ddf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	0800ddf4 	.word	0x0800ddf4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern TIM_HandleTypeDef htim1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f004 fbce 	bl	800492c <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f004 fbc9 	bl	800492c <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f004 ff07 	bl	8004fb6 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f004 ff00 	bl	8004fb6 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f007 f8da 	bl	80073e4 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f004 febc 	bl	8004fb6 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000480 	.word	0x20000480
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Kpd_Irqv_Init();
 800025c:	f001 fbee 	bl	8001a3c <Kpd_Irqv_Init>
	init_custom_character_db();
 8000260:	f000 fdfe 	bl	8000e60 <init_custom_character_db>
	gpio_custom_init();
 8000264:	f000 fb76 	bl	8000954 <gpio_custom_init>
	enable_backlight(true);
 8000268:	2001      	movs	r0, #1
 800026a:	f001 f8ed 	bl	8001448 <enable_backlight>
	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800026e:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <Start_APP+0x70>)
 8000270:	4a16      	ldr	r2, [pc, #88]	; (80002cc <Start_APP+0x74>)
 8000272:	4917      	ldr	r1, [pc, #92]	; (80002d0 <Start_APP+0x78>)
 8000274:	4817      	ldr	r0, [pc, #92]	; (80002d4 <Start_APP+0x7c>)
 8000276:	f002 fc6b 	bl	8002b50 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <Start_APP+0x7c>)
 800027c:	f004 fa1f 	bl	80046be <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 8000280:	2100      	movs	r1, #0
 8000282:	4814      	ldr	r0, [pc, #80]	; (80002d4 <Start_APP+0x7c>)
 8000284:	f004 fa2a 	bl	80046dc <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 8000288:	2004      	movs	r0, #4
 800028a:	f001 f92f 	bl	80014ec <set_contrast>

		u8g2_SetBitmapMode(&u8g2,0);
 800028e:	2100      	movs	r1, #0
 8000290:	4810      	ldr	r0, [pc, #64]	; (80002d4 <Start_APP+0x7c>)
 8000292:	f002 f8c3 	bl	800241c <u8g2_SetBitmapMode>


		u8g2_SetDrawColor(&u8g2, 1);
 8000296:	2101      	movs	r1, #1
 8000298:	480e      	ldr	r0, [pc, #56]	; (80002d4 <Start_APP+0x7c>)
 800029a:	f003 fc73 	bl	8003b84 <u8g2_SetDrawColor>
		u8g2_SetFontMode(&u8g2, 0);
 800029e:	2100      	movs	r1, #0
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <Start_APP+0x7c>)
 80002a2:	f003 f8ef 	bl	8003484 <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 80002a6:	480b      	ldr	r0, [pc, #44]	; (80002d4 <Start_APP+0x7c>)
 80002a8:	f003 fa5a 	bl	8003760 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_crox2c_mf);
 80002ac:	490a      	ldr	r1, [pc, #40]	; (80002d8 <Start_APP+0x80>)
 80002ae:	4809      	ldr	r0, [pc, #36]	; (80002d4 <Start_APP+0x7c>)
 80002b0:	f003 fa64 	bl	800377c <u8g2_SetFont>
		disp_splash();
 80002b4:	f001 f92e 	bl	8001514 <disp_splash>
		text_insertion_point(0 , 0);
 80002b8:	2100      	movs	r1, #0
 80002ba:	2000      	movs	r0, #0
 80002bc:	f000 fdec 	bl	8000e98 <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002c0:	f000 fb1c 	bl	80008fc <monitor_begin>
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	0800015d 	.word	0x0800015d
 80002cc:	080001cd 	.word	0x080001cd
 80002d0:	0800ecf8 	.word	0x0800ecf8
 80002d4:	2000020c 	.word	0x2000020c
 80002d8:	0800df14 	.word	0x0800df14

080002dc <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

	while (CDC_Transmit_FS(buf,  strlen(buf)) == USBD_OK);
 80002e4:	bf00      	nop
 80002e6:	6878      	ldr	r0, [r7, #4]
 80002e8:	f7ff ff30 	bl	800014c <strlen>
 80002ec:	4603      	mov	r3, r0
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	4619      	mov	r1, r3
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f00c fcb2 	bl	800cc5c <CDC_Transmit_FS>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f3      	beq.n	80002e6 <monitor_send_string+0xa>
}
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000318:	f007 fae8 	bl	80078ec <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 800031c:	f000 fa0c 	bl	8000738 <monitor_interrupt>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200003c8 	.word	0x200003c8
 800032c:	20000520 	.word	0x20000520

08000330 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af02      	add	r7, sp, #8
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 800033a:	2204      	movs	r2, #4
 800033c:	499b      	ldr	r1, [pc, #620]	; (80005ac <monitor_check_cmd+0x27c>)
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f00d f8e6 	bl	800d510 <strncmp>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d108      	bne.n	800035c <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 800034a:	4a99      	ldr	r2, [pc, #612]	; (80005b0 <monitor_check_cmd+0x280>)
 800034c:	21c8      	movs	r1, #200	; 0xc8
 800034e:	4899      	ldr	r0, [pc, #612]	; (80005b4 <monitor_check_cmd+0x284>)
 8000350:	f00d f8aa 	bl	800d4a8 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000354:	4897      	ldr	r0, [pc, #604]	; (80005b4 <monitor_check_cmd+0x284>)
 8000356:	f7ff ffc1 	bl	80002dc <monitor_send_string>
			gpio_handler(cmd[1], cmd[2]);
		}


	}
}
 800035a:	e1b9      	b.n	80006d0 <monitor_check_cmd+0x3a0>
	else if (cmd[0] == LCD_CMD) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2bfe      	cmp	r3, #254	; 0xfe
 8000362:	f040 81b5 	bne.w	80006d0 <monitor_check_cmd+0x3a0>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b31      	cmp	r3, #49	; 0x31
 800036e:	d109      	bne.n	8000384 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000370:	4b91      	ldr	r3, [pc, #580]	; (80005b8 <monitor_check_cmd+0x288>)
 8000372:	4a92      	ldr	r2, [pc, #584]	; (80005bc <monitor_check_cmd+0x28c>)
 8000374:	21c8      	movs	r1, #200	; 0xc8
 8000376:	488f      	ldr	r0, [pc, #572]	; (80005b4 <monitor_check_cmd+0x284>)
 8000378:	f00d f896 	bl	800d4a8 <sniprintf>
			monitor_send_string(ans);
 800037c:	488d      	ldr	r0, [pc, #564]	; (80005b4 <monitor_check_cmd+0x284>)
 800037e:	f7ff ffad 	bl	80002dc <monitor_send_string>
}
 8000382:	e1a5      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b30      	cmp	r3, #48	; 0x30
 800038c:	d109      	bne.n	80003a2 <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 800038e:	4b8a      	ldr	r3, [pc, #552]	; (80005b8 <monitor_check_cmd+0x288>)
 8000390:	4a8b      	ldr	r2, [pc, #556]	; (80005c0 <monitor_check_cmd+0x290>)
 8000392:	21c8      	movs	r1, #200	; 0xc8
 8000394:	4887      	ldr	r0, [pc, #540]	; (80005b4 <monitor_check_cmd+0x284>)
 8000396:	f00d f887 	bl	800d4a8 <sniprintf>
			monitor_send_string(ans);
 800039a:	4886      	ldr	r0, [pc, #536]	; (80005b4 <monitor_check_cmd+0x284>)
 800039c:	f7ff ff9e 	bl	80002dc <monitor_send_string>
}
 80003a0:	e196      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_SOFT_RESET) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3301      	adds	r3, #1
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b56      	cmp	r3, #86	; 0x56
 80003aa:	d102      	bne.n	80003b2 <monitor_check_cmd+0x82>
			lcd_soft_reset();
 80003ac:	f001 f838 	bl	8001420 <lcd_soft_reset>
}
 80003b0:	e18e      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3301      	adds	r3, #1
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b42      	cmp	r3, #66	; 0x42
 80003ba:	d103      	bne.n	80003c4 <monitor_check_cmd+0x94>
			enable_backlight(true);
 80003bc:	2001      	movs	r0, #1
 80003be:	f001 f843 	bl	8001448 <enable_backlight>
}
 80003c2:	e185      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b46      	cmp	r3, #70	; 0x46
 80003cc:	d103      	bne.n	80003d6 <monitor_check_cmd+0xa6>
			enable_backlight(false);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f001 f83a 	bl	8001448 <enable_backlight>
}
 80003d4:	e17c      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_BACKLIGHT_BRIGHTNESS) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3301      	adds	r3, #1
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b41      	cmp	r3, #65	; 0x41
 80003de:	d106      	bne.n	80003ee <monitor_check_cmd+0xbe>
			set_backlight_brightness(cmd[2]);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3302      	adds	r3, #2
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 f858 	bl	800149c <set_backlight_brightness>
}
 80003ec:	e170      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3301      	adds	r3, #1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b66      	cmp	r3, #102	; 0x66
 80003f6:	d103      	bne.n	8000400 <monitor_check_cmd+0xd0>
			inverse_text(true);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 fe55 	bl	80010a8 <inverse_text>
}
 80003fe:	e167      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3301      	adds	r3, #1
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b67      	cmp	r3, #103	; 0x67
 8000408:	d103      	bne.n	8000412 <monitor_check_cmd+0xe2>
			inverse_text(false);
 800040a:	2000      	movs	r0, #0
 800040c:	f000 fe4c 	bl	80010a8 <inverse_text>
}
 8000410:	e15e      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_CLEAR) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3301      	adds	r3, #1
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b58      	cmp	r3, #88	; 0x58
 800041a:	d102      	bne.n	8000422 <monitor_check_cmd+0xf2>
			clear_display();
 800041c:	f001 f806 	bl	800142c <clear_display>
}
 8000420:	e156      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3301      	adds	r3, #1
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b70      	cmp	r3, #112	; 0x70
 800042a:	d10a      	bne.n	8000442 <monitor_check_cmd+0x112>
			put_pixel(cmd[3], cmd[2]);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3303      	adds	r3, #3
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3302      	adds	r3, #2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f000 ff66 	bl	800130c <put_pixel>
}
 8000440:	e146      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b71      	cmp	r3, #113	; 0x71
 800044a:	d10a      	bne.n	8000462 <monitor_check_cmd+0x132>
			erase_pixel(cmd[3], cmd[2]);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3303      	adds	r3, #3
 8000450:	781a      	ldrb	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3302      	adds	r3, #2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4619      	mov	r1, r3
 800045a:	4610      	mov	r0, r2
 800045c:	f000 ff74 	bl	8001348 <erase_pixel>
}
 8000460:	e136      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_PUT_BYTE) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b3e      	cmp	r3, #62	; 0x3e
 800046a:	d10c      	bne.n	8000486 <monitor_check_cmd+0x156>
			put_byte(cmd[2],cmd[3], cmd[4]);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3302      	adds	r3, #2
 8000470:	7818      	ldrb	r0, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3303      	adds	r3, #3
 8000476:	7819      	ldrb	r1, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3304      	adds	r3, #4
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	461a      	mov	r2, r3
 8000480:	f000 ff84 	bl	800138c <put_byte>
}
 8000484:	e124      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_DEFINE_CUSTOM_CHARACTER) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3301      	adds	r3, #1
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b4e      	cmp	r3, #78	; 0x4e
 800048e:	d103      	bne.n	8000498 <monitor_check_cmd+0x168>
					define_custom_character(cmd);
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 fe2f 	bl	80010f4 <define_custom_character>
}
 8000496:	e11b      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3301      	adds	r3, #1
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b43      	cmp	r3, #67	; 0x43
 80004a0:	d103      	bne.n	80004aa <monitor_check_cmd+0x17a>
			auto_line_wrap(true);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fce8 	bl	8000e78 <auto_line_wrap>
}
 80004a8:	e112      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3301      	adds	r3, #1
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b44      	cmp	r3, #68	; 0x44
 80004b2:	d103      	bne.n	80004bc <monitor_check_cmd+0x18c>
			auto_line_wrap(false);
 80004b4:	2000      	movs	r0, #0
 80004b6:	f000 fcdf 	bl	8000e78 <auto_line_wrap>
}
 80004ba:	e109      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_SET_INSERT) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3301      	adds	r3, #1
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b47      	cmp	r3, #71	; 0x47
 80004c4:	d10a      	bne.n	80004dc <monitor_check_cmd+0x1ac>
			text_insertion_point(cmd[2], cmd[3]);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3302      	adds	r3, #2
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3303      	adds	r3, #3
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4610      	mov	r0, r2
 80004d6:	f000 fcdf 	bl	8000e98 <text_insertion_point>
}
 80004da:	e0f9      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_HOME_INSERT) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b48      	cmp	r3, #72	; 0x48
 80004e4:	d104      	bne.n	80004f0 <monitor_check_cmd+0x1c0>
			text_insertion_point(0, 0);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fcd5 	bl	8000e98 <text_insertion_point>
}
 80004ee:	e0ef      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b69      	cmp	r3, #105	; 0x69
 80004f8:	d102      	bne.n	8000500 <monitor_check_cmd+0x1d0>
			disp_splash();
 80004fa:	f001 f80b 	bl	8001514 <disp_splash>
}
 80004fe:	e0e7      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3301      	adds	r3, #1
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b76      	cmp	r3, #118	; 0x76
 8000508:	d103      	bne.n	8000512 <monitor_check_cmd+0x1e2>
			def_v_bar_thickness(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 fddc 	bl	80010c8 <def_v_bar_thickness>
}
 8000510:	e0de      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3301      	adds	r3, #1
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b73      	cmp	r3, #115	; 0x73
 800051a:	d103      	bne.n	8000524 <monitor_check_cmd+0x1f4>
			def_v_bar_thickness(0);
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fdd3 	bl	80010c8 <def_v_bar_thickness>
}
 8000522:	e0d5      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3301      	adds	r3, #1
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b3d      	cmp	r3, #61	; 0x3d
 800052c:	d10a      	bne.n	8000544 <monitor_check_cmd+0x214>
			draw_un_v_bar_graph(cmd[2], cmd[3], false);
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3302      	adds	r3, #2
 8000532:	7818      	ldrb	r0, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3303      	adds	r3, #3
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2200      	movs	r2, #0
 800053c:	4619      	mov	r1, r3
 800053e:	f000 fe03 	bl	8001148 <draw_un_v_bar_graph>
}
 8000542:	e0c5      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_ERASE_VERTICAL_BAR_GRAPH ) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b2d      	cmp	r3, #45	; 0x2d
 800054c:	d10a      	bne.n	8000564 <monitor_check_cmd+0x234>
			draw_un_v_bar_graph(cmd[2], cmd[3], true);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3302      	adds	r3, #2
 8000552:	7818      	ldrb	r0, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3303      	adds	r3, #3
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2201      	movs	r2, #1
 800055c:	4619      	mov	r1, r3
 800055e:	f000 fdf3 	bl	8001148 <draw_un_v_bar_graph>
}
 8000562:	e0b5      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH ) {
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b7c      	cmp	r3, #124	; 0x7c
 800056c:	d10c      	bne.n	8000588 <monitor_check_cmd+0x258>
			draw_un_h_bar_graph(cmd[2], cmd[3], cmd[4],false);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	3302      	adds	r3, #2
 8000572:	7818      	ldrb	r0, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3303      	adds	r3, #3
 8000578:	7819      	ldrb	r1, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3304      	adds	r3, #4
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	2300      	movs	r3, #0
 8000582:	f000 fe59 	bl	8001238 <draw_un_h_bar_graph>
}
 8000586:	e0a3      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_ERASE_HORIZONTAL_BAR_GRAPH ) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b2b      	cmp	r3, #43	; 0x2b
 8000590:	d118      	bne.n	80005c4 <monitor_check_cmd+0x294>
			draw_un_h_bar_graph(cmd[2], cmd[3], cmd[4],true);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3302      	adds	r3, #2
 8000596:	7818      	ldrb	r0, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3303      	adds	r3, #3
 800059c:	7819      	ldrb	r1, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3304      	adds	r3, #4
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	2301      	movs	r3, #1
 80005a6:	f000 fe47 	bl	8001238 <draw_un_h_bar_graph>
}
 80005aa:	e091      	b.n	80006d0 <monitor_check_cmd+0x3a0>
 80005ac:	0800de0c 	.word	0x0800de0c
 80005b0:	0800de14 	.word	0x0800de14
 80005b4:	20000368 	.word	0x20000368
 80005b8:	0800de4c 	.word	0x0800de4c
 80005bc:	0800de50 	.word	0x0800de50
 80005c0:	0800de68 	.word	0x0800de68
		else if (cmd[1] == LCD_UNDERLINE_CURSOR_ON) {
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3301      	adds	r3, #1
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b4a      	cmp	r3, #74	; 0x4a
 80005cc:	d10a      	bne.n	80005e4 <monitor_check_cmd+0x2b4>
			put_Ucursor(true,cmd[2], cmd[3],0);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3302      	adds	r3, #2
 80005d2:	7819      	ldrb	r1, [r3, #0]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	3303      	adds	r3, #3
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	2300      	movs	r3, #0
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fc87 	bl	8000ef0 <put_Ucursor>
}
 80005e2:	e075      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_UNDERLINE_CURSOR_OFF) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3301      	adds	r3, #1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b4b      	cmp	r3, #75	; 0x4b
 80005ec:	d10a      	bne.n	8000604 <monitor_check_cmd+0x2d4>
			put_Ucursor(false,cmd[2], cmd[3],0);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3302      	adds	r3, #2
 80005f2:	7819      	ldrb	r1, [r3, #0]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3303      	adds	r3, #3
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 fc77 	bl	8000ef0 <put_Ucursor>
}
 8000602:	e065      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_MOVE_CURSOR_LEFT ) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3301      	adds	r3, #1
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b4c      	cmp	r3, #76	; 0x4c
 800060c:	d10a      	bne.n	8000624 <monitor_check_cmd+0x2f4>
			put_Ucursor(true,cmd[2], cmd[3],'L');
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	3302      	adds	r3, #2
 8000612:	7819      	ldrb	r1, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3303      	adds	r3, #3
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	234c      	movs	r3, #76	; 0x4c
 800061c:	2001      	movs	r0, #1
 800061e:	f000 fc67 	bl	8000ef0 <put_Ucursor>
}
 8000622:	e055      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_MOVE_CURSOR_RIGHT ) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b4d      	cmp	r3, #77	; 0x4d
 800062c:	d10a      	bne.n	8000644 <monitor_check_cmd+0x314>
			put_Ucursor(true,cmd[2], cmd[3],'R');
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3302      	adds	r3, #2
 8000632:	7819      	ldrb	r1, [r3, #0]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3303      	adds	r3, #3
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	2352      	movs	r3, #82	; 0x52
 800063c:	2001      	movs	r0, #1
 800063e:	f000 fc57 	bl	8000ef0 <put_Ucursor>
}
 8000642:	e045      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_GPO_ON) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3301      	adds	r3, #1
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b63      	cmp	r3, #99	; 0x63
 800064c:	d10b      	bne.n	8000666 <monitor_check_cmd+0x336>
			gpio_handler(cmd[1], cmd[2]);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3301      	adds	r3, #1
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3302      	adds	r3, #2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b29b      	uxth	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	4610      	mov	r0, r2
 8000660:	f000 f9f2 	bl	8000a48 <gpio_handler>
}
 8000664:	e034      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_GPO_OFF) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b64      	cmp	r3, #100	; 0x64
 800066e:	d10b      	bne.n	8000688 <monitor_check_cmd+0x358>
			gpio_handler(cmd[1], cmd[2]);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3301      	adds	r3, #1
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3302      	adds	r3, #2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b29b      	uxth	r3, r3
 800067e:	4619      	mov	r1, r3
 8000680:	4610      	mov	r0, r2
 8000682:	f000 f9e1 	bl	8000a48 <gpio_handler>
}
 8000686:	e023      	b.n	80006d0 <monitor_check_cmd+0x3a0>
		else if (cmd[1] == LCD_READ_GPI) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3301      	adds	r3, #1
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b65      	cmp	r3, #101	; 0x65
 8000690:	d11e      	bne.n	80006d0 <monitor_check_cmd+0x3a0>
			if (cmd[2] == '4') {
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3302      	adds	r3, #2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b34      	cmp	r3, #52	; 0x34
 800069a:	d10e      	bne.n	80006ba <monitor_check_cmd+0x38a>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <monitor_check_cmd+0x3a8>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
				ddp[1]);
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <monitor_check_cmd+0x3a8>)
 80006a4:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4613      	mov	r3, r2
 80006aa:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <monitor_check_cmd+0x3ac>)
 80006ac:	21c8      	movs	r1, #200	; 0xc8
 80006ae:	480c      	ldr	r0, [pc, #48]	; (80006e0 <monitor_check_cmd+0x3b0>)
 80006b0:	f00c fefa 	bl	800d4a8 <sniprintf>
				monitor_send_string(ans);
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <monitor_check_cmd+0x3b0>)
 80006b6:	f7ff fe11 	bl	80002dc <monitor_send_string>
			gpio_handler(cmd[1], cmd[2]);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3301      	adds	r3, #1
 80006be:	781a      	ldrb	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3302      	adds	r3, #2
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	4610      	mov	r0, r2
 80006cc:	f000 f9bc 	bl	8000a48 <gpio_handler>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	0800de7c 	.word	0x0800de7c
 80006e0:	20000368 	.word	0x20000368

080006e4 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]

	memcpy(cmd + size, buf, len);
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <app_usb_cbk+0x44>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <app_usb_cbk+0x48>)
 80006f4:	4413      	add	r3, r2
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	6879      	ldr	r1, [r7, #4]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f00c febe 	bl	800d47c <memcpy>
	size += len;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <app_usb_cbk+0x44>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <app_usb_cbk+0x44>)
 800070a:	6013      	str	r3, [r2, #0]

	if (size >= CMD_BUF_SIZE) {
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <app_usb_cbk+0x44>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2bc7      	cmp	r3, #199	; 0xc7
 8000712:	d902      	bls.n	800071a <app_usb_cbk+0x36>
		new_cmd = true;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <app_usb_cbk+0x4c>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <app_usb_cbk+0x50>)
 800071c:	f007 f894 	bl	8007848 <HAL_TIM_Base_Start_IT>

}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200003c4 	.word	0x200003c4
 800072c:	200002a0 	.word	0x200002a0
 8000730:	200003c8 	.word	0x200003c8
 8000734:	20000520 	.word	0x20000520

08000738 <monitor_interrupt>:

void monitor_interrupt(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	if (new_cmd) {
 800073e:	4b6b      	ldr	r3, [pc, #428]	; (80008ec <monitor_interrupt+0x1b4>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	f000 80cd 	beq.w	80008e2 <monitor_interrupt+0x1aa>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 800074c:	4b68      	ldr	r3, [pc, #416]	; (80008f0 <monitor_interrupt+0x1b8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 8000752:	2300      	movs	r3, #0
 8000754:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 8000756:	2300      	movs	r3, #0
 8000758:	70fb      	strb	r3, [r7, #3]

//		o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
//		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
//		 começa o inicializador

		for (offset = 0; offset < size; offset++) {
 800075a:	2300      	movs	r3, #0
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	e0a3      	b.n	80008a8 <monitor_interrupt+0x170>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD && *(cmd + offset + 1) != 20) {
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	4a64      	ldr	r2, [pc, #400]	; (80008f4 <monitor_interrupt+0x1bc>)
 8000764:	4413      	add	r3, r2
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2bfd      	cmp	r3, #253	; 0xfd
 800076a:	d110      	bne.n	800078e <monitor_interrupt+0x56>
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	3301      	adds	r3, #1
 8000770:	4a60      	ldr	r2, [pc, #384]	; (80008f4 <monitor_interrupt+0x1bc>)
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2bfe      	cmp	r3, #254	; 0xfe
 8000778:	d009      	beq.n	800078e <monitor_interrupt+0x56>
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3301      	adds	r3, #1
 800077e:	4a5d      	ldr	r2, [pc, #372]	; (80008f4 <monitor_interrupt+0x1bc>)
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b14      	cmp	r3, #20
 8000786:	d002      	beq.n	800078e <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	3301      	adds	r3, #1
 800078c:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD && *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00c      	beq.n	80007ae <monitor_interrupt+0x76>
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4a57      	ldr	r2, [pc, #348]	; (80008f4 <monitor_interrupt+0x1bc>)
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2bfe      	cmp	r3, #254	; 0xfe
 800079e:	d106      	bne.n	80007ae <monitor_interrupt+0x76>
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a53      	ldr	r2, [pc, #332]	; (80008f4 <monitor_interrupt+0x1bc>)
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2bfd      	cmp	r3, #253	; 0xfd
 80007ac:	d104      	bne.n	80007b8 <monitor_interrupt+0x80>
 80007ae:	79fa      	ldrb	r2, [r7, #7]
 80007b0:	4b4f      	ldr	r3, [pc, #316]	; (80008f0 <monitor_interrupt+0x1b8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d103      	bne.n	80007c0 <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o fim de outro
				printable = true;
 80007b8:	2301      	movs	r3, #1
 80007ba:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	717b      	strb	r3, [r7, #5]
			}
			if(offset+1 == size && bgn_print>end_print  || offset+1 == size &&bgn_print< end_print){
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a4a      	ldr	r2, [pc, #296]	; (80008f0 <monitor_interrupt+0x1b8>)
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d103      	bne.n	80007d4 <monitor_interrupt+0x9c>
 80007cc:	79ba      	ldrb	r2, [r7, #6]
 80007ce:	797b      	ldrb	r3, [r7, #5]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d809      	bhi.n	80007e8 <monitor_interrupt+0xb0>
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a45      	ldr	r2, [pc, #276]	; (80008f0 <monitor_interrupt+0x1b8>)
 80007da:	6812      	ldr	r2, [r2, #0]
 80007dc:	4293      	cmp	r3, r2
 80007de:	d108      	bne.n	80007f2 <monitor_interrupt+0xba>
 80007e0:	79ba      	ldrb	r2, [r7, #6]
 80007e2:	797b      	ldrb	r3, [r7, #5]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d204      	bcs.n	80007f2 <monitor_interrupt+0xba>
				printable = true;
 80007e8:	2301      	movs	r3, #1
 80007ea:	70fb      	strb	r3, [r7, #3]
				end_print = offset+1;
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	3301      	adds	r3, #1
 80007f0:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d01f      	beq.n	8000838 <monitor_interrupt+0x100>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	4a3e      	ldr	r2, [pc, #248]	; (80008f4 <monitor_interrupt+0x1bc>)
 80007fc:	1899      	adds	r1, r3, r2
 80007fe:	797a      	ldrb	r2, [r7, #5]
 8000800:	79bb      	ldrb	r3, [r7, #6]
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	461a      	mov	r2, r3
 8000806:	483c      	ldr	r0, [pc, #240]	; (80008f8 <monitor_interrupt+0x1c0>)
 8000808:	f00c fe96 	bl	800d538 <strncpy>
//				monitor_send_string(ans);
//				CDC_Transmit_FS(ans, end_print - bgn_print);
				lcd_print(ans);
 800080c:	483a      	ldr	r0, [pc, #232]	; (80008f8 <monitor_interrupt+0x1c0>)
 800080e:	f000 ffd7 	bl	80017c0 <lcd_print>
				memset(ans, 0, ANS_BUF_SIZE);
 8000812:	225a      	movs	r2, #90	; 0x5a
 8000814:	2100      	movs	r1, #0
 8000816:	4838      	ldr	r0, [pc, #224]	; (80008f8 <monitor_interrupt+0x1c0>)
 8000818:	f00c fe3e 	bl	800d498 <memset>
				printable = !printable;
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b00      	cmp	r3, #0
 8000820:	bf14      	ite	ne
 8000822:	2301      	movne	r3, #1
 8000824:	2300      	moveq	r3, #0
 8000826:	b2db      	uxtb	r3, r3
 8000828:	f083 0301 	eor.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	70fb      	strb	r3, [r7, #3]
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	70fb      	strb	r3, [r7, #3]
			}

			if (*(cmd + offset) == LCD_CMD) {
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4a2e      	ldr	r2, [pc, #184]	; (80008f4 <monitor_interrupt+0x1bc>)
 800083c:	4413      	add	r3, r2
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2bfe      	cmp	r3, #254	; 0xfe
 8000842:	d117      	bne.n	8000874 <monitor_interrupt+0x13c>
				monitor_check_cmd((char*) cmd + offset, size);
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	4a2b      	ldr	r2, [pc, #172]	; (80008f4 <monitor_interrupt+0x1bc>)
 8000848:	4413      	add	r3, r2
 800084a:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <monitor_interrupt+0x1b8>)
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fd6d 	bl	8000330 <monitor_check_cmd>
				is_cmd = !is_cmd;
 8000856:	793b      	ldrb	r3, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf14      	ite	ne
 800085c:	2301      	movne	r3, #1
 800085e:	2300      	moveq	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f083 0301 	eor.w	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	713b      	strb	r3, [r7, #4]
 800086a:	793b      	ldrb	r3, [r7, #4]
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	713b      	strb	r3, [r7, #4]
 8000872:	e013      	b.n	800089c <monitor_interrupt+0x164>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <monitor_interrupt+0x1bc>)
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2bfd      	cmp	r3, #253	; 0xfd
 800087e:	d10d      	bne.n	800089c <monitor_interrupt+0x164>
				is_cmd = !is_cmd;
 8000880:	793b      	ldrb	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	bf14      	ite	ne
 8000886:	2301      	movne	r3, #1
 8000888:	2300      	moveq	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f083 0301 	eor.w	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	713b      	strb	r3, [r7, #4]
 8000894:	793b      	ldrb	r3, [r7, #4]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	713b      	strb	r3, [r7, #4]
			}
			if(bgn_print>end_print && offset+1 > size){
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	797b      	ldrb	r3, [r7, #5]
 80008a0:	429a      	cmp	r2, r3
		for (offset = 0; offset < size; offset++) {
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	3301      	adds	r3, #1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	79fa      	ldrb	r2, [r7, #7]
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <monitor_interrupt+0x1b8>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	f4ff af56 	bcc.w	8000760 <monitor_interrupt+0x28>

			}
		}
		size = 0;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <monitor_interrupt+0x1b8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 80008ba:	22c8      	movs	r2, #200	; 0xc8
 80008bc:	2100      	movs	r1, #0
 80008be:	480d      	ldr	r0, [pc, #52]	; (80008f4 <monitor_interrupt+0x1bc>)
 80008c0:	f00c fdea 	bl	800d498 <memset>
		new_cmd = !new_cmd;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <monitor_interrupt+0x1b4>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	bf14      	ite	ne
 80008cc:	2301      	movne	r3, #1
 80008ce:	2300      	moveq	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f083 0301 	eor.w	r3, r3, #1
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b03      	ldr	r3, [pc, #12]	; (80008ec <monitor_interrupt+0x1b4>)
 80008e0:	701a      	strb	r2, [r3, #0]
	}
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200003c8 	.word	0x200003c8
 80008f0:	200003c4 	.word	0x200003c4
 80008f4:	200002a0 	.word	0x200002a0
 80008f8:	20000368 	.word	0x20000368

080008fc <monitor_begin>:

void monitor_begin(void) {
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <monitor_begin+0x18>)
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <monitor_begin+0x1c>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	200003c4 	.word	0x200003c4
 8000918:	200003c8 	.word	0x200003c8

0800091c <exp>:

/**@brief	Exponentiate [value] , at the [pot] level
 * eu redefini a funcão de exponenciação manualmente por não poder importar a biblioteca matematica inteira apenas por uma função :D
 *
 */
uint16_t exp(uint16_t val, uint16_t pot) {
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	460a      	mov	r2, r1
 8000926:	80fb      	strh	r3, [r7, #6]
 8000928:	4613      	mov	r3, r2
 800092a:	80bb      	strh	r3, [r7, #4]
	uint16_t ans = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	81fb      	strh	r3, [r7, #14]
	while (pot) {
 8000930:	e007      	b.n	8000942 <exp+0x26>
		ans *= val;
 8000932:	89fb      	ldrh	r3, [r7, #14]
 8000934:	88fa      	ldrh	r2, [r7, #6]
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	81fb      	strh	r3, [r7, #14]
		pot--;
 800093c:	88bb      	ldrh	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	80bb      	strh	r3, [r7, #4]
	while (pot) {
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f4      	bne.n	8000932 <exp+0x16>
	}
	return ans;
 8000948:	89fb      	ldrh	r3, [r7, #14]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <gpio_custom_init>:
void gpio_custom_init(void) {
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	/* 0  ,   1 ,   2 ,  3  */
	/*PB12, PB13, PB14, PB15*/
	s_pins[0].GPIOx = GPIOB;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <gpio_custom_init+0x74>)
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <gpio_custom_init+0x78>)
 800095c:	601a      	str	r2, [r3, #0]
	s_pins[0].pin = GPIO_PIN_12;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <gpio_custom_init+0x74>)
 8000960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000964:	809a      	strh	r2, [r3, #4]
	s_pins[0].is_init = false;
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <gpio_custom_init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	71da      	strb	r2, [r3, #7]
	s_pins[0].dir = '?';
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <gpio_custom_init+0x74>)
 800096e:	223f      	movs	r2, #63	; 0x3f
 8000970:	719a      	strb	r2, [r3, #6]

	s_pins[1].GPIOx = GPIOB;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <gpio_custom_init+0x74>)
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <gpio_custom_init+0x78>)
 8000976:	609a      	str	r2, [r3, #8]
	s_pins[1].pin = GPIO_PIN_13;
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <gpio_custom_init+0x74>)
 800097a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800097e:	819a      	strh	r2, [r3, #12]
	s_pins[1].is_init = false;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <gpio_custom_init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	73da      	strb	r2, [r3, #15]
	s_pins[1].dir = '?';
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <gpio_custom_init+0x74>)
 8000988:	223f      	movs	r2, #63	; 0x3f
 800098a:	739a      	strb	r2, [r3, #14]

	s_pins[2].GPIOx = GPIOB;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <gpio_custom_init+0x74>)
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <gpio_custom_init+0x78>)
 8000990:	611a      	str	r2, [r3, #16]
	s_pins[2].pin = GPIO_PIN_14;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <gpio_custom_init+0x74>)
 8000994:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000998:	829a      	strh	r2, [r3, #20]
	s_pins[2].is_init = false;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <gpio_custom_init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	75da      	strb	r2, [r3, #23]
	s_pins[2].dir = '?';
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <gpio_custom_init+0x74>)
 80009a2:	223f      	movs	r2, #63	; 0x3f
 80009a4:	759a      	strb	r2, [r3, #22]

	s_pins[3].GPIOx = GPIOB;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <gpio_custom_init+0x74>)
 80009a8:	4a08      	ldr	r2, [pc, #32]	; (80009cc <gpio_custom_init+0x78>)
 80009aa:	619a      	str	r2, [r3, #24]
	s_pins[3].pin = GPIO_PIN_15;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <gpio_custom_init+0x74>)
 80009ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009b2:	839a      	strh	r2, [r3, #28]
	s_pins[3].is_init = false;
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <gpio_custom_init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	77da      	strb	r2, [r3, #31]
	s_pins[3].dir = '?';
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <gpio_custom_init+0x74>)
 80009bc:	223f      	movs	r2, #63	; 0x3f
 80009be:	779a      	strb	r2, [r3, #30]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000440 	.word	0x20000440
 80009cc:	40010c00 	.word	0x40010c00

080009d0 <init_custom_gpio_ports>:

void init_custom_gpio_ports(GPIO_TypeDef *GPIOx, uint16_t pin, uint8_t mode,
		uint8_t pull) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	4608      	mov	r0, r1
 80009da:	4611      	mov	r1, r2
 80009dc:	461a      	mov	r2, r3
 80009de:	4603      	mov	r3, r0
 80009e0:	807b      	strh	r3, [r7, #2]
 80009e2:	460b      	mov	r3, r1
 80009e4:	707b      	strb	r3, [r7, #1]
 80009e6:	4613      	mov	r3, r2
 80009e8:	703b      	strb	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <init_custom_gpio_ports+0x74>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <init_custom_gpio_ports+0x74>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <init_custom_gpio_ports+0x74>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]

	if (mode == GPIO_MODE_OUTPUT_PP) {
 8000a10:	787b      	ldrb	r3, [r7, #1]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d106      	bne.n	8000a24 <init_custom_gpio_ports+0x54>
		/*output */
		GPIO_InitStruct.Pin = pin;
 8000a16:	887b      	ldrh	r3, [r7, #2]
 8000a18:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = mode;
 8000a1a:	787b      	ldrb	r3, [r7, #1]
 8000a1c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	e003      	b.n	8000a2c <init_custom_gpio_ports+0x5c>
	} else {
		/*imput */
		GPIO_InitStruct.Pin = pin;
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = mode;
 8000a28:	787b      	ldrb	r3, [r7, #1]
 8000a2a:	617b      	str	r3, [r7, #20]
	}
	GPIO_InitStruct.Pull = pull;
 8000a2c:	783b      	ldrb	r3, [r7, #0]
 8000a2e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f004 f922 	bl	8004c80 <HAL_GPIO_Init>
}
 8000a3c:	bf00      	nop
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000

08000a48 <gpio_handler>:
void gpio_handler(uint8_t function, uint16_t pin) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	4613      	mov	r3, r2
 8000a56:	80bb      	strh	r3, [r7, #4]

	uint8_t mode;
	int8_t pull;

//is init
	if (!s_pins[pin].is_init) {
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	4a6c      	ldr	r2, [pc, #432]	; (8000c0c <gpio_handler+0x1c4>)
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	4413      	add	r3, r2
 8000a60:	79db      	ldrb	r3, [r3, #7]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f083 0301 	eor.w	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 8086 	beq.w	8000b7c <gpio_handler+0x134>
		if (function == LCD_GPO_ON) {
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b63      	cmp	r3, #99	; 0x63
 8000a74:	d125      	bne.n	8000ac2 <gpio_handler+0x7a>
			mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
			pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73bb      	strb	r3, [r7, #14]
			s_pins[pin].is_init = true;
 8000a7e:	88bb      	ldrh	r3, [r7, #4]
 8000a80:	4a62      	ldr	r2, [pc, #392]	; (8000c0c <gpio_handler+0x1c4>)
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	4413      	add	r3, r2
 8000a86:	2201      	movs	r2, #1
 8000a88:	71da      	strb	r2, [r3, #7]

			init_custom_gpio_ports(s_pins[pin].GPIOx, s_pins[pin].pin,
 8000a8a:	88bb      	ldrh	r3, [r7, #4]
 8000a8c:	4a5f      	ldr	r2, [pc, #380]	; (8000c0c <gpio_handler+0x1c4>)
 8000a8e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	4a5d      	ldr	r2, [pc, #372]	; (8000c0c <gpio_handler+0x1c4>)
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	4413      	add	r3, r2
 8000a9a:	889b      	ldrh	r3, [r3, #4]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f7ff ff95 	bl	80009d0 <init_custom_gpio_ports>
					GPIO_MODE_OUTPUT_PP, GPIO_NOPULL);
			HAL_GPIO_WritePin(s_pins[pin].GPIOx, s_pins[pin].pin, RESET);
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	4a58      	ldr	r2, [pc, #352]	; (8000c0c <gpio_handler+0x1c4>)
 8000aaa:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	4a56      	ldr	r2, [pc, #344]	; (8000c0c <gpio_handler+0x1c4>)
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	889b      	ldrh	r3, [r3, #4]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	f004 fa7a 	bl	8004fb6 <HAL_GPIO_WritePin>
		}
		if (function == LCD_GPO_OFF) {
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b64      	cmp	r3, #100	; 0x64
 8000ac6:	d125      	bne.n	8000b14 <gpio_handler+0xcc>
			mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
			pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73bb      	strb	r3, [r7, #14]
			s_pins[pin].is_init = true;
 8000ad0:	88bb      	ldrh	r3, [r7, #4]
 8000ad2:	4a4e      	ldr	r2, [pc, #312]	; (8000c0c <gpio_handler+0x1c4>)
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	2201      	movs	r2, #1
 8000ada:	71da      	strb	r2, [r3, #7]

			init_custom_gpio_ports(s_pins[pin].GPIOx, s_pins[pin].pin,
 8000adc:	88bb      	ldrh	r3, [r7, #4]
 8000ade:	4a4b      	ldr	r2, [pc, #300]	; (8000c0c <gpio_handler+0x1c4>)
 8000ae0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	4a49      	ldr	r2, [pc, #292]	; (8000c0c <gpio_handler+0x1c4>)
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	4413      	add	r3, r2
 8000aec:	889b      	ldrh	r3, [r3, #4]
 8000aee:	b299      	uxth	r1, r3
 8000af0:	2300      	movs	r3, #0
 8000af2:	2201      	movs	r2, #1
 8000af4:	f7ff ff6c 	bl	80009d0 <init_custom_gpio_ports>
					GPIO_MODE_OUTPUT_PP, GPIO_NOPULL);
			HAL_GPIO_WritePin(s_pins[pin].GPIOx, s_pins[pin].pin, SET);
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	4a44      	ldr	r2, [pc, #272]	; (8000c0c <gpio_handler+0x1c4>)
 8000afc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	4a42      	ldr	r2, [pc, #264]	; (8000c0c <gpio_handler+0x1c4>)
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	4413      	add	r3, r2
 8000b08:	889b      	ldrh	r3, [r3, #4]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f004 fa51 	bl	8004fb6 <HAL_GPIO_WritePin>
		}
		if (function == LCD_READ_GPI) {
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b65      	cmp	r3, #101	; 0x65
 8000b18:	d173      	bne.n	8000c02 <gpio_handler+0x1ba>
			mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	73fb      	strb	r3, [r7, #15]
			pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73bb      	strb	r3, [r7, #14]
			s_pins[pin].is_init = true;
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	4a39      	ldr	r2, [pc, #228]	; (8000c0c <gpio_handler+0x1c4>)
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	4413      	add	r3, r2
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	71da      	strb	r2, [r3, #7]

			init_custom_gpio_ports(s_pins[pin].GPIOx, s_pins[pin].pin,
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	4a36      	ldr	r2, [pc, #216]	; (8000c0c <gpio_handler+0x1c4>)
 8000b32:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b36:	88bb      	ldrh	r3, [r7, #4]
 8000b38:	4a34      	ldr	r2, [pc, #208]	; (8000c0c <gpio_handler+0x1c4>)
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	4413      	add	r3, r2
 8000b3e:	889b      	ldrh	r3, [r3, #4]
 8000b40:	b299      	uxth	r1, r3
 8000b42:	2300      	movs	r3, #0
 8000b44:	2200      	movs	r2, #0
 8000b46:	f7ff ff43 	bl	80009d0 <init_custom_gpio_ports>
					GPIO_MODE_INPUT, GPIO_NOPULL);
			if ((HAL_GPIO_ReadPin(s_pins[pin].GPIOx, s_pins[pin].pin))
 8000b4a:	88bb      	ldrh	r3, [r7, #4]
 8000b4c:	4a2f      	ldr	r2, [pc, #188]	; (8000c0c <gpio_handler+0x1c4>)
 8000b4e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000b52:	88bb      	ldrh	r3, [r7, #4]
 8000b54:	492d      	ldr	r1, [pc, #180]	; (8000c0c <gpio_handler+0x1c4>)
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	440b      	add	r3, r1
 8000b5a:	889b      	ldrh	r3, [r3, #4]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4610      	mov	r0, r2
 8000b62:	f004 fa11 	bl	8004f88 <HAL_GPIO_ReadPin>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d103      	bne.n	8000b74 <gpio_handler+0x12c>
					== GPIO_PIN_RESET) {
				monitor_send_string("1");
 8000b6c:	4828      	ldr	r0, [pc, #160]	; (8000c10 <gpio_handler+0x1c8>)
 8000b6e:	f7ff fbb5 	bl	80002dc <monitor_send_string>
				monitor_send_string("1");
			}
			s_pins[pin].is_init = false;
		}
	}
}
 8000b72:	e046      	b.n	8000c02 <gpio_handler+0x1ba>
				monitor_send_string("0");
 8000b74:	4827      	ldr	r0, [pc, #156]	; (8000c14 <gpio_handler+0x1cc>)
 8000b76:	f7ff fbb1 	bl	80002dc <monitor_send_string>
}
 8000b7a:	e042      	b.n	8000c02 <gpio_handler+0x1ba>
		if (function == LCD_GPO_ON) {
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b63      	cmp	r3, #99	; 0x63
 8000b80:	d10d      	bne.n	8000b9e <gpio_handler+0x156>
			HAL_GPIO_WritePin(s_pins[pin].GPIOx, s_pins[pin].pin, RESET);
 8000b82:	88bb      	ldrh	r3, [r7, #4]
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <gpio_handler+0x1c4>)
 8000b86:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000b8a:	88bb      	ldrh	r3, [r7, #4]
 8000b8c:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <gpio_handler+0x1c4>)
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	4413      	add	r3, r2
 8000b92:	889b      	ldrh	r3, [r3, #4]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	2200      	movs	r2, #0
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f004 fa0c 	bl	8004fb6 <HAL_GPIO_WritePin>
		if (function == LCD_GPO_OFF) {
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b64      	cmp	r3, #100	; 0x64
 8000ba2:	d10d      	bne.n	8000bc0 <gpio_handler+0x178>
			HAL_GPIO_WritePin(s_pins[pin].GPIOx, s_pins[pin].pin, SET);
 8000ba4:	88bb      	ldrh	r3, [r7, #4]
 8000ba6:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <gpio_handler+0x1c4>)
 8000ba8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000bac:	88bb      	ldrh	r3, [r7, #4]
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <gpio_handler+0x1c4>)
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	889b      	ldrh	r3, [r3, #4]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f004 f9fb 	bl	8004fb6 <HAL_GPIO_WritePin>
		if (function == LCD_READ_GPI) {
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	2b65      	cmp	r3, #101	; 0x65
 8000bc4:	d11d      	bne.n	8000c02 <gpio_handler+0x1ba>
			if ((HAL_GPIO_ReadPin(s_pins[pin].GPIOx, s_pins[pin].pin))
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <gpio_handler+0x1c4>)
 8000bca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	490e      	ldr	r1, [pc, #56]	; (8000c0c <gpio_handler+0x1c4>)
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	440b      	add	r3, r1
 8000bd6:	889b      	ldrh	r3, [r3, #4]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4610      	mov	r0, r2
 8000bde:	f004 f9d3 	bl	8004f88 <HAL_GPIO_ReadPin>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d103      	bne.n	8000bf0 <gpio_handler+0x1a8>
				monitor_send_string("0");
 8000be8:	480a      	ldr	r0, [pc, #40]	; (8000c14 <gpio_handler+0x1cc>)
 8000bea:	f7ff fb77 	bl	80002dc <monitor_send_string>
 8000bee:	e002      	b.n	8000bf6 <gpio_handler+0x1ae>
				monitor_send_string("1");
 8000bf0:	4807      	ldr	r0, [pc, #28]	; (8000c10 <gpio_handler+0x1c8>)
 8000bf2:	f7ff fb73 	bl	80002dc <monitor_send_string>
			s_pins[pin].is_init = false;
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <gpio_handler+0x1c4>)
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	2200      	movs	r2, #0
 8000c00:	71da      	strb	r2, [r3, #7]
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000440 	.word	0x20000440
 8000c10:	0800de88 	.word	0x0800de88
 8000c14:	0800de8c 	.word	0x0800de8c

08000c18 <decode_convert_expand_encode>:
/**@brief	Decode Convert  Expand Rotate Encode
 * Esta função decodifica um caracter em hexadecimal dado, amplifica ele para o tamanho da memoria do novo display, rotaciona ele e recodifica
 * de maneira que no banco de dados eu só vou salvar o caractere definido pelo usuario em hexadecimal e o indice
 *
 */
void decode_convert_expand_encode(uint8_t *hex_char) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b094      	sub	sp, #80	; 0x50
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	uint8_t mat[N][N] = { 0 };
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	2240      	movs	r2, #64	; 0x40
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f00c fc35 	bl	800d498 <memset>
	uint8_t i, j, k, hex, temp;

//decode_expand
	for (i = 3; *(hex_char + i) != 0xFD; i++) {
 8000c2e:	2303      	movs	r3, #3
 8000c30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000c34:	e02e      	b.n	8000c94 <decode_convert_expand_encode+0x7c>
		hex = *(hex_char + i);
 8000c36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

		for (j = 7; j >= 0 && j < 8; j--) {
 8000c44:	2307      	movs	r3, #7
 8000c46:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000c4a:	e01a      	b.n	8000c82 <decode_convert_expand_encode+0x6a>
			mat[i - 3][j] = hex % 2;
 8000c4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c50:	1eda      	subs	r2, r3, #3
 8000c52:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000c56:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 8000c5a:	f001 0101 	and.w	r1, r1, #1
 8000c5e:	b2c9      	uxtb	r1, r1
 8000c60:	00d2      	lsls	r2, r2, #3
 8000c62:	3250      	adds	r2, #80	; 0x50
 8000c64:	443a      	add	r2, r7
 8000c66:	4413      	add	r3, r2
 8000c68:	3b48      	subs	r3, #72	; 0x48
 8000c6a:	460a      	mov	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
			hex = hex / 2;
 8000c6e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000c72:	085b      	lsrs	r3, r3, #1
 8000c74:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		for (j = 7; j >= 0 && j < 8; j--) {
 8000c78:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000c82:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000c86:	2b07      	cmp	r3, #7
 8000c88:	d9e0      	bls.n	8000c4c <decode_convert_expand_encode+0x34>
	for (i = 3; *(hex_char + i) != 0xFD; i++) {
 8000c8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c8e:	3301      	adds	r3, #1
 8000c90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000c94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2bfd      	cmp	r3, #253	; 0xfd
 8000ca0:	d1c9      	bne.n	8000c36 <decode_convert_expand_encode+0x1e>
		}
	}
//rotate
	// Consider all squares one by one
	for (i = 0; i < N / 2; i++) {
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000ca8:	e07d      	b.n	8000da6 <decode_convert_expand_encode+0x18e>
		// Consider elements in group
		// of 4 in current square
		for (j = i; j < N - i - 1; j++) {
 8000caa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000cae:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000cb2:	e06b      	b.n	8000d8c <decode_convert_expand_encode+0x174>
			// Store current cell in
			// temp variable
			temp = mat[i][j];
 8000cb4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000cb8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000cbc:	00d2      	lsls	r2, r2, #3
 8000cbe:	3250      	adds	r2, #80	; 0x50
 8000cc0:	443a      	add	r2, r7
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b48      	subs	r3, #72	; 0x48
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			// Move values from right to top
			mat[i][j] = mat[j][N - 1 - i];
 8000ccc:	f897 004e 	ldrb.w	r0, [r7, #78]	; 0x4e
 8000cd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000cd4:	f1c3 0107 	rsb	r1, r3, #7
 8000cd8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000cdc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000ce0:	00c0      	lsls	r0, r0, #3
 8000ce2:	3050      	adds	r0, #80	; 0x50
 8000ce4:	4438      	add	r0, r7
 8000ce6:	4401      	add	r1, r0
 8000ce8:	3948      	subs	r1, #72	; 0x48
 8000cea:	7809      	ldrb	r1, [r1, #0]
 8000cec:	00d2      	lsls	r2, r2, #3
 8000cee:	3250      	adds	r2, #80	; 0x50
 8000cf0:	443a      	add	r2, r7
 8000cf2:	4413      	add	r3, r2
 8000cf4:	3b48      	subs	r3, #72	; 0x48
 8000cf6:	460a      	mov	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]

			// Move values from bottom to right
			mat[j][N - 1 - i] = mat[N - 1 - i][N - 1 - j];
 8000cfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000cfe:	f1c3 0007 	rsb	r0, r3, #7
 8000d02:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000d06:	f1c3 0107 	rsb	r1, r3, #7
 8000d0a:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000d0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	00c0      	lsls	r0, r0, #3
 8000d18:	3050      	adds	r0, #80	; 0x50
 8000d1a:	4438      	add	r0, r7
 8000d1c:	4401      	add	r1, r0
 8000d1e:	3948      	subs	r1, #72	; 0x48
 8000d20:	7809      	ldrb	r1, [r1, #0]
 8000d22:	00d2      	lsls	r2, r2, #3
 8000d24:	3250      	adds	r2, #80	; 0x50
 8000d26:	443a      	add	r2, r7
 8000d28:	4413      	add	r3, r2
 8000d2a:	3b48      	subs	r3, #72	; 0x48
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]

			// Move values from left to bottom
			mat[N - 1 - i][N - 1 - j] = mat[N - 1 - j][i];
 8000d30:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000d34:	f1c3 0007 	rsb	r0, r3, #7
 8000d38:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8000d3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d40:	f1c3 0207 	rsb	r2, r3, #7
 8000d44:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000d48:	f1c3 0307 	rsb	r3, r3, #7
 8000d4c:	00c0      	lsls	r0, r0, #3
 8000d4e:	3050      	adds	r0, #80	; 0x50
 8000d50:	4438      	add	r0, r7
 8000d52:	4401      	add	r1, r0
 8000d54:	3948      	subs	r1, #72	; 0x48
 8000d56:	7809      	ldrb	r1, [r1, #0]
 8000d58:	00d2      	lsls	r2, r2, #3
 8000d5a:	3250      	adds	r2, #80	; 0x50
 8000d5c:	443a      	add	r2, r7
 8000d5e:	4413      	add	r3, r2
 8000d60:	3b48      	subs	r3, #72	; 0x48
 8000d62:	460a      	mov	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]

			// Assign temp to left
			mat[N - 1 - j][i] = temp;
 8000d66:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000d6a:	f1c3 0207 	rsb	r2, r3, #7
 8000d6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d72:	00d2      	lsls	r2, r2, #3
 8000d74:	3250      	adds	r2, #80	; 0x50
 8000d76:	443a      	add	r2, r7
 8000d78:	4413      	add	r3, r2
 8000d7a:	3b48      	subs	r3, #72	; 0x48
 8000d7c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000d80:	701a      	strb	r2, [r3, #0]
		for (j = i; j < N - i - 1; j++) {
 8000d82:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000d86:	3301      	adds	r3, #1
 8000d88:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000d8c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000d90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d94:	f1c3 0307 	rsb	r3, r3, #7
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	db8b      	blt.n	8000cb4 <decode_convert_expand_encode+0x9c>
	for (i = 0; i < N / 2; i++) {
 8000d9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000da0:	3301      	adds	r3, #1
 8000da2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000da6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	f67f af7d 	bls.w	8000caa <decode_convert_expand_encode+0x92>
		}
	}
//encode
	for (i = 0, k = 0; i < N; i++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000dbc:	e047      	b.n	8000e4e <decode_convert_expand_encode+0x236>
		temp = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		for (j = 0; j < N; j++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000dca:	e022      	b.n	8000e12 <decode_convert_expand_encode+0x1fa>
			temp += exp(2, N - j) * mat[i][j];
 8000dcc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	f1c3 0308 	rsb	r3, r3, #8
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4619      	mov	r1, r3
 8000dda:	2002      	movs	r0, #2
 8000ddc:	f7ff fd9e 	bl	800091c <exp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4619      	mov	r1, r3
 8000de4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000de8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000dec:	00d2      	lsls	r2, r2, #3
 8000dee:	3250      	adds	r2, #80	; 0x50
 8000df0:	443a      	add	r2, r7
 8000df2:	4413      	add	r3, r2
 8000df4:	3b48      	subs	r3, #72	; 0x48
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	fb01 f303 	mul.w	r3, r1, r3
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000e02:	4413      	add	r3, r2
 8000e04:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		for (j = 0; j < N; j++) {
 8000e08:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000e12:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e16:	2b07      	cmp	r3, #7
 8000e18:	d9d8      	bls.n	8000dcc <decode_convert_expand_encode+0x1b4>
		}
		//save on the database
		if (i > 1 && k < CUSTOM_CHARACTER_SIZE) {
 8000e1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d910      	bls.n	8000e44 <decode_convert_expand_encode+0x22c>
 8000e22:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d80c      	bhi.n	8000e44 <decode_convert_expand_encode+0x22c>
			hex_char[k + 3] = temp;
 8000e2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e2e:	3303      	adds	r3, #3
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	4413      	add	r3, r2
 8000e34:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000e38:	701a      	strb	r2, [r3, #0]
			k++;
 8000e3a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e3e:	3301      	adds	r3, #1
 8000e40:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for (i = 0, k = 0; i < N; i++) {
 8000e44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e48:	3301      	adds	r3, #1
 8000e4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000e4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e52:	2b07      	cmp	r3, #7
 8000e54:	d9b3      	bls.n	8000dbe <decode_convert_expand_encode+0x1a6>
		}
	}
}
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <init_custom_character_db>:
 *	inicializa o banco de caracteres com o que foi salvo na memoria do equipamento
 *	por hora ele seta todos os valores salvos para zero mas pode um dia buscar na
 *	memoria persistente pelos valores gravados
 *
 */
void init_custom_character_db(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	memset(custom_character_db, 0, sizeof(custom_character_db));
 8000e64:	2270      	movs	r2, #112	; 0x70
 8000e66:	2100      	movs	r1, #0
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <init_custom_character_db+0x14>)
 8000e6a:	f00c fb15 	bl	800d498 <memset>
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200003d0 	.word	0x200003d0

08000e78 <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <auto_line_wrap+0x1c>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	7013      	strb	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200003ca 	.word	0x200003ca

08000e98 <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	71fb      	strb	r3, [r7, #7]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <text_insertion_point+0x4c>)
 8000eaa:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	79fa      	ldrb	r2, [r7, #7]
 8000eb2:	fb02 f303 	mul.w	r3, r2, r3
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <text_insertion_point+0x50>)
 8000eba:	701a      	strb	r2, [r3, #0]
	cursor[1] = row
			* (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <text_insertion_point+0x4c>)
 8000ebe:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <text_insertion_point+0x54>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	1ad3      	subs	r3, r2, r3
	cursor[1] = row
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	79ba      	ldrb	r2, [r7, #6]
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <text_insertion_point+0x50>)
 8000ed6:	705a      	strb	r2, [r3, #1]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2000020c 	.word	0x2000020c
 8000ee8:	200003cc 	.word	0x200003cc
 8000eec:	20000005 	.word	0x20000005

08000ef0 <put_Ucursor>:
 *	Bug conhecido/possivel
 *	caso o usuario utiluze a função de apagar o cursor, sem antes telo escrito, o codigo vai de fato criar um cursor em uma posição lixo
 *	de memoria tanto para linha quanto para coluna
 */

void put_Ucursor(bool enable, uint8_t col, uint8_t row, uint8_t hoover) {
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	4608      	mov	r0, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	4623      	mov	r3, r4
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	4603      	mov	r3, r0
 8000f04:	71bb      	strb	r3, [r7, #6]
 8000f06:	460b      	mov	r3, r1
 8000f08:	717b      	strb	r3, [r7, #5]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	713b      	strb	r3, [r7, #4]
	static uint8_t ucursor[2];
	u8g2_SetDrawColor(&u8g2, 2);
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4863      	ldr	r0, [pc, #396]	; (80010a0 <put_Ucursor+0x1b0>)
 8000f12:	f002 fe37 	bl	8003b84 <u8g2_SetDrawColor>
	if (enable) {
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 80a7 	beq.w	800106c <put_Ucursor+0x17c>
		if (hoover) {
 8000f1e:	793b      	ldrb	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d07b      	beq.n	800101c <put_Ucursor+0x12c>
			if (hoover == 'R') {
 8000f24:	793b      	ldrb	r3, [r7, #4]
 8000f26:	2b52      	cmp	r3, #82	; 0x52
 8000f28:	d13b      	bne.n	8000fa2 <put_Ucursor+0xb2>
				u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 8000f2a:	4b5e      	ldr	r3, [pc, #376]	; (80010a4 <put_Ucursor+0x1b4>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b299      	uxth	r1, r3
 8000f30:	4b5c      	ldr	r3, [pc, #368]	; (80010a4 <put_Ucursor+0x1b4>)
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	b29a      	uxth	r2, r3
						u8g2_GetMaxCharWidth(&u8g2), 1);
 8000f36:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <put_Ucursor+0x1b0>)
 8000f38:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
				u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	2001      	movs	r0, #1
 8000f40:	9000      	str	r0, [sp, #0]
 8000f42:	4857      	ldr	r0, [pc, #348]	; (80010a0 <put_Ucursor+0x1b0>)
 8000f44:	f001 fb60 	bl	8002608 <u8g2_DrawFrame>
				ucursor[0] =
						(ucursor[0] + u8g2_GetMaxCharWidth(&u8g2))
 8000f48:	4b56      	ldr	r3, [pc, #344]	; (80010a4 <put_Ucursor+0x1b4>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <put_Ucursor+0x1b0>)
 8000f50:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000f54:	441a      	add	r2, r3
								> u8g2_GetDisplayWidth(&u8g2)
 8000f56:	4b52      	ldr	r3, [pc, #328]	; (80010a0 <put_Ucursor+0x1b0>)
 8000f58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f5c:	4619      	mov	r1, r3
										- u8g2_GetMaxCharWidth(&u8g2) ?
 8000f5e:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <put_Ucursor+0x1b0>)
 8000f60:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000f64:	1acb      	subs	r3, r1, r3
				ucursor[0] =
 8000f66:	429a      	cmp	r2, r3
 8000f68:	dc08      	bgt.n	8000f7c <put_Ucursor+0x8c>
								0 : ucursor[0] + u8g2_GetMaxCharWidth(&u8g2);
 8000f6a:	4b4e      	ldr	r3, [pc, #312]	; (80010a4 <put_Ucursor+0x1b4>)
 8000f6c:	781a      	ldrb	r2, [r3, #0]
 8000f6e:	4b4c      	ldr	r3, [pc, #304]	; (80010a0 <put_Ucursor+0x1b0>)
 8000f70:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000f74:	b2db      	uxtb	r3, r3
				ucursor[0] =
 8000f76:	4413      	add	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	e000      	b.n	8000f7e <put_Ucursor+0x8e>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	4a49      	ldr	r2, [pc, #292]	; (80010a4 <put_Ucursor+0x1b4>)
 8000f80:	7013      	strb	r3, [r2, #0]
				u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 8000f82:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <put_Ucursor+0x1b4>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b299      	uxth	r1, r3
 8000f88:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <put_Ucursor+0x1b4>)
 8000f8a:	785b      	ldrb	r3, [r3, #1]
 8000f8c:	b29a      	uxth	r2, r3
						u8g2_GetMaxCharWidth(&u8g2), 1);
 8000f8e:	4b44      	ldr	r3, [pc, #272]	; (80010a0 <put_Ucursor+0x1b0>)
 8000f90:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
				u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2001      	movs	r0, #1
 8000f98:	9000      	str	r0, [sp, #0]
 8000f9a:	4841      	ldr	r0, [pc, #260]	; (80010a0 <put_Ucursor+0x1b0>)
 8000f9c:	f001 fb34 	bl	8002608 <u8g2_DrawFrame>
 8000fa0:	e073      	b.n	800108a <put_Ucursor+0x19a>
			} else {
				u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 8000fa2:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <put_Ucursor+0x1b4>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b299      	uxth	r1, r3
 8000fa8:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <put_Ucursor+0x1b4>)
 8000faa:	785b      	ldrb	r3, [r3, #1]
 8000fac:	b29a      	uxth	r2, r3
						u8g2_GetMaxCharWidth(&u8g2), 1);
 8000fae:	4b3c      	ldr	r3, [pc, #240]	; (80010a0 <put_Ucursor+0x1b0>)
 8000fb0:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
				u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	9000      	str	r0, [sp, #0]
 8000fba:	4839      	ldr	r0, [pc, #228]	; (80010a0 <put_Ucursor+0x1b0>)
 8000fbc:	f001 fb24 	bl	8002608 <u8g2_DrawFrame>
				ucursor[0] =
						(ucursor[0] - u8g2_GetMaxCharWidth(&u8g2)) < 0 ?
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <put_Ucursor+0x1b4>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <put_Ucursor+0x1b0>)
 8000fc8:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000fcc:	1ad3      	subs	r3, r2, r3
				ucursor[0] =
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	da0a      	bge.n	8000fe8 <put_Ucursor+0xf8>
								u8g2_GetDisplayWidth(
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <put_Ucursor+0x1b0>)
 8000fd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
										&u8g2) - u8g2_GetMaxCharWidth(&u8g2) :
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <put_Ucursor+0x1b0>)
 8000fdc:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000fe0:	b2db      	uxtb	r3, r3
				ucursor[0] =
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	e007      	b.n	8000ff8 <put_Ucursor+0x108>
								ucursor[0] - u8g2_GetMaxCharWidth(&u8g2);
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <put_Ucursor+0x1b4>)
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <put_Ucursor+0x1b0>)
 8000fee:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000ff2:	b2db      	uxtb	r3, r3
				ucursor[0] =
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4a2a      	ldr	r2, [pc, #168]	; (80010a4 <put_Ucursor+0x1b4>)
 8000ffa:	7013      	strb	r3, [r2, #0]
				u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <put_Ucursor+0x1b4>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b299      	uxth	r1, r3
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <put_Ucursor+0x1b4>)
 8001004:	785b      	ldrb	r3, [r3, #1]
 8001006:	b29a      	uxth	r2, r3
						u8g2_GetMaxCharWidth(&u8g2), 1);
 8001008:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <put_Ucursor+0x1b0>)
 800100a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
				u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 800100e:	b29b      	uxth	r3, r3
 8001010:	2001      	movs	r0, #1
 8001012:	9000      	str	r0, [sp, #0]
 8001014:	4822      	ldr	r0, [pc, #136]	; (80010a0 <put_Ucursor+0x1b0>)
 8001016:	f001 faf7 	bl	8002608 <u8g2_DrawFrame>
 800101a:	e036      	b.n	800108a <put_Ucursor+0x19a>
			}
		} else {
			ucursor[0] = col * u8g2_GetMaxCharWidth(&u8g2);
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <put_Ucursor+0x1b0>)
 800101e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8001022:	b2db      	uxtb	r3, r3
 8001024:	79ba      	ldrb	r2, [r7, #6]
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <put_Ucursor+0x1b4>)
 800102e:	701a      	strb	r2, [r3, #0]
			ucursor[1] = (row + 1) * u8g2_GetMaxCharWidth(&u8g2) + 2;
 8001030:	797b      	ldrb	r3, [r7, #5]
 8001032:	3301      	adds	r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4a1a      	ldr	r2, [pc, #104]	; (80010a0 <put_Ucursor+0x1b0>)
 8001038:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	3302      	adds	r3, #2
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <put_Ucursor+0x1b4>)
 800104a:	705a      	strb	r2, [r3, #1]
			u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <put_Ucursor+0x1b4>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b299      	uxth	r1, r3
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <put_Ucursor+0x1b4>)
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	b29a      	uxth	r2, r3
					u8g2_GetMaxCharWidth(&u8g2), 1);
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <put_Ucursor+0x1b0>)
 800105a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
			u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 800105e:	b29b      	uxth	r3, r3
 8001060:	2001      	movs	r0, #1
 8001062:	9000      	str	r0, [sp, #0]
 8001064:	480e      	ldr	r0, [pc, #56]	; (80010a0 <put_Ucursor+0x1b0>)
 8001066:	f001 facf 	bl	8002608 <u8g2_DrawFrame>
 800106a:	e00e      	b.n	800108a <put_Ucursor+0x19a>
		}
	} else {
		u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <put_Ucursor+0x1b4>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b299      	uxth	r1, r3
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <put_Ucursor+0x1b4>)
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	b29a      	uxth	r2, r3
				u8g2_GetMaxCharWidth(&u8g2), 1);
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <put_Ucursor+0x1b0>)
 800107a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
		u8g2_DrawFrame(&u8g2, ucursor[0], ucursor[1],
 800107e:	b29b      	uxth	r3, r3
 8001080:	2001      	movs	r0, #1
 8001082:	9000      	str	r0, [sp, #0]
 8001084:	4806      	ldr	r0, [pc, #24]	; (80010a0 <put_Ucursor+0x1b0>)
 8001086:	f001 fabf 	bl	8002608 <u8g2_DrawFrame>
	}
	u8g2_SendBuffer(&u8g2);
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <put_Ucursor+0x1b0>)
 800108c:	f001 fb8c 	bl	80027a8 <u8g2_SendBuffer>
	u8g2_SetDrawColor(&u8g2, 1);
 8001090:	2101      	movs	r1, #1
 8001092:	4803      	ldr	r0, [pc, #12]	; (80010a0 <put_Ucursor+0x1b0>)
 8001094:	f002 fd76 	bl	8003b84 <u8g2_SetDrawColor>
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	2000020c 	.word	0x2000020c
 80010a4:	20000460 	.word	0x20000460

080010a8 <inverse_text>:
 */
void test_font(void) {
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}
void inverse_text(bool state) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <inverse_text+0x1c>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	7013      	strb	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200003c9 	.word	0x200003c9

080010c8 <def_v_bar_thickness>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_v_bar_thickness(uint8_t thick) {
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	if (thick) {
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <def_v_bar_thickness+0x18>
		vertical_bar_width = 10;			//5 no original
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <def_v_bar_thickness+0x28>)
 80010da:	220a      	movs	r2, #10
 80010dc:	701a      	strb	r2, [r3, #0]
	} else {
		vertical_bar_width = 4;			//2 no original
	}
}
 80010de:	e002      	b.n	80010e6 <def_v_bar_thickness+0x1e>
		vertical_bar_width = 4;			//2 no original
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <def_v_bar_thickness+0x28>)
 80010e2:	2204      	movs	r2, #4
 80010e4:	701a      	strb	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	20000004 	.word	0x20000004

080010f4 <define_custom_character>:
 *	Os 6 bytes variam da seguinte forma:
 *	FE 4E [cc] [6bytes] FD
 *	254 104 [cc] [6bytes] 253
 *	254 `N` [cc] [6bytes] 253
 */
void define_custom_character(uint8_t *cmd) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	decode_convert_expand_encode(cmd);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fd8b 	bl	8000c18 <decode_convert_expand_encode>
	memcpy(custom_character_db[*(cmd + 2)].custom_caracter, cmd + 3, 6);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3302      	adds	r3, #2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <define_custom_character+0x50>)
 8001112:	1898      	adds	r0, r3, r2
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3303      	adds	r3, #3
 8001118:	2206      	movs	r2, #6
 800111a:	4619      	mov	r1, r3
 800111c:	f00c f9ae 	bl	800d47c <memcpy>
	custom_character_db[*(cmd + 2)].custo_character_index = *(cmd + 2);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3302      	adds	r3, #2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	4619      	mov	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7898      	ldrb	r0, [r3, #2]
 800112c:	4a05      	ldr	r2, [pc, #20]	; (8001144 <define_custom_character+0x50>)
 800112e:	460b      	mov	r3, r1
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	1a5b      	subs	r3, r3, r1
 8001134:	4413      	add	r3, r2
 8001136:	3306      	adds	r3, #6
 8001138:	4602      	mov	r2, r0
 800113a:	701a      	strb	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200003d0 	.word	0x200003d0

08001148 <draw_un_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_un_v_bar_graph(uint8_t col, uint8_t height, bool erase) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	460b      	mov	r3, r1
 8001154:	71bb      	strb	r3, [r7, #6]
 8001156:	4613      	mov	r3, r2
 8001158:	717b      	strb	r3, [r7, #5]
	static uint8_t vcursor, temp_height = 200, temp_col = 200;

	vcursor = col * u8g2_GetMaxCharWidth(&u8g2);
 800115a:	4b32      	ldr	r3, [pc, #200]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 800115c:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8001160:	b2db      	uxtb	r3, r3
 8001162:	79fa      	ldrb	r2, [r7, #7]
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <draw_un_v_bar_graph+0xe0>)
 800116c:	701a      	strb	r2, [r3, #0]
	height = u8g2_GetDisplayHeight(&u8g2) - height * 2;
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 8001170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001174:	b2da      	uxtb	r2, r3
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	71bb      	strb	r3, [r7, #6]

	if (!erase) {
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	f083 0301 	eor.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d02c      	beq.n	80011e6 <draw_un_v_bar_graph+0x9e>
		u8g2_SetDrawColor(&u8g2, 0);
 800118c:	2100      	movs	r1, #0
 800118e:	4825      	ldr	r0, [pc, #148]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 8001190:	f002 fcf8 	bl	8003b84 <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, temp_col, temp_height, vertical_bar_width,
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <draw_un_v_bar_graph+0xe4>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b299      	uxth	r1, r3
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <draw_un_v_bar_graph+0xe8>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <draw_un_v_bar_graph+0xec>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b298      	uxth	r0, r3
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 80011a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4603      	mov	r3, r0
 80011b0:	481c      	ldr	r0, [pc, #112]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 80011b2:	f001 f9f3 	bl	800259c <u8g2_DrawBox>
				u8g2_GetDisplayHeight(&u8g2));

		u8g2_DrawBox(&u8g2, vcursor, height, vertical_bar_width,
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <draw_un_v_bar_graph+0xe0>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b299      	uxth	r1, r3
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <draw_un_v_bar_graph+0xec>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b298      	uxth	r0, r3
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 80011c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	4603      	mov	r3, r0
 80011d0:	4814      	ldr	r0, [pc, #80]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 80011d2:	f001 f9e3 	bl	800259c <u8g2_DrawBox>
				u8g2_GetDisplayHeight(&u8g2));

		temp_height = height;
 80011d6:	4a16      	ldr	r2, [pc, #88]	; (8001230 <draw_un_v_bar_graph+0xe8>)
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	7013      	strb	r3, [r2, #0]
		temp_col = vcursor;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <draw_un_v_bar_graph+0xe0>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <draw_un_v_bar_graph+0xe4>)
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	e013      	b.n	800120e <draw_un_v_bar_graph+0xc6>

	} else {
		u8g2_SetDrawColor(&u8g2, 0);
 80011e6:	2100      	movs	r1, #0
 80011e8:	480e      	ldr	r0, [pc, #56]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 80011ea:	f002 fccb 	bl	8003b84 <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, vcursor, height, vertical_bar_width,
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <draw_un_v_bar_graph+0xe0>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b299      	uxth	r1, r3
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <draw_un_v_bar_graph+0xec>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b298      	uxth	r0, r3
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 8001200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	4603      	mov	r3, r0
 8001208:	4806      	ldr	r0, [pc, #24]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 800120a:	f001 f9c7 	bl	800259c <u8g2_DrawBox>
				u8g2_GetDisplayHeight(&u8g2));
	}
	u8g2_SetDrawColor(&u8g2, 1);
 800120e:	2101      	movs	r1, #1
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 8001212:	f002 fcb7 	bl	8003b84 <u8g2_SetDrawColor>
	u8g2_SendBuffer(&u8g2);
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <draw_un_v_bar_graph+0xdc>)
 8001218:	f001 fac6 	bl	80027a8 <u8g2_SendBuffer>

}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000020c 	.word	0x2000020c
 8001228:	20000462 	.word	0x20000462
 800122c:	20000006 	.word	0x20000006
 8001230:	20000007 	.word	0x20000007
 8001234:	20000004 	.word	0x20000004

08001238 <draw_un_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_un_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght, bool erase) {
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af02      	add	r7, sp, #8
 800123e:	4604      	mov	r4, r0
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4623      	mov	r3, r4
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	4603      	mov	r3, r0
 800124c:	71bb      	strb	r3, [r7, #6]
 800124e:	460b      	mov	r3, r1
 8001250:	717b      	strb	r3, [r7, #5]
 8001252:	4613      	mov	r3, r2
 8001254:	713b      	strb	r3, [r7, #4]
	if (!erase) {
 8001256:	793b      	ldrb	r3, [r7, #4]
 8001258:	f083 0301 	eor.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d021      	beq.n	80012a6 <draw_un_h_bar_graph+0x6e>
		u8g2_DrawBox(&u8g2, (col) * u8g2_GetMaxCharWidth(&u8g2),
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	b29b      	uxth	r3, r3
 8001266:	4a28      	ldr	r2, [pc, #160]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 8001268:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 800126c:	b292      	uxth	r2, r2
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	b299      	uxth	r1, r3
 8001274:	79bb      	ldrb	r3, [r7, #6]
 8001276:	b29b      	uxth	r3, r3
				(row) * u8g2_GetMaxCharHeight(&u8g2), lenght * 2,
 8001278:	4a23      	ldr	r2, [pc, #140]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 800127a:	f992 207e 	ldrsb.w	r2, [r2, #126]	; 0x7e
		u8g2_DrawBox(&u8g2, (col) * u8g2_GetMaxCharWidth(&u8g2),
 800127e:	b292      	uxth	r2, r2
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	b29a      	uxth	r2, r3
 8001286:	797b      	ldrb	r3, [r7, #5]
 8001288:	b29b      	uxth	r3, r3
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	b298      	uxth	r0, r3
				u8g2_GetMaxCharHeight(&u8g2) - 3);
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 8001290:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001294:	b29b      	uxth	r3, r3
		u8g2_DrawBox(&u8g2, (col) * u8g2_GetMaxCharWidth(&u8g2),
 8001296:	3b03      	subs	r3, #3
 8001298:	b29b      	uxth	r3, r3
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4603      	mov	r3, r0
 800129e:	481a      	ldr	r0, [pc, #104]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 80012a0:	f001 f97c 	bl	800259c <u8g2_DrawBox>
 80012a4:	e024      	b.n	80012f0 <draw_un_h_bar_graph+0xb8>

	} else {
		u8g2_SetDrawColor(&u8g2, 0);
 80012a6:	2100      	movs	r1, #0
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 80012aa:	f002 fc6b 	bl	8003b84 <u8g2_SetDrawColor>
		u8g2_DrawBox(&u8g2, (col) * u8g2_GetMaxCharWidth(&u8g2),
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4a15      	ldr	r2, [pc, #84]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 80012b4:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 80012b8:	b292      	uxth	r2, r2
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	b299      	uxth	r1, r3
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	b29b      	uxth	r3, r3
				(row) * u8g2_GetMaxCharHeight(&u8g2), lenght * 2,
 80012c4:	4a10      	ldr	r2, [pc, #64]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 80012c6:	f992 207e 	ldrsb.w	r2, [r2, #126]	; 0x7e
		u8g2_DrawBox(&u8g2, (col) * u8g2_GetMaxCharWidth(&u8g2),
 80012ca:	b292      	uxth	r2, r2
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	797b      	ldrb	r3, [r7, #5]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	b298      	uxth	r0, r3
				u8g2_GetMaxCharHeight(&u8g2) - 3);
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 80012dc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80012e0:	b29b      	uxth	r3, r3
		u8g2_DrawBox(&u8g2, (col) * u8g2_GetMaxCharWidth(&u8g2),
 80012e2:	3b03      	subs	r3, #3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	4603      	mov	r3, r0
 80012ea:	4807      	ldr	r0, [pc, #28]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 80012ec:	f001 f956 	bl	800259c <u8g2_DrawBox>

	}
	u8g2_SetDrawColor(&u8g2, 1);
 80012f0:	2101      	movs	r1, #1
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 80012f4:	f002 fc46 	bl	8003b84 <u8g2_SetDrawColor>
	u8g2_SendBuffer(&u8g2);
 80012f8:	4803      	ldr	r0, [pc, #12]	; (8001308 <draw_un_h_bar_graph+0xd0>)
 80012fa:	f001 fa55 	bl	80027a8 <u8g2_SendBuffer>
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	bf00      	nop
 8001308:	2000020c 	.word	0x2000020c

0800130c <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	4613      	mov	r3, r2
 800131a:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 800131c:	2101      	movs	r1, #1
 800131e:	4809      	ldr	r0, [pc, #36]	; (8001344 <put_pixel+0x38>)
 8001320:	f002 fc30 	bl	8003b84 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	b29b      	uxth	r3, r3
 8001328:	79ba      	ldrb	r2, [r7, #6]
 800132a:	b292      	uxth	r2, r2
 800132c:	4619      	mov	r1, r3
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <put_pixel+0x38>)
 8001330:	f002 fbf5 	bl	8003b1e <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <put_pixel+0x38>)
 8001336:	f001 fa37 	bl	80027a8 <u8g2_SendBuffer>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000020c 	.word	0x2000020c

08001348 <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	460a      	mov	r2, r1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	4613      	mov	r3, r2
 8001356:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8001358:	2100      	movs	r1, #0
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <erase_pixel+0x40>)
 800135c:	f002 fc12 	bl	8003b84 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	b29b      	uxth	r3, r3
 8001364:	79ba      	ldrb	r2, [r7, #6]
 8001366:	b292      	uxth	r2, r2
 8001368:	4619      	mov	r1, r3
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <erase_pixel+0x40>)
 800136c:	f002 fbd7 	bl	8003b1e <u8g2_DrawPixel>
	u8g2_SetDrawColor(&u8g2, 1);
 8001370:	2101      	movs	r1, #1
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <erase_pixel+0x40>)
 8001374:	f002 fc06 	bl	8003b84 <u8g2_SetDrawColor>
	u8g2_SendBuffer(&u8g2);
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <erase_pixel+0x40>)
 800137a:	f001 fa15 	bl	80027a8 <u8g2_SendBuffer>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	2000020c 	.word	0x2000020c

0800138c <put_byte>:
 *	Desenha um byte na posição [x,row] onde x varia de 0-121 e y varia de 0-3
 *	FE 3E [x] [row] [byte] [4 dummy bytes] FD
 *	254 62 [x] [row] [byte] [4 dummy bytes]  253
 *	254 `>` [x] [row] [byte] [4 dummy bytes]  253
 */
void put_byte(uint8_t x, uint8_t row, uint8_t byte) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af02      	add	r7, sp, #8
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	460b      	mov	r3, r1
 8001398:	71bb      	strb	r3, [r7, #6]
 800139a:	4613      	mov	r3, r2
 800139c:	717b      	strb	r3, [r7, #5]
	char arr[8], i;
	memset(arr, 0, 8);
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	2208      	movs	r2, #8
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00c f876 	bl	800d498 <memset>
	for (i = 0; byte > 0; i++) {
 80013ac:	2300      	movs	r3, #0
 80013ae:	75fb      	strb	r3, [r7, #23]
 80013b0:	e00e      	b.n	80013d0 <put_byte+0x44>
		arr[i] = byte % 2;
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	797a      	ldrb	r2, [r7, #5]
 80013b6:	f002 0201 	and.w	r2, r2, #1
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	3318      	adds	r3, #24
 80013be:	443b      	add	r3, r7
 80013c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		byte = byte / 2;
 80013c4:	797b      	ldrb	r3, [r7, #5]
 80013c6:	085b      	lsrs	r3, r3, #1
 80013c8:	717b      	strb	r3, [r7, #5]
	for (i = 0; byte > 0; i++) {
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	3301      	adds	r3, #1
 80013ce:	75fb      	strb	r3, [r7, #23]
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1ed      	bne.n	80013b2 <put_byte+0x26>
	}
	row = row * ((u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS);
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <put_byte+0x8c>)
 80013d8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80013dc:	461a      	mov	r2, r3
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <put_byte+0x90>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	79ba      	ldrb	r2, [r7, #6]
 80013e8:	fb02 f303 	mul.w	r3, r2, r3
 80013ec:	71bb      	strb	r3, [r7, #6]
	u8g2_DrawXBM(&u8g2, x, row, 1, 8, arr);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	b299      	uxth	r1, r3
 80013f2:	79bb      	ldrb	r3, [r7, #6]
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	2308      	movs	r3, #8
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2301      	movs	r3, #1
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <put_byte+0x8c>)
 8001404:	f001 f887 	bl	8002516 <u8g2_DrawXBM>
	u8g2_SendBuffer(&u8g2);
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <put_byte+0x8c>)
 800140a:	f001 f9cd 	bl	80027a8 <u8g2_SendBuffer>

}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000020c 	.word	0x2000020c
 800141c:	20000005 	.word	0x20000005

08001420 <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8001424:	f003 fc0d 	bl	8004c42 <HAL_NVIC_SystemReset>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}

0800142c <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	text_insertion_point(0, 0);
 8001430:	2100      	movs	r1, #0
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fd30 	bl	8000e98 <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <clear_display+0x18>)
 800143a:	f001 fb63 	bl	8002b04 <u8g2_ClearDisplay>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000020c 	.word	0x2000020c

08001448 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	if (enable) {
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00e      	beq.n	8001476 <enable_backlight+0x2e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2110      	movs	r1, #16
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <enable_backlight+0x48>)
 800145e:	f003 fdaa 	bl	8004fb6 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001462:	2100      	movs	r1, #0
 8001464:	480b      	ldr	r0, [pc, #44]	; (8001494 <enable_backlight+0x4c>)
 8001466:	f006 fac7 	bl	80079f8 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT);
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <enable_backlight+0x50>)
 800146c:	881a      	ldrh	r2, [r3, #0]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <enable_backlight+0x4c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	}
}
 8001474:	e008      	b.n	8001488 <enable_backlight+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2110      	movs	r1, #16
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <enable_backlight+0x48>)
 800147c:	f003 fd9b 	bl	8004fb6 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001480:	2100      	movs	r1, #0
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <enable_backlight+0x4c>)
 8001484:	f006 fb5a 	bl	8007b3c <HAL_TIM_PWM_Stop>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40010800 	.word	0x40010800
 8001494:	200004d8 	.word	0x200004d8
 8001498:	20000002 	.word	0x20000002

0800149c <set_backlight_brightness>:
 * Define o brlho do backlight em um dos niveis pre-configurados, [bright] varia de 1-7
 *   	FE 41 [bright] FD
 *		254 64 [bright] 253
 *		254 'A' [bright] 253
 */
void set_backlight_brightness(uint8_t bright) {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
	if (bright) {
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d016      	beq.n	80014da <set_backlight_brightness+0x3e>
		LCD_BRIGHT = (7 / bright) * 59999;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2207      	movs	r2, #7
 80014b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	461a      	mov	r2, r3
 80014b8:	0152      	lsls	r2, r2, #5
 80014ba:	1ad2      	subs	r2, r2, r3
 80014bc:	0092      	lsls	r2, r2, #2
 80014be:	441a      	add	r2, r3
 80014c0:	4611      	mov	r1, r2
 80014c2:	0109      	lsls	r1, r1, #4
 80014c4:	1a8a      	subs	r2, r1, r2
 80014c6:	0152      	lsls	r2, r2, #5
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <set_backlight_brightness+0x48>)
 80014ce:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT);
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <set_backlight_brightness+0x48>)
 80014d2:	881a      	ldrh	r2, [r3, #0]
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <set_backlight_brightness+0x4c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	20000002 	.word	0x20000002
 80014e8:	200004d8 	.word	0x200004d8

080014ec <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast) * 9);
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	461a      	mov	r2, r3
 80014fa:	00d2      	lsls	r2, r2, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	4619      	mov	r1, r3
 8001502:	4803      	ldr	r0, [pc, #12]	; (8001510 <set_contrast+0x24>)
 8001504:	f003 f8fb 	bl	80046fe <u8x8_SetContrast>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000020c 	.word	0x2000020c

08001514 <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af02      	add	r7, sp, #8
	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <disp_splash+0x28>)
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	2318      	movs	r3, #24
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	23b4      	movs	r3, #180	; 0xb4
 8001524:	2214      	movs	r2, #20
 8001526:	2106      	movs	r1, #6
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <disp_splash+0x2c>)
 800152a:	f000 fff4 	bl	8002516 <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <disp_splash+0x2c>)
 8001530:	f001 f93a 	bl	80027a8 <u8g2_SendBuffer>

}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0800f000 	.word	0x0800f000
 8001540:	2000020c 	.word	0x2000020c

08001544 <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap_t *wrap, uint8_t *txt) {
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux;
 800154e:	2300      	movs	r3, #0
 8001550:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	737b      	strb	r3, [r7, #13]

clean_it(wrap->wrap_str);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f8c1 	bl	80016e0 <clean_it>
	index = strlen(txt);
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	f7fe fdf4 	bl	800014c <strlen>
 8001564:	4603      	mov	r3, r0
 8001566:	73bb      	strb	r3, [r7, #14]
	wrap->wrap_times = index / MAX_CHARS_ONSCREEN;
 8001568:	7bba      	ldrb	r2, [r7, #14]
 800156a:	4b40      	ldr	r3, [pc, #256]	; (800166c <str_warper+0x128>)
 800156c:	fba3 1302 	umull	r1, r3, r3, r2
 8001570:	1ad2      	subs	r2, r2, r3
 8001572:	0852      	lsrs	r2, r2, #1
 8001574:	4413      	add	r3, r2
 8001576:	091b      	lsrs	r3, r3, #4
 8001578:	b2da      	uxtb	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	if (wrap->wrap_times) {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001586:	2b00      	cmp	r3, #0
 8001588:	d06b      	beq.n	8001662 <str_warper+0x11e>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e062      	b.n	8001656 <str_warper+0x112>
			if (aux < N_LINES) {
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b04      	cmp	r3, #4
 8001594:	d82b      	bhi.n	80015ee <str_warper+0xaa>

				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	461a      	mov	r2, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
						1 : 0;
 80015a8:	2b20      	cmp	r3, #32
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 80015b2:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	2216      	movs	r2, #22
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	18d0      	adds	r0, r2, r3
						txt + ((MAX_CHARS_ONSCREEN) * (aux)),
 80015c0:	7bfa      	ldrb	r2, [r7, #15]
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	00da      	lsls	r2, r3, #3
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 80015d2:	2215      	movs	r2, #21
 80015d4:	4619      	mov	r1, r3
 80015d6:	f00b ffaf 	bl	800d538 <strncpy>
						MAX_CHARS_ONSCREEN);
				wrap->wrap_str[aux][MAX_CHARS_ONSCREEN] = '\0';
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	2116      	movs	r1, #22
 80015e0:	fb01 f303 	mul.w	r3, r1, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	3315      	adds	r3, #21
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	e030      	b.n	8001650 <str_warper+0x10c>
			} else {
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	461a      	mov	r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
						0 : 1;
 8001600:	2b20      	cmp	r3, #32
 8001602:	bf14      	ite	ne
 8001604:	2301      	movne	r3, #1
 8001606:	2300      	moveq	r3, #0
 8001608:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 800160a:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2216      	movs	r2, #22
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	18d4      	adds	r4, r2, r3
						txt + ((MAX_CHARS_ONSCREEN) * (aux)) + shift,
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	00da      	lsls	r2, r3, #3
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	461a      	mov	r2, r3
 8001626:	7b7b      	ldrb	r3, [r7, #13]
 8001628:	4413      	add	r3, r2
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	18d5      	adds	r5, r2, r3
						strlen(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))));
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	461a      	mov	r2, r3
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fd84 	bl	800014c <strlen>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4629      	mov	r1, r5
 800164a:	4620      	mov	r0, r4
 800164c:	f00b ff74 	bl	800d538 <strncpy>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	3301      	adds	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	429a      	cmp	r2, r3
 8001660:	d996      	bls.n	8001590 <str_warper+0x4c>
			}
		}
	}
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bdb0      	pop	{r4, r5, r7, pc}
 800166a:	bf00      	nop
 800166c:	86186187 	.word	0x86186187

08001670 <Custom_Character_masker>:

bool Custom_Character_masker(uint8_t *txt, uint8_t *mask, uint8_t *v_cursor) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
	uint8_t index;
	bool enable;
	strncpy(mask, txt, MASK_BUFFER);
 800167c:	2269      	movs	r2, #105	; 0x69
 800167e:	68f9      	ldr	r1, [r7, #12]
 8001680:	68b8      	ldr	r0, [r7, #8]
 8001682:	f00b ff59 	bl	800d538 <strncpy>
	*(mask + MASK_BUFFER - 1) = '\0';
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3368      	adds	r3, #104	; 0x68
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]

	*(v_cursor + 0) = cursor[0];
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <Custom_Character_masker+0x6c>)
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	701a      	strb	r2, [r3, #0]
	*(v_cursor + 1) = cursor[1];
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3301      	adds	r3, #1
 800169a:	4a10      	ldr	r2, [pc, #64]	; (80016dc <Custom_Character_masker+0x6c>)
 800169c:	7852      	ldrb	r2, [r2, #1]
 800169e:	701a      	strb	r2, [r3, #0]

	for (index = 0; *(mask + index) != '\0'; index++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	75fb      	strb	r3, [r7, #23]
 80016a4:	e00f      	b.n	80016c6 <Custom_Character_masker+0x56>
		if (*(mask + index) >= 0 && *(mask + index) <= 16) {
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	4413      	add	r3, r2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d806      	bhi.n	80016c0 <Custom_Character_masker+0x50>
			*(mask + index) = 32;
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	4413      	add	r3, r2
 80016b8:	2220      	movs	r2, #32
 80016ba:	701a      	strb	r2, [r3, #0]
			enable = true;
 80016bc:	2301      	movs	r3, #1
 80016be:	75bb      	strb	r3, [r7, #22]
	for (index = 0; *(mask + index) != '\0'; index++) {
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	3301      	adds	r3, #1
 80016c4:	75fb      	strb	r3, [r7, #23]
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	4413      	add	r3, r2
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1e9      	bne.n	80016a6 <Custom_Character_masker+0x36>
		}
	}
	return enable;
 80016d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200003cc 	.word	0x200003cc

080016e0 <clean_it>:
void clean_it(uint8_t *str) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	memset(str, 0, sizeof(str));
 80016e8:	2204      	movs	r2, #4
 80016ea:	2100      	movs	r1, #0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f00b fed3 	bl	800d498 <memset>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <custom_character_dealer>:
void custom_character_dealer(uint8_t *txt) {
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af02      	add	r7, sp, #8
 8001702:	6078      	str	r0, [r7, #4]
	uint8_t char_w = 8;
 8001704:	2308      	movs	r3, #8
 8001706:	737b      	strb	r3, [r7, #13]
	uint8_t char_h = 6;
 8001708:	2306      	movs	r3, #6
 800170a:	733b      	strb	r3, [r7, #12]
	uint8_t offset, temp_x, temp_y, index;
	temp_x = cursor[0];
 800170c:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <custom_character_dealer+0xb8>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	73bb      	strb	r3, [r7, #14]
	temp_y = cursor[1];
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <custom_character_dealer+0xb8>)
 8001714:	785b      	ldrb	r3, [r3, #1]
 8001716:	72fb      	strb	r3, [r7, #11]
	for (offset = 0; *(txt + offset) != '\0'; offset++) {
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e03e      	b.n	800179c <custom_character_dealer+0xa0>
		index = *(txt + offset);
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	72bb      	strb	r3, [r7, #10]
		if (index<=16 && (custom_character_db[index].custo_character_index)) {
 8001728:	7abb      	ldrb	r3, [r7, #10]
 800172a:	2b10      	cmp	r3, #16
 800172c:	d82c      	bhi.n	8001788 <custom_character_dealer+0x8c>
 800172e:	7aba      	ldrb	r2, [r7, #10]
 8001730:	4921      	ldr	r1, [pc, #132]	; (80017b8 <custom_character_dealer+0xbc>)
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	440b      	add	r3, r1
 800173a:	3306      	adds	r3, #6
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d022      	beq.n	8001788 <custom_character_dealer+0x8c>
			u8g2_DrawXBM(&u8g2, temp_x, temp_y + 4, char_w, char_h,
 8001742:	7bbb      	ldrb	r3, [r7, #14]
 8001744:	b298      	uxth	r0, r3
 8001746:	7afb      	ldrb	r3, [r7, #11]
 8001748:	b29b      	uxth	r3, r3
 800174a:	3304      	adds	r3, #4
 800174c:	b29c      	uxth	r4, r3
 800174e:	7b7b      	ldrb	r3, [r7, #13]
 8001750:	b29d      	uxth	r5, r3
 8001752:	7b3b      	ldrb	r3, [r7, #12]
 8001754:	b299      	uxth	r1, r3
					custom_character_db[index].custom_caracter);
 8001756:	7aba      	ldrb	r2, [r7, #10]
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	4a16      	ldr	r2, [pc, #88]	; (80017b8 <custom_character_dealer+0xbc>)
 8001760:	4413      	add	r3, r2
			u8g2_DrawXBM(&u8g2, temp_x, temp_y + 4, char_w, char_h,
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	9100      	str	r1, [sp, #0]
 8001766:	462b      	mov	r3, r5
 8001768:	4622      	mov	r2, r4
 800176a:	4601      	mov	r1, r0
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <custom_character_dealer+0xc0>)
 800176e:	f000 fed2 	bl	8002516 <u8g2_DrawXBM>
			u8g2_SendBuffer(&u8g2);
 8001772:	4812      	ldr	r0, [pc, #72]	; (80017bc <custom_character_dealer+0xc0>)
 8001774:	f001 f818 	bl	80027a8 <u8g2_SendBuffer>
			temp_x += u8g2_GetMaxCharWidth(&u8g2);
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <custom_character_dealer+0xc0>)
 800177a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800177e:	b2da      	uxtb	r2, r3
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	4413      	add	r3, r2
 8001784:	73bb      	strb	r3, [r7, #14]
 8001786:	e006      	b.n	8001796 <custom_character_dealer+0x9a>
			//trocando os caracteres especiais por um espaço em branco pra bater com a conta de espaço em tela
			//é um custom caracter
			//ele foi definido pelo usuario
			//ele deve ser impresso
		} else {
			temp_x += u8g2_GetMaxCharWidth(&u8g2);
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <custom_character_dealer+0xc0>)
 800178a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 800178e:	b2da      	uxtb	r2, r3
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	4413      	add	r3, r2
 8001794:	73bb      	strb	r3, [r7, #14]
	for (offset = 0; *(txt + offset) != '\0'; offset++) {
 8001796:	7bfb      	ldrb	r3, [r7, #15]
 8001798:	3301      	adds	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ba      	bne.n	800171e <custom_character_dealer+0x22>
		}
	}


}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bdb0      	pop	{r4, r5, r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200003cc 	.word	0x200003cc
 80017b8:	200003d0 	.word	0x200003d0
 80017bc:	2000020c 	.word	0x2000020c

080017c0 <lcd_print>:

void lcd_print(uint8_t *txt) {
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b0bf      	sub	sp, #252	; 0xfc
 80017c4:	af04      	add	r7, sp, #16
 80017c6:	6078      	str	r0, [r7, #4]
	txt_wrap_t wrap;
	uint8_t aux = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	static uint8_t v_cursor[2];
	uint8_t mask[MASK_BUFFER];
	bool enable;

	if (text_invertion) {
 80017ce:	4b95      	ldr	r3, [pc, #596]	; (8001a24 <lcd_print+0x264>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d05e      	beq.n	8001894 <lcd_print+0xd4>
		if (text_wrap) {
 80017d6:	4b94      	ldr	r3, [pc, #592]	; (8001a28 <lcd_print+0x268>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d037      	beq.n	800184e <lcd_print+0x8e>
			str_warper(&wrap, txt);
 80017de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fead 	bl	8001544 <str_warper>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80017f0:	e021      	b.n	8001836 <lcd_print+0x76>

				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80017f2:	4b8e      	ldr	r3, [pc, #568]	; (8001a2c <lcd_print+0x26c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b299      	uxth	r1, r3
 80017f8:	4b8c      	ldr	r3, [pc, #560]	; (8001a2c <lcd_print+0x26c>)
 80017fa:	785b      	ldrb	r3, [r3, #1]
 80017fc:	b298      	uxth	r0, r3
						0, 0, 0, wrap.wrap_str[aux]);
 80017fe:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001802:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001806:	2416      	movs	r4, #22
 8001808:	fb04 f303 	mul.w	r3, r4, r3
 800180c:	4413      	add	r3, r2
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 800180e:	9303      	str	r3, [sp, #12]
 8001810:	2300      	movs	r3, #0
 8001812:	9302      	str	r3, [sp, #8]
 8001814:	2300      	movs	r3, #0
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	2300      	movs	r3, #0
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2320      	movs	r3, #32
 800181e:	4602      	mov	r2, r0
 8001820:	4883      	ldr	r0, [pc, #524]	; (8001a30 <lcd_print+0x270>)
 8001822:	f001 f91b 	bl	8002a5c <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 8001826:	4882      	ldr	r0, [pc, #520]	; (8001a30 <lcd_print+0x270>)
 8001828:	f000 ffbe 	bl	80027a8 <u8g2_SendBuffer>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 800182c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001830:	3301      	adds	r3, #1
 8001832:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001836:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800183a:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800183e:	429a      	cmp	r2, r3
 8001840:	d9d7      	bls.n	80017f2 <lcd_print+0x32>
			}
			clean_it(wrap.wrap_str);
 8001842:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff4a 	bl	80016e0 <clean_it>
 800184c:	e0e2      	b.n	8001a14 <lcd_print+0x254>
		} else {

			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 800184e:	4b77      	ldr	r3, [pc, #476]	; (8001a2c <lcd_print+0x26c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b299      	uxth	r1, r3
 8001854:	4b75      	ldr	r3, [pc, #468]	; (8001a2c <lcd_print+0x26c>)
 8001856:	785b      	ldrb	r3, [r3, #1]
 8001858:	b29a      	uxth	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	9303      	str	r3, [sp, #12]
 800185e:	2300      	movs	r3, #0
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2300      	movs	r3, #0
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	2300      	movs	r3, #0
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2320      	movs	r3, #32
 800186c:	4870      	ldr	r0, [pc, #448]	; (8001a30 <lcd_print+0x270>)
 800186e:	f001 f8f5 	bl	8002a5c <u8g2_DrawButtonUTF8>
					0, txt);
			u8g2_SendBuffer(&u8g2);
 8001872:	486f      	ldr	r0, [pc, #444]	; (8001a30 <lcd_print+0x270>)
 8001874:	f000 ff98 	bl	80027a8 <u8g2_SendBuffer>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	486d      	ldr	r0, [pc, #436]	; (8001a30 <lcd_print+0x270>)
 800187c:	f001 fffc 	bl	8003878 <u8g2_GetStrWidth>
 8001880:	4603      	mov	r3, r0
 8001882:	4619      	mov	r1, r3
 8001884:	4b69      	ldr	r3, [pc, #420]	; (8001a2c <lcd_print+0x26c>)
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	b2cb      	uxtb	r3, r1
 800188a:	4413      	add	r3, r2
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b67      	ldr	r3, [pc, #412]	; (8001a2c <lcd_print+0x26c>)
 8001890:	701a      	strb	r2, [r3, #0]
 8001892:	e0bf      	b.n	8001a14 <lcd_print+0x254>
		}

	} else {
		if (text_wrap) {
 8001894:	4b64      	ldr	r3, [pc, #400]	; (8001a28 <lcd_print+0x268>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 8092 	beq.w	80019c2 <lcd_print+0x202>
			str_warper(&wrap, txt);
 800189e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fe4d 	bl	8001544 <str_warper>
			if (wrap.wrap_times) {
 80018aa:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d06c      	beq.n	800198c <lcd_print+0x1cc>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80018b8:	e04d      	b.n	8001956 <lcd_print+0x196>
					clean_it(mask);
 80018ba:	f107 0308 	add.w	r3, r7, #8
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff0e 	bl	80016e0 <clean_it>
					if(aux){
 80018c4:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00d      	beq.n	80018e8 <lcd_print+0x128>
						cursor[1] += (u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS;
 80018cc:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <lcd_print+0x26c>)
 80018ce:	785a      	ldrb	r2, [r3, #1]
 80018d0:	4b57      	ldr	r3, [pc, #348]	; (8001a30 <lcd_print+0x270>)
 80018d2:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80018d6:	b2d9      	uxtb	r1, r3
 80018d8:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <lcd_print+0x274>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	1acb      	subs	r3, r1, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b51      	ldr	r3, [pc, #324]	; (8001a2c <lcd_print+0x26c>)
 80018e6:	705a      	strb	r2, [r3, #1]
					}
					enable = Custom_Character_masker(wrap.wrap_str[aux], mask,
 80018e8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80018ec:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80018f0:	2116      	movs	r1, #22
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	f107 0108 	add.w	r1, r7, #8
 80018fc:	4a4e      	ldr	r2, [pc, #312]	; (8001a38 <lcd_print+0x278>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff feb6 	bl	8001670 <Custom_Character_masker>
 8001904:	4603      	mov	r3, r0
 8001906:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
							v_cursor);
//					u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1],wrap.wrap_str[aux]);
//					u8g2_SetDrawColor(&u8g2, 2);

 					u8g2_DrawUTF8(&u8g2, v_cursor[0], v_cursor[1], mask);
 800190a:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <lcd_print+0x278>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	b299      	uxth	r1, r3
 8001910:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <lcd_print+0x278>)
 8001912:	785b      	ldrb	r3, [r3, #1]
 8001914:	b29a      	uxth	r2, r3
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4845      	ldr	r0, [pc, #276]	; (8001a30 <lcd_print+0x270>)
 800191c:	f001 fe70 	bl	8003600 <u8g2_DrawUTF8>


					if (enable) {
 8001920:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00a      	beq.n	800193e <lcd_print+0x17e>
						custom_character_dealer(wrap.wrap_str[aux]);
 8001928:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800192c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001930:	2116      	movs	r1, #22
 8001932:	fb01 f303 	mul.w	r3, r1, r3
 8001936:	4413      	add	r3, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fedf 	bl	80016fc <custom_character_dealer>





					u8g2_SendBuffer(&u8g2);
 800193e:	483c      	ldr	r0, [pc, #240]	; (8001a30 <lcd_print+0x270>)
 8001940:	f000 ff32 	bl	80027a8 <u8g2_SendBuffer>
					u8g2_SetDrawColor(&u8g2, 1);
 8001944:	2101      	movs	r1, #1
 8001946:	483a      	ldr	r0, [pc, #232]	; (8001a30 <lcd_print+0x270>)
 8001948:	f002 f91c 	bl	8003b84 <u8g2_SetDrawColor>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 800194c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001950:	3301      	adds	r3, #1
 8001952:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001956:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
 800195a:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800195e:	429a      	cmp	r2, r3
 8001960:	d9ab      	bls.n	80018ba <lcd_print+0xfa>
				}
				cursor[0] += u8g2_GetStrWidth(&u8g2, mask);
 8001962:	f107 0308 	add.w	r3, r7, #8
 8001966:	4619      	mov	r1, r3
 8001968:	4831      	ldr	r0, [pc, #196]	; (8001a30 <lcd_print+0x270>)
 800196a:	f001 ff85 	bl	8003878 <u8g2_GetStrWidth>
 800196e:	4603      	mov	r3, r0
 8001970:	4619      	mov	r1, r3
 8001972:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <lcd_print+0x26c>)
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	b2cb      	uxtb	r3, r1
 8001978:	4413      	add	r3, r2
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <lcd_print+0x26c>)
 800197e:	701a      	strb	r2, [r3, #0]
				clean_it(wrap.wrap_str);
 8001980:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff feab 	bl	80016e0 <clean_it>
 800198a:	e043      	b.n	8001a14 <lcd_print+0x254>
			} else {

				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <lcd_print+0x26c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b299      	uxth	r1, r3
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <lcd_print+0x26c>)
 8001994:	785b      	ldrb	r3, [r3, #1]
 8001996:	b29a      	uxth	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4825      	ldr	r0, [pc, #148]	; (8001a30 <lcd_print+0x270>)
 800199c:	f001 fe30 	bl	8003600 <u8g2_DrawUTF8>
				cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4823      	ldr	r0, [pc, #140]	; (8001a30 <lcd_print+0x270>)
 80019a4:	f001 ff68 	bl	8003878 <u8g2_GetStrWidth>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4619      	mov	r1, r3
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <lcd_print+0x26c>)
 80019ae:	781a      	ldrb	r2, [r3, #0]
 80019b0:	b2cb      	uxtb	r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <lcd_print+0x26c>)
 80019b8:	701a      	strb	r2, [r3, #0]
				u8g2_SendBuffer(&u8g2);
 80019ba:	481d      	ldr	r0, [pc, #116]	; (8001a30 <lcd_print+0x270>)
 80019bc:	f000 fef4 	bl	80027a8 <u8g2_SendBuffer>
 80019c0:	e028      	b.n	8001a14 <lcd_print+0x254>
			 cursor[0] = 0;
			 } else {
			 cursor[0] += u8g2_GetStrWidth(&u8g2, wrap.wrap_str[aux - 1]);
			 }*/
		} else {
			enable = Custom_Character_masker(txt, mask, v_cursor);
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <lcd_print+0x278>)
 80019c8:	4619      	mov	r1, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fe50 	bl	8001670 <Custom_Character_masker>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			u8g2_DrawUTF8(&u8g2, v_cursor[0], v_cursor[1], mask);
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <lcd_print+0x278>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b299      	uxth	r1, r3
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <lcd_print+0x278>)
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4812      	ldr	r0, [pc, #72]	; (8001a30 <lcd_print+0x270>)
 80019e8:	f001 fe0a 	bl	8003600 <u8g2_DrawUTF8>

			if (enable) {
 80019ec:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <lcd_print+0x23a>
				custom_character_dealer(txt);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fe81 	bl	80016fc <custom_character_dealer>
			}
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	480c      	ldr	r0, [pc, #48]	; (8001a30 <lcd_print+0x270>)
 80019fe:	f001 ff3b 	bl	8003878 <u8g2_GetStrWidth>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4619      	mov	r1, r3
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <lcd_print+0x26c>)
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	b2cb      	uxtb	r3, r1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <lcd_print+0x26c>)
 8001a12:	701a      	strb	r2, [r3, #0]
		}
	}
	u8g2_SendBuffer(&u8g2);
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <lcd_print+0x270>)
 8001a16:	f000 fec7 	bl	80027a8 <u8g2_SendBuffer>
}
 8001a1a:	bf00      	nop
 8001a1c:	37ec      	adds	r7, #236	; 0xec
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd90      	pop	{r4, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200003c9 	.word	0x200003c9
 8001a28:	200003ca 	.word	0x200003ca
 8001a2c:	200003cc 	.word	0x200003cc
 8001a30:	2000020c 	.word	0x2000020c
 8001a34:	20000005 	.word	0x20000005
 8001a38:	20000464 	.word	0x20000464

08001a3c <Kpd_Irqv_Init>:
#include "usbd_cdc_if.h"

//{set,reset,up,down,left,right}
key_ih IRQ_VECTOR[6];

void Kpd_Irqv_Init(void) {
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
	//
	IRQ_VECTOR[0].IRQn_p = SET_P_EXTI_IRQn;
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a42:	220a      	movs	r2, #10
 8001a44:	709a      	strb	r2, [r3, #2]
	IRQ_VECTOR[0].deb_counter = 0;
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	801a      	strh	r2, [r3, #0]
	//
	IRQ_VECTOR[1].IRQn_p = RESET_P_EXTI_IRQn;
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a4e:	2217      	movs	r2, #23
 8001a50:	719a      	strb	r2, [r3, #6]
	IRQ_VECTOR[1].deb_counter = 0;
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	809a      	strh	r2, [r3, #4]
	//
	IRQ_VECTOR[2].IRQn_p = UP_P_EXTI_IRQn;
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a5a:	2217      	movs	r2, #23
 8001a5c:	729a      	strb	r2, [r3, #10]
	IRQ_VECTOR[2].deb_counter = 0;
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	811a      	strh	r2, [r3, #8]
	//
	IRQ_VECTOR[3].IRQn_p = DOWN_P_EXTI_IRQn;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a66:	2217      	movs	r2, #23
 8001a68:	739a      	strb	r2, [r3, #14]
	IRQ_VECTOR[3].deb_counter = 0;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	819a      	strh	r2, [r3, #12]
	//
	IRQ_VECTOR[4].IRQn_p = LEFT_P_EXTI_IRQn;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a72:	2217      	movs	r2, #23
 8001a74:	749a      	strb	r2, [r3, #18]
	IRQ_VECTOR[4].deb_counter = 0;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	821a      	strh	r2, [r3, #16]
	//
	IRQ_VECTOR[5].IRQn_p = RIGHT_P_EXTI_IRQn;
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a7e:	2217      	movs	r2, #23
 8001a80:	759a      	strb	r2, [r3, #22]
	IRQ_VECTOR[5].deb_counter = 0;
 8001a82:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <Kpd_Irqv_Init+0x54>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	829a      	strh	r2, [r3, #20]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000468 	.word	0x20000468

08001a94 <SystickCallback>:

void SystickCallback(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 6; i++) {
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	71fb      	strb	r3, [r7, #7]
 8001a9e:	e024      	b.n	8001aea <SystickCallback+0x56>
		if (IRQ_VECTOR[i].deb_counter == 0) {
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4a16      	ldr	r2, [pc, #88]	; (8001afc <SystickCallback+0x68>)
 8001aa4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d112      	bne.n	8001ad2 <SystickCallback+0x3e>
			HAL_NVIC_ClearPendingIRQ(IRQ_VECTOR[i].IRQn_p);
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <SystickCallback+0x68>)
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 f8d2 	bl	8004c62 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(IRQ_VECTOR[i].IRQn_p);
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <SystickCallback+0x68>)
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 f89d 	bl	8004c0a <HAL_NVIC_EnableIRQ>
 8001ad0:	e008      	b.n	8001ae4 <SystickCallback+0x50>
		} else {
			IRQ_VECTOR[i].deb_counter--;
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4a09      	ldr	r2, [pc, #36]	; (8001afc <SystickCallback+0x68>)
 8001ad6:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8001ada:	3a01      	subs	r2, #1
 8001adc:	b291      	uxth	r1, r2
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <SystickCallback+0x68>)
 8001ae0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < 6; i++) {
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	d9d7      	bls.n	8001aa0 <SystickCallback+0xc>
		}
	}
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000468 	.word	0x20000468

08001b00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
	bool fall;
	fall = HAL_GPIO_ReadPin(GPIOB,GPIO_Pin) == GPIO_PIN_RESET;
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	484c      	ldr	r0, [pc, #304]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x140>)
 8001b10:	f003 fa3a 	bl	8004f88 <HAL_GPIO_ReadPin>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]

	if(fall){
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8087 	beq.w	8001c36 <HAL_GPIO_EXTI_Callback+0x136>
		if (GPIO_Pin == SET_P_Pin) {
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d112      	bne.n	8001b54 <HAL_GPIO_EXTI_Callback+0x54>
			//SET
			HAL_NVIC_DisableIRQ(IRQ_VECTOR[0].IRQn_p);
 8001b2e:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b30:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 f876 	bl	8004c26 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_ClearPendingIRQ(IRQ_VECTOR[0].IRQn_p);
 8001b3a:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b3c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 f88e 	bl	8004c62 <HAL_NVIC_ClearPendingIRQ>
			IRQ_VECTOR[0].deb_counter = DEBOUNCE_TIME;
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b4c:	801a      	strh	r2, [r3, #0]
			monitor_send_string("E");
 8001b4e:	483e      	ldr	r0, [pc, #248]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x148>)
 8001b50:	f7fe fbc4 	bl	80002dc <monitor_send_string>
	//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		}
		if (GPIO_Pin == RESET_P_Pin) {
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	d112      	bne.n	8001b80 <HAL_GPIO_EXTI_Callback+0x80>
			//RESET
			HAL_NVIC_DisableIRQ(IRQ_VECTOR[1].IRQn_p);
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b5c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 f860 	bl	8004c26 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_ClearPendingIRQ(IRQ_VECTOR[1].IRQn_p);
 8001b66:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b68:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 f878 	bl	8004c62 <HAL_NVIC_ClearPendingIRQ>
			IRQ_VECTOR[1].deb_counter = DEBOUNCE_TIME;
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b78:	809a      	strh	r2, [r3, #4]
			monitor_send_string("F");
 8001b7a:	4834      	ldr	r0, [pc, #208]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x14c>)
 8001b7c:	f7fe fbae 	bl	80002dc <monitor_send_string>
	//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		}
		if (GPIO_Pin == UP_P_Pin) {
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	2b40      	cmp	r3, #64	; 0x40
 8001b84:	d112      	bne.n	8001bac <HAL_GPIO_EXTI_Callback+0xac>
			//UP
			HAL_NVIC_DisableIRQ(IRQ_VECTOR[2].IRQn_p);
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b88:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 f84a 	bl	8004c26 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_ClearPendingIRQ(IRQ_VECTOR[2].IRQn_p);
 8001b92:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001b94:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 f862 	bl	8004c62 <HAL_NVIC_ClearPendingIRQ>
			IRQ_VECTOR[2].deb_counter = DEBOUNCE_TIME;
 8001b9e:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001ba0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ba4:	811a      	strh	r2, [r3, #8]
			monitor_send_string("A");
 8001ba6:	482a      	ldr	r0, [pc, #168]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x150>)
 8001ba8:	f7fe fb98 	bl	80002dc <monitor_send_string>
	//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		}
		if (GPIO_Pin == DOWN_P_Pin) {
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	2b80      	cmp	r3, #128	; 0x80
 8001bb0:	d113      	bne.n	8001bda <HAL_GPIO_EXTI_Callback+0xda>
			//DOWN
			HAL_NVIC_DisableIRQ(IRQ_VECTOR[3].IRQn_p);
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001bb4:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 f834 	bl	8004c26 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_ClearPendingIRQ(IRQ_VECTOR[3].IRQn_p);
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001bc0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 f84c 	bl	8004c62 <HAL_NVIC_ClearPendingIRQ>
			IRQ_VECTOR[3].deb_counter = DEBOUNCE_TIME;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001bcc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bd0:	819a      	strh	r2, [r3, #12]
			monitor_send_string("B");
 8001bd2:	4820      	ldr	r0, [pc, #128]	; (8001c54 <HAL_GPIO_EXTI_Callback+0x154>)
 8001bd4:	f7fe fb82 	bl	80002dc <monitor_send_string>
 8001bd8:	e016      	b.n	8001c08 <HAL_GPIO_EXTI_Callback+0x108>
	//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		}else if (GPIO_Pin == LEFT_P_Pin) {
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be0:	d112      	bne.n	8001c08 <HAL_GPIO_EXTI_Callback+0x108>
			//LEFT
			HAL_NVIC_DisableIRQ(IRQ_VECTOR[4].IRQn_p);
 8001be2:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001be4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f81c 	bl	8004c26 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_ClearPendingIRQ(IRQ_VECTOR[4].IRQn_p);
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001bf0:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 f834 	bl	8004c62 <HAL_NVIC_ClearPendingIRQ>
			IRQ_VECTOR[4].deb_counter = DEBOUNCE_TIME;
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001bfc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c00:	821a      	strh	r2, [r3, #16]
			monitor_send_string("C");
 8001c02:	4815      	ldr	r0, [pc, #84]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x158>)
 8001c04:	f7fe fb6a 	bl	80002dc <monitor_send_string>
	//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		}
		if (GPIO_Pin == RIGHT_P_Pin) {
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c0e:	d112      	bne.n	8001c36 <HAL_GPIO_EXTI_Callback+0x136>
			//RIGHT
			HAL_NVIC_DisableIRQ(IRQ_VECTOR[5].IRQn_p);
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001c12:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 f805 	bl	8004c26 <HAL_NVIC_DisableIRQ>
			HAL_NVIC_ClearPendingIRQ(IRQ_VECTOR[5].IRQn_p);
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001c1e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f81d 	bl	8004c62 <HAL_NVIC_ClearPendingIRQ>
			IRQ_VECTOR[5].deb_counter = DEBOUNCE_TIME;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x144>)
 8001c2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c2e:	829a      	strh	r2, [r3, #20]
			monitor_send_string("D");
 8001c30:	480a      	ldr	r0, [pc, #40]	; (8001c5c <HAL_GPIO_EXTI_Callback+0x15c>)
 8001c32:	f7fe fb53 	bl	80002dc <monitor_send_string>
	//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		}
	}

}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40010c00 	.word	0x40010c00
 8001c44:	20000468 	.word	0x20000468
 8001c48:	0800dea4 	.word	0x0800dea4
 8001c4c:	0800dea8 	.word	0x0800dea8
 8001c50:	0800deac 	.word	0x0800deac
 8001c54:	0800deb0 	.word	0x0800deb0
 8001c58:	0800deb4 	.word	0x0800deb4
 8001c5c:	0800deb8 	.word	0x0800deb8

08001c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c64:	f002 fe00 	bl	8004868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c68:	f000 f80e 	bl	8001c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6c:	f000 f988 	bl	8001f80 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001c70:	f00a ff18 	bl	800caa4 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001c74:	f000 f862 	bl	8001d3c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001c78:	f000 f936 	bl	8001ee8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001c7c:	f000 f894 	bl	8001da8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 8001c80:	f7fe faea 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 8001c84:	bf30      	wfi
 8001c86:	e7fd      	b.n	8001c84 <main+0x24>

08001c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b094      	sub	sp, #80	; 0x50
 8001c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c92:	2228      	movs	r2, #40	; 0x28
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f00b fbfe 	bl	800d498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cd4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fe5e 	bl	80069a0 <HAL_RCC_OscConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cea:	f000 f9fd 	bl	80020e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cee:	230f      	movs	r3, #15
 8001cf0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cfe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2102      	movs	r1, #2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f005 f8ca 	bl	8006ea4 <HAL_RCC_ClockConfig>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d16:	f000 f9e7 	bl	80020e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	4618      	mov	r0, r3
 8001d26:	f005 fa23 	bl	8007170 <HAL_RCCEx_PeriphCLKConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001d30:	f000 f9da 	bl	80020e8 <Error_Handler>
  }
}
 8001d34:	bf00      	nop
 8001d36:	3750      	adds	r7, #80	; 0x50
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d42:	4a18      	ldr	r2, [pc, #96]	; (8001da4 <MX_SPI1_Init+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d70:	2208      	movs	r2, #8
 8001d72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d88:	220a      	movs	r2, #10
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <MX_SPI1_Init+0x64>)
 8001d8e:	f005 faa5 	bl	80072dc <HAL_SPI_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d98:	f000 f9a6 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000480 	.word	0x20000480
 8001da4:	40013000 	.word	0x40013000

08001da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b096      	sub	sp, #88	; 0x58
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	615a      	str	r2, [r3, #20]
 8001dd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2220      	movs	r2, #32
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f00b fb59 	bl	800d498 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001de8:	4a3e      	ldr	r2, [pc, #248]	; (8001ee4 <MX_TIM1_Init+0x13c>)
 8001dea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dec:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 8001df8:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001dfa:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001dfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e00:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e12:	4833      	ldr	r0, [pc, #204]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e14:	f005 fcc8 	bl	80077a8 <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e1e:	f000 f963 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	482c      	ldr	r0, [pc, #176]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e30:	f006 f8ae 	bl	8007f90 <HAL_TIM_ConfigClockSource>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e3a:	f000 f955 	bl	80020e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e3e:	4828      	ldr	r0, [pc, #160]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e40:	f005 fd82 	bl	8007948 <HAL_TIM_PWM_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e4a:	f000 f94d 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4820      	ldr	r0, [pc, #128]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e5e:	f006 fc23 	bl	80086a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e68:	f000 f93e 	bl	80020e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6c:	2360      	movs	r3, #96	; 0x60
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4813      	ldr	r0, [pc, #76]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001e92:	f005 ffbf 	bl	8007e14 <HAL_TIM_PWM_ConfigChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001e9c:	f000 f924 	bl	80020e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001ec4:	f006 fc4e 	bl	8008764 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001ece:	f000 f90b 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ed2:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <MX_TIM1_Init+0x138>)
 8001ed4:	f000 f9c8 	bl	8002268 <HAL_TIM_MspPostInit>

}
 8001ed8:	bf00      	nop
 8001eda:	3758      	adds	r7, #88	; 0x58
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200004d8 	.word	0x200004d8
 8001ee4:	40012c00 	.word	0x40012c00

08001ee8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001efc:	463b      	mov	r3, r7
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f0e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001f12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f1c:	221d      	movs	r2, #29
 8001f1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f2e:	f005 fc3b 	bl	80077a8 <HAL_TIM_Base_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f38:	f000 f8d6 	bl	80020e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4619      	mov	r1, r3
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f4a:	f006 f821 	bl	8007f90 <HAL_TIM_ConfigClockSource>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f54:	f000 f8c8 	bl	80020e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_TIM2_Init+0x94>)
 8001f66:	f006 fb9f 	bl	80086a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f70:	f000 f8ba 	bl	80020e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000520 	.word	0x20000520

08001f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a4e      	ldr	r2, [pc, #312]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001f9a:	f043 0310 	orr.w	r3, r3, #16
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fac:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a48      	ldr	r2, [pc, #288]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001fb2:	f043 0320 	orr.w	r3, r3, #32
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a42      	ldr	r2, [pc, #264]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b40      	ldr	r3, [pc, #256]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a3c      	ldr	r2, [pc, #240]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <MX_GPIO_Init+0x154>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffa:	4837      	ldr	r0, [pc, #220]	; (80020d8 <MX_GPIO_Init+0x158>)
 8001ffc:	f002 ffdb 	bl	8004fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002000:	2201      	movs	r2, #1
 8002002:	2110      	movs	r1, #16
 8002004:	4835      	ldr	r0, [pc, #212]	; (80020dc <MX_GPIO_Init+0x15c>)
 8002006:	f002 ffd6 	bl	8004fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	2140      	movs	r1, #64	; 0x40
 800200e:	4833      	ldr	r0, [pc, #204]	; (80020dc <MX_GPIO_Init+0x15c>)
 8002010:	f002 ffd1 	bl	8004fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002014:	2200      	movs	r2, #0
 8002016:	2103      	movs	r1, #3
 8002018:	4831      	ldr	r0, [pc, #196]	; (80020e0 <MX_GPIO_Init+0x160>)
 800201a:	f002 ffcc 	bl	8004fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800201e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002024:	2301      	movs	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2302      	movs	r3, #2
 800202e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	4619      	mov	r1, r3
 8002036:	4828      	ldr	r0, [pc, #160]	; (80020d8 <MX_GPIO_Init+0x158>)
 8002038:	f002 fe22 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800203c:	2310      	movs	r3, #16
 800203e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002044:	2302      	movs	r3, #2
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2302      	movs	r3, #2
 800204a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4619      	mov	r1, r3
 8002052:	4822      	ldr	r0, [pc, #136]	; (80020dc <MX_GPIO_Init+0x15c>)
 8002054:	f002 fe14 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002058:	2340      	movs	r3, #64	; 0x40
 800205a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205c:	2301      	movs	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2302      	movs	r3, #2
 8002066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002068:	f107 0310 	add.w	r3, r7, #16
 800206c:	4619      	mov	r1, r3
 800206e:	481b      	ldr	r0, [pc, #108]	; (80020dc <MX_GPIO_Init+0x15c>)
 8002070:	f002 fe06 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002074:	2303      	movs	r3, #3
 8002076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002078:	2301      	movs	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2302      	movs	r3, #2
 8002082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0310 	add.w	r3, r7, #16
 8002088:	4619      	mov	r1, r3
 800208a:	4815      	ldr	r0, [pc, #84]	; (80020e0 <MX_GPIO_Init+0x160>)
 800208c:	f002 fdf8 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_P_Pin RESET_P_Pin UP_P_Pin DOWN_P_Pin
                           LEFT_P_Pin RIGHT_P_Pin */
  GPIO_InitStruct.Pin = SET_P_Pin|RESET_P_Pin|UP_P_Pin|DOWN_P_Pin
 8002090:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8002094:	613b      	str	r3, [r7, #16]
                          |LEFT_P_Pin|RIGHT_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <MX_GPIO_Init+0x164>)
 8002098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	4619      	mov	r1, r3
 80020a4:	480e      	ldr	r0, [pc, #56]	; (80020e0 <MX_GPIO_Init+0x160>)
 80020a6:	f002 fdeb 	bl	8004c80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2101      	movs	r1, #1
 80020ae:	200a      	movs	r0, #10
 80020b0:	f002 fd8f 	bl	8004bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80020b4:	200a      	movs	r0, #10
 80020b6:	f002 fda8 	bl	8004c0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2101      	movs	r1, #1
 80020be:	2017      	movs	r0, #23
 80020c0:	f002 fd87 	bl	8004bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020c4:	2017      	movs	r0, #23
 80020c6:	f002 fda0 	bl	8004c0a <HAL_NVIC_EnableIRQ>

}
 80020ca:	bf00      	nop
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40011000 	.word	0x40011000
 80020dc:	40010800 	.word	0x40010800
 80020e0:	40010c00 	.word	0x40010c00
 80020e4:	10210000 	.word	0x10210000

080020e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ec:	b672      	cpsid	i
}
 80020ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f0:	e7fe      	b.n	80020f0 <Error_Handler+0x8>
	...

080020f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_MspInit+0x80>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_MspInit+0x80>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6193      	str	r3, [r2, #24]
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_MspInit+0x80>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_MspInit+0x80>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a17      	ldr	r2, [pc, #92]	; (8002174 <HAL_MspInit+0x80>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_MspInit+0x80>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800212a:	2004      	movs	r0, #4
 800212c:	f002 fd46 	bl	8004bbc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2101      	movs	r1, #1
 8002134:	2005      	movs	r0, #5
 8002136:	f002 fd4c 	bl	8004bd2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800213a:	2005      	movs	r0, #5
 800213c:	f002 fd65 	bl	8004c0a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	2101      	movs	r1, #1
 8002144:	2005      	movs	r0, #5
 8002146:	f002 fd44 	bl	8004bd2 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800214a:	2005      	movs	r0, #5
 800214c:	f002 fd5d 	bl	8004c0a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_MspInit+0x84>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_MspInit+0x84>)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	40010000 	.word	0x40010000

0800217c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a15      	ldr	r2, [pc, #84]	; (80021ec <HAL_SPI_MspInit+0x70>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d123      	bne.n	80021e4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_SPI_MspInit+0x74>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <HAL_SPI_MspInit+0x74>)
 80021a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_SPI_MspInit+0x74>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_SPI_MspInit+0x74>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_SPI_MspInit+0x74>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_SPI_MspInit+0x74>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021cc:	23a0      	movs	r3, #160	; 0xa0
 80021ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	4619      	mov	r1, r3
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <HAL_SPI_MspInit+0x78>)
 80021e0:	f002 fd4e 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021e4:	bf00      	nop
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40013000 	.word	0x40013000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40010800 	.word	0x40010800

080021f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a16      	ldr	r2, [pc, #88]	; (8002260 <HAL_TIM_Base_MspInit+0x68>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10c      	bne.n	8002224 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	4a15      	ldr	r2, [pc, #84]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 8002210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002214:	6193      	str	r3, [r2, #24]
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002222:	e018      	b.n	8002256 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222c:	d113      	bne.n	8002256 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	61d3      	str	r3, [r2, #28]
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <HAL_TIM_Base_MspInit+0x6c>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2101      	movs	r1, #1
 800224a:	201c      	movs	r0, #28
 800224c:	f002 fcc1 	bl	8004bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002250:	201c      	movs	r0, #28
 8002252:	f002 fcda 	bl	8004c0a <HAL_NVIC_EnableIRQ>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40021000 	.word	0x40021000

08002268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_TIM_MspPostInit+0x5c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d118      	bne.n	80022ba <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_TIM_MspPostInit+0x60>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_TIM_MspPostInit+0x60>)
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	6193      	str	r3, [r2, #24]
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_TIM_MspPostInit+0x60>)
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2302      	movs	r3, #2
 80022ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	4619      	mov	r1, r3
 80022b4:	4805      	ldr	r0, [pc, #20]	; (80022cc <HAL_TIM_MspPostInit+0x64>)
 80022b6:	f002 fce3 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022ba:	bf00      	nop
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010800 	.word	0x40010800

080022d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <NMI_Handler+0x4>

080022d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022da:	e7fe      	b.n	80022da <HardFault_Handler+0x4>

080022dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <MemManage_Handler+0x4>

080022e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e6:	e7fe      	b.n	80022e6 <BusFault_Handler+0x4>

080022e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <UsageFault_Handler+0x4>

080022ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickCallback();
 8002316:	f7ff fbbd 	bl	8001a94 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231a:	f002 faeb 	bl	80048f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}

08002322 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_P_Pin);
 8002332:	2010      	movs	r0, #16
 8002334:	f002 fe58 	bl	8004fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}

0800233c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8002342:	f002 ff9a 	bl	800527a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20001808 	.word	0x20001808

08002350 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002356:	f002 ff90 	bl	800527a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20001808 	.word	0x20001808

08002364 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_P_Pin);
 8002368:	2020      	movs	r0, #32
 800236a:	f002 fe3d 	bl	8004fe8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_P_Pin);
 800236e:	2040      	movs	r0, #64	; 0x40
 8002370:	f002 fe3a 	bl	8004fe8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_P_Pin);
 8002374:	2080      	movs	r0, #128	; 0x80
 8002376:	f002 fe37 	bl	8004fe8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_P_Pin);
 800237a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800237e:	f002 fe33 	bl	8004fe8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_P_Pin);
 8002382:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002386:	f002 fe2f 	bl	8004fe8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <TIM2_IRQHandler+0x10>)
 8002396:	f005 fc35 	bl	8007c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000520 	.word	0x20000520

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f00b f828 	bl	800d428 <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20005000 	.word	0x20005000
 8002404:	00000400 	.word	0x00000400
 8002408:	20000568 	.word	0x20000568
 800240c:	20001d28 	.word	0x20001d28

08002410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b088      	sub	sp, #32
 800243e:	af02      	add	r7, sp, #8
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	4608      	mov	r0, r1
 8002444:	4611      	mov	r1, r2
 8002446:	461a      	mov	r2, r3
 8002448:	4603      	mov	r3, r0
 800244a:	817b      	strh	r3, [r7, #10]
 800244c:	460b      	mov	r3, r1
 800244e:	813b      	strh	r3, [r7, #8]
 8002450:	4613      	mov	r3, r2
 8002452:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800245a:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800245c:	7dbb      	ldrb	r3, [r7, #22]
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800246a:	897a      	ldrh	r2, [r7, #10]
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	4413      	add	r3, r2
 8002470:	b298      	uxth	r0, r3
 8002472:	893b      	ldrh	r3, [r7, #8]
 8002474:	3301      	adds	r3, #1
 8002476:	b29b      	uxth	r3, r3
 8002478:	893a      	ldrh	r2, [r7, #8]
 800247a:	8979      	ldrh	r1, [r7, #10]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4603      	mov	r3, r0
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f001 fbc8 	bl	8003c16 <u8g2_IsIntersection>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d040      	beq.n	800250e <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800248c:	2301      	movs	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8002490:	e035      	b.n	80024fe <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	781a      	ldrb	r2, [r3, #0]
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	4013      	ands	r3, r2
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00c      	beq.n	80024ba <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	7dba      	ldrb	r2, [r7, #22]
 80024a4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80024a8:	893a      	ldrh	r2, [r7, #8]
 80024aa:	8979      	ldrh	r1, [r7, #10]
 80024ac:	2300      	movs	r3, #0
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2301      	movs	r3, #1
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f001 fa76 	bl	80039a4 <u8g2_DrawHVLine>
 80024b8:	e010      	b.n	80024dc <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	7d7a      	ldrb	r2, [r7, #21]
 80024c8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80024cc:	893a      	ldrh	r2, [r7, #8]
 80024ce:	8979      	ldrh	r1, [r7, #10]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2301      	movs	r3, #1
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f001 fa64 	bl	80039a4 <u8g2_DrawHVLine>
    }
    x++;
 80024dc:	897b      	ldrh	r3, [r7, #10]
 80024de:	3301      	adds	r3, #1
 80024e0:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80024e2:	7dfb      	ldrb	r3, [r7, #23]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
      b++;
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	3301      	adds	r3, #1
 80024f6:	623b      	str	r3, [r7, #32]
    }
    len--;
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1c6      	bne.n	8002492 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	7dba      	ldrb	r2, [r7, #22]
 8002508:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800250c:	e000      	b.n	8002510 <u8g2_DrawHXBM+0xd6>
    return;
 800250e:	bf00      	nop
}
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b088      	sub	sp, #32
 800251a:	af02      	add	r7, sp, #8
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	4608      	mov	r0, r1
 8002520:	4611      	mov	r1, r2
 8002522:	461a      	mov	r2, r3
 8002524:	4603      	mov	r3, r0
 8002526:	817b      	strh	r3, [r7, #10]
 8002528:	460b      	mov	r3, r1
 800252a:	813b      	strh	r3, [r7, #8]
 800252c:	4613      	mov	r3, r2
 800252e:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8002534:	8afb      	ldrh	r3, [r7, #22]
 8002536:	3307      	adds	r3, #7
 8002538:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 800253a:	8afb      	ldrh	r3, [r7, #22]
 800253c:	08db      	lsrs	r3, r3, #3
 800253e:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002540:	897a      	ldrh	r2, [r7, #10]
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	4413      	add	r3, r2
 8002546:	b298      	uxth	r0, r3
 8002548:	893a      	ldrh	r2, [r7, #8]
 800254a:	8c3b      	ldrh	r3, [r7, #32]
 800254c:	4413      	add	r3, r2
 800254e:	b29b      	uxth	r3, r3
 8002550:	893a      	ldrh	r2, [r7, #8]
 8002552:	8979      	ldrh	r1, [r7, #10]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	4603      	mov	r3, r0
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f001 fb5c 	bl	8003c16 <u8g2_IsIntersection>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d017      	beq.n	8002594 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8002564:	e012      	b.n	800258c <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8002566:	88f8      	ldrh	r0, [r7, #6]
 8002568:	893a      	ldrh	r2, [r7, #8]
 800256a:	8979      	ldrh	r1, [r7, #10]
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	4603      	mov	r3, r0
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff ff61 	bl	800243a <u8g2_DrawHXBM>
    bitmap += blen;
 8002578:	8afb      	ldrh	r3, [r7, #22]
 800257a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257c:	4413      	add	r3, r2
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8002580:	893b      	ldrh	r3, [r7, #8]
 8002582:	3301      	adds	r3, #1
 8002584:	813b      	strh	r3, [r7, #8]
    h--;
 8002586:	8c3b      	ldrh	r3, [r7, #32]
 8002588:	3b01      	subs	r3, #1
 800258a:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 800258c:	8c3b      	ldrh	r3, [r7, #32]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1e9      	bne.n	8002566 <u8g2_DrawXBM+0x50>
 8002592:	e000      	b.n	8002596 <u8g2_DrawXBM+0x80>
    return;
 8002594:	bf00      	nop
  }
}
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	4608      	mov	r0, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	817b      	strh	r3, [r7, #10]
 80025ae:	460b      	mov	r3, r1
 80025b0:	813b      	strh	r3, [r7, #8]
 80025b2:	4613      	mov	r3, r2
 80025b4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80025b6:	897a      	ldrh	r2, [r7, #10]
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	4413      	add	r3, r2
 80025bc:	b298      	uxth	r0, r3
 80025be:	893a      	ldrh	r2, [r7, #8]
 80025c0:	8b3b      	ldrh	r3, [r7, #24]
 80025c2:	4413      	add	r3, r2
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	893a      	ldrh	r2, [r7, #8]
 80025c8:	8979      	ldrh	r1, [r7, #10]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4603      	mov	r3, r0
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f001 fb21 	bl	8003c16 <u8g2_IsIntersection>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d012      	beq.n	8002600 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80025da:	e00d      	b.n	80025f8 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	893a      	ldrh	r2, [r7, #8]
 80025e0:	8979      	ldrh	r1, [r7, #10]
 80025e2:	2000      	movs	r0, #0
 80025e4:	9000      	str	r0, [sp, #0]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f001 f9dc 	bl	80039a4 <u8g2_DrawHVLine>
    y++;    
 80025ec:	893b      	ldrh	r3, [r7, #8]
 80025ee:	3301      	adds	r3, #1
 80025f0:	813b      	strh	r3, [r7, #8]
    h--;
 80025f2:	8b3b      	ldrh	r3, [r7, #24]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 80025f8:	8b3b      	ldrh	r3, [r7, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ee      	bne.n	80025dc <u8g2_DrawBox+0x40>
 80025fe:	e000      	b.n	8002602 <u8g2_DrawBox+0x66>
    return;
 8002600:	bf00      	nop
  }
}
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	461a      	mov	r2, r3
 8002616:	4603      	mov	r3, r0
 8002618:	817b      	strh	r3, [r7, #10]
 800261a:	460b      	mov	r3, r1
 800261c:	813b      	strh	r3, [r7, #8]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002626:	897a      	ldrh	r2, [r7, #10]
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	4413      	add	r3, r2
 800262c:	b298      	uxth	r0, r3
 800262e:	893a      	ldrh	r2, [r7, #8]
 8002630:	8c3b      	ldrh	r3, [r7, #32]
 8002632:	4413      	add	r3, r2
 8002634:	b29b      	uxth	r3, r3
 8002636:	893a      	ldrh	r2, [r7, #8]
 8002638:	8979      	ldrh	r1, [r7, #10]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	4603      	mov	r3, r0
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f001 fae9 	bl	8003c16 <u8g2_IsIntersection>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d037      	beq.n	80026ba <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	893a      	ldrh	r2, [r7, #8]
 800264e:	8979      	ldrh	r1, [r7, #10]
 8002650:	2000      	movs	r0, #0
 8002652:	9000      	str	r0, [sp, #0]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f001 f9a5 	bl	80039a4 <u8g2_DrawHVLine>
  if (h >= 2) {
 800265a:	8c3b      	ldrh	r3, [r7, #32]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d92d      	bls.n	80026bc <u8g2_DrawFrame+0xb4>
    h-=2;
 8002660:	8c3b      	ldrh	r3, [r7, #32]
 8002662:	3b02      	subs	r3, #2
 8002664:	843b      	strh	r3, [r7, #32]
    y++;
 8002666:	893b      	ldrh	r3, [r7, #8]
 8002668:	3301      	adds	r3, #1
 800266a:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 800266c:	8c3b      	ldrh	r3, [r7, #32]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d01a      	beq.n	80026a8 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8002672:	8c3b      	ldrh	r3, [r7, #32]
 8002674:	893a      	ldrh	r2, [r7, #8]
 8002676:	8979      	ldrh	r1, [r7, #10]
 8002678:	2001      	movs	r0, #1
 800267a:	9000      	str	r0, [sp, #0]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f001 f991 	bl	80039a4 <u8g2_DrawHVLine>
      x+=w;
 8002682:	897a      	ldrh	r2, [r7, #10]
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	4413      	add	r3, r2
 8002688:	817b      	strh	r3, [r7, #10]
      x--;
 800268a:	897b      	ldrh	r3, [r7, #10]
 800268c:	3b01      	subs	r3, #1
 800268e:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8002690:	8c3b      	ldrh	r3, [r7, #32]
 8002692:	893a      	ldrh	r2, [r7, #8]
 8002694:	8979      	ldrh	r1, [r7, #10]
 8002696:	2001      	movs	r0, #1
 8002698:	9000      	str	r0, [sp, #0]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f001 f982 	bl	80039a4 <u8g2_DrawHVLine>
      y+=h;
 80026a0:	893a      	ldrh	r2, [r7, #8]
 80026a2:	8c3b      	ldrh	r3, [r7, #32]
 80026a4:	4413      	add	r3, r2
 80026a6:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	893a      	ldrh	r2, [r7, #8]
 80026ac:	8af9      	ldrh	r1, [r7, #22]
 80026ae:	2000      	movs	r0, #0
 80026b0:	9000      	str	r0, [sp, #0]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f001 f976 	bl	80039a4 <u8g2_DrawHVLine>
 80026b8:	e000      	b.n	80026bc <u8g2_DrawFrame+0xb4>
    return;
 80026ba:	bf00      	nop
  }
}
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	7c1b      	ldrb	r3, [r3, #16]
 80026d0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026d8:	461a      	mov	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	fb02 f303 	mul.w	r3, r2, r3
 80026e0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00a fed1 	bl	800d498 <memset>
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af02      	add	r7, sp, #8
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
 800270a:	4613      	mov	r3, r2
 800270c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	7c1b      	ldrb	r3, [r3, #16]
 8002714:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	b29b      	uxth	r3, r3
 8002724:	89ba      	ldrh	r2, [r7, #12]
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800272c:	89bb      	ldrh	r3, [r7, #12]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8002732:	89bb      	ldrh	r3, [r7, #12]
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	4413      	add	r3, r2
 8002738:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800273a:	7bf9      	ldrb	r1, [r7, #15]
 800273c:	78ba      	ldrb	r2, [r7, #2]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	460b      	mov	r3, r1
 8002744:	2100      	movs	r1, #0
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f001 ff88 	bl	800465c <u8x8_DrawTile>
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002766:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800276e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	7c5b      	ldrb	r3, [r3, #17]
 8002776:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8002778:	7bba      	ldrb	r2, [r7, #14]
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffbd 	bl	80026fe <u8g2_send_tile_row>
    src_row++;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	3301      	adds	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800278a:	7bbb      	ldrb	r3, [r7, #14]
 800278c:	3301      	adds	r3, #1
 800278e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	7b7b      	ldrb	r3, [r7, #13]
 8002794:	429a      	cmp	r2, r3
 8002796:	d203      	bcs.n	80027a0 <u8g2_send_buffer+0x4c>
 8002798:	7bba      	ldrb	r2, [r7, #14]
 800279a:	7b3b      	ldrb	r3, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d3eb      	bcc.n	8002778 <u8g2_send_buffer+0x24>
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ffcf 	bl	8002754 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f001 ffb2 	bl	8004720 <u8x8_RefreshDisplay>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	78fa      	ldrb	r2, [r7, #3]
 80027d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ff5b 	bl	80026c2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800280c:	2100      	movs	r1, #0
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ffd8 	bl	80027c4 <u8g2_SetBufferCurrTileRow>
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff95 	bl	8002754 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002830:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	4413      	add	r3, r2
 800283c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	7c5b      	ldrb	r3, [r3, #17]
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	429a      	cmp	r2, r3
 8002848:	d304      	bcc.n	8002854 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f001 ff68 	bl	8004720 <u8x8_RefreshDisplay>
    return 0;
 8002850:	2300      	movs	r3, #0
 8002852:	e00d      	b.n	8002870 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff2f 	bl	80026c2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	4619      	mov	r1, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ffab 	bl	80027c4 <u8g2_SetBufferCurrTileRow>
  return 1;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	; 0x30
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	460b      	mov	r3, r1
 800288c:	813b      	strh	r3, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 8002892:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002894:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 8002896:	2308      	movs	r3, #8
 8002898:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80028a8:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80028b0:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80028b8:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 80028c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028c6:	3301      	adds	r3, #1
 80028c8:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 80028ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028cc:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 80028ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028d0:	3301      	adds	r3, #1
 80028d2:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 80028d4:	897b      	ldrh	r3, [r7, #10]
 80028d6:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 80028d8:	8b7a      	ldrh	r2, [r7, #26]
 80028da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 80028e0:	8b7a      	ldrh	r2, [r7, #26]
 80028e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 80028e8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80028ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028ec:	4413      	add	r3, r2
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	8c3b      	ldrh	r3, [r7, #32]
 80028f6:	4413      	add	r3, r2
 80028f8:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 80028fa:	893b      	ldrh	r3, [r7, #8]
 80028fc:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	4798      	blx	r3
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	8afb      	ldrh	r3, [r7, #22]
 800290c:	4413      	add	r3, r2
 800290e:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8002910:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002914:	b29b      	uxth	r3, r3
 8002916:	8afa      	ldrh	r2, [r7, #22]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 800291c:	8afa      	ldrh	r2, [r7, #22]
 800291e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8002924:	8afa      	ldrh	r2, [r7, #22]
 8002926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 800292c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002930:	b21a      	sxth	r2, r3
 8002932:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002936:	b21b      	sxth	r3, r3
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	b21b      	sxth	r3, r3
 800293c:	b29a      	uxth	r2, r3
 800293e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002940:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002942:	440b      	add	r3, r1
 8002944:	b29b      	uxth	r3, r3
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	b29b      	uxth	r3, r3
 800294a:	4413      	add	r3, r2
 800294c:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 800294e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002950:	2b00      	cmp	r3, #0
 8002952:	d067      	beq.n	8002a24 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8002954:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002956:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002958:	429a      	cmp	r2, r3
 800295a:	d109      	bne.n	8002970 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 800295c:	7f7b      	ldrb	r3, [r7, #29]
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf0c      	ite	eq
 8002962:	2301      	moveq	r3, #1
 8002964:	2300      	movne	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4619      	mov	r1, r3
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f001 f90a 	bl	8003b84 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8002970:	8b38      	ldrh	r0, [r7, #24]
 8002972:	8afa      	ldrh	r2, [r7, #22]
 8002974:	8b79      	ldrh	r1, [r7, #26]
 8002976:	8abb      	ldrh	r3, [r7, #20]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	4603      	mov	r3, r0
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fe43 	bl	8002608 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8002982:	7f7b      	ldrb	r3, [r7, #29]
 8002984:	4619      	mov	r1, r3
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f001 f8fc 	bl	8003b84 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	f003 0318 	and.w	r3, r3, #24
 8002992:	2b00      	cmp	r3, #0
 8002994:	d042      	beq.n	8002a1c <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 8002996:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	429a      	cmp	r2, r3
 80029a0:	d13c      	bne.n	8002a1c <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	10db      	asrs	r3, r3, #3
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 80029ae:	8a7b      	ldrh	r3, [r7, #18]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 80029b4:	2300      	movs	r3, #0
 80029b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80029b8:	e02c      	b.n	8002a14 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 80029ba:	8b7a      	ldrh	r2, [r7, #26]
 80029bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029be:	4413      	add	r3, r2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	8a7b      	ldrh	r3, [r7, #18]
 80029c4:	4413      	add	r3, r2
 80029c6:	b299      	uxth	r1, r3
 80029c8:	8afa      	ldrh	r2, [r7, #22]
 80029ca:	8abb      	ldrh	r3, [r7, #20]
 80029cc:	4413      	add	r3, r2
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029d2:	4413      	add	r3, r2
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	8a7b      	ldrh	r3, [r7, #18]
 80029d8:	4413      	add	r3, r2
 80029da:	b29a      	uxth	r2, r3
 80029dc:	8b3b      	ldrh	r3, [r7, #24]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f001 f86b 	bl	8003aba <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 80029e4:	8b7a      	ldrh	r2, [r7, #26]
 80029e6:	8b3b      	ldrh	r3, [r7, #24]
 80029e8:	4413      	add	r3, r2
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029ee:	4413      	add	r3, r2
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	8a7b      	ldrh	r3, [r7, #18]
 80029f4:	4413      	add	r3, r2
 80029f6:	b299      	uxth	r1, r3
 80029f8:	8afa      	ldrh	r2, [r7, #22]
 80029fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029fc:	4413      	add	r3, r2
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	8a7b      	ldrh	r3, [r7, #18]
 8002a02:	4413      	add	r3, r2
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	8abb      	ldrh	r3, [r7, #20]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f001 f86f 	bl	8003aec <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8002a0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a10:	3301      	adds	r3, #1
 8002a12:	847b      	strh	r3, [r7, #34]	; 0x22
 8002a14:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d3ce      	bcc.n	80029ba <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 8002a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8002a22:	e757      	b.n	80028d4 <u8g2_DrawButtonFrame+0x5c>
      break;
 8002a24:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8002a30:	2102      	movs	r1, #2
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f001 f8a6 	bl	8003b84 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8002a38:	8b38      	ldrh	r0, [r7, #24]
 8002a3a:	8afa      	ldrh	r2, [r7, #22]
 8002a3c:	8b79      	ldrh	r1, [r7, #26]
 8002a3e:	8abb      	ldrh	r3, [r7, #20]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	4603      	mov	r3, r0
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7ff fda9 	bl	800259c <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 8002a4a:	7f7b      	ldrb	r3, [r7, #29]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f001 f898 	bl	8003b84 <u8g2_SetDrawColor>
  }
}
 8002a54:	bf00      	nop
 8002a56:	3728      	adds	r7, #40	; 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af04      	add	r7, sp, #16
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	813b      	strh	r3, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 8002a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 ff11 	bl	80038a0 <u8g2_GetUTF8Width>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8002a82:	2300      	movs	r3, #0
 8002a84:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8002a90:	8afb      	ldrh	r3, [r7, #22]
 8002a92:	3301      	adds	r3, #1
 8002a94:	0fda      	lsrs	r2, r3, #31
 8002a96:	4413      	add	r3, r2
 8002a98:	105b      	asrs	r3, r3, #1
 8002a9a:	425b      	negs	r3, r3
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8002aa4:	8afa      	ldrh	r2, [r7, #22]
 8002aa6:	8c3b      	ldrh	r3, [r7, #32]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d20d      	bcs.n	8002ac8 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 8002ab6:	8c3a      	ldrh	r2, [r7, #32]
 8002ab8:	8afb      	ldrh	r3, [r7, #22]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	0fda      	lsrs	r2, r3, #31
 8002abe:	4413      	add	r3, r2
 8002ac0:	105b      	asrs	r3, r3, #1
 8002ac2:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8002ac4:	8c3b      	ldrh	r3, [r7, #32]
 8002ac6:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 8002ac8:	2101      	movs	r1, #1
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fcda 	bl	8003484 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8002ad0:	893a      	ldrh	r2, [r7, #8]
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fd92 	bl	8003600 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8002adc:	897a      	ldrh	r2, [r7, #10]
 8002ade:	8abb      	ldrh	r3, [r7, #20]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b299      	uxth	r1, r3
 8002ae4:	88f8      	ldrh	r0, [r7, #6]
 8002ae6:	893a      	ldrh	r2, [r7, #8]
 8002ae8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002aea:	9302      	str	r3, [sp, #8]
 8002aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	8afb      	ldrh	r3, [r7, #22]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4603      	mov	r3, r0
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f7ff febe 	bl	8002878 <u8g2_DrawButtonFrame>
  
}
 8002afc:	bf00      	nop
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fe71 	bl	80027f4 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff fe82 	bl	800281c <u8g2_NextPage>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f9      	bne.n	8002b12 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002b1e:	2100      	movs	r1, #0
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff fe4f 	bl	80027c4 <u8g2_SetBufferCurrTileRow>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	701a      	strb	r2, [r3, #0]
  return buf;
 8002b3e:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	2000056c 	.word	0x2000056c

08002b50 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 8002b66:	490c      	ldr	r1, [pc, #48]	; (8002b98 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f001 fe39 	bl	80047e0 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 8002b6e:	f107 0313 	add.w	r3, r7, #19
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ffdc 	bl	8002b30 <u8g2_m_24_8_f>
 8002b78:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002b7a:	7cfa      	ldrb	r2, [r7, #19]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 8002b82:	6979      	ldr	r1, [r7, #20]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f001 f92f 	bl	8003de8 <u8g2_SetupBuffer>
}
 8002b8a:	bf00      	nop
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	08004379 	.word	0x08004379
 8002b98:	08004559 	.word	0x08004559
 8002b9c:	08003c6d 	.word	0x08003c6d

08002ba0 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	81fb      	strh	r3, [r7, #14]
	font++;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3301      	adds	r3, #1
 8002be0:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8002be2:	89fb      	ldrh	r3, [r7, #14]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	89fb      	ldrh	r3, [r7, #14]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	81fb      	strh	r3, [r7, #14]
	return pos;
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	6838      	ldr	r0, [r7, #0]
 8002c0e:	f7ff ffc7 	bl	8002ba0 <u8g2_font_get_byte>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	6838      	ldr	r0, [r7, #0]
 8002c1e:	f7ff ffbf 	bl	8002ba0 <u8g2_font_get_byte>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461a      	mov	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	6838      	ldr	r0, [r7, #0]
 8002c2e:	f7ff ffb7 	bl	8002ba0 <u8g2_font_get_byte>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002c3a:	2103      	movs	r1, #3
 8002c3c:	6838      	ldr	r0, [r7, #0]
 8002c3e:	f7ff ffaf 	bl	8002ba0 <u8g2_font_get_byte>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	6838      	ldr	r0, [r7, #0]
 8002c4e:	f7ff ffa7 	bl	8002ba0 <u8g2_font_get_byte>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8002c5a:	2105      	movs	r1, #5
 8002c5c:	6838      	ldr	r0, [r7, #0]
 8002c5e:	f7ff ff9f 	bl	8002ba0 <u8g2_font_get_byte>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002c6a:	2106      	movs	r1, #6
 8002c6c:	6838      	ldr	r0, [r7, #0]
 8002c6e:	f7ff ff97 	bl	8002ba0 <u8g2_font_get_byte>
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002c7a:	2107      	movs	r1, #7
 8002c7c:	6838      	ldr	r0, [r7, #0]
 8002c7e:	f7ff ff8f 	bl	8002ba0 <u8g2_font_get_byte>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002c8a:	2108      	movs	r1, #8
 8002c8c:	6838      	ldr	r0, [r7, #0]
 8002c8e:	f7ff ff87 	bl	8002ba0 <u8g2_font_get_byte>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8002c9a:	2109      	movs	r1, #9
 8002c9c:	6838      	ldr	r0, [r7, #0]
 8002c9e:	f7ff ff7f 	bl	8002ba0 <u8g2_font_get_byte>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	b25a      	sxtb	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002caa:	210a      	movs	r1, #10
 8002cac:	6838      	ldr	r0, [r7, #0]
 8002cae:	f7ff ff77 	bl	8002ba0 <u8g2_font_get_byte>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	b25a      	sxtb	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002cba:	210b      	movs	r1, #11
 8002cbc:	6838      	ldr	r0, [r7, #0]
 8002cbe:	f7ff ff6f 	bl	8002ba0 <u8g2_font_get_byte>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	b25a      	sxtb	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002cca:	210c      	movs	r1, #12
 8002ccc:	6838      	ldr	r0, [r7, #0]
 8002cce:	f7ff ff67 	bl	8002ba0 <u8g2_font_get_byte>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	b25a      	sxtb	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8002cda:	210d      	movs	r1, #13
 8002cdc:	6838      	ldr	r0, [r7, #0]
 8002cde:	f7ff ff5f 	bl	8002ba0 <u8g2_font_get_byte>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	b25a      	sxtb	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002cea:	210e      	movs	r1, #14
 8002cec:	6838      	ldr	r0, [r7, #0]
 8002cee:	f7ff ff57 	bl	8002ba0 <u8g2_font_get_byte>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	b25a      	sxtb	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	6838      	ldr	r0, [r7, #0]
 8002cfe:	f7ff ff4f 	bl	8002ba0 <u8g2_font_get_byte>
 8002d02:	4603      	mov	r3, r0
 8002d04:	b25a      	sxtb	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002d0a:	2110      	movs	r1, #16
 8002d0c:	6838      	ldr	r0, [r7, #0]
 8002d0e:	f7ff ff47 	bl	8002ba0 <u8g2_font_get_byte>
 8002d12:	4603      	mov	r3, r0
 8002d14:	b25a      	sxtb	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002d1a:	2111      	movs	r1, #17
 8002d1c:	6838      	ldr	r0, [r7, #0]
 8002d1e:	f7ff ff50 	bl	8002bc2 <u8g2_font_get_word>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8002d2a:	2113      	movs	r1, #19
 8002d2c:	6838      	ldr	r0, [r7, #0]
 8002d2e:	f7ff ff48 	bl	8002bc2 <u8g2_font_get_word>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 8002d3a:	2115      	movs	r1, #21
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	f7ff ff40 	bl	8002bc2 <u8g2_font_get_word>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	82da      	strh	r2, [r3, #22]
#endif
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7b1b      	ldrb	r3, [r3, #12]
 8002d62:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	7b7b      	ldrb	r3, [r7, #13]
 8002d70:	fa42 f303 	asr.w	r3, r2, r3
 8002d74:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 8002d76:	7b7b      	ldrb	r3, [r7, #13]
 8002d78:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 8002d7a:	7bba      	ldrb	r2, [r7, #14]
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	4413      	add	r3, r2
 8002d80:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 8002d82:	7bbb      	ldrb	r3, [r7, #14]
 8002d84:	2b07      	cmp	r3, #7
 8002d86:	d91a      	bls.n	8002dbe <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 8002d8c:	7b3a      	ldrb	r2, [r7, #12]
 8002d8e:	7b7b      	ldrb	r3, [r7, #13]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	7b3b      	ldrb	r3, [r7, #12]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	b25a      	sxtb	r2, r3
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 8002db8:	7bbb      	ldrb	r3, [r7, #14]
 8002dba:	3b08      	subs	r3, #8
 8002dbc:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7bba      	ldrb	r2, [r7, #14]
 8002dd8:	731a      	strb	r2, [r3, #12]
	return val;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	460b      	mov	r3, r1
 8002df0:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ffab 	bl	8002d52 <u8g2_font_decode_get_unsigned_bits>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 8002e0a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002e0e:	78fb      	ldrb	r3, [r7, #3]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	73bb      	strb	r3, [r7, #14]
	v -= d;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	7bbb      	ldrb	r3, [r7, #14]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	73fb      	strb	r3, [r7, #15]
	return v;
 8002e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 8002e2c:	b490      	push	{r4, r7}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4604      	mov	r4, r0
 8002e34:	4608      	mov	r0, r1
 8002e36:	4611      	mov	r1, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4623      	mov	r3, r4
 8002e3c:	80fb      	strh	r3, [r7, #6]
 8002e3e:	4603      	mov	r3, r0
 8002e40:	717b      	strb	r3, [r7, #5]
 8002e42:	460b      	mov	r3, r1
 8002e44:	713b      	strb	r3, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d014      	beq.n	8002e7a <u8g2_add_vector_y+0x4e>
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	dc19      	bgt.n	8002e88 <u8g2_add_vector_y+0x5c>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <u8g2_add_vector_y+0x32>
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d007      	beq.n	8002e6c <u8g2_add_vector_y+0x40>
 8002e5c:	e014      	b.n	8002e88 <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 8002e5e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	4413      	add	r3, r2
 8002e68:	80fb      	strh	r3, [r7, #6]
		break;
 8002e6a:	e014      	b.n	8002e96 <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 8002e6c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	4413      	add	r3, r2
 8002e76:	80fb      	strh	r3, [r7, #6]
		break;
 8002e78:	e00d      	b.n	8002e96 <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 8002e7a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	88fa      	ldrh	r2, [r7, #6]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	80fb      	strh	r3, [r7, #6]
		break;
 8002e86:	e006      	b.n	8002e96 <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 8002e88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	88fa      	ldrh	r2, [r7, #6]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	80fb      	strh	r3, [r7, #6]
		break;
 8002e94:	bf00      	nop
	}
	return dy;
 8002e96:	88fb      	ldrh	r3, [r7, #6]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc90      	pop	{r4, r7}
 8002ea0:	4770      	bx	lr

08002ea2 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8002ea2:	b490      	push	{r4, r7}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	4608      	mov	r0, r1
 8002eac:	4611      	mov	r1, r2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4623      	mov	r3, r4
 8002eb2:	80fb      	strh	r3, [r7, #6]
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	717b      	strb	r3, [r7, #5]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	713b      	strb	r3, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d014      	beq.n	8002ef0 <u8g2_add_vector_x+0x4e>
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	dc19      	bgt.n	8002efe <u8g2_add_vector_x+0x5c>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <u8g2_add_vector_x+0x32>
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d007      	beq.n	8002ee2 <u8g2_add_vector_x+0x40>
 8002ed2:	e014      	b.n	8002efe <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8002ed4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	4413      	add	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]
		break;
 8002ee0:	e014      	b.n	8002f0c <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8002ee2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	80fb      	strh	r3, [r7, #6]
		break;
 8002eee:	e00d      	b.n	8002f0c <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8002ef0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	80fb      	strh	r3, [r7, #6]
		break;
 8002efc:	e006      	b.n	8002f0c <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 8002efe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	4413      	add	r3, r2
 8002f08:	80fb      	strh	r3, [r7, #6]
		break;
 8002f0a:	bf00      	nop
	}
	return dx;
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc90      	pop	{r4, r7}
 8002f16:	4770      	bx	lr

08002f18 <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	70fb      	strb	r3, [r7, #3]
 8002f24:	4613      	mov	r3, r2
 8002f26:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3360      	adds	r3, #96	; 0x60
 8002f2c:	613b      	str	r3, [r7, #16]

	cnt = len;
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002f38:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002f40:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002f48:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	7d7b      	ldrb	r3, [r7, #21]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 8002f56:	7dfa      	ldrb	r2, [r7, #23]
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d201      	bcs.n	8002f62 <u8g2_font_decode_len+0x4a>
			current = cnt;
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	889b      	ldrh	r3, [r3, #4]
 8002f66:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	88db      	ldrh	r3, [r3, #6]
 8002f6c:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002f6e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002f72:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	7c1b      	ldrb	r3, [r3, #16]
 8002f7a:	89b8      	ldrh	r0, [r7, #12]
 8002f7c:	f7ff ff91 	bl	8002ea2 <u8g2_add_vector_x>
 8002f80:	4603      	mov	r3, r0
 8002f82:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002f84:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002f88:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	7c1b      	ldrb	r3, [r3, #16]
 8002f90:	8978      	ldrh	r0, [r7, #10]
 8002f92:	f7ff ff4b 	bl	8002e2c <u8g2_add_vector_y>
 8002f96:	4603      	mov	r3, r0
 8002f98:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 8002f9a:	78bb      	ldrb	r3, [r7, #2]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d010      	beq.n	8002fc2 <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	7b9a      	ldrb	r2, [r3, #14]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8002faa:	7dbb      	ldrb	r3, [r7, #22]
 8002fac:	b298      	uxth	r0, r3
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	7c1b      	ldrb	r3, [r3, #16]
 8002fb2:	897a      	ldrh	r2, [r7, #10]
 8002fb4:	89b9      	ldrh	r1, [r7, #12]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	4603      	mov	r3, r0
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fcf2 	bl	80039a4 <u8g2_DrawHVLine>
 8002fc0:	e013      	b.n	8002fea <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	7b5b      	ldrb	r3, [r3, #13]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10f      	bne.n	8002fea <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	7bda      	ldrb	r2, [r3, #15]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8002fd4:	7dbb      	ldrb	r3, [r7, #22]
 8002fd6:	b298      	uxth	r0, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	7c1b      	ldrb	r3, [r3, #16]
 8002fdc:	897a      	ldrh	r2, [r7, #10]
 8002fde:	89b9      	ldrh	r1, [r7, #12]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fcdd 	bl	80039a4 <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 8002fea:	7dfa      	ldrb	r2, [r7, #23]
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d309      	bcc.n	8003006 <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 8002ff2:	7dfa      	ldrb	r2, [r7, #23]
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	757b      	strb	r3, [r7, #21]
		ly++;
 8002ffe:	7d3b      	ldrb	r3, [r7, #20]
 8003000:	3301      	adds	r3, #1
 8003002:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8003004:	e79d      	b.n	8002f42 <u8g2_font_decode_len+0x2a>
			break;
 8003006:	bf00      	nop
	}
	lx += cnt;
 8003008:	7d7a      	ldrb	r2, [r7, #21]
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	4413      	add	r3, r2
 800300e:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8003010:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8003018:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	725a      	strb	r2, [r3, #9]

}
 8003020:	bf00      	nop
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3360      	adds	r3, #96	; 0x60
 8003036:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800304a:	4619      	mov	r1, r3
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff fe80 	bl	8002d52 <u8g2_font_decode_get_unsigned_bits>
 8003052:	4603      	mov	r3, r0
 8003054:	b25a      	sxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003060:	4619      	mov	r1, r3
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff fe75 	bl	8002d52 <u8g2_font_decode_get_unsigned_bits>
 8003068:	4603      	mov	r3, r0
 800306a:	b25a      	sxtb	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	7b9b      	ldrb	r3, [r3, #14]
 800307e:	2b00      	cmp	r3, #0
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	73da      	strb	r2, [r3, #15]
}
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af02      	add	r7, sp, #8
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3360      	adds	r3, #96	; 0x60
 80030a6:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 80030a8:	6839      	ldr	r1, [r7, #0]
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ffbc 	bl	8003028 <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80030b6:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80030be:	4619      	mov	r1, r3
 80030c0:	6978      	ldr	r0, [r7, #20]
 80030c2:	f7ff fe90 	bl	8002de6 <u8g2_font_decode_get_signed_bits>
 80030c6:	4603      	mov	r3, r0
 80030c8:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80030d0:	4619      	mov	r1, r3
 80030d2:	6978      	ldr	r0, [r7, #20]
 80030d4:	f7ff fe87 	bl	8002de6 <u8g2_font_decode_get_signed_bits>
 80030d8:	4603      	mov	r3, r0
 80030da:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80030e2:	4619      	mov	r1, r3
 80030e4:	6978      	ldr	r0, [r7, #20]
 80030e6:	f7ff fe7e 	bl	8002de6 <u8g2_font_decode_get_signed_bits>
 80030ea:	4603      	mov	r3, r0
 80030ec:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f340 80d7 	ble.w	80032a8 <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	8898      	ldrh	r0, [r3, #4]
 80030fe:	7cfa      	ldrb	r2, [r7, #19]
 8003100:	7c7b      	ldrb	r3, [r7, #17]
 8003102:	4413      	add	r3, r2
 8003104:	b2db      	uxtb	r3, r3
 8003106:	425b      	negs	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	b25a      	sxtb	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	7c1b      	ldrb	r3, [r3, #16]
 8003110:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8003114:	f7ff fec5 	bl	8002ea2 <u8g2_add_vector_x>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	88d8      	ldrh	r0, [r3, #6]
 8003124:	7cfa      	ldrb	r2, [r7, #19]
 8003126:	7c7b      	ldrb	r3, [r7, #17]
 8003128:	4413      	add	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	425b      	negs	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	b25a      	sxtb	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	7c1b      	ldrb	r3, [r3, #16]
 8003136:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800313a:	f7ff fe77 	bl	8002e2c <u8g2_add_vector_y>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	889b      	ldrh	r3, [r3, #4]
 800314a:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	88db      	ldrh	r3, [r3, #6]
 8003150:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 8003152:	8bfb      	ldrh	r3, [r7, #30]
 8003154:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 8003156:	8b7b      	ldrh	r3, [r7, #26]
 8003158:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	7c1b      	ldrb	r3, [r3, #16]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d85a      	bhi.n	8003218 <u8g2_font_decode_glyph+0x180>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <u8g2_font_decode_glyph+0xd0>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	08003179 	.word	0x08003179
 800316c:	08003195 	.word	0x08003195
 8003170:	080031bd 	.word	0x080031bd
 8003174:	080031f1 	.word	0x080031f1
			case 0:
				x1 += decode->glyph_width;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800317e:	b29a      	uxth	r2, r3
 8003180:	8bbb      	ldrh	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 8003186:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800318a:	b29a      	uxth	r2, r3
 800318c:	8b3b      	ldrh	r3, [r7, #24]
 800318e:	4413      	add	r3, r2
 8003190:	833b      	strh	r3, [r7, #24]
				break;
 8003192:	e041      	b.n	8003218 <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 8003194:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003198:	b29b      	uxth	r3, r3
 800319a:	8bfa      	ldrh	r2, [r7, #30]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80031a0:	8bfb      	ldrh	r3, [r7, #30]
 80031a2:	3301      	adds	r3, #1
 80031a4:	83fb      	strh	r3, [r7, #30]
				x1++;
 80031a6:	8bbb      	ldrh	r3, [r7, #28]
 80031a8:	3301      	adds	r3, #1
 80031aa:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	8b3b      	ldrh	r3, [r7, #24]
 80031b6:	4413      	add	r3, r2
 80031b8:	833b      	strh	r3, [r7, #24]
				break;
 80031ba:	e02d      	b.n	8003218 <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	8bfa      	ldrh	r2, [r7, #30]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80031ca:	8bfb      	ldrh	r3, [r7, #30]
 80031cc:	3301      	adds	r3, #1
 80031ce:	83fb      	strh	r3, [r7, #30]
				x1++;
 80031d0:	8bbb      	ldrh	r3, [r7, #28]
 80031d2:	3301      	adds	r3, #1
 80031d4:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 80031d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	8b7a      	ldrh	r2, [r7, #26]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80031e2:	8b7b      	ldrh	r3, [r7, #26]
 80031e4:	3301      	adds	r3, #1
 80031e6:	837b      	strh	r3, [r7, #26]
				y1++;
 80031e8:	8b3b      	ldrh	r3, [r7, #24]
 80031ea:	3301      	adds	r3, #1
 80031ec:	833b      	strh	r3, [r7, #24]
				break;
 80031ee:	e013      	b.n	8003218 <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 80031f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	8bbb      	ldrh	r3, [r7, #28]
 80031f8:	4413      	add	r3, r2
 80031fa:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003202:	b29b      	uxth	r3, r3
 8003204:	8b7a      	ldrh	r2, [r7, #26]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 800320a:	8b7b      	ldrh	r3, [r7, #26]
 800320c:	3301      	adds	r3, #1
 800320e:	837b      	strh	r3, [r7, #26]
				y1++;
 8003210:	8b3b      	ldrh	r3, [r7, #24]
 8003212:	3301      	adds	r3, #1
 8003214:	833b      	strh	r3, [r7, #24]
				break;
 8003216:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8003218:	8bb8      	ldrh	r0, [r7, #28]
 800321a:	8b7a      	ldrh	r2, [r7, #26]
 800321c:	8bf9      	ldrh	r1, [r7, #30]
 800321e:	8b3b      	ldrh	r3, [r7, #24]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	4603      	mov	r3, r0
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fcf6 	bl	8003c16 <u8g2_IsIntersection>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <u8g2_font_decode_glyph+0x19e>
				return d;
 8003230:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8003234:	e03a      	b.n	80032ac <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2200      	movs	r2, #0
 800323a:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2200      	movs	r2, #0
 8003240:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003248:	4619      	mov	r1, r3
 800324a:	6978      	ldr	r0, [r7, #20]
 800324c:	f7ff fd81 	bl	8002d52 <u8g2_font_decode_get_unsigned_bits>
 8003250:	4603      	mov	r3, r0
 8003252:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800325a:	4619      	mov	r1, r3
 800325c:	6978      	ldr	r0, [r7, #20]
 800325e:	f7ff fd78 	bl	8002d52 <u8g2_font_decode_get_unsigned_bits>
 8003262:	4603      	mov	r3, r0
 8003264:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	2200      	movs	r2, #0
 800326a:	4619      	mov	r1, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff fe53 	bl	8002f18 <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 8003272:	7bbb      	ldrb	r3, [r7, #14]
 8003274:	2201      	movs	r2, #1
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff fe4d 	bl	8002f18 <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 800327e:	2101      	movs	r1, #1
 8003280:	6978      	ldr	r0, [r7, #20]
 8003282:	f7ff fd66 	bl	8002d52 <u8g2_font_decode_get_unsigned_bits>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ec      	bne.n	8003266 <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003292:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8003296:	429a      	cmp	r2, r3
 8003298:	dd00      	ble.n	800329c <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 800329a:	e7d2      	b.n	8003242 <u8g2_font_decode_glyph+0x1aa>
				break;
 800329c:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	7b9a      	ldrb	r2, [r3, #14]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 80032a8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3317      	adds	r3, #23
 80032ca:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 80032cc:	887b      	ldrh	r3, [r7, #2]
 80032ce:	2bff      	cmp	r3, #255	; 0xff
 80032d0:	d82a      	bhi.n	8003328 <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	2b60      	cmp	r3, #96	; 0x60
 80032d6:	d907      	bls.n	80032e8 <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80032de:	461a      	mov	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4413      	add	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
 80032e6:	e009      	b.n	80032fc <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 80032e8:	887b      	ldrh	r3, [r7, #2]
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d906      	bls.n	80032fc <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80032f4:	461a      	mov	r2, r3
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	4413      	add	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d04e      	beq.n	80033a4 <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	887a      	ldrh	r2, [r7, #2]
 800330e:	429a      	cmp	r2, r3
 8003310:	d102      	bne.n	8003318 <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	3302      	adds	r3, #2
 8003316:	e049      	b.n	80033ac <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3301      	adds	r3, #1
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4413      	add	r3, r2
 8003324:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8003326:	e7e9      	b.n	80032fc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800332e:	461a      	mov	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	4413      	add	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 800333a:	2100      	movs	r1, #0
 800333c:	6938      	ldr	r0, [r7, #16]
 800333e:	f7ff fc40 	bl	8002bc2 <u8g2_font_get_word>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	4413      	add	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 800334c:	2102      	movs	r1, #2
 800334e:	6938      	ldr	r0, [r7, #16]
 8003350:	f7ff fc37 	bl	8002bc2 <u8g2_font_get_word>
 8003354:	4603      	mov	r3, r0
 8003356:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	3304      	adds	r3, #4
 800335c:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 800335e:	89fa      	ldrh	r2, [r7, #14]
 8003360:	887b      	ldrh	r3, [r7, #2]
 8003362:	429a      	cmp	r2, r3
 8003364:	d3e9      	bcc.n	800333a <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 800336c:	89fb      	ldrh	r3, [r7, #14]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	3301      	adds	r3, #1
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	b29a      	uxth	r2, r3
 800337a:	89fb      	ldrh	r3, [r7, #14]
 800337c:	4313      	orrs	r3, r2
 800337e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8003380:	89fb      	ldrh	r3, [r7, #14]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d010      	beq.n	80033a8 <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 8003386:	89fa      	ldrh	r2, [r7, #14]
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	429a      	cmp	r2, r3
 800338c:	d102      	bne.n	8003394 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3303      	adds	r3, #3
 8003392:	e00b      	b.n	80033ac <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	3302      	adds	r3, #2
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	4413      	add	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 80033a2:	e7e0      	b.n	8003366 <u8g2_font_get_glyph_data+0xb2>
				break;
 80033a4:	bf00      	nop
 80033a6:	e000      	b.n	80033aa <u8g2_font_get_glyph_data+0xf6>
				break;
 80033a8:	bf00      	nop
		}
	}
#endif

	return NULL;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	4608      	mov	r0, r1
 80033be:	4611      	mov	r1, r2
 80033c0:	461a      	mov	r2, r3
 80033c2:	4603      	mov	r3, r0
 80033c4:	817b      	strh	r3, [r7, #10]
 80033c6:	460b      	mov	r3, r1
 80033c8:	813b      	strh	r3, [r7, #8]
 80033ca:	4613      	mov	r3, r2
 80033cc:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	897a      	ldrh	r2, [r7, #10]
 80033d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	893a      	ldrh	r2, [r7, #8]
 80033de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	4619      	mov	r1, r3
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f7ff ff64 	bl	80032b4 <u8g2_font_get_glyph_data>
 80033ec:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80033f4:	6939      	ldr	r1, [r7, #16]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff fe4e 	bl	8003098 <u8g2_font_decode_glyph>
 80033fc:	4603      	mov	r3, r0
 80033fe:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 8003400:	8afb      	ldrh	r3, [r7, #22]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	460b      	mov	r3, r1
 8003414:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 8003416:	887b      	ldrh	r3, [r7, #2]
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ff4a 	bl	80032b4 <u8g2_font_get_glyph_data>
 8003420:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <u8g2_GetGlyphWidth+0x22>
		return 0;
 8003428:	2300      	movs	r3, #0
 800342a:	e027      	b.n	800347c <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff fdfa 	bl	8003028 <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003440:	4619      	mov	r1, r3
 8003442:	4610      	mov	r0, r2
 8003444:	f7ff fccf 	bl	8002de6 <u8g2_font_decode_get_signed_bits>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f7ff fcc0 	bl	8002de6 <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003472:	4619      	mov	r1, r3
 8003474:	4610      	mov	r0, r2
 8003476:	f7ff fcb6 	bl	8002de6 <u8g2_font_decode_get_signed_bits>
 800347a:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
	...

080034a4 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	461a      	mov	r2, r3
 80034b2:	4603      	mov	r3, r0
 80034b4:	817b      	strh	r3, [r7, #10]
 80034b6:	460b      	mov	r3, r1
 80034b8:	813b      	strh	r3, [r7, #8]
 80034ba:	4613      	mov	r3, r2
 80034bc:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d833      	bhi.n	8003530 <u8g2_DrawGlyph+0x8c>
 80034c8:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <u8g2_DrawGlyph+0x2c>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034e1 	.word	0x080034e1
 80034d4:	080034f5 	.word	0x080034f5
 80034d8:	08003509 	.word	0x08003509
 80034dc:	0800351d 	.word	0x0800351d
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	4798      	blx	r3
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	893b      	ldrh	r3, [r7, #8]
 80034ee:	4413      	add	r3, r2
 80034f0:	813b      	strh	r3, [r7, #8]
		break;
 80034f2:	e01d      	b.n	8003530 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	4798      	blx	r3
 80034fc:	4603      	mov	r3, r0
 80034fe:	461a      	mov	r2, r3
 8003500:	897b      	ldrh	r3, [r7, #10]
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	817b      	strh	r3, [r7, #10]
		break;
 8003506:	e013      	b.n	8003530 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	4798      	blx	r3
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	893b      	ldrh	r3, [r7, #8]
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	813b      	strh	r3, [r7, #8]
		break;
 800351a:	e009      	b.n	8003530 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	4798      	blx	r3
 8003524:	4603      	mov	r3, r0
 8003526:	461a      	mov	r2, r3
 8003528:	897b      	ldrh	r3, [r7, #10]
 800352a:	4413      	add	r3, r2
 800352c:	817b      	strh	r3, [r7, #10]
		break;
 800352e:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	893a      	ldrh	r2, [r7, #8]
 8003534:	8979      	ldrh	r1, [r7, #10]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff ff3c 	bl	80033b4 <u8g2_font_draw_glyph>
 800353c:	4603      	mov	r3, r0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop

08003548 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	460b      	mov	r3, r1
 8003554:	817b      	strh	r3, [r7, #10]
 8003556:	4613      	mov	r3, r2
 8003558:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fd86 	bl	800406c <u8x8_utf8_init>
	sum = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	7812      	ldrb	r2, [r2, #0]
 800356c:	4611      	mov	r1, r2
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	4798      	blx	r3
 8003572:	4603      	mov	r3, r0
 8003574:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 8003576:	8abb      	ldrh	r3, [r7, #20]
 8003578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800357c:	4293      	cmp	r3, r2
 800357e:	d038      	beq.n	80035f2 <u8g2_draw_string+0xaa>
			break;
		str++;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3301      	adds	r3, #1
 8003584:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 8003586:	8abb      	ldrh	r3, [r7, #20]
 8003588:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800358c:	4293      	cmp	r3, r2
 800358e:	d0e9      	beq.n	8003564 <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8003590:	8abb      	ldrh	r3, [r7, #20]
 8003592:	893a      	ldrh	r2, [r7, #8]
 8003594:	8979      	ldrh	r1, [r7, #10]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f7ff ff84 	bl	80034a4 <u8g2_DrawGlyph>
 800359c:	4603      	mov	r3, r0
 800359e:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d81e      	bhi.n	80035e8 <u8g2_draw_string+0xa0>
 80035aa:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <u8g2_draw_string+0x68>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035c1 	.word	0x080035c1
 80035b4:	080035cb 	.word	0x080035cb
 80035b8:	080035d5 	.word	0x080035d5
 80035bc:	080035df 	.word	0x080035df
			case 0:
				x += delta;
 80035c0:	897a      	ldrh	r2, [r7, #10]
 80035c2:	8a7b      	ldrh	r3, [r7, #18]
 80035c4:	4413      	add	r3, r2
 80035c6:	817b      	strh	r3, [r7, #10]
				break;
 80035c8:	e00e      	b.n	80035e8 <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 80035ca:	893a      	ldrh	r2, [r7, #8]
 80035cc:	8a7b      	ldrh	r3, [r7, #18]
 80035ce:	4413      	add	r3, r2
 80035d0:	813b      	strh	r3, [r7, #8]
				break;
 80035d2:	e009      	b.n	80035e8 <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 80035d4:	897a      	ldrh	r2, [r7, #10]
 80035d6:	8a7b      	ldrh	r3, [r7, #18]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	817b      	strh	r3, [r7, #10]
				break;
 80035dc:	e004      	b.n	80035e8 <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 80035de:	893a      	ldrh	r2, [r7, #8]
 80035e0:	8a7b      	ldrh	r3, [r7, #18]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	813b      	strh	r3, [r7, #8]
				break;
 80035e6:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 80035e8:	8afa      	ldrh	r2, [r7, #22]
 80035ea:	8a7b      	ldrh	r3, [r7, #18]
 80035ec:	4413      	add	r3, r2
 80035ee:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80035f0:	e7b8      	b.n	8003564 <u8g2_draw_string+0x1c>
			break;
 80035f2:	bf00      	nop
		}
	}
	return sum;
 80035f4:	8afb      	ldrh	r3, [r7, #22]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop

08003600 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	817b      	strh	r3, [r7, #10]
 800360e:	4613      	mov	r3, r2
 8003610:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a06      	ldr	r2, [pc, #24]	; (8003630 <u8g2_DrawUTF8+0x30>)
 8003616:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 8003618:	893a      	ldrh	r2, [r7, #8]
 800361a:	8979      	ldrh	r1, [r7, #10]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff ff92 	bl	8003548 <u8g2_draw_string>
 8003624:	4603      	mov	r3, r0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	080040b3 	.word	0x080040b3

08003634 <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	2b00      	cmp	r3, #0
 8003642:	d05d      	beq.n	8003700 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003662:	2b00      	cmp	r3, #0
 8003664:	d04d      	beq.n	8003702 <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800366c:	2b01      	cmp	r3, #1
 800366e:	d11c      	bne.n	80036aa <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 800367c:	429a      	cmp	r2, r3
 800367e:	da05      	bge.n	800368c <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8003698:	429a      	cmp	r2, r3
 800369a:	dd32      	ble.n	8003702 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80036a8:	e02b      	b.n	8003702 <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80036b0:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80036b8:	4619      	mov	r1, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80036c0:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 80036c2:	429a      	cmp	r2, r3
 80036c4:	da0d      	bge.n	80036e2 <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80036cc:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80036ee:	429a      	cmp	r2, r3
 80036f0:	dd07      	ble.n	8003702 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80036fe:	e000      	b.n	8003702 <u8g2_UpdateRefHeight+0xce>
		return;
 8003700:	bf00      	nop
	}
}
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
	return 0;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
	...

08003720 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a03      	ldr	r2, [pc, #12]	; (8003738 <u8g2_SetFontPosBaseline+0x18>)
 800372c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	0800370b 	.word	0x0800370b

0800373c <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 800374a:	81fb      	strh	r3, [r7, #14]
	tmp++;
 800374c:	89fb      	ldrh	r3, [r7, #14]
 800374e:	3301      	adds	r3, #1
 8003750:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8003752:	89fb      	ldrh	r3, [r7, #14]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr
	...

08003760 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a03      	ldr	r2, [pc, #12]	; (8003778 <u8g2_SetFontPosTop+0x18>)
 800376c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	0800373d 	.word	0x0800373d

0800377c <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d00b      	beq.n	80037a8 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3374      	adds	r3, #116	; 0x74
 800379a:	6839      	ldr	r1, [r7, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fa2f 	bl	8002c00 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff ff46 	bl	8003634 <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 80037ba:	23c0      	movs	r3, #192	; 0xc0
 80037bc:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fc50 	bl	800406c <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	4611      	mov	r1, r2
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	4798      	blx	r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 80037e6:	893b      	ldrh	r3, [r7, #8]
 80037e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d01c      	beq.n	800382a <u8g2_string_width+0x7a>
			break;
		str++;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 80037f6:	893b      	ldrh	r3, [r7, #8]
 80037f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d0e9      	beq.n	80037d4 <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 8003800:	893b      	ldrh	r3, [r7, #8]
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff fe00 	bl	800340a <u8g2_GetGlyphWidth>
 800380a:	4603      	mov	r3, r0
 800380c:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 800380e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003812:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8003816:	d103      	bne.n	8003820 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800381e:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 8003820:	89fa      	ldrh	r2, [r7, #14]
 8003822:	89bb      	ldrh	r3, [r7, #12]
 8003824:	4413      	add	r3, r2
 8003826:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003828:	e7d4      	b.n	80037d4 <u8g2_string_width+0x24>
			break;
 800382a:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01b      	beq.n	800386e <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 8003836:	89fa      	ldrh	r2, [r7, #14]
 8003838:	89bb      	ldrh	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8003844:	b29a      	uxth	r2, r3
 8003846:	89fb      	ldrh	r3, [r7, #14]
 8003848:	4413      	add	r3, r2
 800384a:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8003852:	b29a      	uxth	r2, r3
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	4413      	add	r3, r2
 8003858:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 800385a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800385e:	2b00      	cmp	r3, #0
 8003860:	dd05      	ble.n	800386e <u8g2_string_width+0xbe>
			w += initial_x_offset;
 8003862:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003866:	b29a      	uxth	r2, r3
 8003868:	89fb      	ldrh	r3, [r7, #14]
 800386a:	4413      	add	r3, r2
 800386c:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 800386e:	89fb      	ldrh	r3, [r7, #14]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a05      	ldr	r2, [pc, #20]	; (800389c <u8g2_GetStrWidth+0x24>)
 8003886:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 8003888:	6839      	ldr	r1, [r7, #0]
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff ff90 	bl	80037b0 <u8g2_string_width>
 8003890:	4603      	mov	r3, r0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	08004087 	.word	0x08004087

080038a0 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <u8g2_GetUTF8Width+0x24>)
 80038ae:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 80038b0:	6839      	ldr	r1, [r7, #0]
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ff7c 	bl	80037b0 <u8g2_string_width>
 80038b8:	4603      	mov	r3, r0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	080040b3 	.word	0x080040b3

080038c8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	4611      	mov	r1, r2
 80038d4:	461a      	mov	r2, r3
 80038d6:	460b      	mov	r3, r1
 80038d8:	80fb      	strh	r3, [r7, #6]
 80038da:	4613      	mov	r3, r2
 80038dc:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80038e4:	8afb      	ldrh	r3, [r7, #22]
 80038e6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	8abb      	ldrh	r3, [r7, #20]
 80038ee:	4413      	add	r3, r2
 80038f0:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80038f2:	8afa      	ldrh	r2, [r7, #22]
 80038f4:	8abb      	ldrh	r3, [r7, #20]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d90b      	bls.n	8003912 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80038fa:	8afa      	ldrh	r2, [r7, #22]
 80038fc:	88bb      	ldrh	r3, [r7, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d205      	bcs.n	800390e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003902:	88bb      	ldrh	r3, [r7, #4]
 8003904:	82bb      	strh	r3, [r7, #20]
      b--;
 8003906:	8abb      	ldrh	r3, [r7, #20]
 8003908:	3b01      	subs	r3, #1
 800390a:	82bb      	strh	r3, [r7, #20]
 800390c:	e001      	b.n	8003912 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003912:	8afa      	ldrh	r2, [r7, #22]
 8003914:	88bb      	ldrh	r3, [r7, #4]
 8003916:	429a      	cmp	r2, r3
 8003918:	d301      	bcc.n	800391e <u8g2_clip_intersection2+0x56>
    return 0;
 800391a:	2300      	movs	r3, #0
 800391c:	e01c      	b.n	8003958 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800391e:	8aba      	ldrh	r2, [r7, #20]
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	429a      	cmp	r2, r3
 8003924:	d801      	bhi.n	800392a <u8g2_clip_intersection2+0x62>
    return 0;
 8003926:	2300      	movs	r3, #0
 8003928:	e016      	b.n	8003958 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800392a:	8afa      	ldrh	r2, [r7, #22]
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	429a      	cmp	r2, r3
 8003930:	d201      	bcs.n	8003936 <u8g2_clip_intersection2+0x6e>
    a = c;
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8003936:	8aba      	ldrh	r2, [r7, #20]
 8003938:	88bb      	ldrh	r3, [r7, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	d901      	bls.n	8003942 <u8g2_clip_intersection2+0x7a>
    b = d;
 800393e:	88bb      	ldrh	r3, [r7, #4]
 8003940:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8afa      	ldrh	r2, [r7, #22]
 8003946:	801a      	strh	r2, [r3, #0]
  b -= a;
 8003948:	8aba      	ldrh	r2, [r7, #20]
 800394a:	8afb      	ldrh	r3, [r7, #22]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	8aba      	ldrh	r2, [r7, #20]
 8003954:	801a      	strh	r2, [r3, #0]
  return 1;
 8003956:	2301      	movs	r3, #1
}
 8003958:	4618      	mov	r0, r3
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003962:	b590      	push	{r4, r7, lr}
 8003964:	b087      	sub	sp, #28
 8003966:	af02      	add	r7, sp, #8
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	4608      	mov	r0, r1
 800396c:	4611      	mov	r1, r2
 800396e:	461a      	mov	r2, r3
 8003970:	4603      	mov	r3, r0
 8003972:	817b      	strh	r3, [r7, #10]
 8003974:	460b      	mov	r3, r1
 8003976:	813b      	strh	r3, [r7, #8]
 8003978:	4613      	mov	r3, r2
 800397a:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003980:	893a      	ldrh	r2, [r7, #8]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800398a:	88f8      	ldrh	r0, [r7, #6]
 800398c:	893a      	ldrh	r2, [r7, #8]
 800398e:	8979      	ldrh	r1, [r7, #10]
 8003990:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	4603      	mov	r3, r0
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	47a0      	blx	r4
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd90      	pop	{r4, r7, pc}

080039a4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d075      	beq.n	8003ab4 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d072      	beq.n	8003ab4 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d91a      	bls.n	8003a0a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80039d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d109      	bne.n	80039f0 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80039dc:	897a      	ldrh	r2, [r7, #10]
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	817b      	strh	r3, [r7, #10]
	  x++;
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	3301      	adds	r3, #1
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	817b      	strh	r3, [r7, #10]
 80039ee:	e00c      	b.n	8003a0a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80039f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d108      	bne.n	8003a0a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80039f8:	893a      	ldrh	r2, [r7, #8]
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	813b      	strh	r3, [r7, #8]
	  y++;
 8003a02:	893b      	ldrh	r3, [r7, #8]
 8003a04:	3301      	adds	r3, #1
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8003a0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11a      	bne.n	8003a54 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003a24:	893b      	ldrh	r3, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d83b      	bhi.n	8003aa2 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003a30:	893b      	ldrh	r3, [r7, #8]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d937      	bls.n	8003aa6 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003a42:	1db9      	adds	r1, r7, #6
 8003a44:	f107 000a 	add.w	r0, r7, #10
 8003a48:	f7ff ff3e 	bl	80038c8 <u8g2_clip_intersection2>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11a      	bne.n	8003a88 <u8g2_DrawHVLine+0xe4>
	  return;
 8003a52:	e02f      	b.n	8003ab4 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003a5a:	897b      	ldrh	r3, [r7, #10]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d824      	bhi.n	8003aaa <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003a66:	897b      	ldrh	r3, [r7, #10]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d920      	bls.n	8003aae <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003a78:	1db9      	adds	r1, r7, #6
 8003a7a:	f107 0008 	add.w	r0, r7, #8
 8003a7e:	f7ff ff23 	bl	80038c8 <u8g2_clip_intersection2>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d014      	beq.n	8003ab2 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	689c      	ldr	r4, [r3, #8]
 8003a8e:	8979      	ldrh	r1, [r7, #10]
 8003a90:	893a      	ldrh	r2, [r7, #8]
 8003a92:	88f8      	ldrh	r0, [r7, #6]
 8003a94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	47a0      	blx	r4
 8003aa0:	e008      	b.n	8003ab4 <u8g2_DrawHVLine+0x110>
	  return;
 8003aa2:	bf00      	nop
 8003aa4:	e006      	b.n	8003ab4 <u8g2_DrawHVLine+0x110>
	  return;
 8003aa6:	bf00      	nop
 8003aa8:	e004      	b.n	8003ab4 <u8g2_DrawHVLine+0x110>
	  return;
 8003aaa:	bf00      	nop
 8003aac:	e002      	b.n	8003ab4 <u8g2_DrawHVLine+0x110>
	  return;
 8003aae:	bf00      	nop
 8003ab0:	e000      	b.n	8003ab4 <u8g2_DrawHVLine+0x110>
	  return;
 8003ab2:	bf00      	nop
    }
}
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd90      	pop	{r4, r7, pc}

08003aba <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af02      	add	r7, sp, #8
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	4608      	mov	r0, r1
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4603      	mov	r3, r0
 8003aca:	817b      	strh	r3, [r7, #10]
 8003acc:	460b      	mov	r3, r1
 8003ace:	813b      	strh	r3, [r7, #8]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	893a      	ldrh	r2, [r7, #8]
 8003ad8:	8979      	ldrh	r1, [r7, #10]
 8003ada:	2000      	movs	r0, #0
 8003adc:	9000      	str	r0, [sp, #0]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f7ff ff60 	bl	80039a4 <u8g2_DrawHVLine>
}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	817b      	strh	r3, [r7, #10]
 8003afe:	460b      	mov	r3, r1
 8003b00:	813b      	strh	r3, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	893a      	ldrh	r2, [r7, #8]
 8003b0a:	8979      	ldrh	r1, [r7, #10]
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	9000      	str	r0, [sp, #0]
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff ff47 	bl	80039a4 <u8g2_DrawHVLine>
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af02      	add	r7, sp, #8
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	460b      	mov	r3, r1
 8003b28:	807b      	strh	r3, [r7, #2]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8003b34:	883a      	ldrh	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d31a      	bcc.n	8003b70 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003b40:	883a      	ldrh	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d216      	bcs.n	8003b74 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8003b4c:	887a      	ldrh	r2, [r7, #2]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d312      	bcc.n	8003b78 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003b58:	887a      	ldrh	r2, [r7, #2]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d20e      	bcs.n	8003b7c <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8003b5e:	883a      	ldrh	r2, [r7, #0]
 8003b60:	8879      	ldrh	r1, [r7, #2]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2301      	movs	r3, #1
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ff1b 	bl	80039a4 <u8g2_DrawHVLine>
 8003b6e:	e006      	b.n	8003b7e <u8g2_DrawPixel+0x60>
    return;
 8003b70:	bf00      	nop
 8003b72:	e004      	b.n	8003b7e <u8g2_DrawPixel+0x60>
    return;
 8003b74:	bf00      	nop
 8003b76:	e002      	b.n	8003b7e <u8g2_DrawPixel+0x60>
    return;
 8003b78:	bf00      	nop
 8003b7a:	e000      	b.n	8003b7e <u8g2_DrawPixel+0x60>
    return;
 8003b7c:	bf00      	nop
}
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d903      	bls.n	8003ba6 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr

08003bb0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003bb0:	b490      	push	{r4, r7}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	80fb      	strh	r3, [r7, #6]
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	80bb      	strh	r3, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	807b      	strh	r3, [r7, #2]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	88bb      	ldrh	r3, [r7, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d20d      	bcs.n	8003bf2 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8003bd6:	883a      	ldrh	r2, [r7, #0]
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d901      	bls.n	8003be2 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e014      	b.n	8003c0c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	883b      	ldrh	r3, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d901      	bls.n	8003bee <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e00e      	b.n	8003c0c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e00c      	b.n	8003c0c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003bf2:	883a      	ldrh	r2, [r7, #0]
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d907      	bls.n	8003c0a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	883b      	ldrh	r3, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d901      	bls.n	8003c06 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e002      	b.n	8003c0c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e000      	b.n	8003c0c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8003c0a:	2300      	movs	r3, #0
    }
  }
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc90      	pop	{r4, r7}
 8003c14:	4770      	bx	lr

08003c16 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	4608      	mov	r0, r1
 8003c20:	4611      	mov	r1, r2
 8003c22:	461a      	mov	r2, r3
 8003c24:	4603      	mov	r3, r0
 8003c26:	817b      	strh	r3, [r7, #10]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	813b      	strh	r3, [r7, #8]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8003c3c:	8b3b      	ldrh	r3, [r7, #24]
 8003c3e:	893a      	ldrh	r2, [r7, #8]
 8003c40:	f7ff ffb6 	bl	8003bb0 <u8g2_is_intersection_decision_tree>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <u8g2_IsIntersection+0x38>
    return 0; 
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e00a      	b.n	8003c64 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	897a      	ldrh	r2, [r7, #10]
 8003c5e:	f7ff ffa7 	bl	8003bb0 <u8g2_is_intersection_decision_tree>
 8003c62:	4603      	mov	r3, r0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	; 0x24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	4608      	mov	r0, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	817b      	strh	r3, [r7, #10]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	813b      	strh	r3, [r7, #8]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8003c86:	893b      	ldrh	r3, [r7, #8]
 8003c88:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8003c8a:	7efb      	ldrb	r3, [r7, #27]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8003c96:	7e3a      	ldrb	r2, [r7, #24]
 8003c98:	7efb      	ldrb	r3, [r7, #27]
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d801      	bhi.n	8003cb6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8003cb2:	7e3b      	ldrb	r3, [r7, #24]
 8003cb4:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d001      	beq.n	8003cc4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003cc0:	7e3b      	ldrb	r3, [r7, #24]
 8003cc2:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003cc4:	893b      	ldrh	r3, [r7, #8]
 8003cc6:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8003cc8:	8afb      	ldrh	r3, [r7, #22]
 8003cca:	f023 0307 	bic.w	r3, r3, #7
 8003cce:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	7c1b      	ldrb	r3, [r3, #16]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	8afa      	ldrh	r2, [r7, #22]
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce4:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8003ce6:	8afb      	ldrh	r3, [r7, #22]
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	4413      	add	r3, r2
 8003cec:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8003cee:	897b      	ldrh	r3, [r7, #10]
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8003cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d117      	bne.n	8003d2e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	7ebb      	ldrb	r3, [r7, #26]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	781a      	ldrb	r2, [r3, #0]
 8003d10:	7e7b      	ldrb	r3, [r7, #25]
 8003d12:	4053      	eors	r3, r2
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
	len--;
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e8      	bne.n	8003cfe <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003d2c:	e038      	b.n	8003da0 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	7ebb      	ldrb	r3, [r7, #26]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	7e7b      	ldrb	r3, [r7, #25]
 8003d42:	4053      	eors	r3, r2
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8003d4a:	7efb      	ldrb	r3, [r7, #27]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003d50:	7efb      	ldrb	r3, [r7, #27]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	76fb      	strb	r3, [r7, #27]
      len--;
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8003d5e:	7efb      	ldrb	r3, [r7, #27]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d114      	bne.n	8003d8e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003d68:	461a      	mov	r2, r3
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d801      	bhi.n	8003d7e <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d008      	beq.n	8003d9a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	767b      	strb	r3, [r7, #25]
 8003d8c:	e005      	b.n	8003d9a <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8003d8e:	7ebb      	ldrb	r3, [r7, #26]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003d94:	7e7b      	ldrb	r3, [r7, #25]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1c6      	bne.n	8003d2e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003da0:	bf00      	nop
 8003da2:	3724      	adds	r7, #36	; 0x24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	79fa      	ldrb	r2, [r7, #7]
 8003e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff ffad 	bl	8003daa <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f7ff fc65 	bl	8003720 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b085      	sub	sp, #20
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e7a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003e7c:	89fb      	ldrh	r3, [r7, #14]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	89fa      	ldrh	r2, [r7, #14]
 8003e86:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	7c1b      	ldrb	r3, [r3, #16]
 8003e8c:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8003e8e:	89fb      	ldrh	r3, [r7, #14]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	89fa      	ldrh	r2, [r7, #14]
 8003e98:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ea0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003ea2:	89fb      	ldrh	r3, [r7, #14]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	89fa      	ldrh	r2, [r7, #14]
 8003eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eb4:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8003eb6:	89fb      	ldrh	r3, [r7, #14]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003ebe:	4413      	add	r3, r2
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	7c52      	ldrb	r2, [r2, #17]
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	dd08      	ble.n	8003eda <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	7c5b      	ldrb	r3, [r3, #17]
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003eda:	89fb      	ldrh	r3, [r7, #14]
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003efc:	89fb      	ldrh	r3, [r7, #14]
 8003efe:	4413      	add	r3, r2
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	8a9a      	ldrh	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	8ada      	ldrh	r2, [r3, #22]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af02      	add	r7, sp, #8
 8003f2c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4603      	mov	r3, r0
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fe63 	bl	8003c16 <u8g2_IsIntersection>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d104      	bne.n	8003f60 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003f5e:	e03b      	b.n	8003fd8 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d205      	bcs.n	8003f84 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d905      	bls.n	8003fa0 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d205      	bcs.n	8003fbc <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d905      	bls.n	8003fd8 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff3c 	bl	8003e66 <u8g2_update_dimension_common>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ff7b 	bl	8003f26 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	4608      	mov	r0, r1
 8004042:	4611      	mov	r1, r2
 8004044:	461a      	mov	r2, r3
 8004046:	4603      	mov	r3, r0
 8004048:	817b      	strh	r3, [r7, #10]
 800404a:	460b      	mov	r3, r1
 800404c:	813b      	strh	r3, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004052:	88f8      	ldrh	r0, [r7, #6]
 8004054:	893a      	ldrh	r2, [r7, #8]
 8004056:	8979      	ldrh	r1, [r7, #10]
 8004058:	7e3b      	ldrb	r3, [r7, #24]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4603      	mov	r3, r0
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff fc7f 	bl	8003962 <u8g2_draw_hv_line_2dir>
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr

08004086 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <u8x8_ascii_next+0x18>
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	2b0a      	cmp	r3, #10
 800409c:	d102      	bne.n	80040a4 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800409e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040a2:	e001      	b.n	80040a8 <u8x8_ascii_next+0x22>
  return b;
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	b29b      	uxth	r3, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <u8x8_utf8_next+0x18>
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	2b0a      	cmp	r3, #10
 80040c8:	d102      	bne.n	80040d0 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80040ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040ce:	e06e      	b.n	80041ae <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d145      	bne.n	8004166 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80040da:	78fb      	ldrb	r3, [r7, #3]
 80040dc:	2bfb      	cmp	r3, #251	; 0xfb
 80040de:	d908      	bls.n	80040f2 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2205      	movs	r2, #5
 80040e4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	70fb      	strb	r3, [r7, #3]
 80040f0:	e032      	b.n	8004158 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	2bf7      	cmp	r3, #247	; 0xf7
 80040f6:	d908      	bls.n	800410a <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2204      	movs	r2, #4
 80040fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	70fb      	strb	r3, [r7, #3]
 8004108:	e026      	b.n	8004158 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	2bef      	cmp	r3, #239	; 0xef
 800410e:	d908      	bls.n	8004122 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2203      	movs	r2, #3
 8004114:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	70fb      	strb	r3, [r7, #3]
 8004120:	e01a      	b.n	8004158 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	2bdf      	cmp	r3, #223	; 0xdf
 8004126:	d908      	bls.n	800413a <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	70fb      	strb	r3, [r7, #3]
 8004138:	e00e      	b.n	8004158 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 800413a:	78fb      	ldrb	r3, [r7, #3]
 800413c:	2bbf      	cmp	r3, #191	; 0xbf
 800413e:	d908      	bls.n	8004152 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	70fb      	strb	r3, [r7, #3]
 8004150:	e002      	b.n	8004158 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	b29b      	uxth	r3, r3
 8004156:	e02a      	b.n	80041ae <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8004160:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8004164:	e023      	b.n	80041ae <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800416c:	3b01      	subs	r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8c1b      	ldrh	r3, [r3, #32]
 800417a:	019b      	lsls	r3, r3, #6
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004188:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8c1a      	ldrh	r2, [r3, #32]
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	b29b      	uxth	r3, r3
 8004192:	4313      	orrs	r3, r2
 8004194:	b29a      	uxth	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80041a4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80041a8:	e001      	b.n	80041ae <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8c1b      	ldrh	r3, [r3, #32]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691c      	ldr	r4, [r3, #16]
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	2300      	movs	r3, #0
 80041cc:	2120      	movs	r1, #32
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	47a0      	blx	r4
 80041d2:	4603      	mov	r3, r0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd90      	pop	{r4, r7, pc}

080041dc <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	460b      	mov	r3, r1
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691c      	ldr	r4, [r3, #16]
 80041ee:	7afa      	ldrb	r2, [r7, #11]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2117      	movs	r1, #23
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	47a0      	blx	r4
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd90      	pop	{r4, r7, pc}

08004202 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	460b      	mov	r3, r1
 800420c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800420e:	1cfb      	adds	r3, r7, #3
 8004210:	461a      	mov	r2, r3
 8004212:	2101      	movs	r1, #1
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ffe1 	bl	80041dc <u8x8_byte_SendBytes>
 800421a:	4603      	mov	r3, r0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68dc      	ldr	r4, [r3, #12]
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	2300      	movs	r3, #0
 8004238:	2115      	movs	r1, #21
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	47a0      	blx	r4
 800423e:	4603      	mov	r3, r0
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bd90      	pop	{r4, r7, pc}

08004248 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68dc      	ldr	r4, [r3, #12]
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	2300      	movs	r3, #0
 800425c:	2116      	movs	r1, #22
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	47a0      	blx	r4
 8004262:	4603      	mov	r3, r0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	bd90      	pop	{r4, r7, pc}

0800426c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800426c:	b590      	push	{r4, r7, lr}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	460b      	mov	r3, r1
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	68dc      	ldr	r4, [r3, #12]
 800427e:	7afa      	ldrb	r2, [r7, #11]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2117      	movs	r1, #23
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	47a0      	blx	r4
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bd90      	pop	{r4, r7, pc}

08004292 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004292:	b590      	push	{r4, r7, lr}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68dc      	ldr	r4, [r3, #12]
 800429e:	2300      	movs	r3, #0
 80042a0:	2200      	movs	r2, #0
 80042a2:	2118      	movs	r1, #24
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	47a0      	blx	r4
 80042a8:	4603      	mov	r3, r0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd90      	pop	{r4, r7, pc}

080042b2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80042b2:	b590      	push	{r4, r7, lr}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68dc      	ldr	r4, [r3, #12]
 80042be:	2300      	movs	r3, #0
 80042c0:	2200      	movs	r2, #0
 80042c2:	2119      	movs	r1, #25
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	47a0      	blx	r4
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd90      	pop	{r4, r7, pc}

080042d2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80042d2:	b590      	push	{r4, r7, lr}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	73fb      	strb	r3, [r7, #15]
    data++;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2bfe      	cmp	r3, #254	; 0xfe
 80042ec:	d031      	beq.n	8004352 <u8x8_cad_SendSequence+0x80>
 80042ee:	2bfe      	cmp	r3, #254	; 0xfe
 80042f0:	dc3d      	bgt.n	800436e <u8x8_cad_SendSequence+0x9c>
 80042f2:	2b19      	cmp	r3, #25
 80042f4:	dc3b      	bgt.n	800436e <u8x8_cad_SendSequence+0x9c>
 80042f6:	2b18      	cmp	r3, #24
 80042f8:	da23      	bge.n	8004342 <u8x8_cad_SendSequence+0x70>
 80042fa:	2b16      	cmp	r3, #22
 80042fc:	dc02      	bgt.n	8004304 <u8x8_cad_SendSequence+0x32>
 80042fe:	2b15      	cmp	r3, #21
 8004300:	da03      	bge.n	800430a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004302:	e034      	b.n	800436e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004304:	2b17      	cmp	r3, #23
 8004306:	d00e      	beq.n	8004326 <u8x8_cad_SendSequence+0x54>
	return;
 8004308:	e031      	b.n	800436e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68dc      	ldr	r4, [r3, #12]
 8004314:	7bba      	ldrb	r2, [r7, #14]
 8004316:	7bf9      	ldrb	r1, [r7, #15]
 8004318:	2300      	movs	r3, #0
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	47a0      	blx	r4
	  data++;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	603b      	str	r3, [r7, #0]
	  break;
 8004324:	e022      	b.n	800436c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800432c:	f107 030e 	add.w	r3, r7, #14
 8004330:	461a      	mov	r2, r3
 8004332:	2101      	movs	r1, #1
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ff99 	bl	800426c <u8x8_cad_SendData>
	  data++;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	3301      	adds	r3, #1
 800433e:	603b      	str	r3, [r7, #0]
	  break;
 8004340:	e014      	b.n	800436c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68dc      	ldr	r4, [r3, #12]
 8004346:	7bf9      	ldrb	r1, [r7, #15]
 8004348:	2300      	movs	r3, #0
 800434a:	2200      	movs	r2, #0
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	47a0      	blx	r4
	  break;
 8004350:	e00c      	b.n	800436c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004358:	7bbb      	ldrb	r3, [r7, #14]
 800435a:	461a      	mov	r2, r3
 800435c:	2129      	movs	r1, #41	; 0x29
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f9ed 	bl	800473e <u8x8_gpio_call>
	  data++;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	3301      	adds	r3, #1
 8004368:	603b      	str	r3, [r7, #0]
	  break;
 800436a:	bf00      	nop
    cmd = *data;
 800436c:	e7b6      	b.n	80042dc <u8x8_cad_SendSequence+0xa>
	return;
 800436e:	bf00      	nop
    }
  }
}
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	bd90      	pop	{r4, r7, pc}
	...

08004378 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	72fb      	strb	r3, [r7, #11]
 8004386:	4613      	mov	r3, r2
 8004388:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800438a:	7afb      	ldrb	r3, [r7, #11]
 800438c:	3b14      	subs	r3, #20
 800438e:	2b05      	cmp	r3, #5
 8004390:	d82f      	bhi.n	80043f2 <u8x8_cad_001+0x7a>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <u8x8_cad_001+0x20>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043e1 	.word	0x080043e1
 800439c:	080043b1 	.word	0x080043b1
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043d9 	.word	0x080043d9
 80043a8:	080043e1 	.word	0x080043e1
 80043ac:	080043e1 	.word	0x080043e1
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80043b0:	2100      	movs	r1, #0
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff ff00 	bl	80041b8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80043b8:	7abb      	ldrb	r3, [r7, #10]
 80043ba:	4619      	mov	r1, r3
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff ff20 	bl	8004202 <u8x8_byte_SendByte>
      break;
 80043c2:	e018      	b.n	80043f6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80043c4:	2100      	movs	r1, #0
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff fef6 	bl	80041b8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80043cc:	7abb      	ldrb	r3, [r7, #10]
 80043ce:	4619      	mov	r1, r3
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f7ff ff16 	bl	8004202 <u8x8_byte_SendByte>
      break;
 80043d6:	e00e      	b.n	80043f6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80043d8:	2101      	movs	r1, #1
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff feec 	bl	80041b8 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	691c      	ldr	r4, [r3, #16]
 80043e4:	7aba      	ldrb	r2, [r7, #10]
 80043e6:	7af9      	ldrb	r1, [r7, #11]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	47a0      	blx	r4
 80043ee:	4603      	mov	r3, r0
 80043f0:	e002      	b.n	80043f8 <u8x8_cad_001+0x80>
    default:
      return 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <u8x8_cad_001+0x80>
  }
  return 1;
 80043f6:	2301      	movs	r3, #1
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd90      	pop	{r4, r7, pc}

08004400 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	460b      	mov	r3, r1
 800440c:	72fb      	strb	r3, [r7, #11]
 800440e:	4613      	mov	r3, r2
 8004410:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	3b0b      	subs	r3, #11
 8004416:	2b04      	cmp	r3, #4
 8004418:	f200 808e 	bhi.w	8004538 <u8x8_d_uc1604_common+0x138>
 800441c:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <u8x8_d_uc1604_common+0x24>)
 800441e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004422:	bf00      	nop
 8004424:	080044cd 	.word	0x080044cd
 8004428:	08004539 	.word	0x08004539
 800442c:	080044e7 	.word	0x080044e7
 8004430:	08004519 	.word	0x08004519
 8004434:	08004439 	.word	0x08004439
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff ff2a 	bl	8004292 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	795b      	ldrb	r3, [r3, #5]
 8004442:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	b2db      	uxtb	r3, r3
 8004452:	4619      	mov	r1, r3
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff fee5 	bl	8004224 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f043 0310 	orr.w	r3, r3, #16
 8004464:	b2db      	uxtb	r3, r3
 8004466:	4619      	mov	r1, r3
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f7ff fedb 	bl	8004224 <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	799b      	ldrb	r3, [r3, #6]
 8004472:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800447a:	7dbb      	ldrb	r3, [r7, #22]
 800447c:	4413      	add	r3, r2
 800447e:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8004480:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	b25b      	sxtb	r3, r3
 800448a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800448e:	b25b      	sxtb	r3, r3
 8004490:	b2db      	uxtb	r3, r3
 8004492:	4619      	mov	r1, r3
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff fec5 	bl	8004224 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	791b      	ldrb	r3, [r3, #4]
 800449e:	757b      	strb	r3, [r7, #21]
      c *= 8;
 80044a0:	7d7b      	ldrb	r3, [r7, #21]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 80044ac:	7d7b      	ldrb	r3, [r7, #21]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4619      	mov	r1, r3
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7ff feda 	bl	800426c <u8x8_cad_SendData>
	arg_int--;
 80044b8:	7abb      	ldrb	r3, [r7, #10]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80044be:	7abb      	ldrb	r3, [r7, #10]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f3      	bne.n	80044ac <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f7ff fef4 	bl	80042b2 <u8x8_cad_EndTransfer>
      break;
 80044ca:	e037      	b.n	800453c <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80044cc:	7abb      	ldrb	r3, [r7, #10]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 80044d2:	491d      	ldr	r1, [pc, #116]	; (8004548 <u8x8_d_uc1604_common+0x148>)
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff fefc 	bl	80042d2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 80044da:	e02f      	b.n	800453c <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 80044dc:	491b      	ldr	r1, [pc, #108]	; (800454c <u8x8_d_uc1604_common+0x14c>)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff fef7 	bl	80042d2 <u8x8_cad_SendSequence>
      break;
 80044e4:	e02a      	b.n	800453c <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80044e6:	7abb      	ldrb	r3, [r7, #10]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 80044ec:	4918      	ldr	r1, [pc, #96]	; (8004550 <u8x8_d_uc1604_common+0x150>)
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7ff feef 	bl	80042d2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	7c9a      	ldrb	r2, [r3, #18]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8004500:	e01c      	b.n	800453c <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 8004502:	4914      	ldr	r1, [pc, #80]	; (8004554 <u8x8_d_uc1604_common+0x154>)
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff fee4 	bl	80042d2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	7cda      	ldrb	r2, [r3, #19]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8004516:	e011      	b.n	800453c <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7ff feba 	bl	8004292 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800451e:	2181      	movs	r1, #129	; 0x81
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f7ff fe7f 	bl	8004224 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 8004526:	7abb      	ldrb	r3, [r7, #10]
 8004528:	4619      	mov	r1, r3
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff fe8c 	bl	8004248 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff febe 	bl	80042b2 <u8x8_cad_EndTransfer>
      break;
 8004536:	e001      	b.n	800453c <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8004538:	2300      	movs	r3, #0
 800453a:	e000      	b.n	800453e <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 800453c:	2301      	movs	r3, #1
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	0800ed04 	.word	0x0800ed04
 800454c:	0800ed14 	.word	0x0800ed14
 8004550:	0800ed1c 	.word	0x0800ed1c
 8004554:	0800ed24 	.word	0x0800ed24

08004558 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	72fb      	strb	r3, [r7, #11]
 8004566:	4613      	mov	r3, r2
 8004568:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 800456a:	7aba      	ldrb	r2, [r7, #10]
 800456c:	7af9      	ldrb	r1, [r7, #11]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff ff45 	bl	8004400 <u8x8_d_uc1604_common>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d114      	bne.n	80045a6 <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 800457c:	7afb      	ldrb	r3, [r7, #11]
 800457e:	2b09      	cmp	r3, #9
 8004580:	d002      	beq.n	8004588 <u8x8_d_uc1604_jlx19264+0x30>
 8004582:	2b0a      	cmp	r3, #10
 8004584:	d005      	beq.n	8004592 <u8x8_d_uc1604_jlx19264+0x3a>
 8004586:	e00c      	b.n	80045a2 <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8004588:	490a      	ldr	r1, [pc, #40]	; (80045b4 <u8x8_d_uc1604_jlx19264+0x5c>)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f816 	bl	80045bc <u8x8_d_helper_display_setup_memory>
	break;
 8004590:	e00a      	b.n	80045a8 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f825 	bl	80045e2 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8004598:	4907      	ldr	r1, [pc, #28]	; (80045b8 <u8x8_d_uc1604_jlx19264+0x60>)
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff fe99 	bl	80042d2 <u8x8_cad_SendSequence>
	break;
 80045a0:	e002      	b.n	80045a8 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 80045a2:	2300      	movs	r3, #0
 80045a4:	e001      	b.n	80045aa <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 80045a6:	bf00      	nop
  return 1;
 80045a8:	2301      	movs	r3, #1
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	0800ed2c 	.word	0x0800ed2c
 80045b8:	0800ed44 	.word	0x0800ed44

080045bc <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	7c9a      	ldrb	r2, [r3, #18]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr

080045e2 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80045e2:	b590      	push	{r4, r7, lr}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695c      	ldr	r4, [r3, #20]
 80045ee:	2300      	movs	r3, #0
 80045f0:	2200      	movs	r2, #0
 80045f2:	2128      	movs	r1, #40	; 0x28
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68dc      	ldr	r4, [r3, #12]
 80045fc:	2300      	movs	r3, #0
 80045fe:	2200      	movs	r2, #0
 8004600:	2114      	movs	r1, #20
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004606:	2201      	movs	r2, #1
 8004608:	214b      	movs	r1, #75	; 0x4b
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f897 	bl	800473e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	791b      	ldrb	r3, [r3, #4]
 8004616:	461a      	mov	r2, r3
 8004618:	2129      	movs	r1, #41	; 0x29
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f88f 	bl	800473e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004620:	2200      	movs	r2, #0
 8004622:	214b      	movs	r1, #75	; 0x4b
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f88a 	bl	800473e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	791b      	ldrb	r3, [r3, #4]
 8004630:	461a      	mov	r2, r3
 8004632:	2129      	movs	r1, #41	; 0x29
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f882 	bl	800473e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800463a:	2201      	movs	r2, #1
 800463c:	214b      	movs	r1, #75	; 0x4b
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f87d 	bl	800473e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	795b      	ldrb	r3, [r3, #5]
 800464a:	461a      	mov	r2, r3
 800464c:	2129      	movs	r1, #41	; 0x29
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f875 	bl	800473e <u8x8_gpio_call>
}    
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	bd90      	pop	{r4, r7, pc}

0800465c <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	4608      	mov	r0, r1
 8004666:	4611      	mov	r1, r2
 8004668:	461a      	mov	r2, r3
 800466a:	4603      	mov	r3, r0
 800466c:	70fb      	strb	r3, [r7, #3]
 800466e:	460b      	mov	r3, r1
 8004670:	70bb      	strb	r3, [r7, #2]
 8004672:	4613      	mov	r3, r2
 8004674:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800467a:	78bb      	ldrb	r3, [r7, #2]
 800467c:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800467e:	787b      	ldrb	r3, [r7, #1]
 8004680:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689c      	ldr	r4, [r3, #8]
 800468a:	f107 0308 	add.w	r3, r7, #8
 800468e:	2201      	movs	r2, #1
 8004690:	210f      	movs	r1, #15
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	47a0      	blx	r4
 8004696:	4603      	mov	r3, r0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	bd90      	pop	{r4, r7, pc}

080046a0 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689c      	ldr	r4, [r3, #8]
 80046ac:	2300      	movs	r3, #0
 80046ae:	2200      	movs	r2, #0
 80046b0:	2109      	movs	r1, #9
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	47a0      	blx	r4
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd90      	pop	{r4, r7, pc}

080046be <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80046be:	b590      	push	{r4, r7, lr}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689c      	ldr	r4, [r3, #8]
 80046ca:	2300      	movs	r3, #0
 80046cc:	2200      	movs	r2, #0
 80046ce:	210a      	movs	r1, #10
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	47a0      	blx	r4
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd90      	pop	{r4, r7, pc}

080046dc <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80046dc:	b590      	push	{r4, r7, lr}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689c      	ldr	r4, [r3, #8]
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	2300      	movs	r3, #0
 80046f0:	210b      	movs	r1, #11
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	47a0      	blx	r4
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd90      	pop	{r4, r7, pc}

080046fe <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 80046fe:	b590      	push	{r4, r7, lr}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	460b      	mov	r3, r1
 8004708:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689c      	ldr	r4, [r3, #8]
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	2300      	movs	r3, #0
 8004712:	210e      	movs	r1, #14
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	47a0      	blx	r4
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bd90      	pop	{r4, r7, pc}

08004720 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689c      	ldr	r4, [r3, #8]
 800472c:	2300      	movs	r3, #0
 800472e:	2200      	movs	r2, #0
 8004730:	2110      	movs	r1, #16
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	47a0      	blx	r4
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	bd90      	pop	{r4, r7, pc}

0800473e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800473e:	b590      	push	{r4, r7, lr}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	460b      	mov	r3, r1
 8004748:	70fb      	strb	r3, [r7, #3]
 800474a:	4613      	mov	r3, r2
 800474c:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695c      	ldr	r4, [r3, #20]
 8004752:	78ba      	ldrb	r2, [r7, #2]
 8004754:	78f9      	ldrb	r1, [r7, #3]
 8004756:	2300      	movs	r3, #0
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	47a0      	blx	r4
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bd90      	pop	{r4, r7, pc}

08004764 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	72fb      	strb	r3, [r7, #11]
 8004772:	4613      	mov	r3, r2
 8004774:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
	...

08004784 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a11      	ldr	r2, [pc, #68]	; (80047dc <u8x8_SetupDefaults+0x58>)
 8004796:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a10      	ldr	r2, [pc, #64]	; (80047dc <u8x8_SetupDefaults+0x58>)
 800479c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <u8x8_SetupDefaults+0x58>)
 80047a2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <u8x8_SetupDefaults+0x58>)
 80047a8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	22ff      	movs	r2, #255	; 0xff
 80047c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	22ff      	movs	r2, #255	; 0xff
 80047cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	08004765 	.word	0x08004765

080047e0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f7ff ffc8 	bl	8004784 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ff47 	bl	80046a0 <u8x8_SetupMemory>
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800481c:	480c      	ldr	r0, [pc, #48]	; (8004850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800481e:	490d      	ldr	r1, [pc, #52]	; (8004854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004820:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004824:	e002      	b.n	800482c <LoopCopyDataInit>

08004826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800482a:	3304      	adds	r3, #4

0800482c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800482c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800482e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004830:	d3f9      	bcc.n	8004826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004834:	4c0a      	ldr	r4, [pc, #40]	; (8004860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004838:	e001      	b.n	800483e <LoopFillZerobss>

0800483a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800483a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800483c:	3204      	adds	r2, #4

0800483e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800483e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004840:	d3fb      	bcc.n	800483a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004842:	f7fd fde5 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004846:	f008 fdf5 	bl	800d434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800484a:	f7fd fa09 	bl	8001c60 <main>
  bx lr
 800484e:	4770      	bx	lr
  ldr r0, =_sdata
 8004850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004854:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004858:	0800eda4 	.word	0x0800eda4
  ldr r2, =_sbss
 800485c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004860:	20001d24 	.word	0x20001d24

08004864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004864:	e7fe      	b.n	8004864 <ADC1_2_IRQHandler>
	...

08004868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <HAL_Init+0x28>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a07      	ldr	r2, [pc, #28]	; (8004890 <HAL_Init+0x28>)
 8004872:	f043 0310 	orr.w	r3, r3, #16
 8004876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004878:	2003      	movs	r0, #3
 800487a:	f000 f99f 	bl	8004bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800487e:	2000      	movs	r0, #0
 8004880:	f000 f808 	bl	8004894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004884:	f7fd fc36 	bl	80020f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40022000 	.word	0x40022000

08004894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800489c:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <HAL_InitTick+0x54>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4b12      	ldr	r3, [pc, #72]	; (80048ec <HAL_InitTick+0x58>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	4619      	mov	r1, r3
 80048a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f9c9 	bl	8004c4a <HAL_SYSTICK_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e00e      	b.n	80048e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b0f      	cmp	r3, #15
 80048c6:	d80a      	bhi.n	80048de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048c8:	2200      	movs	r2, #0
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048d0:	f000 f97f 	bl	8004bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048d4:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <HAL_InitTick+0x5c>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000008 	.word	0x20000008
 80048ec:	20000010 	.word	0x20000010
 80048f0:	2000000c 	.word	0x2000000c

080048f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_IncTick+0x1c>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_IncTick+0x20>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4413      	add	r3, r2
 8004904:	4a03      	ldr	r2, [pc, #12]	; (8004914 <HAL_IncTick+0x20>)
 8004906:	6013      	str	r3, [r2, #0]
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	20000010 	.word	0x20000010
 8004914:	20000b6c 	.word	0x20000b6c

08004918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return uwTick;
 800491c:	4b02      	ldr	r3, [pc, #8]	; (8004928 <HAL_GetTick+0x10>)
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	4618      	mov	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr
 8004928:	20000b6c 	.word	0x20000b6c

0800492c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004934:	f7ff fff0 	bl	8004918 <HAL_GetTick>
 8004938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004944:	d005      	beq.n	8004952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <HAL_Delay+0x44>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004952:	bf00      	nop
 8004954:	f7ff ffe0 	bl	8004918 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d8f7      	bhi.n	8004954 <HAL_Delay+0x28>
  {
  }
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000010 	.word	0x20000010

08004974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004990:	4013      	ands	r3, r2
 8004992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800499c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049a6:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <__NVIC_SetPriorityGrouping+0x44>)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	60d3      	str	r3, [r2, #12]
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049c0:	4b04      	ldr	r3, [pc, #16]	; (80049d4 <__NVIC_GetPriorityGrouping+0x18>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	0a1b      	lsrs	r3, r3, #8
 80049c6:	f003 0307 	and.w	r3, r3, #7
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bc80      	pop	{r7}
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	db0b      	blt.n	8004a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	4906      	ldr	r1, [pc, #24]	; (8004a0c <__NVIC_EnableIRQ+0x34>)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2001      	movs	r0, #1
 80049fa:	fa00 f202 	lsl.w	r2, r0, r2
 80049fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	e000e100 	.word	0xe000e100

08004a10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	db12      	blt.n	8004a48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	f003 021f 	and.w	r2, r3, #31
 8004a28:	490a      	ldr	r1, [pc, #40]	; (8004a54 <__NVIC_DisableIRQ+0x44>)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	2001      	movs	r0, #1
 8004a32:	fa00 f202 	lsl.w	r2, r0, r2
 8004a36:	3320      	adds	r3, #32
 8004a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a3c:	f3bf 8f4f 	dsb	sy
}
 8004a40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a42:	f3bf 8f6f 	isb	sy
}
 8004a46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	e000e100 	.word	0xe000e100

08004a58 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	db0c      	blt.n	8004a84 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	f003 021f 	and.w	r2, r3, #31
 8004a70:	4907      	ldr	r1, [pc, #28]	; (8004a90 <__NVIC_ClearPendingIRQ+0x38>)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2001      	movs	r0, #1
 8004a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7e:	3360      	adds	r3, #96	; 0x60
 8004a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	e000e100 	.word	0xe000e100

08004a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	6039      	str	r1, [r7, #0]
 8004a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	db0a      	blt.n	8004abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	490c      	ldr	r1, [pc, #48]	; (8004ae0 <__NVIC_SetPriority+0x4c>)
 8004aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab2:	0112      	lsls	r2, r2, #4
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004abc:	e00a      	b.n	8004ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4908      	ldr	r1, [pc, #32]	; (8004ae4 <__NVIC_SetPriority+0x50>)
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	3b04      	subs	r3, #4
 8004acc:	0112      	lsls	r2, r2, #4
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	761a      	strb	r2, [r3, #24]
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	e000e100 	.word	0xe000e100
 8004ae4:	e000ed00 	.word	0xe000ed00

08004ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b089      	sub	sp, #36	; 0x24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	f1c3 0307 	rsb	r3, r3, #7
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	bf28      	it	cs
 8004b06:	2304      	movcs	r3, #4
 8004b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	2b06      	cmp	r3, #6
 8004b10:	d902      	bls.n	8004b18 <NVIC_EncodePriority+0x30>
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	3b03      	subs	r3, #3
 8004b16:	e000      	b.n	8004b1a <NVIC_EncodePriority+0x32>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43da      	mvns	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	401a      	ands	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	43d9      	mvns	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b40:	4313      	orrs	r3, r2
         );
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3724      	adds	r7, #36	; 0x24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004b50:	f3bf 8f4f 	dsb	sy
}
 8004b54:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <__NVIC_SystemReset+0x24>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004b5e:	4904      	ldr	r1, [pc, #16]	; (8004b70 <__NVIC_SystemReset+0x24>)
 8004b60:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <__NVIC_SystemReset+0x28>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b66:	f3bf 8f4f 	dsb	sy
}
 8004b6a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <__NVIC_SystemReset+0x20>
 8004b70:	e000ed00 	.word	0xe000ed00
 8004b74:	05fa0004 	.word	0x05fa0004

08004b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b88:	d301      	bcc.n	8004b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e00f      	b.n	8004bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <SysTick_Config+0x40>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b96:	210f      	movs	r1, #15
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b9c:	f7ff ff7a 	bl	8004a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <SysTick_Config+0x40>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ba6:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <SysTick_Config+0x40>)
 8004ba8:	2207      	movs	r2, #7
 8004baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	e000e010 	.word	0xe000e010

08004bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fed5 	bl	8004974 <__NVIC_SetPriorityGrouping>
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b086      	sub	sp, #24
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	4603      	mov	r3, r0
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004be4:	f7ff feea 	bl	80049bc <__NVIC_GetPriorityGrouping>
 8004be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	6978      	ldr	r0, [r7, #20]
 8004bf0:	f7ff ff7a 	bl	8004ae8 <NVIC_EncodePriority>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff ff49 	bl	8004a94 <__NVIC_SetPriority>
}
 8004c02:	bf00      	nop
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	4603      	mov	r3, r0
 8004c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fedd 	bl	80049d8 <__NVIC_EnableIRQ>
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff feeb 	bl	8004a10 <__NVIC_DisableIRQ>
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004c46:	f7ff ff81 	bl	8004b4c <__NVIC_SystemReset>

08004c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ff90 	bl	8004b78 <SysTick_Config>
 8004c58:	4603      	mov	r3, r0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	4603      	mov	r3, r0
 8004c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fef1 	bl	8004a58 <__NVIC_ClearPendingIRQ>
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b08b      	sub	sp, #44	; 0x2c
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c92:	e169      	b.n	8004f68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c94:	2201      	movs	r2, #1
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	f040 8158 	bne.w	8004f62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4a9a      	ldr	r2, [pc, #616]	; (8004f20 <HAL_GPIO_Init+0x2a0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d05e      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cbc:	4a98      	ldr	r2, [pc, #608]	; (8004f20 <HAL_GPIO_Init+0x2a0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d875      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cc2:	4a98      	ldr	r2, [pc, #608]	; (8004f24 <HAL_GPIO_Init+0x2a4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d058      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cc8:	4a96      	ldr	r2, [pc, #600]	; (8004f24 <HAL_GPIO_Init+0x2a4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d86f      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cce:	4a96      	ldr	r2, [pc, #600]	; (8004f28 <HAL_GPIO_Init+0x2a8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d052      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cd4:	4a94      	ldr	r2, [pc, #592]	; (8004f28 <HAL_GPIO_Init+0x2a8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d869      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cda:	4a94      	ldr	r2, [pc, #592]	; (8004f2c <HAL_GPIO_Init+0x2ac>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d04c      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004ce0:	4a92      	ldr	r2, [pc, #584]	; (8004f2c <HAL_GPIO_Init+0x2ac>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d863      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004ce6:	4a92      	ldr	r2, [pc, #584]	; (8004f30 <HAL_GPIO_Init+0x2b0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d046      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cec:	4a90      	ldr	r2, [pc, #576]	; (8004f30 <HAL_GPIO_Init+0x2b0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d85d      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cf2:	2b12      	cmp	r3, #18
 8004cf4:	d82a      	bhi.n	8004d4c <HAL_GPIO_Init+0xcc>
 8004cf6:	2b12      	cmp	r3, #18
 8004cf8:	d859      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <HAL_GPIO_Init+0x80>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d7b 	.word	0x08004d7b
 8004d04:	08004d55 	.word	0x08004d55
 8004d08:	08004d67 	.word	0x08004d67
 8004d0c:	08004da9 	.word	0x08004da9
 8004d10:	08004daf 	.word	0x08004daf
 8004d14:	08004daf 	.word	0x08004daf
 8004d18:	08004daf 	.word	0x08004daf
 8004d1c:	08004daf 	.word	0x08004daf
 8004d20:	08004daf 	.word	0x08004daf
 8004d24:	08004daf 	.word	0x08004daf
 8004d28:	08004daf 	.word	0x08004daf
 8004d2c:	08004daf 	.word	0x08004daf
 8004d30:	08004daf 	.word	0x08004daf
 8004d34:	08004daf 	.word	0x08004daf
 8004d38:	08004daf 	.word	0x08004daf
 8004d3c:	08004daf 	.word	0x08004daf
 8004d40:	08004daf 	.word	0x08004daf
 8004d44:	08004d5d 	.word	0x08004d5d
 8004d48:	08004d71 	.word	0x08004d71
 8004d4c:	4a79      	ldr	r2, [pc, #484]	; (8004f34 <HAL_GPIO_Init+0x2b4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d52:	e02c      	b.n	8004dae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	623b      	str	r3, [r7, #32]
          break;
 8004d5a:	e029      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	3304      	adds	r3, #4
 8004d62:	623b      	str	r3, [r7, #32]
          break;
 8004d64:	e024      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	623b      	str	r3, [r7, #32]
          break;
 8004d6e:	e01f      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	330c      	adds	r3, #12
 8004d76:	623b      	str	r3, [r7, #32]
          break;
 8004d78:	e01a      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004d82:	2304      	movs	r3, #4
 8004d84:	623b      	str	r3, [r7, #32]
          break;
 8004d86:	e013      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d105      	bne.n	8004d9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d90:	2308      	movs	r3, #8
 8004d92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	611a      	str	r2, [r3, #16]
          break;
 8004d9a:	e009      	b.n	8004db0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	615a      	str	r2, [r3, #20]
          break;
 8004da6:	e003      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004da8:	2300      	movs	r3, #0
 8004daa:	623b      	str	r3, [r7, #32]
          break;
 8004dac:	e000      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          break;
 8004dae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2bff      	cmp	r3, #255	; 0xff
 8004db4:	d801      	bhi.n	8004dba <HAL_GPIO_Init+0x13a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	e001      	b.n	8004dbe <HAL_GPIO_Init+0x13e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2bff      	cmp	r3, #255	; 0xff
 8004dc4:	d802      	bhi.n	8004dcc <HAL_GPIO_Init+0x14c>
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	e002      	b.n	8004dd2 <HAL_GPIO_Init+0x152>
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	3b08      	subs	r3, #8
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	210f      	movs	r1, #15
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	401a      	ands	r2, r3
 8004de4:	6a39      	ldr	r1, [r7, #32]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	431a      	orrs	r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80b1 	beq.w	8004f62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e00:	4b4d      	ldr	r3, [pc, #308]	; (8004f38 <HAL_GPIO_Init+0x2b8>)
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	4a4c      	ldr	r2, [pc, #304]	; (8004f38 <HAL_GPIO_Init+0x2b8>)
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	6193      	str	r3, [r2, #24]
 8004e0c:	4b4a      	ldr	r3, [pc, #296]	; (8004f38 <HAL_GPIO_Init+0x2b8>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e18:	4a48      	ldr	r2, [pc, #288]	; (8004f3c <HAL_GPIO_Init+0x2bc>)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	3302      	adds	r3, #2
 8004e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	220f      	movs	r2, #15
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a40      	ldr	r2, [pc, #256]	; (8004f40 <HAL_GPIO_Init+0x2c0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <HAL_GPIO_Init+0x1ec>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3f      	ldr	r2, [pc, #252]	; (8004f44 <HAL_GPIO_Init+0x2c4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00d      	beq.n	8004e68 <HAL_GPIO_Init+0x1e8>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3e      	ldr	r2, [pc, #248]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d007      	beq.n	8004e64 <HAL_GPIO_Init+0x1e4>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3d      	ldr	r2, [pc, #244]	; (8004f4c <HAL_GPIO_Init+0x2cc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <HAL_GPIO_Init+0x1e0>
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e006      	b.n	8004e6e <HAL_GPIO_Init+0x1ee>
 8004e60:	2304      	movs	r3, #4
 8004e62:	e004      	b.n	8004e6e <HAL_GPIO_Init+0x1ee>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e002      	b.n	8004e6e <HAL_GPIO_Init+0x1ee>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <HAL_GPIO_Init+0x1ee>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e70:	f002 0203 	and.w	r2, r2, #3
 8004e74:	0092      	lsls	r2, r2, #2
 8004e76:	4093      	lsls	r3, r2
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004e7e:	492f      	ldr	r1, [pc, #188]	; (8004f3c <HAL_GPIO_Init+0x2bc>)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	3302      	adds	r3, #2
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d006      	beq.n	8004ea6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004e98:	4b2d      	ldr	r3, [pc, #180]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	492c      	ldr	r1, [pc, #176]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	600b      	str	r3, [r1, #0]
 8004ea4:	e006      	b.n	8004eb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ea6:	4b2a      	ldr	r3, [pc, #168]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	4928      	ldr	r1, [pc, #160]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d006      	beq.n	8004ece <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ec0:	4b23      	ldr	r3, [pc, #140]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4922      	ldr	r1, [pc, #136]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	604b      	str	r3, [r1, #4]
 8004ecc:	e006      	b.n	8004edc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	491e      	ldr	r1, [pc, #120]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ee8:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	4918      	ldr	r1, [pc, #96]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	608b      	str	r3, [r1, #8]
 8004ef4:	e006      	b.n	8004f04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ef6:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	4914      	ldr	r1, [pc, #80]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d021      	beq.n	8004f54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	490e      	ldr	r1, [pc, #56]	; (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60cb      	str	r3, [r1, #12]
 8004f1c:	e021      	b.n	8004f62 <HAL_GPIO_Init+0x2e2>
 8004f1e:	bf00      	nop
 8004f20:	10320000 	.word	0x10320000
 8004f24:	10310000 	.word	0x10310000
 8004f28:	10220000 	.word	0x10220000
 8004f2c:	10210000 	.word	0x10210000
 8004f30:	10120000 	.word	0x10120000
 8004f34:	10110000 	.word	0x10110000
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40010000 	.word	0x40010000
 8004f40:	40010800 	.word	0x40010800
 8004f44:	40010c00 	.word	0x40010c00
 8004f48:	40011000 	.word	0x40011000
 8004f4c:	40011400 	.word	0x40011400
 8004f50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_GPIO_Init+0x304>)
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	4909      	ldr	r1, [pc, #36]	; (8004f84 <HAL_GPIO_Init+0x304>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	3301      	adds	r3, #1
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f47f ae8e 	bne.w	8004c94 <HAL_GPIO_Init+0x14>
  }
}
 8004f78:	bf00      	nop
 8004f7a:	bf00      	nop
 8004f7c:	372c      	adds	r7, #44	; 0x2c
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	40010400 	.word	0x40010400

08004f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	887b      	ldrh	r3, [r7, #2]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
 8004fa4:	e001      	b.n	8004faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	807b      	strh	r3, [r7, #2]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fc6:	787b      	ldrb	r3, [r7, #1]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fcc:	887a      	ldrh	r2, [r7, #2]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004fd2:	e003      	b.n	8004fdc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fd4:	887b      	ldrh	r3, [r7, #2]
 8004fd6:	041a      	lsls	r2, r3, #16
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	611a      	str	r2, [r3, #16]
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ff2:	4b08      	ldr	r3, [pc, #32]	; (8005014 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ff4:	695a      	ldr	r2, [r3, #20]
 8004ff6:	88fb      	ldrh	r3, [r7, #6]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d006      	beq.n	800500c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ffe:	4a05      	ldr	r2, [pc, #20]	; (8005014 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fc fd7a 	bl	8001b00 <HAL_GPIO_EXTI_Callback>
  }
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40010400 	.word	0x40010400

08005018 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800501a:	b08b      	sub	sp, #44	; 0x2c
 800501c:	af06      	add	r7, sp, #24
 800501e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e0fd      	b.n	8005226 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f007 ff40 	bl	800cec4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2203      	movs	r2, #3
 8005048:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f003 fc10 	bl	8008876 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	687e      	ldr	r6, [r7, #4]
 800505e:	466d      	mov	r5, sp
 8005060:	f106 0410 	add.w	r4, r6, #16
 8005064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	602b      	str	r3, [r5, #0]
 800506c:	1d33      	adds	r3, r6, #4
 800506e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005070:	6838      	ldr	r0, [r7, #0]
 8005072:	f003 fbda 	bl	800882a <USB_CoreInit>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0ce      	b.n	8005226 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2100      	movs	r1, #0
 800508e:	4618      	mov	r0, r3
 8005090:	f003 fc0b 	bl	80088aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
 8005098:	e04c      	b.n	8005134 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	440b      	add	r3, r1
 80050aa:	3301      	adds	r3, #1
 80050ac:	2201      	movs	r2, #1
 80050ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	440b      	add	r3, r1
 80050c0:	7bfa      	ldrb	r2, [r7, #15]
 80050c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050c4:	7bfa      	ldrb	r2, [r7, #15]
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	b298      	uxth	r0, r3
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	440b      	add	r3, r1
 80050d6:	3336      	adds	r3, #54	; 0x36
 80050d8:	4602      	mov	r2, r0
 80050da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	3303      	adds	r3, #3
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	00db      	lsls	r3, r3, #3
 80050fe:	440b      	add	r3, r1
 8005100:	3338      	adds	r3, #56	; 0x38
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	440b      	add	r3, r1
 8005114:	333c      	adds	r3, #60	; 0x3c
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4413      	add	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	440b      	add	r3, r1
 8005128:	3340      	adds	r3, #64	; 0x40
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	3301      	adds	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	7bfa      	ldrb	r2, [r7, #15]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d3ad      	bcc.n	800509a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
 8005142:	e044      	b.n	80051ce <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005144:	7bfa      	ldrb	r2, [r7, #15]
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	4613      	mov	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	440b      	add	r3, r1
 8005152:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005156:	2200      	movs	r2, #0
 8005158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800515a:	7bfa      	ldrb	r2, [r7, #15]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	440b      	add	r3, r1
 8005168:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800516c:	7bfa      	ldrb	r2, [r7, #15]
 800516e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	440b      	add	r3, r1
 800517e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005186:	7bfa      	ldrb	r2, [r7, #15]
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	440b      	add	r3, r1
 8005194:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800519c:	7bfa      	ldrb	r2, [r7, #15]
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	440b      	add	r3, r1
 80051aa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051b2:	7bfa      	ldrb	r2, [r7, #15]
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	440b      	add	r3, r1
 80051c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	3301      	adds	r3, #1
 80051cc:	73fb      	strb	r3, [r7, #15]
 80051ce:	7bfa      	ldrb	r2, [r7, #15]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d3b5      	bcc.n	8005144 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	687e      	ldr	r6, [r7, #4]
 80051e0:	466d      	mov	r5, sp
 80051e2:	f106 0410 	add.w	r4, r6, #16
 80051e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	602b      	str	r3, [r5, #0]
 80051ee:	1d33      	adds	r3, r6, #4
 80051f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051f2:	6838      	ldr	r0, [r7, #0]
 80051f4:	f003 fb65 	bl	80088c2 <USB_DevInit>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e00d      	b.n	8005226 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f006 f818 	bl	800b254 <USB_DevDisconnect>

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800522e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_PCD_Start+0x16>
 8005240:	2302      	movs	r3, #2
 8005242:	e016      	b.n	8005272 <HAL_PCD_Start+0x44>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f003 fafa 	bl	800884a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005256:	2101      	movs	r1, #1
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f008 f8ae 	bl	800d3ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f005 ffec 	bl	800b240 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b088      	sub	sp, #32
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f005 ffee 	bl	800b268 <USB_ReadInterrupts>
 800528c:	4603      	mov	r3, r0
 800528e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005296:	d102      	bne.n	800529e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fb5f 	bl	800595c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f005 ffe0 	bl	800b268 <USB_ReadInterrupts>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b2:	d112      	bne.n	80052da <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052bc:	b29a      	uxth	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c6:	b292      	uxth	r2, r2
 80052c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f007 fe7c 	bl	800cfca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80052d2:	2100      	movs	r1, #0
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f923 	bl	8005520 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f005 ffc2 	bl	800b268 <USB_ReadInterrupts>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ee:	d10b      	bne.n	8005308 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005302:	b292      	uxth	r2, r2
 8005304:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f005 ffab 	bl	800b268 <USB_ReadInterrupts>
 8005312:	4603      	mov	r3, r0
 8005314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800531c:	d10b      	bne.n	8005336 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005330:	b292      	uxth	r2, r2
 8005332:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f005 ff94 	bl	800b268 <USB_ReadInterrupts>
 8005340:	4603      	mov	r3, r0
 8005342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800534a:	d126      	bne.n	800539a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005354:	b29a      	uxth	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0204 	bic.w	r2, r2, #4
 800535e:	b292      	uxth	r2, r2
 8005360:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800536c:	b29a      	uxth	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0208 	bic.w	r2, r2, #8
 8005376:	b292      	uxth	r2, r2
 8005378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f007 fe5d 	bl	800d03c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800538a:	b29a      	uxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005394:	b292      	uxth	r2, r2
 8005396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f005 ff62 	bl	800b268 <USB_ReadInterrupts>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ae:	f040 8082 	bne.w	80054b6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e010      	b.n	80053da <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	7ffb      	ldrb	r3, [r7, #31]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	7ffb      	ldrb	r3, [r7, #31]
 80053c6:	8812      	ldrh	r2, [r2, #0]
 80053c8:	b292      	uxth	r2, r2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	3320      	adds	r3, #32
 80053ce:	443b      	add	r3, r7
 80053d0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80053d4:	7ffb      	ldrb	r3, [r7, #31]
 80053d6:	3301      	adds	r3, #1
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	7ffb      	ldrb	r3, [r7, #31]
 80053dc:	2b07      	cmp	r3, #7
 80053de:	d9eb      	bls.n	80053b8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	b292      	uxth	r2, r2
 80053f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005400:	b29a      	uxth	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	b292      	uxth	r2, r2
 800540c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005410:	bf00      	nop
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800541a:	b29b      	uxth	r3, r3
 800541c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f6      	beq.n	8005412 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005436:	b292      	uxth	r2, r2
 8005438:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800543c:	2300      	movs	r3, #0
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e00f      	b.n	8005462 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005442:	7ffb      	ldrb	r3, [r7, #31]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	4611      	mov	r1, r2
 800544a:	7ffa      	ldrb	r2, [r7, #31]
 800544c:	0092      	lsls	r2, r2, #2
 800544e:	440a      	add	r2, r1
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	3320      	adds	r3, #32
 8005454:	443b      	add	r3, r7
 8005456:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800545a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800545c:	7ffb      	ldrb	r3, [r7, #31]
 800545e:	3301      	adds	r3, #1
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	7ffb      	ldrb	r3, [r7, #31]
 8005464:	2b07      	cmp	r3, #7
 8005466:	d9ec      	bls.n	8005442 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005470:	b29a      	uxth	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0208 	orr.w	r2, r2, #8
 800547a:	b292      	uxth	r2, r2
 800547c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005488:	b29a      	uxth	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005492:	b292      	uxth	r2, r2
 8005494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f042 0204 	orr.w	r2, r2, #4
 80054aa:	b292      	uxth	r2, r2
 80054ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f007 fda9 	bl	800d008 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f005 fed4 	bl	800b268 <USB_ReadInterrupts>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ca:	d10e      	bne.n	80054ea <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054de:	b292      	uxth	r2, r2
 80054e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f007 fd62 	bl	800cfae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f005 feba 	bl	800b268 <USB_ReadInterrupts>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fe:	d10b      	bne.n	8005518 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005508:	b29a      	uxth	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005512:	b292      	uxth	r2, r2
 8005514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005518:	bf00      	nop
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_PCD_SetAddress+0x1a>
 8005536:	2302      	movs	r3, #2
 8005538:	e013      	b.n	8005562 <HAL_PCD_SetAddress+0x42>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	78fa      	ldrb	r2, [r7, #3]
 8005550:	4611      	mov	r1, r2
 8005552:	4618      	mov	r0, r3
 8005554:	f005 fe61 	bl	800b21a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	4608      	mov	r0, r1
 8005574:	4611      	mov	r1, r2
 8005576:	461a      	mov	r2, r3
 8005578:	4603      	mov	r3, r0
 800557a:	70fb      	strb	r3, [r7, #3]
 800557c:	460b      	mov	r3, r1
 800557e:	803b      	strh	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800558c:	2b00      	cmp	r3, #0
 800558e:	da0e      	bge.n	80055ae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	4413      	add	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	705a      	strb	r2, [r3, #1]
 80055ac:	e00e      	b.n	80055cc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	f003 0207 	and.w	r2, r3, #7
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4413      	add	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055d8:	883a      	ldrh	r2, [r7, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	78ba      	ldrb	r2, [r7, #2]
 80055e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055f6:	78bb      	ldrb	r3, [r7, #2]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d102      	bne.n	8005602 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_PCD_EP_Open+0xa6>
 800560c:	2302      	movs	r3, #2
 800560e:	e00e      	b.n	800562e <HAL_PCD_EP_Open+0xc4>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68f9      	ldr	r1, [r7, #12]
 800561e:	4618      	mov	r0, r3
 8005620:	f003 f970 	bl	8008904 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800562c:	7afb      	ldrb	r3, [r7, #11]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	460b      	mov	r3, r1
 8005640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005642:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005646:	2b00      	cmp	r3, #0
 8005648:	da0e      	bge.n	8005668 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	705a      	strb	r2, [r3, #1]
 8005666:	e00e      	b.n	8005686 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	f003 0207 	and.w	r2, r3, #7
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	b2da      	uxtb	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_PCD_EP_Close+0x6a>
 800569c:	2302      	movs	r3, #2
 800569e:	e00e      	b.n	80056be <HAL_PCD_EP_Close+0x88>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68f9      	ldr	r1, [r7, #12]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f003 fc92 	bl	8008fd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	460b      	mov	r3, r1
 80056d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056d6:	7afb      	ldrb	r3, [r7, #11]
 80056d8:	f003 0207 	and.w	r2, r3, #7
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2200      	movs	r2, #0
 8005704:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	b2da      	uxtb	r2, r3
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6979      	ldr	r1, [r7, #20]
 8005722:	4618      	mov	r0, r3
 8005724:	f003 fe44 	bl	80093b0 <USB_EPStartXfer>
 8005728:	e005      	b.n	8005736 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	4618      	mov	r0, r3
 8005732:	f003 fe3d 	bl	80093b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800574c:	78fb      	ldrb	r3, [r7, #3]
 800574e:	f003 0207 	and.w	r2, r3, #7
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	440b      	add	r3, r1
 800575e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005762:	681b      	ldr	r3, [r3, #0]
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b086      	sub	sp, #24
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	460b      	mov	r3, r1
 800577c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800577e:	7afb      	ldrb	r3, [r7, #11]
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2200      	movs	r2, #0
 80057b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2201      	movs	r2, #1
 80057b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ba:	7afb      	ldrb	r3, [r7, #11]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057c6:	7afb      	ldrb	r3, [r7, #11]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f003 fdea 	bl	80093b0 <USB_EPStartXfer>
 80057dc:	e005      	b.n	80057ea <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6979      	ldr	r1, [r7, #20]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f003 fde3 	bl	80093b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005800:	78fb      	ldrb	r3, [r7, #3]
 8005802:	f003 0207 	and.w	r2, r3, #7
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d901      	bls.n	8005812 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e04c      	b.n	80058ac <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005816:	2b00      	cmp	r3, #0
 8005818:	da0e      	bge.n	8005838 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	705a      	strb	r2, [r3, #1]
 8005836:	e00c      	b.n	8005852 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005838:	78fa      	ldrb	r2, [r7, #3]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	4413      	add	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	b2da      	uxtb	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_PCD_EP_SetStall+0x7e>
 800586e:	2302      	movs	r3, #2
 8005870:	e01c      	b.n	80058ac <HAL_PCD_EP_SetStall+0xb8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68f9      	ldr	r1, [r7, #12]
 8005880:	4618      	mov	r0, r3
 8005882:	f005 fbcd 	bl	800b020 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	2b00      	cmp	r3, #0
 800588e:	d108      	bne.n	80058a2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f005 fcf2 	bl	800b286 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	f003 020f 	and.w	r2, r3, #15
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d901      	bls.n	80058d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e040      	b.n	8005954 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	da0e      	bge.n	80058f8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	4613      	mov	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	705a      	strb	r2, [r3, #1]
 80058f6:	e00e      	b.n	8005916 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058f8:	78fb      	ldrb	r3, [r7, #3]
 80058fa:	f003 0207 	and.w	r2, r3, #7
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4413      	add	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	b2da      	uxtb	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_PCD_EP_ClrStall+0x82>
 8005932:	2302      	movs	r3, #2
 8005934:	e00e      	b.n	8005954 <HAL_PCD_EP_ClrStall+0xa0>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68f9      	ldr	r1, [r7, #12]
 8005944:	4618      	mov	r0, r3
 8005946:	f005 fbbb 	bl	800b0c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08e      	sub	sp, #56	; 0x38
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005964:	e2ec      	b.n	8005f40 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800596e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800597c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005980:	2b00      	cmp	r3, #0
 8005982:	f040 8161 	bne.w	8005c48 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005986:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	d152      	bne.n	8005a36 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	b29b      	uxth	r3, r3
 8005998:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800599c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a0:	81fb      	strh	r3, [r7, #14]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	89fb      	ldrh	r3, [r7, #14]
 80059a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3328      	adds	r3, #40	; 0x28
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4413      	add	r3, r2
 80059ce:	3302      	adds	r3, #2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	441a      	add	r2, r3
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80059f4:	2100      	movs	r1, #0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f007 fabf 	bl	800cf7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 829b 	beq.w	8005f40 <PCD_EP_ISR_Handler+0x5e4>
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f040 8296 	bne.w	8005f40 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	b292      	uxth	r2, r2
 8005a28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a34:	e284      	b.n	8005f40 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a3c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d034      	beq.n	8005aba <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	3306      	adds	r3, #6
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6812      	ldr	r2, [r2, #0]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f005 fc49 	bl	800b326 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	823b      	strh	r3, [r7, #16]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	8a3a      	ldrh	r2, [r7, #16]
 8005aaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005aae:	b292      	uxth	r2, r2
 8005ab0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f007 fa34 	bl	800cf20 <HAL_PCD_SetupStageCallback>
 8005ab8:	e242      	b.n	8005f40 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005aba:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f280 823e 	bge.w	8005f40 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	83bb      	strh	r3, [r7, #28]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	8bba      	ldrh	r2, [r7, #28]
 8005ada:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ade:	b292      	uxth	r2, r2
 8005ae0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	3306      	adds	r3, #6
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d019      	beq.n	8005b4a <PCD_EP_ISR_Handler+0x1ee>
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d015      	beq.n	8005b4a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	6959      	ldr	r1, [r3, #20]
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f005 fbf9 	bl	800b326 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	441a      	add	r2, r3
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005b42:	2100      	movs	r1, #0
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f007 f9fd 	bl	800cf44 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	881b      	ldrh	r3, [r3, #0]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f040 81f2 	bne.w	8005f40 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	61bb      	str	r3, [r7, #24]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	4413      	add	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d112      	bne.n	8005baa <PCD_EP_ISR_Handler+0x24e>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	801a      	strh	r2, [r3, #0]
 8005ba8:	e02f      	b.n	8005c0a <PCD_EP_ISR_Handler+0x2ae>
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb0:	d813      	bhi.n	8005bda <PCD_EP_ISR_Handler+0x27e>
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <PCD_EP_ISR_Handler+0x270>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	3301      	adds	r3, #1
 8005bca:	633b      	str	r3, [r7, #48]	; 0x30
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e017      	b.n	8005c0a <PCD_EP_ISR_Handler+0x2ae>
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <PCD_EP_ISR_Handler+0x298>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1a:	827b      	strh	r3, [r7, #18]
 8005c1c:	8a7b      	ldrh	r3, [r7, #18]
 8005c1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c22:	827b      	strh	r3, [r7, #18]
 8005c24:	8a7b      	ldrh	r3, [r7, #18]
 8005c26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c2a:	827b      	strh	r3, [r7, #18]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	8a7b      	ldrh	r3, [r7, #18]
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
 8005c46:	e17b      	b.n	8005f40 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c5a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f280 80ea 	bge.w	8005e38 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	853b      	strh	r3, [r7, #40]	; 0x28
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005c8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c92:	b292      	uxth	r2, r2
 8005c94:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005c96:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	4413      	add	r3, r2
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	7b1b      	ldrb	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d122      	bne.n	8005cfa <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3306      	adds	r3, #6
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cdc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005cde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8087 	beq.w	8005df4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	6959      	ldr	r1, [r3, #20]
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	88da      	ldrh	r2, [r3, #6]
 8005cf2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cf4:	f005 fb17 	bl	800b326 <USB_ReadPMA>
 8005cf8:	e07c      	b.n	8005df4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	78db      	ldrb	r3, [r3, #3]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d108      	bne.n	8005d14 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d04:	461a      	mov	r2, r3
 8005d06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f927 	bl	8005f5c <HAL_PCD_EP_DB_Receive>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005d12:	e06f      	b.n	8005df4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	441a      	add	r2, r3
 8005d3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d021      	beq.n	8005db2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4413      	add	r3, r2
 8005d82:	3302      	adds	r3, #2
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d96:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005d98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d02a      	beq.n	8005df4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	6959      	ldr	r1, [r3, #20]
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	891a      	ldrh	r2, [r3, #8]
 8005daa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005dac:	f005 fabb 	bl	800b326 <USB_ReadPMA>
 8005db0:	e020      	b.n	8005df4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3306      	adds	r3, #6
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dda:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005ddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d008      	beq.n	8005df4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	6959      	ldr	r1, [r3, #20]
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	895a      	ldrh	r2, [r3, #10]
 8005dee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005df0:	f005 fa99 	bl	800b326 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005dfa:	441a      	add	r2, r3
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e06:	441a      	add	r2, r3
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <PCD_EP_ISR_Handler+0x4c2>
 8005e14:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d206      	bcs.n	8005e2c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f007 f88d 	bl	800cf44 <HAL_PCD_DataOutStageCallback>
 8005e2a:	e005      	b.n	8005e38 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e32:	4618      	mov	r0, r3
 8005e34:	f003 fabc 	bl	80093b0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005e38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d07e      	beq.n	8005f40 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8005e42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	4413      	add	r3, r2
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e70:	843b      	strh	r3, [r7, #32]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	441a      	add	r2, r3
 8005e80:	8c3b      	ldrh	r3, [r7, #32]
 8005e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	78db      	ldrb	r3, [r3, #3]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d00c      	beq.n	8005eb0 <PCD_EP_ISR_Handler+0x554>
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	78db      	ldrb	r3, [r3, #3]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d146      	bne.n	8005f34 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005ea6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d141      	bne.n	8005f34 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3302      	adds	r3, #2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ed8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	699a      	ldr	r2, [r3, #24]
 8005ede:	8bfb      	ldrh	r3, [r7, #30]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d906      	bls.n	8005ef2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	8bfb      	ldrh	r3, [r7, #30]
 8005eea:	1ad2      	subs	r2, r2, r3
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	619a      	str	r2, [r3, #24]
 8005ef0:	e002      	b.n	8005ef8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	4619      	mov	r1, r3
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f007 f837 	bl	800cf7a <HAL_PCD_DataInStageCallback>
 8005f0c:	e018      	b.n	8005f40 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	8bfb      	ldrh	r3, [r7, #30]
 8005f14:	441a      	add	r2, r3
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	8bfb      	ldrh	r3, [r7, #30]
 8005f20:	441a      	add	r2, r3
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f003 fa3f 	bl	80093b0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005f32:	e005      	b.n	8005f40 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005f34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f36:	461a      	mov	r2, r3
 8005f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f91b 	bl	8006176 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	b21b      	sxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f6ff ad0a 	blt.w	8005966 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3738      	adds	r7, #56	; 0x38
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b088      	sub	sp, #32
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f6a:	88fb      	ldrh	r3, [r7, #6]
 8005f6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d07e      	beq.n	8006072 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4413      	add	r3, r2
 8005f88:	3302      	adds	r3, #2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	8b7b      	ldrh	r3, [r7, #26]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d306      	bcc.n	8005fb6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	8b7b      	ldrh	r3, [r7, #26]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	619a      	str	r2, [r3, #24]
 8005fb4:	e002      	b.n	8005fbc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d123      	bne.n	800600c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	833b      	strh	r3, [r7, #24]
 8005fe0:	8b3b      	ldrh	r3, [r7, #24]
 8005fe2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fe6:	833b      	strh	r3, [r7, #24]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	441a      	add	r2, r3
 8005ff6:	8b3b      	ldrh	r3, [r7, #24]
 8005ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006008:	b29b      	uxth	r3, r3
 800600a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800600c:	88fb      	ldrh	r3, [r7, #6]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01f      	beq.n	8006056 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006030:	82fb      	strh	r3, [r7, #22]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	441a      	add	r2, r3
 8006040:	8afb      	ldrh	r3, [r7, #22]
 8006042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006052:	b29b      	uxth	r3, r3
 8006054:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006056:	8b7b      	ldrh	r3, [r7, #26]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8087 	beq.w	800616c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6818      	ldr	r0, [r3, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6959      	ldr	r1, [r3, #20]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	891a      	ldrh	r2, [r3, #8]
 800606a:	8b7b      	ldrh	r3, [r7, #26]
 800606c:	f005 f95b 	bl	800b326 <USB_ReadPMA>
 8006070:	e07c      	b.n	800616c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800607a:	b29b      	uxth	r3, r3
 800607c:	461a      	mov	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	4413      	add	r3, r2
 8006086:	3306      	adds	r3, #6
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800609a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	699a      	ldr	r2, [r3, #24]
 80060a0:	8b7b      	ldrh	r3, [r7, #26]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d306      	bcc.n	80060b4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	8b7b      	ldrh	r3, [r7, #26]
 80060ac:	1ad2      	subs	r2, r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	619a      	str	r2, [r3, #24]
 80060b2:	e002      	b.n	80060ba <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2200      	movs	r2, #0
 80060b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d123      	bne.n	800610a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060dc:	83fb      	strh	r3, [r7, #30]
 80060de:	8bfb      	ldrh	r3, [r7, #30]
 80060e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80060e4:	83fb      	strh	r3, [r7, #30]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	461a      	mov	r2, r3
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	441a      	add	r2, r3
 80060f4:	8bfb      	ldrh	r3, [r7, #30]
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d11f      	bne.n	8006154 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	83bb      	strh	r3, [r7, #28]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	8bbb      	ldrh	r3, [r7, #28]
 8006140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006150:	b29b      	uxth	r3, r3
 8006152:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006154:	8b7b      	ldrh	r3, [r7, #26]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6959      	ldr	r1, [r3, #20]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	895a      	ldrh	r2, [r3, #10]
 8006166:	8b7b      	ldrh	r3, [r7, #26]
 8006168:	f005 f8dd 	bl	800b326 <USB_ReadPMA>
    }
  }

  return count;
 800616c:	8b7b      	ldrh	r3, [r7, #26]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b0a2      	sub	sp, #136	; 0x88
 800617a:	af00      	add	r7, sp, #0
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	4613      	mov	r3, r2
 8006182:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 81c7 	beq.w	800651e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006198:	b29b      	uxth	r3, r3
 800619a:	461a      	mov	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4413      	add	r3, r2
 80061a4:	3302      	adds	r3, #2
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	6812      	ldr	r2, [r2, #0]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	699a      	ldr	r2, [r3, #24]
 80061c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d907      	bls.n	80061d8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	699a      	ldr	r2, [r3, #24]
 80061cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061d0:	1ad2      	subs	r2, r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	619a      	str	r2, [r3, #24]
 80061d6:	e002      	b.n	80061de <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2200      	movs	r2, #0
 80061dc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f040 80b9 	bne.w	800635a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d126      	bne.n	800623e <HAL_PCD_EP_DB_Transmit+0xc8>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	4413      	add	r3, r2
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	011a      	lsls	r2, r3, #4
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	4413      	add	r3, r2
 8006212:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006222:	b29a      	uxth	r2, r3
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	801a      	strh	r2, [r3, #0]
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006236:	b29a      	uxth	r2, r3
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	e01a      	b.n	8006274 <HAL_PCD_EP_DB_Transmit+0xfe>
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d116      	bne.n	8006274 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006254:	b29b      	uxth	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	4413      	add	r3, r2
 800625c:	633b      	str	r3, [r7, #48]	; 0x30
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	011a      	lsls	r2, r3, #4
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	4413      	add	r3, r2
 8006268:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	2200      	movs	r2, #0
 8006272:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	623b      	str	r3, [r7, #32]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d126      	bne.n	80062d0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006290:	b29b      	uxth	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	4413      	add	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	011a      	lsls	r2, r3, #4
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	4413      	add	r3, r2
 80062a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	801a      	strh	r2, [r3, #0]
 80062ce:	e017      	b.n	8006300 <HAL_PCD_EP_DB_Transmit+0x18a>
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	785b      	ldrb	r3, [r3, #1]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d113      	bne.n	8006300 <HAL_PCD_EP_DB_Transmit+0x18a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	4413      	add	r3, r2
 80062e8:	623b      	str	r3, [r7, #32]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	011a      	lsls	r2, r3, #4
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	4413      	add	r3, r2
 80062f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062f8:	61fb      	str	r3, [r7, #28]
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2200      	movs	r2, #0
 80062fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	4619      	mov	r1, r3
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f006 fe37 	bl	800cf7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 82d4 	beq.w	80068c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006332:	827b      	strh	r3, [r7, #18]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	441a      	add	r2, r3
 8006342:	8a7b      	ldrh	r3, [r7, #18]
 8006344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800634c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006354:	b29b      	uxth	r3, r3
 8006356:	8013      	strh	r3, [r2, #0]
 8006358:	e2b2      	b.n	80068c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d021      	beq.n	80063a8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	461a      	mov	r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	441a      	add	r2, r3
 8006390:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	f040 8286 	bne.w	80068c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	695a      	ldr	r2, [r3, #20]
 80063b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063bc:	441a      	add	r2, r3
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063ca:	441a      	add	r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d309      	bcc.n	80063f0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	6a1a      	ldr	r2, [r3, #32]
 80063e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	621a      	str	r2, [r3, #32]
 80063ee:	e015      	b.n	800641c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d107      	bne.n	8006408 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80063f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80063fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006406:	e009      	b.n	800641c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2200      	movs	r2, #0
 800641a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d155      	bne.n	80064d0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	63bb      	str	r3, [r7, #56]	; 0x38
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006432:	b29b      	uxth	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	4413      	add	r3, r2
 800643a:	63bb      	str	r3, [r7, #56]	; 0x38
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	011a      	lsls	r2, r3, #4
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	4413      	add	r3, r2
 8006446:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800644a:	637b      	str	r3, [r7, #52]	; 0x34
 800644c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800644e:	2b00      	cmp	r3, #0
 8006450:	d112      	bne.n	8006478 <HAL_PCD_EP_DB_Transmit+0x302>
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800645c:	b29a      	uxth	r2, r3
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	801a      	strh	r2, [r3, #0]
 8006462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006470:	b29a      	uxth	r2, r3
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e047      	b.n	8006508 <HAL_PCD_EP_DB_Transmit+0x392>
 8006478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800647a:	2b3e      	cmp	r3, #62	; 0x3e
 800647c:	d811      	bhi.n	80064a2 <HAL_PCD_EP_DB_Transmit+0x32c>
 800647e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006480:	085b      	lsrs	r3, r3, #1
 8006482:	64bb      	str	r3, [r7, #72]	; 0x48
 8006484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_PCD_EP_DB_Transmit+0x31e>
 800648e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006490:	3301      	adds	r3, #1
 8006492:	64bb      	str	r3, [r7, #72]	; 0x48
 8006494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006496:	b29b      	uxth	r3, r3
 8006498:	029b      	lsls	r3, r3, #10
 800649a:	b29a      	uxth	r2, r3
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	e032      	b.n	8006508 <HAL_PCD_EP_DB_Transmit+0x392>
 80064a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d102      	bne.n	80064b8 <HAL_PCD_EP_DB_Transmit+0x342>
 80064b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b4:	3b01      	subs	r3, #1
 80064b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	029b      	lsls	r3, r3, #10
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064cc:	801a      	strh	r2, [r3, #0]
 80064ce:	e01b      	b.n	8006508 <HAL_PCD_EP_DB_Transmit+0x392>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d117      	bne.n	8006508 <HAL_PCD_EP_DB_Transmit+0x392>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	643b      	str	r3, [r7, #64]	; 0x40
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ec:	4413      	add	r3, r2
 80064ee:	643b      	str	r3, [r7, #64]	; 0x40
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	011a      	lsls	r2, r3, #4
 80064f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064f8:	4413      	add	r3, r2
 80064fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006502:	b29a      	uxth	r2, r3
 8006504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006506:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6959      	ldr	r1, [r3, #20]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	891a      	ldrh	r2, [r3, #8]
 8006514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006516:	b29b      	uxth	r3, r3
 8006518:	f004 fec0 	bl	800b29c <USB_WritePMA>
 800651c:	e1d0      	b.n	80068c0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006526:	b29b      	uxth	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	4413      	add	r3, r2
 8006532:	3306      	adds	r3, #6
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006546:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006552:	429a      	cmp	r2, r3
 8006554:	d307      	bcc.n	8006566 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	619a      	str	r2, [r3, #24]
 8006564:	e002      	b.n	800656c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2200      	movs	r2, #0
 800656a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f040 80c4 	bne.w	80066fe <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	785b      	ldrb	r3, [r3, #1]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d126      	bne.n	80065cc <HAL_PCD_EP_DB_Transmit+0x456>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800658c:	b29b      	uxth	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006592:	4413      	add	r3, r2
 8006594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	011a      	lsls	r2, r3, #4
 800659c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659e:	4413      	add	r3, r2
 80065a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80065a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065b4:	801a      	strh	r2, [r3, #0]
 80065b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e01a      	b.n	8006602 <HAL_PCD_EP_DB_Transmit+0x48c>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d116      	bne.n	8006602 <HAL_PCD_EP_DB_Transmit+0x48c>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	677b      	str	r3, [r7, #116]	; 0x74
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065e8:	4413      	add	r3, r2
 80065ea:	677b      	str	r3, [r7, #116]	; 0x74
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	011a      	lsls	r2, r3, #4
 80065f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065f4:	4413      	add	r3, r2
 80065f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065fa:	673b      	str	r3, [r7, #112]	; 0x70
 80065fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065fe:	2200      	movs	r2, #0
 8006600:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	67bb      	str	r3, [r7, #120]	; 0x78
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d12f      	bne.n	8006670 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006620:	b29b      	uxth	r3, r3
 8006622:	461a      	mov	r2, r3
 8006624:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006628:	4413      	add	r3, r2
 800662a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	011a      	lsls	r2, r3, #4
 8006634:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006638:	4413      	add	r3, r2
 800663a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800663e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800664e:	b29a      	uxth	r2, r3
 8006650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006666:	b29a      	uxth	r2, r3
 8006668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800666c:	801a      	strh	r2, [r3, #0]
 800666e:	e017      	b.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d113      	bne.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006680:	b29b      	uxth	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006686:	4413      	add	r3, r2
 8006688:	67bb      	str	r3, [r7, #120]	; 0x78
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	011a      	lsls	r2, r3, #4
 8006690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006692:	4413      	add	r3, r2
 8006694:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006698:	67fb      	str	r3, [r7, #124]	; 0x7c
 800669a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800669c:	2200      	movs	r2, #0
 800669e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	4619      	mov	r1, r3
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f006 fc67 	bl	800cf7a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f040 8104 	bne.w	80068c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	441a      	add	r2, r3
 80066e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80066e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	8013      	strh	r3, [r2, #0]
 80066fc:	e0e0      	b.n	80068c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80066fe:	88fb      	ldrh	r3, [r7, #6]
 8006700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d121      	bne.n	800674c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	461a      	mov	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006722:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006748:	b29b      	uxth	r3, r3
 800674a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006752:	2b01      	cmp	r3, #1
 8006754:	f040 80b4 	bne.w	80068c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	695a      	ldr	r2, [r3, #20]
 800675c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006760:	441a      	add	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800676e:	441a      	add	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	6a1a      	ldr	r2, [r3, #32]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	429a      	cmp	r2, r3
 800677e:	d309      	bcc.n	8006794 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6a1a      	ldr	r2, [r3, #32]
 800678a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678c:	1ad2      	subs	r2, r2, r3
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	621a      	str	r2, [r3, #32]
 8006792:	e015      	b.n	80067c0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d107      	bne.n	80067ac <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800679c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80067a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80067aa:	e009      	b.n	80067c0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	667b      	str	r3, [r7, #100]	; 0x64
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	785b      	ldrb	r3, [r3, #1]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d155      	bne.n	800687a <HAL_PCD_EP_DB_Transmit+0x704>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067dc:	b29b      	uxth	r3, r3
 80067de:	461a      	mov	r2, r3
 80067e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e2:	4413      	add	r3, r2
 80067e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	011a      	lsls	r2, r3, #4
 80067ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ee:	4413      	add	r3, r2
 80067f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d112      	bne.n	8006822 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80067fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006806:	b29a      	uxth	r2, r3
 8006808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800681a:	b29a      	uxth	r2, r3
 800681c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e044      	b.n	80068ac <HAL_PCD_EP_DB_Transmit+0x736>
 8006822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006824:	2b3e      	cmp	r3, #62	; 0x3e
 8006826:	d811      	bhi.n	800684c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	657b      	str	r3, [r7, #84]	; 0x54
 800682e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683a:	3301      	adds	r3, #1
 800683c:	657b      	str	r3, [r7, #84]	; 0x54
 800683e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006840:	b29b      	uxth	r3, r3
 8006842:	029b      	lsls	r3, r3, #10
 8006844:	b29a      	uxth	r2, r3
 8006846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006848:	801a      	strh	r2, [r3, #0]
 800684a:	e02f      	b.n	80068ac <HAL_PCD_EP_DB_Transmit+0x736>
 800684c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	657b      	str	r3, [r7, #84]	; 0x54
 8006852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800685c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800685e:	3b01      	subs	r3, #1
 8006860:	657b      	str	r3, [r7, #84]	; 0x54
 8006862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006864:	b29b      	uxth	r3, r3
 8006866:	029b      	lsls	r3, r3, #10
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006872:	b29a      	uxth	r2, r3
 8006874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e018      	b.n	80068ac <HAL_PCD_EP_DB_Transmit+0x736>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d114      	bne.n	80068ac <HAL_PCD_EP_DB_Transmit+0x736>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688a:	b29b      	uxth	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006890:	4413      	add	r3, r2
 8006892:	667b      	str	r3, [r7, #100]	; 0x64
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	011a      	lsls	r2, r3, #4
 800689a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800689c:	4413      	add	r3, r2
 800689e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068a2:	663b      	str	r3, [r7, #96]	; 0x60
 80068a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068aa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6959      	ldr	r1, [r3, #20]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	895a      	ldrh	r2, [r3, #10]
 80068b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f004 fcee 	bl	800b29c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068da:	823b      	strh	r3, [r7, #16]
 80068dc:	8a3b      	ldrh	r3, [r7, #16]
 80068de:	f083 0310 	eor.w	r3, r3, #16
 80068e2:	823b      	strh	r3, [r7, #16]
 80068e4:	8a3b      	ldrh	r3, [r7, #16]
 80068e6:	f083 0320 	eor.w	r3, r3, #32
 80068ea:	823b      	strh	r3, [r7, #16]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	441a      	add	r2, r3
 80068fa:	8a3b      	ldrh	r3, [r7, #16]
 80068fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800690c:	b29b      	uxth	r3, r3
 800690e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3788      	adds	r7, #136	; 0x88
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800691a:	b480      	push	{r7}
 800691c:	b087      	sub	sp, #28
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	817b      	strh	r3, [r7, #10]
 8006928:	4613      	mov	r3, r2
 800692a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800692c:	897b      	ldrh	r3, [r7, #10]
 800692e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006938:	897b      	ldrh	r3, [r7, #10]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	e009      	b.n	8006964 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006950:	897a      	ldrh	r2, [r7, #10]
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006964:	893b      	ldrh	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d107      	bne.n	800697a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2200      	movs	r2, #0
 800696e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	b29a      	uxth	r2, r3
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	80da      	strh	r2, [r3, #6]
 8006978:	e00b      	b.n	8006992 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2201      	movs	r2, #1
 800697e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	b29a      	uxth	r2, r3
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	0c1b      	lsrs	r3, r3, #16
 800698c:	b29a      	uxth	r2, r3
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr
	...

080069a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e272      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8087 	beq.w	8006ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069c0:	4b92      	ldr	r3, [pc, #584]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f003 030c 	and.w	r3, r3, #12
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d00c      	beq.n	80069e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80069cc:	4b8f      	ldr	r3, [pc, #572]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f003 030c 	and.w	r3, r3, #12
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d112      	bne.n	80069fe <HAL_RCC_OscConfig+0x5e>
 80069d8:	4b8c      	ldr	r3, [pc, #560]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e4:	d10b      	bne.n	80069fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e6:	4b89      	ldr	r3, [pc, #548]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d06c      	beq.n	8006acc <HAL_RCC_OscConfig+0x12c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d168      	bne.n	8006acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e24c      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a06:	d106      	bne.n	8006a16 <HAL_RCC_OscConfig+0x76>
 8006a08:	4b80      	ldr	r3, [pc, #512]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a7f      	ldr	r2, [pc, #508]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	e02e      	b.n	8006a74 <HAL_RCC_OscConfig+0xd4>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCC_OscConfig+0x98>
 8006a1e:	4b7b      	ldr	r3, [pc, #492]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a7a      	ldr	r2, [pc, #488]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	4b78      	ldr	r3, [pc, #480]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a77      	ldr	r2, [pc, #476]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	e01d      	b.n	8006a74 <HAL_RCC_OscConfig+0xd4>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a40:	d10c      	bne.n	8006a5c <HAL_RCC_OscConfig+0xbc>
 8006a42:	4b72      	ldr	r3, [pc, #456]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a71      	ldr	r2, [pc, #452]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	4b6f      	ldr	r3, [pc, #444]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a6e      	ldr	r2, [pc, #440]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	e00b      	b.n	8006a74 <HAL_RCC_OscConfig+0xd4>
 8006a5c:	4b6b      	ldr	r3, [pc, #428]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a6a      	ldr	r2, [pc, #424]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	4b68      	ldr	r3, [pc, #416]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a67      	ldr	r2, [pc, #412]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d013      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7c:	f7fd ff4c 	bl	8004918 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a84:	f7fd ff48 	bl	8004918 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b64      	cmp	r3, #100	; 0x64
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e200      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a96:	4b5d      	ldr	r3, [pc, #372]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCC_OscConfig+0xe4>
 8006aa2:	e014      	b.n	8006ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa4:	f7fd ff38 	bl	8004918 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aac:	f7fd ff34 	bl	8004918 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b64      	cmp	r3, #100	; 0x64
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e1ec      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006abe:	4b53      	ldr	r3, [pc, #332]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f0      	bne.n	8006aac <HAL_RCC_OscConfig+0x10c>
 8006aca:	e000      	b.n	8006ace <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d063      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ada:	4b4c      	ldr	r3, [pc, #304]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f003 030c 	and.w	r3, r3, #12
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00b      	beq.n	8006afe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006ae6:	4b49      	ldr	r3, [pc, #292]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f003 030c 	and.w	r3, r3, #12
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d11c      	bne.n	8006b2c <HAL_RCC_OscConfig+0x18c>
 8006af2:	4b46      	ldr	r3, [pc, #280]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d116      	bne.n	8006b2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006afe:	4b43      	ldr	r3, [pc, #268]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <HAL_RCC_OscConfig+0x176>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d001      	beq.n	8006b16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e1c0      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b16:	4b3d      	ldr	r3, [pc, #244]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	4939      	ldr	r1, [pc, #228]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b2a:	e03a      	b.n	8006ba2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d020      	beq.n	8006b76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b34:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <HAL_RCC_OscConfig+0x270>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3a:	f7fd feed 	bl	8004918 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b42:	f7fd fee9 	bl	8004918 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e1a1      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b54:	4b2d      	ldr	r3, [pc, #180]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b60:	4b2a      	ldr	r3, [pc, #168]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4927      	ldr	r1, [pc, #156]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	600b      	str	r3, [r1, #0]
 8006b74:	e015      	b.n	8006ba2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b76:	4b26      	ldr	r3, [pc, #152]	; (8006c10 <HAL_RCC_OscConfig+0x270>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b7c:	f7fd fecc 	bl	8004918 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b84:	f7fd fec8 	bl	8004918 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e180      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b96:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f0      	bne.n	8006b84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d03a      	beq.n	8006c24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d019      	beq.n	8006bea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bb6:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <HAL_RCC_OscConfig+0x274>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bbc:	f7fd feac 	bl	8004918 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bc4:	f7fd fea8 	bl	8004918 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e160      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0f0      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006be2:	2001      	movs	r0, #1
 8006be4:	f000 faa6 	bl	8007134 <RCC_Delay>
 8006be8:	e01c      	b.n	8006c24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bea:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <HAL_RCC_OscConfig+0x274>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bf0:	f7fd fe92 	bl	8004918 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf6:	e00f      	b.n	8006c18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bf8:	f7fd fe8e 	bl	8004918 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d908      	bls.n	8006c18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e146      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
 8006c0a:	bf00      	nop
 8006c0c:	40021000 	.word	0x40021000
 8006c10:	42420000 	.word	0x42420000
 8006c14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c18:	4b92      	ldr	r3, [pc, #584]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e9      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80a6 	beq.w	8006d7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c36:	4b8b      	ldr	r3, [pc, #556]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10d      	bne.n	8006c5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c42:	4b88      	ldr	r3, [pc, #544]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	4a87      	ldr	r2, [pc, #540]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c4c:	61d3      	str	r3, [r2, #28]
 8006c4e:	4b85      	ldr	r3, [pc, #532]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c5e:	4b82      	ldr	r3, [pc, #520]	; (8006e68 <HAL_RCC_OscConfig+0x4c8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d118      	bne.n	8006c9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c6a:	4b7f      	ldr	r3, [pc, #508]	; (8006e68 <HAL_RCC_OscConfig+0x4c8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a7e      	ldr	r2, [pc, #504]	; (8006e68 <HAL_RCC_OscConfig+0x4c8>)
 8006c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c76:	f7fd fe4f 	bl	8004918 <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c7e:	f7fd fe4b 	bl	8004918 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b64      	cmp	r3, #100	; 0x64
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e103      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c90:	4b75      	ldr	r3, [pc, #468]	; (8006e68 <HAL_RCC_OscConfig+0x4c8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d106      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x312>
 8006ca4:	4b6f      	ldr	r3, [pc, #444]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	4a6e      	ldr	r2, [pc, #440]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	6213      	str	r3, [r2, #32]
 8006cb0:	e02d      	b.n	8006d0e <HAL_RCC_OscConfig+0x36e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10c      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x334>
 8006cba:	4b6a      	ldr	r3, [pc, #424]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	4a69      	ldr	r2, [pc, #420]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
 8006cc4:	6213      	str	r3, [r2, #32]
 8006cc6:	4b67      	ldr	r3, [pc, #412]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	4a66      	ldr	r2, [pc, #408]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006ccc:	f023 0304 	bic.w	r3, r3, #4
 8006cd0:	6213      	str	r3, [r2, #32]
 8006cd2:	e01c      	b.n	8006d0e <HAL_RCC_OscConfig+0x36e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2b05      	cmp	r3, #5
 8006cda:	d10c      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x356>
 8006cdc:	4b61      	ldr	r3, [pc, #388]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	4a60      	ldr	r2, [pc, #384]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006ce2:	f043 0304 	orr.w	r3, r3, #4
 8006ce6:	6213      	str	r3, [r2, #32]
 8006ce8:	4b5e      	ldr	r3, [pc, #376]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	4a5d      	ldr	r2, [pc, #372]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	6213      	str	r3, [r2, #32]
 8006cf4:	e00b      	b.n	8006d0e <HAL_RCC_OscConfig+0x36e>
 8006cf6:	4b5b      	ldr	r3, [pc, #364]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	4a5a      	ldr	r2, [pc, #360]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cfc:	f023 0301 	bic.w	r3, r3, #1
 8006d00:	6213      	str	r3, [r2, #32]
 8006d02:	4b58      	ldr	r3, [pc, #352]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	4a57      	ldr	r2, [pc, #348]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d08:	f023 0304 	bic.w	r3, r3, #4
 8006d0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d015      	beq.n	8006d42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d16:	f7fd fdff 	bl	8004918 <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d1c:	e00a      	b.n	8006d34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1e:	f7fd fdfb 	bl	8004918 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e0b1      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d34:	4b4b      	ldr	r3, [pc, #300]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ee      	beq.n	8006d1e <HAL_RCC_OscConfig+0x37e>
 8006d40:	e014      	b.n	8006d6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d42:	f7fd fde9 	bl	8004918 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d48:	e00a      	b.n	8006d60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4a:	f7fd fde5 	bl	8004918 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e09b      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d60:	4b40      	ldr	r3, [pc, #256]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1ee      	bne.n	8006d4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d105      	bne.n	8006d7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d72:	4b3c      	ldr	r3, [pc, #240]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	4a3b      	ldr	r2, [pc, #236]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8087 	beq.w	8006e96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d88:	4b36      	ldr	r3, [pc, #216]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f003 030c 	and.w	r3, r3, #12
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d061      	beq.n	8006e58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d146      	bne.n	8006e2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d9c:	4b33      	ldr	r3, [pc, #204]	; (8006e6c <HAL_RCC_OscConfig+0x4cc>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da2:	f7fd fdb9 	bl	8004918 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006da8:	e008      	b.n	8006dbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006daa:	f7fd fdb5 	bl	8004918 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e06d      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dbc:	4b29      	ldr	r3, [pc, #164]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f0      	bne.n	8006daa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd0:	d108      	bne.n	8006de4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006dd2:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	4921      	ldr	r1, [pc, #132]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006de4:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a19      	ldr	r1, [r3, #32]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	430b      	orrs	r3, r1
 8006df6:	491b      	ldr	r1, [pc, #108]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dfc:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <HAL_RCC_OscConfig+0x4cc>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e02:	f7fd fd89 	bl	8004918 <HAL_GetTick>
 8006e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e08:	e008      	b.n	8006e1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e0a:	f7fd fd85 	bl	8004918 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e03d      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e1c:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0f0      	beq.n	8006e0a <HAL_RCC_OscConfig+0x46a>
 8006e28:	e035      	b.n	8006e96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e2a:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <HAL_RCC_OscConfig+0x4cc>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e30:	f7fd fd72 	bl	8004918 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e38:	f7fd fd6e 	bl	8004918 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e026      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e4a:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f0      	bne.n	8006e38 <HAL_RCC_OscConfig+0x498>
 8006e56:	e01e      	b.n	8006e96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d107      	bne.n	8006e70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e019      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
 8006e64:	40021000 	.word	0x40021000
 8006e68:	40007000 	.word	0x40007000
 8006e6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <HAL_RCC_OscConfig+0x500>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d106      	bne.n	8006e92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40021000 	.word	0x40021000

08006ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0d0      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006eb8:	4b6a      	ldr	r3, [pc, #424]	; (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0307 	and.w	r3, r3, #7
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d910      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec6:	4b67      	ldr	r3, [pc, #412]	; (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f023 0207 	bic.w	r2, r3, #7
 8006ece:	4965      	ldr	r1, [pc, #404]	; (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed6:	4b63      	ldr	r3, [pc, #396]	; (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d001      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e0b8      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d020      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f00:	4b59      	ldr	r3, [pc, #356]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	4a58      	ldr	r2, [pc, #352]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f18:	4b53      	ldr	r3, [pc, #332]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	4a52      	ldr	r2, [pc, #328]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f24:	4b50      	ldr	r3, [pc, #320]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	494d      	ldr	r1, [pc, #308]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d040      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d107      	bne.n	8006f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4a:	4b47      	ldr	r3, [pc, #284]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d115      	bne.n	8006f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e07f      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d107      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f62:	4b41      	ldr	r3, [pc, #260]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d109      	bne.n	8006f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e073      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f72:	4b3d      	ldr	r3, [pc, #244]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e06b      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f82:	4b39      	ldr	r3, [pc, #228]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f023 0203 	bic.w	r2, r3, #3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4936      	ldr	r1, [pc, #216]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f94:	f7fd fcc0 	bl	8004918 <HAL_GetTick>
 8006f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f9a:	e00a      	b.n	8006fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f9c:	f7fd fcbc 	bl	8004918 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e053      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fb2:	4b2d      	ldr	r3, [pc, #180]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f003 020c 	and.w	r2, r3, #12
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d1eb      	bne.n	8006f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fc4:	4b27      	ldr	r3, [pc, #156]	; (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d210      	bcs.n	8006ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd2:	4b24      	ldr	r3, [pc, #144]	; (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f023 0207 	bic.w	r2, r3, #7
 8006fda:	4922      	ldr	r1, [pc, #136]	; (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe2:	4b20      	ldr	r3, [pc, #128]	; (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d001      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e032      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d008      	beq.n	8007012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007000:	4b19      	ldr	r3, [pc, #100]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4916      	ldr	r1, [pc, #88]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 800700e:	4313      	orrs	r3, r2
 8007010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800701e:	4b12      	ldr	r3, [pc, #72]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	490e      	ldr	r1, [pc, #56]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 800702e:	4313      	orrs	r3, r2
 8007030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007032:	f000 f821 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 8007036:	4602      	mov	r2, r0
 8007038:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	490a      	ldr	r1, [pc, #40]	; (800706c <HAL_RCC_ClockConfig+0x1c8>)
 8007044:	5ccb      	ldrb	r3, [r1, r3]
 8007046:	fa22 f303 	lsr.w	r3, r2, r3
 800704a:	4a09      	ldr	r2, [pc, #36]	; (8007070 <HAL_RCC_ClockConfig+0x1cc>)
 800704c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800704e:	4b09      	ldr	r3, [pc, #36]	; (8007074 <HAL_RCC_ClockConfig+0x1d0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f7fd fc1e 	bl	8004894 <HAL_InitTick>

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40022000 	.word	0x40022000
 8007068:	40021000 	.word	0x40021000
 800706c:	0800df04 	.word	0x0800df04
 8007070:	20000008 	.word	0x20000008
 8007074:	2000000c 	.word	0x2000000c

08007078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007078:	b490      	push	{r4, r7}
 800707a:	b08a      	sub	sp, #40	; 0x28
 800707c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800707e:	4b29      	ldr	r3, [pc, #164]	; (8007124 <HAL_RCC_GetSysClockFreq+0xac>)
 8007080:	1d3c      	adds	r4, r7, #4
 8007082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007088:	f240 2301 	movw	r3, #513	; 0x201
 800708c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	2300      	movs	r3, #0
 8007094:	61bb      	str	r3, [r7, #24]
 8007096:	2300      	movs	r3, #0
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
 800709a:	2300      	movs	r3, #0
 800709c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80070a2:	4b21      	ldr	r3, [pc, #132]	; (8007128 <HAL_RCC_GetSysClockFreq+0xb0>)
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f003 030c 	and.w	r3, r3, #12
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d002      	beq.n	80070b8 <HAL_RCC_GetSysClockFreq+0x40>
 80070b2:	2b08      	cmp	r3, #8
 80070b4:	d003      	beq.n	80070be <HAL_RCC_GetSysClockFreq+0x46>
 80070b6:	e02b      	b.n	8007110 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070b8:	4b1c      	ldr	r3, [pc, #112]	; (800712c <HAL_RCC_GetSysClockFreq+0xb4>)
 80070ba:	623b      	str	r3, [r7, #32]
      break;
 80070bc:	e02b      	b.n	8007116 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	0c9b      	lsrs	r3, r3, #18
 80070c2:	f003 030f 	and.w	r3, r3, #15
 80070c6:	3328      	adds	r3, #40	; 0x28
 80070c8:	443b      	add	r3, r7
 80070ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80070ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d012      	beq.n	8007100 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <HAL_RCC_GetSysClockFreq+0xb0>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	0c5b      	lsrs	r3, r3, #17
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	3328      	adds	r3, #40	; 0x28
 80070e6:	443b      	add	r3, r7
 80070e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80070ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	4a0e      	ldr	r2, [pc, #56]	; (800712c <HAL_RCC_GetSysClockFreq+0xb4>)
 80070f2:	fb03 f202 	mul.w	r2, r3, r2
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
 80070fe:	e004      	b.n	800710a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4a0b      	ldr	r2, [pc, #44]	; (8007130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007104:	fb02 f303 	mul.w	r3, r2, r3
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	623b      	str	r3, [r7, #32]
      break;
 800710e:	e002      	b.n	8007116 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007110:	4b06      	ldr	r3, [pc, #24]	; (800712c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007112:	623b      	str	r3, [r7, #32]
      break;
 8007114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007116:	6a3b      	ldr	r3, [r7, #32]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3728      	adds	r7, #40	; 0x28
 800711c:	46bd      	mov	sp, r7
 800711e:	bc90      	pop	{r4, r7}
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	0800debc 	.word	0x0800debc
 8007128:	40021000 	.word	0x40021000
 800712c:	007a1200 	.word	0x007a1200
 8007130:	003d0900 	.word	0x003d0900

08007134 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800713c:	4b0a      	ldr	r3, [pc, #40]	; (8007168 <RCC_Delay+0x34>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a0a      	ldr	r2, [pc, #40]	; (800716c <RCC_Delay+0x38>)
 8007142:	fba2 2303 	umull	r2, r3, r2, r3
 8007146:	0a5b      	lsrs	r3, r3, #9
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	fb02 f303 	mul.w	r3, r2, r3
 800714e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007150:	bf00      	nop
  }
  while (Delay --);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	1e5a      	subs	r2, r3, #1
 8007156:	60fa      	str	r2, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1f9      	bne.n	8007150 <RCC_Delay+0x1c>
}
 800715c:	bf00      	nop
 800715e:	bf00      	nop
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr
 8007168:	20000008 	.word	0x20000008
 800716c:	10624dd3 	.word	0x10624dd3

08007170 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	d07d      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800718c:	2300      	movs	r3, #0
 800718e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007190:	4b4f      	ldr	r3, [pc, #316]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10d      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800719c:	4b4c      	ldr	r3, [pc, #304]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	4a4b      	ldr	r2, [pc, #300]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a6:	61d3      	str	r3, [r2, #28]
 80071a8:	4b49      	ldr	r3, [pc, #292]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071b4:	2301      	movs	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071b8:	4b46      	ldr	r3, [pc, #280]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d118      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071c4:	4b43      	ldr	r3, [pc, #268]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a42      	ldr	r2, [pc, #264]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071d0:	f7fd fba2 	bl	8004918 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d6:	e008      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071d8:	f7fd fb9e 	bl	8004918 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b64      	cmp	r3, #100	; 0x64
 80071e4:	d901      	bls.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e06d      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ea:	4b3a      	ldr	r3, [pc, #232]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0f0      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071f6:	4b36      	ldr	r3, [pc, #216]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d02e      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	429a      	cmp	r2, r3
 8007212:	d027      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007214:	4b2e      	ldr	r3, [pc, #184]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800721c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800721e:	4b2e      	ldr	r3, [pc, #184]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007220:	2201      	movs	r2, #1
 8007222:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007224:	4b2c      	ldr	r3, [pc, #176]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007226:	2200      	movs	r2, #0
 8007228:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800722a:	4a29      	ldr	r2, [pc, #164]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d014      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800723a:	f7fd fb6d 	bl	8004918 <HAL_GetTick>
 800723e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007240:	e00a      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007242:	f7fd fb69 	bl	8004918 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007250:	4293      	cmp	r3, r2
 8007252:	d901      	bls.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e036      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007258:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ee      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007264:	4b1a      	ldr	r3, [pc, #104]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	4917      	ldr	r1, [pc, #92]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007272:	4313      	orrs	r3, r2
 8007274:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d105      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800727c:	4b14      	ldr	r3, [pc, #80]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	4a13      	ldr	r2, [pc, #76]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007286:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007294:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	490b      	ldr	r1, [pc, #44]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0310 	and.w	r3, r3, #16
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d008      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072b2:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	4904      	ldr	r1, [pc, #16]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40007000 	.word	0x40007000
 80072d8:	42420440 	.word	0x42420440

080072dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e076      	b.n	80073dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d108      	bne.n	8007308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072fe:	d009      	beq.n	8007314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	61da      	str	r2, [r3, #28]
 8007306:	e005      	b.n	8007314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d106      	bne.n	8007334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fa ff24 	bl	800217c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800734a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	431a      	orrs	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007384:	431a      	orrs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007398:	ea42 0103 	orr.w	r1, r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	0c1a      	lsrs	r2, r3, #16
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f002 0204 	and.w	r2, r2, #4
 80073ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69da      	ldr	r2, [r3, #28]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	4613      	mov	r3, r2
 80073f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d101      	bne.n	8007406 <HAL_SPI_Transmit+0x22>
 8007402:	2302      	movs	r3, #2
 8007404:	e126      	b.n	8007654 <HAL_SPI_Transmit+0x270>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800740e:	f7fd fa83 	bl	8004918 <HAL_GetTick>
 8007412:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	d002      	beq.n	800742a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007424:	2302      	movs	r3, #2
 8007426:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007428:	e10b      	b.n	8007642 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <HAL_SPI_Transmit+0x52>
 8007430:	88fb      	ldrh	r3, [r7, #6]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d102      	bne.n	800743c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	77fb      	strb	r3, [r7, #31]
    goto error;
 800743a:	e102      	b.n	8007642 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2203      	movs	r2, #3
 8007440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	88fa      	ldrh	r2, [r7, #6]
 8007454:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	88fa      	ldrh	r2, [r7, #6]
 800745a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007482:	d10f      	bne.n	80074a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007492:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ae:	2b40      	cmp	r3, #64	; 0x40
 80074b0:	d007      	beq.n	80074c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ca:	d14b      	bne.n	8007564 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <HAL_SPI_Transmit+0xf6>
 80074d4:	8afb      	ldrh	r3, [r7, #22]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d13e      	bne.n	8007558 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	881a      	ldrh	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ea:	1c9a      	adds	r2, r3, #2
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074fe:	e02b      	b.n	8007558 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b02      	cmp	r3, #2
 800750c:	d112      	bne.n	8007534 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	881a      	ldrh	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	1c9a      	adds	r2, r3, #2
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007528:	b29b      	uxth	r3, r3
 800752a:	3b01      	subs	r3, #1
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	86da      	strh	r2, [r3, #54]	; 0x36
 8007532:	e011      	b.n	8007558 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007534:	f7fd f9f0 	bl	8004918 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d803      	bhi.n	800754c <HAL_SPI_Transmit+0x168>
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800754a:	d102      	bne.n	8007552 <HAL_SPI_Transmit+0x16e>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d102      	bne.n	8007558 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007556:	e074      	b.n	8007642 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1ce      	bne.n	8007500 <HAL_SPI_Transmit+0x11c>
 8007562:	e04c      	b.n	80075fe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <HAL_SPI_Transmit+0x18e>
 800756c:	8afb      	ldrh	r3, [r7, #22]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d140      	bne.n	80075f4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	330c      	adds	r3, #12
 800757c:	7812      	ldrb	r2, [r2, #0]
 800757e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007598:	e02c      	b.n	80075f4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d113      	bne.n	80075d0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	7812      	ldrb	r2, [r2, #0]
 80075b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80075ce:	e011      	b.n	80075f4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075d0:	f7fd f9a2 	bl	8004918 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d803      	bhi.n	80075e8 <HAL_SPI_Transmit+0x204>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e6:	d102      	bne.n	80075ee <HAL_SPI_Transmit+0x20a>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075f2:	e026      	b.n	8007642 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1cd      	bne.n	800759a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 f8b2 	bl	800776c <SPI_EndRxTxTransaction>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2220      	movs	r2, #32
 8007612:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800761c:	2300      	movs	r3, #0
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	613b      	str	r3, [r7, #16]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	77fb      	strb	r3, [r7, #31]
 800763e:	e000      	b.n	8007642 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007640:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007652:	7ffb      	ldrb	r3, [r7, #31]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3720      	adds	r7, #32
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	603b      	str	r3, [r7, #0]
 8007668:	4613      	mov	r3, r2
 800766a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800766c:	f7fd f954 	bl	8004918 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	1a9b      	subs	r3, r3, r2
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	4413      	add	r3, r2
 800767a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800767c:	f7fd f94c 	bl	8004918 <HAL_GetTick>
 8007680:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007682:	4b39      	ldr	r3, [pc, #228]	; (8007768 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	015b      	lsls	r3, r3, #5
 8007688:	0d1b      	lsrs	r3, r3, #20
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	fb02 f303 	mul.w	r3, r2, r3
 8007690:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007692:	e054      	b.n	800773e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800769a:	d050      	beq.n	800773e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800769c:	f7fd f93c 	bl	8004918 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d902      	bls.n	80076b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d13d      	bne.n	800772e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ca:	d111      	bne.n	80076f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d4:	d004      	beq.n	80076e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076de:	d107      	bne.n	80076f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f8:	d10f      	bne.n	800771a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e017      	b.n	800775e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	3b01      	subs	r3, #1
 800773c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4013      	ands	r3, r2
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	429a      	cmp	r2, r3
 800774c:	bf0c      	ite	eq
 800774e:	2301      	moveq	r3, #1
 8007750:	2300      	movne	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	429a      	cmp	r2, r3
 800775a:	d19b      	bne.n	8007694 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3720      	adds	r7, #32
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000008 	.word	0x20000008

0800776c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af02      	add	r7, sp, #8
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2200      	movs	r2, #0
 8007780:	2180      	movs	r1, #128	; 0x80
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff ff6a 	bl	800765c <SPI_WaitFlagStateUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007792:	f043 0220 	orr.w	r2, r3, #32
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e000      	b.n	80077a0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e041      	b.n	800783e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d106      	bne.n	80077d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fa fd12 	bl	80021f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f000 fcba 	bl	8008160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	d001      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e03a      	b.n	80078d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0201 	orr.w	r2, r2, #1
 8007876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a18      	ldr	r2, [pc, #96]	; (80078e0 <HAL_TIM_Base_Start_IT+0x98>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00e      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x58>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788a:	d009      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x58>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a14      	ldr	r2, [pc, #80]	; (80078e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x58>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a13      	ldr	r2, [pc, #76]	; (80078e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d111      	bne.n	80078c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b06      	cmp	r3, #6
 80078b0:	d010      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0201 	orr.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c2:	e007      	b.n	80078d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr
 80078e0:	40012c00 	.word	0x40012c00
 80078e4:	40000400 	.word	0x40000400
 80078e8:	40000800 	.word	0x40000800

080078ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0201 	bic.w	r2, r2, #1
 8007902:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a1a      	ldr	r2, [r3, #32]
 800790a:	f241 1311 	movw	r3, #4369	; 0x1111
 800790e:	4013      	ands	r3, r2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10f      	bne.n	8007934 <HAL_TIM_Base_Stop_IT+0x48>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a1a      	ldr	r2, [r3, #32]
 800791a:	f240 4344 	movw	r3, #1092	; 0x444
 800791e:	4013      	ands	r3, r2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d107      	bne.n	8007934 <HAL_TIM_Base_Stop_IT+0x48>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0201 	bic.w	r2, r2, #1
 8007932:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e041      	b.n	80079de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d106      	bne.n	8007974 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f839 	bl	80079e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	3304      	adds	r3, #4
 8007984:	4619      	mov	r1, r3
 8007986:	4610      	mov	r0, r2
 8007988:	f000 fbea 	bl	8008160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bc80      	pop	{r7}
 80079f6:	4770      	bx	lr

080079f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <HAL_TIM_PWM_Start+0x24>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e022      	b.n	8007a62 <HAL_TIM_PWM_Start+0x6a>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d109      	bne.n	8007a36 <HAL_TIM_PWM_Start+0x3e>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	bf14      	ite	ne
 8007a2e:	2301      	movne	r3, #1
 8007a30:	2300      	moveq	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	e015      	b.n	8007a62 <HAL_TIM_PWM_Start+0x6a>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d109      	bne.n	8007a50 <HAL_TIM_PWM_Start+0x58>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	bf14      	ite	ne
 8007a48:	2301      	movne	r3, #1
 8007a4a:	2300      	moveq	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	e008      	b.n	8007a62 <HAL_TIM_PWM_Start+0x6a>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	bf14      	ite	ne
 8007a5c:	2301      	movne	r3, #1
 8007a5e:	2300      	moveq	r3, #0
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e05e      	b.n	8007b28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d104      	bne.n	8007a7a <HAL_TIM_PWM_Start+0x82>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a78:	e013      	b.n	8007aa2 <HAL_TIM_PWM_Start+0xaa>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d104      	bne.n	8007a8a <HAL_TIM_PWM_Start+0x92>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a88:	e00b      	b.n	8007aa2 <HAL_TIM_PWM_Start+0xaa>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d104      	bne.n	8007a9a <HAL_TIM_PWM_Start+0xa2>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a98:	e003      	b.n	8007aa2 <HAL_TIM_PWM_Start+0xaa>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fdd8 	bl	8008660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1e      	ldr	r2, [pc, #120]	; (8007b30 <HAL_TIM_PWM_Start+0x138>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d107      	bne.n	8007aca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ac8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a18      	ldr	r2, [pc, #96]	; (8007b30 <HAL_TIM_PWM_Start+0x138>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00e      	beq.n	8007af2 <HAL_TIM_PWM_Start+0xfa>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007adc:	d009      	beq.n	8007af2 <HAL_TIM_PWM_Start+0xfa>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a14      	ldr	r2, [pc, #80]	; (8007b34 <HAL_TIM_PWM_Start+0x13c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d004      	beq.n	8007af2 <HAL_TIM_PWM_Start+0xfa>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a12      	ldr	r2, [pc, #72]	; (8007b38 <HAL_TIM_PWM_Start+0x140>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d111      	bne.n	8007b16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b06      	cmp	r3, #6
 8007b02:	d010      	beq.n	8007b26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0201 	orr.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b14:	e007      	b.n	8007b26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f042 0201 	orr.w	r2, r2, #1
 8007b24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40012c00 	.word	0x40012c00
 8007b34:	40000400 	.word	0x40000400
 8007b38:	40000800 	.word	0x40000800

08007b3c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fd86 	bl	8008660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a29      	ldr	r2, [pc, #164]	; (8007c00 <HAL_TIM_PWM_Stop+0xc4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d117      	bne.n	8007b8e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	6a1a      	ldr	r2, [r3, #32]
 8007b64:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b68:	4013      	ands	r3, r2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10f      	bne.n	8007b8e <HAL_TIM_PWM_Stop+0x52>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6a1a      	ldr	r2, [r3, #32]
 8007b74:	f240 4344 	movw	r3, #1092	; 0x444
 8007b78:	4013      	ands	r3, r2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d107      	bne.n	8007b8e <HAL_TIM_PWM_Stop+0x52>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6a1a      	ldr	r2, [r3, #32]
 8007b94:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b98:	4013      	ands	r3, r2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10f      	bne.n	8007bbe <HAL_TIM_PWM_Stop+0x82>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6a1a      	ldr	r2, [r3, #32]
 8007ba4:	f240 4344 	movw	r3, #1092	; 0x444
 8007ba8:	4013      	ands	r3, r2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d107      	bne.n	8007bbe <HAL_TIM_PWM_Stop+0x82>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 0201 	bic.w	r2, r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <HAL_TIM_PWM_Stop+0x92>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bcc:	e013      	b.n	8007bf6 <HAL_TIM_PWM_Stop+0xba>
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d104      	bne.n	8007bde <HAL_TIM_PWM_Stop+0xa2>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bdc:	e00b      	b.n	8007bf6 <HAL_TIM_PWM_Stop+0xba>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d104      	bne.n	8007bee <HAL_TIM_PWM_Stop+0xb2>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bec:	e003      	b.n	8007bf6 <HAL_TIM_PWM_Stop+0xba>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	40012c00 	.word	0x40012c00

08007c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d122      	bne.n	8007c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d11b      	bne.n	8007c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0202 	mvn.w	r2, #2
 8007c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa6f 	bl	800812a <HAL_TIM_IC_CaptureCallback>
 8007c4c:	e005      	b.n	8007c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa62 	bl	8008118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fa71 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d122      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d11b      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0204 	mvn.w	r2, #4
 8007c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa45 	bl	800812a <HAL_TIM_IC_CaptureCallback>
 8007ca0:	e005      	b.n	8007cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa38 	bl	8008118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fa47 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d122      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d11b      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f06f 0208 	mvn.w	r2, #8
 8007cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2204      	movs	r2, #4
 8007cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	f003 0303 	and.w	r3, r3, #3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 fa1b 	bl	800812a <HAL_TIM_IC_CaptureCallback>
 8007cf4:	e005      	b.n	8007d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa0e 	bl	8008118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa1d 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	d122      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d11b      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f06f 0210 	mvn.w	r2, #16
 8007d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2208      	movs	r2, #8
 8007d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f9f1 	bl	800812a <HAL_TIM_IC_CaptureCallback>
 8007d48:	e005      	b.n	8007d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f9e4 	bl	8008118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f9f3 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d10e      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d107      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0201 	mvn.w	r2, #1
 8007d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7f8 fac0 	bl	8000308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d92:	2b80      	cmp	r3, #128	; 0x80
 8007d94:	d10e      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da0:	2b80      	cmp	r3, #128	; 0x80
 8007da2:	d107      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fd32 	bl	8008818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbe:	2b40      	cmp	r3, #64	; 0x40
 8007dc0:	d10e      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d107      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9b7 	bl	800814e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d10e      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d107      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0220 	mvn.w	r2, #32
 8007e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fcfd 	bl	8008806 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d101      	bne.n	8007e2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e0ac      	b.n	8007f88 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b0c      	cmp	r3, #12
 8007e3a:	f200 809f 	bhi.w	8007f7c <HAL_TIM_PWM_ConfigChannel+0x168>
 8007e3e:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e79 	.word	0x08007e79
 8007e48:	08007f7d 	.word	0x08007f7d
 8007e4c:	08007f7d 	.word	0x08007f7d
 8007e50:	08007f7d 	.word	0x08007f7d
 8007e54:	08007eb9 	.word	0x08007eb9
 8007e58:	08007f7d 	.word	0x08007f7d
 8007e5c:	08007f7d 	.word	0x08007f7d
 8007e60:	08007f7d 	.word	0x08007f7d
 8007e64:	08007efb 	.word	0x08007efb
 8007e68:	08007f7d 	.word	0x08007f7d
 8007e6c:	08007f7d 	.word	0x08007f7d
 8007e70:	08007f7d 	.word	0x08007f7d
 8007e74:	08007f3b 	.word	0x08007f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f9d0 	bl	8008224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0208 	orr.w	r2, r2, #8
 8007e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699a      	ldr	r2, [r3, #24]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0204 	bic.w	r2, r2, #4
 8007ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6999      	ldr	r1, [r3, #24]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	619a      	str	r2, [r3, #24]
      break;
 8007eb6:	e062      	b.n	8007f7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fa16 	bl	80082f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699a      	ldr	r2, [r3, #24]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699a      	ldr	r2, [r3, #24]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6999      	ldr	r1, [r3, #24]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	021a      	lsls	r2, r3, #8
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	619a      	str	r2, [r3, #24]
      break;
 8007ef8:	e041      	b.n	8007f7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 fa5f 	bl	80083c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69da      	ldr	r2, [r3, #28]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0208 	orr.w	r2, r2, #8
 8007f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69da      	ldr	r2, [r3, #28]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0204 	bic.w	r2, r2, #4
 8007f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69d9      	ldr	r1, [r3, #28]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	61da      	str	r2, [r3, #28]
      break;
 8007f38:	e021      	b.n	8007f7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 faa9 	bl	8008498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	69da      	ldr	r2, [r3, #28]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69da      	ldr	r2, [r3, #28]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69d9      	ldr	r1, [r3, #28]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	021a      	lsls	r2, r3, #8
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	61da      	str	r2, [r3, #28]
      break;
 8007f7a:	e000      	b.n	8007f7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007f7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_TIM_ConfigClockSource+0x18>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e0b3      	b.n	8008110 <HAL_TIM_ConfigClockSource+0x180>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe0:	d03e      	beq.n	8008060 <HAL_TIM_ConfigClockSource+0xd0>
 8007fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe6:	f200 8087 	bhi.w	80080f8 <HAL_TIM_ConfigClockSource+0x168>
 8007fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fee:	f000 8085 	beq.w	80080fc <HAL_TIM_ConfigClockSource+0x16c>
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff6:	d87f      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x168>
 8007ff8:	2b70      	cmp	r3, #112	; 0x70
 8007ffa:	d01a      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0xa2>
 8007ffc:	2b70      	cmp	r3, #112	; 0x70
 8007ffe:	d87b      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x168>
 8008000:	2b60      	cmp	r3, #96	; 0x60
 8008002:	d050      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0x116>
 8008004:	2b60      	cmp	r3, #96	; 0x60
 8008006:	d877      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x168>
 8008008:	2b50      	cmp	r3, #80	; 0x50
 800800a:	d03c      	beq.n	8008086 <HAL_TIM_ConfigClockSource+0xf6>
 800800c:	2b50      	cmp	r3, #80	; 0x50
 800800e:	d873      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x168>
 8008010:	2b40      	cmp	r3, #64	; 0x40
 8008012:	d058      	beq.n	80080c6 <HAL_TIM_ConfigClockSource+0x136>
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d86f      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x168>
 8008018:	2b30      	cmp	r3, #48	; 0x30
 800801a:	d064      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x156>
 800801c:	2b30      	cmp	r3, #48	; 0x30
 800801e:	d86b      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x168>
 8008020:	2b20      	cmp	r3, #32
 8008022:	d060      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x156>
 8008024:	2b20      	cmp	r3, #32
 8008026:	d867      	bhi.n	80080f8 <HAL_TIM_ConfigClockSource+0x168>
 8008028:	2b00      	cmp	r3, #0
 800802a:	d05c      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x156>
 800802c:	2b10      	cmp	r3, #16
 800802e:	d05a      	beq.n	80080e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008030:	e062      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	6899      	ldr	r1, [r3, #8]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f000 faee 	bl	8008622 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008054:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	609a      	str	r2, [r3, #8]
      break;
 800805e:	e04e      	b.n	80080fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6818      	ldr	r0, [r3, #0]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	6899      	ldr	r1, [r3, #8]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f000 fad7 	bl	8008622 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008082:	609a      	str	r2, [r3, #8]
      break;
 8008084:	e03b      	b.n	80080fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	6859      	ldr	r1, [r3, #4]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	461a      	mov	r2, r3
 8008094:	f000 fa4e 	bl	8008534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2150      	movs	r1, #80	; 0x50
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 faa5 	bl	80085ee <TIM_ITRx_SetConfig>
      break;
 80080a4:	e02b      	b.n	80080fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	6859      	ldr	r1, [r3, #4]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	461a      	mov	r2, r3
 80080b4:	f000 fa6c 	bl	8008590 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2160      	movs	r1, #96	; 0x60
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fa95 	bl	80085ee <TIM_ITRx_SetConfig>
      break;
 80080c4:	e01b      	b.n	80080fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	6859      	ldr	r1, [r3, #4]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	461a      	mov	r2, r3
 80080d4:	f000 fa2e 	bl	8008534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2140      	movs	r1, #64	; 0x40
 80080de:	4618      	mov	r0, r3
 80080e0:	f000 fa85 	bl	80085ee <TIM_ITRx_SetConfig>
      break;
 80080e4:	e00b      	b.n	80080fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4619      	mov	r1, r3
 80080f0:	4610      	mov	r0, r2
 80080f2:	f000 fa7c 	bl	80085ee <TIM_ITRx_SetConfig>
        break;
 80080f6:	e002      	b.n	80080fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080f8:	bf00      	nop
 80080fa:	e000      	b.n	80080fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr

0800812a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008132:	bf00      	nop
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	bc80      	pop	{r7}
 800813a:	4770      	bx	lr

0800813c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	bc80      	pop	{r7}
 800814c:	4770      	bx	lr

0800814e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	bc80      	pop	{r7}
 800815e:	4770      	bx	lr

08008160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a29      	ldr	r2, [pc, #164]	; (8008218 <TIM_Base_SetConfig+0xb8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d00b      	beq.n	8008190 <TIM_Base_SetConfig+0x30>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817e:	d007      	beq.n	8008190 <TIM_Base_SetConfig+0x30>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a26      	ldr	r2, [pc, #152]	; (800821c <TIM_Base_SetConfig+0xbc>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d003      	beq.n	8008190 <TIM_Base_SetConfig+0x30>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a25      	ldr	r2, [pc, #148]	; (8008220 <TIM_Base_SetConfig+0xc0>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d108      	bne.n	80081a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a1c      	ldr	r2, [pc, #112]	; (8008218 <TIM_Base_SetConfig+0xb8>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00b      	beq.n	80081c2 <TIM_Base_SetConfig+0x62>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b0:	d007      	beq.n	80081c2 <TIM_Base_SetConfig+0x62>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a19      	ldr	r2, [pc, #100]	; (800821c <TIM_Base_SetConfig+0xbc>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d003      	beq.n	80081c2 <TIM_Base_SetConfig+0x62>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a18      	ldr	r2, [pc, #96]	; (8008220 <TIM_Base_SetConfig+0xc0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d108      	bne.n	80081d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a07      	ldr	r2, [pc, #28]	; (8008218 <TIM_Base_SetConfig+0xb8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d103      	bne.n	8008208 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	691a      	ldr	r2, [r3, #16]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	615a      	str	r2, [r3, #20]
}
 800820e:	bf00      	nop
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	bc80      	pop	{r7}
 8008216:	4770      	bx	lr
 8008218:	40012c00 	.word	0x40012c00
 800821c:	40000400 	.word	0x40000400
 8008220:	40000800 	.word	0x40000800

08008224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	f023 0201 	bic.w	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0303 	bic.w	r3, r3, #3
 800825a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	4313      	orrs	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f023 0302 	bic.w	r3, r3, #2
 800826c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a1c      	ldr	r2, [pc, #112]	; (80082ec <TIM_OC1_SetConfig+0xc8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d10c      	bne.n	800829a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f023 0308 	bic.w	r3, r3, #8
 8008286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	4313      	orrs	r3, r2
 8008290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f023 0304 	bic.w	r3, r3, #4
 8008298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a13      	ldr	r2, [pc, #76]	; (80082ec <TIM_OC1_SetConfig+0xc8>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d111      	bne.n	80082c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	621a      	str	r2, [r3, #32]
}
 80082e0:	bf00      	nop
 80082e2:	371c      	adds	r7, #28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bc80      	pop	{r7}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	40012c00 	.word	0x40012c00

080082f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	f023 0210 	bic.w	r2, r3, #16
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800831e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f023 0320 	bic.w	r3, r3, #32
 800833a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	4313      	orrs	r3, r2
 8008346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a1d      	ldr	r2, [pc, #116]	; (80083c0 <TIM_OC2_SetConfig+0xd0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10d      	bne.n	800836c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800836a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a14      	ldr	r2, [pc, #80]	; (80083c0 <TIM_OC2_SetConfig+0xd0>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d113      	bne.n	800839c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800837a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	621a      	str	r2, [r3, #32]
}
 80083b6:	bf00      	nop
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bc80      	pop	{r7}
 80083be:	4770      	bx	lr
 80083c0:	40012c00 	.word	0x40012c00

080083c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0303 	bic.w	r3, r3, #3
 80083fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800840c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a1d      	ldr	r2, [pc, #116]	; (8008494 <TIM_OC3_SetConfig+0xd0>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d10d      	bne.n	800843e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	4313      	orrs	r3, r2
 8008434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800843c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a14      	ldr	r2, [pc, #80]	; (8008494 <TIM_OC3_SetConfig+0xd0>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d113      	bne.n	800846e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800844c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	4313      	orrs	r3, r2
 8008460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	621a      	str	r2, [r3, #32]
}
 8008488:	bf00      	nop
 800848a:	371c      	adds	r7, #28
 800848c:	46bd      	mov	sp, r7
 800848e:	bc80      	pop	{r7}
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	40012c00 	.word	0x40012c00

08008498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	021b      	lsls	r3, r3, #8
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	031b      	lsls	r3, r3, #12
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a0f      	ldr	r2, [pc, #60]	; (8008530 <TIM_OC4_SetConfig+0x98>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d109      	bne.n	800850c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	019b      	lsls	r3, r3, #6
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4313      	orrs	r3, r2
 800850a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	621a      	str	r2, [r3, #32]
}
 8008526:	bf00      	nop
 8008528:	371c      	adds	r7, #28
 800852a:	46bd      	mov	sp, r7
 800852c:	bc80      	pop	{r7}
 800852e:	4770      	bx	lr
 8008530:	40012c00 	.word	0x40012c00

08008534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f023 0201 	bic.w	r2, r3, #1
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800855e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	011b      	lsls	r3, r3, #4
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	4313      	orrs	r3, r2
 8008568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f023 030a 	bic.w	r3, r3, #10
 8008570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	621a      	str	r2, [r3, #32]
}
 8008586:	bf00      	nop
 8008588:	371c      	adds	r7, #28
 800858a:	46bd      	mov	sp, r7
 800858c:	bc80      	pop	{r7}
 800858e:	4770      	bx	lr

08008590 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	f023 0210 	bic.w	r2, r3, #16
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	031b      	lsls	r3, r3, #12
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	621a      	str	r2, [r3, #32]
}
 80085e4:	bf00      	nop
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr

080085ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b085      	sub	sp, #20
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	f043 0307 	orr.w	r3, r3, #7
 8008610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	609a      	str	r2, [r3, #8]
}
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	bc80      	pop	{r7}
 8008620:	4770      	bx	lr

08008622 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008622:	b480      	push	{r7}
 8008624:	b087      	sub	sp, #28
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	607a      	str	r2, [r7, #4]
 800862e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800863c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	021a      	lsls	r2, r3, #8
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	431a      	orrs	r2, r3
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	4313      	orrs	r3, r2
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	609a      	str	r2, [r3, #8]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	bc80      	pop	{r7}
 800865e:	4770      	bx	lr

08008660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f003 031f 	and.w	r3, r3, #31
 8008672:	2201      	movs	r2, #1
 8008674:	fa02 f303 	lsl.w	r3, r2, r3
 8008678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a1a      	ldr	r2, [r3, #32]
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	43db      	mvns	r3, r3
 8008682:	401a      	ands	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a1a      	ldr	r2, [r3, #32]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f003 031f 	and.w	r3, r3, #31
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	fa01 f303 	lsl.w	r3, r1, r3
 8008698:	431a      	orrs	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	621a      	str	r2, [r3, #32]
}
 800869e:	bf00      	nop
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bc80      	pop	{r7}
 80086a6:	4770      	bx	lr

080086a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d101      	bne.n	80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086bc:	2302      	movs	r3, #2
 80086be:	e046      	b.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a16      	ldr	r2, [pc, #88]	; (8008758 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d00e      	beq.n	8008722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800870c:	d009      	beq.n	8008722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a12      	ldr	r2, [pc, #72]	; (800875c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d004      	beq.n	8008722 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a10      	ldr	r2, [pc, #64]	; (8008760 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d10c      	bne.n	800873c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008728:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	4313      	orrs	r3, r2
 8008732:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr
 8008758:	40012c00 	.word	0x40012c00
 800875c:	40000400 	.word	0x40000400
 8008760:	40000800 	.word	0x40000800

08008764 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d101      	bne.n	8008780 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800877c:	2302      	movs	r3, #2
 800877e:	e03d      	b.n	80087fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4313      	orrs	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	bc80      	pop	{r7}
 8008804:	4770      	bx	lr

08008806 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr

08008818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	bc80      	pop	{r7}
 8008828:	4770      	bx	lr

0800882a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800882a:	b084      	sub	sp, #16
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	f107 0014 	add.w	r0, r7, #20
 8008838:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	bc80      	pop	{r7}
 8008846:	b004      	add	sp, #16
 8008848:	4770      	bx	lr

0800884a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800884a:	b480      	push	{r7}
 800884c:	b085      	sub	sp, #20
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800885a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800885e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	b29a      	uxth	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	bc80      	pop	{r7}
 8008874:	4770      	bx	lr

08008876 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008876:	b480      	push	{r7}
 8008878:	b085      	sub	sp, #20
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800887e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008882:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800888a:	b29a      	uxth	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	b29b      	uxth	r3, r3
 8008890:	43db      	mvns	r3, r3
 8008892:	b29b      	uxth	r3, r3
 8008894:	4013      	ands	r3, r2
 8008896:	b29a      	uxth	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bc80      	pop	{r7}
 80088a8:	4770      	bx	lr

080088aa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b083      	sub	sp, #12
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	460b      	mov	r3, r1
 80088b4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr

080088c2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088c2:	b084      	sub	sp, #16
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	f107 0014 	add.w	r0, r7, #20
 80088d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	b004      	add	sp, #16
 8008900:	4770      	bx	lr
	...

08008904 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008904:	b480      	push	{r7}
 8008906:	b09b      	sub	sp, #108	; 0x6c
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	b29b      	uxth	r3, r3
 8008922:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	78db      	ldrb	r3, [r3, #3]
 8008932:	2b03      	cmp	r3, #3
 8008934:	d81f      	bhi.n	8008976 <USB_ActivateEndpoint+0x72>
 8008936:	a201      	add	r2, pc, #4	; (adr r2, 800893c <USB_ActivateEndpoint+0x38>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	0800894d 	.word	0x0800894d
 8008940:	08008969 	.word	0x08008969
 8008944:	0800897f 	.word	0x0800897f
 8008948:	0800895b 	.word	0x0800895b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800894c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008954:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008958:	e012      	b.n	8008980 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800895a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800895e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008962:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008966:	e00b      	b.n	8008980 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008968:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800896c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008970:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008974:	e004      	b.n	8008980 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800897c:	e000      	b.n	8008980 <USB_ActivateEndpoint+0x7c>
      break;
 800897e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	441a      	add	r2, r3
 800898a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800898e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800899a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899e:	b29b      	uxth	r3, r3
 80089a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	441a      	add	r2, r3
 80089d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80089d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	7b1b      	ldrb	r3, [r3, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f040 8149 	bne.w	8008c84 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	785b      	ldrb	r3, [r3, #1]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 8084 	beq.w	8008b04 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	461a      	mov	r2, r3
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	617b      	str	r3, [r7, #20]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	011a      	lsls	r2, r3, #4
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	88db      	ldrh	r3, [r3, #6]
 8008a24:	085b      	lsrs	r3, r3, #1
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	81fb      	strh	r3, [r7, #14]
 8008a3e:	89fb      	ldrh	r3, [r7, #14]
 8008a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01b      	beq.n	8008a80 <USB_ActivateEndpoint+0x17c>
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5e:	81bb      	strh	r3, [r7, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	441a      	add	r2, r3
 8008a6a:	89bb      	ldrh	r3, [r7, #12]
 8008a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	78db      	ldrb	r3, [r3, #3]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d020      	beq.n	8008aca <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a9e:	813b      	strh	r3, [r7, #8]
 8008aa0:	893b      	ldrh	r3, [r7, #8]
 8008aa2:	f083 0320 	eor.w	r3, r3, #32
 8008aa6:	813b      	strh	r3, [r7, #8]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	441a      	add	r2, r3
 8008ab2:	893b      	ldrh	r3, [r7, #8]
 8008ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	8013      	strh	r3, [r2, #0]
 8008ac8:	e27f      	b.n	8008fca <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	881b      	ldrh	r3, [r3, #0]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ae0:	817b      	strh	r3, [r7, #10]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	441a      	add	r2, r3
 8008aec:	897b      	ldrh	r3, [r7, #10]
 8008aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	8013      	strh	r3, [r2, #0]
 8008b02:	e262      	b.n	8008fca <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	461a      	mov	r2, r3
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	4413      	add	r3, r2
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	011a      	lsls	r2, r3, #4
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	88db      	ldrh	r3, [r3, #6]
 8008b2c:	085b      	lsrs	r3, r3, #1
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	005b      	lsls	r3, r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	461a      	mov	r2, r3
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	4413      	add	r3, r2
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	011a      	lsls	r2, r3, #4
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	4413      	add	r3, r2
 8008b56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b5a:	623b      	str	r3, [r7, #32]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d112      	bne.n	8008b8a <USB_ActivateEndpoint+0x286>
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	801a      	strh	r2, [r3, #0]
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	801a      	strh	r2, [r3, #0]
 8008b88:	e02f      	b.n	8008bea <USB_ActivateEndpoint+0x2e6>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8008b90:	d813      	bhi.n	8008bba <USB_ActivateEndpoint+0x2b6>
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	663b      	str	r3, [r7, #96]	; 0x60
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <USB_ActivateEndpoint+0x2a8>
 8008ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ba8:	3301      	adds	r3, #1
 8008baa:	663b      	str	r3, [r7, #96]	; 0x60
 8008bac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	029b      	lsls	r3, r3, #10
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	e017      	b.n	8008bea <USB_ActivateEndpoint+0x2e6>
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	095b      	lsrs	r3, r3, #5
 8008bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f003 031f 	and.w	r3, r3, #31
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <USB_ActivateEndpoint+0x2d0>
 8008bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8008bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	029b      	lsls	r3, r3, #10
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	83fb      	strh	r3, [r7, #30]
 8008bf8:	8bfb      	ldrh	r3, [r7, #30]
 8008bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d01b      	beq.n	8008c3a <USB_ActivateEndpoint+0x336>
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c18:	83bb      	strh	r3, [r7, #28]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	441a      	add	r2, r3
 8008c24:	8bbb      	ldrh	r3, [r7, #28]
 8008c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c50:	837b      	strh	r3, [r7, #26]
 8008c52:	8b7b      	ldrh	r3, [r7, #26]
 8008c54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c58:	837b      	strh	r3, [r7, #26]
 8008c5a:	8b7b      	ldrh	r3, [r7, #26]
 8008c5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c60:	837b      	strh	r3, [r7, #26]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	441a      	add	r2, r3
 8008c6c:	8b7b      	ldrh	r3, [r7, #26]
 8008c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	8013      	strh	r3, [r2, #0]
 8008c82:	e1a2      	b.n	8008fca <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	441a      	add	r2, r3
 8008ca8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cb4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	461a      	mov	r2, r3
 8008cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cd0:	4413      	add	r3, r2
 8008cd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	011a      	lsls	r2, r3, #4
 8008cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	891b      	ldrh	r3, [r3, #8]
 8008ce8:	085b      	lsrs	r3, r3, #1
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d04:	4413      	add	r3, r2
 8008d06:	653b      	str	r3, [r7, #80]	; 0x50
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	011a      	lsls	r2, r3, #4
 8008d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	895b      	ldrh	r3, [r3, #10]
 8008d1c:	085b      	lsrs	r3, r3, #1
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d26:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	785b      	ldrb	r3, [r3, #1]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f040 8091 	bne.w	8008e54 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008d40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d01b      	beq.n	8008d82 <USB_ActivateEndpoint+0x47e>
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d60:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	441a      	add	r2, r3
 8008d6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	881b      	ldrh	r3, [r3, #0]
 8008d8e:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01b      	beq.n	8008dd2 <USB_ActivateEndpoint+0x4ce>
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008db0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	441a      	add	r2, r3
 8008dbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008dea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008dec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008df0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008df2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008df4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008df8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	441a      	add	r2, r3
 8008e04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e30:	867b      	strh	r3, [r7, #50]	; 0x32
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	441a      	add	r2, r3
 8008e3c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	8013      	strh	r3, [r2, #0]
 8008e52:	e0ba      	b.n	8008fca <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	881b      	ldrh	r3, [r3, #0]
 8008e60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008e64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01d      	beq.n	8008eac <USB_ActivateEndpoint+0x5a8>
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	441a      	add	r2, r3
 8008e94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008ebc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d01d      	beq.n	8008f04 <USB_ActivateEndpoint+0x600>
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ede:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	441a      	add	r2, r3
 8008eec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	78db      	ldrb	r3, [r3, #3]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d024      	beq.n	8008f56 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008f26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008f2a:	f083 0320 	eor.w	r3, r3, #32
 8008f2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	441a      	add	r2, r3
 8008f3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	8013      	strh	r3, [r2, #0]
 8008f54:	e01d      	b.n	8008f92 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	441a      	add	r2, r3
 8008f7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fa8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	441a      	add	r2, r3
 8008fb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008fca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	376c      	adds	r7, #108	; 0x6c
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bc80      	pop	{r7}
 8008fd6:	4770      	bx	lr

08008fd8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b08d      	sub	sp, #52	; 0x34
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	7b1b      	ldrb	r3, [r3, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f040 808e 	bne.w	8009108 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	785b      	ldrb	r3, [r3, #1]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d044      	beq.n	800907e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	81bb      	strh	r3, [r7, #12]
 8009002:	89bb      	ldrh	r3, [r7, #12]
 8009004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01b      	beq.n	8009044 <USB_DeactivateEndpoint+0x6c>
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29b      	uxth	r3, r3
 800901a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009022:	817b      	strh	r3, [r7, #10]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	441a      	add	r2, r3
 800902e:	897b      	ldrh	r3, [r7, #10]
 8009030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800903c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009040:	b29b      	uxth	r3, r3
 8009042:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b29b      	uxth	r3, r3
 8009052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800905a:	813b      	strh	r3, [r7, #8]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	441a      	add	r2, r3
 8009066:	893b      	ldrh	r3, [r7, #8]
 8009068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800906c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009078:	b29b      	uxth	r3, r3
 800907a:	8013      	strh	r3, [r2, #0]
 800907c:	e192      	b.n	80093a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	827b      	strh	r3, [r7, #18]
 800908c:	8a7b      	ldrh	r3, [r7, #18]
 800908e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d01b      	beq.n	80090ce <USB_DeactivateEndpoint+0xf6>
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ac:	823b      	strh	r3, [r7, #16]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	441a      	add	r2, r3
 80090b8:	8a3b      	ldrh	r3, [r7, #16]
 80090ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e4:	81fb      	strh	r3, [r7, #14]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	441a      	add	r2, r3
 80090f0:	89fb      	ldrh	r3, [r7, #14]
 80090f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009102:	b29b      	uxth	r3, r3
 8009104:	8013      	strh	r3, [r2, #0]
 8009106:	e14d      	b.n	80093a4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	785b      	ldrb	r3, [r3, #1]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f040 80a5 	bne.w	800925c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	843b      	strh	r3, [r7, #32]
 8009120:	8c3b      	ldrh	r3, [r7, #32]
 8009122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d01b      	beq.n	8009162 <USB_DeactivateEndpoint+0x18a>
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b29b      	uxth	r3, r3
 8009138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800913c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009140:	83fb      	strh	r3, [r7, #30]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	441a      	add	r2, r3
 800914c:	8bfb      	ldrh	r3, [r7, #30]
 800914e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009156:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800915a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915e:	b29b      	uxth	r3, r3
 8009160:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	83bb      	strh	r3, [r7, #28]
 8009170:	8bbb      	ldrh	r3, [r7, #28]
 8009172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d01b      	beq.n	80091b2 <USB_DeactivateEndpoint+0x1da>
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	881b      	ldrh	r3, [r3, #0]
 8009186:	b29b      	uxth	r3, r3
 8009188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800918c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009190:	837b      	strh	r3, [r7, #26]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	441a      	add	r2, r3
 800919c:	8b7b      	ldrh	r3, [r7, #26]
 800919e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c8:	833b      	strh	r3, [r7, #24]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	441a      	add	r2, r3
 80091d4:	8b3b      	ldrh	r3, [r7, #24]
 80091d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009200:	82fb      	strh	r3, [r7, #22]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	441a      	add	r2, r3
 800920c:	8afb      	ldrh	r3, [r7, #22]
 800920e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800921a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800921e:	b29b      	uxth	r3, r3
 8009220:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	b29b      	uxth	r3, r3
 8009230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009238:	82bb      	strh	r3, [r7, #20]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	441a      	add	r2, r3
 8009244:	8abb      	ldrh	r3, [r7, #20]
 8009246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800924a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800924e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009256:	b29b      	uxth	r3, r3
 8009258:	8013      	strh	r3, [r2, #0]
 800925a:	e0a3      	b.n	80093a4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4413      	add	r3, r2
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800926a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800926c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009270:	2b00      	cmp	r3, #0
 8009272:	d01b      	beq.n	80092ac <USB_DeactivateEndpoint+0x2d4>
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	881b      	ldrh	r3, [r3, #0]
 8009280:	b29b      	uxth	r3, r3
 8009282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	441a      	add	r2, r3
 8009296:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800929c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80092ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80092bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01b      	beq.n	80092fc <USB_DeactivateEndpoint+0x324>
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	881b      	ldrh	r3, [r3, #0]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092da:	853b      	strh	r3, [r7, #40]	; 0x28
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	441a      	add	r2, r3
 80092e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	4413      	add	r3, r2
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	b29b      	uxth	r3, r3
 800930a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009312:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	441a      	add	r2, r3
 800931e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800932c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009330:	b29b      	uxth	r3, r3
 8009332:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4413      	add	r3, r2
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	b29b      	uxth	r3, r3
 8009342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800934a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	441a      	add	r2, r3
 8009356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800935c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009368:	b29b      	uxth	r3, r3
 800936a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800937e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009382:	847b      	strh	r3, [r7, #34]	; 0x22
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	441a      	add	r2, r3
 800938e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800939c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3734      	adds	r7, #52	; 0x34
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bc80      	pop	{r7}
 80093ae:	4770      	bx	lr

080093b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b0cc      	sub	sp, #304	; 0x130
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093be:	6018      	str	r0, [r3, #0]
 80093c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093c8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	f041 817d 	bne.w	800a6d6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80093dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	699a      	ldr	r2, [r3, #24]
 80093e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d908      	bls.n	800940a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80093f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009408:	e007      	b.n	800941a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800940a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800941a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800941e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	7b1b      	ldrb	r3, [r3, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d152      	bne.n	80094d0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800942a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800942e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6959      	ldr	r1, [r3, #20]
 8009436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800943a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	88da      	ldrh	r2, [r3, #6]
 8009442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009446:	b29b      	uxth	r3, r3
 8009448:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800944c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009450:	6800      	ldr	r0, [r0, #0]
 8009452:	f001 ff23 	bl	800b29c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800945a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800945e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009462:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009466:	6812      	ldr	r2, [r2, #0]
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009478:	b29b      	uxth	r3, r3
 800947a:	4619      	mov	r1, r3
 800947c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009480:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009484:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009488:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800948c:	6812      	ldr	r2, [r2, #0]
 800948e:	440a      	add	r2, r1
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	011a      	lsls	r2, r3, #4
 80094a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4413      	add	r3, r2
 80094ac:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80094b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094be:	b29a      	uxth	r2, r3
 80094c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	801a      	strh	r2, [r3, #0]
 80094cc:	f001 b8b5 	b.w	800a63a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80094d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	78db      	ldrb	r3, [r3, #3]
 80094dc:	2b02      	cmp	r3, #2
 80094de:	f040 84c6 	bne.w	8009e6e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80094e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6a1a      	ldr	r2, [r3, #32]
 80094ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	f240 8443 	bls.w	8009d86 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009526:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800952a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800952e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	441a      	add	r2, r3
 8009544:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800954c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009550:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009558:	b29b      	uxth	r3, r3
 800955a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800955c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6a1a      	ldr	r2, [r3, #32]
 8009568:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800956c:	1ad2      	subs	r2, r2, r3
 800956e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800957a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800957e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	881b      	ldrh	r3, [r3, #0]
 8009596:	b29b      	uxth	r3, r3
 8009598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 823e 	beq.w	8009a1e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80095aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095ae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80095b2:	6812      	ldr	r2, [r2, #0]
 80095b4:	601a      	str	r2, [r3, #0]
 80095b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f040 809a 	bne.w	80096fc <USB_EPStartXfer+0x34c>
 80095c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095d4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80095d8:	6812      	ldr	r2, [r2, #0]
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	4619      	mov	r1, r3
 80095ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095fa:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80095fe:	6812      	ldr	r2, [r2, #0]
 8009600:	440a      	add	r2, r1
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	011a      	lsls	r2, r3, #4
 8009612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4413      	add	r3, r2
 800961e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009626:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009630:	2b00      	cmp	r3, #0
 8009632:	d122      	bne.n	800967a <USB_EPStartXfer+0x2ca>
 8009634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009638:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009646:	b29a      	uxth	r2, r3
 8009648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800964c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	801a      	strh	r2, [r3, #0]
 8009654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009658:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800966a:	b29a      	uxth	r2, r3
 800966c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009670:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	801a      	strh	r2, [r3, #0]
 8009678:	e079      	b.n	800976e <USB_EPStartXfer+0x3be>
 800967a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800967e:	2b3e      	cmp	r3, #62	; 0x3e
 8009680:	d81b      	bhi.n	80096ba <USB_EPStartXfer+0x30a>
 8009682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009686:	085b      	lsrs	r3, r3, #1
 8009688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800968c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d004      	beq.n	80096a2 <USB_EPStartXfer+0x2f2>
 8009698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800969c:	3301      	adds	r3, #1
 800969e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80096a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	029b      	lsls	r3, r3, #10
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	801a      	strh	r2, [r3, #0]
 80096b8:	e059      	b.n	800976e <USB_EPStartXfer+0x3be>
 80096ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096be:	095b      	lsrs	r3, r3, #5
 80096c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80096c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c8:	f003 031f 	and.w	r3, r3, #31
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d104      	bne.n	80096da <USB_EPStartXfer+0x32a>
 80096d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096d4:	3b01      	subs	r3, #1
 80096d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80096da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096de:	b29b      	uxth	r3, r3
 80096e0:	029b      	lsls	r3, r3, #10
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	801a      	strh	r2, [r3, #0]
 80096fa:	e038      	b.n	800976e <USB_EPStartXfer+0x3be>
 80096fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	785b      	ldrb	r3, [r3, #1]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d130      	bne.n	800976e <USB_EPStartXfer+0x3be>
 800970c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800971a:	b29b      	uxth	r3, r3
 800971c:	4619      	mov	r1, r3
 800971e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009722:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009726:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800972a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800972e:	6812      	ldr	r2, [r2, #0]
 8009730:	440a      	add	r2, r1
 8009732:	601a      	str	r2, [r3, #0]
 8009734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	011a      	lsls	r2, r3, #4
 8009742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009746:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4413      	add	r3, r2
 800974e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009760:	b29a      	uxth	r2, r3
 8009762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800976e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	895b      	ldrh	r3, [r3, #10]
 800977a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800977e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6959      	ldr	r1, [r3, #20]
 800978a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800978e:	b29b      	uxth	r3, r3
 8009790:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009794:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009798:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800979c:	6800      	ldr	r0, [r0, #0]
 800979e:	f001 fd7d 	bl	800b29c <USB_WritePMA>
            ep->xfer_buff += len;
 80097a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695a      	ldr	r2, [r3, #20]
 80097ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097b2:	441a      	add	r2, r3
 80097b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80097c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6a1a      	ldr	r2, [r3, #32]
 80097cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d90f      	bls.n	80097fc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80097dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6a1a      	ldr	r2, [r3, #32]
 80097e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097ec:	1ad2      	subs	r2, r2, r3
 80097ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	621a      	str	r2, [r3, #32]
 80097fa:	e00e      	b.n	800981a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80097fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800980c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2200      	movs	r2, #0
 8009818:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800981a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800981e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	785b      	ldrb	r3, [r3, #1]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f040 809a 	bne.w	8009960 <USB_EPStartXfer+0x5b0>
 800982c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009830:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009834:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009838:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800983c:	6812      	ldr	r2, [r2, #0]
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800984e:	b29b      	uxth	r3, r3
 8009850:	4619      	mov	r1, r3
 8009852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009856:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800985a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800985e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8009862:	6812      	ldr	r2, [r2, #0]
 8009864:	440a      	add	r2, r1
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800986c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	011a      	lsls	r2, r3, #4
 8009876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800987a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4413      	add	r3, r2
 8009882:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800988a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800988e:	601a      	str	r2, [r3, #0]
 8009890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d122      	bne.n	80098de <USB_EPStartXfer+0x52e>
 8009898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800989c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	801a      	strh	r2, [r3, #0]
 80098b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	801a      	strh	r2, [r3, #0]
 80098dc:	e083      	b.n	80099e6 <USB_EPStartXfer+0x636>
 80098de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e2:	2b3e      	cmp	r3, #62	; 0x3e
 80098e4:	d81b      	bhi.n	800991e <USB_EPStartXfer+0x56e>
 80098e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098ea:	085b      	lsrs	r3, r3, #1
 80098ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80098f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d004      	beq.n	8009906 <USB_EPStartXfer+0x556>
 80098fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009900:	3301      	adds	r3, #1
 8009902:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009906:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800990a:	b29b      	uxth	r3, r3
 800990c:	029b      	lsls	r3, r3, #10
 800990e:	b29a      	uxth	r2, r3
 8009910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009914:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	801a      	strh	r2, [r3, #0]
 800991c:	e063      	b.n	80099e6 <USB_EPStartXfer+0x636>
 800991e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800992c:	f003 031f 	and.w	r3, r3, #31
 8009930:	2b00      	cmp	r3, #0
 8009932:	d104      	bne.n	800993e <USB_EPStartXfer+0x58e>
 8009934:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009938:	3b01      	subs	r3, #1
 800993a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800993e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009942:	b29b      	uxth	r3, r3
 8009944:	029b      	lsls	r3, r3, #10
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009950:	b29a      	uxth	r2, r3
 8009952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009956:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	801a      	strh	r2, [r3, #0]
 800995e:	e042      	b.n	80099e6 <USB_EPStartXfer+0x636>
 8009960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	785b      	ldrb	r3, [r3, #1]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d13a      	bne.n	80099e6 <USB_EPStartXfer+0x636>
 8009970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009974:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009978:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800997c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009992:	b29b      	uxth	r3, r3
 8009994:	4619      	mov	r1, r3
 8009996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800999a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800999e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80099a2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80099a6:	6812      	ldr	r2, [r2, #0]
 80099a8:	440a      	add	r2, r1
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	011a      	lsls	r2, r3, #4
 80099ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4413      	add	r3, r2
 80099c6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80099ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d8:	b29a      	uxth	r2, r3
 80099da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80099e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	891b      	ldrh	r3, [r3, #8]
 80099f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6959      	ldr	r1, [r3, #20]
 8009a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a0c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009a10:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009a14:	6800      	ldr	r0, [r0, #0]
 8009a16:	f001 fc41 	bl	800b29c <USB_WritePMA>
 8009a1a:	f000 be0e 	b.w	800a63a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d16d      	bne.n	8009b0a <USB_EPStartXfer+0x75a>
 8009a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a4e:	4413      	add	r3, r2
 8009a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	011a      	lsls	r2, r3, #4
 8009a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a62:	4413      	add	r3, r2
 8009a64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a68:	647b      	str	r3, [r7, #68]	; 0x44
 8009a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d112      	bne.n	8009a98 <USB_EPStartXfer+0x6e8>
 8009a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a80:	801a      	strh	r2, [r3, #0]
 8009a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a94:	801a      	strh	r2, [r3, #0]
 8009a96:	e063      	b.n	8009b60 <USB_EPStartXfer+0x7b0>
 8009a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8009a9e:	d817      	bhi.n	8009ad0 <USB_EPStartXfer+0x720>
 8009aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa4:	085b      	lsrs	r3, r3, #1
 8009aa6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d004      	beq.n	8009ac0 <USB_EPStartXfer+0x710>
 8009ab6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009aba:	3301      	adds	r3, #1
 8009abc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009ac0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	029b      	lsls	r3, r3, #10
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009acc:	801a      	strh	r2, [r3, #0]
 8009ace:	e047      	b.n	8009b60 <USB_EPStartXfer+0x7b0>
 8009ad0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad4:	095b      	lsrs	r3, r3, #5
 8009ad6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ade:	f003 031f 	and.w	r3, r3, #31
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d104      	bne.n	8009af0 <USB_EPStartXfer+0x740>
 8009ae6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009aea:	3b01      	subs	r3, #1
 8009aec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009af0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	029b      	lsls	r3, r3, #10
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b06:	801a      	strh	r2, [r3, #0]
 8009b08:	e02a      	b.n	8009b60 <USB_EPStartXfer+0x7b0>
 8009b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d122      	bne.n	8009b60 <USB_EPStartXfer+0x7b0>
 8009b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	653b      	str	r3, [r7, #80]	; 0x50
 8009b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	461a      	mov	r2, r3
 8009b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b3a:	4413      	add	r3, r2
 8009b3c:	653b      	str	r3, [r7, #80]	; 0x50
 8009b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	011a      	lsls	r2, r3, #4
 8009b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b4e:	4413      	add	r3, r2
 8009b50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	891b      	ldrh	r3, [r3, #8]
 8009b6c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6959      	ldr	r1, [r3, #20]
 8009b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009b86:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009b8a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009b8e:	6800      	ldr	r0, [r0, #0]
 8009b90:	f001 fb84 	bl	800b29c <USB_WritePMA>
            ep->xfer_buff += len;
 8009b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	695a      	ldr	r2, [r3, #20]
 8009ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba4:	441a      	add	r2, r3
 8009ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6a1a      	ldr	r2, [r3, #32]
 8009bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d90f      	bls.n	8009bee <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8009bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6a1a      	ldr	r2, [r3, #32]
 8009bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bde:	1ad2      	subs	r2, r2, r3
 8009be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	621a      	str	r2, [r3, #32]
 8009bec:	e00e      	b.n	8009c0c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8009bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8009bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	643b      	str	r3, [r7, #64]	; 0x40
 8009c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d16d      	bne.n	8009d04 <USB_EPStartXfer+0x954>
 8009c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	461a      	mov	r2, r3
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	4413      	add	r3, r2
 8009c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	011a      	lsls	r2, r3, #4
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c62:	637b      	str	r3, [r7, #52]	; 0x34
 8009c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d112      	bne.n	8009c92 <USB_EPStartXfer+0x8e2>
 8009c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7a:	801a      	strh	r2, [r3, #0]
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8e:	801a      	strh	r2, [r3, #0]
 8009c90:	e05d      	b.n	8009d4e <USB_EPStartXfer+0x99e>
 8009c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c96:	2b3e      	cmp	r3, #62	; 0x3e
 8009c98:	d817      	bhi.n	8009cca <USB_EPStartXfer+0x91a>
 8009c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c9e:	085b      	lsrs	r3, r3, #1
 8009ca0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d004      	beq.n	8009cba <USB_EPStartXfer+0x90a>
 8009cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	029b      	lsls	r3, r3, #10
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc6:	801a      	strh	r2, [r3, #0]
 8009cc8:	e041      	b.n	8009d4e <USB_EPStartXfer+0x99e>
 8009cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cce:	095b      	lsrs	r3, r3, #5
 8009cd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd8:	f003 031f 	and.w	r3, r3, #31
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d104      	bne.n	8009cea <USB_EPStartXfer+0x93a>
 8009ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	029b      	lsls	r3, r3, #10
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d00:	801a      	strh	r2, [r3, #0]
 8009d02:	e024      	b.n	8009d4e <USB_EPStartXfer+0x99e>
 8009d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	785b      	ldrb	r3, [r3, #1]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d11c      	bne.n	8009d4e <USB_EPStartXfer+0x99e>
 8009d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	461a      	mov	r2, r3
 8009d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d28:	4413      	add	r3, r2
 8009d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8009d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	011a      	lsls	r2, r3, #4
 8009d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d3c:	4413      	add	r3, r2
 8009d3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	895b      	ldrh	r3, [r3, #10]
 8009d5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6959      	ldr	r1, [r3, #20]
 8009d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009d74:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009d78:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009d7c:	6800      	ldr	r0, [r0, #0]
 8009d7e:	f001 fa8d 	bl	800b29c <USB_WritePMA>
 8009d82:	f000 bc5a 	b.w	800a63a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	441a      	add	r2, r3
 8009dda:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	461a      	mov	r2, r3
 8009e10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e12:	4413      	add	r3, r2
 8009e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	011a      	lsls	r2, r3, #4
 8009e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e26:	4413      	add	r3, r2
 8009e28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	891b      	ldrh	r3, [r3, #8]
 8009e44:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	6959      	ldr	r1, [r3, #20]
 8009e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009e5e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009e62:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009e66:	6800      	ldr	r0, [r0, #0]
 8009e68:	f001 fa18 	bl	800b29c <USB_WritePMA>
 8009e6c:	e3e5      	b.n	800a63a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8009e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e94:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	441a      	add	r2, r3
 8009eb2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ebe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6a1a      	ldr	r2, [r3, #32]
 8009ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eda:	1ad2      	subs	r2, r2, r3
 8009edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ee0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f000 81bc 	beq.w	800a288 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	785b      	ldrb	r3, [r3, #1]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d16d      	bne.n	800a00a <USB_EPStartXfer+0xc5a>
 8009f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f4e:	4413      	add	r3, r2
 8009f50:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	011a      	lsls	r2, r3, #4
 8009f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f62:	4413      	add	r3, r2
 8009f64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f68:	677b      	str	r3, [r7, #116]	; 0x74
 8009f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d112      	bne.n	8009f98 <USB_EPStartXfer+0xbe8>
 8009f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f80:	801a      	strh	r2, [r3, #0]
 8009f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f94:	801a      	strh	r2, [r3, #0]
 8009f96:	e060      	b.n	800a05a <USB_EPStartXfer+0xcaa>
 8009f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8009f9e:	d817      	bhi.n	8009fd0 <USB_EPStartXfer+0xc20>
 8009fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fa4:	085b      	lsrs	r3, r3, #1
 8009fa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d004      	beq.n	8009fc0 <USB_EPStartXfer+0xc10>
 8009fb6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009fba:	3301      	adds	r3, #1
 8009fbc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009fc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	029b      	lsls	r3, r3, #10
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fcc:	801a      	strh	r2, [r3, #0]
 8009fce:	e044      	b.n	800a05a <USB_EPStartXfer+0xcaa>
 8009fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fd4:	095b      	lsrs	r3, r3, #5
 8009fd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fde:	f003 031f 	and.w	r3, r3, #31
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d104      	bne.n	8009ff0 <USB_EPStartXfer+0xc40>
 8009fe6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009fea:	3b01      	subs	r3, #1
 8009fec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009ff0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	029b      	lsls	r3, r3, #10
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a002:	b29a      	uxth	r2, r3
 800a004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a006:	801a      	strh	r2, [r3, #0]
 800a008:	e027      	b.n	800a05a <USB_EPStartXfer+0xcaa>
 800a00a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a00e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	785b      	ldrb	r3, [r3, #1]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d11f      	bne.n	800a05a <USB_EPStartXfer+0xcaa>
 800a01a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a028:	b29b      	uxth	r3, r3
 800a02a:	461a      	mov	r2, r3
 800a02c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a030:	4413      	add	r3, r2
 800a032:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a03a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	011a      	lsls	r2, r3, #4
 800a044:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a048:	4413      	add	r3, r2
 800a04a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a04e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a054:	b29a      	uxth	r2, r3
 800a056:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a058:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a05a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a05e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	895b      	ldrh	r3, [r3, #10]
 800a066:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a06a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a06e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6959      	ldr	r1, [r3, #20]
 800a076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a080:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a084:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a088:	6800      	ldr	r0, [r0, #0]
 800a08a:	f001 f907 	bl	800b29c <USB_WritePMA>
          ep->xfer_buff += len;
 800a08e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	695a      	ldr	r2, [r3, #20]
 800a09a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a09e:	441a      	add	r2, r3
 800a0a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800a0ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6a1a      	ldr	r2, [r3, #32]
 800a0b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d90f      	bls.n	800a0e8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800a0c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6a1a      	ldr	r2, [r3, #32]
 800a0d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0d8:	1ad2      	subs	r2, r2, r3
 800a0da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	621a      	str	r2, [r3, #32]
 800a0e6:	e00e      	b.n	800a106 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800a0e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800a0f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2200      	movs	r2, #0
 800a104:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800a106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 8295 	beq.w	800a63a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	785b      	ldrb	r3, [r3, #1]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d16d      	bne.n	800a1fc <USB_EPStartXfer+0xe4c>
 800a120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a12c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	461a      	mov	r2, r3
 800a13e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a140:	4413      	add	r3, r2
 800a142:	66bb      	str	r3, [r7, #104]	; 0x68
 800a144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	011a      	lsls	r2, r3, #4
 800a152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a154:	4413      	add	r3, r2
 800a156:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a15a:	667b      	str	r3, [r7, #100]	; 0x64
 800a15c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a160:	2b00      	cmp	r3, #0
 800a162:	d112      	bne.n	800a18a <USB_EPStartXfer+0xdda>
 800a164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a166:	881b      	ldrh	r3, [r3, #0]
 800a168:	b29b      	uxth	r3, r3
 800a16a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a16e:	b29a      	uxth	r2, r3
 800a170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a172:	801a      	strh	r2, [r3, #0]
 800a174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a17e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a182:	b29a      	uxth	r2, r3
 800a184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a186:	801a      	strh	r2, [r3, #0]
 800a188:	e063      	b.n	800a252 <USB_EPStartXfer+0xea2>
 800a18a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a18e:	2b3e      	cmp	r3, #62	; 0x3e
 800a190:	d817      	bhi.n	800a1c2 <USB_EPStartXfer+0xe12>
 800a192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a196:	085b      	lsrs	r3, r3, #1
 800a198:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a19c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <USB_EPStartXfer+0xe02>
 800a1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	029b      	lsls	r3, r3, #10
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1be:	801a      	strh	r2, [r3, #0]
 800a1c0:	e047      	b.n	800a252 <USB_EPStartXfer+0xea2>
 800a1c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1c6:	095b      	lsrs	r3, r3, #5
 800a1c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a1cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1d0:	f003 031f 	and.w	r3, r3, #31
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d104      	bne.n	800a1e2 <USB_EPStartXfer+0xe32>
 800a1d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	029b      	lsls	r3, r3, #10
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1f8:	801a      	strh	r2, [r3, #0]
 800a1fa:	e02a      	b.n	800a252 <USB_EPStartXfer+0xea2>
 800a1fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	785b      	ldrb	r3, [r3, #1]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d122      	bne.n	800a252 <USB_EPStartXfer+0xea2>
 800a20c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	673b      	str	r3, [r7, #112]	; 0x70
 800a218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a21c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a226:	b29b      	uxth	r3, r3
 800a228:	461a      	mov	r2, r3
 800a22a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a22c:	4413      	add	r3, r2
 800a22e:	673b      	str	r3, [r7, #112]	; 0x70
 800a230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	011a      	lsls	r2, r3, #4
 800a23e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a240:	4413      	add	r3, r2
 800a242:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a246:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a250:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	891b      	ldrh	r3, [r3, #8]
 800a25e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a266:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6959      	ldr	r1, [r3, #20]
 800a26e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a272:	b29b      	uxth	r3, r3
 800a274:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a278:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a27c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a280:	6800      	ldr	r0, [r0, #0]
 800a282:	f001 f80b 	bl	800b29c <USB_WritePMA>
 800a286:	e1d8      	b.n	800a63a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a28c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	785b      	ldrb	r3, [r3, #1]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d178      	bne.n	800a38a <USB_EPStartXfer+0xfda>
 800a298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a29c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2bc:	4413      	add	r3, r2
 800a2be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a2c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	011a      	lsls	r2, r3, #4
 800a2d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a2da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a2de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d116      	bne.n	800a314 <USB_EPStartXfer+0xf64>
 800a2e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2f8:	801a      	strh	r2, [r3, #0]
 800a2fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	b29b      	uxth	r3, r3
 800a302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a310:	801a      	strh	r2, [r3, #0]
 800a312:	e06b      	b.n	800a3ec <USB_EPStartXfer+0x103c>
 800a314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a318:	2b3e      	cmp	r3, #62	; 0x3e
 800a31a:	d818      	bhi.n	800a34e <USB_EPStartXfer+0xf9e>
 800a31c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a320:	085b      	lsrs	r3, r3, #1
 800a322:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d004      	beq.n	800a33c <USB_EPStartXfer+0xf8c>
 800a332:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a336:	3301      	adds	r3, #1
 800a338:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a33c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a340:	b29b      	uxth	r3, r3
 800a342:	029b      	lsls	r3, r3, #10
 800a344:	b29a      	uxth	r2, r3
 800a346:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a34a:	801a      	strh	r2, [r3, #0]
 800a34c:	e04e      	b.n	800a3ec <USB_EPStartXfer+0x103c>
 800a34e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a352:	095b      	lsrs	r3, r3, #5
 800a354:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a358:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a35c:	f003 031f 	and.w	r3, r3, #31
 800a360:	2b00      	cmp	r3, #0
 800a362:	d104      	bne.n	800a36e <USB_EPStartXfer+0xfbe>
 800a364:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a368:	3b01      	subs	r3, #1
 800a36a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a36e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a372:	b29b      	uxth	r3, r3
 800a374:	029b      	lsls	r3, r3, #10
 800a376:	b29b      	uxth	r3, r3
 800a378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a37c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a380:	b29a      	uxth	r2, r3
 800a382:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a386:	801a      	strh	r2, [r3, #0]
 800a388:	e030      	b.n	800a3ec <USB_EPStartXfer+0x103c>
 800a38a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a38e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d128      	bne.n	800a3ec <USB_EPStartXfer+0x103c>
 800a39a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a3a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3be:	4413      	add	r3, r2
 800a3c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a3c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	011a      	lsls	r2, r3, #4
 800a3d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a3e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a3ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a3ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	891b      	ldrh	r3, [r3, #8]
 800a3f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6959      	ldr	r1, [r3, #20]
 800a408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a412:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a416:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a41a:	6800      	ldr	r0, [r0, #0]
 800a41c:	f000 ff3e 	bl	800b29c <USB_WritePMA>
          ep->xfer_buff += len;
 800a420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	695a      	ldr	r2, [r3, #20]
 800a42c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a430:	441a      	add	r2, r3
 800a432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800a43e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6a1a      	ldr	r2, [r3, #32]
 800a44a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a44e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	429a      	cmp	r2, r3
 800a458:	d90f      	bls.n	800a47a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800a45a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a45e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	6a1a      	ldr	r2, [r3, #32]
 800a466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a46a:	1ad2      	subs	r2, r2, r3
 800a46c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	621a      	str	r2, [r3, #32]
 800a478:	e00e      	b.n	800a498 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800a47a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a47e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800a48a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a48e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2200      	movs	r2, #0
 800a496:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800a498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 80cc 	beq.w	800a63a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	785b      	ldrb	r3, [r3, #1]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d178      	bne.n	800a5b2 <USB_EPStartXfer+0x1202>
 800a4c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a4ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a4ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	011a      	lsls	r2, r3, #4
 800a4f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d116      	bne.n	800a53c <USB_EPStartXfer+0x118c>
 800a50e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	b29b      	uxth	r3, r3
 800a516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a520:	801a      	strh	r2, [r3, #0]
 800a522:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a52e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a532:	b29a      	uxth	r2, r3
 800a534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a538:	801a      	strh	r2, [r3, #0]
 800a53a:	e064      	b.n	800a606 <USB_EPStartXfer+0x1256>
 800a53c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a540:	2b3e      	cmp	r3, #62	; 0x3e
 800a542:	d818      	bhi.n	800a576 <USB_EPStartXfer+0x11c6>
 800a544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a548:	085b      	lsrs	r3, r3, #1
 800a54a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a54e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	d004      	beq.n	800a564 <USB_EPStartXfer+0x11b4>
 800a55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a55e:	3301      	adds	r3, #1
 800a560:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a568:	b29b      	uxth	r3, r3
 800a56a:	029b      	lsls	r3, r3, #10
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a572:	801a      	strh	r2, [r3, #0]
 800a574:	e047      	b.n	800a606 <USB_EPStartXfer+0x1256>
 800a576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a57a:	095b      	lsrs	r3, r3, #5
 800a57c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a584:	f003 031f 	and.w	r3, r3, #31
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d104      	bne.n	800a596 <USB_EPStartXfer+0x11e6>
 800a58c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a590:	3b01      	subs	r3, #1
 800a592:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	029b      	lsls	r3, r3, #10
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5ae:	801a      	strh	r2, [r3, #0]
 800a5b0:	e029      	b.n	800a606 <USB_EPStartXfer+0x1256>
 800a5b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	785b      	ldrb	r3, [r3, #1]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d121      	bne.n	800a606 <USB_EPStartXfer+0x1256>
 800a5c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5d8:	4413      	add	r3, r2
 800a5da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a5de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	011a      	lsls	r2, r3, #4
 800a5ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a5f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a5fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a604:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a60a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	895b      	ldrh	r3, [r3, #10]
 800a612:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a61a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6959      	ldr	r1, [r3, #20]
 800a622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a626:	b29b      	uxth	r3, r3
 800a628:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a62c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a630:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a634:	6800      	ldr	r0, [r0, #0]
 800a636:	f000 fe31 	bl	800b29c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a63a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a63e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4413      	add	r3, r2
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	b29b      	uxth	r3, r3
 800a658:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a65c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a668:	8013      	strh	r3, [r2, #0]
 800a66a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a66e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a672:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a676:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a67a:	8812      	ldrh	r2, [r2, #0]
 800a67c:	f082 0210 	eor.w	r2, r2, #16
 800a680:	801a      	strh	r2, [r3, #0]
 800a682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a686:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a68a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a68e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a692:	8812      	ldrh	r2, [r2, #0]
 800a694:	f082 0220 	eor.w	r2, r2, #32
 800a698:	801a      	strh	r2, [r3, #0]
 800a69a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a69e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	441a      	add	r2, r3
 800a6b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	8013      	strh	r3, [r2, #0]
 800a6d2:	f000 bc9f 	b.w	800b014 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a6d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	7b1b      	ldrb	r3, [r3, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f040 80ae 	bne.w	800a844 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a6e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	699a      	ldr	r2, [r3, #24]
 800a6f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	429a      	cmp	r2, r3
 800a702:	d917      	bls.n	800a734 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800a704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	699a      	ldr	r2, [r3, #24]
 800a720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a724:	1ad2      	subs	r2, r2, r3
 800a726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a72a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	619a      	str	r2, [r3, #24]
 800a732:	e00e      	b.n	800a752 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800a734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	699b      	ldr	r3, [r3, #24]
 800a740:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2200      	movs	r2, #0
 800a750:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a756:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a76e:	b29b      	uxth	r3, r3
 800a770:	461a      	mov	r2, r3
 800a772:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a776:	4413      	add	r3, r2
 800a778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a77c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	011a      	lsls	r2, r3, #4
 800a78a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a78e:	4413      	add	r3, r2
 800a790:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d116      	bne.n	800a7ce <USB_EPStartXfer+0x141e>
 800a7a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7a4:	881b      	ldrh	r3, [r3, #0]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7b2:	801a      	strh	r2, [r3, #0]
 800a7b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7ca:	801a      	strh	r2, [r3, #0]
 800a7cc:	e3e8      	b.n	800afa0 <USB_EPStartXfer+0x1bf0>
 800a7ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7d2:	2b3e      	cmp	r3, #62	; 0x3e
 800a7d4:	d818      	bhi.n	800a808 <USB_EPStartXfer+0x1458>
 800a7d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7da:	085b      	lsrs	r3, r3, #1
 800a7dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a7e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7e4:	f003 0301 	and.w	r3, r3, #1
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d004      	beq.n	800a7f6 <USB_EPStartXfer+0x1446>
 800a7ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a7f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	029b      	lsls	r3, r3, #10
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a804:	801a      	strh	r2, [r3, #0]
 800a806:	e3cb      	b.n	800afa0 <USB_EPStartXfer+0x1bf0>
 800a808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a80c:	095b      	lsrs	r3, r3, #5
 800a80e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a816:	f003 031f 	and.w	r3, r3, #31
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d104      	bne.n	800a828 <USB_EPStartXfer+0x1478>
 800a81e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a822:	3b01      	subs	r3, #1
 800a824:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a828:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	029b      	lsls	r3, r3, #10
 800a830:	b29b      	uxth	r3, r3
 800a832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a840:	801a      	strh	r2, [r3, #0]
 800a842:	e3ad      	b.n	800afa0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	78db      	ldrb	r3, [r3, #3]
 800a850:	2b02      	cmp	r3, #2
 800a852:	f040 8200 	bne.w	800ac56 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a85a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	785b      	ldrb	r3, [r3, #1]
 800a862:	2b00      	cmp	r3, #0
 800a864:	f040 8091 	bne.w	800a98a <USB_EPStartXfer+0x15da>
 800a868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a86c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a87a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a884:	b29b      	uxth	r3, r3
 800a886:	461a      	mov	r2, r3
 800a888:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a88c:	4413      	add	r3, r2
 800a88e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	011a      	lsls	r2, r3, #4
 800a8a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a8a4:	4413      	add	r3, r2
 800a8a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d116      	bne.n	800a8ec <USB_EPStartXfer+0x153c>
 800a8be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8c2:	881b      	ldrh	r3, [r3, #0]
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8d0:	801a      	strh	r2, [r3, #0]
 800a8d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8e8:	801a      	strh	r2, [r3, #0]
 800a8ea:	e083      	b.n	800a9f4 <USB_EPStartXfer+0x1644>
 800a8ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	691b      	ldr	r3, [r3, #16]
 800a8f8:	2b3e      	cmp	r3, #62	; 0x3e
 800a8fa:	d820      	bhi.n	800a93e <USB_EPStartXfer+0x158e>
 800a8fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	085b      	lsrs	r3, r3, #1
 800a90a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a90e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d004      	beq.n	800a92c <USB_EPStartXfer+0x157c>
 800a922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a926:	3301      	adds	r3, #1
 800a928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a930:	b29b      	uxth	r3, r3
 800a932:	029b      	lsls	r3, r3, #10
 800a934:	b29a      	uxth	r2, r3
 800a936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a93a:	801a      	strh	r2, [r3, #0]
 800a93c:	e05a      	b.n	800a9f4 <USB_EPStartXfer+0x1644>
 800a93e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	095b      	lsrs	r3, r3, #5
 800a94c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	f003 031f 	and.w	r3, r3, #31
 800a960:	2b00      	cmp	r3, #0
 800a962:	d104      	bne.n	800a96e <USB_EPStartXfer+0x15be>
 800a964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a968:	3b01      	subs	r3, #1
 800a96a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a972:	b29b      	uxth	r3, r3
 800a974:	029b      	lsls	r3, r3, #10
 800a976:	b29b      	uxth	r3, r3
 800a978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a97c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a980:	b29a      	uxth	r2, r3
 800a982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a986:	801a      	strh	r2, [r3, #0]
 800a988:	e034      	b.n	800a9f4 <USB_EPStartXfer+0x1644>
 800a98a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a98e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	785b      	ldrb	r3, [r3, #1]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d12c      	bne.n	800a9f4 <USB_EPStartXfer+0x1644>
 800a99a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a99e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a9a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9be:	4413      	add	r3, r2
 800a9c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a9c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	011a      	lsls	r2, r3, #4
 800a9d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a9e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a9f2:	801a      	strh	r2, [r3, #0]
 800a9f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f040 8091 	bne.w	800ab36 <USB_EPStartXfer+0x1786>
 800aa14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800aa22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	461a      	mov	r2, r3
 800aa34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa38:	4413      	add	r3, r2
 800aa3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800aa3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	011a      	lsls	r2, r3, #4
 800aa4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aa50:	4413      	add	r3, r2
 800aa52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aa56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d116      	bne.n	800aa98 <USB_EPStartXfer+0x16e8>
 800aa6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa7c:	801a      	strh	r2, [r3, #0]
 800aa7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa94:	801a      	strh	r2, [r3, #0]
 800aa96:	e07c      	b.n	800ab92 <USB_EPStartXfer+0x17e2>
 800aa98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	2b3e      	cmp	r3, #62	; 0x3e
 800aaa6:	d820      	bhi.n	800aaea <USB_EPStartXfer+0x173a>
 800aaa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	085b      	lsrs	r3, r3, #1
 800aab6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aaba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aabe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d004      	beq.n	800aad8 <USB_EPStartXfer+0x1728>
 800aace:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aad2:	3301      	adds	r3, #1
 800aad4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aad8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800aadc:	b29b      	uxth	r3, r3
 800aade:	029b      	lsls	r3, r3, #10
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aae6:	801a      	strh	r2, [r3, #0]
 800aae8:	e053      	b.n	800ab92 <USB_EPStartXfer+0x17e2>
 800aaea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	095b      	lsrs	r3, r3, #5
 800aaf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aafc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	f003 031f 	and.w	r3, r3, #31
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d104      	bne.n	800ab1a <USB_EPStartXfer+0x176a>
 800ab10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ab14:	3b01      	subs	r3, #1
 800ab16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ab1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	029b      	lsls	r3, r3, #10
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab32:	801a      	strh	r2, [r3, #0]
 800ab34:	e02d      	b.n	800ab92 <USB_EPStartXfer+0x17e2>
 800ab36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	785b      	ldrb	r3, [r3, #1]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d125      	bne.n	800ab92 <USB_EPStartXfer+0x17e2>
 800ab46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	461a      	mov	r2, r3
 800ab58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab5c:	4413      	add	r3, r2
 800ab5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	011a      	lsls	r2, r3, #4
 800ab70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab74:	4413      	add	r3, r2
 800ab76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab90:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ab92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 81fe 	beq.w	800afa0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800abc4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800abc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d005      	beq.n	800abdc <USB_EPStartXfer+0x182c>
 800abd0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800abd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10d      	bne.n	800abf8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800abdc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800abe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f040 81db 	bne.w	800afa0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800abea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800abee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f040 81d4 	bne.w	800afa0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800abf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac1e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800ac22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	441a      	add	r2, r3
 800ac3c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800ac40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	8013      	strh	r3, [r2, #0]
 800ac54:	e1a4      	b.n	800afa0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ac56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	78db      	ldrb	r3, [r3, #3]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	f040 819a 	bne.w	800af9c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ac68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	699a      	ldr	r2, [r3, #24]
 800ac74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d917      	bls.n	800acb4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800ac84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800ac94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	699a      	ldr	r2, [r3, #24]
 800aca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aca4:	1ad2      	subs	r2, r2, r3
 800aca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	619a      	str	r2, [r3, #24]
 800acb2:	e00e      	b.n	800acd2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800acb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800acc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	2200      	movs	r2, #0
 800acd0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800acd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	785b      	ldrb	r3, [r3, #1]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d178      	bne.n	800add4 <USB_EPStartXfer+0x1a24>
 800ace2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ace6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	461a      	mov	r2, r3
 800ad02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad06:	4413      	add	r3, r2
 800ad08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	011a      	lsls	r2, r3, #4
 800ad1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad1e:	4413      	add	r3, r2
 800ad20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d116      	bne.n	800ad5e <USB_EPStartXfer+0x19ae>
 800ad30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad42:	801a      	strh	r2, [r3, #0]
 800ad44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad5a:	801a      	strh	r2, [r3, #0]
 800ad5c:	e06b      	b.n	800ae36 <USB_EPStartXfer+0x1a86>
 800ad5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad62:	2b3e      	cmp	r3, #62	; 0x3e
 800ad64:	d818      	bhi.n	800ad98 <USB_EPStartXfer+0x19e8>
 800ad66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad6a:	085b      	lsrs	r3, r3, #1
 800ad6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d004      	beq.n	800ad86 <USB_EPStartXfer+0x19d6>
 800ad7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad80:	3301      	adds	r3, #1
 800ad82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	029b      	lsls	r3, r3, #10
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad94:	801a      	strh	r2, [r3, #0]
 800ad96:	e04e      	b.n	800ae36 <USB_EPStartXfer+0x1a86>
 800ad98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad9c:	095b      	lsrs	r3, r3, #5
 800ad9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ada2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ada6:	f003 031f 	and.w	r3, r3, #31
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d104      	bne.n	800adb8 <USB_EPStartXfer+0x1a08>
 800adae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adb2:	3b01      	subs	r3, #1
 800adb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800adb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	029b      	lsls	r3, r3, #10
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adca:	b29a      	uxth	r2, r3
 800adcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800add0:	801a      	strh	r2, [r3, #0]
 800add2:	e030      	b.n	800ae36 <USB_EPStartXfer+0x1a86>
 800add4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800add8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	785b      	ldrb	r3, [r3, #1]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d128      	bne.n	800ae36 <USB_EPStartXfer+0x1a86>
 800ade4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ade8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800adf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	461a      	mov	r2, r3
 800ae04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae08:	4413      	add	r3, r2
 800ae0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ae0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	011a      	lsls	r2, r3, #4
 800ae1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae20:	4413      	add	r3, r2
 800ae22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ae26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ae34:	801a      	strh	r2, [r3, #0]
 800ae36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ae44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	785b      	ldrb	r3, [r3, #1]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d178      	bne.n	800af46 <USB_EPStartXfer+0x1b96>
 800ae54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	461a      	mov	r2, r3
 800ae74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae78:	4413      	add	r3, r2
 800ae7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	011a      	lsls	r2, r3, #4
 800ae8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae90:	4413      	add	r3, r2
 800ae92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ae96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d116      	bne.n	800aed0 <USB_EPStartXfer+0x1b20>
 800aea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aeb4:	801a      	strh	r2, [r3, #0]
 800aeb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aecc:	801a      	strh	r2, [r3, #0]
 800aece:	e067      	b.n	800afa0 <USB_EPStartXfer+0x1bf0>
 800aed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aed4:	2b3e      	cmp	r3, #62	; 0x3e
 800aed6:	d818      	bhi.n	800af0a <USB_EPStartXfer+0x1b5a>
 800aed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aedc:	085b      	lsrs	r3, r3, #1
 800aede:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d004      	beq.n	800aef8 <USB_EPStartXfer+0x1b48>
 800aeee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aef2:	3301      	adds	r3, #1
 800aef4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aef8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	029b      	lsls	r3, r3, #10
 800af00:	b29a      	uxth	r2, r3
 800af02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af06:	801a      	strh	r2, [r3, #0]
 800af08:	e04a      	b.n	800afa0 <USB_EPStartXfer+0x1bf0>
 800af0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af0e:	095b      	lsrs	r3, r3, #5
 800af10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af18:	f003 031f 	and.w	r3, r3, #31
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d104      	bne.n	800af2a <USB_EPStartXfer+0x1b7a>
 800af20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af24:	3b01      	subs	r3, #1
 800af26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800af2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af2e:	b29b      	uxth	r3, r3
 800af30:	029b      	lsls	r3, r3, #10
 800af32:	b29b      	uxth	r3, r3
 800af34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af3c:	b29a      	uxth	r2, r3
 800af3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af42:	801a      	strh	r2, [r3, #0]
 800af44:	e02c      	b.n	800afa0 <USB_EPStartXfer+0x1bf0>
 800af46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	785b      	ldrb	r3, [r3, #1]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d124      	bne.n	800afa0 <USB_EPStartXfer+0x1bf0>
 800af56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af64:	b29b      	uxth	r3, r3
 800af66:	461a      	mov	r2, r3
 800af68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af6c:	4413      	add	r3, r2
 800af6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	011a      	lsls	r2, r3, #4
 800af80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af84:	4413      	add	r3, r2
 800af86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800af8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af92:	b29a      	uxth	r2, r3
 800af94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af98:	801a      	strh	r2, [r3, #0]
 800af9a:	e001      	b.n	800afa0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e03a      	b.n	800b016 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	4413      	add	r3, r2
 800afba:	881b      	ldrh	r3, [r3, #0]
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afc6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800afca:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800afce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800afd2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800afd6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800afda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800afde:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800afe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	441a      	add	r2, r3
 800affc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b010:	b29b      	uxth	r3, r3
 800b012:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	785b      	ldrb	r3, [r3, #1]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d020      	beq.n	800b074 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	b29b      	uxth	r3, r3
 800b040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b048:	81bb      	strh	r3, [r7, #12]
 800b04a:	89bb      	ldrh	r3, [r7, #12]
 800b04c:	f083 0310 	eor.w	r3, r3, #16
 800b050:	81bb      	strh	r3, [r7, #12]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	441a      	add	r2, r3
 800b05c:	89bb      	ldrh	r3, [r7, #12]
 800b05e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b06a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b06e:	b29b      	uxth	r3, r3
 800b070:	8013      	strh	r3, [r2, #0]
 800b072:	e01f      	b.n	800b0b4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	4413      	add	r3, r2
 800b07e:	881b      	ldrh	r3, [r3, #0]
 800b080:	b29b      	uxth	r3, r3
 800b082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b08a:	81fb      	strh	r3, [r7, #14]
 800b08c:	89fb      	ldrh	r3, [r7, #14]
 800b08e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b092:	81fb      	strh	r3, [r7, #14]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	441a      	add	r2, r3
 800b09e:	89fb      	ldrh	r3, [r7, #14]
 800b0a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bc80      	pop	{r7}
 800b0be:	4770      	bx	lr

0800b0c0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	7b1b      	ldrb	r3, [r3, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f040 809d 	bne.w	800b20e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	785b      	ldrb	r3, [r3, #1]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d04c      	beq.n	800b176 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	881b      	ldrh	r3, [r3, #0]
 800b0e8:	823b      	strh	r3, [r7, #16]
 800b0ea:	8a3b      	ldrh	r3, [r7, #16]
 800b0ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d01b      	beq.n	800b12c <USB_EPClearStall+0x6c>
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	b29b      	uxth	r3, r3
 800b102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b10a:	81fb      	strh	r3, [r7, #14]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	441a      	add	r2, r3
 800b116:	89fb      	ldrh	r3, [r7, #14]
 800b118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b11c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b124:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b128:	b29b      	uxth	r3, r3
 800b12a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	78db      	ldrb	r3, [r3, #3]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d06c      	beq.n	800b20e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	b29b      	uxth	r3, r3
 800b142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b14a:	81bb      	strh	r3, [r7, #12]
 800b14c:	89bb      	ldrh	r3, [r7, #12]
 800b14e:	f083 0320 	eor.w	r3, r3, #32
 800b152:	81bb      	strh	r3, [r7, #12]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	441a      	add	r2, r3
 800b15e:	89bb      	ldrh	r3, [r7, #12]
 800b160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b16c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b170:	b29b      	uxth	r3, r3
 800b172:	8013      	strh	r3, [r2, #0]
 800b174:	e04b      	b.n	800b20e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	82fb      	strh	r3, [r7, #22]
 800b184:	8afb      	ldrh	r3, [r7, #22]
 800b186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d01b      	beq.n	800b1c6 <USB_EPClearStall+0x106>
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1a4:	82bb      	strh	r3, [r7, #20]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	441a      	add	r2, r3
 800b1b0:	8abb      	ldrh	r3, [r7, #20]
 800b1b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b1be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1dc:	827b      	strh	r3, [r7, #18]
 800b1de:	8a7b      	ldrh	r3, [r7, #18]
 800b1e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b1e4:	827b      	strh	r3, [r7, #18]
 800b1e6:	8a7b      	ldrh	r3, [r7, #18]
 800b1e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b1ec:	827b      	strh	r3, [r7, #18]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	441a      	add	r2, r3
 800b1f8:	8a7b      	ldrh	r3, [r7, #18]
 800b1fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	371c      	adds	r7, #28
 800b214:	46bd      	mov	sp, r7
 800b216:	bc80      	pop	{r7}
 800b218:	4770      	bx	lr

0800b21a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b21a:	b480      	push	{r7}
 800b21c:	b083      	sub	sp, #12
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	460b      	mov	r3, r1
 800b224:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b226:	78fb      	ldrb	r3, [r7, #3]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d103      	bne.n	800b234 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2280      	movs	r2, #128	; 0x80
 800b230:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bc80      	pop	{r7}
 800b23e:	4770      	bx	lr

0800b240 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	370c      	adds	r7, #12
 800b24e:	46bd      	mov	sp, r7
 800b250:	bc80      	pop	{r7}
 800b252:	4770      	bx	lr

0800b254 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	bc80      	pop	{r7}
 800b266:	4770      	bx	lr

0800b268 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b276:	b29b      	uxth	r3, r3
 800b278:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b27a:	68fb      	ldr	r3, [r7, #12]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	bc80      	pop	{r7}
 800b284:	4770      	bx	lr

0800b286 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b286:	b480      	push	{r7}
 800b288:	b083      	sub	sp, #12
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	bc80      	pop	{r7}
 800b29a:	4770      	bx	lr

0800b29c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b08d      	sub	sp, #52	; 0x34
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	80fb      	strh	r3, [r7, #6]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b2b2:	88bb      	ldrh	r3, [r7, #4]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	085b      	lsrs	r3, r3, #1
 800b2b8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2c2:	88fb      	ldrh	r3, [r7, #6]
 800b2c4:	005a      	lsls	r2, r3, #1
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2ce:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2d4:	e01e      	b.n	800b314 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	3301      	adds	r3, #1
 800b2e0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	021b      	lsls	r3, r3, #8
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fe:	3302      	adds	r3, #2
 800b300:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800b302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b304:	3302      	adds	r3, #2
 800b306:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	3301      	adds	r3, #1
 800b30c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b310:	3b01      	subs	r3, #1
 800b312:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1dd      	bne.n	800b2d6 <USB_WritePMA+0x3a>
  }
}
 800b31a:	bf00      	nop
 800b31c:	bf00      	nop
 800b31e:	3734      	adds	r7, #52	; 0x34
 800b320:	46bd      	mov	sp, r7
 800b322:	bc80      	pop	{r7}
 800b324:	4770      	bx	lr

0800b326 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b326:	b480      	push	{r7}
 800b328:	b08b      	sub	sp, #44	; 0x2c
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	60f8      	str	r0, [r7, #12]
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	4611      	mov	r1, r2
 800b332:	461a      	mov	r2, r3
 800b334:	460b      	mov	r3, r1
 800b336:	80fb      	strh	r3, [r7, #6]
 800b338:	4613      	mov	r3, r2
 800b33a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b33c:	88bb      	ldrh	r3, [r7, #4]
 800b33e:	085b      	lsrs	r3, r3, #1
 800b340:	b29b      	uxth	r3, r3
 800b342:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b34c:	88fb      	ldrh	r3, [r7, #6]
 800b34e:	005a      	lsls	r2, r3, #1
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	4413      	add	r3, r2
 800b354:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b358:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	627b      	str	r3, [r7, #36]	; 0x24
 800b35e:	e01b      	b.n	800b398 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	881b      	ldrh	r3, [r3, #0]
 800b364:	b29b      	uxth	r3, r3
 800b366:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	3302      	adds	r3, #2
 800b36c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	b2da      	uxtb	r2, r3
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	3301      	adds	r3, #1
 800b37a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	0a1b      	lsrs	r3, r3, #8
 800b380:	b2da      	uxtb	r2, r3
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	3301      	adds	r3, #1
 800b38a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	3302      	adds	r3, #2
 800b390:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800b392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b394:	3b01      	subs	r3, #1
 800b396:	627b      	str	r3, [r7, #36]	; 0x24
 800b398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e0      	bne.n	800b360 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b39e:	88bb      	ldrh	r3, [r7, #4]
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d007      	beq.n	800b3ba <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	b2da      	uxtb	r2, r3
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	701a      	strb	r2, [r3, #0]
  }
}
 800b3ba:	bf00      	nop
 800b3bc:	372c      	adds	r7, #44	; 0x2c
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bc80      	pop	{r7}
 800b3c2:	4770      	bx	lr

0800b3c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	7c1b      	ldrb	r3, [r3, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d115      	bne.n	800b408 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b3dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	2181      	movs	r1, #129	; 0x81
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f001 feac 	bl	800d142 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b3f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3f4:	2202      	movs	r2, #2
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f001 fea2 	bl	800d142 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b406:	e012      	b.n	800b42e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b408:	2340      	movs	r3, #64	; 0x40
 800b40a:	2202      	movs	r2, #2
 800b40c:	2181      	movs	r1, #129	; 0x81
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f001 fe97 	bl	800d142 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b41a:	2340      	movs	r3, #64	; 0x40
 800b41c:	2202      	movs	r2, #2
 800b41e:	2101      	movs	r1, #1
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 fe8e 	bl	800d142 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b42e:	2308      	movs	r3, #8
 800b430:	2203      	movs	r2, #3
 800b432:	2182      	movs	r1, #130	; 0x82
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f001 fe84 	bl	800d142 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b440:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b444:	f001 ffa4 	bl	800d390 <USBD_static_malloc>
 800b448:	4602      	mov	r2, r0
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b456:	2b00      	cmp	r3, #0
 800b458:	d102      	bne.n	800b460 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b45a:	2301      	movs	r3, #1
 800b45c:	73fb      	strb	r3, [r7, #15]
 800b45e:	e026      	b.n	800b4ae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b466:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	2200      	movs	r2, #0
 800b476:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	7c1b      	ldrb	r3, [r3, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d109      	bne.n	800b49e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b490:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b494:	2101      	movs	r1, #1
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f001 ff44 	bl	800d324 <USBD_LL_PrepareReceive>
 800b49c:	e007      	b.n	800b4ae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4a4:	2340      	movs	r3, #64	; 0x40
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 ff3b 	bl	800d324 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b4c8:	2181      	movs	r1, #129	; 0x81
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 fe5f 	bl	800d18e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f001 fe58 	bl	800d18e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b4e6:	2182      	movs	r1, #130	; 0x82
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 fe50 	bl	800d18e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00e      	beq.n	800b51c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b50e:	4618      	mov	r0, r3
 800b510:	f001 ff4a 	bl	800d3a8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b086      	sub	sp, #24
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b536:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b538:	2300      	movs	r3, #0
 800b53a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b53c:	2300      	movs	r3, #0
 800b53e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b540:	2300      	movs	r3, #0
 800b542:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d039      	beq.n	800b5c4 <USBD_CDC_Setup+0x9e>
 800b550:	2b20      	cmp	r3, #32
 800b552:	d17f      	bne.n	800b654 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	88db      	ldrh	r3, [r3, #6]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d029      	beq.n	800b5b0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	b25b      	sxtb	r3, r3
 800b562:	2b00      	cmp	r3, #0
 800b564:	da11      	bge.n	800b58a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b572:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	88d2      	ldrh	r2, [r2, #6]
 800b578:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b57a:	6939      	ldr	r1, [r7, #16]
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	88db      	ldrh	r3, [r3, #6]
 800b580:	461a      	mov	r2, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f001 fa09 	bl	800c99a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b588:	e06b      	b.n	800b662 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	785a      	ldrb	r2, [r3, #1]
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	88db      	ldrh	r3, [r3, #6]
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b5a0:	6939      	ldr	r1, [r7, #16]
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	88db      	ldrh	r3, [r3, #6]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f001 fa24 	bl	800c9f6 <USBD_CtlPrepareRx>
      break;
 800b5ae:	e058      	b.n	800b662 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	683a      	ldr	r2, [r7, #0]
 800b5ba:	7850      	ldrb	r0, [r2, #1]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	6839      	ldr	r1, [r7, #0]
 800b5c0:	4798      	blx	r3
      break;
 800b5c2:	e04e      	b.n	800b662 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	785b      	ldrb	r3, [r3, #1]
 800b5c8:	2b0b      	cmp	r3, #11
 800b5ca:	d02e      	beq.n	800b62a <USBD_CDC_Setup+0x104>
 800b5cc:	2b0b      	cmp	r3, #11
 800b5ce:	dc38      	bgt.n	800b642 <USBD_CDC_Setup+0x11c>
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <USBD_CDC_Setup+0xb4>
 800b5d4:	2b0a      	cmp	r3, #10
 800b5d6:	d014      	beq.n	800b602 <USBD_CDC_Setup+0xdc>
 800b5d8:	e033      	b.n	800b642 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e0:	2b03      	cmp	r3, #3
 800b5e2:	d107      	bne.n	800b5f4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b5e4:	f107 030c 	add.w	r3, r7, #12
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f001 f9d4 	bl	800c99a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5f2:	e02e      	b.n	800b652 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f001 f965 	bl	800c8c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	75fb      	strb	r3, [r7, #23]
          break;
 800b600:	e027      	b.n	800b652 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b608:	2b03      	cmp	r3, #3
 800b60a:	d107      	bne.n	800b61c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b60c:	f107 030f 	add.w	r3, r7, #15
 800b610:	2201      	movs	r2, #1
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f001 f9c0 	bl	800c99a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b61a:	e01a      	b.n	800b652 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f001 f951 	bl	800c8c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b624:	2302      	movs	r3, #2
 800b626:	75fb      	strb	r3, [r7, #23]
          break;
 800b628:	e013      	b.n	800b652 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b630:	2b03      	cmp	r3, #3
 800b632:	d00d      	beq.n	800b650 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b634:	6839      	ldr	r1, [r7, #0]
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f001 f945 	bl	800c8c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800b63c:	2302      	movs	r3, #2
 800b63e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b640:	e006      	b.n	800b650 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f001 f93e 	bl	800c8c6 <USBD_CtlError>
          ret = USBD_FAIL;
 800b64a:	2302      	movs	r3, #2
 800b64c:	75fb      	strb	r3, [r7, #23]
          break;
 800b64e:	e000      	b.n	800b652 <USBD_CDC_Setup+0x12c>
          break;
 800b650:	bf00      	nop
      }
      break;
 800b652:	e006      	b.n	800b662 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b654:	6839      	ldr	r1, [r7, #0]
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f001 f935 	bl	800c8c6 <USBD_CtlError>
      ret = USBD_FAIL;
 800b65c:	2302      	movs	r3, #2
 800b65e:	75fb      	strb	r3, [r7, #23]
      break;
 800b660:	bf00      	nop
  }

  return ret;
 800b662:	7dfb      	ldrb	r3, [r7, #23]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3718      	adds	r7, #24
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b67e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b686:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d03a      	beq.n	800b708 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b692:	78fa      	ldrb	r2, [r7, #3]
 800b694:	6879      	ldr	r1, [r7, #4]
 800b696:	4613      	mov	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4413      	add	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	440b      	add	r3, r1
 800b6a0:	331c      	adds	r3, #28
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d029      	beq.n	800b6fc <USBD_CDC_DataIn+0x90>
 800b6a8:	78fa      	ldrb	r2, [r7, #3]
 800b6aa:	6879      	ldr	r1, [r7, #4]
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	4413      	add	r3, r2
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	440b      	add	r3, r1
 800b6b6:	331c      	adds	r3, #28
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	78f9      	ldrb	r1, [r7, #3]
 800b6bc:	68b8      	ldr	r0, [r7, #8]
 800b6be:	460b      	mov	r3, r1
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	440b      	add	r3, r1
 800b6c4:	00db      	lsls	r3, r3, #3
 800b6c6:	4403      	add	r3, r0
 800b6c8:	3338      	adds	r3, #56	; 0x38
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6d0:	fb01 f303 	mul.w	r3, r1, r3
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d110      	bne.n	800b6fc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b6da:	78fa      	ldrb	r2, [r7, #3]
 800b6dc:	6879      	ldr	r1, [r7, #4]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4413      	add	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	440b      	add	r3, r1
 800b6e8:	331c      	adds	r3, #28
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b6ee:	78f9      	ldrb	r1, [r7, #3]
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f001 fdf2 	bl	800d2de <USBD_LL_Transmit>
 800b6fa:	e003      	b.n	800b704 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	e000      	b.n	800b70a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b708:	2302      	movs	r3, #2
  }
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b084      	sub	sp, #16
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	460b      	mov	r3, r1
 800b71c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b724:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b726:	78fb      	ldrb	r3, [r7, #3]
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f001 fe1d 	bl	800d36a <USBD_LL_GetRxDataSize>
 800b730:	4602      	mov	r2, r0
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00d      	beq.n	800b75e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b756:	4611      	mov	r1, r2
 800b758:	4798      	blx	r3

    return USBD_OK;
 800b75a:	2300      	movs	r3, #0
 800b75c:	e000      	b.n	800b760 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b75e:	2302      	movs	r3, #2
  }
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b776:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d015      	beq.n	800b7ae <USBD_CDC_EP0_RxReady+0x46>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b788:	2bff      	cmp	r3, #255	; 0xff
 800b78a:	d010      	beq.n	800b7ae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b79a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7a2:	b292      	uxth	r2, r2
 800b7a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	22ff      	movs	r2, #255	; 0xff
 800b7aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2243      	movs	r2, #67	; 0x43
 800b7c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b7c6:	4b03      	ldr	r3, [pc, #12]	; (800b7d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bc80      	pop	{r7}
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	2000009c 	.word	0x2000009c

0800b7d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2243      	movs	r2, #67	; 0x43
 800b7e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b7e6:	4b03      	ldr	r3, [pc, #12]	; (800b7f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bc80      	pop	{r7}
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20000058 	.word	0x20000058

0800b7f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2243      	movs	r2, #67	; 0x43
 800b804:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b806:	4b03      	ldr	r3, [pc, #12]	; (800b814 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b808:	4618      	mov	r0, r3
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bc80      	pop	{r7}
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	200000e0 	.word	0x200000e0

0800b818 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	220a      	movs	r2, #10
 800b824:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b826:	4b03      	ldr	r3, [pc, #12]	; (800b834 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b828:	4618      	mov	r0, r3
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bc80      	pop	{r7}
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	20000014 	.word	0x20000014

0800b838 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b842:	2302      	movs	r3, #2
 800b844:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d005      	beq.n	800b858 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	683a      	ldr	r2, [r7, #0]
 800b850:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b854:	2300      	movs	r3, #0
 800b856:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b858:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3714      	adds	r7, #20
 800b85e:	46bd      	mov	sp, r7
 800b860:	bc80      	pop	{r7}
 800b862:	4770      	bx	lr

0800b864 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	4613      	mov	r3, r2
 800b870:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b878:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b882:	88fa      	ldrh	r2, [r7, #6]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	371c      	adds	r7, #28
 800b890:	46bd      	mov	sp, r7
 800b892:	bc80      	pop	{r7}
 800b894:	4770      	bx	lr

0800b896 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b896:	b480      	push	{r7}
 800b898:	b085      	sub	sp, #20
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8a6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bc80      	pop	{r7}
 800b8ba:	4770      	bx	lr

0800b8bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d01c      	beq.n	800b910 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d115      	bne.n	800b90c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	2181      	movs	r1, #129	; 0x81
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f001 fceb 	bl	800d2de <USBD_LL_Transmit>

      return USBD_OK;
 800b908:	2300      	movs	r3, #0
 800b90a:	e002      	b.n	800b912 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e000      	b.n	800b912 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b910:	2302      	movs	r3, #2
  }
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b084      	sub	sp, #16
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b928:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b930:	2b00      	cmp	r3, #0
 800b932:	d017      	beq.n	800b964 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	7c1b      	ldrb	r3, [r3, #16]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d109      	bne.n	800b950 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b942:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b946:	2101      	movs	r1, #1
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f001 fceb 	bl	800d324 <USBD_LL_PrepareReceive>
 800b94e:	e007      	b.n	800b960 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b956:	2340      	movs	r3, #64	; 0x40
 800b958:	2101      	movs	r1, #1
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f001 fce2 	bl	800d324 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	e000      	b.n	800b966 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b964:	2302      	movs	r3, #2
  }
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	60f8      	str	r0, [r7, #12]
 800b976:	60b9      	str	r1, [r7, #8]
 800b978:	4613      	mov	r3, r2
 800b97a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d101      	bne.n	800b986 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b982:	2302      	movs	r3, #2
 800b984:	e01a      	b.n	800b9bc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	79fa      	ldrb	r2, [r7, #7]
 800b9b2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f001 fb4f 	bl	800d058 <USBD_LL_Init>

  return USBD_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d006      	beq.n	800b9e6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73fb      	strb	r3, [r7, #15]
 800b9e4:	e001      	b.n	800b9ea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b9e6:	2302      	movs	r3, #2
 800b9e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bc80      	pop	{r7}
 800b9f4:	4770      	bx	lr

0800b9f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f001 fb84 	bl	800d10c <USBD_LL_Start>

  return USBD_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b083      	sub	sp, #12
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bc80      	pop	{r7}
 800ba20:	4770      	bx	lr

0800ba22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ba2e:	2302      	movs	r3, #2
 800ba30:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00c      	beq.n	800ba56 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	78fa      	ldrb	r2, [r7, #3]
 800ba46:	4611      	mov	r1, r2
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	4798      	blx	r3
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	78fa      	ldrb	r2, [r7, #3]
 800ba76:	4611      	mov	r1, r2
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	4798      	blx	r3

  return USBD_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b082      	sub	sp, #8
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
 800ba8e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 fed8 	bl	800c84e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2201      	movs	r2, #1
 800baa2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800baac:	461a      	mov	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800baba:	f003 031f 	and.w	r3, r3, #31
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d016      	beq.n	800baf0 <USBD_LL_SetupStage+0x6a>
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d81c      	bhi.n	800bb00 <USBD_LL_SetupStage+0x7a>
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <USBD_LL_SetupStage+0x4a>
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d008      	beq.n	800bae0 <USBD_LL_SetupStage+0x5a>
 800bace:	e017      	b.n	800bb00 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bad6:	4619      	mov	r1, r3
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f9cb 	bl	800be74 <USBD_StdDevReq>
      break;
 800bade:	e01a      	b.n	800bb16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bae6:	4619      	mov	r1, r3
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fa2d 	bl	800bf48 <USBD_StdItfReq>
      break;
 800baee:	e012      	b.n	800bb16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800baf6:	4619      	mov	r1, r3
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fa6d 	bl	800bfd8 <USBD_StdEPReq>
      break;
 800bafe:	e00a      	b.n	800bb16 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bb06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f001 fb5c 	bl	800d1cc <USBD_LL_StallEP>
      break;
 800bb14:	bf00      	nop
  }

  return USBD_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bb2e:	7afb      	ldrb	r3, [r7, #11]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d14b      	bne.n	800bbcc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bb3a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb42:	2b03      	cmp	r3, #3
 800bb44:	d134      	bne.n	800bbb0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	68da      	ldr	r2, [r3, #12]
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d919      	bls.n	800bb86 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	68da      	ldr	r2, [r3, #12]
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	1ad2      	subs	r2, r2, r3
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	68da      	ldr	r2, [r3, #12]
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d203      	bcs.n	800bb74 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	e002      	b.n	800bb7a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	6879      	ldr	r1, [r7, #4]
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f000 ff57 	bl	800ca32 <USBD_CtlContinueRx>
 800bb84:	e038      	b.n	800bbf8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bb98:	2b03      	cmp	r3, #3
 800bb9a:	d105      	bne.n	800bba8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f000 ff54 	bl	800ca56 <USBD_CtlSendStatus>
 800bbae:	e023      	b.n	800bbf8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbb6:	2b05      	cmp	r3, #5
 800bbb8:	d11e      	bne.n	800bbf8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f001 fb01 	bl	800d1cc <USBD_LL_StallEP>
 800bbca:	e015      	b.n	800bbf8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00d      	beq.n	800bbf4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d108      	bne.n	800bbf4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	7afa      	ldrb	r2, [r7, #11]
 800bbec:	4611      	mov	r1, r2
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	4798      	blx	r3
 800bbf2:	e001      	b.n	800bbf8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	e000      	b.n	800bbfa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3718      	adds	r7, #24
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b086      	sub	sp, #24
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	607a      	str	r2, [r7, #4]
 800bc0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bc10:	7afb      	ldrb	r3, [r7, #11]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d17f      	bne.n	800bd16 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	3314      	adds	r3, #20
 800bc1a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d15c      	bne.n	800bce0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	68da      	ldr	r2, [r3, #12]
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d915      	bls.n	800bc5e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	68da      	ldr	r2, [r3, #12]
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	1ad2      	subs	r2, r2, r3
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	461a      	mov	r2, r3
 800bc48:	6879      	ldr	r1, [r7, #4]
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f000 fec1 	bl	800c9d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc50:	2300      	movs	r3, #0
 800bc52:	2200      	movs	r2, #0
 800bc54:	2100      	movs	r1, #0
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f001 fb64 	bl	800d324 <USBD_LL_PrepareReceive>
 800bc5c:	e04e      	b.n	800bcfc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	6912      	ldr	r2, [r2, #16]
 800bc66:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc6a:	fb01 f202 	mul.w	r2, r1, r2
 800bc6e:	1a9b      	subs	r3, r3, r2
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d11c      	bne.n	800bcae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	689a      	ldr	r2, [r3, #8]
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d316      	bcc.n	800bcae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	689a      	ldr	r2, [r3, #8]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d20f      	bcs.n	800bcae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc8e:	2200      	movs	r2, #0
 800bc90:	2100      	movs	r1, #0
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f000 fe9d 	bl	800c9d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bca0:	2300      	movs	r3, #0
 800bca2:	2200      	movs	r2, #0
 800bca4:	2100      	movs	r1, #0
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f001 fb3c 	bl	800d324 <USBD_LL_PrepareReceive>
 800bcac:	e026      	b.n	800bcfc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00a      	beq.n	800bcd0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	d105      	bne.n	800bcd0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bcd0:	2180      	movs	r1, #128	; 0x80
 800bcd2:	68f8      	ldr	r0, [r7, #12]
 800bcd4:	f001 fa7a 	bl	800d1cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f000 fecf 	bl	800ca7c <USBD_CtlReceiveStatus>
 800bcde:	e00d      	b.n	800bcfc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bce6:	2b04      	cmp	r3, #4
 800bce8:	d004      	beq.n	800bcf4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d103      	bne.n	800bcfc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bcf4:	2180      	movs	r1, #128	; 0x80
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f001 fa68 	bl	800d1cc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d11d      	bne.n	800bd42 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f7ff fe81 	bl	800ba0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd14:	e015      	b.n	800bd42 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00d      	beq.n	800bd3e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd28:	2b03      	cmp	r3, #3
 800bd2a:	d108      	bne.n	800bd3e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd32:	695b      	ldr	r3, [r3, #20]
 800bd34:	7afa      	ldrb	r2, [r7, #11]
 800bd36:	4611      	mov	r1, r2
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	4798      	blx	r3
 800bd3c:	e001      	b.n	800bd42 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bd3e:	2302      	movs	r3, #2
 800bd40:	e000      	b.n	800bd44 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd54:	2340      	movs	r3, #64	; 0x40
 800bd56:	2200      	movs	r2, #0
 800bd58:	2100      	movs	r1, #0
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f001 f9f1 	bl	800d142 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2240      	movs	r2, #64	; 0x40
 800bd6c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd70:	2340      	movs	r3, #64	; 0x40
 800bd72:	2200      	movs	r2, #0
 800bd74:	2180      	movs	r1, #128	; 0x80
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f001 f9e3 	bl	800d142 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2240      	movs	r2, #64	; 0x40
 800bd86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d009      	beq.n	800bdc4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	6852      	ldr	r2, [r2, #4]
 800bdbc:	b2d2      	uxtb	r2, r2
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	4798      	blx	r3
  }

  return USBD_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bdce:	b480      	push	{r7}
 800bdd0:	b083      	sub	sp, #12
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	78fa      	ldrb	r2, [r7, #3]
 800bdde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bc80      	pop	{r7}
 800bdea:	4770      	bx	lr

0800bdec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2204      	movs	r2, #4
 800be04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	bc80      	pop	{r7}
 800be12:	4770      	bx	lr

0800be14 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be22:	2b04      	cmp	r3, #4
 800be24:	d105      	bne.n	800be32 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	bc80      	pop	{r7}
 800be3c:	4770      	bx	lr

0800be3e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be4c:	2b03      	cmp	r3, #3
 800be4e:	d10b      	bne.n	800be68 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be56:	69db      	ldr	r3, [r3, #28]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d005      	beq.n	800be68 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be62:	69db      	ldr	r3, [r3, #28]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
	...

0800be74 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be8a:	2b40      	cmp	r3, #64	; 0x40
 800be8c:	d005      	beq.n	800be9a <USBD_StdDevReq+0x26>
 800be8e:	2b40      	cmp	r3, #64	; 0x40
 800be90:	d84f      	bhi.n	800bf32 <USBD_StdDevReq+0xbe>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d009      	beq.n	800beaa <USBD_StdDevReq+0x36>
 800be96:	2b20      	cmp	r3, #32
 800be98:	d14b      	bne.n	800bf32 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	4798      	blx	r3
      break;
 800bea8:	e048      	b.n	800bf3c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	785b      	ldrb	r3, [r3, #1]
 800beae:	2b09      	cmp	r3, #9
 800beb0:	d839      	bhi.n	800bf26 <USBD_StdDevReq+0xb2>
 800beb2:	a201      	add	r2, pc, #4	; (adr r2, 800beb8 <USBD_StdDevReq+0x44>)
 800beb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb8:	0800bf09 	.word	0x0800bf09
 800bebc:	0800bf1d 	.word	0x0800bf1d
 800bec0:	0800bf27 	.word	0x0800bf27
 800bec4:	0800bf13 	.word	0x0800bf13
 800bec8:	0800bf27 	.word	0x0800bf27
 800becc:	0800beeb 	.word	0x0800beeb
 800bed0:	0800bee1 	.word	0x0800bee1
 800bed4:	0800bf27 	.word	0x0800bf27
 800bed8:	0800beff 	.word	0x0800beff
 800bedc:	0800bef5 	.word	0x0800bef5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f9dc 	bl	800c2a0 <USBD_GetDescriptor>
          break;
 800bee8:	e022      	b.n	800bf30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fb3f 	bl	800c570 <USBD_SetAddress>
          break;
 800bef2:	e01d      	b.n	800bf30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fb7e 	bl	800c5f8 <USBD_SetConfig>
          break;
 800befc:	e018      	b.n	800bf30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 fc07 	bl	800c714 <USBD_GetConfig>
          break;
 800bf06:	e013      	b.n	800bf30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fc37 	bl	800c77e <USBD_GetStatus>
          break;
 800bf10:	e00e      	b.n	800bf30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf12:	6839      	ldr	r1, [r7, #0]
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fc65 	bl	800c7e4 <USBD_SetFeature>
          break;
 800bf1a:	e009      	b.n	800bf30 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fc74 	bl	800c80c <USBD_ClrFeature>
          break;
 800bf24:	e004      	b.n	800bf30 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bf26:	6839      	ldr	r1, [r7, #0]
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 fccc 	bl	800c8c6 <USBD_CtlError>
          break;
 800bf2e:	bf00      	nop
      }
      break;
 800bf30:	e004      	b.n	800bf3c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fcc6 	bl	800c8c6 <USBD_CtlError>
      break;
 800bf3a:	bf00      	nop
  }

  return ret;
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop

0800bf48 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf5e:	2b40      	cmp	r3, #64	; 0x40
 800bf60:	d005      	beq.n	800bf6e <USBD_StdItfReq+0x26>
 800bf62:	2b40      	cmp	r3, #64	; 0x40
 800bf64:	d82e      	bhi.n	800bfc4 <USBD_StdItfReq+0x7c>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <USBD_StdItfReq+0x26>
 800bf6a:	2b20      	cmp	r3, #32
 800bf6c:	d12a      	bne.n	800bfc4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf74:	3b01      	subs	r3, #1
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d81d      	bhi.n	800bfb6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	889b      	ldrh	r3, [r3, #4]
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d813      	bhi.n	800bfac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	4798      	blx	r3
 800bf92:	4603      	mov	r3, r0
 800bf94:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	88db      	ldrh	r3, [r3, #6]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d110      	bne.n	800bfc0 <USBD_StdItfReq+0x78>
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10d      	bne.n	800bfc0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fd56 	bl	800ca56 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfaa:	e009      	b.n	800bfc0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fc89 	bl	800c8c6 <USBD_CtlError>
          break;
 800bfb4:	e004      	b.n	800bfc0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fc84 	bl	800c8c6 <USBD_CtlError>
          break;
 800bfbe:	e000      	b.n	800bfc2 <USBD_StdItfReq+0x7a>
          break;
 800bfc0:	bf00      	nop
      }
      break;
 800bfc2:	e004      	b.n	800bfce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fc7d 	bl	800c8c6 <USBD_CtlError>
      break;
 800bfcc:	bf00      	nop
  }

  return USBD_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	889b      	ldrh	r3, [r3, #4]
 800bfea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bff4:	2b40      	cmp	r3, #64	; 0x40
 800bff6:	d007      	beq.n	800c008 <USBD_StdEPReq+0x30>
 800bff8:	2b40      	cmp	r3, #64	; 0x40
 800bffa:	f200 8146 	bhi.w	800c28a <USBD_StdEPReq+0x2b2>
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00a      	beq.n	800c018 <USBD_StdEPReq+0x40>
 800c002:	2b20      	cmp	r3, #32
 800c004:	f040 8141 	bne.w	800c28a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	4798      	blx	r3
      break;
 800c016:	e13d      	b.n	800c294 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c020:	2b20      	cmp	r3, #32
 800c022:	d10a      	bne.n	800c03a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	4798      	blx	r3
 800c032:	4603      	mov	r3, r0
 800c034:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c036:	7bfb      	ldrb	r3, [r7, #15]
 800c038:	e12d      	b.n	800c296 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	785b      	ldrb	r3, [r3, #1]
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d007      	beq.n	800c052 <USBD_StdEPReq+0x7a>
 800c042:	2b03      	cmp	r3, #3
 800c044:	f300 811b 	bgt.w	800c27e <USBD_StdEPReq+0x2a6>
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d072      	beq.n	800c132 <USBD_StdEPReq+0x15a>
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d03a      	beq.n	800c0c6 <USBD_StdEPReq+0xee>
 800c050:	e115      	b.n	800c27e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d002      	beq.n	800c062 <USBD_StdEPReq+0x8a>
 800c05c:	2b03      	cmp	r3, #3
 800c05e:	d015      	beq.n	800c08c <USBD_StdEPReq+0xb4>
 800c060:	e02b      	b.n	800c0ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c062:	7bbb      	ldrb	r3, [r7, #14]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00c      	beq.n	800c082 <USBD_StdEPReq+0xaa>
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	2b80      	cmp	r3, #128	; 0x80
 800c06c:	d009      	beq.n	800c082 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c06e:	7bbb      	ldrb	r3, [r7, #14]
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f001 f8aa 	bl	800d1cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c078:	2180      	movs	r1, #128	; 0x80
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f001 f8a6 	bl	800d1cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c080:	e020      	b.n	800c0c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c082:	6839      	ldr	r1, [r7, #0]
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fc1e 	bl	800c8c6 <USBD_CtlError>
              break;
 800c08a:	e01b      	b.n	800c0c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	885b      	ldrh	r3, [r3, #2]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10e      	bne.n	800c0b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c094:	7bbb      	ldrb	r3, [r7, #14]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00b      	beq.n	800c0b2 <USBD_StdEPReq+0xda>
 800c09a:	7bbb      	ldrb	r3, [r7, #14]
 800c09c:	2b80      	cmp	r3, #128	; 0x80
 800c09e:	d008      	beq.n	800c0b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	88db      	ldrh	r3, [r3, #6]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d104      	bne.n	800c0b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
 800c0aa:	4619      	mov	r1, r3
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f001 f88d 	bl	800d1cc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fccf 	bl	800ca56 <USBD_CtlSendStatus>

              break;
 800c0b8:	e004      	b.n	800c0c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fc02 	bl	800c8c6 <USBD_CtlError>
              break;
 800c0c2:	bf00      	nop
          }
          break;
 800c0c4:	e0e0      	b.n	800c288 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d002      	beq.n	800c0d6 <USBD_StdEPReq+0xfe>
 800c0d0:	2b03      	cmp	r3, #3
 800c0d2:	d015      	beq.n	800c100 <USBD_StdEPReq+0x128>
 800c0d4:	e026      	b.n	800c124 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00c      	beq.n	800c0f6 <USBD_StdEPReq+0x11e>
 800c0dc:	7bbb      	ldrb	r3, [r7, #14]
 800c0de:	2b80      	cmp	r3, #128	; 0x80
 800c0e0:	d009      	beq.n	800c0f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c0e2:	7bbb      	ldrb	r3, [r7, #14]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f001 f870 	bl	800d1cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c0ec:	2180      	movs	r1, #128	; 0x80
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f001 f86c 	bl	800d1cc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0f4:	e01c      	b.n	800c130 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c0f6:	6839      	ldr	r1, [r7, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f000 fbe4 	bl	800c8c6 <USBD_CtlError>
              break;
 800c0fe:	e017      	b.n	800c130 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	885b      	ldrh	r3, [r3, #2]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d112      	bne.n	800c12e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c108:	7bbb      	ldrb	r3, [r7, #14]
 800c10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d004      	beq.n	800c11c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c112:	7bbb      	ldrb	r3, [r7, #14]
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f001 f877 	bl	800d20a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fc9a 	bl	800ca56 <USBD_CtlSendStatus>
              }
              break;
 800c122:	e004      	b.n	800c12e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fbcd 	bl	800c8c6 <USBD_CtlError>
              break;
 800c12c:	e000      	b.n	800c130 <USBD_StdEPReq+0x158>
              break;
 800c12e:	bf00      	nop
          }
          break;
 800c130:	e0aa      	b.n	800c288 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d002      	beq.n	800c142 <USBD_StdEPReq+0x16a>
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	d032      	beq.n	800c1a6 <USBD_StdEPReq+0x1ce>
 800c140:	e097      	b.n	800c272 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c142:	7bbb      	ldrb	r3, [r7, #14]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d007      	beq.n	800c158 <USBD_StdEPReq+0x180>
 800c148:	7bbb      	ldrb	r3, [r7, #14]
 800c14a:	2b80      	cmp	r3, #128	; 0x80
 800c14c:	d004      	beq.n	800c158 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 fbb8 	bl	800c8c6 <USBD_CtlError>
                break;
 800c156:	e091      	b.n	800c27c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	da0b      	bge.n	800c178 <USBD_StdEPReq+0x1a0>
 800c160:	7bbb      	ldrb	r3, [r7, #14]
 800c162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c166:	4613      	mov	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	3310      	adds	r3, #16
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	4413      	add	r3, r2
 800c174:	3304      	adds	r3, #4
 800c176:	e00b      	b.n	800c190 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c178:	7bbb      	ldrb	r3, [r7, #14]
 800c17a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c17e:	4613      	mov	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	4413      	add	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	4413      	add	r3, r2
 800c18e:	3304      	adds	r3, #4
 800c190:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2200      	movs	r2, #0
 800c196:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2202      	movs	r2, #2
 800c19c:	4619      	mov	r1, r3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fbfb 	bl	800c99a <USBD_CtlSendData>
              break;
 800c1a4:	e06a      	b.n	800c27c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	da11      	bge.n	800c1d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1ae:	7bbb      	ldrb	r3, [r7, #14]
 800c1b0:	f003 020f 	and.w	r2, r3, #15
 800c1b4:	6879      	ldr	r1, [r7, #4]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	440b      	add	r3, r1
 800c1c0:	3318      	adds	r3, #24
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d117      	bne.n	800c1f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c1c8:	6839      	ldr	r1, [r7, #0]
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 fb7b 	bl	800c8c6 <USBD_CtlError>
                  break;
 800c1d0:	e054      	b.n	800c27c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
 800c1d4:	f003 020f 	and.w	r2, r3, #15
 800c1d8:	6879      	ldr	r1, [r7, #4]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	440b      	add	r3, r1
 800c1e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d104      	bne.n	800c1f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fb68 	bl	800c8c6 <USBD_CtlError>
                  break;
 800c1f6:	e041      	b.n	800c27c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	da0b      	bge.n	800c218 <USBD_StdEPReq+0x240>
 800c200:	7bbb      	ldrb	r3, [r7, #14]
 800c202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c206:	4613      	mov	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	3310      	adds	r3, #16
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	4413      	add	r3, r2
 800c214:	3304      	adds	r3, #4
 800c216:	e00b      	b.n	800c230 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c21e:	4613      	mov	r3, r2
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	4413      	add	r3, r2
 800c22e:	3304      	adds	r3, #4
 800c230:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c232:	7bbb      	ldrb	r3, [r7, #14]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <USBD_StdEPReq+0x266>
 800c238:	7bbb      	ldrb	r3, [r7, #14]
 800c23a:	2b80      	cmp	r3, #128	; 0x80
 800c23c:	d103      	bne.n	800c246 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2200      	movs	r2, #0
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	e00e      	b.n	800c264 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c246:	7bbb      	ldrb	r3, [r7, #14]
 800c248:	4619      	mov	r1, r3
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 fffc 	bl	800d248 <USBD_LL_IsStallEP>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d003      	beq.n	800c25e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2201      	movs	r2, #1
 800c25a:	601a      	str	r2, [r3, #0]
 800c25c:	e002      	b.n	800c264 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2202      	movs	r2, #2
 800c268:	4619      	mov	r1, r3
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fb95 	bl	800c99a <USBD_CtlSendData>
              break;
 800c270:	e004      	b.n	800c27c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 fb26 	bl	800c8c6 <USBD_CtlError>
              break;
 800c27a:	bf00      	nop
          }
          break;
 800c27c:	e004      	b.n	800c288 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fb20 	bl	800c8c6 <USBD_CtlError>
          break;
 800c286:	bf00      	nop
      }
      break;
 800c288:	e004      	b.n	800c294 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fb1a 	bl	800c8c6 <USBD_CtlError>
      break;
 800c292:	bf00      	nop
  }

  return ret;
 800c294:	7bfb      	ldrb	r3, [r7, #15]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
	...

0800c2a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	885b      	ldrh	r3, [r3, #2]
 800c2ba:	0a1b      	lsrs	r3, r3, #8
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	2b06      	cmp	r3, #6
 800c2c2:	f200 8128 	bhi.w	800c516 <USBD_GetDescriptor+0x276>
 800c2c6:	a201      	add	r2, pc, #4	; (adr r2, 800c2cc <USBD_GetDescriptor+0x2c>)
 800c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2cc:	0800c2e9 	.word	0x0800c2e9
 800c2d0:	0800c301 	.word	0x0800c301
 800c2d4:	0800c341 	.word	0x0800c341
 800c2d8:	0800c517 	.word	0x0800c517
 800c2dc:	0800c517 	.word	0x0800c517
 800c2e0:	0800c4b7 	.word	0x0800c4b7
 800c2e4:	0800c4e3 	.word	0x0800c4e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	7c12      	ldrb	r2, [r2, #16]
 800c2f4:	f107 0108 	add.w	r1, r7, #8
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	4798      	blx	r3
 800c2fc:	60f8      	str	r0, [r7, #12]
      break;
 800c2fe:	e112      	b.n	800c526 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	7c1b      	ldrb	r3, [r3, #16]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10d      	bne.n	800c324 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c310:	f107 0208 	add.w	r2, r7, #8
 800c314:	4610      	mov	r0, r2
 800c316:	4798      	blx	r3
 800c318:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	3301      	adds	r3, #1
 800c31e:	2202      	movs	r2, #2
 800c320:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c322:	e100      	b.n	800c526 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32c:	f107 0208 	add.w	r2, r7, #8
 800c330:	4610      	mov	r0, r2
 800c332:	4798      	blx	r3
 800c334:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3301      	adds	r3, #1
 800c33a:	2202      	movs	r2, #2
 800c33c:	701a      	strb	r2, [r3, #0]
      break;
 800c33e:	e0f2      	b.n	800c526 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	885b      	ldrh	r3, [r3, #2]
 800c344:	b2db      	uxtb	r3, r3
 800c346:	2b05      	cmp	r3, #5
 800c348:	f200 80ac 	bhi.w	800c4a4 <USBD_GetDescriptor+0x204>
 800c34c:	a201      	add	r2, pc, #4	; (adr r2, 800c354 <USBD_GetDescriptor+0xb4>)
 800c34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c352:	bf00      	nop
 800c354:	0800c36d 	.word	0x0800c36d
 800c358:	0800c3a1 	.word	0x0800c3a1
 800c35c:	0800c3d5 	.word	0x0800c3d5
 800c360:	0800c409 	.word	0x0800c409
 800c364:	0800c43d 	.word	0x0800c43d
 800c368:	0800c471 	.word	0x0800c471
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00b      	beq.n	800c390 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	7c12      	ldrb	r2, [r2, #16]
 800c384:	f107 0108 	add.w	r1, r7, #8
 800c388:	4610      	mov	r0, r2
 800c38a:	4798      	blx	r3
 800c38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c38e:	e091      	b.n	800c4b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fa97 	bl	800c8c6 <USBD_CtlError>
            err++;
 800c398:	7afb      	ldrb	r3, [r7, #11]
 800c39a:	3301      	adds	r3, #1
 800c39c:	72fb      	strb	r3, [r7, #11]
          break;
 800c39e:	e089      	b.n	800c4b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00b      	beq.n	800c3c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	7c12      	ldrb	r2, [r2, #16]
 800c3b8:	f107 0108 	add.w	r1, r7, #8
 800c3bc:	4610      	mov	r0, r2
 800c3be:	4798      	blx	r3
 800c3c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3c2:	e077      	b.n	800c4b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f000 fa7d 	bl	800c8c6 <USBD_CtlError>
            err++;
 800c3cc:	7afb      	ldrb	r3, [r7, #11]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3d2:	e06f      	b.n	800c4b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00b      	beq.n	800c3f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	7c12      	ldrb	r2, [r2, #16]
 800c3ec:	f107 0108 	add.w	r1, r7, #8
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	4798      	blx	r3
 800c3f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3f6:	e05d      	b.n	800c4b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3f8:	6839      	ldr	r1, [r7, #0]
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fa63 	bl	800c8c6 <USBD_CtlError>
            err++;
 800c400:	7afb      	ldrb	r3, [r7, #11]
 800c402:	3301      	adds	r3, #1
 800c404:	72fb      	strb	r3, [r7, #11]
          break;
 800c406:	e055      	b.n	800c4b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00b      	beq.n	800c42c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	7c12      	ldrb	r2, [r2, #16]
 800c420:	f107 0108 	add.w	r1, r7, #8
 800c424:	4610      	mov	r0, r2
 800c426:	4798      	blx	r3
 800c428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c42a:	e043      	b.n	800c4b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c42c:	6839      	ldr	r1, [r7, #0]
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fa49 	bl	800c8c6 <USBD_CtlError>
            err++;
 800c434:	7afb      	ldrb	r3, [r7, #11]
 800c436:	3301      	adds	r3, #1
 800c438:	72fb      	strb	r3, [r7, #11]
          break;
 800c43a:	e03b      	b.n	800c4b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c442:	695b      	ldr	r3, [r3, #20]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d00b      	beq.n	800c460 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	7c12      	ldrb	r2, [r2, #16]
 800c454:	f107 0108 	add.w	r1, r7, #8
 800c458:	4610      	mov	r0, r2
 800c45a:	4798      	blx	r3
 800c45c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c45e:	e029      	b.n	800c4b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 fa2f 	bl	800c8c6 <USBD_CtlError>
            err++;
 800c468:	7afb      	ldrb	r3, [r7, #11]
 800c46a:	3301      	adds	r3, #1
 800c46c:	72fb      	strb	r3, [r7, #11]
          break;
 800c46e:	e021      	b.n	800c4b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c476:	699b      	ldr	r3, [r3, #24]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00b      	beq.n	800c494 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	7c12      	ldrb	r2, [r2, #16]
 800c488:	f107 0108 	add.w	r1, r7, #8
 800c48c:	4610      	mov	r0, r2
 800c48e:	4798      	blx	r3
 800c490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c492:	e00f      	b.n	800c4b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa15 	bl	800c8c6 <USBD_CtlError>
            err++;
 800c49c:	7afb      	ldrb	r3, [r7, #11]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4a2:	e007      	b.n	800c4b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c4a4:	6839      	ldr	r1, [r7, #0]
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fa0d 	bl	800c8c6 <USBD_CtlError>
          err++;
 800c4ac:	7afb      	ldrb	r3, [r7, #11]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c4b2:	e038      	b.n	800c526 <USBD_GetDescriptor+0x286>
 800c4b4:	e037      	b.n	800c526 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	7c1b      	ldrb	r3, [r3, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d109      	bne.n	800c4d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c6:	f107 0208 	add.w	r2, r7, #8
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	4798      	blx	r3
 800c4ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4d0:	e029      	b.n	800c526 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4d2:	6839      	ldr	r1, [r7, #0]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 f9f6 	bl	800c8c6 <USBD_CtlError>
        err++;
 800c4da:	7afb      	ldrb	r3, [r7, #11]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	72fb      	strb	r3, [r7, #11]
      break;
 800c4e0:	e021      	b.n	800c526 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	7c1b      	ldrb	r3, [r3, #16]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d10d      	bne.n	800c506 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f2:	f107 0208 	add.w	r2, r7, #8
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	4798      	blx	r3
 800c4fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	3301      	adds	r3, #1
 800c500:	2207      	movs	r2, #7
 800c502:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c504:	e00f      	b.n	800c526 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f9dc 	bl	800c8c6 <USBD_CtlError>
        err++;
 800c50e:	7afb      	ldrb	r3, [r7, #11]
 800c510:	3301      	adds	r3, #1
 800c512:	72fb      	strb	r3, [r7, #11]
      break;
 800c514:	e007      	b.n	800c526 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c516:	6839      	ldr	r1, [r7, #0]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f9d4 	bl	800c8c6 <USBD_CtlError>
      err++;
 800c51e:	7afb      	ldrb	r3, [r7, #11]
 800c520:	3301      	adds	r3, #1
 800c522:	72fb      	strb	r3, [r7, #11]
      break;
 800c524:	bf00      	nop
  }

  if (err != 0U)
 800c526:	7afb      	ldrb	r3, [r7, #11]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d11c      	bne.n	800c566 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c52c:	893b      	ldrh	r3, [r7, #8]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d011      	beq.n	800c556 <USBD_GetDescriptor+0x2b6>
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	88db      	ldrh	r3, [r3, #6]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00d      	beq.n	800c556 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	88da      	ldrh	r2, [r3, #6]
 800c53e:	893b      	ldrh	r3, [r7, #8]
 800c540:	4293      	cmp	r3, r2
 800c542:	bf28      	it	cs
 800c544:	4613      	movcs	r3, r2
 800c546:	b29b      	uxth	r3, r3
 800c548:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c54a:	893b      	ldrh	r3, [r7, #8]
 800c54c:	461a      	mov	r2, r3
 800c54e:	68f9      	ldr	r1, [r7, #12]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fa22 	bl	800c99a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	88db      	ldrh	r3, [r3, #6]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d104      	bne.n	800c568 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 fa79 	bl	800ca56 <USBD_CtlSendStatus>
 800c564:	e000      	b.n	800c568 <USBD_GetDescriptor+0x2c8>
    return;
 800c566:	bf00      	nop
    }
  }
}
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop

0800c570 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	889b      	ldrh	r3, [r3, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d130      	bne.n	800c5e4 <USBD_SetAddress+0x74>
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	88db      	ldrh	r3, [r3, #6]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d12c      	bne.n	800c5e4 <USBD_SetAddress+0x74>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	885b      	ldrh	r3, [r3, #2]
 800c58e:	2b7f      	cmp	r3, #127	; 0x7f
 800c590:	d828      	bhi.n	800c5e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	885b      	ldrh	r3, [r3, #2]
 800c596:	b2db      	uxtb	r3, r3
 800c598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c59c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a4:	2b03      	cmp	r3, #3
 800c5a6:	d104      	bne.n	800c5b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c5a8:	6839      	ldr	r1, [r7, #0]
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f000 f98b 	bl	800c8c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b0:	e01d      	b.n	800c5ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	7bfa      	ldrb	r2, [r7, #15]
 800c5b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5ba:	7bfb      	ldrb	r3, [r7, #15]
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fe6e 	bl	800d2a0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fa46 	bl	800ca56 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d004      	beq.n	800c5da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d8:	e009      	b.n	800c5ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2201      	movs	r2, #1
 800c5de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e2:	e004      	b.n	800c5ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c5e4:	6839      	ldr	r1, [r7, #0]
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f96d 	bl	800c8c6 <USBD_CtlError>
  }
}
 800c5ec:	bf00      	nop
 800c5ee:	bf00      	nop
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
	...

0800c5f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	885b      	ldrh	r3, [r3, #2]
 800c606:	b2da      	uxtb	r2, r3
 800c608:	4b41      	ldr	r3, [pc, #260]	; (800c710 <USBD_SetConfig+0x118>)
 800c60a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c60c:	4b40      	ldr	r3, [pc, #256]	; (800c710 <USBD_SetConfig+0x118>)
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d904      	bls.n	800c61e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 f955 	bl	800c8c6 <USBD_CtlError>
 800c61c:	e075      	b.n	800c70a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c624:	2b02      	cmp	r3, #2
 800c626:	d002      	beq.n	800c62e <USBD_SetConfig+0x36>
 800c628:	2b03      	cmp	r3, #3
 800c62a:	d023      	beq.n	800c674 <USBD_SetConfig+0x7c>
 800c62c:	e062      	b.n	800c6f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c62e:	4b38      	ldr	r3, [pc, #224]	; (800c710 <USBD_SetConfig+0x118>)
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d01a      	beq.n	800c66c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c636:	4b36      	ldr	r3, [pc, #216]	; (800c710 <USBD_SetConfig+0x118>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2203      	movs	r2, #3
 800c644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c648:	4b31      	ldr	r3, [pc, #196]	; (800c710 <USBD_SetConfig+0x118>)
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7ff f9e7 	bl	800ba22 <USBD_SetClassConfig>
 800c654:	4603      	mov	r3, r0
 800c656:	2b02      	cmp	r3, #2
 800c658:	d104      	bne.n	800c664 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f932 	bl	800c8c6 <USBD_CtlError>
            return;
 800c662:	e052      	b.n	800c70a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 f9f6 	bl	800ca56 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c66a:	e04e      	b.n	800c70a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f9f2 	bl	800ca56 <USBD_CtlSendStatus>
        break;
 800c672:	e04a      	b.n	800c70a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c674:	4b26      	ldr	r3, [pc, #152]	; (800c710 <USBD_SetConfig+0x118>)
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d112      	bne.n	800c6a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2202      	movs	r2, #2
 800c680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c684:	4b22      	ldr	r3, [pc, #136]	; (800c710 <USBD_SetConfig+0x118>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	461a      	mov	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c68e:	4b20      	ldr	r3, [pc, #128]	; (800c710 <USBD_SetConfig+0x118>)
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	4619      	mov	r1, r3
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff f9e3 	bl	800ba60 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f9db 	bl	800ca56 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c6a0:	e033      	b.n	800c70a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c6a2:	4b1b      	ldr	r3, [pc, #108]	; (800c710 <USBD_SetConfig+0x118>)
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d01d      	beq.n	800c6ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	b2db      	uxtb	r3, r3
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff f9d1 	bl	800ba60 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c6be:	4b14      	ldr	r3, [pc, #80]	; (800c710 <USBD_SetConfig+0x118>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c6c8:	4b11      	ldr	r3, [pc, #68]	; (800c710 <USBD_SetConfig+0x118>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7ff f9a7 	bl	800ba22 <USBD_SetClassConfig>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d104      	bne.n	800c6e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 f8f2 	bl	800c8c6 <USBD_CtlError>
            return;
 800c6e2:	e012      	b.n	800c70a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f9b6 	bl	800ca56 <USBD_CtlSendStatus>
        break;
 800c6ea:	e00e      	b.n	800c70a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f9b2 	bl	800ca56 <USBD_CtlSendStatus>
        break;
 800c6f2:	e00a      	b.n	800c70a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f8e5 	bl	800c8c6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c6fc:	4b04      	ldr	r3, [pc, #16]	; (800c710 <USBD_SetConfig+0x118>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	4619      	mov	r1, r3
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7ff f9ac 	bl	800ba60 <USBD_ClrClassConfig>
        break;
 800c708:	bf00      	nop
    }
  }
}
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	20000b70 	.word	0x20000b70

0800c714 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	88db      	ldrh	r3, [r3, #6]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d004      	beq.n	800c730 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f8cc 	bl	800c8c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c72e:	e022      	b.n	800c776 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c736:	2b02      	cmp	r3, #2
 800c738:	dc02      	bgt.n	800c740 <USBD_GetConfig+0x2c>
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	dc03      	bgt.n	800c746 <USBD_GetConfig+0x32>
 800c73e:	e015      	b.n	800c76c <USBD_GetConfig+0x58>
 800c740:	2b03      	cmp	r3, #3
 800c742:	d00b      	beq.n	800c75c <USBD_GetConfig+0x48>
 800c744:	e012      	b.n	800c76c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	3308      	adds	r3, #8
 800c750:	2201      	movs	r2, #1
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f920 	bl	800c99a <USBD_CtlSendData>
        break;
 800c75a:	e00c      	b.n	800c776 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	3304      	adds	r3, #4
 800c760:	2201      	movs	r2, #1
 800c762:	4619      	mov	r1, r3
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f918 	bl	800c99a <USBD_CtlSendData>
        break;
 800c76a:	e004      	b.n	800c776 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c76c:	6839      	ldr	r1, [r7, #0]
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f8a9 	bl	800c8c6 <USBD_CtlError>
        break;
 800c774:	bf00      	nop
}
 800c776:	bf00      	nop
 800c778:	3708      	adds	r7, #8
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}

0800c77e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c77e:	b580      	push	{r7, lr}
 800c780:	b082      	sub	sp, #8
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
 800c786:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c78e:	3b01      	subs	r3, #1
 800c790:	2b02      	cmp	r3, #2
 800c792:	d81e      	bhi.n	800c7d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	88db      	ldrh	r3, [r3, #6]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d004      	beq.n	800c7a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f891 	bl	800c8c6 <USBD_CtlError>
        break;
 800c7a4:	e01a      	b.n	800c7dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d005      	beq.n	800c7c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	f043 0202 	orr.w	r2, r3, #2
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	330c      	adds	r3, #12
 800c7c6:	2202      	movs	r2, #2
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 f8e5 	bl	800c99a <USBD_CtlSendData>
      break;
 800c7d0:	e004      	b.n	800c7dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f876 	bl	800c8c6 <USBD_CtlError>
      break;
 800c7da:	bf00      	nop
  }
}
 800c7dc:	bf00      	nop
 800c7de:	3708      	adds	r7, #8
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	885b      	ldrh	r3, [r3, #2]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d106      	bne.n	800c804 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f929 	bl	800ca56 <USBD_CtlSendStatus>
  }
}
 800c804:	bf00      	nop
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c81c:	3b01      	subs	r3, #1
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d80b      	bhi.n	800c83a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	885b      	ldrh	r3, [r3, #2]
 800c826:	2b01      	cmp	r3, #1
 800c828:	d10c      	bne.n	800c844 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f90f 	bl	800ca56 <USBD_CtlSendStatus>
      }
      break;
 800c838:	e004      	b.n	800c844 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c83a:	6839      	ldr	r1, [r7, #0]
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 f842 	bl	800c8c6 <USBD_CtlError>
      break;
 800c842:	e000      	b.n	800c846 <USBD_ClrFeature+0x3a>
      break;
 800c844:	bf00      	nop
  }
}
 800c846:	bf00      	nop
 800c848:	3708      	adds	r7, #8
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c84e:	b480      	push	{r7}
 800c850:	b083      	sub	sp, #12
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
 800c856:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	781a      	ldrb	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	785a      	ldrb	r2, [r3, #1]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	3302      	adds	r3, #2
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	b29a      	uxth	r2, r3
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	3303      	adds	r3, #3
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	b29b      	uxth	r3, r3
 800c878:	021b      	lsls	r3, r3, #8
 800c87a:	b29b      	uxth	r3, r3
 800c87c:	4413      	add	r3, r2
 800c87e:	b29a      	uxth	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	3304      	adds	r3, #4
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	b29a      	uxth	r2, r3
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	3305      	adds	r3, #5
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	b29b      	uxth	r3, r3
 800c894:	021b      	lsls	r3, r3, #8
 800c896:	b29b      	uxth	r3, r3
 800c898:	4413      	add	r3, r2
 800c89a:	b29a      	uxth	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	3306      	adds	r3, #6
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	3307      	adds	r3, #7
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	021b      	lsls	r3, r3, #8
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	4413      	add	r3, r2
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	80da      	strh	r2, [r3, #6]

}
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bc80      	pop	{r7}
 800c8c4:	4770      	bx	lr

0800c8c6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b082      	sub	sp, #8
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c8d0:	2180      	movs	r1, #128	; 0x80
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fc7a 	bl	800d1cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c8d8:	2100      	movs	r1, #0
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fc76 	bl	800d1cc <USBD_LL_StallEP>
}
 800c8e0:	bf00      	nop
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d032      	beq.n	800c964 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 f834 	bl	800c96c <USBD_GetLen>
 800c904:	4603      	mov	r3, r0
 800c906:	3301      	adds	r3, #1
 800c908:	b29b      	uxth	r3, r3
 800c90a:	005b      	lsls	r3, r3, #1
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c912:	7dfb      	ldrb	r3, [r7, #23]
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	75fa      	strb	r2, [r7, #23]
 800c918:	461a      	mov	r2, r3
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	4413      	add	r3, r2
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	7812      	ldrb	r2, [r2, #0]
 800c922:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	75fa      	strb	r2, [r7, #23]
 800c92a:	461a      	mov	r2, r3
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	4413      	add	r3, r2
 800c930:	2203      	movs	r2, #3
 800c932:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c934:	e012      	b.n	800c95c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	1c5a      	adds	r2, r3, #1
 800c93a:	60fa      	str	r2, [r7, #12]
 800c93c:	7dfa      	ldrb	r2, [r7, #23]
 800c93e:	1c51      	adds	r1, r2, #1
 800c940:	75f9      	strb	r1, [r7, #23]
 800c942:	4611      	mov	r1, r2
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	440a      	add	r2, r1
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	75fa      	strb	r2, [r7, #23]
 800c952:	461a      	mov	r2, r3
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	4413      	add	r3, r2
 800c958:	2200      	movs	r2, #0
 800c95a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d1e8      	bne.n	800c936 <USBD_GetString+0x4e>
    }
  }
}
 800c964:	bf00      	nop
 800c966:	3718      	adds	r7, #24
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c974:	2300      	movs	r3, #0
 800c976:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c978:	e005      	b.n	800c986 <USBD_GetLen+0x1a>
  {
    len++;
 800c97a:	7bfb      	ldrb	r3, [r7, #15]
 800c97c:	3301      	adds	r3, #1
 800c97e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	3301      	adds	r3, #1
 800c984:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1f5      	bne.n	800c97a <USBD_GetLen+0xe>
  }

  return len;
 800c98e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3714      	adds	r7, #20
 800c994:	46bd      	mov	sp, r7
 800c996:	bc80      	pop	{r7}
 800c998:	4770      	bx	lr

0800c99a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b084      	sub	sp, #16
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	60b9      	str	r1, [r7, #8]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2202      	movs	r2, #2
 800c9ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c9b0:	88fa      	ldrh	r2, [r7, #6]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c9b6:	88fa      	ldrh	r2, [r7, #6]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9bc:	88fb      	ldrh	r3, [r7, #6]
 800c9be:	68ba      	ldr	r2, [r7, #8]
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 fc8b 	bl	800d2de <USBD_LL_Transmit>

  return USBD_OK;
 800c9c8:	2300      	movs	r3, #0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3710      	adds	r7, #16
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b084      	sub	sp, #16
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	60f8      	str	r0, [r7, #12]
 800c9da:	60b9      	str	r1, [r7, #8]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9e0:	88fb      	ldrh	r3, [r7, #6]
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f000 fc79 	bl	800d2de <USBD_LL_Transmit>

  return USBD_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b084      	sub	sp, #16
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	60f8      	str	r0, [r7, #12]
 800c9fe:	60b9      	str	r1, [r7, #8]
 800ca00:	4613      	mov	r3, r2
 800ca02:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2203      	movs	r2, #3
 800ca08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ca0c:	88fa      	ldrh	r2, [r7, #6]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ca14:	88fa      	ldrh	r2, [r7, #6]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca1c:	88fb      	ldrh	r3, [r7, #6]
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	2100      	movs	r1, #0
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f000 fc7e 	bl	800d324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3710      	adds	r7, #16
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b084      	sub	sp, #16
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	60f8      	str	r0, [r7, #12]
 800ca3a:	60b9      	str	r1, [r7, #8]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca40:	88fb      	ldrh	r3, [r7, #6]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	2100      	movs	r1, #0
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f000 fc6c 	bl	800d324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b082      	sub	sp, #8
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2204      	movs	r2, #4
 800ca62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca66:	2300      	movs	r3, #0
 800ca68:	2200      	movs	r2, #0
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 fc36 	bl	800d2de <USBD_LL_Transmit>

  return USBD_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2205      	movs	r2, #5
 800ca88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	2200      	movs	r2, #0
 800ca90:	2100      	movs	r1, #0
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fc46 	bl	800d324 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
	...

0800caa4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800caa8:	2200      	movs	r2, #0
 800caaa:	4912      	ldr	r1, [pc, #72]	; (800caf4 <MX_USB_DEVICE_Init+0x50>)
 800caac:	4812      	ldr	r0, [pc, #72]	; (800caf8 <MX_USB_DEVICE_Init+0x54>)
 800caae:	f7fe ff5e 	bl	800b96e <USBD_Init>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d001      	beq.n	800cabc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cab8:	f7f5 fb16 	bl	80020e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cabc:	490f      	ldr	r1, [pc, #60]	; (800cafc <MX_USB_DEVICE_Init+0x58>)
 800cabe:	480e      	ldr	r0, [pc, #56]	; (800caf8 <MX_USB_DEVICE_Init+0x54>)
 800cac0:	f7fe ff80 	bl	800b9c4 <USBD_RegisterClass>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d001      	beq.n	800cace <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800caca:	f7f5 fb0d 	bl	80020e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cace:	490c      	ldr	r1, [pc, #48]	; (800cb00 <MX_USB_DEVICE_Init+0x5c>)
 800cad0:	4809      	ldr	r0, [pc, #36]	; (800caf8 <MX_USB_DEVICE_Init+0x54>)
 800cad2:	f7fe feb1 	bl	800b838 <USBD_CDC_RegisterInterface>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cadc:	f7f5 fb04 	bl	80020e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cae0:	4805      	ldr	r0, [pc, #20]	; (800caf8 <MX_USB_DEVICE_Init+0x54>)
 800cae2:	f7fe ff88 	bl	800b9f6 <USBD_Start>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d001      	beq.n	800caf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800caec:	f7f5 fafc 	bl	80020e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800caf0:	bf00      	nop
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	2000013c 	.word	0x2000013c
 800caf8:	20000b74 	.word	0x20000b74
 800cafc:	20000020 	.word	0x20000020
 800cb00:	2000012c 	.word	0x2000012c

0800cb04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cb08:	2200      	movs	r2, #0
 800cb0a:	4905      	ldr	r1, [pc, #20]	; (800cb20 <CDC_Init_FS+0x1c>)
 800cb0c:	4805      	ldr	r0, [pc, #20]	; (800cb24 <CDC_Init_FS+0x20>)
 800cb0e:	f7fe fea9 	bl	800b864 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cb12:	4905      	ldr	r1, [pc, #20]	; (800cb28 <CDC_Init_FS+0x24>)
 800cb14:	4803      	ldr	r0, [pc, #12]	; (800cb24 <CDC_Init_FS+0x20>)
 800cb16:	f7fe febe 	bl	800b896 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cb1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	20001220 	.word	0x20001220
 800cb24:	20000b74 	.word	0x20000b74
 800cb28:	20000e38 	.word	0x20000e38

0800cb2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bc80      	pop	{r7}
 800cb38:	4770      	bx	lr
	...

0800cb3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	4603      	mov	r3, r0
 800cb44:	6039      	str	r1, [r7, #0]
 800cb46:	71fb      	strb	r3, [r7, #7]
 800cb48:	4613      	mov	r3, r2
 800cb4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cb4c:	79fb      	ldrb	r3, [r7, #7]
 800cb4e:	2b23      	cmp	r3, #35	; 0x23
 800cb50:	d85c      	bhi.n	800cc0c <CDC_Control_FS+0xd0>
 800cb52:	a201      	add	r2, pc, #4	; (adr r2, 800cb58 <CDC_Control_FS+0x1c>)
 800cb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb58:	0800cc0d 	.word	0x0800cc0d
 800cb5c:	0800cc0d 	.word	0x0800cc0d
 800cb60:	0800cc0d 	.word	0x0800cc0d
 800cb64:	0800cc0d 	.word	0x0800cc0d
 800cb68:	0800cc0d 	.word	0x0800cc0d
 800cb6c:	0800cc0d 	.word	0x0800cc0d
 800cb70:	0800cc0d 	.word	0x0800cc0d
 800cb74:	0800cc0d 	.word	0x0800cc0d
 800cb78:	0800cc0d 	.word	0x0800cc0d
 800cb7c:	0800cc0d 	.word	0x0800cc0d
 800cb80:	0800cc0d 	.word	0x0800cc0d
 800cb84:	0800cc0d 	.word	0x0800cc0d
 800cb88:	0800cc0d 	.word	0x0800cc0d
 800cb8c:	0800cc0d 	.word	0x0800cc0d
 800cb90:	0800cc0d 	.word	0x0800cc0d
 800cb94:	0800cc0d 	.word	0x0800cc0d
 800cb98:	0800cc0d 	.word	0x0800cc0d
 800cb9c:	0800cc0d 	.word	0x0800cc0d
 800cba0:	0800cc0d 	.word	0x0800cc0d
 800cba4:	0800cc0d 	.word	0x0800cc0d
 800cba8:	0800cc0d 	.word	0x0800cc0d
 800cbac:	0800cc0d 	.word	0x0800cc0d
 800cbb0:	0800cc0d 	.word	0x0800cc0d
 800cbb4:	0800cc0d 	.word	0x0800cc0d
 800cbb8:	0800cc0d 	.word	0x0800cc0d
 800cbbc:	0800cc0d 	.word	0x0800cc0d
 800cbc0:	0800cc0d 	.word	0x0800cc0d
 800cbc4:	0800cc0d 	.word	0x0800cc0d
 800cbc8:	0800cc0d 	.word	0x0800cc0d
 800cbcc:	0800cc0d 	.word	0x0800cc0d
 800cbd0:	0800cc0d 	.word	0x0800cc0d
 800cbd4:	0800cc0d 	.word	0x0800cc0d
 800cbd8:	0800cbe9 	.word	0x0800cbe9
 800cbdc:	0800cbfb 	.word	0x0800cbfb
 800cbe0:	0800cc0d 	.word	0x0800cc0d
 800cbe4:	0800cc0d 	.word	0x0800cc0d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800cbe8:	4b0c      	ldr	r3, [pc, #48]	; (800cc1c <CDC_Control_FS+0xe0>)
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	6810      	ldr	r0, [r2, #0]
 800cbee:	6018      	str	r0, [r3, #0]
 800cbf0:	8891      	ldrh	r1, [r2, #4]
 800cbf2:	7992      	ldrb	r2, [r2, #6]
 800cbf4:	8099      	strh	r1, [r3, #4]
 800cbf6:	719a      	strb	r2, [r3, #6]
    break;
 800cbf8:	e009      	b.n	800cc0e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	4a07      	ldr	r2, [pc, #28]	; (800cc1c <CDC_Control_FS+0xe0>)
 800cbfe:	6810      	ldr	r0, [r2, #0]
 800cc00:	6018      	str	r0, [r3, #0]
 800cc02:	8891      	ldrh	r1, [r2, #4]
 800cc04:	7992      	ldrb	r2, [r2, #6]
 800cc06:	8099      	strh	r1, [r3, #4]
 800cc08:	719a      	strb	r2, [r3, #6]
    break;
 800cc0a:	e000      	b.n	800cc0e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cc0c:	bf00      	nop
  }

  return (USBD_OK);
 800cc0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bc80      	pop	{r7}
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	20000124 	.word	0x20000124

0800cc20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d005      	beq.n	800cc3e <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4619      	mov	r1, r3
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7f3 fd53 	bl	80006e4 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cc3e:	6879      	ldr	r1, [r7, #4]
 800cc40:	4805      	ldr	r0, [pc, #20]	; (800cc58 <CDC_Receive_FS+0x38>)
 800cc42:	f7fe fe28 	bl	800b896 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cc46:	4804      	ldr	r0, [pc, #16]	; (800cc58 <CDC_Receive_FS+0x38>)
 800cc48:	f7fe fe67 	bl	800b91a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cc4c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	20000b74 	.word	0x20000b74

0800cc5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	460b      	mov	r3, r1
 800cc66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cc6c:	4b0d      	ldr	r3, [pc, #52]	; (800cca4 <CDC_Transmit_FS+0x48>)
 800cc6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d001      	beq.n	800cc82 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e00b      	b.n	800cc9a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cc82:	887b      	ldrh	r3, [r7, #2]
 800cc84:	461a      	mov	r2, r3
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	4806      	ldr	r0, [pc, #24]	; (800cca4 <CDC_Transmit_FS+0x48>)
 800cc8a:	f7fe fdeb 	bl	800b864 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cc8e:	4805      	ldr	r0, [pc, #20]	; (800cca4 <CDC_Transmit_FS+0x48>)
 800cc90:	f7fe fe14 	bl	800b8bc <USBD_CDC_TransmitPacket>
 800cc94:	4603      	mov	r3, r0
 800cc96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	20000b74 	.word	0x20000b74

0800cca8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	4603      	mov	r3, r0
 800ccb0:	6039      	str	r1, [r7, #0]
 800ccb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	2212      	movs	r2, #18
 800ccb8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ccba:	4b03      	ldr	r3, [pc, #12]	; (800ccc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bc80      	pop	{r7}
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	20000158 	.word	0x20000158

0800cccc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	6039      	str	r1, [r7, #0]
 800ccd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	2204      	movs	r2, #4
 800ccdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ccde:	4b03      	ldr	r3, [pc, #12]	; (800ccec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bc80      	pop	{r7}
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	2000016c 	.word	0x2000016c

0800ccf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	6039      	str	r1, [r7, #0]
 800ccfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccfc:	79fb      	ldrb	r3, [r7, #7]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d105      	bne.n	800cd0e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	4907      	ldr	r1, [pc, #28]	; (800cd24 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd06:	4808      	ldr	r0, [pc, #32]	; (800cd28 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd08:	f7ff fdee 	bl	800c8e8 <USBD_GetString>
 800cd0c:	e004      	b.n	800cd18 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	4904      	ldr	r1, [pc, #16]	; (800cd24 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd12:	4805      	ldr	r0, [pc, #20]	; (800cd28 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd14:	f7ff fde8 	bl	800c8e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd18:	4b02      	ldr	r3, [pc, #8]	; (800cd24 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	20001608 	.word	0x20001608
 800cd28:	0800decc 	.word	0x0800decc

0800cd2c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	6039      	str	r1, [r7, #0]
 800cd36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd38:	683a      	ldr	r2, [r7, #0]
 800cd3a:	4904      	ldr	r1, [pc, #16]	; (800cd4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd3c:	4804      	ldr	r0, [pc, #16]	; (800cd50 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd3e:	f7ff fdd3 	bl	800c8e8 <USBD_GetString>
  return USBD_StrDesc;
 800cd42:	4b02      	ldr	r3, [pc, #8]	; (800cd4c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3708      	adds	r7, #8
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	20001608 	.word	0x20001608
 800cd50:	0800dee0 	.word	0x0800dee0

0800cd54 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	6039      	str	r1, [r7, #0]
 800cd5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	221a      	movs	r2, #26
 800cd64:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd66:	f000 f843 	bl	800cdf0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cd6a:	4b02      	ldr	r3, [pc, #8]	; (800cd74 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	20000170 	.word	0x20000170

0800cd78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	6039      	str	r1, [r7, #0]
 800cd82:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	4907      	ldr	r1, [pc, #28]	; (800cdac <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd8e:	4808      	ldr	r0, [pc, #32]	; (800cdb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd90:	f7ff fdaa 	bl	800c8e8 <USBD_GetString>
 800cd94:	e004      	b.n	800cda0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	4904      	ldr	r1, [pc, #16]	; (800cdac <USBD_FS_ConfigStrDescriptor+0x34>)
 800cd9a:	4805      	ldr	r0, [pc, #20]	; (800cdb0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cd9c:	f7ff fda4 	bl	800c8e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cda0:	4b02      	ldr	r3, [pc, #8]	; (800cdac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	20001608 	.word	0x20001608
 800cdb0:	0800dee8 	.word	0x0800dee8

0800cdb4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	6039      	str	r1, [r7, #0]
 800cdbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdc0:	79fb      	ldrb	r3, [r7, #7]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d105      	bne.n	800cdd2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	4907      	ldr	r1, [pc, #28]	; (800cde8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdca:	4808      	ldr	r0, [pc, #32]	; (800cdec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cdcc:	f7ff fd8c 	bl	800c8e8 <USBD_GetString>
 800cdd0:	e004      	b.n	800cddc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	4904      	ldr	r1, [pc, #16]	; (800cde8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cdd6:	4805      	ldr	r0, [pc, #20]	; (800cdec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cdd8:	f7ff fd86 	bl	800c8e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cddc:	4b02      	ldr	r3, [pc, #8]	; (800cde8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	20001608 	.word	0x20001608
 800cdec:	0800def4 	.word	0x0800def4

0800cdf0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cdf6:	4b0f      	ldr	r3, [pc, #60]	; (800ce34 <Get_SerialNum+0x44>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cdfc:	4b0e      	ldr	r3, [pc, #56]	; (800ce38 <Get_SerialNum+0x48>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce02:	4b0e      	ldr	r3, [pc, #56]	; (800ce3c <Get_SerialNum+0x4c>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d009      	beq.n	800ce2a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce16:	2208      	movs	r2, #8
 800ce18:	4909      	ldr	r1, [pc, #36]	; (800ce40 <Get_SerialNum+0x50>)
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f000 f814 	bl	800ce48 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce20:	2204      	movs	r2, #4
 800ce22:	4908      	ldr	r1, [pc, #32]	; (800ce44 <Get_SerialNum+0x54>)
 800ce24:	68b8      	ldr	r0, [r7, #8]
 800ce26:	f000 f80f 	bl	800ce48 <IntToUnicode>
  }
}
 800ce2a:	bf00      	nop
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	1ffff7e8 	.word	0x1ffff7e8
 800ce38:	1ffff7ec 	.word	0x1ffff7ec
 800ce3c:	1ffff7f0 	.word	0x1ffff7f0
 800ce40:	20000172 	.word	0x20000172
 800ce44:	20000182 	.word	0x20000182

0800ce48 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b087      	sub	sp, #28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	4613      	mov	r3, r2
 800ce54:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	75fb      	strb	r3, [r7, #23]
 800ce5e:	e027      	b.n	800ceb0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	0f1b      	lsrs	r3, r3, #28
 800ce64:	2b09      	cmp	r3, #9
 800ce66:	d80b      	bhi.n	800ce80 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	0f1b      	lsrs	r3, r3, #28
 800ce6c:	b2da      	uxtb	r2, r3
 800ce6e:	7dfb      	ldrb	r3, [r7, #23]
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	4619      	mov	r1, r3
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	440b      	add	r3, r1
 800ce78:	3230      	adds	r2, #48	; 0x30
 800ce7a:	b2d2      	uxtb	r2, r2
 800ce7c:	701a      	strb	r2, [r3, #0]
 800ce7e:	e00a      	b.n	800ce96 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	0f1b      	lsrs	r3, r3, #28
 800ce84:	b2da      	uxtb	r2, r3
 800ce86:	7dfb      	ldrb	r3, [r7, #23]
 800ce88:	005b      	lsls	r3, r3, #1
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	440b      	add	r3, r1
 800ce90:	3237      	adds	r2, #55	; 0x37
 800ce92:	b2d2      	uxtb	r2, r2
 800ce94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	011b      	lsls	r3, r3, #4
 800ce9a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
 800ce9e:	005b      	lsls	r3, r3, #1
 800cea0:	3301      	adds	r3, #1
 800cea2:	68ba      	ldr	r2, [r7, #8]
 800cea4:	4413      	add	r3, r2
 800cea6:	2200      	movs	r2, #0
 800cea8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ceaa:	7dfb      	ldrb	r3, [r7, #23]
 800ceac:	3301      	adds	r3, #1
 800ceae:	75fb      	strb	r3, [r7, #23]
 800ceb0:	7dfa      	ldrb	r2, [r7, #23]
 800ceb2:	79fb      	ldrb	r3, [r7, #7]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d3d3      	bcc.n	800ce60 <IntToUnicode+0x18>
  }
}
 800ceb8:	bf00      	nop
 800ceba:	bf00      	nop
 800cebc:	371c      	adds	r7, #28
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bc80      	pop	{r7}
 800cec2:	4770      	bx	lr

0800cec4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a11      	ldr	r2, [pc, #68]	; (800cf18 <HAL_PCD_MspInit+0x54>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d11b      	bne.n	800cf0e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ced6:	4b11      	ldr	r3, [pc, #68]	; (800cf1c <HAL_PCD_MspInit+0x58>)
 800ced8:	69db      	ldr	r3, [r3, #28]
 800ceda:	4a10      	ldr	r2, [pc, #64]	; (800cf1c <HAL_PCD_MspInit+0x58>)
 800cedc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cee0:	61d3      	str	r3, [r2, #28]
 800cee2:	4b0e      	ldr	r3, [pc, #56]	; (800cf1c <HAL_PCD_MspInit+0x58>)
 800cee4:	69db      	ldr	r3, [r3, #28]
 800cee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ceea:	60fb      	str	r3, [r7, #12]
 800ceec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800ceee:	2200      	movs	r2, #0
 800cef0:	2100      	movs	r1, #0
 800cef2:	2013      	movs	r0, #19
 800cef4:	f7f7 fe6d 	bl	8004bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800cef8:	2013      	movs	r0, #19
 800cefa:	f7f7 fe86 	bl	8004c0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 1);
 800cefe:	2201      	movs	r2, #1
 800cf00:	2100      	movs	r1, #0
 800cf02:	2014      	movs	r0, #20
 800cf04:	f7f7 fe65 	bl	8004bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cf08:	2014      	movs	r0, #20
 800cf0a:	f7f7 fe7e 	bl	8004c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	40005c00 	.word	0x40005c00
 800cf1c:	40021000 	.word	0x40021000

0800cf20 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cf34:	4619      	mov	r1, r3
 800cf36:	4610      	mov	r0, r2
 800cf38:	f7fe fda5 	bl	800ba86 <USBD_LL_SetupStage>
}
 800cf3c:	bf00      	nop
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cf56:	78fa      	ldrb	r2, [r7, #3]
 800cf58:	6879      	ldr	r1, [r7, #4]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	4413      	add	r3, r2
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	440b      	add	r3, r1
 800cf64:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	78fb      	ldrb	r3, [r7, #3]
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	f7fe fdd7 	bl	800bb20 <USBD_LL_DataOutStage>
}
 800cf72:	bf00      	nop
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b082      	sub	sp, #8
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
 800cf82:	460b      	mov	r3, r1
 800cf84:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cf8c:	78fa      	ldrb	r2, [r7, #3]
 800cf8e:	6879      	ldr	r1, [r7, #4]
 800cf90:	4613      	mov	r3, r2
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	4413      	add	r3, r2
 800cf96:	00db      	lsls	r3, r3, #3
 800cf98:	440b      	add	r3, r1
 800cf9a:	333c      	adds	r3, #60	; 0x3c
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	78fb      	ldrb	r3, [r7, #3]
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	f7fe fe2e 	bl	800bc02 <USBD_LL_DataInStage>
}
 800cfa6:	bf00      	nop
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b082      	sub	sp, #8
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7fe ff3e 	bl	800be3e <USBD_LL_SOF>
}
 800cfc2:	bf00      	nop
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b084      	sub	sp, #16
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d001      	beq.n	800cfe2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cfde:	f7f5 f883 	bl	80020e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cfe8:	7bfa      	ldrb	r2, [r7, #15]
 800cfea:	4611      	mov	r1, r2
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fe feee 	bl	800bdce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7fe fea7 	bl	800bd4c <USBD_LL_Reset>
}
 800cffe:	bf00      	nop
 800d000:	3710      	adds	r7, #16
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
	...

0800d008 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d016:	4618      	mov	r0, r3
 800d018:	f7fe fee8 	bl	800bdec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	699b      	ldr	r3, [r3, #24]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d005      	beq.n	800d030 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d024:	4b04      	ldr	r3, [pc, #16]	; (800d038 <HAL_PCD_SuspendCallback+0x30>)
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	4a03      	ldr	r2, [pc, #12]	; (800d038 <HAL_PCD_SuspendCallback+0x30>)
 800d02a:	f043 0306 	orr.w	r3, r3, #6
 800d02e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	e000ed00 	.word	0xe000ed00

0800d03c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fe fee2 	bl	800be14 <USBD_LL_Resume>
}
 800d050:	bf00      	nop
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d060:	4a28      	ldr	r2, [pc, #160]	; (800d104 <USBD_LL_Init+0xac>)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a26      	ldr	r2, [pc, #152]	; (800d104 <USBD_LL_Init+0xac>)
 800d06c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d070:	4b24      	ldr	r3, [pc, #144]	; (800d104 <USBD_LL_Init+0xac>)
 800d072:	4a25      	ldr	r2, [pc, #148]	; (800d108 <USBD_LL_Init+0xb0>)
 800d074:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d076:	4b23      	ldr	r3, [pc, #140]	; (800d104 <USBD_LL_Init+0xac>)
 800d078:	2208      	movs	r2, #8
 800d07a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d07c:	4b21      	ldr	r3, [pc, #132]	; (800d104 <USBD_LL_Init+0xac>)
 800d07e:	2202      	movs	r2, #2
 800d080:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d082:	4b20      	ldr	r3, [pc, #128]	; (800d104 <USBD_LL_Init+0xac>)
 800d084:	2200      	movs	r2, #0
 800d086:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d088:	4b1e      	ldr	r3, [pc, #120]	; (800d104 <USBD_LL_Init+0xac>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d08e:	4b1d      	ldr	r3, [pc, #116]	; (800d104 <USBD_LL_Init+0xac>)
 800d090:	2200      	movs	r2, #0
 800d092:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d094:	481b      	ldr	r0, [pc, #108]	; (800d104 <USBD_LL_Init+0xac>)
 800d096:	f7f7 ffbf 	bl	8005018 <HAL_PCD_Init>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d0a0:	f7f5 f822 	bl	80020e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0aa:	2318      	movs	r3, #24
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	2100      	movs	r1, #0
 800d0b0:	f7f9 fc33 	bl	800691a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0ba:	2358      	movs	r3, #88	; 0x58
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2180      	movs	r1, #128	; 0x80
 800d0c0:	f7f9 fc2b 	bl	800691a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0ca:	23c0      	movs	r3, #192	; 0xc0
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	2181      	movs	r1, #129	; 0x81
 800d0d0:	f7f9 fc23 	bl	800691a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0da:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d0de:	2200      	movs	r2, #0
 800d0e0:	2101      	movs	r1, #1
 800d0e2:	f7f9 fc1a 	bl	800691a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d0ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2182      	movs	r1, #130	; 0x82
 800d0f4:	f7f9 fc11 	bl	800691a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3708      	adds	r7, #8
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	20001808 	.word	0x20001808
 800d108:	40005c00 	.word	0x40005c00

0800d10c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d114:	2300      	movs	r3, #0
 800d116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d118:	2300      	movs	r3, #0
 800d11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d122:	4618      	mov	r0, r3
 800d124:	f7f8 f883 	bl	800522e <HAL_PCD_Start>
 800d128:	4603      	mov	r3, r0
 800d12a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	4618      	mov	r0, r3
 800d130:	f000 f94e 	bl	800d3d0 <USBD_Get_USB_Status>
 800d134:	4603      	mov	r3, r0
 800d136:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d138:	7bbb      	ldrb	r3, [r7, #14]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}

0800d142 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d142:	b580      	push	{r7, lr}
 800d144:	b084      	sub	sp, #16
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
 800d14a:	4608      	mov	r0, r1
 800d14c:	4611      	mov	r1, r2
 800d14e:	461a      	mov	r2, r3
 800d150:	4603      	mov	r3, r0
 800d152:	70fb      	strb	r3, [r7, #3]
 800d154:	460b      	mov	r3, r1
 800d156:	70bb      	strb	r3, [r7, #2]
 800d158:	4613      	mov	r3, r2
 800d15a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d15c:	2300      	movs	r3, #0
 800d15e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d160:	2300      	movs	r3, #0
 800d162:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d16a:	78bb      	ldrb	r3, [r7, #2]
 800d16c:	883a      	ldrh	r2, [r7, #0]
 800d16e:	78f9      	ldrb	r1, [r7, #3]
 800d170:	f7f8 f9fb 	bl	800556a <HAL_PCD_EP_Open>
 800d174:	4603      	mov	r3, r0
 800d176:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d178:	7bfb      	ldrb	r3, [r7, #15]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f000 f928 	bl	800d3d0 <USBD_Get_USB_Status>
 800d180:	4603      	mov	r3, r0
 800d182:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d184:	7bbb      	ldrb	r3, [r7, #14]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b084      	sub	sp, #16
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	460b      	mov	r3, r1
 800d198:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1a8:	78fa      	ldrb	r2, [r7, #3]
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7f8 fa42 	bl	8005636 <HAL_PCD_EP_Close>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1b6:	7bfb      	ldrb	r3, [r7, #15]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 f909 	bl	800d3d0 <USBD_Get_USB_Status>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1e6:	78fa      	ldrb	r2, [r7, #3]
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7f8 fb02 	bl	80057f4 <HAL_PCD_EP_SetStall>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 f8ea 	bl	800d3d0 <USBD_Get_USB_Status>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d200:	7bbb      	ldrb	r3, [r7, #14]
}
 800d202:	4618      	mov	r0, r3
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	460b      	mov	r3, r1
 800d214:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d216:	2300      	movs	r3, #0
 800d218:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d21a:	2300      	movs	r3, #0
 800d21c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d224:	78fa      	ldrb	r2, [r7, #3]
 800d226:	4611      	mov	r1, r2
 800d228:	4618      	mov	r0, r3
 800d22a:	f7f8 fb43 	bl	80058b4 <HAL_PCD_EP_ClrStall>
 800d22e:	4603      	mov	r3, r0
 800d230:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d232:	7bfb      	ldrb	r3, [r7, #15]
 800d234:	4618      	mov	r0, r3
 800d236:	f000 f8cb 	bl	800d3d0 <USBD_Get_USB_Status>
 800d23a:	4603      	mov	r3, r0
 800d23c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d23e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d25a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d25c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d260:	2b00      	cmp	r3, #0
 800d262:	da0c      	bge.n	800d27e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d26a:	68f9      	ldr	r1, [r7, #12]
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	4613      	mov	r3, r2
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	4413      	add	r3, r2
 800d274:	00db      	lsls	r3, r3, #3
 800d276:	440b      	add	r3, r1
 800d278:	3302      	adds	r3, #2
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	e00b      	b.n	800d296 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d27e:	78fb      	ldrb	r3, [r7, #3]
 800d280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d284:	68f9      	ldr	r1, [r7, #12]
 800d286:	4613      	mov	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	00db      	lsls	r3, r3, #3
 800d28e:	440b      	add	r3, r1
 800d290:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d294:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d296:	4618      	mov	r0, r3
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bc80      	pop	{r7}
 800d29e:	4770      	bx	lr

0800d2a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2ba:	78fa      	ldrb	r2, [r7, #3]
 800d2bc:	4611      	mov	r1, r2
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7f8 f92e 	bl	8005520 <HAL_PCD_SetAddress>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2c8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f000 f880 	bl	800d3d0 <USBD_Get_USB_Status>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b086      	sub	sp, #24
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	60f8      	str	r0, [r7, #12]
 800d2e6:	607a      	str	r2, [r7, #4]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	72fb      	strb	r3, [r7, #11]
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d300:	893b      	ldrh	r3, [r7, #8]
 800d302:	7af9      	ldrb	r1, [r7, #11]
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	f7f8 fa32 	bl	800576e <HAL_PCD_EP_Transmit>
 800d30a:	4603      	mov	r3, r0
 800d30c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d30e:	7dfb      	ldrb	r3, [r7, #23]
 800d310:	4618      	mov	r0, r3
 800d312:	f000 f85d 	bl	800d3d0 <USBD_Get_USB_Status>
 800d316:	4603      	mov	r3, r0
 800d318:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d31a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3718      	adds	r7, #24
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b086      	sub	sp, #24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	607a      	str	r2, [r7, #4]
 800d32e:	461a      	mov	r2, r3
 800d330:	460b      	mov	r3, r1
 800d332:	72fb      	strb	r3, [r7, #11]
 800d334:	4613      	mov	r3, r2
 800d336:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d33c:	2300      	movs	r3, #0
 800d33e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d346:	893b      	ldrh	r3, [r7, #8]
 800d348:	7af9      	ldrb	r1, [r7, #11]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	f7f8 f9bb 	bl	80056c6 <HAL_PCD_EP_Receive>
 800d350:	4603      	mov	r3, r0
 800d352:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d354:	7dfb      	ldrb	r3, [r7, #23]
 800d356:	4618      	mov	r0, r3
 800d358:	f000 f83a 	bl	800d3d0 <USBD_Get_USB_Status>
 800d35c:	4603      	mov	r3, r0
 800d35e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d360:	7dbb      	ldrb	r3, [r7, #22]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3718      	adds	r7, #24
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b082      	sub	sp, #8
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
 800d372:	460b      	mov	r3, r1
 800d374:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d37c:	78fa      	ldrb	r2, [r7, #3]
 800d37e:	4611      	mov	r1, r2
 800d380:	4618      	mov	r0, r3
 800d382:	f7f8 f9dd 	bl	8005740 <HAL_PCD_EP_GetRxCount>
 800d386:	4603      	mov	r3, r0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d398:	4b02      	ldr	r3, [pc, #8]	; (800d3a4 <USBD_static_malloc+0x14>)
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	370c      	adds	r7, #12
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bc80      	pop	{r7}
 800d3a2:	4770      	bx	lr
 800d3a4:	20001af4 	.word	0x20001af4

0800d3a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b083      	sub	sp, #12
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]

}
 800d3b0:	bf00      	nop
 800d3b2:	370c      	adds	r7, #12
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bc80      	pop	{r7}
 800d3b8:	4770      	bx	lr

0800d3ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ba:	b480      	push	{r7}
 800d3bc:	b083      	sub	sp, #12
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d3c6:	bf00      	nop
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bc80      	pop	{r7}
 800d3ce:	4770      	bx	lr

0800d3d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d3de:	79fb      	ldrb	r3, [r7, #7]
 800d3e0:	2b03      	cmp	r3, #3
 800d3e2:	d817      	bhi.n	800d414 <USBD_Get_USB_Status+0x44>
 800d3e4:	a201      	add	r2, pc, #4	; (adr r2, 800d3ec <USBD_Get_USB_Status+0x1c>)
 800d3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ea:	bf00      	nop
 800d3ec:	0800d3fd 	.word	0x0800d3fd
 800d3f0:	0800d403 	.word	0x0800d403
 800d3f4:	0800d409 	.word	0x0800d409
 800d3f8:	0800d40f 	.word	0x0800d40f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d400:	e00b      	b.n	800d41a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d402:	2302      	movs	r3, #2
 800d404:	73fb      	strb	r3, [r7, #15]
    break;
 800d406:	e008      	b.n	800d41a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d408:	2301      	movs	r3, #1
 800d40a:	73fb      	strb	r3, [r7, #15]
    break;
 800d40c:	e005      	b.n	800d41a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d40e:	2302      	movs	r3, #2
 800d410:	73fb      	strb	r3, [r7, #15]
    break;
 800d412:	e002      	b.n	800d41a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d414:	2302      	movs	r3, #2
 800d416:	73fb      	strb	r3, [r7, #15]
    break;
 800d418:	bf00      	nop
  }
  return usb_status;
 800d41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3714      	adds	r7, #20
 800d420:	46bd      	mov	sp, r7
 800d422:	bc80      	pop	{r7}
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop

0800d428 <__errno>:
 800d428:	4b01      	ldr	r3, [pc, #4]	; (800d430 <__errno+0x8>)
 800d42a:	6818      	ldr	r0, [r3, #0]
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	2000018c 	.word	0x2000018c

0800d434 <__libc_init_array>:
 800d434:	b570      	push	{r4, r5, r6, lr}
 800d436:	2600      	movs	r6, #0
 800d438:	4d0c      	ldr	r5, [pc, #48]	; (800d46c <__libc_init_array+0x38>)
 800d43a:	4c0d      	ldr	r4, [pc, #52]	; (800d470 <__libc_init_array+0x3c>)
 800d43c:	1b64      	subs	r4, r4, r5
 800d43e:	10a4      	asrs	r4, r4, #2
 800d440:	42a6      	cmp	r6, r4
 800d442:	d109      	bne.n	800d458 <__libc_init_array+0x24>
 800d444:	f000 fcd6 	bl	800ddf4 <_init>
 800d448:	2600      	movs	r6, #0
 800d44a:	4d0a      	ldr	r5, [pc, #40]	; (800d474 <__libc_init_array+0x40>)
 800d44c:	4c0a      	ldr	r4, [pc, #40]	; (800d478 <__libc_init_array+0x44>)
 800d44e:	1b64      	subs	r4, r4, r5
 800d450:	10a4      	asrs	r4, r4, #2
 800d452:	42a6      	cmp	r6, r4
 800d454:	d105      	bne.n	800d462 <__libc_init_array+0x2e>
 800d456:	bd70      	pop	{r4, r5, r6, pc}
 800d458:	f855 3b04 	ldr.w	r3, [r5], #4
 800d45c:	4798      	blx	r3
 800d45e:	3601      	adds	r6, #1
 800d460:	e7ee      	b.n	800d440 <__libc_init_array+0xc>
 800d462:	f855 3b04 	ldr.w	r3, [r5], #4
 800d466:	4798      	blx	r3
 800d468:	3601      	adds	r6, #1
 800d46a:	e7f2      	b.n	800d452 <__libc_init_array+0x1e>
 800d46c:	0800ed9c 	.word	0x0800ed9c
 800d470:	0800ed9c 	.word	0x0800ed9c
 800d474:	0800ed9c 	.word	0x0800ed9c
 800d478:	0800eda0 	.word	0x0800eda0

0800d47c <memcpy>:
 800d47c:	440a      	add	r2, r1
 800d47e:	4291      	cmp	r1, r2
 800d480:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d484:	d100      	bne.n	800d488 <memcpy+0xc>
 800d486:	4770      	bx	lr
 800d488:	b510      	push	{r4, lr}
 800d48a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d48e:	4291      	cmp	r1, r2
 800d490:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d494:	d1f9      	bne.n	800d48a <memcpy+0xe>
 800d496:	bd10      	pop	{r4, pc}

0800d498 <memset>:
 800d498:	4603      	mov	r3, r0
 800d49a:	4402      	add	r2, r0
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d100      	bne.n	800d4a2 <memset+0xa>
 800d4a0:	4770      	bx	lr
 800d4a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d4a6:	e7f9      	b.n	800d49c <memset+0x4>

0800d4a8 <sniprintf>:
 800d4a8:	b40c      	push	{r2, r3}
 800d4aa:	b530      	push	{r4, r5, lr}
 800d4ac:	4b17      	ldr	r3, [pc, #92]	; (800d50c <sniprintf+0x64>)
 800d4ae:	1e0c      	subs	r4, r1, #0
 800d4b0:	681d      	ldr	r5, [r3, #0]
 800d4b2:	b09d      	sub	sp, #116	; 0x74
 800d4b4:	da08      	bge.n	800d4c8 <sniprintf+0x20>
 800d4b6:	238b      	movs	r3, #139	; 0x8b
 800d4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4bc:	602b      	str	r3, [r5, #0]
 800d4be:	b01d      	add	sp, #116	; 0x74
 800d4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4c4:	b002      	add	sp, #8
 800d4c6:	4770      	bx	lr
 800d4c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d4cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d4d0:	bf0c      	ite	eq
 800d4d2:	4623      	moveq	r3, r4
 800d4d4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d4d8:	9304      	str	r3, [sp, #16]
 800d4da:	9307      	str	r3, [sp, #28]
 800d4dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4e0:	9002      	str	r0, [sp, #8]
 800d4e2:	9006      	str	r0, [sp, #24]
 800d4e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	ab21      	add	r3, sp, #132	; 0x84
 800d4ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d4ee:	a902      	add	r1, sp, #8
 800d4f0:	9301      	str	r3, [sp, #4]
 800d4f2:	f000 f88f 	bl	800d614 <_svfiprintf_r>
 800d4f6:	1c43      	adds	r3, r0, #1
 800d4f8:	bfbc      	itt	lt
 800d4fa:	238b      	movlt	r3, #139	; 0x8b
 800d4fc:	602b      	strlt	r3, [r5, #0]
 800d4fe:	2c00      	cmp	r4, #0
 800d500:	d0dd      	beq.n	800d4be <sniprintf+0x16>
 800d502:	2200      	movs	r2, #0
 800d504:	9b02      	ldr	r3, [sp, #8]
 800d506:	701a      	strb	r2, [r3, #0]
 800d508:	e7d9      	b.n	800d4be <sniprintf+0x16>
 800d50a:	bf00      	nop
 800d50c:	2000018c 	.word	0x2000018c

0800d510 <strncmp>:
 800d510:	4603      	mov	r3, r0
 800d512:	b510      	push	{r4, lr}
 800d514:	b172      	cbz	r2, 800d534 <strncmp+0x24>
 800d516:	3901      	subs	r1, #1
 800d518:	1884      	adds	r4, r0, r2
 800d51a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d51e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d522:	4290      	cmp	r0, r2
 800d524:	d101      	bne.n	800d52a <strncmp+0x1a>
 800d526:	42a3      	cmp	r3, r4
 800d528:	d101      	bne.n	800d52e <strncmp+0x1e>
 800d52a:	1a80      	subs	r0, r0, r2
 800d52c:	bd10      	pop	{r4, pc}
 800d52e:	2800      	cmp	r0, #0
 800d530:	d1f3      	bne.n	800d51a <strncmp+0xa>
 800d532:	e7fa      	b.n	800d52a <strncmp+0x1a>
 800d534:	4610      	mov	r0, r2
 800d536:	e7f9      	b.n	800d52c <strncmp+0x1c>

0800d538 <strncpy>:
 800d538:	4603      	mov	r3, r0
 800d53a:	b510      	push	{r4, lr}
 800d53c:	3901      	subs	r1, #1
 800d53e:	b132      	cbz	r2, 800d54e <strncpy+0x16>
 800d540:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d544:	3a01      	subs	r2, #1
 800d546:	f803 4b01 	strb.w	r4, [r3], #1
 800d54a:	2c00      	cmp	r4, #0
 800d54c:	d1f7      	bne.n	800d53e <strncpy+0x6>
 800d54e:	2100      	movs	r1, #0
 800d550:	441a      	add	r2, r3
 800d552:	4293      	cmp	r3, r2
 800d554:	d100      	bne.n	800d558 <strncpy+0x20>
 800d556:	bd10      	pop	{r4, pc}
 800d558:	f803 1b01 	strb.w	r1, [r3], #1
 800d55c:	e7f9      	b.n	800d552 <strncpy+0x1a>

0800d55e <__ssputs_r>:
 800d55e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d562:	688e      	ldr	r6, [r1, #8]
 800d564:	4682      	mov	sl, r0
 800d566:	429e      	cmp	r6, r3
 800d568:	460c      	mov	r4, r1
 800d56a:	4690      	mov	r8, r2
 800d56c:	461f      	mov	r7, r3
 800d56e:	d838      	bhi.n	800d5e2 <__ssputs_r+0x84>
 800d570:	898a      	ldrh	r2, [r1, #12]
 800d572:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d576:	d032      	beq.n	800d5de <__ssputs_r+0x80>
 800d578:	6825      	ldr	r5, [r4, #0]
 800d57a:	6909      	ldr	r1, [r1, #16]
 800d57c:	3301      	adds	r3, #1
 800d57e:	eba5 0901 	sub.w	r9, r5, r1
 800d582:	6965      	ldr	r5, [r4, #20]
 800d584:	444b      	add	r3, r9
 800d586:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d58a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d58e:	106d      	asrs	r5, r5, #1
 800d590:	429d      	cmp	r5, r3
 800d592:	bf38      	it	cc
 800d594:	461d      	movcc	r5, r3
 800d596:	0553      	lsls	r3, r2, #21
 800d598:	d531      	bpl.n	800d5fe <__ssputs_r+0xa0>
 800d59a:	4629      	mov	r1, r5
 800d59c:	f000 fb60 	bl	800dc60 <_malloc_r>
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	b950      	cbnz	r0, 800d5ba <__ssputs_r+0x5c>
 800d5a4:	230c      	movs	r3, #12
 800d5a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5aa:	f8ca 3000 	str.w	r3, [sl]
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5b4:	81a3      	strh	r3, [r4, #12]
 800d5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ba:	464a      	mov	r2, r9
 800d5bc:	6921      	ldr	r1, [r4, #16]
 800d5be:	f7ff ff5d 	bl	800d47c <memcpy>
 800d5c2:	89a3      	ldrh	r3, [r4, #12]
 800d5c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5cc:	81a3      	strh	r3, [r4, #12]
 800d5ce:	6126      	str	r6, [r4, #16]
 800d5d0:	444e      	add	r6, r9
 800d5d2:	6026      	str	r6, [r4, #0]
 800d5d4:	463e      	mov	r6, r7
 800d5d6:	6165      	str	r5, [r4, #20]
 800d5d8:	eba5 0509 	sub.w	r5, r5, r9
 800d5dc:	60a5      	str	r5, [r4, #8]
 800d5de:	42be      	cmp	r6, r7
 800d5e0:	d900      	bls.n	800d5e4 <__ssputs_r+0x86>
 800d5e2:	463e      	mov	r6, r7
 800d5e4:	4632      	mov	r2, r6
 800d5e6:	4641      	mov	r1, r8
 800d5e8:	6820      	ldr	r0, [r4, #0]
 800d5ea:	f000 fab7 	bl	800db5c <memmove>
 800d5ee:	68a3      	ldr	r3, [r4, #8]
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	1b9b      	subs	r3, r3, r6
 800d5f4:	60a3      	str	r3, [r4, #8]
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	4433      	add	r3, r6
 800d5fa:	6023      	str	r3, [r4, #0]
 800d5fc:	e7db      	b.n	800d5b6 <__ssputs_r+0x58>
 800d5fe:	462a      	mov	r2, r5
 800d600:	f000 fba2 	bl	800dd48 <_realloc_r>
 800d604:	4606      	mov	r6, r0
 800d606:	2800      	cmp	r0, #0
 800d608:	d1e1      	bne.n	800d5ce <__ssputs_r+0x70>
 800d60a:	4650      	mov	r0, sl
 800d60c:	6921      	ldr	r1, [r4, #16]
 800d60e:	f000 fabf 	bl	800db90 <_free_r>
 800d612:	e7c7      	b.n	800d5a4 <__ssputs_r+0x46>

0800d614 <_svfiprintf_r>:
 800d614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d618:	4698      	mov	r8, r3
 800d61a:	898b      	ldrh	r3, [r1, #12]
 800d61c:	4607      	mov	r7, r0
 800d61e:	061b      	lsls	r3, r3, #24
 800d620:	460d      	mov	r5, r1
 800d622:	4614      	mov	r4, r2
 800d624:	b09d      	sub	sp, #116	; 0x74
 800d626:	d50e      	bpl.n	800d646 <_svfiprintf_r+0x32>
 800d628:	690b      	ldr	r3, [r1, #16]
 800d62a:	b963      	cbnz	r3, 800d646 <_svfiprintf_r+0x32>
 800d62c:	2140      	movs	r1, #64	; 0x40
 800d62e:	f000 fb17 	bl	800dc60 <_malloc_r>
 800d632:	6028      	str	r0, [r5, #0]
 800d634:	6128      	str	r0, [r5, #16]
 800d636:	b920      	cbnz	r0, 800d642 <_svfiprintf_r+0x2e>
 800d638:	230c      	movs	r3, #12
 800d63a:	603b      	str	r3, [r7, #0]
 800d63c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d640:	e0d1      	b.n	800d7e6 <_svfiprintf_r+0x1d2>
 800d642:	2340      	movs	r3, #64	; 0x40
 800d644:	616b      	str	r3, [r5, #20]
 800d646:	2300      	movs	r3, #0
 800d648:	9309      	str	r3, [sp, #36]	; 0x24
 800d64a:	2320      	movs	r3, #32
 800d64c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d650:	2330      	movs	r3, #48	; 0x30
 800d652:	f04f 0901 	mov.w	r9, #1
 800d656:	f8cd 800c 	str.w	r8, [sp, #12]
 800d65a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d800 <_svfiprintf_r+0x1ec>
 800d65e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d662:	4623      	mov	r3, r4
 800d664:	469a      	mov	sl, r3
 800d666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d66a:	b10a      	cbz	r2, 800d670 <_svfiprintf_r+0x5c>
 800d66c:	2a25      	cmp	r2, #37	; 0x25
 800d66e:	d1f9      	bne.n	800d664 <_svfiprintf_r+0x50>
 800d670:	ebba 0b04 	subs.w	fp, sl, r4
 800d674:	d00b      	beq.n	800d68e <_svfiprintf_r+0x7a>
 800d676:	465b      	mov	r3, fp
 800d678:	4622      	mov	r2, r4
 800d67a:	4629      	mov	r1, r5
 800d67c:	4638      	mov	r0, r7
 800d67e:	f7ff ff6e 	bl	800d55e <__ssputs_r>
 800d682:	3001      	adds	r0, #1
 800d684:	f000 80aa 	beq.w	800d7dc <_svfiprintf_r+0x1c8>
 800d688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d68a:	445a      	add	r2, fp
 800d68c:	9209      	str	r2, [sp, #36]	; 0x24
 800d68e:	f89a 3000 	ldrb.w	r3, [sl]
 800d692:	2b00      	cmp	r3, #0
 800d694:	f000 80a2 	beq.w	800d7dc <_svfiprintf_r+0x1c8>
 800d698:	2300      	movs	r3, #0
 800d69a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d69e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6a2:	f10a 0a01 	add.w	sl, sl, #1
 800d6a6:	9304      	str	r3, [sp, #16]
 800d6a8:	9307      	str	r3, [sp, #28]
 800d6aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6ae:	931a      	str	r3, [sp, #104]	; 0x68
 800d6b0:	4654      	mov	r4, sl
 800d6b2:	2205      	movs	r2, #5
 800d6b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6b8:	4851      	ldr	r0, [pc, #324]	; (800d800 <_svfiprintf_r+0x1ec>)
 800d6ba:	f000 fa41 	bl	800db40 <memchr>
 800d6be:	9a04      	ldr	r2, [sp, #16]
 800d6c0:	b9d8      	cbnz	r0, 800d6fa <_svfiprintf_r+0xe6>
 800d6c2:	06d0      	lsls	r0, r2, #27
 800d6c4:	bf44      	itt	mi
 800d6c6:	2320      	movmi	r3, #32
 800d6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6cc:	0711      	lsls	r1, r2, #28
 800d6ce:	bf44      	itt	mi
 800d6d0:	232b      	movmi	r3, #43	; 0x2b
 800d6d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d6da:	2b2a      	cmp	r3, #42	; 0x2a
 800d6dc:	d015      	beq.n	800d70a <_svfiprintf_r+0xf6>
 800d6de:	4654      	mov	r4, sl
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	f04f 0c0a 	mov.w	ip, #10
 800d6e6:	9a07      	ldr	r2, [sp, #28]
 800d6e8:	4621      	mov	r1, r4
 800d6ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6ee:	3b30      	subs	r3, #48	; 0x30
 800d6f0:	2b09      	cmp	r3, #9
 800d6f2:	d94e      	bls.n	800d792 <_svfiprintf_r+0x17e>
 800d6f4:	b1b0      	cbz	r0, 800d724 <_svfiprintf_r+0x110>
 800d6f6:	9207      	str	r2, [sp, #28]
 800d6f8:	e014      	b.n	800d724 <_svfiprintf_r+0x110>
 800d6fa:	eba0 0308 	sub.w	r3, r0, r8
 800d6fe:	fa09 f303 	lsl.w	r3, r9, r3
 800d702:	4313      	orrs	r3, r2
 800d704:	46a2      	mov	sl, r4
 800d706:	9304      	str	r3, [sp, #16]
 800d708:	e7d2      	b.n	800d6b0 <_svfiprintf_r+0x9c>
 800d70a:	9b03      	ldr	r3, [sp, #12]
 800d70c:	1d19      	adds	r1, r3, #4
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	9103      	str	r1, [sp, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	bfbb      	ittet	lt
 800d716:	425b      	neglt	r3, r3
 800d718:	f042 0202 	orrlt.w	r2, r2, #2
 800d71c:	9307      	strge	r3, [sp, #28]
 800d71e:	9307      	strlt	r3, [sp, #28]
 800d720:	bfb8      	it	lt
 800d722:	9204      	strlt	r2, [sp, #16]
 800d724:	7823      	ldrb	r3, [r4, #0]
 800d726:	2b2e      	cmp	r3, #46	; 0x2e
 800d728:	d10c      	bne.n	800d744 <_svfiprintf_r+0x130>
 800d72a:	7863      	ldrb	r3, [r4, #1]
 800d72c:	2b2a      	cmp	r3, #42	; 0x2a
 800d72e:	d135      	bne.n	800d79c <_svfiprintf_r+0x188>
 800d730:	9b03      	ldr	r3, [sp, #12]
 800d732:	3402      	adds	r4, #2
 800d734:	1d1a      	adds	r2, r3, #4
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	9203      	str	r2, [sp, #12]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	bfb8      	it	lt
 800d73e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d742:	9305      	str	r3, [sp, #20]
 800d744:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d804 <_svfiprintf_r+0x1f0>
 800d748:	2203      	movs	r2, #3
 800d74a:	4650      	mov	r0, sl
 800d74c:	7821      	ldrb	r1, [r4, #0]
 800d74e:	f000 f9f7 	bl	800db40 <memchr>
 800d752:	b140      	cbz	r0, 800d766 <_svfiprintf_r+0x152>
 800d754:	2340      	movs	r3, #64	; 0x40
 800d756:	eba0 000a 	sub.w	r0, r0, sl
 800d75a:	fa03 f000 	lsl.w	r0, r3, r0
 800d75e:	9b04      	ldr	r3, [sp, #16]
 800d760:	3401      	adds	r4, #1
 800d762:	4303      	orrs	r3, r0
 800d764:	9304      	str	r3, [sp, #16]
 800d766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d76a:	2206      	movs	r2, #6
 800d76c:	4826      	ldr	r0, [pc, #152]	; (800d808 <_svfiprintf_r+0x1f4>)
 800d76e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d772:	f000 f9e5 	bl	800db40 <memchr>
 800d776:	2800      	cmp	r0, #0
 800d778:	d038      	beq.n	800d7ec <_svfiprintf_r+0x1d8>
 800d77a:	4b24      	ldr	r3, [pc, #144]	; (800d80c <_svfiprintf_r+0x1f8>)
 800d77c:	bb1b      	cbnz	r3, 800d7c6 <_svfiprintf_r+0x1b2>
 800d77e:	9b03      	ldr	r3, [sp, #12]
 800d780:	3307      	adds	r3, #7
 800d782:	f023 0307 	bic.w	r3, r3, #7
 800d786:	3308      	adds	r3, #8
 800d788:	9303      	str	r3, [sp, #12]
 800d78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d78c:	4433      	add	r3, r6
 800d78e:	9309      	str	r3, [sp, #36]	; 0x24
 800d790:	e767      	b.n	800d662 <_svfiprintf_r+0x4e>
 800d792:	460c      	mov	r4, r1
 800d794:	2001      	movs	r0, #1
 800d796:	fb0c 3202 	mla	r2, ip, r2, r3
 800d79a:	e7a5      	b.n	800d6e8 <_svfiprintf_r+0xd4>
 800d79c:	2300      	movs	r3, #0
 800d79e:	f04f 0c0a 	mov.w	ip, #10
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	3401      	adds	r4, #1
 800d7a6:	9305      	str	r3, [sp, #20]
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7ae:	3a30      	subs	r2, #48	; 0x30
 800d7b0:	2a09      	cmp	r2, #9
 800d7b2:	d903      	bls.n	800d7bc <_svfiprintf_r+0x1a8>
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d0c5      	beq.n	800d744 <_svfiprintf_r+0x130>
 800d7b8:	9105      	str	r1, [sp, #20]
 800d7ba:	e7c3      	b.n	800d744 <_svfiprintf_r+0x130>
 800d7bc:	4604      	mov	r4, r0
 800d7be:	2301      	movs	r3, #1
 800d7c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7c4:	e7f0      	b.n	800d7a8 <_svfiprintf_r+0x194>
 800d7c6:	ab03      	add	r3, sp, #12
 800d7c8:	9300      	str	r3, [sp, #0]
 800d7ca:	462a      	mov	r2, r5
 800d7cc:	4638      	mov	r0, r7
 800d7ce:	4b10      	ldr	r3, [pc, #64]	; (800d810 <_svfiprintf_r+0x1fc>)
 800d7d0:	a904      	add	r1, sp, #16
 800d7d2:	f3af 8000 	nop.w
 800d7d6:	1c42      	adds	r2, r0, #1
 800d7d8:	4606      	mov	r6, r0
 800d7da:	d1d6      	bne.n	800d78a <_svfiprintf_r+0x176>
 800d7dc:	89ab      	ldrh	r3, [r5, #12]
 800d7de:	065b      	lsls	r3, r3, #25
 800d7e0:	f53f af2c 	bmi.w	800d63c <_svfiprintf_r+0x28>
 800d7e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7e6:	b01d      	add	sp, #116	; 0x74
 800d7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ec:	ab03      	add	r3, sp, #12
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	462a      	mov	r2, r5
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	4b06      	ldr	r3, [pc, #24]	; (800d810 <_svfiprintf_r+0x1fc>)
 800d7f6:	a904      	add	r1, sp, #16
 800d7f8:	f000 f87c 	bl	800d8f4 <_printf_i>
 800d7fc:	e7eb      	b.n	800d7d6 <_svfiprintf_r+0x1c2>
 800d7fe:	bf00      	nop
 800d800:	0800ed67 	.word	0x0800ed67
 800d804:	0800ed6d 	.word	0x0800ed6d
 800d808:	0800ed71 	.word	0x0800ed71
 800d80c:	00000000 	.word	0x00000000
 800d810:	0800d55f 	.word	0x0800d55f

0800d814 <_printf_common>:
 800d814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d818:	4616      	mov	r6, r2
 800d81a:	4699      	mov	r9, r3
 800d81c:	688a      	ldr	r2, [r1, #8]
 800d81e:	690b      	ldr	r3, [r1, #16]
 800d820:	4607      	mov	r7, r0
 800d822:	4293      	cmp	r3, r2
 800d824:	bfb8      	it	lt
 800d826:	4613      	movlt	r3, r2
 800d828:	6033      	str	r3, [r6, #0]
 800d82a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d82e:	460c      	mov	r4, r1
 800d830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d834:	b10a      	cbz	r2, 800d83a <_printf_common+0x26>
 800d836:	3301      	adds	r3, #1
 800d838:	6033      	str	r3, [r6, #0]
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	0699      	lsls	r1, r3, #26
 800d83e:	bf42      	ittt	mi
 800d840:	6833      	ldrmi	r3, [r6, #0]
 800d842:	3302      	addmi	r3, #2
 800d844:	6033      	strmi	r3, [r6, #0]
 800d846:	6825      	ldr	r5, [r4, #0]
 800d848:	f015 0506 	ands.w	r5, r5, #6
 800d84c:	d106      	bne.n	800d85c <_printf_common+0x48>
 800d84e:	f104 0a19 	add.w	sl, r4, #25
 800d852:	68e3      	ldr	r3, [r4, #12]
 800d854:	6832      	ldr	r2, [r6, #0]
 800d856:	1a9b      	subs	r3, r3, r2
 800d858:	42ab      	cmp	r3, r5
 800d85a:	dc28      	bgt.n	800d8ae <_printf_common+0x9a>
 800d85c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d860:	1e13      	subs	r3, r2, #0
 800d862:	6822      	ldr	r2, [r4, #0]
 800d864:	bf18      	it	ne
 800d866:	2301      	movne	r3, #1
 800d868:	0692      	lsls	r2, r2, #26
 800d86a:	d42d      	bmi.n	800d8c8 <_printf_common+0xb4>
 800d86c:	4649      	mov	r1, r9
 800d86e:	4638      	mov	r0, r7
 800d870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d874:	47c0      	blx	r8
 800d876:	3001      	adds	r0, #1
 800d878:	d020      	beq.n	800d8bc <_printf_common+0xa8>
 800d87a:	6823      	ldr	r3, [r4, #0]
 800d87c:	68e5      	ldr	r5, [r4, #12]
 800d87e:	f003 0306 	and.w	r3, r3, #6
 800d882:	2b04      	cmp	r3, #4
 800d884:	bf18      	it	ne
 800d886:	2500      	movne	r5, #0
 800d888:	6832      	ldr	r2, [r6, #0]
 800d88a:	f04f 0600 	mov.w	r6, #0
 800d88e:	68a3      	ldr	r3, [r4, #8]
 800d890:	bf08      	it	eq
 800d892:	1aad      	subeq	r5, r5, r2
 800d894:	6922      	ldr	r2, [r4, #16]
 800d896:	bf08      	it	eq
 800d898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d89c:	4293      	cmp	r3, r2
 800d89e:	bfc4      	itt	gt
 800d8a0:	1a9b      	subgt	r3, r3, r2
 800d8a2:	18ed      	addgt	r5, r5, r3
 800d8a4:	341a      	adds	r4, #26
 800d8a6:	42b5      	cmp	r5, r6
 800d8a8:	d11a      	bne.n	800d8e0 <_printf_common+0xcc>
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	e008      	b.n	800d8c0 <_printf_common+0xac>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	4652      	mov	r2, sl
 800d8b2:	4649      	mov	r1, r9
 800d8b4:	4638      	mov	r0, r7
 800d8b6:	47c0      	blx	r8
 800d8b8:	3001      	adds	r0, #1
 800d8ba:	d103      	bne.n	800d8c4 <_printf_common+0xb0>
 800d8bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c4:	3501      	adds	r5, #1
 800d8c6:	e7c4      	b.n	800d852 <_printf_common+0x3e>
 800d8c8:	2030      	movs	r0, #48	; 0x30
 800d8ca:	18e1      	adds	r1, r4, r3
 800d8cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d8d0:	1c5a      	adds	r2, r3, #1
 800d8d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d8d6:	4422      	add	r2, r4
 800d8d8:	3302      	adds	r3, #2
 800d8da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d8de:	e7c5      	b.n	800d86c <_printf_common+0x58>
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	4649      	mov	r1, r9
 800d8e6:	4638      	mov	r0, r7
 800d8e8:	47c0      	blx	r8
 800d8ea:	3001      	adds	r0, #1
 800d8ec:	d0e6      	beq.n	800d8bc <_printf_common+0xa8>
 800d8ee:	3601      	adds	r6, #1
 800d8f0:	e7d9      	b.n	800d8a6 <_printf_common+0x92>
	...

0800d8f4 <_printf_i>:
 800d8f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f8:	7e0f      	ldrb	r7, [r1, #24]
 800d8fa:	4691      	mov	r9, r2
 800d8fc:	2f78      	cmp	r7, #120	; 0x78
 800d8fe:	4680      	mov	r8, r0
 800d900:	460c      	mov	r4, r1
 800d902:	469a      	mov	sl, r3
 800d904:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d90a:	d807      	bhi.n	800d91c <_printf_i+0x28>
 800d90c:	2f62      	cmp	r7, #98	; 0x62
 800d90e:	d80a      	bhi.n	800d926 <_printf_i+0x32>
 800d910:	2f00      	cmp	r7, #0
 800d912:	f000 80d9 	beq.w	800dac8 <_printf_i+0x1d4>
 800d916:	2f58      	cmp	r7, #88	; 0x58
 800d918:	f000 80a4 	beq.w	800da64 <_printf_i+0x170>
 800d91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d924:	e03a      	b.n	800d99c <_printf_i+0xa8>
 800d926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d92a:	2b15      	cmp	r3, #21
 800d92c:	d8f6      	bhi.n	800d91c <_printf_i+0x28>
 800d92e:	a101      	add	r1, pc, #4	; (adr r1, 800d934 <_printf_i+0x40>)
 800d930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d934:	0800d98d 	.word	0x0800d98d
 800d938:	0800d9a1 	.word	0x0800d9a1
 800d93c:	0800d91d 	.word	0x0800d91d
 800d940:	0800d91d 	.word	0x0800d91d
 800d944:	0800d91d 	.word	0x0800d91d
 800d948:	0800d91d 	.word	0x0800d91d
 800d94c:	0800d9a1 	.word	0x0800d9a1
 800d950:	0800d91d 	.word	0x0800d91d
 800d954:	0800d91d 	.word	0x0800d91d
 800d958:	0800d91d 	.word	0x0800d91d
 800d95c:	0800d91d 	.word	0x0800d91d
 800d960:	0800daaf 	.word	0x0800daaf
 800d964:	0800d9d1 	.word	0x0800d9d1
 800d968:	0800da91 	.word	0x0800da91
 800d96c:	0800d91d 	.word	0x0800d91d
 800d970:	0800d91d 	.word	0x0800d91d
 800d974:	0800dad1 	.word	0x0800dad1
 800d978:	0800d91d 	.word	0x0800d91d
 800d97c:	0800d9d1 	.word	0x0800d9d1
 800d980:	0800d91d 	.word	0x0800d91d
 800d984:	0800d91d 	.word	0x0800d91d
 800d988:	0800da99 	.word	0x0800da99
 800d98c:	682b      	ldr	r3, [r5, #0]
 800d98e:	1d1a      	adds	r2, r3, #4
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	602a      	str	r2, [r5, #0]
 800d994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d99c:	2301      	movs	r3, #1
 800d99e:	e0a4      	b.n	800daea <_printf_i+0x1f6>
 800d9a0:	6820      	ldr	r0, [r4, #0]
 800d9a2:	6829      	ldr	r1, [r5, #0]
 800d9a4:	0606      	lsls	r6, r0, #24
 800d9a6:	f101 0304 	add.w	r3, r1, #4
 800d9aa:	d50a      	bpl.n	800d9c2 <_printf_i+0xce>
 800d9ac:	680e      	ldr	r6, [r1, #0]
 800d9ae:	602b      	str	r3, [r5, #0]
 800d9b0:	2e00      	cmp	r6, #0
 800d9b2:	da03      	bge.n	800d9bc <_printf_i+0xc8>
 800d9b4:	232d      	movs	r3, #45	; 0x2d
 800d9b6:	4276      	negs	r6, r6
 800d9b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9bc:	230a      	movs	r3, #10
 800d9be:	485e      	ldr	r0, [pc, #376]	; (800db38 <_printf_i+0x244>)
 800d9c0:	e019      	b.n	800d9f6 <_printf_i+0x102>
 800d9c2:	680e      	ldr	r6, [r1, #0]
 800d9c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d9c8:	602b      	str	r3, [r5, #0]
 800d9ca:	bf18      	it	ne
 800d9cc:	b236      	sxthne	r6, r6
 800d9ce:	e7ef      	b.n	800d9b0 <_printf_i+0xbc>
 800d9d0:	682b      	ldr	r3, [r5, #0]
 800d9d2:	6820      	ldr	r0, [r4, #0]
 800d9d4:	1d19      	adds	r1, r3, #4
 800d9d6:	6029      	str	r1, [r5, #0]
 800d9d8:	0601      	lsls	r1, r0, #24
 800d9da:	d501      	bpl.n	800d9e0 <_printf_i+0xec>
 800d9dc:	681e      	ldr	r6, [r3, #0]
 800d9de:	e002      	b.n	800d9e6 <_printf_i+0xf2>
 800d9e0:	0646      	lsls	r6, r0, #25
 800d9e2:	d5fb      	bpl.n	800d9dc <_printf_i+0xe8>
 800d9e4:	881e      	ldrh	r6, [r3, #0]
 800d9e6:	2f6f      	cmp	r7, #111	; 0x6f
 800d9e8:	bf0c      	ite	eq
 800d9ea:	2308      	moveq	r3, #8
 800d9ec:	230a      	movne	r3, #10
 800d9ee:	4852      	ldr	r0, [pc, #328]	; (800db38 <_printf_i+0x244>)
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d9f6:	6865      	ldr	r5, [r4, #4]
 800d9f8:	2d00      	cmp	r5, #0
 800d9fa:	bfa8      	it	ge
 800d9fc:	6821      	ldrge	r1, [r4, #0]
 800d9fe:	60a5      	str	r5, [r4, #8]
 800da00:	bfa4      	itt	ge
 800da02:	f021 0104 	bicge.w	r1, r1, #4
 800da06:	6021      	strge	r1, [r4, #0]
 800da08:	b90e      	cbnz	r6, 800da0e <_printf_i+0x11a>
 800da0a:	2d00      	cmp	r5, #0
 800da0c:	d04d      	beq.n	800daaa <_printf_i+0x1b6>
 800da0e:	4615      	mov	r5, r2
 800da10:	fbb6 f1f3 	udiv	r1, r6, r3
 800da14:	fb03 6711 	mls	r7, r3, r1, r6
 800da18:	5dc7      	ldrb	r7, [r0, r7]
 800da1a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da1e:	4637      	mov	r7, r6
 800da20:	42bb      	cmp	r3, r7
 800da22:	460e      	mov	r6, r1
 800da24:	d9f4      	bls.n	800da10 <_printf_i+0x11c>
 800da26:	2b08      	cmp	r3, #8
 800da28:	d10b      	bne.n	800da42 <_printf_i+0x14e>
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	07de      	lsls	r6, r3, #31
 800da2e:	d508      	bpl.n	800da42 <_printf_i+0x14e>
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	6861      	ldr	r1, [r4, #4]
 800da34:	4299      	cmp	r1, r3
 800da36:	bfde      	ittt	le
 800da38:	2330      	movle	r3, #48	; 0x30
 800da3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da3e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800da42:	1b52      	subs	r2, r2, r5
 800da44:	6122      	str	r2, [r4, #16]
 800da46:	464b      	mov	r3, r9
 800da48:	4621      	mov	r1, r4
 800da4a:	4640      	mov	r0, r8
 800da4c:	f8cd a000 	str.w	sl, [sp]
 800da50:	aa03      	add	r2, sp, #12
 800da52:	f7ff fedf 	bl	800d814 <_printf_common>
 800da56:	3001      	adds	r0, #1
 800da58:	d14c      	bne.n	800daf4 <_printf_i+0x200>
 800da5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da5e:	b004      	add	sp, #16
 800da60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da64:	4834      	ldr	r0, [pc, #208]	; (800db38 <_printf_i+0x244>)
 800da66:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800da6a:	6829      	ldr	r1, [r5, #0]
 800da6c:	6823      	ldr	r3, [r4, #0]
 800da6e:	f851 6b04 	ldr.w	r6, [r1], #4
 800da72:	6029      	str	r1, [r5, #0]
 800da74:	061d      	lsls	r5, r3, #24
 800da76:	d514      	bpl.n	800daa2 <_printf_i+0x1ae>
 800da78:	07df      	lsls	r7, r3, #31
 800da7a:	bf44      	itt	mi
 800da7c:	f043 0320 	orrmi.w	r3, r3, #32
 800da80:	6023      	strmi	r3, [r4, #0]
 800da82:	b91e      	cbnz	r6, 800da8c <_printf_i+0x198>
 800da84:	6823      	ldr	r3, [r4, #0]
 800da86:	f023 0320 	bic.w	r3, r3, #32
 800da8a:	6023      	str	r3, [r4, #0]
 800da8c:	2310      	movs	r3, #16
 800da8e:	e7af      	b.n	800d9f0 <_printf_i+0xfc>
 800da90:	6823      	ldr	r3, [r4, #0]
 800da92:	f043 0320 	orr.w	r3, r3, #32
 800da96:	6023      	str	r3, [r4, #0]
 800da98:	2378      	movs	r3, #120	; 0x78
 800da9a:	4828      	ldr	r0, [pc, #160]	; (800db3c <_printf_i+0x248>)
 800da9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800daa0:	e7e3      	b.n	800da6a <_printf_i+0x176>
 800daa2:	0659      	lsls	r1, r3, #25
 800daa4:	bf48      	it	mi
 800daa6:	b2b6      	uxthmi	r6, r6
 800daa8:	e7e6      	b.n	800da78 <_printf_i+0x184>
 800daaa:	4615      	mov	r5, r2
 800daac:	e7bb      	b.n	800da26 <_printf_i+0x132>
 800daae:	682b      	ldr	r3, [r5, #0]
 800dab0:	6826      	ldr	r6, [r4, #0]
 800dab2:	1d18      	adds	r0, r3, #4
 800dab4:	6961      	ldr	r1, [r4, #20]
 800dab6:	6028      	str	r0, [r5, #0]
 800dab8:	0635      	lsls	r5, r6, #24
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	d501      	bpl.n	800dac2 <_printf_i+0x1ce>
 800dabe:	6019      	str	r1, [r3, #0]
 800dac0:	e002      	b.n	800dac8 <_printf_i+0x1d4>
 800dac2:	0670      	lsls	r0, r6, #25
 800dac4:	d5fb      	bpl.n	800dabe <_printf_i+0x1ca>
 800dac6:	8019      	strh	r1, [r3, #0]
 800dac8:	2300      	movs	r3, #0
 800daca:	4615      	mov	r5, r2
 800dacc:	6123      	str	r3, [r4, #16]
 800dace:	e7ba      	b.n	800da46 <_printf_i+0x152>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	2100      	movs	r1, #0
 800dad4:	1d1a      	adds	r2, r3, #4
 800dad6:	602a      	str	r2, [r5, #0]
 800dad8:	681d      	ldr	r5, [r3, #0]
 800dada:	6862      	ldr	r2, [r4, #4]
 800dadc:	4628      	mov	r0, r5
 800dade:	f000 f82f 	bl	800db40 <memchr>
 800dae2:	b108      	cbz	r0, 800dae8 <_printf_i+0x1f4>
 800dae4:	1b40      	subs	r0, r0, r5
 800dae6:	6060      	str	r0, [r4, #4]
 800dae8:	6863      	ldr	r3, [r4, #4]
 800daea:	6123      	str	r3, [r4, #16]
 800daec:	2300      	movs	r3, #0
 800daee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800daf2:	e7a8      	b.n	800da46 <_printf_i+0x152>
 800daf4:	462a      	mov	r2, r5
 800daf6:	4649      	mov	r1, r9
 800daf8:	4640      	mov	r0, r8
 800dafa:	6923      	ldr	r3, [r4, #16]
 800dafc:	47d0      	blx	sl
 800dafe:	3001      	adds	r0, #1
 800db00:	d0ab      	beq.n	800da5a <_printf_i+0x166>
 800db02:	6823      	ldr	r3, [r4, #0]
 800db04:	079b      	lsls	r3, r3, #30
 800db06:	d413      	bmi.n	800db30 <_printf_i+0x23c>
 800db08:	68e0      	ldr	r0, [r4, #12]
 800db0a:	9b03      	ldr	r3, [sp, #12]
 800db0c:	4298      	cmp	r0, r3
 800db0e:	bfb8      	it	lt
 800db10:	4618      	movlt	r0, r3
 800db12:	e7a4      	b.n	800da5e <_printf_i+0x16a>
 800db14:	2301      	movs	r3, #1
 800db16:	4632      	mov	r2, r6
 800db18:	4649      	mov	r1, r9
 800db1a:	4640      	mov	r0, r8
 800db1c:	47d0      	blx	sl
 800db1e:	3001      	adds	r0, #1
 800db20:	d09b      	beq.n	800da5a <_printf_i+0x166>
 800db22:	3501      	adds	r5, #1
 800db24:	68e3      	ldr	r3, [r4, #12]
 800db26:	9903      	ldr	r1, [sp, #12]
 800db28:	1a5b      	subs	r3, r3, r1
 800db2a:	42ab      	cmp	r3, r5
 800db2c:	dcf2      	bgt.n	800db14 <_printf_i+0x220>
 800db2e:	e7eb      	b.n	800db08 <_printf_i+0x214>
 800db30:	2500      	movs	r5, #0
 800db32:	f104 0619 	add.w	r6, r4, #25
 800db36:	e7f5      	b.n	800db24 <_printf_i+0x230>
 800db38:	0800ed78 	.word	0x0800ed78
 800db3c:	0800ed89 	.word	0x0800ed89

0800db40 <memchr>:
 800db40:	4603      	mov	r3, r0
 800db42:	b510      	push	{r4, lr}
 800db44:	b2c9      	uxtb	r1, r1
 800db46:	4402      	add	r2, r0
 800db48:	4293      	cmp	r3, r2
 800db4a:	4618      	mov	r0, r3
 800db4c:	d101      	bne.n	800db52 <memchr+0x12>
 800db4e:	2000      	movs	r0, #0
 800db50:	e003      	b.n	800db5a <memchr+0x1a>
 800db52:	7804      	ldrb	r4, [r0, #0]
 800db54:	3301      	adds	r3, #1
 800db56:	428c      	cmp	r4, r1
 800db58:	d1f6      	bne.n	800db48 <memchr+0x8>
 800db5a:	bd10      	pop	{r4, pc}

0800db5c <memmove>:
 800db5c:	4288      	cmp	r0, r1
 800db5e:	b510      	push	{r4, lr}
 800db60:	eb01 0402 	add.w	r4, r1, r2
 800db64:	d902      	bls.n	800db6c <memmove+0x10>
 800db66:	4284      	cmp	r4, r0
 800db68:	4623      	mov	r3, r4
 800db6a:	d807      	bhi.n	800db7c <memmove+0x20>
 800db6c:	1e43      	subs	r3, r0, #1
 800db6e:	42a1      	cmp	r1, r4
 800db70:	d008      	beq.n	800db84 <memmove+0x28>
 800db72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db7a:	e7f8      	b.n	800db6e <memmove+0x12>
 800db7c:	4601      	mov	r1, r0
 800db7e:	4402      	add	r2, r0
 800db80:	428a      	cmp	r2, r1
 800db82:	d100      	bne.n	800db86 <memmove+0x2a>
 800db84:	bd10      	pop	{r4, pc}
 800db86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db8e:	e7f7      	b.n	800db80 <memmove+0x24>

0800db90 <_free_r>:
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4605      	mov	r5, r0
 800db94:	2900      	cmp	r1, #0
 800db96:	d040      	beq.n	800dc1a <_free_r+0x8a>
 800db98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db9c:	1f0c      	subs	r4, r1, #4
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	bfb8      	it	lt
 800dba2:	18e4      	addlt	r4, r4, r3
 800dba4:	f000 f910 	bl	800ddc8 <__malloc_lock>
 800dba8:	4a1c      	ldr	r2, [pc, #112]	; (800dc1c <_free_r+0x8c>)
 800dbaa:	6813      	ldr	r3, [r2, #0]
 800dbac:	b933      	cbnz	r3, 800dbbc <_free_r+0x2c>
 800dbae:	6063      	str	r3, [r4, #4]
 800dbb0:	6014      	str	r4, [r2, #0]
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbb8:	f000 b90c 	b.w	800ddd4 <__malloc_unlock>
 800dbbc:	42a3      	cmp	r3, r4
 800dbbe:	d908      	bls.n	800dbd2 <_free_r+0x42>
 800dbc0:	6820      	ldr	r0, [r4, #0]
 800dbc2:	1821      	adds	r1, r4, r0
 800dbc4:	428b      	cmp	r3, r1
 800dbc6:	bf01      	itttt	eq
 800dbc8:	6819      	ldreq	r1, [r3, #0]
 800dbca:	685b      	ldreq	r3, [r3, #4]
 800dbcc:	1809      	addeq	r1, r1, r0
 800dbce:	6021      	streq	r1, [r4, #0]
 800dbd0:	e7ed      	b.n	800dbae <_free_r+0x1e>
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	b10b      	cbz	r3, 800dbdc <_free_r+0x4c>
 800dbd8:	42a3      	cmp	r3, r4
 800dbda:	d9fa      	bls.n	800dbd2 <_free_r+0x42>
 800dbdc:	6811      	ldr	r1, [r2, #0]
 800dbde:	1850      	adds	r0, r2, r1
 800dbe0:	42a0      	cmp	r0, r4
 800dbe2:	d10b      	bne.n	800dbfc <_free_r+0x6c>
 800dbe4:	6820      	ldr	r0, [r4, #0]
 800dbe6:	4401      	add	r1, r0
 800dbe8:	1850      	adds	r0, r2, r1
 800dbea:	4283      	cmp	r3, r0
 800dbec:	6011      	str	r1, [r2, #0]
 800dbee:	d1e0      	bne.n	800dbb2 <_free_r+0x22>
 800dbf0:	6818      	ldr	r0, [r3, #0]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	4401      	add	r1, r0
 800dbf6:	6011      	str	r1, [r2, #0]
 800dbf8:	6053      	str	r3, [r2, #4]
 800dbfa:	e7da      	b.n	800dbb2 <_free_r+0x22>
 800dbfc:	d902      	bls.n	800dc04 <_free_r+0x74>
 800dbfe:	230c      	movs	r3, #12
 800dc00:	602b      	str	r3, [r5, #0]
 800dc02:	e7d6      	b.n	800dbb2 <_free_r+0x22>
 800dc04:	6820      	ldr	r0, [r4, #0]
 800dc06:	1821      	adds	r1, r4, r0
 800dc08:	428b      	cmp	r3, r1
 800dc0a:	bf01      	itttt	eq
 800dc0c:	6819      	ldreq	r1, [r3, #0]
 800dc0e:	685b      	ldreq	r3, [r3, #4]
 800dc10:	1809      	addeq	r1, r1, r0
 800dc12:	6021      	streq	r1, [r4, #0]
 800dc14:	6063      	str	r3, [r4, #4]
 800dc16:	6054      	str	r4, [r2, #4]
 800dc18:	e7cb      	b.n	800dbb2 <_free_r+0x22>
 800dc1a:	bd38      	pop	{r3, r4, r5, pc}
 800dc1c:	20001d14 	.word	0x20001d14

0800dc20 <sbrk_aligned>:
 800dc20:	b570      	push	{r4, r5, r6, lr}
 800dc22:	4e0e      	ldr	r6, [pc, #56]	; (800dc5c <sbrk_aligned+0x3c>)
 800dc24:	460c      	mov	r4, r1
 800dc26:	6831      	ldr	r1, [r6, #0]
 800dc28:	4605      	mov	r5, r0
 800dc2a:	b911      	cbnz	r1, 800dc32 <sbrk_aligned+0x12>
 800dc2c:	f000 f8bc 	bl	800dda8 <_sbrk_r>
 800dc30:	6030      	str	r0, [r6, #0]
 800dc32:	4621      	mov	r1, r4
 800dc34:	4628      	mov	r0, r5
 800dc36:	f000 f8b7 	bl	800dda8 <_sbrk_r>
 800dc3a:	1c43      	adds	r3, r0, #1
 800dc3c:	d00a      	beq.n	800dc54 <sbrk_aligned+0x34>
 800dc3e:	1cc4      	adds	r4, r0, #3
 800dc40:	f024 0403 	bic.w	r4, r4, #3
 800dc44:	42a0      	cmp	r0, r4
 800dc46:	d007      	beq.n	800dc58 <sbrk_aligned+0x38>
 800dc48:	1a21      	subs	r1, r4, r0
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f000 f8ac 	bl	800dda8 <_sbrk_r>
 800dc50:	3001      	adds	r0, #1
 800dc52:	d101      	bne.n	800dc58 <sbrk_aligned+0x38>
 800dc54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dc58:	4620      	mov	r0, r4
 800dc5a:	bd70      	pop	{r4, r5, r6, pc}
 800dc5c:	20001d18 	.word	0x20001d18

0800dc60 <_malloc_r>:
 800dc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc64:	1ccd      	adds	r5, r1, #3
 800dc66:	f025 0503 	bic.w	r5, r5, #3
 800dc6a:	3508      	adds	r5, #8
 800dc6c:	2d0c      	cmp	r5, #12
 800dc6e:	bf38      	it	cc
 800dc70:	250c      	movcc	r5, #12
 800dc72:	2d00      	cmp	r5, #0
 800dc74:	4607      	mov	r7, r0
 800dc76:	db01      	blt.n	800dc7c <_malloc_r+0x1c>
 800dc78:	42a9      	cmp	r1, r5
 800dc7a:	d905      	bls.n	800dc88 <_malloc_r+0x28>
 800dc7c:	230c      	movs	r3, #12
 800dc7e:	2600      	movs	r6, #0
 800dc80:	603b      	str	r3, [r7, #0]
 800dc82:	4630      	mov	r0, r6
 800dc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc88:	4e2e      	ldr	r6, [pc, #184]	; (800dd44 <_malloc_r+0xe4>)
 800dc8a:	f000 f89d 	bl	800ddc8 <__malloc_lock>
 800dc8e:	6833      	ldr	r3, [r6, #0]
 800dc90:	461c      	mov	r4, r3
 800dc92:	bb34      	cbnz	r4, 800dce2 <_malloc_r+0x82>
 800dc94:	4629      	mov	r1, r5
 800dc96:	4638      	mov	r0, r7
 800dc98:	f7ff ffc2 	bl	800dc20 <sbrk_aligned>
 800dc9c:	1c43      	adds	r3, r0, #1
 800dc9e:	4604      	mov	r4, r0
 800dca0:	d14d      	bne.n	800dd3e <_malloc_r+0xde>
 800dca2:	6834      	ldr	r4, [r6, #0]
 800dca4:	4626      	mov	r6, r4
 800dca6:	2e00      	cmp	r6, #0
 800dca8:	d140      	bne.n	800dd2c <_malloc_r+0xcc>
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	4631      	mov	r1, r6
 800dcae:	4638      	mov	r0, r7
 800dcb0:	eb04 0803 	add.w	r8, r4, r3
 800dcb4:	f000 f878 	bl	800dda8 <_sbrk_r>
 800dcb8:	4580      	cmp	r8, r0
 800dcba:	d13a      	bne.n	800dd32 <_malloc_r+0xd2>
 800dcbc:	6821      	ldr	r1, [r4, #0]
 800dcbe:	3503      	adds	r5, #3
 800dcc0:	1a6d      	subs	r5, r5, r1
 800dcc2:	f025 0503 	bic.w	r5, r5, #3
 800dcc6:	3508      	adds	r5, #8
 800dcc8:	2d0c      	cmp	r5, #12
 800dcca:	bf38      	it	cc
 800dccc:	250c      	movcc	r5, #12
 800dcce:	4638      	mov	r0, r7
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	f7ff ffa5 	bl	800dc20 <sbrk_aligned>
 800dcd6:	3001      	adds	r0, #1
 800dcd8:	d02b      	beq.n	800dd32 <_malloc_r+0xd2>
 800dcda:	6823      	ldr	r3, [r4, #0]
 800dcdc:	442b      	add	r3, r5
 800dcde:	6023      	str	r3, [r4, #0]
 800dce0:	e00e      	b.n	800dd00 <_malloc_r+0xa0>
 800dce2:	6822      	ldr	r2, [r4, #0]
 800dce4:	1b52      	subs	r2, r2, r5
 800dce6:	d41e      	bmi.n	800dd26 <_malloc_r+0xc6>
 800dce8:	2a0b      	cmp	r2, #11
 800dcea:	d916      	bls.n	800dd1a <_malloc_r+0xba>
 800dcec:	1961      	adds	r1, r4, r5
 800dcee:	42a3      	cmp	r3, r4
 800dcf0:	6025      	str	r5, [r4, #0]
 800dcf2:	bf18      	it	ne
 800dcf4:	6059      	strne	r1, [r3, #4]
 800dcf6:	6863      	ldr	r3, [r4, #4]
 800dcf8:	bf08      	it	eq
 800dcfa:	6031      	streq	r1, [r6, #0]
 800dcfc:	5162      	str	r2, [r4, r5]
 800dcfe:	604b      	str	r3, [r1, #4]
 800dd00:	4638      	mov	r0, r7
 800dd02:	f104 060b 	add.w	r6, r4, #11
 800dd06:	f000 f865 	bl	800ddd4 <__malloc_unlock>
 800dd0a:	f026 0607 	bic.w	r6, r6, #7
 800dd0e:	1d23      	adds	r3, r4, #4
 800dd10:	1af2      	subs	r2, r6, r3
 800dd12:	d0b6      	beq.n	800dc82 <_malloc_r+0x22>
 800dd14:	1b9b      	subs	r3, r3, r6
 800dd16:	50a3      	str	r3, [r4, r2]
 800dd18:	e7b3      	b.n	800dc82 <_malloc_r+0x22>
 800dd1a:	6862      	ldr	r2, [r4, #4]
 800dd1c:	42a3      	cmp	r3, r4
 800dd1e:	bf0c      	ite	eq
 800dd20:	6032      	streq	r2, [r6, #0]
 800dd22:	605a      	strne	r2, [r3, #4]
 800dd24:	e7ec      	b.n	800dd00 <_malloc_r+0xa0>
 800dd26:	4623      	mov	r3, r4
 800dd28:	6864      	ldr	r4, [r4, #4]
 800dd2a:	e7b2      	b.n	800dc92 <_malloc_r+0x32>
 800dd2c:	4634      	mov	r4, r6
 800dd2e:	6876      	ldr	r6, [r6, #4]
 800dd30:	e7b9      	b.n	800dca6 <_malloc_r+0x46>
 800dd32:	230c      	movs	r3, #12
 800dd34:	4638      	mov	r0, r7
 800dd36:	603b      	str	r3, [r7, #0]
 800dd38:	f000 f84c 	bl	800ddd4 <__malloc_unlock>
 800dd3c:	e7a1      	b.n	800dc82 <_malloc_r+0x22>
 800dd3e:	6025      	str	r5, [r4, #0]
 800dd40:	e7de      	b.n	800dd00 <_malloc_r+0xa0>
 800dd42:	bf00      	nop
 800dd44:	20001d14 	.word	0x20001d14

0800dd48 <_realloc_r>:
 800dd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4c:	4680      	mov	r8, r0
 800dd4e:	4614      	mov	r4, r2
 800dd50:	460e      	mov	r6, r1
 800dd52:	b921      	cbnz	r1, 800dd5e <_realloc_r+0x16>
 800dd54:	4611      	mov	r1, r2
 800dd56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd5a:	f7ff bf81 	b.w	800dc60 <_malloc_r>
 800dd5e:	b92a      	cbnz	r2, 800dd6c <_realloc_r+0x24>
 800dd60:	f7ff ff16 	bl	800db90 <_free_r>
 800dd64:	4625      	mov	r5, r4
 800dd66:	4628      	mov	r0, r5
 800dd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd6c:	f000 f838 	bl	800dde0 <_malloc_usable_size_r>
 800dd70:	4284      	cmp	r4, r0
 800dd72:	4607      	mov	r7, r0
 800dd74:	d802      	bhi.n	800dd7c <_realloc_r+0x34>
 800dd76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dd7a:	d812      	bhi.n	800dda2 <_realloc_r+0x5a>
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	4640      	mov	r0, r8
 800dd80:	f7ff ff6e 	bl	800dc60 <_malloc_r>
 800dd84:	4605      	mov	r5, r0
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d0ed      	beq.n	800dd66 <_realloc_r+0x1e>
 800dd8a:	42bc      	cmp	r4, r7
 800dd8c:	4622      	mov	r2, r4
 800dd8e:	4631      	mov	r1, r6
 800dd90:	bf28      	it	cs
 800dd92:	463a      	movcs	r2, r7
 800dd94:	f7ff fb72 	bl	800d47c <memcpy>
 800dd98:	4631      	mov	r1, r6
 800dd9a:	4640      	mov	r0, r8
 800dd9c:	f7ff fef8 	bl	800db90 <_free_r>
 800dda0:	e7e1      	b.n	800dd66 <_realloc_r+0x1e>
 800dda2:	4635      	mov	r5, r6
 800dda4:	e7df      	b.n	800dd66 <_realloc_r+0x1e>
	...

0800dda8 <_sbrk_r>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	2300      	movs	r3, #0
 800ddac:	4d05      	ldr	r5, [pc, #20]	; (800ddc4 <_sbrk_r+0x1c>)
 800ddae:	4604      	mov	r4, r0
 800ddb0:	4608      	mov	r0, r1
 800ddb2:	602b      	str	r3, [r5, #0]
 800ddb4:	f7f4 faf6 	bl	80023a4 <_sbrk>
 800ddb8:	1c43      	adds	r3, r0, #1
 800ddba:	d102      	bne.n	800ddc2 <_sbrk_r+0x1a>
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	b103      	cbz	r3, 800ddc2 <_sbrk_r+0x1a>
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	20001d1c 	.word	0x20001d1c

0800ddc8 <__malloc_lock>:
 800ddc8:	4801      	ldr	r0, [pc, #4]	; (800ddd0 <__malloc_lock+0x8>)
 800ddca:	f000 b811 	b.w	800ddf0 <__retarget_lock_acquire_recursive>
 800ddce:	bf00      	nop
 800ddd0:	20001d20 	.word	0x20001d20

0800ddd4 <__malloc_unlock>:
 800ddd4:	4801      	ldr	r0, [pc, #4]	; (800dddc <__malloc_unlock+0x8>)
 800ddd6:	f000 b80c 	b.w	800ddf2 <__retarget_lock_release_recursive>
 800ddda:	bf00      	nop
 800dddc:	20001d20 	.word	0x20001d20

0800dde0 <_malloc_usable_size_r>:
 800dde0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dde4:	1f18      	subs	r0, r3, #4
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	bfbc      	itt	lt
 800ddea:	580b      	ldrlt	r3, [r1, r0]
 800ddec:	18c0      	addlt	r0, r0, r3
 800ddee:	4770      	bx	lr

0800ddf0 <__retarget_lock_acquire_recursive>:
 800ddf0:	4770      	bx	lr

0800ddf2 <__retarget_lock_release_recursive>:
 800ddf2:	4770      	bx	lr

0800ddf4 <_init>:
 800ddf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf6:	bf00      	nop
 800ddf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddfa:	bc08      	pop	{r3}
 800ddfc:	469e      	mov	lr, r3
 800ddfe:	4770      	bx	lr

0800de00 <_fini>:
 800de00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de02:	bf00      	nop
 800de04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de06:	bc08      	pop	{r3}
 800de08:	469e      	mov	lr, r3
 800de0a:	4770      	bx	lr
