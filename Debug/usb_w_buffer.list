
usb_w_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .img_def      00000228  0800f000  0800f000  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000d6dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000f5c  0800d7e8  0800d7e8  0001d7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800e744  0800e744  0002f228  2**0
                  CONTENTS
  5 .ARM          00000000  0800e744  0800e744  0002f228  2**0
                  CONTENTS
  6 .preinit_array 00000000  0800e744  0800e744  0002f228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800e744  0800e744  0001e744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800e748  0800e748  0001e748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001f0  20000000  0800e74c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001b04  200001f0  0800e93c  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001cf4  0800e93c  00021cf4  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002f228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ecaa  00000000  00000000  0002f251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b85  00000000  00000000  0006defb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022f8  00000000  00000000  00073a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002000  00000000  00000000  00075d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dfa6  00000000  00000000  00077d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002329e  00000000  00000000  00095d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fbf8  00000000  00000000  000b8fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158bb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009644  00000000  00000000  00158c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d7d0 	.word	0x0800d7d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	0800d7d0 	.word	0x0800d7d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
extern TIM_HandleTypeDef htim1;
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f004 f8e6 	bl	800435c <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f004 f8e1 	bl	800435c <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f004 fbdc 	bl	8004960 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f004 fbd5 	bl	8004960 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f006 fdc8 	bl	8006dc0 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f004 fb91 	bl	8004960 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000450 	.word	0x20000450
 8000254:	40010800 	.word	0x40010800

08000258 <Start_APP>:

void Start_APP(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	Kpd_Irqv_Init();
 800025c:	f001 f9a4 	bl	80015a8 <Kpd_Irqv_Init>
	init_custom_character_db();
 8000260:	f000 fc56 	bl	8000b10 <init_custom_character_db>
	enable_backlight(true);
 8000264:	2001      	movs	r0, #1
 8000266:	f000 fec5 	bl	8000ff4 <enable_backlight>
	//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
	//			u8x8_stm32_gpio_and_delay);

		u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 800026a:	4b16      	ldr	r3, [pc, #88]	; (80002c4 <Start_APP+0x6c>)
 800026c:	4a16      	ldr	r2, [pc, #88]	; (80002c8 <Start_APP+0x70>)
 800026e:	4917      	ldr	r1, [pc, #92]	; (80002cc <Start_APP+0x74>)
 8000270:	4817      	ldr	r0, [pc, #92]	; (80002d0 <Start_APP+0x78>)
 8000272:	f002 f985 	bl	8002580 <u8g2_Setup_uc1604_jlx19264_f>
				u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


		u8g2_InitDisplay(&u8g2);
 8000276:	4816      	ldr	r0, [pc, #88]	; (80002d0 <Start_APP+0x78>)
 8000278:	f003 ff39 	bl	80040ee <u8x8_InitDisplay>
		u8g2_SetPowerSave(&u8g2, 0);
 800027c:	2100      	movs	r1, #0
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <Start_APP+0x78>)
 8000280:	f003 ff44 	bl	800410c <u8x8_SetPowerSave>
		set_contrast(OPTIMAL_CONTRAST);
 8000284:	2004      	movs	r0, #4
 8000286:	f000 ff07 	bl	8001098 <set_contrast>

		u8g2_SetBitmapMode(&u8g2,0);
 800028a:	2100      	movs	r1, #0
 800028c:	4810      	ldr	r0, [pc, #64]	; (80002d0 <Start_APP+0x78>)
 800028e:	f001 fddd 	bl	8001e4c <u8g2_SetBitmapMode>


		u8g2_SetDrawColor(&u8g2, 1);
 8000292:	2101      	movs	r1, #1
 8000294:	480e      	ldr	r0, [pc, #56]	; (80002d0 <Start_APP+0x78>)
 8000296:	f003 f98d 	bl	80035b4 <u8g2_SetDrawColor>
		u8g2_SetFontMode(&u8g2, 0);
 800029a:	2100      	movs	r1, #0
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <Start_APP+0x78>)
 800029e:	f002 fe09 	bl	8002eb4 <u8g2_SetFontMode>
		u8g2_SetFontPosTop(&u8g2);
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <Start_APP+0x78>)
 80002a4:	f002 ff74 	bl	8003190 <u8g2_SetFontPosTop>
		r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
		u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
		n	Only numbers and extra glyphs for writing date and time strings are included in the font.
		...	Other custom character list.*/

		u8g2_SetFont(&u8g2, u8g2_font_crox2c_mf);
 80002a8:	490a      	ldr	r1, [pc, #40]	; (80002d4 <Start_APP+0x7c>)
 80002aa:	4809      	ldr	r0, [pc, #36]	; (80002d0 <Start_APP+0x78>)
 80002ac:	f002 ff7e 	bl	80031ac <u8g2_SetFont>
		disp_splash();
 80002b0:	f000 ff06 	bl	80010c0 <disp_splash>
		text_insertion_point(0 , 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fc46 	bl	8000b48 <text_insertion_point>
	//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
		monitor_begin();
 80002bc:	f000 fad8 	bl	8000870 <monitor_begin>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	0800015d 	.word	0x0800015d
 80002c8:	080001cd 	.word	0x080001cd
 80002cc:	0800e6a0 	.word	0x0800e6a0
 80002d0:	2000020c 	.word	0x2000020c
 80002d4:	0800d8bc 	.word	0x0800d8bc

080002d8 <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];

uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *buf) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_FS(cmd, strlen(buf)) == USBD_OK)
 80002e0:	bf00      	nop
 80002e2:	6878      	ldr	r0, [r7, #4]
 80002e4:	f7ff ff32 	bl	800014c <strlen>
 80002e8:	4603      	mov	r3, r0
 80002ea:	b29b      	uxth	r3, r3
 80002ec:	4619      	mov	r1, r3
 80002ee:	4805      	ldr	r0, [pc, #20]	; (8000304 <monitor_send_string+0x2c>)
 80002f0:	f00c f9a2 	bl	800c638 <CDC_Transmit_FS>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f3      	beq.n	80002e2 <monitor_send_string+0xa>
		;
	//isso é a melhor forma de try til it works que eu consegui pensar
}
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	200002a0 	.word	0x200002a0

08000308 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	new_cmd = true;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8000316:	4805      	ldr	r0, [pc, #20]	; (800032c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000318:	f006 ffd6 	bl	80072c8 <HAL_TIM_Base_Stop_IT>
	monitor_interrupt();
 800031c:	f000 f9bc 	bl	8000698 <monitor_interrupt>
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200003c8 	.word	0x200003c8
 800032c:	200004f0 	.word	0x200004f0

08000330 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af02      	add	r7, sp, #8
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 800033a:	2204      	movs	r2, #4
 800033c:	499f      	ldr	r1, [pc, #636]	; (80005bc <monitor_check_cmd+0x28c>)
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f00c fdd4 	bl	800ceec <strncmp>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d108      	bne.n	800035c <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 800034a:	4a9d      	ldr	r2, [pc, #628]	; (80005c0 <monitor_check_cmd+0x290>)
 800034c:	21c8      	movs	r1, #200	; 0xc8
 800034e:	489d      	ldr	r0, [pc, #628]	; (80005c4 <monitor_check_cmd+0x294>)
 8000350:	f00c fd98 	bl	800ce84 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000354:	489b      	ldr	r0, [pc, #620]	; (80005c4 <monitor_check_cmd+0x294>)
 8000356:	f7ff ffbf 	bl	80002d8 <monitor_send_string>
			put_Ucursor(true,cmd[2], cmd[3],'R');
		}


	}
}
 800035a:	e16e      	b.n	800063a <monitor_check_cmd+0x30a>
	else if (cmd[0] == LCD_CMD) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2bfe      	cmp	r3, #254	; 0xfe
 8000362:	f040 816a 	bne.w	800063a <monitor_check_cmd+0x30a>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b31      	cmp	r3, #49	; 0x31
 800036e:	d109      	bne.n	8000384 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000370:	4b95      	ldr	r3, [pc, #596]	; (80005c8 <monitor_check_cmd+0x298>)
 8000372:	4a96      	ldr	r2, [pc, #600]	; (80005cc <monitor_check_cmd+0x29c>)
 8000374:	21c8      	movs	r1, #200	; 0xc8
 8000376:	4893      	ldr	r0, [pc, #588]	; (80005c4 <monitor_check_cmd+0x294>)
 8000378:	f00c fd84 	bl	800ce84 <sniprintf>
			monitor_send_string(ans);
 800037c:	4891      	ldr	r0, [pc, #580]	; (80005c4 <monitor_check_cmd+0x294>)
 800037e:	f7ff ffab 	bl	80002d8 <monitor_send_string>
}
 8000382:	e15a      	b.n	800063a <monitor_check_cmd+0x30a>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3301      	adds	r3, #1
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b30      	cmp	r3, #48	; 0x30
 800038c:	d109      	bne.n	80003a2 <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 800038e:	4b8e      	ldr	r3, [pc, #568]	; (80005c8 <monitor_check_cmd+0x298>)
 8000390:	4a8f      	ldr	r2, [pc, #572]	; (80005d0 <monitor_check_cmd+0x2a0>)
 8000392:	21c8      	movs	r1, #200	; 0xc8
 8000394:	488b      	ldr	r0, [pc, #556]	; (80005c4 <monitor_check_cmd+0x294>)
 8000396:	f00c fd75 	bl	800ce84 <sniprintf>
			monitor_send_string(ans);
 800039a:	488a      	ldr	r0, [pc, #552]	; (80005c4 <monitor_check_cmd+0x294>)
 800039c:	f7ff ff9c 	bl	80002d8 <monitor_send_string>
}
 80003a0:	e14b      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_SOFT_RESET) {
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3301      	adds	r3, #1
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b56      	cmp	r3, #86	; 0x56
 80003aa:	d102      	bne.n	80003b2 <monitor_check_cmd+0x82>
			lcd_soft_reset();
 80003ac:	f000 fe0e 	bl	8000fcc <lcd_soft_reset>
}
 80003b0:	e143      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3301      	adds	r3, #1
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b42      	cmp	r3, #66	; 0x42
 80003ba:	d103      	bne.n	80003c4 <monitor_check_cmd+0x94>
			enable_backlight(true);
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 fe19 	bl	8000ff4 <enable_backlight>
}
 80003c2:	e13a      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3301      	adds	r3, #1
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b46      	cmp	r3, #70	; 0x46
 80003cc:	d103      	bne.n	80003d6 <monitor_check_cmd+0xa6>
			enable_backlight(false);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 fe10 	bl	8000ff4 <enable_backlight>
}
 80003d4:	e131      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_BACKLIGHT_BRIGHTNESS) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3301      	adds	r3, #1
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b41      	cmp	r3, #65	; 0x41
 80003de:	d106      	bne.n	80003ee <monitor_check_cmd+0xbe>
			set_backlight_brightness(cmd[2]);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3302      	adds	r3, #2
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fe2e 	bl	8001048 <set_backlight_brightness>
}
 80003ec:	e125      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	3301      	adds	r3, #1
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b66      	cmp	r3, #102	; 0x66
 80003f6:	d103      	bne.n	8000400 <monitor_check_cmd+0xd0>
			inverse_text(true);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 fcad 	bl	8000d58 <inverse_text>
}
 80003fe:	e11c      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3301      	adds	r3, #1
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b67      	cmp	r3, #103	; 0x67
 8000408:	d103      	bne.n	8000412 <monitor_check_cmd+0xe2>
			inverse_text(false);
 800040a:	2000      	movs	r0, #0
 800040c:	f000 fca4 	bl	8000d58 <inverse_text>
}
 8000410:	e113      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_CLEAR) {
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	3301      	adds	r3, #1
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b58      	cmp	r3, #88	; 0x58
 800041a:	d102      	bne.n	8000422 <monitor_check_cmd+0xf2>
			clear_display();
 800041c:	f000 fddc 	bl	8000fd8 <clear_display>
}
 8000420:	e10b      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3301      	adds	r3, #1
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b70      	cmp	r3, #112	; 0x70
 800042a:	d10a      	bne.n	8000442 <monitor_check_cmd+0x112>
			put_pixel(cmd[3], cmd[2]);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3303      	adds	r3, #3
 8000430:	781a      	ldrb	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3302      	adds	r3, #2
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	4610      	mov	r0, r2
 800043c:	f000 fd40 	bl	8000ec0 <put_pixel>
}
 8000440:	e0fb      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3301      	adds	r3, #1
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b71      	cmp	r3, #113	; 0x71
 800044a:	d10a      	bne.n	8000462 <monitor_check_cmd+0x132>
			erase_pixel(cmd[3], cmd[2]);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3303      	adds	r3, #3
 8000450:	781a      	ldrb	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	3302      	adds	r3, #2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4619      	mov	r1, r3
 800045a:	4610      	mov	r0, r2
 800045c:	f000 fd4e 	bl	8000efc <erase_pixel>
}
 8000460:	e0eb      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_PUT_BYTE) {
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b3e      	cmp	r3, #62	; 0x3e
 800046a:	d10c      	bne.n	8000486 <monitor_check_cmd+0x156>
			put_byte(cmd[2],cmd[3], cmd[4]);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3302      	adds	r3, #2
 8000470:	7818      	ldrb	r0, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	3303      	adds	r3, #3
 8000476:	7819      	ldrb	r1, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3304      	adds	r3, #4
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	461a      	mov	r2, r3
 8000480:	f000 fd5a 	bl	8000f38 <put_byte>
}
 8000484:	e0d9      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_DEFINE_CUSTOM_CHARACTER) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3301      	adds	r3, #1
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b4e      	cmp	r3, #78	; 0x4e
 800048e:	d103      	bne.n	8000498 <monitor_check_cmd+0x168>
					define_custom_character(cmd);
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f000 fc87 	bl	8000da4 <define_custom_character>
}
 8000496:	e0d0      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3301      	adds	r3, #1
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b43      	cmp	r3, #67	; 0x43
 80004a0:	d103      	bne.n	80004aa <monitor_check_cmd+0x17a>
			auto_line_wrap(true);
 80004a2:	2001      	movs	r0, #1
 80004a4:	f000 fb40 	bl	8000b28 <auto_line_wrap>
}
 80004a8:	e0c7      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3301      	adds	r3, #1
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b44      	cmp	r3, #68	; 0x44
 80004b2:	d103      	bne.n	80004bc <monitor_check_cmd+0x18c>
			auto_line_wrap(false);
 80004b4:	2000      	movs	r0, #0
 80004b6:	f000 fb37 	bl	8000b28 <auto_line_wrap>
}
 80004ba:	e0be      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_SET_INSERT) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3301      	adds	r3, #1
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b47      	cmp	r3, #71	; 0x47
 80004c4:	d10a      	bne.n	80004dc <monitor_check_cmd+0x1ac>
			text_insertion_point(cmd[2], cmd[3]);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3302      	adds	r3, #2
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3303      	adds	r3, #3
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	4619      	mov	r1, r3
 80004d4:	4610      	mov	r0, r2
 80004d6:	f000 fb37 	bl	8000b48 <text_insertion_point>
}
 80004da:	e0ae      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_HOME_INSERT) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b48      	cmp	r3, #72	; 0x48
 80004e4:	d104      	bne.n	80004f0 <monitor_check_cmd+0x1c0>
			text_insertion_point(0, 0);
 80004e6:	2100      	movs	r1, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fb2d 	bl	8000b48 <text_insertion_point>
}
 80004ee:	e0a4      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_READ_GPI) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b65      	cmp	r3, #101	; 0x65
 80004f8:	d115      	bne.n	8000526 <monitor_check_cmd+0x1f6>
			if (cmd[2] == '0') {
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3302      	adds	r3, #2
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b30      	cmp	r3, #48	; 0x30
 8000502:	f040 809a 	bne.w	800063a <monitor_check_cmd+0x30a>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000506:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <monitor_check_cmd+0x2a4>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	461a      	mov	r2, r3
						ddp[1]);
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <monitor_check_cmd+0x2a4>)
 800050e:	785b      	ldrb	r3, [r3, #1]
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n", ddp[0],
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	4613      	mov	r3, r2
 8000514:	4a30      	ldr	r2, [pc, #192]	; (80005d8 <monitor_check_cmd+0x2a8>)
 8000516:	21c8      	movs	r1, #200	; 0xc8
 8000518:	482a      	ldr	r0, [pc, #168]	; (80005c4 <monitor_check_cmd+0x294>)
 800051a:	f00c fcb3 	bl	800ce84 <sniprintf>
				monitor_send_string(ans);
 800051e:	4829      	ldr	r0, [pc, #164]	; (80005c4 <monitor_check_cmd+0x294>)
 8000520:	f7ff feda 	bl	80002d8 <monitor_send_string>
}
 8000524:	e089      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3301      	adds	r3, #1
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b69      	cmp	r3, #105	; 0x69
 800052e:	d102      	bne.n	8000536 <monitor_check_cmd+0x206>
			disp_splash();
 8000530:	f000 fdc6 	bl	80010c0 <disp_splash>
}
 8000534:	e081      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3301      	adds	r3, #1
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b76      	cmp	r3, #118	; 0x76
 800053e:	d103      	bne.n	8000548 <monitor_check_cmd+0x218>
			def_v_bar_thickness(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f000 fc19 	bl	8000d78 <def_v_bar_thickness>
}
 8000546:	e078      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3301      	adds	r3, #1
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b73      	cmp	r3, #115	; 0x73
 8000550:	d103      	bne.n	800055a <monitor_check_cmd+0x22a>
			def_v_bar_thickness(0);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 fc10 	bl	8000d78 <def_v_bar_thickness>
}
 8000558:	e06f      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3301      	adds	r3, #1
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b3d      	cmp	r3, #61	; 0x3d
 8000562:	d10a      	bne.n	800057a <monitor_check_cmd+0x24a>
			draw_un_v_bar_graph(cmd[2], cmd[3], false);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3302      	adds	r3, #2
 8000568:	7818      	ldrb	r0, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3303      	adds	r3, #3
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2200      	movs	r2, #0
 8000572:	4619      	mov	r1, r3
 8000574:	f000 fc40 	bl	8000df8 <draw_un_v_bar_graph>
}
 8000578:	e05f      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_ERASE_VERTICAL_BAR_GRAPH ) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3301      	adds	r3, #1
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b2d      	cmp	r3, #45	; 0x2d
 8000582:	d10a      	bne.n	800059a <monitor_check_cmd+0x26a>
			draw_un_v_bar_graph(cmd[2], cmd[3], true);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3302      	adds	r3, #2
 8000588:	7818      	ldrb	r0, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3303      	adds	r3, #3
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2201      	movs	r2, #1
 8000592:	4619      	mov	r1, r3
 8000594:	f000 fc30 	bl	8000df8 <draw_un_v_bar_graph>
}
 8000598:	e04f      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_UNDERLINE_CURSOR_ON) {
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b4a      	cmp	r3, #74	; 0x4a
 80005a2:	d11b      	bne.n	80005dc <monitor_check_cmd+0x2ac>
			put_Ucursor(true,cmd[2], cmd[3],0);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3302      	adds	r3, #2
 80005a8:	7819      	ldrb	r1, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3303      	adds	r3, #3
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	2001      	movs	r0, #1
 80005b4:	f000 faf4 	bl	8000ba0 <put_Ucursor>
}
 80005b8:	e03f      	b.n	800063a <monitor_check_cmd+0x30a>
 80005ba:	bf00      	nop
 80005bc:	0800d7e8 	.word	0x0800d7e8
 80005c0:	0800d7f0 	.word	0x0800d7f0
 80005c4:	20000368 	.word	0x20000368
 80005c8:	0800d828 	.word	0x0800d828
 80005cc:	0800d82c 	.word	0x0800d82c
 80005d0:	0800d844 	.word	0x0800d844
 80005d4:	20000000 	.word	0x20000000
 80005d8:	0800d858 	.word	0x0800d858
		else if (cmd[1] == LCD_UNDERLINE_CURSOR_OFF) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b4b      	cmp	r3, #75	; 0x4b
 80005e4:	d10a      	bne.n	80005fc <monitor_check_cmd+0x2cc>
			put_Ucursor(false,cmd[2], cmd[3],0);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3302      	adds	r3, #2
 80005ea:	7819      	ldrb	r1, [r3, #0]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3303      	adds	r3, #3
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 fad3 	bl	8000ba0 <put_Ucursor>
}
 80005fa:	e01e      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_MOVE_CURSOR_LEFT ) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b4c      	cmp	r3, #76	; 0x4c
 8000604:	d10a      	bne.n	800061c <monitor_check_cmd+0x2ec>
			put_Ucursor(true,cmd[2], cmd[3],'L');
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3302      	adds	r3, #2
 800060a:	7819      	ldrb	r1, [r3, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3303      	adds	r3, #3
 8000610:	781a      	ldrb	r2, [r3, #0]
 8000612:	234c      	movs	r3, #76	; 0x4c
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fac3 	bl	8000ba0 <put_Ucursor>
}
 800061a:	e00e      	b.n	800063a <monitor_check_cmd+0x30a>
		else if (cmd[1] == LCD_MOVE_CURSOR_RIGHT ) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3301      	adds	r3, #1
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b4d      	cmp	r3, #77	; 0x4d
 8000624:	d109      	bne.n	800063a <monitor_check_cmd+0x30a>
			put_Ucursor(true,cmd[2], cmd[3],'R');
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3302      	adds	r3, #2
 800062a:	7819      	ldrb	r1, [r3, #0]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3303      	adds	r3, #3
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	2352      	movs	r3, #82	; 0x52
 8000634:	2001      	movs	r0, #1
 8000636:	f000 fab3 	bl	8000ba0 <put_Ucursor>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop

08000644 <app_usb_cbk>:

void app_usb_cbk(uint8_t *buf, uint32_t len) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]

	memcpy(cmd + size, buf, len);
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <app_usb_cbk+0x44>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <app_usb_cbk+0x48>)
 8000654:	4413      	add	r3, r2
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	4618      	mov	r0, r3
 800065c:	f00c fbfc 	bl	800ce58 <memcpy>
	size += len;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <app_usb_cbk+0x44>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	4413      	add	r3, r2
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <app_usb_cbk+0x44>)
 800066a:	6013      	str	r3, [r2, #0]

	if (size >= CMD_BUF_SIZE) {
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <app_usb_cbk+0x44>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2bc7      	cmp	r3, #199	; 0xc7
 8000672:	d902      	bls.n	800067a <app_usb_cbk+0x36>
		new_cmd = true;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <app_usb_cbk+0x4c>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
	}
	//contador para timeout da comunicação
	HAL_TIM_Base_Start_IT(&htim2);
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <app_usb_cbk+0x50>)
 800067c:	f006 fdd2 	bl	8007224 <HAL_TIM_Base_Start_IT>

}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200003c4 	.word	0x200003c4
 800068c:	200002a0 	.word	0x200002a0
 8000690:	200003c8 	.word	0x200003c8
 8000694:	200004f0 	.word	0x200004f0

08000698 <monitor_interrupt>:

void monitor_interrupt(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	if (new_cmd) {
 800069e:	4b70      	ldr	r3, [pc, #448]	; (8000860 <monitor_interrupt+0x1c8>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f000 80d7 	beq.w	8000856 <monitor_interrupt+0x1be>
		uint8_t offset, bgn_print, end_print, i;
		bgn_print = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	71bb      	strb	r3, [r7, #6]
		end_print = size;
 80006ac:	4b6d      	ldr	r3, [pc, #436]	; (8000864 <monitor_interrupt+0x1cc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	717b      	strb	r3, [r7, #5]
		bool is_cmd = false;
 80006b2:	2300      	movs	r3, #0
 80006b4:	713b      	strb	r3, [r7, #4]
		bool printable = false;
 80006b6:	2300      	movs	r3, #0
 80006b8:	70fb      	strb	r3, [r7, #3]

//		o buffer tem a entrada completa, agora só precisa percorrer char a char, e caso encontre
//		 um inicializador de comando, chamar a função de interpretação com o vetor e o offset de onde
//		 começa o inicializador

		for (offset = 0; offset < size; offset++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	e0ad      	b.n	800081c <monitor_interrupt+0x184>
			if (*(cmd + offset) == LCD_CMD_END && *(cmd + offset + 1) != LCD_CMD && *(cmd + offset + 1) != 20) {
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4a69      	ldr	r2, [pc, #420]	; (8000868 <monitor_interrupt+0x1d0>)
 80006c4:	4413      	add	r3, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2bfd      	cmp	r3, #253	; 0xfd
 80006ca:	d110      	bne.n	80006ee <monitor_interrupt+0x56>
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a65      	ldr	r2, [pc, #404]	; (8000868 <monitor_interrupt+0x1d0>)
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2bfe      	cmp	r3, #254	; 0xfe
 80006d8:	d009      	beq.n	80006ee <monitor_interrupt+0x56>
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	3301      	adds	r3, #1
 80006de:	4a62      	ldr	r2, [pc, #392]	; (8000868 <monitor_interrupt+0x1d0>)
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b14      	cmp	r3, #20
 80006e6:	d002      	beq.n	80006ee <monitor_interrupt+0x56>
				//se o caractere atual é o de finalização de comando e o proximo não é o começo de outro e nem um espaço em branco então é o começo de um trecho imprimivel
				bgn_print = offset + 1;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	3301      	adds	r3, #1
 80006ec:	71bb      	strb	r3, [r7, #6]
			}
			if (offset > 0 && *(cmd + offset) == LCD_CMD && *(cmd + offset - 1) != LCD_CMD_END || offset == size) {
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d00c      	beq.n	800070e <monitor_interrupt+0x76>
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	4a5c      	ldr	r2, [pc, #368]	; (8000868 <monitor_interrupt+0x1d0>)
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2bfe      	cmp	r3, #254	; 0xfe
 80006fe:	d106      	bne.n	800070e <monitor_interrupt+0x76>
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	3b01      	subs	r3, #1
 8000704:	4a58      	ldr	r2, [pc, #352]	; (8000868 <monitor_interrupt+0x1d0>)
 8000706:	4413      	add	r3, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2bfd      	cmp	r3, #253	; 0xfd
 800070c:	d104      	bne.n	8000718 <monitor_interrupt+0x80>
 800070e:	79fa      	ldrb	r2, [r7, #7]
 8000710:	4b54      	ldr	r3, [pc, #336]	; (8000864 <monitor_interrupt+0x1cc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	429a      	cmp	r2, r3
 8000716:	d103      	bne.n	8000720 <monitor_interrupt+0x88>
				//se o caractere atual é o de inicialização de comando e o anterior não é o fim de outro
				printable = true;
 8000718:	2301      	movs	r3, #1
 800071a:	70fb      	strb	r3, [r7, #3]
				end_print = offset;
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	717b      	strb	r3, [r7, #5]
			}
			if(offset+1 == size && bgn_print>end_print  || offset+1 == size &&bgn_print< end_print){
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	3301      	adds	r3, #1
 8000724:	4a4f      	ldr	r2, [pc, #316]	; (8000864 <monitor_interrupt+0x1cc>)
 8000726:	6812      	ldr	r2, [r2, #0]
 8000728:	4293      	cmp	r3, r2
 800072a:	d103      	bne.n	8000734 <monitor_interrupt+0x9c>
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	797b      	ldrb	r3, [r7, #5]
 8000730:	429a      	cmp	r2, r3
 8000732:	d809      	bhi.n	8000748 <monitor_interrupt+0xb0>
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	3301      	adds	r3, #1
 8000738:	4a4a      	ldr	r2, [pc, #296]	; (8000864 <monitor_interrupt+0x1cc>)
 800073a:	6812      	ldr	r2, [r2, #0]
 800073c:	4293      	cmp	r3, r2
 800073e:	d108      	bne.n	8000752 <monitor_interrupt+0xba>
 8000740:	79ba      	ldrb	r2, [r7, #6]
 8000742:	797b      	ldrb	r3, [r7, #5]
 8000744:	429a      	cmp	r2, r3
 8000746:	d204      	bcs.n	8000752 <monitor_interrupt+0xba>
				printable = true;
 8000748:	2301      	movs	r3, #1
 800074a:	70fb      	strb	r3, [r7, #3]
				end_print = offset+1;
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	3301      	adds	r3, #1
 8000750:	717b      	strb	r3, [r7, #5]
			}
			if (printable) {
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d029      	beq.n	80007ac <monitor_interrupt+0x114>
				strncpy(ans, cmd + bgn_print, end_print - bgn_print);
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	4a43      	ldr	r2, [pc, #268]	; (8000868 <monitor_interrupt+0x1d0>)
 800075c:	1899      	adds	r1, r3, r2
 800075e:	797a      	ldrb	r2, [r7, #5]
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	461a      	mov	r2, r3
 8000766:	4841      	ldr	r0, [pc, #260]	; (800086c <monitor_interrupt+0x1d4>)
 8000768:	f00c fbd4 	bl	800cf14 <strncpy>
				CDC_Transmit_FS(ans, end_print - bgn_print);
 800076c:	797b      	ldrb	r3, [r7, #5]
 800076e:	b29a      	uxth	r2, r3
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	b29b      	uxth	r3, r3
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	b29b      	uxth	r3, r3
 8000778:	4619      	mov	r1, r3
 800077a:	483c      	ldr	r0, [pc, #240]	; (800086c <monitor_interrupt+0x1d4>)
 800077c:	f00b ff5c 	bl	800c638 <CDC_Transmit_FS>
				lcd_print(ans);
 8000780:	483a      	ldr	r0, [pc, #232]	; (800086c <monitor_interrupt+0x1d4>)
 8000782:	f000 fdf1 	bl	8001368 <lcd_print>
				memset(ans, 0, ANS_BUF_SIZE);
 8000786:	225a      	movs	r2, #90	; 0x5a
 8000788:	2100      	movs	r1, #0
 800078a:	4838      	ldr	r0, [pc, #224]	; (800086c <monitor_interrupt+0x1d4>)
 800078c:	f00c fb72 	bl	800ce74 <memset>
				printable = !printable;
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f083 0301 	eor.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	70fb      	strb	r3, [r7, #3]
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	70fb      	strb	r3, [r7, #3]
			}

			if (*(cmd + offset) == LCD_CMD) {
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a2e      	ldr	r2, [pc, #184]	; (8000868 <monitor_interrupt+0x1d0>)
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2bfe      	cmp	r3, #254	; 0xfe
 80007b6:	d117      	bne.n	80007e8 <monitor_interrupt+0x150>
				monitor_check_cmd((char*) cmd + offset, size);
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4a2b      	ldr	r2, [pc, #172]	; (8000868 <monitor_interrupt+0x1d0>)
 80007bc:	4413      	add	r3, r2
 80007be:	4a29      	ldr	r2, [pc, #164]	; (8000864 <monitor_interrupt+0x1cc>)
 80007c0:	6812      	ldr	r2, [r2, #0]
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fdb3 	bl	8000330 <monitor_check_cmd>
				is_cmd = !is_cmd;
 80007ca:	793b      	ldrb	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	bf14      	ite	ne
 80007d0:	2301      	movne	r3, #1
 80007d2:	2300      	moveq	r3, #0
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f083 0301 	eor.w	r3, r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	713b      	strb	r3, [r7, #4]
 80007de:	793b      	ldrb	r3, [r7, #4]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	713b      	strb	r3, [r7, #4]
 80007e6:	e013      	b.n	8000810 <monitor_interrupt+0x178>
			} else if (*(cmd + offset) == LCD_CMD_END) {
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <monitor_interrupt+0x1d0>)
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2bfd      	cmp	r3, #253	; 0xfd
 80007f2:	d10d      	bne.n	8000810 <monitor_interrupt+0x178>
				is_cmd = !is_cmd;
 80007f4:	793b      	ldrb	r3, [r7, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bf14      	ite	ne
 80007fa:	2301      	movne	r3, #1
 80007fc:	2300      	moveq	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f083 0301 	eor.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	713b      	strb	r3, [r7, #4]
 8000808:	793b      	ldrb	r3, [r7, #4]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	713b      	strb	r3, [r7, #4]
			}
			if(bgn_print>end_print && offset+1 > size){
 8000810:	79ba      	ldrb	r2, [r7, #6]
 8000812:	797b      	ldrb	r3, [r7, #5]
 8000814:	429a      	cmp	r2, r3
		for (offset = 0; offset < size; offset++) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	3301      	adds	r3, #1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	79fa      	ldrb	r2, [r7, #7]
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <monitor_interrupt+0x1cc>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	f4ff af4c 	bcc.w	80006c0 <monitor_interrupt+0x28>

			}
		}
		size = 0;
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <monitor_interrupt+0x1cc>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
		memset(cmd, 0, CMD_BUF_SIZE);
 800082e:	22c8      	movs	r2, #200	; 0xc8
 8000830:	2100      	movs	r1, #0
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <monitor_interrupt+0x1d0>)
 8000834:	f00c fb1e 	bl	800ce74 <memset>
		new_cmd = !new_cmd;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <monitor_interrupt+0x1c8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	bf14      	ite	ne
 8000840:	2301      	movne	r3, #1
 8000842:	2300      	moveq	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	f083 0301 	eor.w	r3, r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b03      	ldr	r3, [pc, #12]	; (8000860 <monitor_interrupt+0x1c8>)
 8000854:	701a      	strb	r2, [r3, #0]
	}
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200003c8 	.word	0x200003c8
 8000864:	200003c4 	.word	0x200003c4
 8000868:	200002a0 	.word	0x200002a0
 800086c:	20000368 	.word	0x20000368

08000870 <monitor_begin>:

void monitor_begin(void) {
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	uint8_t i;
	size = 0;
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <monitor_begin+0x18>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 800087a:	4b04      	ldr	r3, [pc, #16]	; (800088c <monitor_begin+0x1c>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	200003c4 	.word	0x200003c4
 800088c:	200003c8 	.word	0x200003c8

08000890 <exp>:

/**@brief	Exponentiate [value] , at the [pot] level
 * eu redefini a funcão de exponenciação manualmente por não poder importar a biblioteca matematica inteira apenas por uma função :D
*
*/
uint16_t exp(uint16_t val,uint16_t pot ){
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	80fb      	strh	r3, [r7, #6]
 800089c:	4613      	mov	r3, r2
 800089e:	80bb      	strh	r3, [r7, #4]
    uint16_t ans = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	81fb      	strh	r3, [r7, #14]
    while(pot){
 80008a4:	e007      	b.n	80008b6 <exp+0x26>
        ans *=val;
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	88fa      	ldrh	r2, [r7, #6]
 80008aa:	fb02 f303 	mul.w	r3, r2, r3
 80008ae:	81fb      	strh	r3, [r7, #14]
        pot--;
 80008b0:	88bb      	ldrh	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	80bb      	strh	r3, [r7, #4]
    while(pot){
 80008b6:	88bb      	ldrh	r3, [r7, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1f4      	bne.n	80008a6 <exp+0x16>
    }
    return ans;
 80008bc:	89fb      	ldrh	r3, [r7, #14]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <decode_convert_expand_encode>:
/**@brief	Decode Convert  Expand Rotate Encode
 * Esta função decodifica um caracter em hexadecimal dado, amplifica ele para o tamanho da memoria do novo display, rotaciona ele e recodifica
 * de maneira que no banco de dados eu só vou salvar o caractere definido pelo usuario em hexadecimal e o indice
*
*/
void decode_convert_expand_encode(uint8_t *hex_char){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
uint8_t mat[N][N]= {0};
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	2240      	movs	r2, #64	; 0x40
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f00c facb 	bl	800ce74 <memset>
uint8_t i,j,k, hex, temp;


//decode_expand
    for(i=3; *(hex_char+i) != 0xFD ; i++){
 80008de:	2303      	movs	r3, #3
 80008e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80008e4:	e02e      	b.n	8000944 <decode_convert_expand_encode+0x7c>
        hex = *(hex_char+i);
 80008e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

        for(j=7;j>=0 && j<8;j--)
 80008f4:	2307      	movs	r3, #7
 80008f6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80008fa:	e01a      	b.n	8000932 <decode_convert_expand_encode+0x6a>
        {
            mat[i-3][j] =hex%2;
 80008fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000900:	1eda      	subs	r2, r3, #3
 8000902:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000906:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 800090a:	f001 0101 	and.w	r1, r1, #1
 800090e:	b2c9      	uxtb	r1, r1
 8000910:	00d2      	lsls	r2, r2, #3
 8000912:	3250      	adds	r2, #80	; 0x50
 8000914:	443a      	add	r2, r7
 8000916:	4413      	add	r3, r2
 8000918:	3b48      	subs	r3, #72	; 0x48
 800091a:	460a      	mov	r2, r1
 800091c:	701a      	strb	r2, [r3, #0]
            hex=hex/2;
 800091e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000922:	085b      	lsrs	r3, r3, #1
 8000924:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
        for(j=7;j>=0 && j<8;j--)
 8000928:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800092c:	3b01      	subs	r3, #1
 800092e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000932:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000936:	2b07      	cmp	r3, #7
 8000938:	d9e0      	bls.n	80008fc <decode_convert_expand_encode+0x34>
    for(i=3; *(hex_char+i) != 0xFD ; i++){
 800093a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800093e:	3301      	adds	r3, #1
 8000940:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000944:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2bfd      	cmp	r3, #253	; 0xfd
 8000950:	d1c9      	bne.n	80008e6 <decode_convert_expand_encode+0x1e>
        }
    }
//rotate
        // Consider all squares one by one
	for (i = 0; i < N / 2; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000958:	e07d      	b.n	8000a56 <decode_convert_expand_encode+0x18e>
		// Consider elements in group
		// of 4 in current square
		for (j = i; j < N - i - 1; j++) {
 800095a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800095e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000962:	e06b      	b.n	8000a3c <decode_convert_expand_encode+0x174>
			// Store current cell in
			// temp variable
			temp = mat[i][j];
 8000964:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000968:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800096c:	00d2      	lsls	r2, r2, #3
 800096e:	3250      	adds	r2, #80	; 0x50
 8000970:	443a      	add	r2, r7
 8000972:	4413      	add	r3, r2
 8000974:	3b48      	subs	r3, #72	; 0x48
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

			// Move values from right to top
			mat[i][j] = mat[j][N - 1 - i];
 800097c:	f897 004e 	ldrb.w	r0, [r7, #78]	; 0x4e
 8000980:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000984:	f1c3 0107 	rsb	r1, r3, #7
 8000988:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800098c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000990:	00c0      	lsls	r0, r0, #3
 8000992:	3050      	adds	r0, #80	; 0x50
 8000994:	4438      	add	r0, r7
 8000996:	4401      	add	r1, r0
 8000998:	3948      	subs	r1, #72	; 0x48
 800099a:	7809      	ldrb	r1, [r1, #0]
 800099c:	00d2      	lsls	r2, r2, #3
 800099e:	3250      	adds	r2, #80	; 0x50
 80009a0:	443a      	add	r2, r7
 80009a2:	4413      	add	r3, r2
 80009a4:	3b48      	subs	r3, #72	; 0x48
 80009a6:	460a      	mov	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]

			// Move values from bottom to right
			mat[j][N - 1 - i]
				= mat[N - 1 - i][N - 1 - j];
 80009aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009ae:	f1c3 0007 	rsb	r0, r3, #7
 80009b2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009b6:	f1c3 0107 	rsb	r1, r3, #7
			mat[j][N - 1 - i]
 80009ba:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80009be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
				= mat[N - 1 - i][N - 1 - j];
 80009c6:	00c0      	lsls	r0, r0, #3
 80009c8:	3050      	adds	r0, #80	; 0x50
 80009ca:	4438      	add	r0, r7
 80009cc:	4401      	add	r1, r0
 80009ce:	3948      	subs	r1, #72	; 0x48
 80009d0:	7809      	ldrb	r1, [r1, #0]
 80009d2:	00d2      	lsls	r2, r2, #3
 80009d4:	3250      	adds	r2, #80	; 0x50
 80009d6:	443a      	add	r2, r7
 80009d8:	4413      	add	r3, r2
 80009da:	3b48      	subs	r3, #72	; 0x48
 80009dc:	460a      	mov	r2, r1
 80009de:	701a      	strb	r2, [r3, #0]

			// Move values from left to bottom
			mat[N - 1 - i][N - 1 - j]
				= mat[N - 1 - j][i];
 80009e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009e4:	f1c3 0007 	rsb	r0, r3, #7
 80009e8:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
			mat[N - 1 - i][N - 1 - j]
 80009ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009f0:	f1c3 0207 	rsb	r2, r3, #7
 80009f4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009f8:	f1c3 0307 	rsb	r3, r3, #7
				= mat[N - 1 - j][i];
 80009fc:	00c0      	lsls	r0, r0, #3
 80009fe:	3050      	adds	r0, #80	; 0x50
 8000a00:	4438      	add	r0, r7
 8000a02:	4401      	add	r1, r0
 8000a04:	3948      	subs	r1, #72	; 0x48
 8000a06:	7809      	ldrb	r1, [r1, #0]
 8000a08:	00d2      	lsls	r2, r2, #3
 8000a0a:	3250      	adds	r2, #80	; 0x50
 8000a0c:	443a      	add	r2, r7
 8000a0e:	4413      	add	r3, r2
 8000a10:	3b48      	subs	r3, #72	; 0x48
 8000a12:	460a      	mov	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]

			// Assign temp to left
			mat[N - 1 - j][i] = temp;
 8000a16:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a1a:	f1c3 0207 	rsb	r2, r3, #7
 8000a1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a22:	00d2      	lsls	r2, r2, #3
 8000a24:	3250      	adds	r2, #80	; 0x50
 8000a26:	443a      	add	r2, r7
 8000a28:	4413      	add	r3, r2
 8000a2a:	3b48      	subs	r3, #72	; 0x48
 8000a2c:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000a30:	701a      	strb	r2, [r3, #0]
		for (j = i; j < N - i - 1; j++) {
 8000a32:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a36:	3301      	adds	r3, #1
 8000a38:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000a3c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8000a40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a44:	f1c3 0307 	rsb	r3, r3, #7
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	db8b      	blt.n	8000964 <decode_convert_expand_encode+0x9c>
	for (i = 0; i < N / 2; i++) {
 8000a4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a50:	3301      	adds	r3, #1
 8000a52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	f67f af7d 	bls.w	800095a <decode_convert_expand_encode+0x92>
		}
	}
//encode
    for(i=0,k=0;i<N;i++){
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000a66:	2300      	movs	r3, #0
 8000a68:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000a6c:	e047      	b.n	8000afe <decode_convert_expand_encode+0x236>
        temp=0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        for(j=0;j<N;j++){
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000a7a:	e022      	b.n	8000ac2 <decode_convert_expand_encode+0x1fa>
            temp += exp(2,N-j) * mat[i][j];
 8000a7c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	f1c3 0308 	rsb	r3, r3, #8
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	4619      	mov	r1, r3
 8000a8a:	2002      	movs	r0, #2
 8000a8c:	f7ff ff00 	bl	8000890 <exp>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4619      	mov	r1, r3
 8000a94:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000a98:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000a9c:	00d2      	lsls	r2, r2, #3
 8000a9e:	3250      	adds	r2, #80	; 0x50
 8000aa0:	443a      	add	r2, r7
 8000aa2:	4413      	add	r3, r2
 8000aa4:	3b48      	subs	r3, #72	; 0x48
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	fb01 f303 	mul.w	r3, r1, r3
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000ab2:	4413      	add	r3, r2
 8000ab4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        for(j=0;j<N;j++){
 8000ab8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000abc:	3301      	adds	r3, #1
 8000abe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000ac2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000ac6:	2b07      	cmp	r3, #7
 8000ac8:	d9d8      	bls.n	8000a7c <decode_convert_expand_encode+0x1b4>
        }
        //save on the database
        if(i>1 && k<CUSTOM_CHARACTER_SIZE){
 8000aca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d910      	bls.n	8000af4 <decode_convert_expand_encode+0x22c>
 8000ad2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ad6:	2b05      	cmp	r3, #5
 8000ad8:	d80c      	bhi.n	8000af4 <decode_convert_expand_encode+0x22c>
        	hex_char[k+3] = temp;
 8000ada:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ade:	3303      	adds	r3, #3
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000ae8:	701a      	strb	r2, [r3, #0]
        	k++;
 8000aea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000aee:	3301      	adds	r3, #1
 8000af0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    for(i=0,k=0;i<N;i++){
 8000af4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000af8:	3301      	adds	r3, #1
 8000afa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000afe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	d9b3      	bls.n	8000a6e <decode_convert_expand_encode+0x1a6>
        }
    }
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	3750      	adds	r7, #80	; 0x50
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <init_custom_character_db>:
*	inicializa o banco de caracteres com o que foi salvo na memoria do equipamento
*	por hora ele seta todos os valores salvos para zero mas pode um dia buscar na
*	memoria persistente pelos valores gravados
*
*/
void init_custom_character_db(void){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	memset(custom_character_db,0,sizeof(custom_character_db));
 8000b14:	2270      	movs	r2, #112	; 0x70
 8000b16:	2100      	movs	r1, #0
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <init_custom_character_db+0x14>)
 8000b1a:	f00c f9ab 	bl	800ce74 <memset>
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200003d0 	.word	0x200003d0

08000b28 <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <auto_line_wrap+0x1c>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	7013      	strb	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	200003ca 	.word	0x200003ca

08000b48 <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	460a      	mov	r2, r1
 8000b52:	71fb      	strb	r3, [r7, #7]
 8000b54:	4613      	mov	r3, r2
 8000b56:	71bb      	strb	r3, [r7, #6]
	//convertendo a entrada para posição em termos de caractere
	cursor[0] = col * u8g2_GetMaxCharWidth(&u8g2) /*- '0'*/;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <text_insertion_point+0x4c>)
 8000b5a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	79fa      	ldrb	r2, [r7, #7]
 8000b62:	fb02 f303 	mul.w	r3, r2, r3
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <text_insertion_point+0x50>)
 8000b6a:	701a      	strb	r2, [r3, #0]
	cursor[1] = row
			* (u8g2_GetMaxCharHeight(&u8g2) - ESP_ENTRE_LINHAS)/*- '0'*/;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <text_insertion_point+0x4c>)
 8000b6e:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <text_insertion_point+0x54>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	1ad3      	subs	r3, r2, r3
	cursor[1] = row
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	79ba      	ldrb	r2, [r7, #6]
 8000b7e:	fb02 f303 	mul.w	r3, r2, r3
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <text_insertion_point+0x50>)
 8000b86:	705a      	strb	r2, [r3, #1]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2000020c 	.word	0x2000020c
 8000b98:	200003cc 	.word	0x200003cc
 8000b9c:	20000005 	.word	0x20000005

08000ba0 <put_Ucursor>:
 *	caso o usuario utiluze a função de apagar o cursor, sem antes telo escrito, o codigo vai de fato criar um cursor em uma posição lixo
 *	de memoria tanto para linha quanto para coluna
 */


void put_Ucursor(bool enable,uint8_t col, uint8_t row,uint8_t hoover) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	4608      	mov	r0, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	461a      	mov	r2, r3
 8000bae:	4623      	mov	r3, r4
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71bb      	strb	r3, [r7, #6]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	717b      	strb	r3, [r7, #5]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	713b      	strb	r3, [r7, #4]
	static uint8_t ucursor[2];
	u8g2_SetDrawColor(&u8g2, 2);
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4863      	ldr	r0, [pc, #396]	; (8000d50 <put_Ucursor+0x1b0>)
 8000bc2:	f002 fcf7 	bl	80035b4 <u8g2_SetDrawColor>
	if(enable){
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 80a7 	beq.w	8000d1c <put_Ucursor+0x17c>
		if(hoover){
 8000bce:	793b      	ldrb	r3, [r7, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d07b      	beq.n	8000ccc <put_Ucursor+0x12c>
			if(hoover == 'R'){
 8000bd4:	793b      	ldrb	r3, [r7, #4]
 8000bd6:	2b52      	cmp	r3, #82	; 0x52
 8000bd8:	d13b      	bne.n	8000c52 <put_Ucursor+0xb2>
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000bda:	4b5e      	ldr	r3, [pc, #376]	; (8000d54 <put_Ucursor+0x1b4>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b299      	uxth	r1, r3
 8000be0:	4b5c      	ldr	r3, [pc, #368]	; (8000d54 <put_Ucursor+0x1b4>)
 8000be2:	785b      	ldrb	r3, [r3, #1]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b5a      	ldr	r3, [pc, #360]	; (8000d50 <put_Ucursor+0x1b0>)
 8000be8:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	9000      	str	r0, [sp, #0]
 8000bf2:	4857      	ldr	r0, [pc, #348]	; (8000d50 <put_Ucursor+0x1b0>)
 8000bf4:	f001 fa20 	bl	8002038 <u8g2_DrawFrame>
				ucursor[0] = (ucursor[0] + u8g2_GetMaxCharWidth(&u8g2)) >  u8g2_GetDisplayWidth(&u8g2) - u8g2_GetMaxCharWidth(&u8g2) ? 0 : ucursor[0] + u8g2_GetMaxCharWidth(&u8g2);
 8000bf8:	4b56      	ldr	r3, [pc, #344]	; (8000d54 <put_Ucursor+0x1b4>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c00:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c04:	441a      	add	r2, r3
 8000c06:	4b52      	ldr	r3, [pc, #328]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4b50      	ldr	r3, [pc, #320]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c10:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c14:	1acb      	subs	r3, r1, r3
 8000c16:	429a      	cmp	r2, r3
 8000c18:	dc08      	bgt.n	8000c2c <put_Ucursor+0x8c>
 8000c1a:	4b4e      	ldr	r3, [pc, #312]	; (8000d54 <put_Ucursor+0x1b4>)
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c20:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4413      	add	r3, r2
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	e000      	b.n	8000c2e <put_Ucursor+0x8e>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4a49      	ldr	r2, [pc, #292]	; (8000d54 <put_Ucursor+0x1b4>)
 8000c30:	7013      	strb	r3, [r2, #0]
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000c32:	4b48      	ldr	r3, [pc, #288]	; (8000d54 <put_Ucursor+0x1b4>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b299      	uxth	r1, r3
 8000c38:	4b46      	ldr	r3, [pc, #280]	; (8000d54 <put_Ucursor+0x1b4>)
 8000c3a:	785b      	ldrb	r3, [r3, #1]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c40:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	9000      	str	r0, [sp, #0]
 8000c4a:	4841      	ldr	r0, [pc, #260]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c4c:	f001 f9f4 	bl	8002038 <u8g2_DrawFrame>
 8000c50:	e073      	b.n	8000d3a <put_Ucursor+0x19a>
			}else{
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000c52:	4b40      	ldr	r3, [pc, #256]	; (8000d54 <put_Ucursor+0x1b4>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b299      	uxth	r1, r3
 8000c58:	4b3e      	ldr	r3, [pc, #248]	; (8000d54 <put_Ucursor+0x1b4>)
 8000c5a:	785b      	ldrb	r3, [r3, #1]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c60:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	9000      	str	r0, [sp, #0]
 8000c6a:	4839      	ldr	r0, [pc, #228]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c6c:	f001 f9e4 	bl	8002038 <u8g2_DrawFrame>
				ucursor[0] = (ucursor[0] - u8g2_GetMaxCharWidth(&u8g2)) < 0 ? u8g2_GetDisplayWidth(&u8g2) - u8g2_GetMaxCharWidth(&u8g2) : ucursor[0] - u8g2_GetMaxCharWidth(&u8g2);
 8000c70:	4b38      	ldr	r3, [pc, #224]	; (8000d54 <put_Ucursor+0x1b4>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c78:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da0a      	bge.n	8000c98 <put_Ucursor+0xf8>
 8000c82:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c8c:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	e007      	b.n	8000ca8 <put_Ucursor+0x108>
 8000c98:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <put_Ucursor+0x1b4>)
 8000c9a:	781a      	ldrb	r2, [r3, #0]
 8000c9c:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <put_Ucursor+0x1b0>)
 8000c9e:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <put_Ucursor+0x1b4>)
 8000caa:	7013      	strb	r3, [r2, #0]
				u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <put_Ucursor+0x1b4>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b299      	uxth	r1, r3
 8000cb2:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <put_Ucursor+0x1b4>)
 8000cb4:	785b      	ldrb	r3, [r3, #1]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <put_Ucursor+0x1b0>)
 8000cba:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	9000      	str	r0, [sp, #0]
 8000cc4:	4822      	ldr	r0, [pc, #136]	; (8000d50 <put_Ucursor+0x1b0>)
 8000cc6:	f001 f9b7 	bl	8002038 <u8g2_DrawFrame>
 8000cca:	e036      	b.n	8000d3a <put_Ucursor+0x19a>
			}
		} else{
			ucursor[0] = col*u8g2_GetMaxCharWidth(&u8g2);
 8000ccc:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <put_Ucursor+0x1b0>)
 8000cce:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	79ba      	ldrb	r2, [r7, #6]
 8000cd6:	fb02 f303 	mul.w	r3, r2, r3
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <put_Ucursor+0x1b4>)
 8000cde:	701a      	strb	r2, [r3, #0]
			ucursor[1] = (row+1)*u8g2_GetMaxCharWidth(&u8g2)+2;
 8000ce0:	797b      	ldrb	r3, [r7, #5]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4a1a      	ldr	r2, [pc, #104]	; (8000d50 <put_Ucursor+0x1b0>)
 8000ce8:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <put_Ucursor+0x1b4>)
 8000cfa:	705a      	strb	r2, [r3, #1]
			u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <put_Ucursor+0x1b4>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b299      	uxth	r1, r3
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <put_Ucursor+0x1b4>)
 8000d04:	785b      	ldrb	r3, [r3, #1]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <put_Ucursor+0x1b0>)
 8000d0a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	2001      	movs	r0, #1
 8000d12:	9000      	str	r0, [sp, #0]
 8000d14:	480e      	ldr	r0, [pc, #56]	; (8000d50 <put_Ucursor+0x1b0>)
 8000d16:	f001 f98f 	bl	8002038 <u8g2_DrawFrame>
 8000d1a:	e00e      	b.n	8000d3a <put_Ucursor+0x19a>
		}
	}else{
		u8g2_DrawFrame(&u8g2,ucursor[0], ucursor[1],u8g2_GetMaxCharWidth(&u8g2) , 1);
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <put_Ucursor+0x1b4>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b299      	uxth	r1, r3
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <put_Ucursor+0x1b4>)
 8000d24:	785b      	ldrb	r3, [r3, #1]
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <put_Ucursor+0x1b0>)
 8000d2a:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	2001      	movs	r0, #1
 8000d32:	9000      	str	r0, [sp, #0]
 8000d34:	4806      	ldr	r0, [pc, #24]	; (8000d50 <put_Ucursor+0x1b0>)
 8000d36:	f001 f97f 	bl	8002038 <u8g2_DrawFrame>
	}
	u8g2_SendBuffer(&u8g2);
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <put_Ucursor+0x1b0>)
 8000d3c:	f001 fa4c 	bl	80021d8 <u8g2_SendBuffer>
	u8g2_SetDrawColor(&u8g2, 1);
 8000d40:	2101      	movs	r1, #1
 8000d42:	4803      	ldr	r0, [pc, #12]	; (8000d50 <put_Ucursor+0x1b0>)
 8000d44:	f002 fc36 	bl	80035b4 <u8g2_SetDrawColor>
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	2000020c 	.word	0x2000020c
 8000d54:	20000440 	.word	0x20000440

08000d58 <inverse_text>:
 */
void test_font(void) {
	lcd_print("    XCoder v3.0");
	u8g2_SendBuffer(&u8g2);
}
void inverse_text(bool state) {
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <inverse_text+0x1c>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	7013      	strb	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200003c9 	.word	0x200003c9

08000d78 <def_v_bar_thickness>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_v_bar_thickness(uint8_t thick){
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	if(thick){
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <def_v_bar_thickness+0x18>
		vertical_bar_width = 10;//5 no original
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <def_v_bar_thickness+0x28>)
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	701a      	strb	r2, [r3, #0]
	}else{
		vertical_bar_width = 4;//2 no original
	}
}
 8000d8e:	e002      	b.n	8000d96 <def_v_bar_thickness+0x1e>
		vertical_bar_width = 4;//2 no original
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <def_v_bar_thickness+0x28>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	701a      	strb	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	20000004 	.word	0x20000004

08000da4 <define_custom_character>:
 *	Os 6 bytes variam da seguinte forma:
 *	FE 4E [cc] [6bytes] FD
 *	254 104 [cc] [6bytes] 253
 *	254 `N` [cc] [6bytes] 253
 */
void define_custom_character(uint8_t *cmd){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
		decode_convert_expand_encode(cmd);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fd8b 	bl	80008c8 <decode_convert_expand_encode>
		memcpy(custom_character_db[*(cmd+2)].custom_caracter,cmd+3,6);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3302      	adds	r3, #2
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4613      	mov	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <define_custom_character+0x50>)
 8000dc2:	1898      	adds	r0, r3, r2
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3303      	adds	r3, #3
 8000dc8:	2206      	movs	r2, #6
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f00c f844 	bl	800ce58 <memcpy>
		custom_character_db[*(cmd+2)].custo_character_index = *(cmd+2);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7898      	ldrb	r0, [r3, #2]
 8000ddc:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <define_custom_character+0x50>)
 8000dde:	460b      	mov	r3, r1
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	1a5b      	subs	r3, r3, r1
 8000de4:	4413      	add	r3, r2
 8000de6:	3306      	adds	r3, #6
 8000de8:	4602      	mov	r2, r0
 8000dea:	701a      	strb	r2, [r3, #0]
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200003d0 	.word	0x200003d0

08000df8 <draw_un_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_un_v_bar_graph(uint8_t col, uint8_t height, bool erase) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	460b      	mov	r3, r1
 8000e04:	71bb      	strb	r3, [r7, #6]
 8000e06:	4613      	mov	r3, r2
 8000e08:	717b      	strb	r3, [r7, #5]
	static uint8_t vcursor, temp_height = 65;

	vcursor = col*u8g2_GetMaxCharWidth(&u8g2);
 8000e0a:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <draw_un_v_bar_graph+0xb8>)
 8000e0c:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	fb02 f303 	mul.w	r3, r2, r3
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <draw_un_v_bar_graph+0xbc>)
 8000e1c:	701a      	strb	r2, [r3, #0]
	height = u8g2_GetDisplayHeight(&u8g2) - height*2;
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <draw_un_v_bar_graph+0xb8>)
 8000e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	71bb      	strb	r3, [r7, #6]



	if(!erase){
 8000e30:	797b      	ldrb	r3, [r7, #5]
 8000e32:	f083 0301 	eor.w	r3, r3, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d02d      	beq.n	8000e98 <draw_un_v_bar_graph+0xa0>
		if(height < temp_height){
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <draw_un_v_bar_graph+0xc0>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	79ba      	ldrb	r2, [r7, #6]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d217      	bcs.n	8000e76 <draw_un_v_bar_graph+0x7e>
			u8g2_SetDrawColor(&u8g2, 1);
 8000e46:	2101      	movs	r1, #1
 8000e48:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <draw_un_v_bar_graph+0xb8>)
 8000e4a:	f002 fbb3 	bl	80035b4 <u8g2_SetDrawColor>
			u8g2_DrawBox(&u8g2, vcursor, height, vertical_bar_width, u8g2_GetDisplayHeight(&u8g2));
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <draw_un_v_bar_graph+0xbc>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b299      	uxth	r1, r3
 8000e54:	79bb      	ldrb	r3, [r7, #6]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <draw_un_v_bar_graph+0xc4>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b298      	uxth	r0, r3
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <draw_un_v_bar_graph+0xb8>)
 8000e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	4603      	mov	r3, r0
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <draw_un_v_bar_graph+0xb8>)
 8000e6a:	f001 f8af 	bl	8001fcc <u8g2_DrawBox>
			temp_height = height;
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <draw_un_v_bar_graph+0xc0>)
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	7013      	strb	r3, [r2, #0]
 8000e74:	e010      	b.n	8000e98 <draw_un_v_bar_graph+0xa0>
		}else{
			u8g2_SetDrawColor(&u8g2, 1);
 8000e76:	2101      	movs	r1, #1
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <draw_un_v_bar_graph+0xb8>)
 8000e7a:	f002 fb9b 	bl	80035b4 <u8g2_SetDrawColor>
			u8g2_DrawBox(&u8g2, 0, 0, vertical_bar_width, u8g2_GetDisplayHeight(&u8g2));
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <draw_un_v_bar_graph+0xc4>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <draw_un_v_bar_graph+0xb8>)
 8000e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <draw_un_v_bar_graph+0xb8>)
 8000e94:	f001 f89a 	bl	8001fcc <u8g2_DrawBox>
		}
	}else{


	}
	u8g2_SetDrawColor(&u8g2, 1);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <draw_un_v_bar_graph+0xb8>)
 8000e9c:	f002 fb8a 	bl	80035b4 <u8g2_SetDrawColor>
	u8g2_SendBuffer(&u8g2);
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <draw_un_v_bar_graph+0xb8>)
 8000ea2:	f001 f999 	bl	80021d8 <u8g2_SendBuffer>

}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000020c 	.word	0x2000020c
 8000eb4:	20000442 	.word	0x20000442
 8000eb8:	20000006 	.word	0x20000006
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <put_pixel+0x38>)
 8000ed4:	f002 fb6e 	bl	80035b4 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	79ba      	ldrb	r2, [r7, #6]
 8000ede:	b292      	uxth	r2, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <put_pixel+0x38>)
 8000ee4:	f002 fb33 	bl	800354e <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <put_pixel+0x38>)
 8000eea:	f001 f975 	bl	80021d8 <u8g2_SendBuffer>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2000020c 	.word	0x2000020c

08000efc <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4809      	ldr	r0, [pc, #36]	; (8000f34 <erase_pixel+0x38>)
 8000f10:	f002 fb50 	bl	80035b4 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x, y);
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	79ba      	ldrb	r2, [r7, #6]
 8000f1a:	b292      	uxth	r2, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <erase_pixel+0x38>)
 8000f20:	f002 fb15 	bl	800354e <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <erase_pixel+0x38>)
 8000f26:	f001 f957 	bl	80021d8 <u8g2_SendBuffer>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000020c 	.word	0x2000020c

08000f38 <put_byte>:
 *	Desenha um byte na posição [x,row] onde x varia de 0-121 e y varia de 0-3
 *	FE 3E [x] [row] [byte] [4 dummy bytes] FD
 *	254 62 [x] [row] [byte] [4 dummy bytes]  253
 *	254 `>` [x] [row] [byte] [4 dummy bytes]  253
 */
void put_byte(uint8_t x, uint8_t row, uint8_t byte){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	460b      	mov	r3, r1
 8000f44:	71bb      	strb	r3, [r7, #6]
 8000f46:	4613      	mov	r3, r2
 8000f48:	717b      	strb	r3, [r7, #5]
	char arr[8], i;
	memset(arr, 0, 8);
 8000f4a:	f107 030c 	add.w	r3, r7, #12
 8000f4e:	2208      	movs	r2, #8
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f00b ff8e 	bl	800ce74 <memset>
	for(i=0; byte > 0; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	75fb      	strb	r3, [r7, #23]
 8000f5c:	e00e      	b.n	8000f7c <put_byte+0x44>
	  {
	    arr[i] = byte%2;
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	797a      	ldrb	r2, [r7, #5]
 8000f62:	f002 0201 	and.w	r2, r2, #1
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	3318      	adds	r3, #24
 8000f6a:	443b      	add	r3, r7
 8000f6c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	    byte = byte/2;
 8000f70:	797b      	ldrb	r3, [r7, #5]
 8000f72:	085b      	lsrs	r3, r3, #1
 8000f74:	717b      	strb	r3, [r7, #5]
	for(i=0; byte > 0; i++)
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	75fb      	strb	r3, [r7, #23]
 8000f7c:	797b      	ldrb	r3, [r7, #5]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1ed      	bne.n	8000f5e <put_byte+0x26>
	  }
	row = row * ((u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS);
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <put_byte+0x8c>)
 8000f84:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <put_byte+0x90>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	71bb      	strb	r3, [r7, #6]
	u8g2_DrawXBM(&u8g2 , x, row, 1, 8, arr);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	2308      	movs	r3, #8
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <put_byte+0x8c>)
 8000fb0:	f000 ffc9 	bl	8001f46 <u8g2_DrawXBM>
	u8g2_SendBuffer(&u8g2);
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <put_byte+0x8c>)
 8000fb6:	f001 f90f 	bl	80021d8 <u8g2_SendBuffer>

}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000020c 	.word	0x2000020c
 8000fc8:	20000005 	.word	0x20000005

08000fcc <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8000fd0:	f003 fb31 	bl	8004636 <HAL_NVIC_SystemReset>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	text_insertion_point(0, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fdb2 	bl	8000b48 <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <clear_display+0x18>)
 8000fe6:	f001 faa5 	bl	8002534 <u8g2_ClearDisplay>
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000020c 	.word	0x2000020c

08000ff4 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	if(enable){
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00e      	beq.n	8001022 <enable_backlight+0x2e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2110      	movs	r1, #16
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <enable_backlight+0x48>)
 800100a:	f003 fca9 	bl	8004960 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800100e:	2100      	movs	r1, #0
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <enable_backlight+0x4c>)
 8001012:	f006 f9df 	bl	80073d4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT );
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <enable_backlight+0x50>)
 8001018:	881a      	ldrh	r2, [r3, #0]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <enable_backlight+0x4c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
	}else{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
	}
}
 8001020:	e008      	b.n	8001034 <enable_backlight+0x40>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2110      	movs	r1, #16
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <enable_backlight+0x48>)
 8001028:	f003 fc9a 	bl	8004960 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800102c:	2100      	movs	r1, #0
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <enable_backlight+0x4c>)
 8001030:	f006 fa72 	bl	8007518 <HAL_TIM_PWM_Stop>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010800 	.word	0x40010800
 8001040:	200004a8 	.word	0x200004a8
 8001044:	20000002 	.word	0x20000002

08001048 <set_backlight_brightness>:
 * Define o brlho do backlight em um dos niveis pre-configurados, [bright] varia de 1-7
 *   	FE 41 [bright] FD
 *		254 64 [bright] 253
 *		254 'A' [bright] 253
 */
void set_backlight_brightness(uint8_t bright){
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	if(bright){
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d016      	beq.n	8001086 <set_backlight_brightness+0x3e>
	LCD_BRIGHT = (7/bright)*59999;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2207      	movs	r2, #7
 800105c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001060:	b29b      	uxth	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	0152      	lsls	r2, r2, #5
 8001066:	1ad2      	subs	r2, r2, r3
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	441a      	add	r2, r3
 800106c:	4611      	mov	r1, r2
 800106e:	0109      	lsls	r1, r1, #4
 8001070:	1a8a      	subs	r2, r1, r2
 8001072:	0152      	lsls	r2, r2, #5
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <set_backlight_brightness+0x48>)
 800107a:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, LCD_BRIGHT);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <set_backlight_brightness+0x48>)
 800107e:	881a      	ldrh	r2, [r3, #0]
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <set_backlight_brightness+0x4c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	20000002 	.word	0x20000002
 8001094:	200004a8 	.word	0x200004a8

08001098 <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast) * 9);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	461a      	mov	r2, r3
 80010a6:	00d2      	lsls	r2, r2, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	4803      	ldr	r0, [pc, #12]	; (80010bc <set_contrast+0x24>)
 80010b0:	f003 f83d 	bl	800412e <u8x8_SetContrast>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000020c 	.word	0x2000020c

080010c0 <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <disp_splash+0x28>)
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	2318      	movs	r3, #24
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	23b4      	movs	r3, #180	; 0xb4
 80010d0:	2214      	movs	r2, #20
 80010d2:	2106      	movs	r1, #6
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <disp_splash+0x2c>)
 80010d6:	f000 ff36 	bl	8001f46 <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <disp_splash+0x2c>)
 80010dc:	f001 f87c 	bl	80021d8 <u8g2_SendBuffer>

}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	0800f000 	.word	0x0800f000
 80010ec:	2000020c 	.word	0x2000020c

080010f0 <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap_t *wrap, uint8_t *txt) {
 80010f0:	b5b0      	push	{r4, r5, r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
	uint8_t shift = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	737b      	strb	r3, [r7, #13]

	index = strlen(txt);
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f7ff f822 	bl	800014c <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	73bb      	strb	r3, [r7, #14]
	wrap->wrap_times = index / MAX_CHARS_ONSCREEN;
 800110c:	7bba      	ldrb	r2, [r7, #14]
 800110e:	4b43      	ldr	r3, [pc, #268]	; (800121c <str_warper+0x12c>)
 8001110:	fba3 1302 	umull	r1, r3, r3, r2
 8001114:	1ad2      	subs	r2, r2, r3
 8001116:	0852      	lsrs	r2, r2, #1
 8001118:	4413      	add	r3, r2
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	if (wrap->wrap_times) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800112a:	2b00      	cmp	r3, #0
 800112c:	d071      	beq.n	8001212 <str_warper+0x122>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e068      	b.n	8001206 <str_warper+0x116>
			if (aux < N_LINES) {
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b04      	cmp	r3, #4
 8001138:	d82f      	bhi.n	800119a <str_warper+0xaa>

				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	461a      	mov	r2, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	4413      	add	r3, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
						1 : 0;
 800114c:	2b20      	cmp	r3, #32
 800114e:	bf0c      	ite	eq
 8001150:	2301      	moveq	r3, #1
 8001152:	2300      	movne	r3, #0
 8001154:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 8001156:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00da      	lsls	r2, r3, #3
 8001162:	1ad2      	subs	r2, r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	1898      	adds	r0, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)),
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	00da      	lsls	r2, r3, #3
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	461a      	mov	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 800117a:	2214      	movs	r2, #20
 800117c:	4619      	mov	r1, r3
 800117e:	f00b fec9 	bl	800cf14 <strncpy>
						MAX_CHARS_ONSCREEN - 1);
				wrap->wrap_str[aux][MAX_CHARS_ONSCREEN - 1] = '\0';
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	00da      	lsls	r2, r3, #3
 800118e:	1ad2      	subs	r2, r2, r3
 8001190:	188b      	adds	r3, r1, r2
 8001192:	3314      	adds	r3, #20
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e032      	b.n	8001200 <str_warper+0x110>
			} else {
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	461a      	mov	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
						0 : 1;
 80011ac:	2b20      	cmp	r3, #32
 80011ae:	bf14      	ite	ne
 80011b0:	2301      	movne	r3, #1
 80011b2:	2300      	moveq	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
				shift = *(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))) == ' ' ?
 80011b6:	737b      	strb	r3, [r7, #13]
				strncpy(wrap->wrap_str[aux],
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	00da      	lsls	r2, r3, #3
 80011c2:	1ad2      	subs	r2, r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	189c      	adds	r4, r3, r2
						txt + ((MAX_CHARS_ONSCREEN) * (aux)) + shift,
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	4613      	mov	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4413      	add	r3, r2
 80011d0:	00da      	lsls	r2, r3, #3
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	461a      	mov	r2, r3
 80011d6:	7b7b      	ldrb	r3, [r7, #13]
 80011d8:	4413      	add	r3, r2
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	18d5      	adds	r5, r2, r3
						strlen(txt + ((MAX_CHARS_ONSCREEN - 1) * (aux))));
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	461a      	mov	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	4413      	add	r3, r2
				strncpy(wrap->wrap_str[aux],
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7fe ffac 	bl	800014c <strlen>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4629      	mov	r1, r5
 80011fa:	4620      	mov	r0, r4
 80011fc:	f00b fe8a 	bl	800cf14 <strncpy>
		for (aux = 0; aux <= wrap->wrap_times; aux++) {
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	3301      	adds	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	429a      	cmp	r2, r3
 8001210:	d990      	bls.n	8001134 <str_warper+0x44>
			}
		}
	}
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bdb0      	pop	{r4, r5, r7, pc}
 800121a:	bf00      	nop
 800121c:	86186187 	.word	0x86186187

08001220 <Custom_Character_masker>:


bool Custom_Character_masker(uint8_t *txt,uint8_t * mask, uint8_t *v_cursor){
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
	uint8_t index;
	bool enable;
	strncpy(mask,txt,MASK_BUFFER);
 800122c:	2269      	movs	r2, #105	; 0x69
 800122e:	68f9      	ldr	r1, [r7, #12]
 8001230:	68b8      	ldr	r0, [r7, #8]
 8001232:	f00b fe6f 	bl	800cf14 <strncpy>
	*(mask+MASK_BUFFER-1) = '\0';
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3368      	adds	r3, #104	; 0x68
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]

	*(v_cursor+0) = cursor[0];
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <Custom_Character_masker+0x6c>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	701a      	strb	r2, [r3, #0]
	*(v_cursor+1) = cursor[1];
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3301      	adds	r3, #1
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <Custom_Character_masker+0x6c>)
 800124c:	7852      	ldrb	r2, [r2, #1]
 800124e:	701a      	strb	r2, [r3, #0]

	for(index=0;*(mask+index) != '\0';index++){
 8001250:	2300      	movs	r3, #0
 8001252:	75fb      	strb	r3, [r7, #23]
 8001254:	e00f      	b.n	8001276 <Custom_Character_masker+0x56>
		if(*(mask+index)>=0 && *(mask+index)<=16){
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b10      	cmp	r3, #16
 8001260:	d806      	bhi.n	8001270 <Custom_Character_masker+0x50>
			*(mask+index) =32;
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	4413      	add	r3, r2
 8001268:	2220      	movs	r2, #32
 800126a:	701a      	strb	r2, [r3, #0]
			enable = true;
 800126c:	2301      	movs	r3, #1
 800126e:	75bb      	strb	r3, [r7, #22]
	for(index=0;*(mask+index) != '\0';index++){
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	3301      	adds	r3, #1
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1e9      	bne.n	8001256 <Custom_Character_masker+0x36>
		}
	}
return enable;
 8001282:	7dbb      	ldrb	r3, [r7, #22]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200003cc 	.word	0x200003cc

08001290 <clean_it>:
void clean_it(uint8_t *str){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	memset(str, 0, sizeof(str));
 8001298:	2204      	movs	r2, #4
 800129a:	2100      	movs	r1, #0
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f00b fde9 	bl	800ce74 <memset>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <custom_character_dealer>:
void custom_character_dealer( uint8_t *txt){
 80012ac:	b5b0      	push	{r4, r5, r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	6078      	str	r0, [r7, #4]
	uint8_t char_w = 8;
 80012b4:	2308      	movs	r3, #8
 80012b6:	737b      	strb	r3, [r7, #13]
	uint8_t char_h = 6;
 80012b8:	2306      	movs	r3, #6
 80012ba:	733b      	strb	r3, [r7, #12]
	uint8_t offset,temp_x,temp_y,index;
	temp_x = cursor[0];
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <custom_character_dealer+0xb0>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	73bb      	strb	r3, [r7, #14]
	temp_y = cursor[1];
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <custom_character_dealer+0xb0>)
 80012c4:	785b      	ldrb	r3, [r3, #1]
 80012c6:	72fb      	strb	r3, [r7, #11]
	for(offset = 0;*(txt+offset) !='\0';offset++){
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	e03b      	b.n	8001346 <custom_character_dealer+0x9a>
		index = *(txt+offset);
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	72bb      	strb	r3, [r7, #10]
		if((custom_character_db[index].custo_character_index)){
 80012d8:	7aba      	ldrb	r2, [r7, #10]
 80012da:	4921      	ldr	r1, [pc, #132]	; (8001360 <custom_character_dealer+0xb4>)
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	1a9b      	subs	r3, r3, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	3306      	adds	r3, #6
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d022      	beq.n	8001332 <custom_character_dealer+0x86>
				u8g2_DrawXBM(&u8g2 , temp_x, temp_y+4, char_w, char_h, custom_character_db[index].custom_caracter);
 80012ec:	7bbb      	ldrb	r3, [r7, #14]
 80012ee:	b298      	uxth	r0, r3
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	3304      	adds	r3, #4
 80012f6:	b29c      	uxth	r4, r3
 80012f8:	7b7b      	ldrb	r3, [r7, #13]
 80012fa:	b29d      	uxth	r5, r3
 80012fc:	7b3b      	ldrb	r3, [r7, #12]
 80012fe:	b299      	uxth	r1, r3
 8001300:	7aba      	ldrb	r2, [r7, #10]
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	4a15      	ldr	r2, [pc, #84]	; (8001360 <custom_character_dealer+0xb4>)
 800130a:	4413      	add	r3, r2
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	9100      	str	r1, [sp, #0]
 8001310:	462b      	mov	r3, r5
 8001312:	4622      	mov	r2, r4
 8001314:	4601      	mov	r1, r0
 8001316:	4813      	ldr	r0, [pc, #76]	; (8001364 <custom_character_dealer+0xb8>)
 8001318:	f000 fe15 	bl	8001f46 <u8g2_DrawXBM>
				u8g2_SendBuffer(&u8g2);
 800131c:	4811      	ldr	r0, [pc, #68]	; (8001364 <custom_character_dealer+0xb8>)
 800131e:	f000 ff5b 	bl	80021d8 <u8g2_SendBuffer>
				temp_x += u8g2_GetMaxCharWidth(&u8g2);
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <custom_character_dealer+0xb8>)
 8001324:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8001328:	b2da      	uxtb	r2, r3
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	4413      	add	r3, r2
 800132e:	73bb      	strb	r3, [r7, #14]
 8001330:	e006      	b.n	8001340 <custom_character_dealer+0x94>
				//trocando os caracteres especiais por um espaço em branco pra bater com a conta de espaço em tela
				//é um custom caracter
				//ele foi definido pelo usuario
				//ele deve ser impresso
			}else{
				temp_x += u8g2_GetMaxCharWidth(&u8g2);
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <custom_character_dealer+0xb8>)
 8001334:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 8001338:	b2da      	uxtb	r2, r3
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	4413      	add	r3, r2
 800133e:	73bb      	strb	r3, [r7, #14]
	for(offset = 0;*(txt+offset) !='\0';offset++){
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	3301      	adds	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1bd      	bne.n	80012ce <custom_character_dealer+0x22>
			}
	}

}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bdb0      	pop	{r4, r5, r7, pc}
 800135c:	200003cc 	.word	0x200003cc
 8001360:	200003d0 	.word	0x200003d0
 8001364:	2000020c 	.word	0x2000020c

08001368 <lcd_print>:


void lcd_print(uint8_t *txt) {
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b0bf      	sub	sp, #252	; 0xfc
 800136c:	af04      	add	r7, sp, #16
 800136e:	6078      	str	r0, [r7, #4]
	txt_wrap_t wrap;
	uint8_t aux = 0, i;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
	uint8_t v_cursor[2];
	uint8_t mask[MASK_BUFFER];
	bool enable;


	if (text_invertion) {
 8001376:	4b87      	ldr	r3, [pc, #540]	; (8001594 <lcd_print+0x22c>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d061      	beq.n	8001442 <lcd_print+0xda>
		if (text_wrap) {
 800137e:	4b86      	ldr	r3, [pc, #536]	; (8001598 <lcd_print+0x230>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d03a      	beq.n	80013fc <lcd_print+0x94>
			str_warper(&wrap, txt);
 8001386:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff feaf 	bl	80010f0 <str_warper>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 8001392:	2300      	movs	r3, #0
 8001394:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001398:	e024      	b.n	80013e4 <lcd_print+0x7c>
				//cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));

				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 800139a:	4b80      	ldr	r3, [pc, #512]	; (800159c <lcd_print+0x234>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b298      	uxth	r0, r3
 80013a0:	4b7e      	ldr	r3, [pc, #504]	; (800159c <lcd_print+0x234>)
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	b29c      	uxth	r4, r3
						0, 0, 0, wrap.wrap_str[aux]);
 80013a6:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80013aa:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	00da      	lsls	r2, r3, #3
 80013b6:	1ad2      	subs	r2, r2, r3
 80013b8:	188b      	adds	r3, r1, r2
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80013ba:	9303      	str	r3, [sp, #12]
 80013bc:	2300      	movs	r3, #0
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	2300      	movs	r3, #0
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	2300      	movs	r3, #0
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2320      	movs	r3, #32
 80013ca:	4622      	mov	r2, r4
 80013cc:	4601      	mov	r1, r0
 80013ce:	4874      	ldr	r0, [pc, #464]	; (80015a0 <lcd_print+0x238>)
 80013d0:	f001 f85c 	bl	800248c <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 80013d4:	4872      	ldr	r0, [pc, #456]	; (80015a0 <lcd_print+0x238>)
 80013d6:	f000 feff 	bl	80021d8 <u8g2_SendBuffer>
			for (aux = 0; aux <= wrap.wrap_times; aux++) {
 80013da:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80013de:	3301      	adds	r3, #1
 80013e0:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80013e4:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80013e8:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d9d4      	bls.n	800139a <lcd_print+0x32>
				 } else {
				 cursor[0] += u8g2_GetStrWidth(&u8g2,
				 wrap.wrap_str[aux - 1]);
				 }*/
			}
			clean_it(wrap.wrap_str);
 80013f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff4b 	bl	8001290 <clean_it>
				custom_character_dealer(txt);
			}
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
		}
	}
}
 80013fa:	e0c6      	b.n	800158a <lcd_print+0x222>
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 80013fc:	4b67      	ldr	r3, [pc, #412]	; (800159c <lcd_print+0x234>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b299      	uxth	r1, r3
 8001402:	4b66      	ldr	r3, [pc, #408]	; (800159c <lcd_print+0x234>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	9303      	str	r3, [sp, #12]
 800140c:	2300      	movs	r3, #0
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2300      	movs	r3, #0
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	2300      	movs	r3, #0
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2320      	movs	r3, #32
 800141a:	4861      	ldr	r0, [pc, #388]	; (80015a0 <lcd_print+0x238>)
 800141c:	f001 f836 	bl	800248c <u8g2_DrawButtonUTF8>
			u8g2_SendBuffer(&u8g2);
 8001420:	485f      	ldr	r0, [pc, #380]	; (80015a0 <lcd_print+0x238>)
 8001422:	f000 fed9 	bl	80021d8 <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	485d      	ldr	r0, [pc, #372]	; (80015a0 <lcd_print+0x238>)
 800142a:	f001 ff3d 	bl	80032a8 <u8g2_GetStrWidth>
 800142e:	4603      	mov	r3, r0
 8001430:	4619      	mov	r1, r3
 8001432:	4b5a      	ldr	r3, [pc, #360]	; (800159c <lcd_print+0x234>)
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	b2cb      	uxtb	r3, r1
 8001438:	4413      	add	r3, r2
 800143a:	b2da      	uxtb	r2, r3
 800143c:	4b57      	ldr	r3, [pc, #348]	; (800159c <lcd_print+0x234>)
 800143e:	701a      	strb	r2, [r3, #0]
}
 8001440:	e0a3      	b.n	800158a <lcd_print+0x222>
		if (text_wrap) {
 8001442:	4b55      	ldr	r3, [pc, #340]	; (8001598 <lcd_print+0x230>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d072      	beq.n	8001530 <lcd_print+0x1c8>
			str_warper(&wrap, txt);
 800144a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe4d 	bl	80010f0 <str_warper>
			if (wrap.wrap_times) {
 8001456:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800145a:	2b00      	cmp	r3, #0
 800145c:	d05a      	beq.n	8001514 <lcd_print+0x1ac>
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 800145e:	2300      	movs	r3, #0
 8001460:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001464:	e04a      	b.n	80014fc <lcd_print+0x194>
					clean_it(mask);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff10 	bl	8001290 <clean_it>
					enable = Custom_Character_masker(wrap.wrap_str[aux],mask,v_cursor);
 8001470:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001474:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	00da      	lsls	r2, r3, #3
 8001480:	1ad2      	subs	r2, r2, r3
 8001482:	188b      	adds	r3, r1, r2
 8001484:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001488:	f107 010c 	add.w	r1, r7, #12
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fec7 	bl	8001220 <Custom_Character_masker>
 8001492:	4603      	mov	r3, r0
 8001494:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
					u8g2_DrawUTF8(&u8g2, v_cursor[0], v_cursor[1], mask);
 8001498:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800149c:	b299      	uxth	r1, r3
 800149e:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	483d      	ldr	r0, [pc, #244]	; (80015a0 <lcd_print+0x238>)
 80014aa:	f001 fdc1 	bl	8003030 <u8g2_DrawUTF8>
					u8g2_SendBuffer(&u8g2);
 80014ae:	483c      	ldr	r0, [pc, #240]	; (80015a0 <lcd_print+0x238>)
 80014b0:	f000 fe92 	bl	80021d8 <u8g2_SendBuffer>
					if(enable){
 80014b4:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00c      	beq.n	80014d6 <lcd_print+0x16e>
						custom_character_dealer(wrap.wrap_str[aux]);
 80014bc:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 80014c0:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	00da      	lsls	r2, r3, #3
 80014cc:	1ad2      	subs	r2, r2, r3
 80014ce:	188b      	adds	r3, r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff feeb 	bl	80012ac <custom_character_dealer>
					cursor[1] += (u8g2_GetMaxCharHeight(&u8g2)) - ESP_ENTRE_LINHAS;
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <lcd_print+0x234>)
 80014d8:	785a      	ldrb	r2, [r3, #1]
 80014da:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <lcd_print+0x238>)
 80014dc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80014e0:	b2d9      	uxtb	r1, r3
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <lcd_print+0x23c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	1acb      	subs	r3, r1, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <lcd_print+0x234>)
 80014f0:	705a      	strb	r2, [r3, #1]
				for (aux = 0; aux <= wrap.wrap_times; aux++) {
 80014f2:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80014f6:	3301      	adds	r3, #1
 80014f8:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80014fc:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001500:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001504:	429a      	cmp	r2, r3
 8001506:	d9ae      	bls.n	8001466 <lcd_print+0xfe>
				clean_it(wrap.wrap_str);
 8001508:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff febf 	bl	8001290 <clean_it>
}
 8001512:	e03a      	b.n	800158a <lcd_print+0x222>
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <lcd_print+0x234>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b299      	uxth	r1, r3
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <lcd_print+0x234>)
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	481f      	ldr	r0, [pc, #124]	; (80015a0 <lcd_print+0x238>)
 8001524:	f001 fd84 	bl	8003030 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 8001528:	481d      	ldr	r0, [pc, #116]	; (80015a0 <lcd_print+0x238>)
 800152a:	f000 fe55 	bl	80021d8 <u8g2_SendBuffer>
}
 800152e:	e02c      	b.n	800158a <lcd_print+0x222>
			enable = Custom_Character_masker(txt,mask,v_cursor);
 8001530:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fe70 	bl	8001220 <Custom_Character_masker>
 8001540:	4603      	mov	r3, r0
 8001542:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
			u8g2_DrawUTF8(&u8g2, v_cursor[0], v_cursor[1], mask);
 8001546:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800154a:	b299      	uxth	r1, r3
 800154c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001550:	b29a      	uxth	r2, r3
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4812      	ldr	r0, [pc, #72]	; (80015a0 <lcd_print+0x238>)
 8001558:	f001 fd6a 	bl	8003030 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 800155c:	4810      	ldr	r0, [pc, #64]	; (80015a0 <lcd_print+0x238>)
 800155e:	f000 fe3b 	bl	80021d8 <u8g2_SendBuffer>
			if(enable){
 8001562:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <lcd_print+0x208>
				custom_character_dealer(txt);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fe9e 	bl	80012ac <custom_character_dealer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <lcd_print+0x238>)
 8001574:	f001 fe98 	bl	80032a8 <u8g2_GetStrWidth>
 8001578:	4603      	mov	r3, r0
 800157a:	4619      	mov	r1, r3
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <lcd_print+0x234>)
 800157e:	781a      	ldrb	r2, [r3, #0]
 8001580:	b2cb      	uxtb	r3, r1
 8001582:	4413      	add	r3, r2
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b05      	ldr	r3, [pc, #20]	; (800159c <lcd_print+0x234>)
 8001588:	701a      	strb	r2, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	37ec      	adds	r7, #236	; 0xec
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}
 8001592:	bf00      	nop
 8001594:	200003c9 	.word	0x200003c9
 8001598:	200003ca 	.word	0x200003ca
 800159c:	200003cc 	.word	0x200003cc
 80015a0:	2000020c 	.word	0x2000020c
 80015a4:	20000005 	.word	0x20000005

080015a8 <Kpd_Irqv_Init>:
#include "usbd_cdc_if.h"

//{set,reset,up,down,left,right}
key_ih IRQ_VECTOR[6];

void Kpd_Irqv_Init(void) {
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	//
	IRQ_VECTOR[0].IRQn_p = SET_P_EXTI_IRQn;
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015ae:	220a      	movs	r2, #10
 80015b0:	705a      	strb	r2, [r3, #1]
	IRQ_VECTOR[0].deb_counter = 0;
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
	//
	IRQ_VECTOR[1].IRQn_p = RESET_P_EXTI_IRQn;
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015ba:	2217      	movs	r2, #23
 80015bc:	70da      	strb	r2, [r3, #3]
	IRQ_VECTOR[1].deb_counter = 0;
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	709a      	strb	r2, [r3, #2]
	//
	IRQ_VECTOR[2].IRQn_p = UP_P_EXTI_IRQn;
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015c6:	2217      	movs	r2, #23
 80015c8:	715a      	strb	r2, [r3, #5]
	IRQ_VECTOR[2].deb_counter = 0;
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	711a      	strb	r2, [r3, #4]
	//
	IRQ_VECTOR[3].IRQn_p = DOWN_P_EXTI_IRQn;
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015d2:	2217      	movs	r2, #23
 80015d4:	71da      	strb	r2, [r3, #7]
	IRQ_VECTOR[3].deb_counter = 0;
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015d8:	2200      	movs	r2, #0
 80015da:	719a      	strb	r2, [r3, #6]
	//
	IRQ_VECTOR[4].IRQn_p = LEFT_P_EXTI_IRQn;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015de:	2217      	movs	r2, #23
 80015e0:	725a      	strb	r2, [r3, #9]
	IRQ_VECTOR[4].deb_counter = 0;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	721a      	strb	r2, [r3, #8]
	//
	IRQ_VECTOR[5].IRQn_p = RIGHT_P_EXTI_IRQn;
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015ea:	2217      	movs	r2, #23
 80015ec:	72da      	strb	r2, [r3, #11]
	IRQ_VECTOR[5].deb_counter = 0;
 80015ee:	4b03      	ldr	r3, [pc, #12]	; (80015fc <Kpd_Irqv_Init+0x54>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	729a      	strb	r2, [r3, #10]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000444 	.word	0x20000444

08001600 <SystickCallback>:

void SystickCallback(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < 6; i++) {
 8001606:	2300      	movs	r3, #0
 8001608:	71fb      	strb	r3, [r7, #7]
 800160a:	e01b      	b.n	8001644 <SystickCallback+0x44>
		if (IRQ_VECTOR[i].deb_counter == 0) {
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4a11      	ldr	r2, [pc, #68]	; (8001654 <SystickCallback+0x54>)
 8001610:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d109      	bne.n	800162c <SystickCallback+0x2c>
			HAL_NVIC_EnableIRQ(IRQ_VECTOR[i].IRQn_p);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <SystickCallback+0x54>)
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001624:	4618      	mov	r0, r3
 8001626:	f002 ffea 	bl	80045fe <HAL_NVIC_EnableIRQ>
 800162a:	e008      	b.n	800163e <SystickCallback+0x3e>
		} else {
			IRQ_VECTOR[i].deb_counter--;
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <SystickCallback+0x54>)
 8001630:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001634:	3a01      	subs	r2, #1
 8001636:	b2d1      	uxtb	r1, r2
 8001638:	4a06      	ldr	r2, [pc, #24]	; (8001654 <SystickCallback+0x54>)
 800163a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	for (i = 0; i < 6; i++) {
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3301      	adds	r3, #1
 8001642:	71fb      	strb	r3, [r7, #7]
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d9e0      	bls.n	800160c <SystickCallback+0xc>
		}
	}
}
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000444 	.word	0x20000444

08001658 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SET_P_Pin) {
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	2b10      	cmp	r3, #16
 8001666:	d10d      	bne.n	8001684 <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_NVIC_DisableIRQ(IRQ_VECTOR[0].IRQn_p);
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_GPIO_EXTI_Callback+0x34>)
 800166a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800166e:	4618      	mov	r0, r3
 8001670:	f002 ffd3 	bl	800461a <HAL_NVIC_DisableIRQ>
		IRQ_VECTOR[0].deb_counter = DEBOUNCE_TIME;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_GPIO_EXTI_Callback+0x34>)
 8001676:	22f4      	movs	r2, #244	; 0xf4
 8001678:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800167a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167e:	4804      	ldr	r0, [pc, #16]	; (8001690 <HAL_GPIO_EXTI_Callback+0x38>)
 8001680:	f003 f986 	bl	8004990 <HAL_GPIO_TogglePin>
	}
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000444 	.word	0x20000444
 8001690:	40011000 	.word	0x40011000

08001694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001698:	f002 fdfe 	bl	8004298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169c:	f000 f80e 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a0:	f000 f988 	bl	80019b4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80016a4:	f00a feec 	bl	800c480 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80016a8:	f000 f862 	bl	8001770 <MX_SPI1_Init>
  MX_TIM2_Init();
 80016ac:	f000 f936 	bl	800191c <MX_TIM2_Init>
  MX_TIM1_Init();
 80016b0:	f000 f894 	bl	80017dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Start_APP();
 80016b4:	f7fe fdd0 	bl	8000258 <Start_APP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __WFI();
 80016b8:	bf30      	wfi
 80016ba:	e7fd      	b.n	80016b8 <main+0x24>

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b094      	sub	sp, #80	; 0x50
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c6:	2228      	movs	r2, #40	; 0x28
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00b fbd2 	bl	800ce74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016fa:	2301      	movs	r3, #1
 80016fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fe:	2302      	movs	r3, #2
 8001700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001708:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800170c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001712:	4618      	mov	r0, r3
 8001714:	f004 fe32 	bl	800637c <HAL_RCC_OscConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800171e:	f000 f9fd 	bl	8001b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	230f      	movs	r3, #15
 8001724:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001732:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2102      	movs	r1, #2
 800173e:	4618      	mov	r0, r3
 8001740:	f005 f89e 	bl	8006880 <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800174a:	f000 f9e7 	bl	8001b1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800174e:	2310      	movs	r3, #16
 8001750:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f005 f9f7 	bl	8006b4c <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001764:	f000 f9da 	bl	8001b1c <Error_Handler>
  }
}
 8001768:	bf00      	nop
 800176a:	3750      	adds	r7, #80	; 0x50
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_SPI1_Init+0x64>)
 8001776:	4a18      	ldr	r2, [pc, #96]	; (80017d8 <MX_SPI1_Init+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <MX_SPI1_Init+0x64>)
 800177c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_SPI1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_SPI1_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_SPI1_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_SPI1_Init+0x64>)
 800179c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017a4:	2208      	movs	r2, #8
 80017a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017bc:	220a      	movs	r2, #10
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017c2:	f005 fa79 	bl	8006cb8 <HAL_SPI_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017cc:	f000 f9a6 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000450 	.word	0x20000450
 80017d8:	40013000 	.word	0x40013000

080017dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b096      	sub	sp, #88	; 0x58
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2220      	movs	r2, #32
 8001812:	2100      	movs	r1, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f00b fb2d 	bl	800ce74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800181a:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <MX_TIM1_Init+0x138>)
 800181c:	4a3e      	ldr	r2, [pc, #248]	; (8001918 <MX_TIM1_Init+0x13c>)
 800181e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001820:	4b3c      	ldr	r3, [pc, #240]	; (8001914 <MX_TIM1_Init+0x138>)
 8001822:	2200      	movs	r2, #0
 8001824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <MX_TIM1_Init+0x138>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <MX_TIM1_Init+0x138>)
 800182e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001834:	4b37      	ldr	r3, [pc, #220]	; (8001914 <MX_TIM1_Init+0x138>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <MX_TIM1_Init+0x138>)
 800183c:	2200      	movs	r2, #0
 800183e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	4b34      	ldr	r3, [pc, #208]	; (8001914 <MX_TIM1_Init+0x138>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001846:	4833      	ldr	r0, [pc, #204]	; (8001914 <MX_TIM1_Init+0x138>)
 8001848:	f005 fc9c 	bl	8007184 <HAL_TIM_Base_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001852:	f000 f963 	bl	8001b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800185c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001860:	4619      	mov	r1, r3
 8001862:	482c      	ldr	r0, [pc, #176]	; (8001914 <MX_TIM1_Init+0x138>)
 8001864:	f006 f882 	bl	800796c <HAL_TIM_ConfigClockSource>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800186e:	f000 f955 	bl	8001b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001872:	4828      	ldr	r0, [pc, #160]	; (8001914 <MX_TIM1_Init+0x138>)
 8001874:	f005 fd56 	bl	8007324 <HAL_TIM_PWM_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800187e:	f000 f94d 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800188a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800188e:	4619      	mov	r1, r3
 8001890:	4820      	ldr	r0, [pc, #128]	; (8001914 <MX_TIM1_Init+0x138>)
 8001892:	f006 fbf7 	bl	8008084 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800189c:	f000 f93e 	bl	8001b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a0:	2360      	movs	r3, #96	; 0x60
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	4813      	ldr	r0, [pc, #76]	; (8001914 <MX_TIM1_Init+0x138>)
 80018c6:	f005 ff93 	bl	80077f0 <HAL_TIM_PWM_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80018d0:	f000 f924 	bl	8001b1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	; (8001914 <MX_TIM1_Init+0x138>)
 80018f8:	f006 fc22 	bl	8008140 <HAL_TIMEx_ConfigBreakDeadTime>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001902:	f000 f90b 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001906:	4803      	ldr	r0, [pc, #12]	; (8001914 <MX_TIM1_Init+0x138>)
 8001908:	f000 f9c6 	bl	8001c98 <HAL_TIM_MspPostInit>

}
 800190c:	bf00      	nop
 800190e:	3758      	adds	r7, #88	; 0x58
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200004a8 	.word	0x200004a8
 8001918:	40012c00 	.word	0x40012c00

0800191c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_TIM2_Init+0x94>)
 800193a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001942:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_TIM2_Init+0x94>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001950:	221d      	movs	r2, #29
 8001952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_TIM2_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001960:	4813      	ldr	r0, [pc, #76]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001962:	f005 fc0f 	bl	8007184 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800196c:	f000 f8d6 	bl	8001b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_TIM2_Init+0x94>)
 800197e:	f005 fff5 	bl	800796c <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001988:	f000 f8c8 	bl	8001b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_TIM2_Init+0x94>)
 800199a:	f006 fb73 	bl	8008084 <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f000 f8ba 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200004f0 	.word	0x200004f0

080019b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c8:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a4e      	ldr	r2, [pc, #312]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019ce:	f043 0310 	orr.w	r3, r3, #16
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e0:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019e6:	f043 0320 	orr.w	r3, r3, #32
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4a42      	ldr	r2, [pc, #264]	; (8001b08 <MX_GPIO_Init+0x154>)
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	6193      	str	r3, [r2, #24]
 8001a04:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <MX_GPIO_Init+0x154>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a10:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <MX_GPIO_Init+0x154>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	4a3c      	ldr	r2, [pc, #240]	; (8001b08 <MX_GPIO_Init+0x154>)
 8001a16:	f043 0308 	orr.w	r3, r3, #8
 8001a1a:	6193      	str	r3, [r2, #24]
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <MX_GPIO_Init+0x154>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2e:	4837      	ldr	r0, [pc, #220]	; (8001b0c <MX_GPIO_Init+0x158>)
 8001a30:	f002 ff96 	bl	8004960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2110      	movs	r1, #16
 8001a38:	4835      	ldr	r0, [pc, #212]	; (8001b10 <MX_GPIO_Init+0x15c>)
 8001a3a:	f002 ff91 	bl	8004960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2140      	movs	r1, #64	; 0x40
 8001a42:	4833      	ldr	r0, [pc, #204]	; (8001b10 <MX_GPIO_Init+0x15c>)
 8001a44:	f002 ff8c 	bl	8004960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	4831      	ldr	r0, [pc, #196]	; (8001b14 <MX_GPIO_Init+0x160>)
 8001a4e:	f002 ff87 	bl	8004960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4828      	ldr	r0, [pc, #160]	; (8001b0c <MX_GPIO_Init+0x158>)
 8001a6c:	f002 fdf4 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a70:	2310      	movs	r3, #16
 8001a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	4822      	ldr	r0, [pc, #136]	; (8001b10 <MX_GPIO_Init+0x15c>)
 8001a88:	f002 fde6 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a8c:	2340      	movs	r3, #64	; 0x40
 8001a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	481b      	ldr	r0, [pc, #108]	; (8001b10 <MX_GPIO_Init+0x15c>)
 8001aa4:	f002 fdd8 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4619      	mov	r1, r3
 8001abe:	4815      	ldr	r0, [pc, #84]	; (8001b14 <MX_GPIO_Init+0x160>)
 8001ac0:	f002 fdca 	bl	8004658 <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_P_Pin RESET_P_Pin UP_P_Pin DOWN_P_Pin
                           LEFT_P_Pin RIGHT_P_Pin */
  GPIO_InitStruct.Pin = SET_P_Pin|RESET_P_Pin|UP_P_Pin|DOWN_P_Pin
 8001ac4:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8001ac8:	613b      	str	r3, [r7, #16]
                          |LEFT_P_Pin|RIGHT_P_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <MX_GPIO_Init+0x164>)
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 0310 	add.w	r3, r7, #16
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480e      	ldr	r0, [pc, #56]	; (8001b14 <MX_GPIO_Init+0x160>)
 8001ada:	f002 fdbd 	bl	8004658 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	200a      	movs	r0, #10
 8001ae4:	f002 fd6f 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ae8:	200a      	movs	r0, #10
 8001aea:	f002 fd88 	bl	80045fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2017      	movs	r0, #23
 8001af4:	f002 fd67 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001af8:	2017      	movs	r0, #23
 8001afa:	f002 fd80 	bl	80045fe <HAL_NVIC_EnableIRQ>

}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40011000 	.word	0x40011000
 8001b10:	40010800 	.word	0x40010800
 8001b14:	40010c00 	.word	0x40010c00
 8001b18:	10210000 	.word	0x10210000

08001b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b20:	b672      	cpsid	i
}
 8001b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <Error_Handler+0x8>
	...

08001b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_MspInit+0x7c>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_MspInit+0x7c>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6193      	str	r3, [r2, #24]
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <HAL_MspInit+0x7c>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <HAL_MspInit+0x7c>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <HAL_MspInit+0x7c>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	61d3      	str	r3, [r2, #28]
 8001b52:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_MspInit+0x7c>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	2005      	movs	r0, #5
 8001b64:	f002 fd2f 	bl	80045c6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b68:	2005      	movs	r0, #5
 8001b6a:	f002 fd48 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2005      	movs	r0, #5
 8001b74:	f002 fd27 	bl	80045c6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b78:	2005      	movs	r0, #5
 8001b7a:	f002 fd40 	bl	80045fe <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_MspInit+0x80>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_MspInit+0x80>)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010000 	.word	0x40010000

08001bac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <HAL_SPI_MspInit+0x70>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d123      	bne.n	8001c14 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_SPI_MspInit+0x74>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <HAL_SPI_MspInit+0x74>)
 8001bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_SPI_MspInit+0x74>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_SPI_MspInit+0x74>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <HAL_SPI_MspInit+0x74>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_SPI_MspInit+0x74>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001bfc:	23a0      	movs	r3, #160	; 0xa0
 8001bfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <HAL_SPI_MspInit+0x78>)
 8001c10:	f002 fd22 	bl	8004658 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c14:	bf00      	nop
 8001c16:	3720      	adds	r7, #32
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40013000 	.word	0x40013000
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010800 	.word	0x40010800

08001c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <HAL_TIM_Base_MspInit+0x68>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10c      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_TIM_Base_MspInit+0x6c>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <HAL_TIM_Base_MspInit+0x6c>)
 8001c40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c44:	6193      	str	r3, [r2, #24]
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_TIM_Base_MspInit+0x6c>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c52:	e018      	b.n	8001c86 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5c:	d113      	bne.n	8001c86 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_TIM_Base_MspInit+0x6c>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <HAL_TIM_Base_MspInit+0x6c>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	61d3      	str	r3, [r2, #28]
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_TIM_Base_MspInit+0x6c>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	201c      	movs	r0, #28
 8001c7c:	f002 fca3 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c80:	201c      	movs	r0, #28
 8001c82:	f002 fcbc 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40012c00 	.word	0x40012c00
 8001c94:	40021000 	.word	0x40021000

08001c98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_TIM_MspPostInit+0x5c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d118      	bne.n	8001cea <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_TIM_MspPostInit+0x60>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_TIM_MspPostInit+0x60>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_TIM_MspPostInit+0x60>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <HAL_TIM_MspPostInit+0x64>)
 8001ce6:	f002 fcb7 	bl	8004658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cea:	bf00      	nop
 8001cec:	3720      	adds	r7, #32
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40012c00 	.word	0x40012c00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010800 	.word	0x40010800

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <NMI_Handler+0x4>

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  SystickCallback();
 8001d46:	f7ff fc5b 	bl	8001600 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4a:	f002 faeb 	bl	8004324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SET_P_Pin);
 8001d62:	2010      	movs	r0, #16
 8001d64:	f002 fe2e 	bl	80049c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001d72:	f002 ff70 	bl	8004c56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200017d8 	.word	0x200017d8

08001d80 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d86:	f002 ff66 	bl	8004c56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200017d8 	.word	0x200017d8

08001d94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_P_Pin);
 8001d98:	2020      	movs	r0, #32
 8001d9a:	f002 fe13 	bl	80049c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(UP_P_Pin);
 8001d9e:	2040      	movs	r0, #64	; 0x40
 8001da0:	f002 fe10 	bl	80049c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_P_Pin);
 8001da4:	2080      	movs	r0, #128	; 0x80
 8001da6:	f002 fe0d 	bl	80049c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_P_Pin);
 8001daa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dae:	f002 fe09 	bl	80049c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RIGHT_P_Pin);
 8001db2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001db6:	f002 fe05 	bl	80049c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <TIM2_IRQHandler+0x10>)
 8001dc6:	f005 fc0b 	bl	80075e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200004f0 	.word	0x200004f0

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f00a fffe 	bl	800ce04 <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20005000 	.word	0x20005000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	20000538 	.word	0x20000538
 8001e3c:	20001cf8 	.word	0x20001cf8

08001e40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b088      	sub	sp, #32
 8001e6e:	af02      	add	r7, sp, #8
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	4608      	mov	r0, r1
 8001e74:	4611      	mov	r1, r2
 8001e76:	461a      	mov	r2, r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	817b      	strh	r3, [r7, #10]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	813b      	strh	r3, [r7, #8]
 8001e80:	4613      	mov	r3, r2
 8001e82:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001e8a:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001e8c:	7dbb      	ldrb	r3, [r7, #22]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001e9a:	897a      	ldrh	r2, [r7, #10]
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	b298      	uxth	r0, r3
 8001ea2:	893b      	ldrh	r3, [r7, #8]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	893a      	ldrh	r2, [r7, #8]
 8001eaa:	8979      	ldrh	r1, [r7, #10]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4603      	mov	r3, r0
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f001 fbc8 	bl	8003646 <u8g2_IsIntersection>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d040      	beq.n	8001f3e <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001ec0:	e035      	b.n	8001f2e <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	781a      	ldrb	r2, [r3, #0]
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00c      	beq.n	8001eea <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	7dba      	ldrb	r2, [r7, #22]
 8001ed4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001ed8:	893a      	ldrh	r2, [r7, #8]
 8001eda:	8979      	ldrh	r1, [r7, #10]
 8001edc:	2300      	movs	r3, #0
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f001 fa76 	bl	80033d4 <u8g2_DrawHVLine>
 8001ee8:	e010      	b.n	8001f0c <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10b      	bne.n	8001f0c <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	7d7a      	ldrb	r2, [r7, #21]
 8001ef8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001efc:	893a      	ldrh	r2, [r7, #8]
 8001efe:	8979      	ldrh	r1, [r7, #10]
 8001f00:	2300      	movs	r3, #0
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2301      	movs	r3, #1
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f001 fa64 	bl	80033d4 <u8g2_DrawHVLine>
    }
    x++;
 8001f0c:	897b      	ldrh	r3, [r7, #10]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d104      	bne.n	8001f28 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
      b++;
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	3301      	adds	r3, #1
 8001f26:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1c6      	bne.n	8001ec2 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	7dba      	ldrb	r2, [r7, #22]
 8001f38:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001f3c:	e000      	b.n	8001f40 <u8g2_DrawHXBM+0xd6>
    return;
 8001f3e:	bf00      	nop
}
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b088      	sub	sp, #32
 8001f4a:	af02      	add	r7, sp, #8
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	4608      	mov	r0, r1
 8001f50:	4611      	mov	r1, r2
 8001f52:	461a      	mov	r2, r3
 8001f54:	4603      	mov	r3, r0
 8001f56:	817b      	strh	r3, [r7, #10]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	813b      	strh	r3, [r7, #8]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001f64:	8afb      	ldrh	r3, [r7, #22]
 8001f66:	3307      	adds	r3, #7
 8001f68:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001f6a:	8afb      	ldrh	r3, [r7, #22]
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001f70:	897a      	ldrh	r2, [r7, #10]
 8001f72:	88fb      	ldrh	r3, [r7, #6]
 8001f74:	4413      	add	r3, r2
 8001f76:	b298      	uxth	r0, r3
 8001f78:	893a      	ldrh	r2, [r7, #8]
 8001f7a:	8c3b      	ldrh	r3, [r7, #32]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	893a      	ldrh	r2, [r7, #8]
 8001f82:	8979      	ldrh	r1, [r7, #10]
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4603      	mov	r3, r0
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f001 fb5c 	bl	8003646 <u8g2_IsIntersection>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d017      	beq.n	8001fc4 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001f94:	e012      	b.n	8001fbc <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001f96:	88f8      	ldrh	r0, [r7, #6]
 8001f98:	893a      	ldrh	r2, [r7, #8]
 8001f9a:	8979      	ldrh	r1, [r7, #10]
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff ff61 	bl	8001e6a <u8g2_DrawHXBM>
    bitmap += blen;
 8001fa8:	8afb      	ldrh	r3, [r7, #22]
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	4413      	add	r3, r2
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001fb0:	893b      	ldrh	r3, [r7, #8]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	813b      	strh	r3, [r7, #8]
    h--;
 8001fb6:	8c3b      	ldrh	r3, [r7, #32]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001fbc:	8c3b      	ldrh	r3, [r7, #32]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1e9      	bne.n	8001f96 <u8g2_DrawXBM+0x50>
 8001fc2:	e000      	b.n	8001fc6 <u8g2_DrawXBM+0x80>
    return;
 8001fc4:	bf00      	nop
  }
}
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4603      	mov	r3, r0
 8001fdc:	817b      	strh	r3, [r7, #10]
 8001fde:	460b      	mov	r3, r1
 8001fe0:	813b      	strh	r3, [r7, #8]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001fe6:	897a      	ldrh	r2, [r7, #10]
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	4413      	add	r3, r2
 8001fec:	b298      	uxth	r0, r3
 8001fee:	893a      	ldrh	r2, [r7, #8]
 8001ff0:	8b3b      	ldrh	r3, [r7, #24]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	893a      	ldrh	r2, [r7, #8]
 8001ff8:	8979      	ldrh	r1, [r7, #10]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f001 fb21 	bl	8003646 <u8g2_IsIntersection>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800200a:	e00d      	b.n	8002028 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	893a      	ldrh	r2, [r7, #8]
 8002010:	8979      	ldrh	r1, [r7, #10]
 8002012:	2000      	movs	r0, #0
 8002014:	9000      	str	r0, [sp, #0]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f001 f9dc 	bl	80033d4 <u8g2_DrawHVLine>
    y++;    
 800201c:	893b      	ldrh	r3, [r7, #8]
 800201e:	3301      	adds	r3, #1
 8002020:	813b      	strh	r3, [r7, #8]
    h--;
 8002022:	8b3b      	ldrh	r3, [r7, #24]
 8002024:	3b01      	subs	r3, #1
 8002026:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8002028:	8b3b      	ldrh	r3, [r7, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1ee      	bne.n	800200c <u8g2_DrawBox+0x40>
 800202e:	e000      	b.n	8002032 <u8g2_DrawBox+0x66>
    return;
 8002030:	bf00      	nop
  }
}
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af02      	add	r7, sp, #8
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	817b      	strh	r3, [r7, #10]
 800204a:	460b      	mov	r3, r1
 800204c:	813b      	strh	r3, [r7, #8]
 800204e:	4613      	mov	r3, r2
 8002050:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8002052:	897b      	ldrh	r3, [r7, #10]
 8002054:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002056:	897a      	ldrh	r2, [r7, #10]
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	4413      	add	r3, r2
 800205c:	b298      	uxth	r0, r3
 800205e:	893a      	ldrh	r2, [r7, #8]
 8002060:	8c3b      	ldrh	r3, [r7, #32]
 8002062:	4413      	add	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	893a      	ldrh	r2, [r7, #8]
 8002068:	8979      	ldrh	r1, [r7, #10]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	4603      	mov	r3, r0
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f001 fae9 	bl	8003646 <u8g2_IsIntersection>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d037      	beq.n	80020ea <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	893a      	ldrh	r2, [r7, #8]
 800207e:	8979      	ldrh	r1, [r7, #10]
 8002080:	2000      	movs	r0, #0
 8002082:	9000      	str	r0, [sp, #0]
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f001 f9a5 	bl	80033d4 <u8g2_DrawHVLine>
  if (h >= 2) {
 800208a:	8c3b      	ldrh	r3, [r7, #32]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d92d      	bls.n	80020ec <u8g2_DrawFrame+0xb4>
    h-=2;
 8002090:	8c3b      	ldrh	r3, [r7, #32]
 8002092:	3b02      	subs	r3, #2
 8002094:	843b      	strh	r3, [r7, #32]
    y++;
 8002096:	893b      	ldrh	r3, [r7, #8]
 8002098:	3301      	adds	r3, #1
 800209a:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 800209c:	8c3b      	ldrh	r3, [r7, #32]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d01a      	beq.n	80020d8 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80020a2:	8c3b      	ldrh	r3, [r7, #32]
 80020a4:	893a      	ldrh	r2, [r7, #8]
 80020a6:	8979      	ldrh	r1, [r7, #10]
 80020a8:	2001      	movs	r0, #1
 80020aa:	9000      	str	r0, [sp, #0]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f001 f991 	bl	80033d4 <u8g2_DrawHVLine>
      x+=w;
 80020b2:	897a      	ldrh	r2, [r7, #10]
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	4413      	add	r3, r2
 80020b8:	817b      	strh	r3, [r7, #10]
      x--;
 80020ba:	897b      	ldrh	r3, [r7, #10]
 80020bc:	3b01      	subs	r3, #1
 80020be:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80020c0:	8c3b      	ldrh	r3, [r7, #32]
 80020c2:	893a      	ldrh	r2, [r7, #8]
 80020c4:	8979      	ldrh	r1, [r7, #10]
 80020c6:	2001      	movs	r0, #1
 80020c8:	9000      	str	r0, [sp, #0]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f001 f982 	bl	80033d4 <u8g2_DrawHVLine>
      y+=h;
 80020d0:	893a      	ldrh	r2, [r7, #8]
 80020d2:	8c3b      	ldrh	r3, [r7, #32]
 80020d4:	4413      	add	r3, r2
 80020d6:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	893a      	ldrh	r2, [r7, #8]
 80020dc:	8af9      	ldrh	r1, [r7, #22]
 80020de:	2000      	movs	r0, #0
 80020e0:	9000      	str	r0, [sp, #0]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f001 f976 	bl	80033d4 <u8g2_DrawHVLine>
 80020e8:	e000      	b.n	80020ec <u8g2_DrawFrame+0xb4>
    return;
 80020ea:	bf00      	nop
  }
}
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	7c1b      	ldrb	r3, [r3, #16]
 8002100:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002108:	461a      	mov	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f00a fea7 	bl	800ce74 <memset>
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af02      	add	r7, sp, #8
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
 800213a:	4613      	mov	r3, r2
 800213c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	7c1b      	ldrb	r3, [r3, #16]
 8002144:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	b29b      	uxth	r3, r3
 8002154:	89ba      	ldrh	r2, [r7, #12]
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800215c:	89bb      	ldrh	r3, [r7, #12]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8002162:	89bb      	ldrh	r3, [r7, #12]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	4413      	add	r3, r2
 8002168:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800216a:	7bf9      	ldrb	r1, [r7, #15]
 800216c:	78ba      	ldrb	r2, [r7, #2]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	460b      	mov	r3, r1
 8002174:	2100      	movs	r1, #0
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f001 ff88 	bl	800408c <u8x8_DrawTile>
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002196:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800219e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	7c5b      	ldrb	r3, [r3, #17]
 80021a6:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80021a8:	7bba      	ldrb	r2, [r7, #14]
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffbd 	bl	800212e <u8g2_send_tile_row>
    src_row++;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	3301      	adds	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80021ba:	7bbb      	ldrb	r3, [r7, #14]
 80021bc:	3301      	adds	r3, #1
 80021be:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	7b7b      	ldrb	r3, [r7, #13]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d203      	bcs.n	80021d0 <u8g2_send_buffer+0x4c>
 80021c8:	7bba      	ldrb	r2, [r7, #14]
 80021ca:	7b3b      	ldrb	r3, [r7, #12]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d3eb      	bcc.n	80021a8 <u8g2_send_buffer+0x24>
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ffcf 	bl	8002184 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f001 ffb2 	bl	8004150 <u8x8_RefreshDisplay>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff5b 	bl	80020f2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800223c:	2100      	movs	r1, #0
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffd8 	bl	80021f4 <u8g2_SetBufferCurrTileRow>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff95 	bl	8002184 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002260:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	4413      	add	r3, r2
 800226c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	7c5b      	ldrb	r3, [r3, #17]
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	429a      	cmp	r2, r3
 8002278:	d304      	bcc.n	8002284 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f001 ff68 	bl	8004150 <u8x8_RefreshDisplay>
    return 0;
 8002280:	2300      	movs	r3, #0
 8002282:	e00d      	b.n	80022a0 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff2f 	bl	80020f2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	4619      	mov	r1, r3
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ffab 	bl	80021f4 <u8g2_SetBufferCurrTileRow>
  return 1;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 80022c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80022c4:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 80022c6:	2308      	movs	r3, #8
 80022c8:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80022d8:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80022e0:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80022e8:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 80022f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022f6:	3301      	adds	r3, #1
 80022f8:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 80022fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022fc:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 80022fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002300:	3301      	adds	r3, #1
 8002302:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 8002304:	897b      	ldrh	r3, [r7, #10]
 8002306:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 8002308:	8b7a      	ldrh	r2, [r7, #26]
 800230a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 8002310:	8b7a      	ldrh	r2, [r7, #26]
 8002312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 8002318:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800231a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800231c:	4413      	add	r3, r2
 800231e:	b29b      	uxth	r3, r3
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	8c3b      	ldrh	r3, [r7, #32]
 8002326:	4413      	add	r3, r2
 8002328:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 800232a:	893b      	ldrh	r3, [r7, #8]
 800232c:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	4798      	blx	r3
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	8afb      	ldrh	r3, [r7, #22]
 800233c:	4413      	add	r3, r2
 800233e:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8002340:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002344:	b29b      	uxth	r3, r3
 8002346:	8afa      	ldrh	r2, [r7, #22]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 800234c:	8afa      	ldrh	r2, [r7, #22]
 800234e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8002354:	8afa      	ldrh	r2, [r7, #22]
 8002356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 800235c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002360:	b21a      	sxth	r2, r3
 8002362:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002366:	b21b      	sxth	r3, r3
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	b21b      	sxth	r3, r3
 800236c:	b29a      	uxth	r2, r3
 800236e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002372:	440b      	add	r3, r1
 8002374:	b29b      	uxth	r3, r3
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	b29b      	uxth	r3, r3
 800237a:	4413      	add	r3, r2
 800237c:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 800237e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	d067      	beq.n	8002454 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8002384:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002386:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002388:	429a      	cmp	r2, r3
 800238a:	d109      	bne.n	80023a0 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 800238c:	7f7b      	ldrb	r3, [r7, #29]
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	4619      	mov	r1, r3
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f001 f90a 	bl	80035b4 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 80023a0:	8b38      	ldrh	r0, [r7, #24]
 80023a2:	8afa      	ldrh	r2, [r7, #22]
 80023a4:	8b79      	ldrh	r1, [r7, #26]
 80023a6:	8abb      	ldrh	r3, [r7, #20]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	4603      	mov	r3, r0
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff fe43 	bl	8002038 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 80023b2:	7f7b      	ldrb	r3, [r7, #29]
 80023b4:	4619      	mov	r1, r3
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f001 f8fc 	bl	80035b4 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	f003 0318 	and.w	r3, r3, #24
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d042      	beq.n	800244c <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 80023c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d13c      	bne.n	800244c <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 80023d2:	88fb      	ldrh	r3, [r7, #6]
 80023d4:	10db      	asrs	r3, r3, #3
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 80023de:	8a7b      	ldrh	r3, [r7, #18]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 80023e4:	2300      	movs	r3, #0
 80023e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80023e8:	e02c      	b.n	8002444 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 80023ea:	8b7a      	ldrh	r2, [r7, #26]
 80023ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023ee:	4413      	add	r3, r2
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	8a7b      	ldrh	r3, [r7, #18]
 80023f4:	4413      	add	r3, r2
 80023f6:	b299      	uxth	r1, r3
 80023f8:	8afa      	ldrh	r2, [r7, #22]
 80023fa:	8abb      	ldrh	r3, [r7, #20]
 80023fc:	4413      	add	r3, r2
 80023fe:	b29a      	uxth	r2, r3
 8002400:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002402:	4413      	add	r3, r2
 8002404:	b29a      	uxth	r2, r3
 8002406:	8a7b      	ldrh	r3, [r7, #18]
 8002408:	4413      	add	r3, r2
 800240a:	b29a      	uxth	r2, r3
 800240c:	8b3b      	ldrh	r3, [r7, #24]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f001 f86b 	bl	80034ea <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8002414:	8b7a      	ldrh	r2, [r7, #26]
 8002416:	8b3b      	ldrh	r3, [r7, #24]
 8002418:	4413      	add	r3, r2
 800241a:	b29a      	uxth	r2, r3
 800241c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800241e:	4413      	add	r3, r2
 8002420:	b29a      	uxth	r2, r3
 8002422:	8a7b      	ldrh	r3, [r7, #18]
 8002424:	4413      	add	r3, r2
 8002426:	b299      	uxth	r1, r3
 8002428:	8afa      	ldrh	r2, [r7, #22]
 800242a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800242c:	4413      	add	r3, r2
 800242e:	b29a      	uxth	r2, r3
 8002430:	8a7b      	ldrh	r3, [r7, #18]
 8002432:	4413      	add	r3, r2
 8002434:	b29a      	uxth	r2, r3
 8002436:	8abb      	ldrh	r3, [r7, #20]
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f001 f86f 	bl	800351c <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 800243e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002440:	3301      	adds	r3, #1
 8002442:	847b      	strh	r3, [r7, #34]	; 0x22
 8002444:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002448:	429a      	cmp	r2, r3
 800244a:	d3ce      	bcc.n	80023ea <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 800244c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800244e:	3b01      	subs	r3, #1
 8002450:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8002452:	e757      	b.n	8002304 <u8g2_DrawButtonFrame+0x5c>
      break;
 8002454:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d011      	beq.n	8002484 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8002460:	2102      	movs	r1, #2
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f001 f8a6 	bl	80035b4 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8002468:	8b38      	ldrh	r0, [r7, #24]
 800246a:	8afa      	ldrh	r2, [r7, #22]
 800246c:	8b79      	ldrh	r1, [r7, #26]
 800246e:	8abb      	ldrh	r3, [r7, #20]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4603      	mov	r3, r0
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7ff fda9 	bl	8001fcc <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 800247a:	7f7b      	ldrb	r3, [r7, #29]
 800247c:	4619      	mov	r1, r3
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f001 f898 	bl	80035b4 <u8g2_SetDrawColor>
  }
}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af04      	add	r7, sp, #16
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	461a      	mov	r2, r3
 800249a:	4603      	mov	r3, r0
 800249c:	817b      	strh	r3, [r7, #10]
 800249e:	460b      	mov	r3, r1
 80024a0:	813b      	strh	r3, [r7, #8]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 80024a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 ff11 	bl	80032d0 <u8g2_GetUTF8Width>
 80024ae:	4603      	mov	r3, r0
 80024b0:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 80024b2:	2300      	movs	r3, #0
 80024b4:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 80024c0:	8afb      	ldrh	r3, [r7, #22]
 80024c2:	3301      	adds	r3, #1
 80024c4:	0fda      	lsrs	r2, r3, #31
 80024c6:	4413      	add	r3, r2
 80024c8:	105b      	asrs	r3, r3, #1
 80024ca:	425b      	negs	r3, r3
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	897b      	ldrh	r3, [r7, #10]
 80024d0:	4413      	add	r3, r2
 80024d2:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 80024d4:	8afa      	ldrh	r2, [r7, #22]
 80024d6:	8c3b      	ldrh	r3, [r7, #32]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d20d      	bcs.n	80024f8 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 80024e6:	8c3a      	ldrh	r2, [r7, #32]
 80024e8:	8afb      	ldrh	r3, [r7, #22]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	0fda      	lsrs	r2, r3, #31
 80024ee:	4413      	add	r3, r2
 80024f0:	105b      	asrs	r3, r3, #1
 80024f2:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 80024f4:	8c3b      	ldrh	r3, [r7, #32]
 80024f6:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 80024f8:	2101      	movs	r1, #1
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fcda 	bl	8002eb4 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fd92 	bl	8003030 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 800250c:	897a      	ldrh	r2, [r7, #10]
 800250e:	8abb      	ldrh	r3, [r7, #20]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	b299      	uxth	r1, r3
 8002514:	88f8      	ldrh	r0, [r7, #6]
 8002516:	893a      	ldrh	r2, [r7, #8]
 8002518:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800251a:	9302      	str	r3, [sp, #8]
 800251c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	8afb      	ldrh	r3, [r7, #22]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	4603      	mov	r3, r0
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7ff febe 	bl	80022a8 <u8g2_DrawButtonFrame>
  
}
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fe71 	bl	8002224 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff fe82 	bl	800224c <u8g2_NextPage>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f9      	bne.n	8002542 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800254e:	2100      	movs	r1, #0
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff fe4f 	bl	80021f4 <u8g2_SetBufferCurrTileRow>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2208      	movs	r2, #8
 800256c:	701a      	strb	r2, [r3, #0]
  return buf;
 800256e:	4b03      	ldr	r3, [pc, #12]	; (800257c <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	2000053c 	.word	0x2000053c

08002580 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 8002596:	490c      	ldr	r1, [pc, #48]	; (80025c8 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f001 fe39 	bl	8004210 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 800259e:	f107 0313 	add.w	r3, r7, #19
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ffdc 	bl	8002560 <u8g2_m_24_8_f>
 80025a8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80025aa:	7cfa      	ldrb	r2, [r7, #19]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 80025b2:	6979      	ldr	r1, [r7, #20]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f001 f92f 	bl	8003818 <u8g2_SetupBuffer>
}
 80025ba:	bf00      	nop
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	08003da9 	.word	0x08003da9
 80025c8:	08003f89 	.word	0x08003f89
 80025cc:	0800369d 	.word	0x0800369d

080025d0 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
	font += offset;
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	781b      	ldrb	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	81fb      	strh	r3, [r7, #14]
	font++;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3301      	adds	r3, #1
 8002610:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b29a      	uxth	r2, r3
 800261e:	89fb      	ldrh	r3, [r7, #14]
 8002620:	4413      	add	r3, r2
 8002622:	81fb      	strh	r3, [r7, #14]
	return pos;
 8002624:	89fb      	ldrh	r3, [r7, #14]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800263a:	2100      	movs	r1, #0
 800263c:	6838      	ldr	r0, [r7, #0]
 800263e:	f7ff ffc7 	bl	80025d0 <u8g2_font_get_byte>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800264a:	2101      	movs	r1, #1
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	f7ff ffbf 	bl	80025d0 <u8g2_font_get_byte>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800265a:	2102      	movs	r1, #2
 800265c:	6838      	ldr	r0, [r7, #0]
 800265e:	f7ff ffb7 	bl	80025d0 <u8g2_font_get_byte>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800266a:	2103      	movs	r1, #3
 800266c:	6838      	ldr	r0, [r7, #0]
 800266e:	f7ff ffaf 	bl	80025d0 <u8g2_font_get_byte>
 8002672:	4603      	mov	r3, r0
 8002674:	461a      	mov	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800267a:	2104      	movs	r1, #4
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	f7ff ffa7 	bl	80025d0 <u8g2_font_get_byte>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800268a:	2105      	movs	r1, #5
 800268c:	6838      	ldr	r0, [r7, #0]
 800268e:	f7ff ff9f 	bl	80025d0 <u8g2_font_get_byte>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800269a:	2106      	movs	r1, #6
 800269c:	6838      	ldr	r0, [r7, #0]
 800269e:	f7ff ff97 	bl	80025d0 <u8g2_font_get_byte>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80026aa:	2107      	movs	r1, #7
 80026ac:	6838      	ldr	r0, [r7, #0]
 80026ae:	f7ff ff8f 	bl	80025d0 <u8g2_font_get_byte>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80026ba:	2108      	movs	r1, #8
 80026bc:	6838      	ldr	r0, [r7, #0]
 80026be:	f7ff ff87 	bl	80025d0 <u8g2_font_get_byte>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80026ca:	2109      	movs	r1, #9
 80026cc:	6838      	ldr	r0, [r7, #0]
 80026ce:	f7ff ff7f 	bl	80025d0 <u8g2_font_get_byte>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b25a      	sxtb	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80026da:	210a      	movs	r1, #10
 80026dc:	6838      	ldr	r0, [r7, #0]
 80026de:	f7ff ff77 	bl	80025d0 <u8g2_font_get_byte>
 80026e2:	4603      	mov	r3, r0
 80026e4:	b25a      	sxtb	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 80026ea:	210b      	movs	r1, #11
 80026ec:	6838      	ldr	r0, [r7, #0]
 80026ee:	f7ff ff6f 	bl	80025d0 <u8g2_font_get_byte>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b25a      	sxtb	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 80026fa:	210c      	movs	r1, #12
 80026fc:	6838      	ldr	r0, [r7, #0]
 80026fe:	f7ff ff67 	bl	80025d0 <u8g2_font_get_byte>
 8002702:	4603      	mov	r3, r0
 8002704:	b25a      	sxtb	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800270a:	210d      	movs	r1, #13
 800270c:	6838      	ldr	r0, [r7, #0]
 800270e:	f7ff ff5f 	bl	80025d0 <u8g2_font_get_byte>
 8002712:	4603      	mov	r3, r0
 8002714:	b25a      	sxtb	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 800271a:	210e      	movs	r1, #14
 800271c:	6838      	ldr	r0, [r7, #0]
 800271e:	f7ff ff57 	bl	80025d0 <u8g2_font_get_byte>
 8002722:	4603      	mov	r3, r0
 8002724:	b25a      	sxtb	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800272a:	210f      	movs	r1, #15
 800272c:	6838      	ldr	r0, [r7, #0]
 800272e:	f7ff ff4f 	bl	80025d0 <u8g2_font_get_byte>
 8002732:	4603      	mov	r3, r0
 8002734:	b25a      	sxtb	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 800273a:	2110      	movs	r1, #16
 800273c:	6838      	ldr	r0, [r7, #0]
 800273e:	f7ff ff47 	bl	80025d0 <u8g2_font_get_byte>
 8002742:	4603      	mov	r3, r0
 8002744:	b25a      	sxtb	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800274a:	2111      	movs	r1, #17
 800274c:	6838      	ldr	r0, [r7, #0]
 800274e:	f7ff ff50 	bl	80025f2 <u8g2_font_get_word>
 8002752:	4603      	mov	r3, r0
 8002754:	461a      	mov	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 800275a:	2113      	movs	r1, #19
 800275c:	6838      	ldr	r0, [r7, #0]
 800275e:	f7ff ff48 	bl	80025f2 <u8g2_font_get_word>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 800276a:	2115      	movs	r1, #21
 800276c:	6838      	ldr	r0, [r7, #0]
 800276e:	f7ff ff40 	bl	80025f2 <u8g2_font_get_word>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	82da      	strh	r2, [r3, #22]
#endif
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8002782:	b480      	push	{r7}
 8002784:	b085      	sub	sp, #20
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	460b      	mov	r3, r1
 800278c:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7b1b      	ldrb	r3, [r3, #12]
 8002792:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	7b7b      	ldrb	r3, [r7, #13]
 80027a0:	fa42 f303 	asr.w	r3, r2, r3
 80027a4:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 80027a6:	7b7b      	ldrb	r3, [r7, #13]
 80027a8:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 80027aa:	7bba      	ldrb	r2, [r7, #14]
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	4413      	add	r3, r2
 80027b0:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 80027b2:	7bbb      	ldrb	r3, [r7, #14]
 80027b4:	2b07      	cmp	r3, #7
 80027b6:	d91a      	bls.n	80027ee <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 80027b8:	2308      	movs	r3, #8
 80027ba:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 80027bc:	7b3a      	ldrb	r2, [r7, #12]
 80027be:	7b7b      	ldrb	r3, [r7, #13]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	7b3b      	ldrb	r3, [r7, #12]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	b25a      	sxtb	r2, r3
 80027de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 80027e8:	7bbb      	ldrb	r3, [r7, #14]
 80027ea:	3b08      	subs	r3, #8
 80027ec:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	4013      	ands	r3, r2
 8002802:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7bba      	ldrb	r2, [r7, #14]
 8002808:	731a      	strb	r2, [r3, #12]
	return val;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	460b      	mov	r3, r1
 8002820:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	4619      	mov	r1, r3
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffab 	bl	8002782 <u8g2_font_decode_get_unsigned_bits>
 800282c:	4603      	mov	r3, r0
 800282e:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8002830:	2301      	movs	r3, #1
 8002832:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	3b01      	subs	r3, #1
 8002838:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 800283a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	73bb      	strb	r3, [r7, #14]
	v -= d;
 8002846:	7bfa      	ldrb	r2, [r7, #15]
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	73fb      	strb	r3, [r7, #15]
	return v;
 8002850:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 800285c:	b490      	push	{r4, r7}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4604      	mov	r4, r0
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	461a      	mov	r2, r3
 800286a:	4623      	mov	r3, r4
 800286c:	80fb      	strh	r3, [r7, #6]
 800286e:	4603      	mov	r3, r0
 8002870:	717b      	strb	r3, [r7, #5]
 8002872:	460b      	mov	r3, r1
 8002874:	713b      	strb	r3, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d014      	beq.n	80028aa <u8g2_add_vector_y+0x4e>
 8002880:	2b02      	cmp	r3, #2
 8002882:	dc19      	bgt.n	80028b8 <u8g2_add_vector_y+0x5c>
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <u8g2_add_vector_y+0x32>
 8002888:	2b01      	cmp	r3, #1
 800288a:	d007      	beq.n	800289c <u8g2_add_vector_y+0x40>
 800288c:	e014      	b.n	80028b8 <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 800288e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002892:	b29a      	uxth	r2, r3
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	4413      	add	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
		break;
 800289a:	e014      	b.n	80028c6 <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 800289c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	4413      	add	r3, r2
 80028a6:	80fb      	strh	r3, [r7, #6]
		break;
 80028a8:	e00d      	b.n	80028c6 <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 80028aa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	80fb      	strh	r3, [r7, #6]
		break;
 80028b6:	e006      	b.n	80028c6 <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 80028b8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	88fa      	ldrh	r2, [r7, #6]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	80fb      	strh	r3, [r7, #6]
		break;
 80028c4:	bf00      	nop
	}
	return dy;
 80028c6:	88fb      	ldrh	r3, [r7, #6]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc90      	pop	{r4, r7}
 80028d0:	4770      	bx	lr

080028d2 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 80028d2:	b490      	push	{r4, r7}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4604      	mov	r4, r0
 80028da:	4608      	mov	r0, r1
 80028dc:	4611      	mov	r1, r2
 80028de:	461a      	mov	r2, r3
 80028e0:	4623      	mov	r3, r4
 80028e2:	80fb      	strh	r3, [r7, #6]
 80028e4:	4603      	mov	r3, r0
 80028e6:	717b      	strb	r3, [r7, #5]
 80028e8:	460b      	mov	r3, r1
 80028ea:	713b      	strb	r3, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d014      	beq.n	8002920 <u8g2_add_vector_x+0x4e>
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	dc19      	bgt.n	800292e <u8g2_add_vector_x+0x5c>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <u8g2_add_vector_x+0x32>
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d007      	beq.n	8002912 <u8g2_add_vector_x+0x40>
 8002902:	e014      	b.n	800292e <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8002904:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002908:	b29a      	uxth	r2, r3
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	4413      	add	r3, r2
 800290e:	80fb      	strh	r3, [r7, #6]
		break;
 8002910:	e014      	b.n	800293c <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8002912:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002916:	b29b      	uxth	r3, r3
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	80fb      	strh	r3, [r7, #6]
		break;
 800291e:	e00d      	b.n	800293c <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8002920:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002924:	b29b      	uxth	r3, r3
 8002926:	88fa      	ldrh	r2, [r7, #6]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	80fb      	strh	r3, [r7, #6]
		break;
 800292c:	e006      	b.n	800293c <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 800292e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002932:	b29a      	uxth	r2, r3
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	4413      	add	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
		break;
 800293a:	bf00      	nop
	}
	return dx;
 800293c:	88fb      	ldrh	r3, [r7, #6]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bc90      	pop	{r4, r7}
 8002946:	4770      	bx	lr

08002948 <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]
 8002954:	4613      	mov	r3, r2
 8002956:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3360      	adds	r3, #96	; 0x60
 800295c:	613b      	str	r3, [r7, #16]

	cnt = len;
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002968:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002970:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002978:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	7d7b      	ldrb	r3, [r7, #21]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 8002986:	7dfa      	ldrb	r2, [r7, #23]
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	429a      	cmp	r2, r3
 800298c:	d201      	bcs.n	8002992 <u8g2_font_decode_len+0x4a>
			current = cnt;
 800298e:	7dfb      	ldrb	r3, [r7, #23]
 8002990:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	889b      	ldrh	r3, [r3, #4]
 8002996:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	88db      	ldrh	r3, [r3, #6]
 800299c:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800299e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80029a2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	7c1b      	ldrb	r3, [r3, #16]
 80029aa:	89b8      	ldrh	r0, [r7, #12]
 80029ac:	f7ff ff91 	bl	80028d2 <u8g2_add_vector_x>
 80029b0:	4603      	mov	r3, r0
 80029b2:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80029b4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80029b8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	7c1b      	ldrb	r3, [r3, #16]
 80029c0:	8978      	ldrh	r0, [r7, #10]
 80029c2:	f7ff ff4b 	bl	800285c <u8g2_add_vector_y>
 80029c6:	4603      	mov	r3, r0
 80029c8:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 80029ca:	78bb      	ldrb	r3, [r7, #2]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d010      	beq.n	80029f2 <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	7b9a      	ldrb	r2, [r3, #14]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 80029da:	7dbb      	ldrb	r3, [r7, #22]
 80029dc:	b298      	uxth	r0, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	7c1b      	ldrb	r3, [r3, #16]
 80029e2:	897a      	ldrh	r2, [r7, #10]
 80029e4:	89b9      	ldrh	r1, [r7, #12]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	4603      	mov	r3, r0
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fcf2 	bl	80033d4 <u8g2_DrawHVLine>
 80029f0:	e013      	b.n	8002a1a <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	7b5b      	ldrb	r3, [r3, #13]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10f      	bne.n	8002a1a <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	7bda      	ldrb	r2, [r3, #15]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8002a04:	7dbb      	ldrb	r3, [r7, #22]
 8002a06:	b298      	uxth	r0, r3
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	7c1b      	ldrb	r3, [r3, #16]
 8002a0c:	897a      	ldrh	r2, [r7, #10]
 8002a0e:	89b9      	ldrh	r1, [r7, #12]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	4603      	mov	r3, r0
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fcdd 	bl	80033d4 <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 8002a1a:	7dfa      	ldrb	r2, [r7, #23]
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d309      	bcc.n	8002a36 <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 8002a22:	7dfa      	ldrb	r2, [r7, #23]
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	757b      	strb	r3, [r7, #21]
		ly++;
 8002a2e:	7d3b      	ldrb	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8002a34:	e79d      	b.n	8002972 <u8g2_font_decode_len+0x2a>
			break;
 8002a36:	bf00      	nop
	}
	lx += cnt;
 8002a38:	7d7a      	ldrb	r2, [r7, #21]
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8002a40:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8002a48:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	725a      	strb	r2, [r3, #9]

}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3360      	adds	r3, #96	; 0x60
 8002a66:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fe80 	bl	8002782 <u8g2_font_decode_get_unsigned_bits>
 8002a82:	4603      	mov	r3, r0
 8002a84:	b25a      	sxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002a90:	4619      	mov	r1, r3
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff fe75 	bl	8002782 <u8g2_font_decode_get_unsigned_bits>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	b25a      	sxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	7b9b      	ldrb	r3, [r3, #14]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	73da      	strb	r2, [r3, #15]
}
 8002abe:	bf00      	nop
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 8002ad8:	6839      	ldr	r1, [r7, #0]
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffbc 	bl	8002a58 <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8002ae6:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002aee:	4619      	mov	r1, r3
 8002af0:	6978      	ldr	r0, [r7, #20]
 8002af2:	f7ff fe90 	bl	8002816 <u8g2_font_decode_get_signed_bits>
 8002af6:	4603      	mov	r3, r0
 8002af8:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002b00:	4619      	mov	r1, r3
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff fe87 	bl	8002816 <u8g2_font_decode_get_signed_bits>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002b12:	4619      	mov	r1, r3
 8002b14:	6978      	ldr	r0, [r7, #20]
 8002b16:	f7ff fe7e 	bl	8002816 <u8g2_font_decode_get_signed_bits>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f340 80d7 	ble.w	8002cd8 <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	8898      	ldrh	r0, [r3, #4]
 8002b2e:	7cfa      	ldrb	r2, [r7, #19]
 8002b30:	7c7b      	ldrb	r3, [r7, #17]
 8002b32:	4413      	add	r3, r2
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	425b      	negs	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	b25a      	sxtb	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	7c1b      	ldrb	r3, [r3, #16]
 8002b40:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002b44:	f7ff fec5 	bl	80028d2 <u8g2_add_vector_x>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	88d8      	ldrh	r0, [r3, #6]
 8002b54:	7cfa      	ldrb	r2, [r7, #19]
 8002b56:	7c7b      	ldrb	r3, [r7, #17]
 8002b58:	4413      	add	r3, r2
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	425b      	negs	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	b25a      	sxtb	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	7c1b      	ldrb	r3, [r3, #16]
 8002b66:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002b6a:	f7ff fe77 	bl	800285c <u8g2_add_vector_y>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	889b      	ldrh	r3, [r3, #4]
 8002b7a:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	88db      	ldrh	r3, [r3, #6]
 8002b80:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 8002b82:	8bfb      	ldrh	r3, [r7, #30]
 8002b84:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 8002b86:	8b7b      	ldrh	r3, [r7, #26]
 8002b88:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	7c1b      	ldrb	r3, [r3, #16]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d85a      	bhi.n	8002c48 <u8g2_font_decode_glyph+0x180>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <u8g2_font_decode_glyph+0xd0>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bc5 	.word	0x08002bc5
 8002ba0:	08002bed 	.word	0x08002bed
 8002ba4:	08002c21 	.word	0x08002c21
			case 0:
				x1 += decode->glyph_width;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	8bbb      	ldrh	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 8002bb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	8b3b      	ldrh	r3, [r7, #24]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	833b      	strh	r3, [r7, #24]
				break;
 8002bc2:	e041      	b.n	8002c48 <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 8002bc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	8bfa      	ldrh	r2, [r7, #30]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002bd0:	8bfb      	ldrh	r3, [r7, #30]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002bd6:	8bbb      	ldrh	r3, [r7, #28]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	8b3b      	ldrh	r3, [r7, #24]
 8002be6:	4413      	add	r3, r2
 8002be8:	833b      	strh	r3, [r7, #24]
				break;
 8002bea:	e02d      	b.n	8002c48 <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	8bfa      	ldrh	r2, [r7, #30]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002bfa:	8bfb      	ldrh	r3, [r7, #30]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002c00:	8bbb      	ldrh	r3, [r7, #28]
 8002c02:	3301      	adds	r3, #1
 8002c04:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 8002c06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	8b7a      	ldrh	r2, [r7, #26]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002c12:	8b7b      	ldrh	r3, [r7, #26]
 8002c14:	3301      	adds	r3, #1
 8002c16:	837b      	strh	r3, [r7, #26]
				y1++;
 8002c18:	8b3b      	ldrh	r3, [r7, #24]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	833b      	strh	r3, [r7, #24]
				break;
 8002c1e:	e013      	b.n	8002c48 <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 8002c20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	8bbb      	ldrh	r3, [r7, #28]
 8002c28:	4413      	add	r3, r2
 8002c2a:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	8b7a      	ldrh	r2, [r7, #26]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002c3a:	8b7b      	ldrh	r3, [r7, #26]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	837b      	strh	r3, [r7, #26]
				y1++;
 8002c40:	8b3b      	ldrh	r3, [r7, #24]
 8002c42:	3301      	adds	r3, #1
 8002c44:	833b      	strh	r3, [r7, #24]
				break;
 8002c46:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8002c48:	8bb8      	ldrh	r0, [r7, #28]
 8002c4a:	8b7a      	ldrh	r2, [r7, #26]
 8002c4c:	8bf9      	ldrh	r1, [r7, #30]
 8002c4e:	8b3b      	ldrh	r3, [r7, #24]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	4603      	mov	r3, r0
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fcf6 	bl	8003646 <u8g2_IsIntersection>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <u8g2_font_decode_glyph+0x19e>
				return d;
 8002c60:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002c64:	e03a      	b.n	8002cdc <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002c78:	4619      	mov	r1, r3
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f7ff fd81 	bl	8002782 <u8g2_font_decode_get_unsigned_bits>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6978      	ldr	r0, [r7, #20]
 8002c8e:	f7ff fd78 	bl	8002782 <u8g2_font_decode_get_unsigned_bits>
 8002c92:	4603      	mov	r3, r0
 8002c94:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff fe53 	bl	8002948 <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 8002ca2:	7bbb      	ldrb	r3, [r7, #14]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff fe4d 	bl	8002948 <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 8002cae:	2101      	movs	r1, #1
 8002cb0:	6978      	ldr	r0, [r7, #20]
 8002cb2:	f7ff fd66 	bl	8002782 <u8g2_font_decode_get_unsigned_bits>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ec      	bne.n	8002c96 <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002cc2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	dd00      	ble.n	8002ccc <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002cca:	e7d2      	b.n	8002c72 <u8g2_font_decode_glyph+0x1aa>
				break;
 8002ccc:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	7b9a      	ldrb	r2, [r3, #14]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 8002cd8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3317      	adds	r3, #23
 8002cfa:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 8002cfc:	887b      	ldrh	r3, [r7, #2]
 8002cfe:	2bff      	cmp	r3, #255	; 0xff
 8002d00:	d82a      	bhi.n	8002d58 <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 8002d02:	887b      	ldrh	r3, [r7, #2]
 8002d04:	2b60      	cmp	r3, #96	; 0x60
 8002d06:	d907      	bls.n	8002d18 <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002d0e:	461a      	mov	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	4413      	add	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e009      	b.n	8002d2c <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d906      	bls.n	8002d2c <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002d24:	461a      	mov	r2, r3
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	4413      	add	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d04e      	beq.n	8002dd4 <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	887a      	ldrh	r2, [r7, #2]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d102      	bne.n	8002d48 <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	3302      	adds	r3, #2
 8002d46:	e049      	b.n	8002ddc <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4413      	add	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002d56:	e7e9      	b.n	8002d2c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002d5e:	461a      	mov	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	4413      	add	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	6938      	ldr	r0, [r7, #16]
 8002d6e:	f7ff fc40 	bl	80025f2 <u8g2_font_get_word>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461a      	mov	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	4413      	add	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	6938      	ldr	r0, [r7, #16]
 8002d80:	f7ff fc37 	bl	80025f2 <u8g2_font_get_word>
 8002d84:	4603      	mov	r3, r0
 8002d86:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 8002d8e:	89fa      	ldrh	r2, [r7, #14]
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d3e9      	bcc.n	8002d6a <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 8002d9c:	89fb      	ldrh	r3, [r7, #14]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	89fb      	ldrh	r3, [r7, #14]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002db0:	89fb      	ldrh	r3, [r7, #14]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 8002db6:	89fa      	ldrh	r2, [r7, #14]
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d102      	bne.n	8002dc4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3303      	adds	r3, #3
 8002dc2:	e00b      	b.n	8002ddc <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	4413      	add	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 8002dd2:	e7e0      	b.n	8002d96 <u8g2_font_get_glyph_data+0xb2>
				break;
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <u8g2_font_get_glyph_data+0xf6>
				break;
 8002dd8:	bf00      	nop
		}
	}
#endif

	return NULL;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	460b      	mov	r3, r1
 8002df8:	813b      	strh	r3, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	897a      	ldrh	r2, [r7, #10]
 8002e06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	893a      	ldrh	r2, [r7, #8]
 8002e0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	4619      	mov	r1, r3
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff ff64 	bl	8002ce4 <u8g2_font_get_glyph_data>
 8002e1c:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002e24:	6939      	ldr	r1, [r7, #16]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff fe4e 	bl	8002ac8 <u8g2_font_decode_glyph>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 8002e30:	8afb      	ldrh	r3, [r7, #22]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ff4a 	bl	8002ce4 <u8g2_font_get_glyph_data>
 8002e50:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <u8g2_GetGlyphWidth+0x22>
		return 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e027      	b.n	8002eac <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff fdfa 	bl	8002a58 <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f7ff fccf 	bl	8002816 <u8g2_font_decode_get_signed_bits>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4610      	mov	r0, r2
 8002e92:	f7ff fcc0 	bl	8002816 <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f7ff fcb6 	bl	8002816 <u8g2_font_decode_get_signed_bits>
 8002eaa:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
	...

08002ed4 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	817b      	strh	r3, [r7, #10]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	813b      	strh	r3, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d833      	bhi.n	8002f60 <u8g2_DrawGlyph+0x8c>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <u8g2_DrawGlyph+0x2c>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f25 	.word	0x08002f25
 8002f08:	08002f39 	.word	0x08002f39
 8002f0c:	08002f4d 	.word	0x08002f4d
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	4798      	blx	r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	893b      	ldrh	r3, [r7, #8]
 8002f1e:	4413      	add	r3, r2
 8002f20:	813b      	strh	r3, [r7, #8]
		break;
 8002f22:	e01d      	b.n	8002f60 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	4798      	blx	r3
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	461a      	mov	r2, r3
 8002f30:	897b      	ldrh	r3, [r7, #10]
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	817b      	strh	r3, [r7, #10]
		break;
 8002f36:	e013      	b.n	8002f60 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	4798      	blx	r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	893b      	ldrh	r3, [r7, #8]
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	813b      	strh	r3, [r7, #8]
		break;
 8002f4a:	e009      	b.n	8002f60 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	4798      	blx	r3
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	817b      	strh	r3, [r7, #10]
		break;
 8002f5e:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	893a      	ldrh	r2, [r7, #8]
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff ff3c 	bl	8002de4 <u8g2_font_draw_glyph>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop

08002f78 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	817b      	strh	r3, [r7, #10]
 8002f86:	4613      	mov	r3, r2
 8002f88:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fd86 	bl	8003a9c <u8x8_utf8_init>
	sum = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	4798      	blx	r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 8002fa6:	8abb      	ldrh	r3, [r7, #20]
 8002fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d038      	beq.n	8003022 <u8g2_draw_string+0xaa>
			break;
		str++;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 8002fb6:	8abb      	ldrh	r3, [r7, #20]
 8002fb8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d0e9      	beq.n	8002f94 <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002fc0:	8abb      	ldrh	r3, [r7, #20]
 8002fc2:	893a      	ldrh	r2, [r7, #8]
 8002fc4:	8979      	ldrh	r1, [r7, #10]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f7ff ff84 	bl	8002ed4 <u8g2_DrawGlyph>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d81e      	bhi.n	8003018 <u8g2_draw_string+0xa0>
 8002fda:	a201      	add	r2, pc, #4	; (adr r2, 8002fe0 <u8g2_draw_string+0x68>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	08002ff1 	.word	0x08002ff1
 8002fe4:	08002ffb 	.word	0x08002ffb
 8002fe8:	08003005 	.word	0x08003005
 8002fec:	0800300f 	.word	0x0800300f
			case 0:
				x += delta;
 8002ff0:	897a      	ldrh	r2, [r7, #10]
 8002ff2:	8a7b      	ldrh	r3, [r7, #18]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	817b      	strh	r3, [r7, #10]
				break;
 8002ff8:	e00e      	b.n	8003018 <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 8002ffa:	893a      	ldrh	r2, [r7, #8]
 8002ffc:	8a7b      	ldrh	r3, [r7, #18]
 8002ffe:	4413      	add	r3, r2
 8003000:	813b      	strh	r3, [r7, #8]
				break;
 8003002:	e009      	b.n	8003018 <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 8003004:	897a      	ldrh	r2, [r7, #10]
 8003006:	8a7b      	ldrh	r3, [r7, #18]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	817b      	strh	r3, [r7, #10]
				break;
 800300c:	e004      	b.n	8003018 <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 800300e:	893a      	ldrh	r2, [r7, #8]
 8003010:	8a7b      	ldrh	r3, [r7, #18]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	813b      	strh	r3, [r7, #8]
				break;
 8003016:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 8003018:	8afa      	ldrh	r2, [r7, #22]
 800301a:	8a7b      	ldrh	r3, [r7, #18]
 800301c:	4413      	add	r3, r2
 800301e:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003020:	e7b8      	b.n	8002f94 <u8g2_draw_string+0x1c>
			break;
 8003022:	bf00      	nop
		}
	}
	return sum;
 8003024:	8afb      	ldrh	r3, [r7, #22]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop

08003030 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	817b      	strh	r3, [r7, #10]
 800303e:	4613      	mov	r3, r2
 8003040:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a06      	ldr	r2, [pc, #24]	; (8003060 <u8g2_DrawUTF8+0x30>)
 8003046:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 8003048:	893a      	ldrh	r2, [r7, #8]
 800304a:	8979      	ldrh	r1, [r7, #10]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff ff92 	bl	8002f78 <u8g2_draw_string>
 8003054:	4603      	mov	r3, r0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	08003ae3 	.word	0x08003ae3

08003064 <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	2b00      	cmp	r3, #0
 8003072:	d05d      	beq.n	8003130 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003092:	2b00      	cmp	r3, #0
 8003094:	d04d      	beq.n	8003132 <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800309c:	2b01      	cmp	r3, #1
 800309e:	d11c      	bne.n	80030da <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80030ac:	429a      	cmp	r2, r3
 80030ae:	da05      	bge.n	80030bc <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80030c8:	429a      	cmp	r2, r3
 80030ca:	dd32      	ble.n	8003132 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80030d8:	e02b      	b.n	8003132 <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80030e0:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80030e8:	4619      	mov	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80030f0:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 80030f2:	429a      	cmp	r2, r3
 80030f4:	da0d      	bge.n	8003112 <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80030fc:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4413      	add	r3, r2
 8003108:	b2db      	uxtb	r3, r3
 800310a:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800311e:	429a      	cmp	r2, r3
 8003120:	dd07      	ble.n	8003132 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800312e:	e000      	b.n	8003132 <u8g2_UpdateRefHeight+0xce>
		return;
 8003130:	bf00      	nop
	}
}
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
	return 0;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr
	...

08003150 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a03      	ldr	r2, [pc, #12]	; (8003168 <u8g2_SetFontPosBaseline+0x18>)
 800315c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	0800313b 	.word	0x0800313b

0800316c <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 800317a:	81fb      	strh	r3, [r7, #14]
	tmp++;
 800317c:	89fb      	ldrh	r3, [r7, #14]
 800317e:	3301      	adds	r3, #1
 8003180:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8003182:	89fb      	ldrh	r3, [r7, #14]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
	...

08003190 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a03      	ldr	r2, [pc, #12]	; (80031a8 <u8g2_SetFontPosTop+0x18>)
 800319c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	0800316d 	.word	0x0800316d

080031ac <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d00b      	beq.n	80031d8 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3374      	adds	r3, #116	; 0x74
 80031ca:	6839      	ldr	r1, [r7, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fa2f 	bl	8002630 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ff46 	bl	8003064 <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 80031ea:	23c0      	movs	r3, #192	; 0xc0
 80031ec:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fc50 	bl	8003a9c <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	4611      	mov	r1, r2
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
 8003212:	4603      	mov	r3, r0
 8003214:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 8003216:	893b      	ldrh	r3, [r7, #8]
 8003218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800321c:	4293      	cmp	r3, r2
 800321e:	d01c      	beq.n	800325a <u8g2_string_width+0x7a>
			break;
		str++;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	3301      	adds	r3, #1
 8003224:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 8003226:	893b      	ldrh	r3, [r7, #8]
 8003228:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800322c:	4293      	cmp	r3, r2
 800322e:	d0e9      	beq.n	8003204 <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 8003230:	893b      	ldrh	r3, [r7, #8]
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fe00 	bl	8002e3a <u8g2_GetGlyphWidth>
 800323a:	4603      	mov	r3, r0
 800323c:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 800323e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003242:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8003246:	d103      	bne.n	8003250 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800324e:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 8003250:	89fa      	ldrh	r2, [r7, #14]
 8003252:	89bb      	ldrh	r3, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8003258:	e7d4      	b.n	8003204 <u8g2_string_width+0x24>
			break;
 800325a:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01b      	beq.n	800329e <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 8003266:	89fa      	ldrh	r2, [r7, #14]
 8003268:	89bb      	ldrh	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8003274:	b29a      	uxth	r2, r3
 8003276:	89fb      	ldrh	r3, [r7, #14]
 8003278:	4413      	add	r3, r2
 800327a:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8003282:	b29a      	uxth	r2, r3
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	4413      	add	r3, r2
 8003288:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 800328a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800328e:	2b00      	cmp	r3, #0
 8003290:	dd05      	ble.n	800329e <u8g2_string_width+0xbe>
			w += initial_x_offset;
 8003292:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003296:	b29a      	uxth	r2, r3
 8003298:	89fb      	ldrh	r3, [r7, #14]
 800329a:	4413      	add	r3, r2
 800329c:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 800329e:	89fb      	ldrh	r3, [r7, #14]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a05      	ldr	r2, [pc, #20]	; (80032cc <u8g2_GetStrWidth+0x24>)
 80032b6:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 80032b8:	6839      	ldr	r1, [r7, #0]
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff ff90 	bl	80031e0 <u8g2_string_width>
 80032c0:	4603      	mov	r3, r0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	08003ab7 	.word	0x08003ab7

080032d0 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <u8g2_GetUTF8Width+0x24>)
 80032de:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff ff7c 	bl	80031e0 <u8g2_string_width>
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	08003ae3 	.word	0x08003ae3

080032f8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	460b      	mov	r3, r1
 8003308:	80fb      	strh	r3, [r7, #6]
 800330a:	4613      	mov	r3, r2
 800330c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003314:	8afb      	ldrh	r3, [r7, #22]
 8003316:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	8abb      	ldrh	r3, [r7, #20]
 800331e:	4413      	add	r3, r2
 8003320:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003322:	8afa      	ldrh	r2, [r7, #22]
 8003324:	8abb      	ldrh	r3, [r7, #20]
 8003326:	429a      	cmp	r2, r3
 8003328:	d90b      	bls.n	8003342 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800332a:	8afa      	ldrh	r2, [r7, #22]
 800332c:	88bb      	ldrh	r3, [r7, #4]
 800332e:	429a      	cmp	r2, r3
 8003330:	d205      	bcs.n	800333e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003332:	88bb      	ldrh	r3, [r7, #4]
 8003334:	82bb      	strh	r3, [r7, #20]
      b--;
 8003336:	8abb      	ldrh	r3, [r7, #20]
 8003338:	3b01      	subs	r3, #1
 800333a:	82bb      	strh	r3, [r7, #20]
 800333c:	e001      	b.n	8003342 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003342:	8afa      	ldrh	r2, [r7, #22]
 8003344:	88bb      	ldrh	r3, [r7, #4]
 8003346:	429a      	cmp	r2, r3
 8003348:	d301      	bcc.n	800334e <u8g2_clip_intersection2+0x56>
    return 0;
 800334a:	2300      	movs	r3, #0
 800334c:	e01c      	b.n	8003388 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800334e:	8aba      	ldrh	r2, [r7, #20]
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	429a      	cmp	r2, r3
 8003354:	d801      	bhi.n	800335a <u8g2_clip_intersection2+0x62>
    return 0;
 8003356:	2300      	movs	r3, #0
 8003358:	e016      	b.n	8003388 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800335a:	8afa      	ldrh	r2, [r7, #22]
 800335c:	88fb      	ldrh	r3, [r7, #6]
 800335e:	429a      	cmp	r2, r3
 8003360:	d201      	bcs.n	8003366 <u8g2_clip_intersection2+0x6e>
    a = c;
 8003362:	88fb      	ldrh	r3, [r7, #6]
 8003364:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8003366:	8aba      	ldrh	r2, [r7, #20]
 8003368:	88bb      	ldrh	r3, [r7, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	d901      	bls.n	8003372 <u8g2_clip_intersection2+0x7a>
    b = d;
 800336e:	88bb      	ldrh	r3, [r7, #4]
 8003370:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8afa      	ldrh	r2, [r7, #22]
 8003376:	801a      	strh	r2, [r3, #0]
  b -= a;
 8003378:	8aba      	ldrh	r2, [r7, #20]
 800337a:	8afb      	ldrh	r3, [r7, #22]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	8aba      	ldrh	r2, [r7, #20]
 8003384:	801a      	strh	r2, [r3, #0]
  return 1;
 8003386:	2301      	movs	r3, #1
}
 8003388:	4618      	mov	r0, r3
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr

08003392 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003392:	b590      	push	{r4, r7, lr}
 8003394:	b087      	sub	sp, #28
 8003396:	af02      	add	r7, sp, #8
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	4608      	mov	r0, r1
 800339c:	4611      	mov	r1, r2
 800339e:	461a      	mov	r2, r3
 80033a0:	4603      	mov	r3, r0
 80033a2:	817b      	strh	r3, [r7, #10]
 80033a4:	460b      	mov	r3, r1
 80033a6:	813b      	strh	r3, [r7, #8]
 80033a8:	4613      	mov	r3, r2
 80033aa:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b0:	893a      	ldrh	r2, [r7, #8]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80033ba:	88f8      	ldrh	r0, [r7, #6]
 80033bc:	893a      	ldrh	r2, [r7, #8]
 80033be:	8979      	ldrh	r1, [r7, #10]
 80033c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	4603      	mov	r3, r0
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	47a0      	blx	r4
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd90      	pop	{r4, r7, pc}

080033d4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	4608      	mov	r0, r1
 80033de:	4611      	mov	r1, r2
 80033e0:	461a      	mov	r2, r3
 80033e2:	4603      	mov	r3, r0
 80033e4:	817b      	strh	r3, [r7, #10]
 80033e6:	460b      	mov	r3, r1
 80033e8:	813b      	strh	r3, [r7, #8]
 80033ea:	4613      	mov	r3, r2
 80033ec:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d075      	beq.n	80034e4 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d072      	beq.n	80034e4 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d91a      	bls.n	800343a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003404:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d109      	bne.n	8003420 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800340c:	897a      	ldrh	r2, [r7, #10]
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	b29b      	uxth	r3, r3
 8003414:	817b      	strh	r3, [r7, #10]
	  x++;
 8003416:	897b      	ldrh	r3, [r7, #10]
 8003418:	3301      	adds	r3, #1
 800341a:	b29b      	uxth	r3, r3
 800341c:	817b      	strh	r3, [r7, #10]
 800341e:	e00c      	b.n	800343a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8003420:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d108      	bne.n	800343a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8003428:	893a      	ldrh	r2, [r7, #8]
 800342a:	88fb      	ldrh	r3, [r7, #6]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	b29b      	uxth	r3, r3
 8003430:	813b      	strh	r3, [r7, #8]
	  y++;
 8003432:	893b      	ldrh	r3, [r7, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	b29b      	uxth	r3, r3
 8003438:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800343a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003446:	f897 3020 	ldrb.w	r3, [r7, #32]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11a      	bne.n	8003484 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003454:	893b      	ldrh	r3, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	d83b      	bhi.n	80034d2 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003460:	893b      	ldrh	r3, [r7, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	d937      	bls.n	80034d6 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003472:	1db9      	adds	r1, r7, #6
 8003474:	f107 000a 	add.w	r0, r7, #10
 8003478:	f7ff ff3e 	bl	80032f8 <u8g2_clip_intersection2>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11a      	bne.n	80034b8 <u8g2_DrawHVLine+0xe4>
	  return;
 8003482:	e02f      	b.n	80034e4 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	429a      	cmp	r2, r3
 800348e:	d824      	bhi.n	80034da <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003496:	897b      	ldrh	r3, [r7, #10]
 8003498:	429a      	cmp	r2, r3
 800349a:	d920      	bls.n	80034de <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80034a8:	1db9      	adds	r1, r7, #6
 80034aa:	f107 0008 	add.w	r0, r7, #8
 80034ae:	f7ff ff23 	bl	80032f8 <u8g2_clip_intersection2>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d014      	beq.n	80034e2 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	689c      	ldr	r4, [r3, #8]
 80034be:	8979      	ldrh	r1, [r7, #10]
 80034c0:	893a      	ldrh	r2, [r7, #8]
 80034c2:	88f8      	ldrh	r0, [r7, #6]
 80034c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	4603      	mov	r3, r0
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	47a0      	blx	r4
 80034d0:	e008      	b.n	80034e4 <u8g2_DrawHVLine+0x110>
	  return;
 80034d2:	bf00      	nop
 80034d4:	e006      	b.n	80034e4 <u8g2_DrawHVLine+0x110>
	  return;
 80034d6:	bf00      	nop
 80034d8:	e004      	b.n	80034e4 <u8g2_DrawHVLine+0x110>
	  return;
 80034da:	bf00      	nop
 80034dc:	e002      	b.n	80034e4 <u8g2_DrawHVLine+0x110>
	  return;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <u8g2_DrawHVLine+0x110>
	  return;
 80034e2:	bf00      	nop
    }
}
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd90      	pop	{r4, r7, pc}

080034ea <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af02      	add	r7, sp, #8
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	4608      	mov	r0, r1
 80034f4:	4611      	mov	r1, r2
 80034f6:	461a      	mov	r2, r3
 80034f8:	4603      	mov	r3, r0
 80034fa:	817b      	strh	r3, [r7, #10]
 80034fc:	460b      	mov	r3, r1
 80034fe:	813b      	strh	r3, [r7, #8]
 8003500:	4613      	mov	r3, r2
 8003502:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	893a      	ldrh	r2, [r7, #8]
 8003508:	8979      	ldrh	r1, [r7, #10]
 800350a:	2000      	movs	r0, #0
 800350c:	9000      	str	r0, [sp, #0]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f7ff ff60 	bl	80033d4 <u8g2_DrawHVLine>
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	817b      	strh	r3, [r7, #10]
 800352e:	460b      	mov	r3, r1
 8003530:	813b      	strh	r3, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	893a      	ldrh	r2, [r7, #8]
 800353a:	8979      	ldrh	r1, [r7, #10]
 800353c:	2001      	movs	r0, #1
 800353e:	9000      	str	r0, [sp, #0]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff ff47 	bl	80033d4 <u8g2_DrawHVLine>
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af02      	add	r7, sp, #8
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	807b      	strh	r3, [r7, #2]
 800355a:	4613      	mov	r3, r2
 800355c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8003564:	883a      	ldrh	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d31a      	bcc.n	80035a0 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003570:	883a      	ldrh	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d216      	bcs.n	80035a4 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800357c:	887a      	ldrh	r2, [r7, #2]
 800357e:	429a      	cmp	r2, r3
 8003580:	d312      	bcc.n	80035a8 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003588:	887a      	ldrh	r2, [r7, #2]
 800358a:	429a      	cmp	r2, r3
 800358c:	d20e      	bcs.n	80035ac <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800358e:	883a      	ldrh	r2, [r7, #0]
 8003590:	8879      	ldrh	r1, [r7, #2]
 8003592:	2300      	movs	r3, #0
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2301      	movs	r3, #1
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff1b 	bl	80033d4 <u8g2_DrawHVLine>
 800359e:	e006      	b.n	80035ae <u8g2_DrawPixel+0x60>
    return;
 80035a0:	bf00      	nop
 80035a2:	e004      	b.n	80035ae <u8g2_DrawPixel+0x60>
    return;
 80035a4:	bf00      	nop
 80035a6:	e002      	b.n	80035ae <u8g2_DrawPixel+0x60>
    return;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <u8g2_DrawPixel+0x60>
    return;
 80035ac:	bf00      	nop
}
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d903      	bls.n	80035d6 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80035e0:	b490      	push	{r4, r7}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4604      	mov	r4, r0
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4623      	mov	r3, r4
 80035f0:	80fb      	strh	r3, [r7, #6]
 80035f2:	4603      	mov	r3, r0
 80035f4:	80bb      	strh	r3, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	807b      	strh	r3, [r7, #2]
 80035fa:	4613      	mov	r3, r2
 80035fc:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	88bb      	ldrh	r3, [r7, #4]
 8003602:	429a      	cmp	r2, r3
 8003604:	d20d      	bcs.n	8003622 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8003606:	883a      	ldrh	r2, [r7, #0]
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	429a      	cmp	r2, r3
 800360c:	d901      	bls.n	8003612 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800360e:	2301      	movs	r3, #1
 8003610:	e014      	b.n	800363c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	883b      	ldrh	r3, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d901      	bls.n	800361e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800361a:	2301      	movs	r3, #1
 800361c:	e00e      	b.n	800363c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800361e:	2300      	movs	r3, #0
 8003620:	e00c      	b.n	800363c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003622:	883a      	ldrh	r2, [r7, #0]
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	429a      	cmp	r2, r3
 8003628:	d907      	bls.n	800363a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	883b      	ldrh	r3, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d901      	bls.n	8003636 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003632:	2301      	movs	r3, #1
 8003634:	e002      	b.n	800363c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003636:	2300      	movs	r3, #0
 8003638:	e000      	b.n	800363c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800363a:	2300      	movs	r3, #0
    }
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bc90      	pop	{r4, r7}
 8003644:	4770      	bx	lr

08003646 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	4608      	mov	r0, r1
 8003650:	4611      	mov	r1, r2
 8003652:	461a      	mov	r2, r3
 8003654:	4603      	mov	r3, r0
 8003656:	817b      	strh	r3, [r7, #10]
 8003658:	460b      	mov	r3, r1
 800365a:	813b      	strh	r3, [r7, #8]
 800365c:	4613      	mov	r3, r2
 800365e:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800366c:	8b3b      	ldrh	r3, [r7, #24]
 800366e:	893a      	ldrh	r2, [r7, #8]
 8003670:	f7ff ffb6 	bl	80035e0 <u8g2_is_intersection_decision_tree>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <u8g2_IsIntersection+0x38>
    return 0; 
 800367a:	2300      	movs	r3, #0
 800367c:	e00a      	b.n	8003694 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	897a      	ldrh	r2, [r7, #10]
 800368e:	f7ff ffa7 	bl	80035e0 <u8g2_is_intersection_decision_tree>
 8003692:	4603      	mov	r3, r0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800369c:	b480      	push	{r7}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	4608      	mov	r0, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	461a      	mov	r2, r3
 80036aa:	4603      	mov	r3, r0
 80036ac:	817b      	strh	r3, [r7, #10]
 80036ae:	460b      	mov	r3, r1
 80036b0:	813b      	strh	r3, [r7, #8]
 80036b2:	4613      	mov	r3, r2
 80036b4:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80036b6:	893b      	ldrh	r3, [r7, #8]
 80036b8:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80036ba:	7efb      	ldrb	r3, [r7, #27]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80036c6:	7e3a      	ldrb	r2, [r7, #24]
 80036c8:	7efb      	ldrb	r3, [r7, #27]
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d801      	bhi.n	80036e6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80036e2:	7e3b      	ldrb	r3, [r7, #24]
 80036e4:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d001      	beq.n	80036f4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80036f0:	7e3b      	ldrb	r3, [r7, #24]
 80036f2:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80036f4:	893b      	ldrh	r3, [r7, #8]
 80036f6:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80036f8:	8afb      	ldrh	r3, [r7, #22]
 80036fa:	f023 0307 	bic.w	r3, r3, #7
 80036fe:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	7c1b      	ldrb	r3, [r3, #16]
 8003706:	b29b      	uxth	r3, r3
 8003708:	8afa      	ldrh	r2, [r7, #22]
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003714:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8003716:	8afb      	ldrh	r3, [r7, #22]
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	4413      	add	r3, r2
 800371c:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800371e:	897b      	ldrh	r3, [r7, #10]
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8003726:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800372a:	2b00      	cmp	r3, #0
 800372c:	d117      	bne.n	800375e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	7ebb      	ldrb	r3, [r7, #26]
 8003734:	4313      	orrs	r3, r2
 8003736:	b2da      	uxtb	r2, r3
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	781a      	ldrb	r2, [r3, #0]
 8003740:	7e7b      	ldrb	r3, [r7, #25]
 8003742:	4053      	eors	r3, r2
 8003744:	b2da      	uxtb	r2, r3
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	701a      	strb	r2, [r3, #0]
	ptr++;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3301      	adds	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
	len--;
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	3b01      	subs	r3, #1
 8003754:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e8      	bne.n	800372e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800375c:	e038      	b.n	80037d0 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	7ebb      	ldrb	r3, [r7, #26]
 8003764:	4313      	orrs	r3, r2
 8003766:	b2da      	uxtb	r2, r3
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	781a      	ldrb	r2, [r3, #0]
 8003770:	7e7b      	ldrb	r3, [r7, #25]
 8003772:	4053      	eors	r3, r2
 8003774:	b2da      	uxtb	r2, r3
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800377a:	7efb      	ldrb	r3, [r7, #27]
 800377c:	3301      	adds	r3, #1
 800377e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003780:	7efb      	ldrb	r3, [r7, #27]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	76fb      	strb	r3, [r7, #27]
      len--;
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	3b01      	subs	r3, #1
 800378c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800378e:	7efb      	ldrb	r3, [r7, #27]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d114      	bne.n	80037be <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003798:	461a      	mov	r2, r3
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d801      	bhi.n	80037ae <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d008      	beq.n	80037ca <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80037b8:	2301      	movs	r3, #1
 80037ba:	767b      	strb	r3, [r7, #25]
 80037bc:	e005      	b.n	80037ca <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80037be:	7ebb      	ldrb	r3, [r7, #26]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80037c4:	7e7b      	ldrb	r3, [r7, #25]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1c6      	bne.n	800375e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80037d0:	bf00      	nop
 80037d2:	3724      	adds	r7, #36	; 0x24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003802:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	79fa      	ldrb	r2, [r7, #7]
 800383e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff ffad 	bl	80037da <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff fc65 	bl	8003150 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038aa:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80038ac:	89fb      	ldrh	r3, [r7, #14]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	89fa      	ldrh	r2, [r7, #14]
 80038b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	7c1b      	ldrb	r3, [r3, #16]
 80038bc:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80038be:	89fb      	ldrh	r3, [r7, #14]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	89fa      	ldrh	r2, [r7, #14]
 80038c8:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	89fa      	ldrh	r2, [r7, #14]
 80038dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038e4:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80038e6:	89fb      	ldrh	r3, [r7, #14]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80038ee:	4413      	add	r3, r2
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	7c52      	ldrb	r2, [r2, #17]
 80038f4:	4293      	cmp	r3, r2
 80038f6:	dd08      	ble.n	800390a <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	7c5b      	ldrb	r3, [r3, #17]
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003904:	b29b      	uxth	r3, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800390a:	89fb      	ldrh	r3, [r7, #14]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800392c:	89fb      	ldrh	r3, [r7, #14]
 800392e:	4413      	add	r3, r2
 8003930:	b29a      	uxth	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	8a9a      	ldrh	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	8ada      	ldrh	r2, [r3, #22]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr

08003956 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af02      	add	r7, sp, #8
 800395c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	4603      	mov	r3, r0
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fe63 	bl	8003646 <u8g2_IsIntersection>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800398e:	e03b      	b.n	8003a08 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d205      	bcs.n	80039b4 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d905      	bls.n	80039d0 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80039dc:	429a      	cmp	r2, r3
 80039de:	d205      	bcs.n	80039ec <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d905      	bls.n	8003a08 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ff3c 	bl	8003896 <u8g2_update_dimension_common>
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ff7b 	bl	8003956 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	817b      	strh	r3, [r7, #10]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	813b      	strh	r3, [r7, #8]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003a82:	88f8      	ldrh	r0, [r7, #6]
 8003a84:	893a      	ldrh	r2, [r7, #8]
 8003a86:	8979      	ldrh	r1, [r7, #10]
 8003a88:	7e3b      	ldrb	r3, [r7, #24]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f7ff fc7f 	bl	8003392 <u8g2_draw_hv_line_2dir>
}
 8003a94:	bf00      	nop
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <u8x8_ascii_next+0x18>
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	2b0a      	cmp	r3, #10
 8003acc:	d102      	bne.n	8003ad4 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad2:	e001      	b.n	8003ad8 <u8x8_ascii_next+0x22>
  return b;
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	b29b      	uxth	r3, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	460b      	mov	r3, r1
 8003aec:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <u8x8_utf8_next+0x18>
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	2b0a      	cmp	r3, #10
 8003af8:	d102      	bne.n	8003b00 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8003afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003afe:	e06e      	b.n	8003bde <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d145      	bne.n	8003b96 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	2bfb      	cmp	r3, #251	; 0xfb
 8003b0e:	d908      	bls.n	8003b22 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2205      	movs	r2, #5
 8003b14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	70fb      	strb	r3, [r7, #3]
 8003b20:	e032      	b.n	8003b88 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	2bf7      	cmp	r3, #247	; 0xf7
 8003b26:	d908      	bls.n	8003b3a <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	70fb      	strb	r3, [r7, #3]
 8003b38:	e026      	b.n	8003b88 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	2bef      	cmp	r3, #239	; 0xef
 8003b3e:	d908      	bls.n	8003b52 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2203      	movs	r2, #3
 8003b44:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	70fb      	strb	r3, [r7, #3]
 8003b50:	e01a      	b.n	8003b88 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	2bdf      	cmp	r3, #223	; 0xdf
 8003b56:	d908      	bls.n	8003b6a <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	70fb      	strb	r3, [r7, #3]
 8003b68:	e00e      	b.n	8003b88 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8003b6a:	78fb      	ldrb	r3, [r7, #3]
 8003b6c:	2bbf      	cmp	r3, #191	; 0xbf
 8003b6e:	d908      	bls.n	8003b82 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 031f 	and.w	r3, r3, #31
 8003b7e:	70fb      	strb	r3, [r7, #3]
 8003b80:	e002      	b.n	8003b88 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	e02a      	b.n	8003bde <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003b90:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003b94:	e023      	b.n	8003bde <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8c1b      	ldrh	r3, [r3, #32]
 8003baa:	019b      	lsls	r3, r3, #6
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb8:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8c1a      	ldrh	r2, [r3, #32]
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8003bd4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003bd8:	e001      	b.n	8003bde <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	8c1b      	ldrh	r3, [r3, #32]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691c      	ldr	r4, [r3, #16]
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2120      	movs	r1, #32
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	47a0      	blx	r4
 8003c02:	4603      	mov	r3, r0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd90      	pop	{r4, r7, pc}

08003c0c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	460b      	mov	r3, r1
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	691c      	ldr	r4, [r3, #16]
 8003c1e:	7afa      	ldrb	r2, [r7, #11]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2117      	movs	r1, #23
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	47a0      	blx	r4
 8003c28:	4603      	mov	r3, r0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd90      	pop	{r4, r7, pc}

08003c32 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003c3e:	1cfb      	adds	r3, r7, #3
 8003c40:	461a      	mov	r2, r3
 8003c42:	2101      	movs	r1, #1
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ffe1 	bl	8003c0c <u8x8_byte_SendBytes>
 8003c4a:	4603      	mov	r3, r0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003c54:	b590      	push	{r4, r7, lr}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68dc      	ldr	r4, [r3, #12]
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	2300      	movs	r3, #0
 8003c68:	2115      	movs	r1, #21
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	47a0      	blx	r4
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd90      	pop	{r4, r7, pc}

08003c78 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68dc      	ldr	r4, [r3, #12]
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2116      	movs	r1, #22
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	47a0      	blx	r4
 8003c92:	4603      	mov	r3, r0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd90      	pop	{r4, r7, pc}

08003c9c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68dc      	ldr	r4, [r3, #12]
 8003cae:	7afa      	ldrb	r2, [r7, #11]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2117      	movs	r1, #23
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	47a0      	blx	r4
 8003cb8:	4603      	mov	r3, r0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd90      	pop	{r4, r7, pc}

08003cc2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003cc2:	b590      	push	{r4, r7, lr}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68dc      	ldr	r4, [r3, #12]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2118      	movs	r1, #24
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	47a0      	blx	r4
 8003cd8:	4603      	mov	r3, r0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd90      	pop	{r4, r7, pc}

08003ce2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003ce2:	b590      	push	{r4, r7, lr}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68dc      	ldr	r4, [r3, #12]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2119      	movs	r1, #25
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	47a0      	blx	r4
 8003cf8:	4603      	mov	r3, r0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd90      	pop	{r4, r7, pc}

08003d02 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003d02:	b590      	push	{r4, r7, lr}
 8003d04:	b085      	sub	sp, #20
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	73fb      	strb	r3, [r7, #15]
    data++;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	3301      	adds	r3, #1
 8003d16:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	2bfe      	cmp	r3, #254	; 0xfe
 8003d1c:	d031      	beq.n	8003d82 <u8x8_cad_SendSequence+0x80>
 8003d1e:	2bfe      	cmp	r3, #254	; 0xfe
 8003d20:	dc3d      	bgt.n	8003d9e <u8x8_cad_SendSequence+0x9c>
 8003d22:	2b19      	cmp	r3, #25
 8003d24:	dc3b      	bgt.n	8003d9e <u8x8_cad_SendSequence+0x9c>
 8003d26:	2b18      	cmp	r3, #24
 8003d28:	da23      	bge.n	8003d72 <u8x8_cad_SendSequence+0x70>
 8003d2a:	2b16      	cmp	r3, #22
 8003d2c:	dc02      	bgt.n	8003d34 <u8x8_cad_SendSequence+0x32>
 8003d2e:	2b15      	cmp	r3, #21
 8003d30:	da03      	bge.n	8003d3a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003d32:	e034      	b.n	8003d9e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003d34:	2b17      	cmp	r3, #23
 8003d36:	d00e      	beq.n	8003d56 <u8x8_cad_SendSequence+0x54>
	return;
 8003d38:	e031      	b.n	8003d9e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68dc      	ldr	r4, [r3, #12]
 8003d44:	7bba      	ldrb	r2, [r7, #14]
 8003d46:	7bf9      	ldrb	r1, [r7, #15]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	47a0      	blx	r4
	  data++;
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	603b      	str	r3, [r7, #0]
	  break;
 8003d54:	e022      	b.n	8003d9c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003d5c:	f107 030e 	add.w	r3, r7, #14
 8003d60:	461a      	mov	r2, r3
 8003d62:	2101      	movs	r1, #1
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff99 	bl	8003c9c <u8x8_cad_SendData>
	  data++;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	603b      	str	r3, [r7, #0]
	  break;
 8003d70:	e014      	b.n	8003d9c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68dc      	ldr	r4, [r3, #12]
 8003d76:	7bf9      	ldrb	r1, [r7, #15]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	47a0      	blx	r4
	  break;
 8003d80:	e00c      	b.n	8003d9c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003d88:	7bbb      	ldrb	r3, [r7, #14]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2129      	movs	r1, #41	; 0x29
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9ed 	bl	800416e <u8x8_gpio_call>
	  data++;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	3301      	adds	r3, #1
 8003d98:	603b      	str	r3, [r7, #0]
	  break;
 8003d9a:	bf00      	nop
    cmd = *data;
 8003d9c:	e7b6      	b.n	8003d0c <u8x8_cad_SendSequence+0xa>
	return;
 8003d9e:	bf00      	nop
    }
  }
}
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd90      	pop	{r4, r7, pc}
	...

08003da8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	72fb      	strb	r3, [r7, #11]
 8003db6:	4613      	mov	r3, r2
 8003db8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	3b14      	subs	r3, #20
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d82f      	bhi.n	8003e22 <u8x8_cad_001+0x7a>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <u8x8_cad_001+0x20>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003e11 	.word	0x08003e11
 8003dcc:	08003de1 	.word	0x08003de1
 8003dd0:	08003df5 	.word	0x08003df5
 8003dd4:	08003e09 	.word	0x08003e09
 8003dd8:	08003e11 	.word	0x08003e11
 8003ddc:	08003e11 	.word	0x08003e11
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003de0:	2100      	movs	r1, #0
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f7ff ff00 	bl	8003be8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003de8:	7abb      	ldrb	r3, [r7, #10]
 8003dea:	4619      	mov	r1, r3
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff ff20 	bl	8003c32 <u8x8_byte_SendByte>
      break;
 8003df2:	e018      	b.n	8003e26 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003df4:	2100      	movs	r1, #0
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f7ff fef6 	bl	8003be8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003dfc:	7abb      	ldrb	r3, [r7, #10]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff ff16 	bl	8003c32 <u8x8_byte_SendByte>
      break;
 8003e06:	e00e      	b.n	8003e26 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003e08:	2101      	movs	r1, #1
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff feec 	bl	8003be8 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691c      	ldr	r4, [r3, #16]
 8003e14:	7aba      	ldrb	r2, [r7, #10]
 8003e16:	7af9      	ldrb	r1, [r7, #11]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	47a0      	blx	r4
 8003e1e:	4603      	mov	r3, r0
 8003e20:	e002      	b.n	8003e28 <u8x8_cad_001+0x80>
    default:
      return 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <u8x8_cad_001+0x80>
  }
  return 1;
 8003e26:	2301      	movs	r3, #1
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd90      	pop	{r4, r7, pc}

08003e30 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	72fb      	strb	r3, [r7, #11]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	3b0b      	subs	r3, #11
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	f200 808e 	bhi.w	8003f68 <u8x8_d_uc1604_common+0x138>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <u8x8_d_uc1604_common+0x24>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003efd 	.word	0x08003efd
 8003e58:	08003f69 	.word	0x08003f69
 8003e5c:	08003f17 	.word	0x08003f17
 8003e60:	08003f49 	.word	0x08003f49
 8003e64:	08003e69 	.word	0x08003e69
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff ff2a 	bl	8003cc2 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	795b      	ldrb	r3, [r3, #5]
 8003e72:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	4619      	mov	r1, r3
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff fee5 	bl	8003c54 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f043 0310 	orr.w	r3, r3, #16
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	4619      	mov	r1, r3
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff fedb 	bl	8003c54 <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	799b      	ldrb	r3, [r3, #6]
 8003ea2:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003eaa:	7dbb      	ldrb	r3, [r7, #22]
 8003eac:	4413      	add	r3, r2
 8003eae:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8003eb0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	b25b      	sxtb	r3, r3
 8003eba:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff fec5 	bl	8003c54 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	791b      	ldrb	r3, [r3, #4]
 8003ece:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8003ed0:	7d7b      	ldrb	r3, [r7, #21]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8003edc:	7d7b      	ldrb	r3, [r7, #21]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f7ff feda 	bl	8003c9c <u8x8_cad_SendData>
	arg_int--;
 8003ee8:	7abb      	ldrb	r3, [r7, #10]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003eee:	7abb      	ldrb	r3, [r7, #10]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f3      	bne.n	8003edc <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff fef4 	bl	8003ce2 <u8x8_cad_EndTransfer>
      break;
 8003efa:	e037      	b.n	8003f6c <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003efc:	7abb      	ldrb	r3, [r7, #10]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d104      	bne.n	8003f0c <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 8003f02:	491d      	ldr	r1, [pc, #116]	; (8003f78 <u8x8_d_uc1604_common+0x148>)
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fefc 	bl	8003d02 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 8003f0a:	e02f      	b.n	8003f6c <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 8003f0c:	491b      	ldr	r1, [pc, #108]	; (8003f7c <u8x8_d_uc1604_common+0x14c>)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff fef7 	bl	8003d02 <u8x8_cad_SendSequence>
      break;
 8003f14:	e02a      	b.n	8003f6c <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003f16:	7abb      	ldrb	r3, [r7, #10]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 8003f1c:	4918      	ldr	r1, [pc, #96]	; (8003f80 <u8x8_d_uc1604_common+0x150>)
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff feef 	bl	8003d02 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	7c9a      	ldrb	r2, [r3, #18]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8003f30:	e01c      	b.n	8003f6c <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 8003f32:	4914      	ldr	r1, [pc, #80]	; (8003f84 <u8x8_d_uc1604_common+0x154>)
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff fee4 	bl	8003d02 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	7cda      	ldrb	r2, [r3, #19]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003f46:	e011      	b.n	8003f6c <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f7ff feba 	bl	8003cc2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003f4e:	2181      	movs	r1, #129	; 0x81
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f7ff fe7f 	bl	8003c54 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 8003f56:	7abb      	ldrb	r3, [r7, #10]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff fe8c 	bl	8003c78 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7ff febe 	bl	8003ce2 <u8x8_cad_EndTransfer>
      break;
 8003f66:	e001      	b.n	8003f6c <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 8003f6c:	2301      	movs	r3, #1
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	0800e6ac 	.word	0x0800e6ac
 8003f7c:	0800e6bc 	.word	0x0800e6bc
 8003f80:	0800e6c4 	.word	0x0800e6c4
 8003f84:	0800e6cc 	.word	0x0800e6cc

08003f88 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	72fb      	strb	r3, [r7, #11]
 8003f96:	4613      	mov	r3, r2
 8003f98:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 8003f9a:	7aba      	ldrb	r2, [r7, #10]
 8003f9c:	7af9      	ldrb	r1, [r7, #11]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7ff ff45 	bl	8003e30 <u8x8_d_uc1604_common>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d114      	bne.n	8003fd6 <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 8003fac:	7afb      	ldrb	r3, [r7, #11]
 8003fae:	2b09      	cmp	r3, #9
 8003fb0:	d002      	beq.n	8003fb8 <u8x8_d_uc1604_jlx19264+0x30>
 8003fb2:	2b0a      	cmp	r3, #10
 8003fb4:	d005      	beq.n	8003fc2 <u8x8_d_uc1604_jlx19264+0x3a>
 8003fb6:	e00c      	b.n	8003fd2 <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8003fb8:	490a      	ldr	r1, [pc, #40]	; (8003fe4 <u8x8_d_uc1604_jlx19264+0x5c>)
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f816 	bl	8003fec <u8x8_d_helper_display_setup_memory>
	break;
 8003fc0:	e00a      	b.n	8003fd8 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f825 	bl	8004012 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8003fc8:	4907      	ldr	r1, [pc, #28]	; (8003fe8 <u8x8_d_uc1604_jlx19264+0x60>)
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff fe99 	bl	8003d02 <u8x8_cad_SendSequence>
	break;
 8003fd0:	e002      	b.n	8003fd8 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e001      	b.n	8003fda <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 8003fd6:	bf00      	nop
  return 1;
 8003fd8:	2301      	movs	r3, #1
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	0800e6d4 	.word	0x0800e6d4
 8003fe8:	0800e6ec 	.word	0x0800e6ec

08003fec <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	7c9a      	ldrb	r2, [r3, #18]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004012:	b590      	push	{r4, r7, lr}
 8004014:	b083      	sub	sp, #12
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695c      	ldr	r4, [r3, #20]
 800401e:	2300      	movs	r3, #0
 8004020:	2200      	movs	r2, #0
 8004022:	2128      	movs	r1, #40	; 0x28
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68dc      	ldr	r4, [r3, #12]
 800402c:	2300      	movs	r3, #0
 800402e:	2200      	movs	r2, #0
 8004030:	2114      	movs	r1, #20
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004036:	2201      	movs	r2, #1
 8004038:	214b      	movs	r1, #75	; 0x4b
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f897 	bl	800416e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	791b      	ldrb	r3, [r3, #4]
 8004046:	461a      	mov	r2, r3
 8004048:	2129      	movs	r1, #41	; 0x29
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f88f 	bl	800416e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004050:	2200      	movs	r2, #0
 8004052:	214b      	movs	r1, #75	; 0x4b
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f88a 	bl	800416e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	791b      	ldrb	r3, [r3, #4]
 8004060:	461a      	mov	r2, r3
 8004062:	2129      	movs	r1, #41	; 0x29
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f882 	bl	800416e <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800406a:	2201      	movs	r2, #1
 800406c:	214b      	movs	r1, #75	; 0x4b
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f87d 	bl	800416e <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	795b      	ldrb	r3, [r3, #5]
 800407a:	461a      	mov	r2, r3
 800407c:	2129      	movs	r1, #41	; 0x29
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f875 	bl	800416e <u8x8_gpio_call>
}    
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bd90      	pop	{r4, r7, pc}

0800408c <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	4603      	mov	r3, r0
 800409c:	70fb      	strb	r3, [r7, #3]
 800409e:	460b      	mov	r3, r1
 80040a0:	70bb      	strb	r3, [r7, #2]
 80040a2:	4613      	mov	r3, r2
 80040a4:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80040aa:	78bb      	ldrb	r3, [r7, #2]
 80040ac:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80040ae:	787b      	ldrb	r3, [r7, #1]
 80040b0:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689c      	ldr	r4, [r3, #8]
 80040ba:	f107 0308 	add.w	r3, r7, #8
 80040be:	2201      	movs	r2, #1
 80040c0:	210f      	movs	r1, #15
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	47a0      	blx	r4
 80040c6:	4603      	mov	r3, r0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd90      	pop	{r4, r7, pc}

080040d0 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80040d0:	b590      	push	{r4, r7, lr}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689c      	ldr	r4, [r3, #8]
 80040dc:	2300      	movs	r3, #0
 80040de:	2200      	movs	r2, #0
 80040e0:	2109      	movs	r1, #9
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	47a0      	blx	r4
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}

080040ee <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80040ee:	b590      	push	{r4, r7, lr}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689c      	ldr	r4, [r3, #8]
 80040fa:	2300      	movs	r3, #0
 80040fc:	2200      	movs	r2, #0
 80040fe:	210a      	movs	r1, #10
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	47a0      	blx	r4
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bd90      	pop	{r4, r7, pc}

0800410c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689c      	ldr	r4, [r3, #8]
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	2300      	movs	r3, #0
 8004120:	210b      	movs	r1, #11
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	47a0      	blx	r4
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bd90      	pop	{r4, r7, pc}

0800412e <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 800412e:	b590      	push	{r4, r7, lr}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689c      	ldr	r4, [r3, #8]
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	2300      	movs	r3, #0
 8004142:	210e      	movs	r1, #14
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	47a0      	blx	r4
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}

08004150 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689c      	ldr	r4, [r3, #8]
 800415c:	2300      	movs	r3, #0
 800415e:	2200      	movs	r2, #0
 8004160:	2110      	movs	r1, #16
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	47a0      	blx	r4
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}

0800416e <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800416e:	b590      	push	{r4, r7, lr}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	70fb      	strb	r3, [r7, #3]
 800417a:	4613      	mov	r3, r2
 800417c:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695c      	ldr	r4, [r3, #20]
 8004182:	78ba      	ldrb	r2, [r7, #2]
 8004184:	78f9      	ldrb	r1, [r7, #3]
 8004186:	2300      	movs	r3, #0
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	47a0      	blx	r4
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bd90      	pop	{r4, r7, pc}

08004194 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	72fb      	strb	r3, [r7, #11]
 80041a2:	4613      	mov	r3, r2
 80041a4:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
	...

080041b4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a11      	ldr	r2, [pc, #68]	; (800420c <u8x8_SetupDefaults+0x58>)
 80041c6:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a10      	ldr	r2, [pc, #64]	; (800420c <u8x8_SetupDefaults+0x58>)
 80041cc:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a0e      	ldr	r2, [pc, #56]	; (800420c <u8x8_SetupDefaults+0x58>)
 80041d2:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a0d      	ldr	r2, [pc, #52]	; (800420c <u8x8_SetupDefaults+0x58>)
 80041d8:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	22ff      	movs	r2, #255	; 0xff
 80041f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	22ff      	movs	r2, #255	; 0xff
 80041fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	08004195 	.word	0x08004195

08004210 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff ffc8 	bl	80041b4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f7ff ff47 	bl	80040d0 <u8x8_SetupMemory>
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800424c:	480c      	ldr	r0, [pc, #48]	; (8004280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800424e:	490d      	ldr	r1, [pc, #52]	; (8004284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004250:	4a0d      	ldr	r2, [pc, #52]	; (8004288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004254:	e002      	b.n	800425c <LoopCopyDataInit>

08004256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800425a:	3304      	adds	r3, #4

0800425c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800425c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800425e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004260:	d3f9      	bcc.n	8004256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004262:	4a0a      	ldr	r2, [pc, #40]	; (800428c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004264:	4c0a      	ldr	r4, [pc, #40]	; (8004290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004268:	e001      	b.n	800426e <LoopFillZerobss>

0800426a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800426a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800426c:	3204      	adds	r2, #4

0800426e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800426e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004270:	d3fb      	bcc.n	800426a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004272:	f7fd fde5 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004276:	f008 fdcb 	bl	800ce10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800427a:	f7fd fa0b 	bl	8001694 <main>
  bx lr
 800427e:	4770      	bx	lr
  ldr r0, =_sdata
 8004280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004284:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004288:	0800e74c 	.word	0x0800e74c
  ldr r2, =_sbss
 800428c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004290:	20001cf4 	.word	0x20001cf4

08004294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004294:	e7fe      	b.n	8004294 <ADC1_2_IRQHandler>
	...

08004298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <HAL_Init+0x28>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a07      	ldr	r2, [pc, #28]	; (80042c0 <HAL_Init+0x28>)
 80042a2:	f043 0310 	orr.w	r3, r3, #16
 80042a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a8:	2003      	movs	r0, #3
 80042aa:	f000 f981 	bl	80045b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042ae:	200f      	movs	r0, #15
 80042b0:	f000 f808 	bl	80042c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042b4:	f7fd fc38 	bl	8001b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40022000 	.word	0x40022000

080042c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042cc:	4b12      	ldr	r3, [pc, #72]	; (8004318 <HAL_InitTick+0x54>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <HAL_InitTick+0x58>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	4619      	mov	r1, r3
 80042d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042da:	fbb3 f3f1 	udiv	r3, r3, r1
 80042de:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f9ab 	bl	800463e <HAL_SYSTICK_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e00e      	b.n	8004310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b0f      	cmp	r3, #15
 80042f6:	d80a      	bhi.n	800430e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042f8:	2200      	movs	r2, #0
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004300:	f000 f961 	bl	80045c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004304:	4a06      	ldr	r2, [pc, #24]	; (8004320 <HAL_InitTick+0x5c>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e000      	b.n	8004310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000008 	.word	0x20000008
 800431c:	20000010 	.word	0x20000010
 8004320:	2000000c 	.word	0x2000000c

08004324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_IncTick+0x1c>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_IncTick+0x20>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4413      	add	r3, r2
 8004334:	4a03      	ldr	r2, [pc, #12]	; (8004344 <HAL_IncTick+0x20>)
 8004336:	6013      	str	r3, [r2, #0]
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	20000010 	.word	0x20000010
 8004344:	20000b3c 	.word	0x20000b3c

08004348 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return uwTick;
 800434c:	4b02      	ldr	r3, [pc, #8]	; (8004358 <HAL_GetTick+0x10>)
 800434e:	681b      	ldr	r3, [r3, #0]
}
 8004350:	4618      	mov	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	20000b3c 	.word	0x20000b3c

0800435c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7ff fff0 	bl	8004348 <HAL_GetTick>
 8004368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004374:	d005      	beq.n	8004382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_Delay+0x44>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004382:	bf00      	nop
 8004384:	f7ff ffe0 	bl	8004348 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d8f7      	bhi.n	8004384 <HAL_Delay+0x28>
  {
  }
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000010 	.word	0x20000010

080043a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <__NVIC_SetPriorityGrouping+0x44>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c0:	4013      	ands	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043d6:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <__NVIC_SetPriorityGrouping+0x44>)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	60d3      	str	r3, [r2, #12]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <__NVIC_GetPriorityGrouping+0x18>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	f003 0307 	and.w	r3, r3, #7
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	e000ed00 	.word	0xe000ed00

08004408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	2b00      	cmp	r3, #0
 8004418:	db0b      	blt.n	8004432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	f003 021f 	and.w	r2, r3, #31
 8004420:	4906      	ldr	r1, [pc, #24]	; (800443c <__NVIC_EnableIRQ+0x34>)
 8004422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2001      	movs	r0, #1
 800442a:	fa00 f202 	lsl.w	r2, r0, r2
 800442e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	e000e100 	.word	0xe000e100

08004440 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800444a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444e:	2b00      	cmp	r3, #0
 8004450:	db12      	blt.n	8004478 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	f003 021f 	and.w	r2, r3, #31
 8004458:	490a      	ldr	r1, [pc, #40]	; (8004484 <__NVIC_DisableIRQ+0x44>)
 800445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	2001      	movs	r0, #1
 8004462:	fa00 f202 	lsl.w	r2, r0, r2
 8004466:	3320      	adds	r3, #32
 8004468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800446c:	f3bf 8f4f 	dsb	sy
}
 8004470:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004472:	f3bf 8f6f 	isb	sy
}
 8004476:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	e000e100 	.word	0xe000e100

08004488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	6039      	str	r1, [r7, #0]
 8004492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004498:	2b00      	cmp	r3, #0
 800449a:	db0a      	blt.n	80044b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	490c      	ldr	r1, [pc, #48]	; (80044d4 <__NVIC_SetPriority+0x4c>)
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	0112      	lsls	r2, r2, #4
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	440b      	add	r3, r1
 80044ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044b0:	e00a      	b.n	80044c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	4908      	ldr	r1, [pc, #32]	; (80044d8 <__NVIC_SetPriority+0x50>)
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	3b04      	subs	r3, #4
 80044c0:	0112      	lsls	r2, r2, #4
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	440b      	add	r3, r1
 80044c6:	761a      	strb	r2, [r3, #24]
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	e000e100 	.word	0xe000e100
 80044d8:	e000ed00 	.word	0xe000ed00

080044dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044dc:	b480      	push	{r7}
 80044de:	b089      	sub	sp, #36	; 0x24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f1c3 0307 	rsb	r3, r3, #7
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	bf28      	it	cs
 80044fa:	2304      	movcs	r3, #4
 80044fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	3304      	adds	r3, #4
 8004502:	2b06      	cmp	r3, #6
 8004504:	d902      	bls.n	800450c <NVIC_EncodePriority+0x30>
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3b03      	subs	r3, #3
 800450a:	e000      	b.n	800450e <NVIC_EncodePriority+0x32>
 800450c:	2300      	movs	r3, #0
 800450e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43da      	mvns	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	401a      	ands	r2, r3
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004524:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	fa01 f303 	lsl.w	r3, r1, r3
 800452e:	43d9      	mvns	r1, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004534:	4313      	orrs	r3, r2
         );
}
 8004536:	4618      	mov	r0, r3
 8004538:	3724      	adds	r7, #36	; 0x24
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr

08004540 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8004544:	f3bf 8f4f 	dsb	sy
}
 8004548:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <__NVIC_SystemReset+0x24>)
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004552:	4904      	ldr	r1, [pc, #16]	; (8004564 <__NVIC_SystemReset+0x24>)
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <__NVIC_SystemReset+0x28>)
 8004556:	4313      	orrs	r3, r2
 8004558:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800455a:	f3bf 8f4f 	dsb	sy
}
 800455e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <__NVIC_SystemReset+0x20>
 8004564:	e000ed00 	.word	0xe000ed00
 8004568:	05fa0004 	.word	0x05fa0004

0800456c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800457c:	d301      	bcc.n	8004582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800457e:	2301      	movs	r3, #1
 8004580:	e00f      	b.n	80045a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004582:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <SysTick_Config+0x40>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3b01      	subs	r3, #1
 8004588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458a:	210f      	movs	r1, #15
 800458c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004590:	f7ff ff7a 	bl	8004488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <SysTick_Config+0x40>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459a:	4b04      	ldr	r3, [pc, #16]	; (80045ac <SysTick_Config+0x40>)
 800459c:	2207      	movs	r2, #7
 800459e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	e000e010 	.word	0xe000e010

080045b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff fef3 	bl	80043a4 <__NVIC_SetPriorityGrouping>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045d8:	f7ff ff08 	bl	80043ec <__NVIC_GetPriorityGrouping>
 80045dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f7ff ff7a 	bl	80044dc <NVIC_EncodePriority>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff49 	bl	8004488 <__NVIC_SetPriority>
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fefb 	bl	8004408 <__NVIC_EnableIRQ>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	4603      	mov	r3, r0
 8004622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff09 	bl	8004440 <__NVIC_DisableIRQ>
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800463a:	f7ff ff81 	bl	8004540 <__NVIC_SystemReset>

0800463e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff ff90 	bl	800456c <SysTick_Config>
 800464c:	4603      	mov	r3, r0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004658:	b480      	push	{r7}
 800465a:	b08b      	sub	sp, #44	; 0x2c
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004662:	2300      	movs	r3, #0
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004666:	2300      	movs	r3, #0
 8004668:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800466a:	e169      	b.n	8004940 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800466c:	2201      	movs	r2, #1
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	429a      	cmp	r2, r3
 8004686:	f040 8158 	bne.w	800493a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	4a9a      	ldr	r2, [pc, #616]	; (80048f8 <HAL_GPIO_Init+0x2a0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d05e      	beq.n	8004752 <HAL_GPIO_Init+0xfa>
 8004694:	4a98      	ldr	r2, [pc, #608]	; (80048f8 <HAL_GPIO_Init+0x2a0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d875      	bhi.n	8004786 <HAL_GPIO_Init+0x12e>
 800469a:	4a98      	ldr	r2, [pc, #608]	; (80048fc <HAL_GPIO_Init+0x2a4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d058      	beq.n	8004752 <HAL_GPIO_Init+0xfa>
 80046a0:	4a96      	ldr	r2, [pc, #600]	; (80048fc <HAL_GPIO_Init+0x2a4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d86f      	bhi.n	8004786 <HAL_GPIO_Init+0x12e>
 80046a6:	4a96      	ldr	r2, [pc, #600]	; (8004900 <HAL_GPIO_Init+0x2a8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d052      	beq.n	8004752 <HAL_GPIO_Init+0xfa>
 80046ac:	4a94      	ldr	r2, [pc, #592]	; (8004900 <HAL_GPIO_Init+0x2a8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d869      	bhi.n	8004786 <HAL_GPIO_Init+0x12e>
 80046b2:	4a94      	ldr	r2, [pc, #592]	; (8004904 <HAL_GPIO_Init+0x2ac>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d04c      	beq.n	8004752 <HAL_GPIO_Init+0xfa>
 80046b8:	4a92      	ldr	r2, [pc, #584]	; (8004904 <HAL_GPIO_Init+0x2ac>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d863      	bhi.n	8004786 <HAL_GPIO_Init+0x12e>
 80046be:	4a92      	ldr	r2, [pc, #584]	; (8004908 <HAL_GPIO_Init+0x2b0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d046      	beq.n	8004752 <HAL_GPIO_Init+0xfa>
 80046c4:	4a90      	ldr	r2, [pc, #576]	; (8004908 <HAL_GPIO_Init+0x2b0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d85d      	bhi.n	8004786 <HAL_GPIO_Init+0x12e>
 80046ca:	2b12      	cmp	r3, #18
 80046cc:	d82a      	bhi.n	8004724 <HAL_GPIO_Init+0xcc>
 80046ce:	2b12      	cmp	r3, #18
 80046d0:	d859      	bhi.n	8004786 <HAL_GPIO_Init+0x12e>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <HAL_GPIO_Init+0x80>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	08004753 	.word	0x08004753
 80046dc:	0800472d 	.word	0x0800472d
 80046e0:	0800473f 	.word	0x0800473f
 80046e4:	08004781 	.word	0x08004781
 80046e8:	08004787 	.word	0x08004787
 80046ec:	08004787 	.word	0x08004787
 80046f0:	08004787 	.word	0x08004787
 80046f4:	08004787 	.word	0x08004787
 80046f8:	08004787 	.word	0x08004787
 80046fc:	08004787 	.word	0x08004787
 8004700:	08004787 	.word	0x08004787
 8004704:	08004787 	.word	0x08004787
 8004708:	08004787 	.word	0x08004787
 800470c:	08004787 	.word	0x08004787
 8004710:	08004787 	.word	0x08004787
 8004714:	08004787 	.word	0x08004787
 8004718:	08004787 	.word	0x08004787
 800471c:	08004735 	.word	0x08004735
 8004720:	08004749 	.word	0x08004749
 8004724:	4a79      	ldr	r2, [pc, #484]	; (800490c <HAL_GPIO_Init+0x2b4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800472a:	e02c      	b.n	8004786 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	623b      	str	r3, [r7, #32]
          break;
 8004732:	e029      	b.n	8004788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	3304      	adds	r3, #4
 800473a:	623b      	str	r3, [r7, #32]
          break;
 800473c:	e024      	b.n	8004788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	3308      	adds	r3, #8
 8004744:	623b      	str	r3, [r7, #32]
          break;
 8004746:	e01f      	b.n	8004788 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	330c      	adds	r3, #12
 800474e:	623b      	str	r3, [r7, #32]
          break;
 8004750:	e01a      	b.n	8004788 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800475a:	2304      	movs	r3, #4
 800475c:	623b      	str	r3, [r7, #32]
          break;
 800475e:	e013      	b.n	8004788 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d105      	bne.n	8004774 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004768:	2308      	movs	r3, #8
 800476a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	611a      	str	r2, [r3, #16]
          break;
 8004772:	e009      	b.n	8004788 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004774:	2308      	movs	r3, #8
 8004776:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	615a      	str	r2, [r3, #20]
          break;
 800477e:	e003      	b.n	8004788 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004780:	2300      	movs	r3, #0
 8004782:	623b      	str	r3, [r7, #32]
          break;
 8004784:	e000      	b.n	8004788 <HAL_GPIO_Init+0x130>
          break;
 8004786:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2bff      	cmp	r3, #255	; 0xff
 800478c:	d801      	bhi.n	8004792 <HAL_GPIO_Init+0x13a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	e001      	b.n	8004796 <HAL_GPIO_Init+0x13e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3304      	adds	r3, #4
 8004796:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2bff      	cmp	r3, #255	; 0xff
 800479c:	d802      	bhi.n	80047a4 <HAL_GPIO_Init+0x14c>
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	e002      	b.n	80047aa <HAL_GPIO_Init+0x152>
 80047a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a6:	3b08      	subs	r3, #8
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	210f      	movs	r1, #15
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	401a      	ands	r2, r3
 80047bc:	6a39      	ldr	r1, [r7, #32]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	431a      	orrs	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80b1 	beq.w	800493a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80047d8:	4b4d      	ldr	r3, [pc, #308]	; (8004910 <HAL_GPIO_Init+0x2b8>)
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	4a4c      	ldr	r2, [pc, #304]	; (8004910 <HAL_GPIO_Init+0x2b8>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6193      	str	r3, [r2, #24]
 80047e4:	4b4a      	ldr	r3, [pc, #296]	; (8004910 <HAL_GPIO_Init+0x2b8>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80047f0:	4a48      	ldr	r2, [pc, #288]	; (8004914 <HAL_GPIO_Init+0x2bc>)
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	089b      	lsrs	r3, r3, #2
 80047f6:	3302      	adds	r3, #2
 80047f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	f003 0303 	and.w	r3, r3, #3
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	220f      	movs	r2, #15
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4013      	ands	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a40      	ldr	r2, [pc, #256]	; (8004918 <HAL_GPIO_Init+0x2c0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <HAL_GPIO_Init+0x1ec>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a3f      	ldr	r2, [pc, #252]	; (800491c <HAL_GPIO_Init+0x2c4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00d      	beq.n	8004840 <HAL_GPIO_Init+0x1e8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a3e      	ldr	r2, [pc, #248]	; (8004920 <HAL_GPIO_Init+0x2c8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d007      	beq.n	800483c <HAL_GPIO_Init+0x1e4>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a3d      	ldr	r2, [pc, #244]	; (8004924 <HAL_GPIO_Init+0x2cc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_GPIO_Init+0x1e0>
 8004834:	2303      	movs	r3, #3
 8004836:	e006      	b.n	8004846 <HAL_GPIO_Init+0x1ee>
 8004838:	2304      	movs	r3, #4
 800483a:	e004      	b.n	8004846 <HAL_GPIO_Init+0x1ee>
 800483c:	2302      	movs	r3, #2
 800483e:	e002      	b.n	8004846 <HAL_GPIO_Init+0x1ee>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <HAL_GPIO_Init+0x1ee>
 8004844:	2300      	movs	r3, #0
 8004846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004848:	f002 0203 	and.w	r2, r2, #3
 800484c:	0092      	lsls	r2, r2, #2
 800484e:	4093      	lsls	r3, r2
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004856:	492f      	ldr	r1, [pc, #188]	; (8004914 <HAL_GPIO_Init+0x2bc>)
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	3302      	adds	r3, #2
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d006      	beq.n	800487e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004870:	4b2d      	ldr	r3, [pc, #180]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	492c      	ldr	r1, [pc, #176]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4313      	orrs	r3, r2
 800487a:	600b      	str	r3, [r1, #0]
 800487c:	e006      	b.n	800488c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800487e:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	43db      	mvns	r3, r3
 8004886:	4928      	ldr	r1, [pc, #160]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 8004888:	4013      	ands	r3, r2
 800488a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d006      	beq.n	80048a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004898:	4b23      	ldr	r3, [pc, #140]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	4922      	ldr	r1, [pc, #136]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	604b      	str	r3, [r1, #4]
 80048a4:	e006      	b.n	80048b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	491e      	ldr	r1, [pc, #120]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d006      	beq.n	80048ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80048c0:	4b19      	ldr	r3, [pc, #100]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	4918      	ldr	r1, [pc, #96]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	608b      	str	r3, [r1, #8]
 80048cc:	e006      	b.n	80048dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048ce:	4b16      	ldr	r3, [pc, #88]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	4914      	ldr	r1, [pc, #80]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 80048d8:	4013      	ands	r3, r2
 80048da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d021      	beq.n	800492c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048e8:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	490e      	ldr	r1, [pc, #56]	; (8004928 <HAL_GPIO_Init+0x2d0>)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60cb      	str	r3, [r1, #12]
 80048f4:	e021      	b.n	800493a <HAL_GPIO_Init+0x2e2>
 80048f6:	bf00      	nop
 80048f8:	10320000 	.word	0x10320000
 80048fc:	10310000 	.word	0x10310000
 8004900:	10220000 	.word	0x10220000
 8004904:	10210000 	.word	0x10210000
 8004908:	10120000 	.word	0x10120000
 800490c:	10110000 	.word	0x10110000
 8004910:	40021000 	.word	0x40021000
 8004914:	40010000 	.word	0x40010000
 8004918:	40010800 	.word	0x40010800
 800491c:	40010c00 	.word	0x40010c00
 8004920:	40011000 	.word	0x40011000
 8004924:	40011400 	.word	0x40011400
 8004928:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HAL_GPIO_Init+0x304>)
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	43db      	mvns	r3, r3
 8004934:	4909      	ldr	r1, [pc, #36]	; (800495c <HAL_GPIO_Init+0x304>)
 8004936:	4013      	ands	r3, r2
 8004938:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	3301      	adds	r3, #1
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	f47f ae8e 	bne.w	800466c <HAL_GPIO_Init+0x14>
  }
}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	372c      	adds	r7, #44	; 0x2c
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	40010400 	.word	0x40010400

08004960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	807b      	strh	r3, [r7, #2]
 800496c:	4613      	mov	r3, r2
 800496e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004970:	787b      	ldrb	r3, [r7, #1]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004976:	887a      	ldrh	r2, [r7, #2]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800497c:	e003      	b.n	8004986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800497e:	887b      	ldrh	r3, [r7, #2]
 8004980:	041a      	lsls	r2, r3, #16
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	611a      	str	r2, [r3, #16]
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049a2:	887a      	ldrh	r2, [r7, #2]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	041a      	lsls	r2, r3, #16
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	43d9      	mvns	r1, r3
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	400b      	ands	r3, r1
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	611a      	str	r2, [r3, #16]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d006      	beq.n	80049e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049da:	4a05      	ldr	r2, [pc, #20]	; (80049f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049dc:	88fb      	ldrh	r3, [r7, #6]
 80049de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fc fe38 	bl	8001658 <HAL_GPIO_EXTI_Callback>
  }
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40010400 	.word	0x40010400

080049f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f6:	b08b      	sub	sp, #44	; 0x2c
 80049f8:	af06      	add	r7, sp, #24
 80049fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0fd      	b.n	8004c02 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f007 ff40 	bl	800c8a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2203      	movs	r2, #3
 8004a24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f003 fc10 	bl	8008252 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	603b      	str	r3, [r7, #0]
 8004a38:	687e      	ldr	r6, [r7, #4]
 8004a3a:	466d      	mov	r5, sp
 8004a3c:	f106 0410 	add.w	r4, r6, #16
 8004a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	1d33      	adds	r3, r6, #4
 8004a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a4c:	6838      	ldr	r0, [r7, #0]
 8004a4e:	f003 fbda 	bl	8008206 <USB_CoreInit>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0ce      	b.n	8004c02 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f003 fc0b 	bl	8008286 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a70:	2300      	movs	r3, #0
 8004a72:	73fb      	strb	r3, [r7, #15]
 8004a74:	e04c      	b.n	8004b10 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	440b      	add	r3, r1
 8004a86:	3301      	adds	r3, #1
 8004a88:	2201      	movs	r2, #1
 8004a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	440b      	add	r3, r1
 8004a9c:	7bfa      	ldrb	r2, [r7, #15]
 8004a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
 8004aa4:	b298      	uxth	r0, r3
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	440b      	add	r3, r1
 8004ab2:	3336      	adds	r3, #54	; 0x36
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	440b      	add	r3, r1
 8004ac8:	3303      	adds	r3, #3
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ace:	7bfa      	ldrb	r2, [r7, #15]
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	440b      	add	r3, r1
 8004adc:	3338      	adds	r3, #56	; 0x38
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ae2:	7bfa      	ldrb	r2, [r7, #15]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	440b      	add	r3, r1
 8004af0:	333c      	adds	r3, #60	; 0x3c
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	440b      	add	r3, r1
 8004b04:	3340      	adds	r3, #64	; 0x40
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	73fb      	strb	r3, [r7, #15]
 8004b10:	7bfa      	ldrb	r2, [r7, #15]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d3ad      	bcc.n	8004a76 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
 8004b1e:	e044      	b.n	8004baa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b20:	7bfa      	ldrb	r2, [r7, #15]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	440b      	add	r3, r1
 8004b2e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b36:	7bfa      	ldrb	r2, [r7, #15]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b48:	7bfa      	ldrb	r2, [r7, #15]
 8004b4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b4c:	7bfa      	ldrb	r2, [r7, #15]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	440b      	add	r3, r1
 8004b5a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b62:	7bfa      	ldrb	r2, [r7, #15]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	440b      	add	r3, r1
 8004b70:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b78:	7bfa      	ldrb	r2, [r7, #15]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	440b      	add	r3, r1
 8004b86:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b8e:	7bfa      	ldrb	r2, [r7, #15]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	440b      	add	r3, r1
 8004b9c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
 8004baa:	7bfa      	ldrb	r2, [r7, #15]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d3b5      	bcc.n	8004b20 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	687e      	ldr	r6, [r7, #4]
 8004bbc:	466d      	mov	r5, sp
 8004bbe:	f106 0410 	add.w	r4, r6, #16
 8004bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	602b      	str	r3, [r5, #0]
 8004bca:	1d33      	adds	r3, r6, #4
 8004bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bce:	6838      	ldr	r0, [r7, #0]
 8004bd0:	f003 fb65 	bl	800829e <USB_DevInit>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e00d      	b.n	8004c02 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f006 f818 	bl	800ac30 <USB_DevDisconnect>

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b082      	sub	sp, #8
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_PCD_Start+0x16>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e016      	b.n	8004c4e <HAL_PCD_Start+0x44>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f003 fafa 	bl	8008226 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004c32:	2101      	movs	r1, #1
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f008 f8ae 	bl	800cd96 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f005 ffec 	bl	800ac1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b088      	sub	sp, #32
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f005 ffee 	bl	800ac44 <USB_ReadInterrupts>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c72:	d102      	bne.n	8004c7a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fb5f 	bl	8005338 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f005 ffe0 	bl	800ac44 <USB_ReadInterrupts>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8e:	d112      	bne.n	8004cb6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca2:	b292      	uxth	r2, r2
 8004ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f007 fe7c 	bl	800c9a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004cae:	2100      	movs	r1, #0
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f923 	bl	8004efc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f005 ffc2 	bl	800ac44 <USB_ReadInterrupts>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cca:	d10b      	bne.n	8004ce4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f005 ffab 	bl	800ac44 <USB_ReadInterrupts>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf8:	d10b      	bne.n	8004d12 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d0c:	b292      	uxth	r2, r2
 8004d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f005 ff94 	bl	800ac44 <USB_ReadInterrupts>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d26:	d126      	bne.n	8004d76 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0204 	bic.w	r2, r2, #4
 8004d3a:	b292      	uxth	r2, r2
 8004d3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0208 	bic.w	r2, r2, #8
 8004d52:	b292      	uxth	r2, r2
 8004d54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f007 fe5d 	bl	800ca18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d70:	b292      	uxth	r2, r2
 8004d72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f005 ff62 	bl	800ac44 <USB_ReadInterrupts>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8a:	f040 8082 	bne.w	8004e92 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8004d8e:	2300      	movs	r3, #0
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e010      	b.n	8004db6 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	461a      	mov	r2, r3
 8004d9a:	7ffb      	ldrb	r3, [r7, #31]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	7ffb      	ldrb	r3, [r7, #31]
 8004da2:	8812      	ldrh	r2, [r2, #0]
 8004da4:	b292      	uxth	r2, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	3320      	adds	r3, #32
 8004daa:	443b      	add	r3, r7
 8004dac:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004db0:	7ffb      	ldrb	r3, [r7, #31]
 8004db2:	3301      	adds	r3, #1
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	7ffb      	ldrb	r3, [r7, #31]
 8004db8:	2b07      	cmp	r3, #7
 8004dba:	d9eb      	bls.n	8004d94 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	b292      	uxth	r2, r2
 8004dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	b292      	uxth	r2, r2
 8004de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004dec:	bf00      	nop
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f6      	beq.n	8004dee <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	b292      	uxth	r2, r2
 8004e14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004e18:	2300      	movs	r3, #0
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e00f      	b.n	8004e3e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004e1e:	7ffb      	ldrb	r3, [r7, #31]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	4611      	mov	r1, r2
 8004e26:	7ffa      	ldrb	r2, [r7, #31]
 8004e28:	0092      	lsls	r2, r2, #2
 8004e2a:	440a      	add	r2, r1
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	3320      	adds	r3, #32
 8004e30:	443b      	add	r3, r7
 8004e32:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004e36:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004e38:	7ffb      	ldrb	r3, [r7, #31]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	7ffb      	ldrb	r3, [r7, #31]
 8004e40:	2b07      	cmp	r3, #7
 8004e42:	d9ec      	bls.n	8004e1e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0208 	orr.w	r2, r2, #8
 8004e56:	b292      	uxth	r2, r2
 8004e58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0204 	orr.w	r2, r2, #4
 8004e86:	b292      	uxth	r2, r2
 8004e88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f007 fda9 	bl	800c9e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f005 fed4 	bl	800ac44 <USB_ReadInterrupts>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea6:	d10e      	bne.n	8004ec6 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004eba:	b292      	uxth	r2, r2
 8004ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f007 fd62 	bl	800c98a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f005 feba 	bl	800ac44 <USB_ReadInterrupts>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eda:	d10b      	bne.n	8004ef4 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_PCD_SetAddress+0x1a>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e013      	b.n	8004f3e <HAL_PCD_SetAddress+0x42>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f005 fe61 	bl	800abf6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	4608      	mov	r0, r1
 8004f50:	4611      	mov	r1, r2
 8004f52:	461a      	mov	r2, r3
 8004f54:	4603      	mov	r3, r0
 8004f56:	70fb      	strb	r3, [r7, #3]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	803b      	strh	r3, [r7, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	da0e      	bge.n	8004f8a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4413      	add	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	705a      	strb	r2, [r3, #1]
 8004f88:	e00e      	b.n	8004fa8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	f003 0207 	and.w	r2, r3, #7
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004fb4:	883a      	ldrh	r2, [r7, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	78ba      	ldrb	r2, [r7, #2]
 8004fbe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004fd2:	78bb      	ldrb	r3, [r7, #2]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d102      	bne.n	8004fde <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_PCD_EP_Open+0xa6>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e00e      	b.n	800500a <HAL_PCD_EP_Open+0xc4>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68f9      	ldr	r1, [r7, #12]
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f003 f970 	bl	80082e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005008:	7afb      	ldrb	r3, [r7, #11]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b084      	sub	sp, #16
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	460b      	mov	r3, r1
 800501c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800501e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005022:	2b00      	cmp	r3, #0
 8005024:	da0e      	bge.n	8005044 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4413      	add	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	705a      	strb	r2, [r3, #1]
 8005042:	e00e      	b.n	8005062 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	f003 0207 	and.w	r2, r3, #7
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	4413      	add	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_PCD_EP_Close+0x6a>
 8005078:	2302      	movs	r3, #2
 800507a:	e00e      	b.n	800509a <HAL_PCD_EP_Close+0x88>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	4618      	mov	r0, r3
 800508c:	f003 fc92 	bl	80089b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b086      	sub	sp, #24
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	60f8      	str	r0, [r7, #12]
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	603b      	str	r3, [r7, #0]
 80050ae:	460b      	mov	r3, r1
 80050b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050b2:	7afb      	ldrb	r3, [r7, #11]
 80050b4:	f003 0207 	and.w	r2, r3, #7
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2200      	movs	r2, #0
 80050e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050ee:	7afb      	ldrb	r3, [r7, #11]
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6979      	ldr	r1, [r7, #20]
 80050fe:	4618      	mov	r0, r3
 8005100:	f003 fe44 	bl	8008d8c <USB_EPStartXfer>
 8005104:	e005      	b.n	8005112 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6979      	ldr	r1, [r7, #20]
 800510c:	4618      	mov	r0, r3
 800510e:	f003 fe3d 	bl	8008d8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	f003 0207 	and.w	r2, r3, #7
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	440b      	add	r3, r1
 800513a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800513e:	681b      	ldr	r3, [r3, #0]
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr

0800514a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b086      	sub	sp, #24
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	460b      	mov	r3, r1
 8005158:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800515a:	7afb      	ldrb	r3, [r7, #11]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4413      	add	r3, r2
 800516e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2200      	movs	r2, #0
 800518e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2201      	movs	r2, #1
 8005194:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005196:	7afb      	ldrb	r3, [r7, #11]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	b2da      	uxtb	r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051a2:	7afb      	ldrb	r3, [r7, #11]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6979      	ldr	r1, [r7, #20]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f003 fdea 	bl	8008d8c <USB_EPStartXfer>
 80051b8:	e005      	b.n	80051c6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6979      	ldr	r1, [r7, #20]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f003 fde3 	bl	8008d8c <USB_EPStartXfer>
  }

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	f003 0207 	and.w	r2, r3, #7
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d901      	bls.n	80051ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e04c      	b.n	8005288 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	da0e      	bge.n	8005214 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051f6:	78fb      	ldrb	r3, [r7, #3]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	4413      	add	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	705a      	strb	r2, [r3, #1]
 8005212:	e00c      	b.n	800522e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	4413      	add	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	b2da      	uxtb	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_PCD_EP_SetStall+0x7e>
 800524a:	2302      	movs	r3, #2
 800524c:	e01c      	b.n	8005288 <HAL_PCD_EP_SetStall+0xb8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68f9      	ldr	r1, [r7, #12]
 800525c:	4618      	mov	r0, r3
 800525e:	f005 fbcd 	bl	800a9fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	2b00      	cmp	r3, #0
 800526a:	d108      	bne.n	800527e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f005 fcf2 	bl	800ac62 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	f003 020f 	and.w	r2, r3, #15
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d901      	bls.n	80052ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e040      	b.n	8005330 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	da0e      	bge.n	80052d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	705a      	strb	r2, [r3, #1]
 80052d2:	e00e      	b.n	80052f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	f003 0207 	and.w	r2, r3, #7
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_PCD_EP_ClrStall+0x82>
 800530e:	2302      	movs	r3, #2
 8005310:	e00e      	b.n	8005330 <HAL_PCD_EP_ClrStall+0xa0>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68f9      	ldr	r1, [r7, #12]
 8005320:	4618      	mov	r0, r3
 8005322:	f005 fbbb 	bl	800aa9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08e      	sub	sp, #56	; 0x38
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005340:	e2ec      	b.n	800591c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800534a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800534c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005358:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800535c:	2b00      	cmp	r3, #0
 800535e:	f040 8161 	bne.w	8005624 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005362:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d152      	bne.n	8005412 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	81fb      	strh	r3, [r7, #14]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	89fb      	ldrh	r3, [r7, #14]
 8005384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538c:	b29b      	uxth	r3, r3
 800538e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3328      	adds	r3, #40	; 0x28
 8005394:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	4413      	add	r3, r2
 80053aa:	3302      	adds	r3, #2
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	441a      	add	r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80053d0:	2100      	movs	r1, #0
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f007 fabf 	bl	800c956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 829b 	beq.w	800591c <PCD_EP_ISR_Handler+0x5e4>
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f040 8296 	bne.w	800591c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	b292      	uxth	r2, r2
 8005404:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005410:	e284      	b.n	800591c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005422:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005428:	2b00      	cmp	r3, #0
 800542a:	d034      	beq.n	8005496 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005434:	b29b      	uxth	r3, r3
 8005436:	461a      	mov	r2, r3
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	4413      	add	r3, r2
 8005440:	3306      	adds	r3, #6
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6818      	ldr	r0, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800546a:	b29b      	uxth	r3, r3
 800546c:	f005 fc49 	bl	800ad02 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29a      	uxth	r2, r3
 8005478:	f640 738f 	movw	r3, #3983	; 0xf8f
 800547c:	4013      	ands	r3, r2
 800547e:	823b      	strh	r3, [r7, #16]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	8a3a      	ldrh	r2, [r7, #16]
 8005486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800548a:	b292      	uxth	r2, r2
 800548c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f007 fa34 	bl	800c8fc <HAL_PCD_SetupStageCallback>
 8005494:	e242      	b.n	800591c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005496:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800549a:	2b00      	cmp	r3, #0
 800549c:	f280 823e 	bge.w	800591c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80054ac:	4013      	ands	r3, r2
 80054ae:	83bb      	strh	r3, [r7, #28]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	8bba      	ldrh	r2, [r7, #28]
 80054b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054ba:	b292      	uxth	r2, r2
 80054bc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4413      	add	r3, r2
 80054d2:	3306      	adds	r3, #6
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6812      	ldr	r2, [r2, #0]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80054ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d019      	beq.n	8005526 <PCD_EP_ISR_Handler+0x1ee>
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d015      	beq.n	8005526 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	6959      	ldr	r1, [r3, #20]
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800550a:	b29b      	uxth	r3, r3
 800550c:	f005 fbf9 	bl	800ad02 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	441a      	add	r2, r3
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800551e:	2100      	movs	r1, #0
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f007 f9fd 	bl	800c920 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005532:	2b00      	cmp	r3, #0
 8005534:	f040 81f2 	bne.w	800591c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	61bb      	str	r3, [r7, #24]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005546:	b29b      	uxth	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	4413      	add	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d112      	bne.n	8005586 <PCD_EP_ISR_Handler+0x24e>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800556a:	b29a      	uxth	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800557e:	b29a      	uxth	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	e02f      	b.n	80055e6 <PCD_EP_ISR_Handler+0x2ae>
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b3e      	cmp	r3, #62	; 0x3e
 800558c:	d813      	bhi.n	80055b6 <PCD_EP_ISR_Handler+0x27e>
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	633b      	str	r3, [r7, #48]	; 0x30
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <PCD_EP_ISR_Handler+0x270>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	3301      	adds	r3, #1
 80055a6:	633b      	str	r3, [r7, #48]	; 0x30
 80055a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	029b      	lsls	r3, r3, #10
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e017      	b.n	80055e6 <PCD_EP_ISR_Handler+0x2ae>
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <PCD_EP_ISR_Handler+0x298>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	3b01      	subs	r3, #1
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	029b      	lsls	r3, r3, #10
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f6:	827b      	strh	r3, [r7, #18]
 80055f8:	8a7b      	ldrh	r3, [r7, #18]
 80055fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055fe:	827b      	strh	r3, [r7, #18]
 8005600:	8a7b      	ldrh	r3, [r7, #18]
 8005602:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005606:	827b      	strh	r3, [r7, #18]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	8a7b      	ldrh	r3, [r7, #18]
 800560e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]
 8005622:	e17b      	b.n	800591c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005636:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800563a:	2b00      	cmp	r3, #0
 800563c:	f280 80ea 	bge.w	8005814 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29a      	uxth	r2, r3
 8005652:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005656:	4013      	ands	r3, r2
 8005658:	853b      	strh	r3, [r7, #40]	; 0x28
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800566a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800566e:	b292      	uxth	r2, r2
 8005670:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005672:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4413      	add	r3, r2
 8005686:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	7b1b      	ldrb	r3, [r3, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d122      	bne.n	80056d6 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005698:	b29b      	uxth	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4413      	add	r3, r2
 80056a4:	3306      	adds	r3, #6
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056b8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80056ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8087 	beq.w	80057d0 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	6959      	ldr	r1, [r3, #20]
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	88da      	ldrh	r2, [r3, #6]
 80056ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056d0:	f005 fb17 	bl	800ad02 <USB_ReadPMA>
 80056d4:	e07c      	b.n	80057d0 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	78db      	ldrb	r3, [r3, #3]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d108      	bne.n	80056f0 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80056de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056e0:	461a      	mov	r2, r3
 80056e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f927 	bl	8005938 <HAL_PCD_EP_DB_Receive>
 80056ea:	4603      	mov	r3, r0
 80056ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80056ee:	e06f      	b.n	80057d0 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570a:	847b      	strh	r3, [r7, #34]	; 0x22
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	441a      	add	r2, r3
 800571a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800571c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005728:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800572c:	b29b      	uxth	r3, r3
 800572e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d021      	beq.n	800578e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005752:	b29b      	uxth	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4413      	add	r3, r2
 800575e:	3302      	adds	r3, #2
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6812      	ldr	r2, [r2, #0]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005772:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005774:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005776:	2b00      	cmp	r3, #0
 8005778:	d02a      	beq.n	80057d0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	6959      	ldr	r1, [r3, #20]
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	891a      	ldrh	r2, [r3, #8]
 8005786:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005788:	f005 fabb 	bl	800ad02 <USB_ReadPMA>
 800578c:	e020      	b.n	80057d0 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005796:	b29b      	uxth	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	3306      	adds	r3, #6
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057b6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80057b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	6959      	ldr	r1, [r3, #20]
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	895a      	ldrh	r2, [r3, #10]
 80057ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057cc:	f005 fa99 	bl	800ad02 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057d6:	441a      	add	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057e2:	441a      	add	r2, r3
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <PCD_EP_ISR_Handler+0x4c2>
 80057f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d206      	bcs.n	8005808 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f007 f88d 	bl	800c920 <HAL_PCD_DataOutStageCallback>
 8005806:	e005      	b.n	8005814 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800580e:	4618      	mov	r0, r3
 8005810:	f003 fabc 	bl	8008d8c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005814:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581a:	2b00      	cmp	r3, #0
 800581c:	d07e      	beq.n	800591c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800581e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	4413      	add	r3, r2
 8005830:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	843b      	strh	r3, [r7, #32]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	441a      	add	r2, r3
 800585c:	8c3b      	ldrh	r3, [r7, #32]
 800585e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005866:	b29b      	uxth	r3, r3
 8005868:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	78db      	ldrb	r3, [r3, #3]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d00c      	beq.n	800588c <PCD_EP_ISR_Handler+0x554>
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	78db      	ldrb	r3, [r3, #3]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d008      	beq.n	800588c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800587e:	2b02      	cmp	r3, #2
 8005880:	d146      	bne.n	8005910 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005882:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d141      	bne.n	8005910 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005894:	b29b      	uxth	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4413      	add	r3, r2
 80058a0:	3302      	adds	r3, #2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	8bfb      	ldrh	r3, [r7, #30]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d906      	bls.n	80058ce <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	8bfb      	ldrh	r3, [r7, #30]
 80058c6:	1ad2      	subs	r2, r2, r3
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	619a      	str	r2, [r3, #24]
 80058cc:	e002      	b.n	80058d4 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	2200      	movs	r2, #0
 80058d2:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d106      	bne.n	80058ea <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f007 f837 	bl	800c956 <HAL_PCD_DataInStageCallback>
 80058e8:	e018      	b.n	800591c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	695a      	ldr	r2, [r3, #20]
 80058ee:	8bfb      	ldrh	r3, [r7, #30]
 80058f0:	441a      	add	r2, r3
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	69da      	ldr	r2, [r3, #28]
 80058fa:	8bfb      	ldrh	r3, [r7, #30]
 80058fc:	441a      	add	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005908:	4618      	mov	r0, r3
 800590a:	f003 fa3f 	bl	8008d8c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800590e:	e005      	b.n	800591c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005910:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005912:	461a      	mov	r2, r3
 8005914:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f91b 	bl	8005b52 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005924:	b29b      	uxth	r3, r3
 8005926:	b21b      	sxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	f6ff ad0a 	blt.w	8005342 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3738      	adds	r7, #56	; 0x38
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	4613      	mov	r3, r2
 8005944:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d07e      	beq.n	8005a4e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	3302      	adds	r3, #2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005978:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	8b7b      	ldrh	r3, [r7, #26]
 8005980:	429a      	cmp	r2, r3
 8005982:	d306      	bcc.n	8005992 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	8b7b      	ldrh	r3, [r7, #26]
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	619a      	str	r2, [r3, #24]
 8005990:	e002      	b.n	8005998 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d123      	bne.n	80059e8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	833b      	strh	r3, [r7, #24]
 80059bc:	8b3b      	ldrh	r3, [r7, #24]
 80059be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80059c2:	833b      	strh	r3, [r7, #24]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	441a      	add	r2, r3
 80059d2:	8b3b      	ldrh	r3, [r7, #24]
 80059d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d01f      	beq.n	8005a32 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0c:	82fb      	strh	r3, [r7, #22]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	441a      	add	r2, r3
 8005a1c:	8afb      	ldrh	r3, [r7, #22]
 8005a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a32:	8b7b      	ldrh	r3, [r7, #26]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8087 	beq.w	8005b48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6959      	ldr	r1, [r3, #20]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	891a      	ldrh	r2, [r3, #8]
 8005a46:	8b7b      	ldrh	r3, [r7, #26]
 8005a48:	f005 f95b 	bl	800ad02 <USB_ReadPMA>
 8005a4c:	e07c      	b.n	8005b48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	4413      	add	r3, r2
 8005a62:	3306      	adds	r3, #6
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a76:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	699a      	ldr	r2, [r3, #24]
 8005a7c:	8b7b      	ldrh	r3, [r7, #26]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d306      	bcc.n	8005a90 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	8b7b      	ldrh	r3, [r7, #26]
 8005a88:	1ad2      	subs	r2, r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	619a      	str	r2, [r3, #24]
 8005a8e:	e002      	b.n	8005a96 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2200      	movs	r2, #0
 8005a94:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d123      	bne.n	8005ae6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab8:	83fb      	strh	r3, [r7, #30]
 8005aba:	8bfb      	ldrh	r3, [r7, #30]
 8005abc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ac0:	83fb      	strh	r3, [r7, #30]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	441a      	add	r2, r3
 8005ad0:	8bfb      	ldrh	r3, [r7, #30]
 8005ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d11f      	bne.n	8005b30 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	4413      	add	r3, r2
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b0a:	83bb      	strh	r3, [r7, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	441a      	add	r2, r3
 8005b1a:	8bbb      	ldrh	r3, [r7, #28]
 8005b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005b30:	8b7b      	ldrh	r3, [r7, #26]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d008      	beq.n	8005b48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6959      	ldr	r1, [r3, #20]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	895a      	ldrh	r2, [r3, #10]
 8005b42:	8b7b      	ldrh	r3, [r7, #26]
 8005b44:	f005 f8dd 	bl	800ad02 <USB_ReadPMA>
    }
  }

  return count;
 8005b48:	8b7b      	ldrh	r3, [r7, #26]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3720      	adds	r7, #32
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b0a2      	sub	sp, #136	; 0x88
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	60f8      	str	r0, [r7, #12]
 8005b5a:	60b9      	str	r1, [r7, #8]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 81c7 	beq.w	8005efa <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	3302      	adds	r3, #2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	699a      	ldr	r2, [r3, #24]
 8005b9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d907      	bls.n	8005bb4 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bac:	1ad2      	subs	r2, r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	619a      	str	r2, [r3, #24]
 8005bb2:	e002      	b.n	8005bba <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f040 80b9 	bne.w	8005d36 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d126      	bne.n	8005c1a <HAL_PCD_EP_DB_Transmit+0xc8>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	4413      	add	r3, r2
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	011a      	lsls	r2, r3, #4
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	4413      	add	r3, r2
 8005bee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	e01a      	b.n	8005c50 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d116      	bne.n	8005c50 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	633b      	str	r3, [r7, #48]	; 0x30
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	461a      	mov	r2, r3
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	4413      	add	r3, r2
 8005c38:	633b      	str	r3, [r7, #48]	; 0x30
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	011a      	lsls	r2, r3, #4
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	4413      	add	r3, r2
 8005c44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	623b      	str	r3, [r7, #32]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d126      	bne.n	8005cac <HAL_PCD_EP_DB_Transmit+0x15a>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	4413      	add	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	011a      	lsls	r2, r3, #4
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	801a      	strh	r2, [r3, #0]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	801a      	strh	r2, [r3, #0]
 8005caa:	e017      	b.n	8005cdc <HAL_PCD_EP_DB_Transmit+0x18a>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	785b      	ldrb	r3, [r3, #1]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d113      	bne.n	8005cdc <HAL_PCD_EP_DB_Transmit+0x18a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	623b      	str	r3, [r7, #32]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	011a      	lsls	r2, r3, #4
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f006 fe37 	bl	800c956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 82d4 	beq.w	800629c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	827b      	strh	r3, [r7, #18]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	441a      	add	r2, r3
 8005d1e:	8a7b      	ldrh	r3, [r7, #18]
 8005d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	8013      	strh	r3, [r2, #0]
 8005d34:	e2b2      	b.n	800629c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d021      	beq.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	441a      	add	r2, r3
 8005d6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	f040 8286 	bne.w	800629c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d98:	441a      	add	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	69da      	ldr	r2, [r3, #28]
 8005da2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005da6:	441a      	add	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6a1a      	ldr	r2, [r3, #32]
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d309      	bcc.n	8005dcc <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc4:	1ad2      	subs	r2, r2, r3
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	621a      	str	r2, [r3, #32]
 8005dca:	e015      	b.n	8005df8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d107      	bne.n	8005de4 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005dd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005dd8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005de2:	e009      	b.n	8005df8 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2200      	movs	r2, #0
 8005df6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	785b      	ldrb	r3, [r3, #1]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d155      	bne.n	8005eac <HAL_PCD_EP_DB_Transmit+0x35a>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e14:	4413      	add	r3, r2
 8005e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	011a      	lsls	r2, r3, #4
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e20:	4413      	add	r3, r2
 8005e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
 8005e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d112      	bne.n	8005e54 <HAL_PCD_EP_DB_Transmit+0x302>
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	801a      	strh	r2, [r3, #0]
 8005e52:	e047      	b.n	8005ee4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e56:	2b3e      	cmp	r3, #62	; 0x3e
 8005e58:	d811      	bhi.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x32c>
 8005e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_PCD_EP_DB_Transmit+0x31e>
 8005e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	029b      	lsls	r3, r3, #10
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	e032      	b.n	8005ee4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <HAL_PCD_EP_DB_Transmit+0x342>
 8005e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e90:	3b01      	subs	r3, #1
 8005e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	e01b      	b.n	8005ee4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d117      	bne.n	8005ee4 <HAL_PCD_EP_DB_Transmit+0x392>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec8:	4413      	add	r3, r2
 8005eca:	643b      	str	r3, [r7, #64]	; 0x40
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	011a      	lsls	r2, r3, #4
 8005ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6959      	ldr	r1, [r3, #20]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	891a      	ldrh	r2, [r3, #8]
 8005ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f004 fec0 	bl	800ac78 <USB_WritePMA>
 8005ef8:	e1d0      	b.n	800629c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3306      	adds	r3, #6
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d307      	bcc.n	8005f42 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	699a      	ldr	r2, [r3, #24]
 8005f36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	619a      	str	r2, [r3, #24]
 8005f40:	e002      	b.n	8005f48 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f040 80c4 	bne.w	80060da <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d126      	bne.n	8005fa8 <HAL_PCD_EP_DB_Transmit+0x456>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6e:	4413      	add	r3, r2
 8005f70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	011a      	lsls	r2, r3, #4
 8005f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	e01a      	b.n	8005fde <HAL_PCD_EP_DB_Transmit+0x48c>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d116      	bne.n	8005fde <HAL_PCD_EP_DB_Transmit+0x48c>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	677b      	str	r3, [r7, #116]	; 0x74
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc4:	4413      	add	r3, r2
 8005fc6:	677b      	str	r3, [r7, #116]	; 0x74
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	011a      	lsls	r2, r3, #4
 8005fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fd6:	673b      	str	r3, [r7, #112]	; 0x70
 8005fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fda:	2200      	movs	r2, #0
 8005fdc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d12f      	bne.n	800604c <HAL_PCD_EP_DB_Transmit+0x4fa>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006004:	4413      	add	r3, r2
 8006006:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	011a      	lsls	r2, r3, #4
 8006010:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006014:	4413      	add	r3, r2
 8006016:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800601a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800601e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800602a:	b29a      	uxth	r2, r3
 800602c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006042:	b29a      	uxth	r2, r3
 8006044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	e017      	b.n	800607c <HAL_PCD_EP_DB_Transmit+0x52a>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d113      	bne.n	800607c <HAL_PCD_EP_DB_Transmit+0x52a>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605c:	b29b      	uxth	r3, r3
 800605e:	461a      	mov	r2, r3
 8006060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006062:	4413      	add	r3, r2
 8006064:	67bb      	str	r3, [r7, #120]	; 0x78
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	011a      	lsls	r2, r3, #4
 800606c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800606e:	4413      	add	r3, r2
 8006070:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006074:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006076:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006078:	2200      	movs	r2, #0
 800607a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	4619      	mov	r1, r3
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f006 fc67 	bl	800c956 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800608e:	2b00      	cmp	r3, #0
 8006090:	f040 8104 	bne.w	800629c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80060c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]
 80060d8:	e0e0      	b.n	800629c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d121      	bne.n	8006128 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006124:	b29b      	uxth	r3, r3
 8006126:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800612e:	2b01      	cmp	r3, #1
 8006130:	f040 80b4 	bne.w	800629c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800613c:	441a      	add	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	69da      	ldr	r2, [r3, #28]
 8006146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800614a:	441a      	add	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	429a      	cmp	r2, r3
 800615a:	d309      	bcc.n	8006170 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6a1a      	ldr	r2, [r3, #32]
 8006166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006168:	1ad2      	subs	r2, r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	621a      	str	r2, [r3, #32]
 800616e:	e015      	b.n	800619c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d107      	bne.n	8006188 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8006178:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800617c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006186:	e009      	b.n	800619c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2200      	movs	r2, #0
 8006192:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	667b      	str	r3, [r7, #100]	; 0x64
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d155      	bne.n	8006256 <HAL_PCD_EP_DB_Transmit+0x704>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061be:	4413      	add	r3, r2
 80061c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	011a      	lsls	r2, r3, #4
 80061c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ca:	4413      	add	r3, r2
 80061cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80061d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d112      	bne.n	80061fe <HAL_PCD_EP_DB_Transmit+0x6ac>
 80061d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	e044      	b.n	8006288 <HAL_PCD_EP_DB_Transmit+0x736>
 80061fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006200:	2b3e      	cmp	r3, #62	; 0x3e
 8006202:	d811      	bhi.n	8006228 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	657b      	str	r3, [r7, #84]	; 0x54
 800620a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8006214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006216:	3301      	adds	r3, #1
 8006218:	657b      	str	r3, [r7, #84]	; 0x54
 800621a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800621c:	b29b      	uxth	r3, r3
 800621e:	029b      	lsls	r3, r3, #10
 8006220:	b29a      	uxth	r2, r3
 8006222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	e02f      	b.n	8006288 <HAL_PCD_EP_DB_Transmit+0x736>
 8006228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	657b      	str	r3, [r7, #84]	; 0x54
 800622e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	2b00      	cmp	r3, #0
 8006236:	d102      	bne.n	800623e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8006238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800623a:	3b01      	subs	r3, #1
 800623c:	657b      	str	r3, [r7, #84]	; 0x54
 800623e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006240:	b29b      	uxth	r3, r3
 8006242:	029b      	lsls	r3, r3, #10
 8006244:	b29b      	uxth	r3, r3
 8006246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800624a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624e:	b29a      	uxth	r2, r3
 8006250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	e018      	b.n	8006288 <HAL_PCD_EP_DB_Transmit+0x736>
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	785b      	ldrb	r3, [r3, #1]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d114      	bne.n	8006288 <HAL_PCD_EP_DB_Transmit+0x736>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006266:	b29b      	uxth	r3, r3
 8006268:	461a      	mov	r2, r3
 800626a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800626c:	4413      	add	r3, r2
 800626e:	667b      	str	r3, [r7, #100]	; 0x64
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	011a      	lsls	r2, r3, #4
 8006276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006278:	4413      	add	r3, r2
 800627a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800627e:	663b      	str	r3, [r7, #96]	; 0x60
 8006280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006282:	b29a      	uxth	r2, r3
 8006284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006286:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	6959      	ldr	r1, [r3, #20]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	895a      	ldrh	r2, [r3, #10]
 8006294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006296:	b29b      	uxth	r3, r3
 8006298:	f004 fcee 	bl	800ac78 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b6:	823b      	strh	r3, [r7, #16]
 80062b8:	8a3b      	ldrh	r3, [r7, #16]
 80062ba:	f083 0310 	eor.w	r3, r3, #16
 80062be:	823b      	strh	r3, [r7, #16]
 80062c0:	8a3b      	ldrh	r3, [r7, #16]
 80062c2:	f083 0320 	eor.w	r3, r3, #32
 80062c6:	823b      	strh	r3, [r7, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	441a      	add	r2, r3
 80062d6:	8a3b      	ldrh	r3, [r7, #16]
 80062d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3788      	adds	r7, #136	; 0x88
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b087      	sub	sp, #28
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	607b      	str	r3, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	817b      	strh	r3, [r7, #10]
 8006304:	4613      	mov	r3, r2
 8006306:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006308:	897b      	ldrh	r3, [r7, #10]
 800630a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006314:	897b      	ldrh	r3, [r7, #10]
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	4613      	mov	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	e009      	b.n	8006340 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800632c:	897a      	ldrh	r2, [r7, #10]
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006340:	893b      	ldrh	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d107      	bne.n	8006356 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2200      	movs	r2, #0
 800634a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	b29a      	uxth	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	80da      	strh	r2, [r3, #6]
 8006354:	e00b      	b.n	800636e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2201      	movs	r2, #1
 800635a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	b29a      	uxth	r2, r3
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	0c1b      	lsrs	r3, r3, #16
 8006368:	b29a      	uxth	r2, r3
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr
	...

0800637c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e272      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8087 	beq.w	80064aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800639c:	4b92      	ldr	r3, [pc, #584]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d00c      	beq.n	80063c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063a8:	4b8f      	ldr	r3, [pc, #572]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d112      	bne.n	80063da <HAL_RCC_OscConfig+0x5e>
 80063b4:	4b8c      	ldr	r3, [pc, #560]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c0:	d10b      	bne.n	80063da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c2:	4b89      	ldr	r3, [pc, #548]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d06c      	beq.n	80064a8 <HAL_RCC_OscConfig+0x12c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d168      	bne.n	80064a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e24c      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e2:	d106      	bne.n	80063f2 <HAL_RCC_OscConfig+0x76>
 80063e4:	4b80      	ldr	r3, [pc, #512]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a7f      	ldr	r2, [pc, #508]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	e02e      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10c      	bne.n	8006414 <HAL_RCC_OscConfig+0x98>
 80063fa:	4b7b      	ldr	r3, [pc, #492]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a7a      	ldr	r2, [pc, #488]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	4b78      	ldr	r3, [pc, #480]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a77      	ldr	r2, [pc, #476]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800640c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	e01d      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800641c:	d10c      	bne.n	8006438 <HAL_RCC_OscConfig+0xbc>
 800641e:	4b72      	ldr	r3, [pc, #456]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a71      	ldr	r2, [pc, #452]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	4b6f      	ldr	r3, [pc, #444]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6e      	ldr	r2, [pc, #440]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	e00b      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 8006438:	4b6b      	ldr	r3, [pc, #428]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a6a      	ldr	r2, [pc, #424]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800643e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b68      	ldr	r3, [pc, #416]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a67      	ldr	r2, [pc, #412]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800644a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d013      	beq.n	8006480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7fd ff76 	bl	8004348 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006460:	f7fd ff72 	bl	8004348 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	; 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e200      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006472:	4b5d      	ldr	r3, [pc, #372]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCC_OscConfig+0xe4>
 800647e:	e014      	b.n	80064aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006480:	f7fd ff62 	bl	8004348 <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006488:	f7fd ff5e 	bl	8004348 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b64      	cmp	r3, #100	; 0x64
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e1ec      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649a:	4b53      	ldr	r3, [pc, #332]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f0      	bne.n	8006488 <HAL_RCC_OscConfig+0x10c>
 80064a6:	e000      	b.n	80064aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d063      	beq.n	800657e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064b6:	4b4c      	ldr	r3, [pc, #304]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064c2:	4b49      	ldr	r3, [pc, #292]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 030c 	and.w	r3, r3, #12
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d11c      	bne.n	8006508 <HAL_RCC_OscConfig+0x18c>
 80064ce:	4b46      	ldr	r3, [pc, #280]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d116      	bne.n	8006508 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064da:	4b43      	ldr	r3, [pc, #268]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_RCC_OscConfig+0x176>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d001      	beq.n	80064f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e1c0      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f2:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4939      	ldr	r1, [pc, #228]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006502:	4313      	orrs	r3, r2
 8006504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006506:	e03a      	b.n	800657e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d020      	beq.n	8006552 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006510:	4b36      	ldr	r3, [pc, #216]	; (80065ec <HAL_RCC_OscConfig+0x270>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006516:	f7fd ff17 	bl	8004348 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800651e:	f7fd ff13 	bl	8004348 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e1a1      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006530:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653c:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4927      	ldr	r1, [pc, #156]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800654c:	4313      	orrs	r3, r2
 800654e:	600b      	str	r3, [r1, #0]
 8006550:	e015      	b.n	800657e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006552:	4b26      	ldr	r3, [pc, #152]	; (80065ec <HAL_RCC_OscConfig+0x270>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006558:	f7fd fef6 	bl	8004348 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006560:	f7fd fef2 	bl	8004348 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e180      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006572:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d03a      	beq.n	8006600 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d019      	beq.n	80065c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006592:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <HAL_RCC_OscConfig+0x274>)
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006598:	f7fd fed6 	bl	8004348 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a0:	f7fd fed2 	bl	8004348 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e160      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065be:	2001      	movs	r0, #1
 80065c0:	f000 faa6 	bl	8006b10 <RCC_Delay>
 80065c4:	e01c      	b.n	8006600 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c6:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <HAL_RCC_OscConfig+0x274>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065cc:	f7fd febc 	bl	8004348 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d2:	e00f      	b.n	80065f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d4:	f7fd feb8 	bl	8004348 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d908      	bls.n	80065f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e146      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
 80065e6:	bf00      	nop
 80065e8:	40021000 	.word	0x40021000
 80065ec:	42420000 	.word	0x42420000
 80065f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f4:	4b92      	ldr	r3, [pc, #584]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e9      	bne.n	80065d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80a6 	beq.w	800675a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660e:	2300      	movs	r3, #0
 8006610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006612:	4b8b      	ldr	r3, [pc, #556]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800661e:	4b88      	ldr	r3, [pc, #544]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	4a87      	ldr	r2, [pc, #540]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006628:	61d3      	str	r3, [r2, #28]
 800662a:	4b85      	ldr	r3, [pc, #532]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006636:	2301      	movs	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663a:	4b82      	ldr	r3, [pc, #520]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d118      	bne.n	8006678 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006646:	4b7f      	ldr	r3, [pc, #508]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a7e      	ldr	r2, [pc, #504]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 800664c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006652:	f7fd fe79 	bl	8004348 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665a:	f7fd fe75 	bl	8004348 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b64      	cmp	r3, #100	; 0x64
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e103      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	4b75      	ldr	r3, [pc, #468]	; (8006844 <HAL_RCC_OscConfig+0x4c8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d106      	bne.n	800668e <HAL_RCC_OscConfig+0x312>
 8006680:	4b6f      	ldr	r3, [pc, #444]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	4a6e      	ldr	r2, [pc, #440]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6213      	str	r3, [r2, #32]
 800668c:	e02d      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x334>
 8006696:	4b6a      	ldr	r3, [pc, #424]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	4a69      	ldr	r2, [pc, #420]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	6213      	str	r3, [r2, #32]
 80066a2:	4b67      	ldr	r3, [pc, #412]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	4a66      	ldr	r2, [pc, #408]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066a8:	f023 0304 	bic.w	r3, r3, #4
 80066ac:	6213      	str	r3, [r2, #32]
 80066ae:	e01c      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d10c      	bne.n	80066d2 <HAL_RCC_OscConfig+0x356>
 80066b8:	4b61      	ldr	r3, [pc, #388]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	4a60      	ldr	r2, [pc, #384]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066be:	f043 0304 	orr.w	r3, r3, #4
 80066c2:	6213      	str	r3, [r2, #32]
 80066c4:	4b5e      	ldr	r3, [pc, #376]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	4a5d      	ldr	r2, [pc, #372]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066ca:	f043 0301 	orr.w	r3, r3, #1
 80066ce:	6213      	str	r3, [r2, #32]
 80066d0:	e00b      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 80066d2:	4b5b      	ldr	r3, [pc, #364]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	4a5a      	ldr	r2, [pc, #360]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	6213      	str	r3, [r2, #32]
 80066de:	4b58      	ldr	r3, [pc, #352]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	4a57      	ldr	r2, [pc, #348]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d015      	beq.n	800671e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f2:	f7fd fe29 	bl	8004348 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7fd fe25 	bl	8004348 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e0b1      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006710:	4b4b      	ldr	r3, [pc, #300]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0ee      	beq.n	80066fa <HAL_RCC_OscConfig+0x37e>
 800671c:	e014      	b.n	8006748 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800671e:	f7fd fe13 	bl	8004348 <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fd fe0f 	bl	8004348 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	; 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e09b      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673c:	4b40      	ldr	r3, [pc, #256]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1ee      	bne.n	8006726 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d105      	bne.n	800675a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800674e:	4b3c      	ldr	r3, [pc, #240]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	4a3b      	ldr	r2, [pc, #236]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006758:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8087 	beq.w	8006872 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006764:	4b36      	ldr	r3, [pc, #216]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b08      	cmp	r3, #8
 800676e:	d061      	beq.n	8006834 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d146      	bne.n	8006806 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006778:	4b33      	ldr	r3, [pc, #204]	; (8006848 <HAL_RCC_OscConfig+0x4cc>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7fd fde3 	bl	8004348 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006786:	f7fd fddf 	bl	8004348 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e06d      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006798:	4b29      	ldr	r3, [pc, #164]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1f0      	bne.n	8006786 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ac:	d108      	bne.n	80067c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	4921      	ldr	r1, [pc, #132]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067c0:	4b1f      	ldr	r3, [pc, #124]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a19      	ldr	r1, [r3, #32]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	430b      	orrs	r3, r1
 80067d2:	491b      	ldr	r1, [pc, #108]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d8:	4b1b      	ldr	r3, [pc, #108]	; (8006848 <HAL_RCC_OscConfig+0x4cc>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067de:	f7fd fdb3 	bl	8004348 <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e6:	f7fd fdaf 	bl	8004348 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e03d      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x46a>
 8006804:	e035      	b.n	8006872 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006806:	4b10      	ldr	r3, [pc, #64]	; (8006848 <HAL_RCC_OscConfig+0x4cc>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680c:	f7fd fd9c 	bl	8004348 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006814:	f7fd fd98 	bl	8004348 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e026      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <HAL_RCC_OscConfig+0x4c4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCC_OscConfig+0x498>
 8006832:	e01e      	b.n	8006872 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d107      	bne.n	800684c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e019      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
 8006840:	40021000 	.word	0x40021000
 8006844:	40007000 	.word	0x40007000
 8006848:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800684c:	4b0b      	ldr	r3, [pc, #44]	; (800687c <HAL_RCC_OscConfig+0x500>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	429a      	cmp	r2, r3
 800685e:	d106      	bne.n	800686e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800686a:	429a      	cmp	r2, r3
 800686c:	d001      	beq.n	8006872 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40021000 	.word	0x40021000

08006880 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e0d0      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006894:	4b6a      	ldr	r3, [pc, #424]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d910      	bls.n	80068c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a2:	4b67      	ldr	r3, [pc, #412]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f023 0207 	bic.w	r2, r3, #7
 80068aa:	4965      	ldr	r1, [pc, #404]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b2:	4b63      	ldr	r3, [pc, #396]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0b8      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d020      	beq.n	8006912 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068dc:	4b59      	ldr	r3, [pc, #356]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	4a58      	ldr	r2, [pc, #352]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068f4:	4b53      	ldr	r3, [pc, #332]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4a52      	ldr	r2, [pc, #328]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80068fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006900:	4b50      	ldr	r3, [pc, #320]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	494d      	ldr	r1, [pc, #308]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 800690e:	4313      	orrs	r3, r2
 8006910:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d040      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d107      	bne.n	8006936 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006926:	4b47      	ldr	r3, [pc, #284]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d115      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e07f      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d107      	bne.n	800694e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693e:	4b41      	ldr	r3, [pc, #260]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e073      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800694e:	4b3d      	ldr	r3, [pc, #244]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e06b      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800695e:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f023 0203 	bic.w	r2, r3, #3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	4936      	ldr	r1, [pc, #216]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	4313      	orrs	r3, r2
 800696e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006970:	f7fd fcea 	bl	8004348 <HAL_GetTick>
 8006974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006976:	e00a      	b.n	800698e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006978:	f7fd fce6 	bl	8004348 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f241 3288 	movw	r2, #5000	; 0x1388
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e053      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698e:	4b2d      	ldr	r3, [pc, #180]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f003 020c 	and.w	r2, r3, #12
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	429a      	cmp	r2, r3
 800699e:	d1eb      	bne.n	8006978 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069a0:	4b27      	ldr	r3, [pc, #156]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d210      	bcs.n	80069d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ae:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f023 0207 	bic.w	r2, r3, #7
 80069b6:	4922      	ldr	r1, [pc, #136]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069be:	4b20      	ldr	r3, [pc, #128]	; (8006a40 <HAL_RCC_ClockConfig+0x1c0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d001      	beq.n	80069d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e032      	b.n	8006a36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069dc:	4b19      	ldr	r3, [pc, #100]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4916      	ldr	r1, [pc, #88]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	490e      	ldr	r1, [pc, #56]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a0e:	f000 f821 	bl	8006a54 <HAL_RCC_GetSysClockFreq>
 8006a12:	4602      	mov	r2, r0
 8006a14:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	091b      	lsrs	r3, r3, #4
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	490a      	ldr	r1, [pc, #40]	; (8006a48 <HAL_RCC_ClockConfig+0x1c8>)
 8006a20:	5ccb      	ldrb	r3, [r1, r3]
 8006a22:	fa22 f303 	lsr.w	r3, r2, r3
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <HAL_RCC_ClockConfig+0x1cc>)
 8006a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <HAL_RCC_ClockConfig+0x1d0>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fd fc48 	bl	80042c4 <HAL_InitTick>

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40022000 	.word	0x40022000
 8006a44:	40021000 	.word	0x40021000
 8006a48:	0800d8ac 	.word	0x0800d8ac
 8006a4c:	20000008 	.word	0x20000008
 8006a50:	2000000c 	.word	0x2000000c

08006a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a54:	b490      	push	{r4, r7}
 8006a56:	b08a      	sub	sp, #40	; 0x28
 8006a58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a5a:	4b29      	ldr	r3, [pc, #164]	; (8006b00 <HAL_RCC_GetSysClockFreq+0xac>)
 8006a5c:	1d3c      	adds	r4, r7, #4
 8006a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a64:	f240 2301 	movw	r3, #513	; 0x201
 8006a68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	2300      	movs	r3, #0
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a7e:	4b21      	ldr	r3, [pc, #132]	; (8006b04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d002      	beq.n	8006a94 <HAL_RCC_GetSysClockFreq+0x40>
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d003      	beq.n	8006a9a <HAL_RCC_GetSysClockFreq+0x46>
 8006a92:	e02b      	b.n	8006aec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a94:	4b1c      	ldr	r3, [pc, #112]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a96:	623b      	str	r3, [r7, #32]
      break;
 8006a98:	e02b      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	0c9b      	lsrs	r3, r3, #18
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	3328      	adds	r3, #40	; 0x28
 8006aa4:	443b      	add	r3, r7
 8006aa6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006aaa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d012      	beq.n	8006adc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ab6:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	0c5b      	lsrs	r3, r3, #17
 8006abc:	f003 0301 	and.w	r3, r3, #1
 8006ac0:	3328      	adds	r3, #40	; 0x28
 8006ac2:	443b      	add	r3, r7
 8006ac4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ac8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	4a0e      	ldr	r2, [pc, #56]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006ace:	fb03 f202 	mul.w	r2, r3, r2
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8006ada:	e004      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4a0b      	ldr	r2, [pc, #44]	; (8006b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	623b      	str	r3, [r7, #32]
      break;
 8006aea:	e002      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006aee:	623b      	str	r3, [r7, #32]
      break;
 8006af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006af2:	6a3b      	ldr	r3, [r7, #32]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3728      	adds	r7, #40	; 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc90      	pop	{r4, r7}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	0800d864 	.word	0x0800d864
 8006b04:	40021000 	.word	0x40021000
 8006b08:	007a1200 	.word	0x007a1200
 8006b0c:	003d0900 	.word	0x003d0900

08006b10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <RCC_Delay+0x34>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a0a      	ldr	r2, [pc, #40]	; (8006b48 <RCC_Delay+0x38>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	0a5b      	lsrs	r3, r3, #9
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	fb02 f303 	mul.w	r3, r2, r3
 8006b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b2c:	bf00      	nop
  }
  while (Delay --);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	1e5a      	subs	r2, r3, #1
 8006b32:	60fa      	str	r2, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1f9      	bne.n	8006b2c <RCC_Delay+0x1c>
}
 8006b38:	bf00      	nop
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr
 8006b44:	20000008 	.word	0x20000008
 8006b48:	10624dd3 	.word	0x10624dd3

08006b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d07d      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b6c:	4b4f      	ldr	r3, [pc, #316]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10d      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b78:	4b4c      	ldr	r3, [pc, #304]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	4a4b      	ldr	r2, [pc, #300]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b82:	61d3      	str	r3, [r2, #28]
 8006b84:	4b49      	ldr	r3, [pc, #292]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b8c:	60bb      	str	r3, [r7, #8]
 8006b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b90:	2301      	movs	r3, #1
 8006b92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b94:	4b46      	ldr	r3, [pc, #280]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d118      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ba0:	4b43      	ldr	r3, [pc, #268]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a42      	ldr	r2, [pc, #264]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006baa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bac:	f7fd fbcc 	bl	8004348 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bb4:	f7fd fbc8 	bl	8004348 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b64      	cmp	r3, #100	; 0x64
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e06d      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc6:	4b3a      	ldr	r3, [pc, #232]	; (8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0f0      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bd2:	4b36      	ldr	r3, [pc, #216]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d02e      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d027      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bf0:	4b2e      	ldr	r3, [pc, #184]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bfa:	4b2e      	ldr	r3, [pc, #184]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c00:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c06:	4a29      	ldr	r2, [pc, #164]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d014      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c16:	f7fd fb97 	bl	8004348 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c1c:	e00a      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1e:	f7fd fb93 	bl	8004348 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e036      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c34:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0ee      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c40:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	4917      	ldr	r1, [pc, #92]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d105      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c58:	4b14      	ldr	r3, [pc, #80]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	4a13      	ldr	r2, [pc, #76]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c70:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	490b      	ldr	r1, [pc, #44]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c8e:	4b07      	ldr	r3, [pc, #28]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	4904      	ldr	r1, [pc, #16]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	40021000 	.word	0x40021000
 8006cb0:	40007000 	.word	0x40007000
 8006cb4:	42420440 	.word	0x42420440

08006cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e076      	b.n	8006db8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d108      	bne.n	8006ce4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cda:	d009      	beq.n	8006cf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	61da      	str	r2, [r3, #28]
 8006ce2:	e005      	b.n	8006cf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fa ff4e 	bl	8001bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69db      	ldr	r3, [r3, #28]
 8006d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a1b      	ldr	r3, [r3, #32]
 8006d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d74:	ea42 0103 	orr.w	r1, r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	0c1a      	lsrs	r2, r3, #16
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f002 0204 	and.w	r2, r2, #4
 8006d96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	69da      	ldr	r2, [r3, #28]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006da6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	603b      	str	r3, [r7, #0]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_SPI_Transmit+0x22>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e126      	b.n	8007030 <HAL_SPI_Transmit+0x270>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dea:	f7fd faad 	bl	8004348 <HAL_GetTick>
 8006dee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d002      	beq.n	8006e06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e00:	2302      	movs	r3, #2
 8006e02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e04:	e10b      	b.n	800701e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_SPI_Transmit+0x52>
 8006e0c:	88fb      	ldrh	r3, [r7, #6]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d102      	bne.n	8006e18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e16:	e102      	b.n	800701e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	88fa      	ldrh	r2, [r7, #6]
 8006e30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	88fa      	ldrh	r2, [r7, #6]
 8006e36:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e5e:	d10f      	bne.n	8006e80 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	d007      	beq.n	8006e9e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea6:	d14b      	bne.n	8006f40 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_SPI_Transmit+0xf6>
 8006eb0:	8afb      	ldrh	r3, [r7, #22]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d13e      	bne.n	8006f34 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	881a      	ldrh	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	1c9a      	adds	r2, r3, #2
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006eda:	e02b      	b.n	8006f34 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d112      	bne.n	8006f10 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	881a      	ldrh	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	1c9a      	adds	r2, r3, #2
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	3b01      	subs	r3, #1
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f0e:	e011      	b.n	8006f34 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f10:	f7fd fa1a 	bl	8004348 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d803      	bhi.n	8006f28 <HAL_SPI_Transmit+0x168>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f26:	d102      	bne.n	8006f2e <HAL_SPI_Transmit+0x16e>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f32:	e074      	b.n	800701e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1ce      	bne.n	8006edc <HAL_SPI_Transmit+0x11c>
 8006f3e:	e04c      	b.n	8006fda <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_SPI_Transmit+0x18e>
 8006f48:	8afb      	ldrh	r3, [r7, #22]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d140      	bne.n	8006fd0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	330c      	adds	r3, #12
 8006f58:	7812      	ldrb	r2, [r2, #0]
 8006f5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f60:	1c5a      	adds	r2, r3, #1
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f74:	e02c      	b.n	8006fd0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d113      	bne.n	8006fac <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	330c      	adds	r3, #12
 8006f8e:	7812      	ldrb	r2, [r2, #0]
 8006f90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006faa:	e011      	b.n	8006fd0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fac:	f7fd f9cc 	bl	8004348 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d803      	bhi.n	8006fc4 <HAL_SPI_Transmit+0x204>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc2:	d102      	bne.n	8006fca <HAL_SPI_Transmit+0x20a>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d102      	bne.n	8006fd0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fce:	e026      	b.n	800701e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1cd      	bne.n	8006f76 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f8b2 	bl	8007148 <SPI_EndRxTxTransaction>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	77fb      	strb	r3, [r7, #31]
 800701a:	e000      	b.n	800701e <HAL_SPI_Transmit+0x25e>
  }

error:
 800701c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800702e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3720      	adds	r7, #32
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007048:	f7fd f97e 	bl	8004348 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	1a9b      	subs	r3, r3, r2
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	4413      	add	r3, r2
 8007056:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007058:	f7fd f976 	bl	8004348 <HAL_GetTick>
 800705c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800705e:	4b39      	ldr	r3, [pc, #228]	; (8007144 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	015b      	lsls	r3, r3, #5
 8007064:	0d1b      	lsrs	r3, r3, #20
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	fb02 f303 	mul.w	r3, r2, r3
 800706c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800706e:	e054      	b.n	800711a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007076:	d050      	beq.n	800711a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007078:	f7fd f966 	bl	8004348 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	429a      	cmp	r2, r3
 8007086:	d902      	bls.n	800708e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d13d      	bne.n	800710a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800709c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070a6:	d111      	bne.n	80070cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b0:	d004      	beq.n	80070bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ba:	d107      	bne.n	80070cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d4:	d10f      	bne.n	80070f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e017      	b.n	800713a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	3b01      	subs	r3, #1
 8007118:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4013      	ands	r3, r2
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	429a      	cmp	r2, r3
 8007128:	bf0c      	ite	eq
 800712a:	2301      	moveq	r3, #1
 800712c:	2300      	movne	r3, #0
 800712e:	b2db      	uxtb	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	79fb      	ldrb	r3, [r7, #7]
 8007134:	429a      	cmp	r2, r3
 8007136:	d19b      	bne.n	8007070 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3720      	adds	r7, #32
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000008 	.word	0x20000008

08007148 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af02      	add	r7, sp, #8
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2200      	movs	r2, #0
 800715c:	2180      	movs	r1, #128	; 0x80
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7ff ff6a 	bl	8007038 <SPI_WaitFlagStateUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716e:	f043 0220 	orr.w	r2, r3, #32
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e000      	b.n	800717c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e041      	b.n	800721a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fa fd3c 	bl	8001c28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f000 fcba 	bl	8007b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b01      	cmp	r3, #1
 8007236:	d001      	beq.n	800723c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e03a      	b.n	80072b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a18      	ldr	r2, [pc, #96]	; (80072bc <HAL_TIM_Base_Start_IT+0x98>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d00e      	beq.n	800727c <HAL_TIM_Base_Start_IT+0x58>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007266:	d009      	beq.n	800727c <HAL_TIM_Base_Start_IT+0x58>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a14      	ldr	r2, [pc, #80]	; (80072c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <HAL_TIM_Base_Start_IT+0x58>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a13      	ldr	r2, [pc, #76]	; (80072c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d111      	bne.n	80072a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b06      	cmp	r3, #6
 800728c:	d010      	beq.n	80072b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729e:	e007      	b.n	80072b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0201 	orr.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr
 80072bc:	40012c00 	.word	0x40012c00
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800

080072c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68da      	ldr	r2, [r3, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6a1a      	ldr	r2, [r3, #32]
 80072e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10f      	bne.n	8007310 <HAL_TIM_Base_Stop_IT+0x48>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6a1a      	ldr	r2, [r3, #32]
 80072f6:	f240 4344 	movw	r3, #1092	; 0x444
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d107      	bne.n	8007310 <HAL_TIM_Base_Stop_IT+0x48>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e041      	b.n	80073ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f839 	bl	80073c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f000 fbea 	bl	8007b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bc80      	pop	{r7}
 80073d2:	4770      	bx	lr

080073d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d109      	bne.n	80073f8 <HAL_TIM_PWM_Start+0x24>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	bf14      	ite	ne
 80073f0:	2301      	movne	r3, #1
 80073f2:	2300      	moveq	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	e022      	b.n	800743e <HAL_TIM_PWM_Start+0x6a>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b04      	cmp	r3, #4
 80073fc:	d109      	bne.n	8007412 <HAL_TIM_PWM_Start+0x3e>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b01      	cmp	r3, #1
 8007408:	bf14      	ite	ne
 800740a:	2301      	movne	r3, #1
 800740c:	2300      	moveq	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	e015      	b.n	800743e <HAL_TIM_PWM_Start+0x6a>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b08      	cmp	r3, #8
 8007416:	d109      	bne.n	800742c <HAL_TIM_PWM_Start+0x58>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	bf14      	ite	ne
 8007424:	2301      	movne	r3, #1
 8007426:	2300      	moveq	r3, #0
 8007428:	b2db      	uxtb	r3, r3
 800742a:	e008      	b.n	800743e <HAL_TIM_PWM_Start+0x6a>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b01      	cmp	r3, #1
 8007436:	bf14      	ite	ne
 8007438:	2301      	movne	r3, #1
 800743a:	2300      	moveq	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e05e      	b.n	8007504 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <HAL_TIM_PWM_Start+0x82>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007454:	e013      	b.n	800747e <HAL_TIM_PWM_Start+0xaa>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b04      	cmp	r3, #4
 800745a:	d104      	bne.n	8007466 <HAL_TIM_PWM_Start+0x92>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007464:	e00b      	b.n	800747e <HAL_TIM_PWM_Start+0xaa>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b08      	cmp	r3, #8
 800746a:	d104      	bne.n	8007476 <HAL_TIM_PWM_Start+0xa2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007474:	e003      	b.n	800747e <HAL_TIM_PWM_Start+0xaa>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2201      	movs	r2, #1
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fdd8 	bl	800803c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1e      	ldr	r2, [pc, #120]	; (800750c <HAL_TIM_PWM_Start+0x138>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d107      	bne.n	80074a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a18      	ldr	r2, [pc, #96]	; (800750c <HAL_TIM_PWM_Start+0x138>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d00e      	beq.n	80074ce <HAL_TIM_PWM_Start+0xfa>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b8:	d009      	beq.n	80074ce <HAL_TIM_PWM_Start+0xfa>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a14      	ldr	r2, [pc, #80]	; (8007510 <HAL_TIM_PWM_Start+0x13c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d004      	beq.n	80074ce <HAL_TIM_PWM_Start+0xfa>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a12      	ldr	r2, [pc, #72]	; (8007514 <HAL_TIM_PWM_Start+0x140>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d111      	bne.n	80074f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b06      	cmp	r3, #6
 80074de:	d010      	beq.n	8007502 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f0:	e007      	b.n	8007502 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0201 	orr.w	r2, r2, #1
 8007500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40012c00 	.word	0x40012c00
 8007510:	40000400 	.word	0x40000400
 8007514:	40000800 	.word	0x40000800

08007518 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2200      	movs	r2, #0
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fd86 	bl	800803c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a29      	ldr	r2, [pc, #164]	; (80075dc <HAL_TIM_PWM_Stop+0xc4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d117      	bne.n	800756a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6a1a      	ldr	r2, [r3, #32]
 8007540:	f241 1311 	movw	r3, #4369	; 0x1111
 8007544:	4013      	ands	r3, r2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10f      	bne.n	800756a <HAL_TIM_PWM_Stop+0x52>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6a1a      	ldr	r2, [r3, #32]
 8007550:	f240 4344 	movw	r3, #1092	; 0x444
 8007554:	4013      	ands	r3, r2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d107      	bne.n	800756a <HAL_TIM_PWM_Stop+0x52>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	f241 1311 	movw	r3, #4369	; 0x1111
 8007574:	4013      	ands	r3, r2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10f      	bne.n	800759a <HAL_TIM_PWM_Stop+0x82>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6a1a      	ldr	r2, [r3, #32]
 8007580:	f240 4344 	movw	r3, #1092	; 0x444
 8007584:	4013      	ands	r3, r2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d107      	bne.n	800759a <HAL_TIM_PWM_Stop+0x82>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0201 	bic.w	r2, r2, #1
 8007598:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <HAL_TIM_PWM_Stop+0x92>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075a8:	e013      	b.n	80075d2 <HAL_TIM_PWM_Stop+0xba>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d104      	bne.n	80075ba <HAL_TIM_PWM_Stop+0xa2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075b8:	e00b      	b.n	80075d2 <HAL_TIM_PWM_Stop+0xba>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d104      	bne.n	80075ca <HAL_TIM_PWM_Stop+0xb2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075c8:	e003      	b.n	80075d2 <HAL_TIM_PWM_Stop+0xba>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	40012c00 	.word	0x40012c00

080075e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d122      	bne.n	800763c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b02      	cmp	r3, #2
 8007602:	d11b      	bne.n	800763c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0202 	mvn.w	r2, #2
 800760c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa6f 	bl	8007b06 <HAL_TIM_IC_CaptureCallback>
 8007628:	e005      	b.n	8007636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa62 	bl	8007af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fa71 	bl	8007b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b04      	cmp	r3, #4
 8007648:	d122      	bne.n	8007690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0304 	and.w	r3, r3, #4
 8007654:	2b04      	cmp	r3, #4
 8007656:	d11b      	bne.n	8007690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0204 	mvn.w	r2, #4
 8007660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2202      	movs	r2, #2
 8007666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fa45 	bl	8007b06 <HAL_TIM_IC_CaptureCallback>
 800767c:	e005      	b.n	800768a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa38 	bl	8007af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fa47 	bl	8007b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0308 	and.w	r3, r3, #8
 800769a:	2b08      	cmp	r3, #8
 800769c:	d122      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f003 0308 	and.w	r3, r3, #8
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d11b      	bne.n	80076e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f06f 0208 	mvn.w	r2, #8
 80076b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2204      	movs	r2, #4
 80076ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69db      	ldr	r3, [r3, #28]
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa1b 	bl	8007b06 <HAL_TIM_IC_CaptureCallback>
 80076d0:	e005      	b.n	80076de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fa0e 	bl	8007af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fa1d 	bl	8007b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	f003 0310 	and.w	r3, r3, #16
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d122      	bne.n	8007738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b10      	cmp	r3, #16
 80076fe:	d11b      	bne.n	8007738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f06f 0210 	mvn.w	r2, #16
 8007708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2208      	movs	r2, #8
 800770e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9f1 	bl	8007b06 <HAL_TIM_IC_CaptureCallback>
 8007724:	e005      	b.n	8007732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f9e4 	bl	8007af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f9f3 	bl	8007b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b01      	cmp	r3, #1
 8007744:	d10e      	bne.n	8007764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	d107      	bne.n	8007764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f06f 0201 	mvn.w	r2, #1
 800775c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7f8 fdd2 	bl	8000308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800776e:	2b80      	cmp	r3, #128	; 0x80
 8007770:	d10e      	bne.n	8007790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777c:	2b80      	cmp	r3, #128	; 0x80
 800777e:	d107      	bne.n	8007790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fd32 	bl	80081f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d10e      	bne.n	80077bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d107      	bne.n	80077bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f9b7 	bl	8007b2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d10e      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f003 0320 	and.w	r3, r3, #32
 80077d4:	2b20      	cmp	r3, #32
 80077d6:	d107      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f06f 0220 	mvn.w	r2, #32
 80077e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fcfd 	bl	80081e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007802:	2b01      	cmp	r3, #1
 8007804:	d101      	bne.n	800780a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007806:	2302      	movs	r3, #2
 8007808:	e0ac      	b.n	8007964 <HAL_TIM_PWM_ConfigChannel+0x174>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2b0c      	cmp	r3, #12
 8007816:	f200 809f 	bhi.w	8007958 <HAL_TIM_PWM_ConfigChannel+0x168>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007855 	.word	0x08007855
 8007824:	08007959 	.word	0x08007959
 8007828:	08007959 	.word	0x08007959
 800782c:	08007959 	.word	0x08007959
 8007830:	08007895 	.word	0x08007895
 8007834:	08007959 	.word	0x08007959
 8007838:	08007959 	.word	0x08007959
 800783c:	08007959 	.word	0x08007959
 8007840:	080078d7 	.word	0x080078d7
 8007844:	08007959 	.word	0x08007959
 8007848:	08007959 	.word	0x08007959
 800784c:	08007959 	.word	0x08007959
 8007850:	08007917 	.word	0x08007917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68b9      	ldr	r1, [r7, #8]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f9d0 	bl	8007c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	699a      	ldr	r2, [r3, #24]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0208 	orr.w	r2, r2, #8
 800786e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699a      	ldr	r2, [r3, #24]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0204 	bic.w	r2, r2, #4
 800787e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6999      	ldr	r1, [r3, #24]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	691a      	ldr	r2, [r3, #16]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	619a      	str	r2, [r3, #24]
      break;
 8007892:	e062      	b.n	800795a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fa16 	bl	8007ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6999      	ldr	r1, [r3, #24]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	021a      	lsls	r2, r3, #8
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	619a      	str	r2, [r3, #24]
      break;
 80078d4:	e041      	b.n	800795a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68b9      	ldr	r1, [r7, #8]
 80078dc:	4618      	mov	r0, r3
 80078de:	f000 fa5f 	bl	8007da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69da      	ldr	r2, [r3, #28]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0208 	orr.w	r2, r2, #8
 80078f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69da      	ldr	r2, [r3, #28]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0204 	bic.w	r2, r2, #4
 8007900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69d9      	ldr	r1, [r3, #28]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	61da      	str	r2, [r3, #28]
      break;
 8007914:	e021      	b.n	800795a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68b9      	ldr	r1, [r7, #8]
 800791c:	4618      	mov	r0, r3
 800791e:	f000 faa9 	bl	8007e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69da      	ldr	r2, [r3, #28]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69da      	ldr	r2, [r3, #28]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69d9      	ldr	r1, [r3, #28]
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	021a      	lsls	r2, r3, #8
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	61da      	str	r2, [r3, #28]
      break;
 8007956:	e000      	b.n	800795a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007958:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_TIM_ConfigClockSource+0x18>
 8007980:	2302      	movs	r3, #2
 8007982:	e0b3      	b.n	8007aec <HAL_TIM_ConfigClockSource+0x180>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079bc:	d03e      	beq.n	8007a3c <HAL_TIM_ConfigClockSource+0xd0>
 80079be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c2:	f200 8087 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x168>
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	f000 8085 	beq.w	8007ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d2:	d87f      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x168>
 80079d4:	2b70      	cmp	r3, #112	; 0x70
 80079d6:	d01a      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0xa2>
 80079d8:	2b70      	cmp	r3, #112	; 0x70
 80079da:	d87b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x168>
 80079dc:	2b60      	cmp	r3, #96	; 0x60
 80079de:	d050      	beq.n	8007a82 <HAL_TIM_ConfigClockSource+0x116>
 80079e0:	2b60      	cmp	r3, #96	; 0x60
 80079e2:	d877      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x168>
 80079e4:	2b50      	cmp	r3, #80	; 0x50
 80079e6:	d03c      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0xf6>
 80079e8:	2b50      	cmp	r3, #80	; 0x50
 80079ea:	d873      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x168>
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d058      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x136>
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	d86f      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x168>
 80079f4:	2b30      	cmp	r3, #48	; 0x30
 80079f6:	d064      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x156>
 80079f8:	2b30      	cmp	r3, #48	; 0x30
 80079fa:	d86b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x168>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d060      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x156>
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d867      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x168>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d05c      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x156>
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d05a      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007a0c:	e062      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6899      	ldr	r1, [r3, #8]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f000 faee 	bl	8007ffe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	609a      	str	r2, [r3, #8]
      break;
 8007a3a:	e04e      	b.n	8007ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	6899      	ldr	r1, [r3, #8]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f000 fad7 	bl	8007ffe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a5e:	609a      	str	r2, [r3, #8]
      break;
 8007a60:	e03b      	b.n	8007ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	6859      	ldr	r1, [r3, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f000 fa4e 	bl	8007f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2150      	movs	r1, #80	; 0x50
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 faa5 	bl	8007fca <TIM_ITRx_SetConfig>
      break;
 8007a80:	e02b      	b.n	8007ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6859      	ldr	r1, [r3, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f000 fa6c 	bl	8007f6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2160      	movs	r1, #96	; 0x60
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fa95 	bl	8007fca <TIM_ITRx_SetConfig>
      break;
 8007aa0:	e01b      	b.n	8007ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6859      	ldr	r1, [r3, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f000 fa2e 	bl	8007f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2140      	movs	r1, #64	; 0x40
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fa85 	bl	8007fca <TIM_ITRx_SetConfig>
      break;
 8007ac0:	e00b      	b.n	8007ada <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f000 fa7c 	bl	8007fca <TIM_ITRx_SetConfig>
        break;
 8007ad2:	e002      	b.n	8007ada <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ad4:	bf00      	nop
 8007ad6:	e000      	b.n	8007ada <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007ad8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr

08007b06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b083      	sub	sp, #12
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b0e:	bf00      	nop
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr

08007b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr

08007b2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr

08007b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a29      	ldr	r2, [pc, #164]	; (8007bf4 <TIM_Base_SetConfig+0xb8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d00b      	beq.n	8007b6c <TIM_Base_SetConfig+0x30>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5a:	d007      	beq.n	8007b6c <TIM_Base_SetConfig+0x30>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a26      	ldr	r2, [pc, #152]	; (8007bf8 <TIM_Base_SetConfig+0xbc>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d003      	beq.n	8007b6c <TIM_Base_SetConfig+0x30>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a25      	ldr	r2, [pc, #148]	; (8007bfc <TIM_Base_SetConfig+0xc0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d108      	bne.n	8007b7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a1c      	ldr	r2, [pc, #112]	; (8007bf4 <TIM_Base_SetConfig+0xb8>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d00b      	beq.n	8007b9e <TIM_Base_SetConfig+0x62>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8c:	d007      	beq.n	8007b9e <TIM_Base_SetConfig+0x62>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a19      	ldr	r2, [pc, #100]	; (8007bf8 <TIM_Base_SetConfig+0xbc>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d003      	beq.n	8007b9e <TIM_Base_SetConfig+0x62>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a18      	ldr	r2, [pc, #96]	; (8007bfc <TIM_Base_SetConfig+0xc0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d108      	bne.n	8007bb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a07      	ldr	r2, [pc, #28]	; (8007bf4 <TIM_Base_SetConfig+0xb8>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d103      	bne.n	8007be4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	615a      	str	r2, [r3, #20]
}
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40000400 	.word	0x40000400
 8007bfc:	40000800 	.word	0x40000800

08007c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	f023 0201 	bic.w	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f023 0302 	bic.w	r3, r3, #2
 8007c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a1c      	ldr	r2, [pc, #112]	; (8007cc8 <TIM_OC1_SetConfig+0xc8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d10c      	bne.n	8007c76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f023 0308 	bic.w	r3, r3, #8
 8007c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f023 0304 	bic.w	r3, r3, #4
 8007c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a13      	ldr	r2, [pc, #76]	; (8007cc8 <TIM_OC1_SetConfig+0xc8>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d111      	bne.n	8007ca2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	621a      	str	r2, [r3, #32]
}
 8007cbc:	bf00      	nop
 8007cbe:	371c      	adds	r7, #28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40012c00 	.word	0x40012c00

08007ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f023 0210 	bic.w	r2, r3, #16
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f023 0320 	bic.w	r3, r3, #32
 8007d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	011b      	lsls	r3, r3, #4
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <TIM_OC2_SetConfig+0xd0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d10d      	bne.n	8007d48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a14      	ldr	r2, [pc, #80]	; (8007d9c <TIM_OC2_SetConfig+0xd0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d113      	bne.n	8007d78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	621a      	str	r2, [r3, #32]
}
 8007d92:	bf00      	nop
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bc80      	pop	{r7}
 8007d9a:	4770      	bx	lr
 8007d9c:	40012c00 	.word	0x40012c00

08007da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0303 	bic.w	r3, r3, #3
 8007dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	021b      	lsls	r3, r3, #8
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a1d      	ldr	r2, [pc, #116]	; (8007e70 <TIM_OC3_SetConfig+0xd0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d10d      	bne.n	8007e1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a14      	ldr	r2, [pc, #80]	; (8007e70 <TIM_OC3_SetConfig+0xd0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d113      	bne.n	8007e4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	011b      	lsls	r3, r3, #4
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	621a      	str	r2, [r3, #32]
}
 8007e64:	bf00      	nop
 8007e66:	371c      	adds	r7, #28
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bc80      	pop	{r7}
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	40012c00 	.word	0x40012c00

08007e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	021b      	lsls	r3, r3, #8
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	031b      	lsls	r3, r3, #12
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a0f      	ldr	r2, [pc, #60]	; (8007f0c <TIM_OC4_SetConfig+0x98>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d109      	bne.n	8007ee8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	019b      	lsls	r3, r3, #6
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	621a      	str	r2, [r3, #32]
}
 8007f02:	bf00      	nop
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr
 8007f0c:	40012c00 	.word	0x40012c00

08007f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	f023 0201 	bic.w	r2, r3, #1
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	011b      	lsls	r3, r3, #4
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f023 030a 	bic.w	r3, r3, #10
 8007f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	621a      	str	r2, [r3, #32]
}
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	f023 0210 	bic.w	r2, r3, #16
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	031b      	lsls	r3, r3, #12
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	621a      	str	r2, [r3, #32]
}
 8007fc0:	bf00      	nop
 8007fc2:	371c      	adds	r7, #28
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr

08007fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	f043 0307 	orr.w	r3, r3, #7
 8007fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	609a      	str	r2, [r3, #8]
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b087      	sub	sp, #28
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008018:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	021a      	lsls	r2, r3, #8
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	431a      	orrs	r2, r3
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	4313      	orrs	r3, r2
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	4313      	orrs	r3, r2
 800802a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	609a      	str	r2, [r3, #8]
}
 8008032:	bf00      	nop
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f003 031f 	and.w	r3, r3, #31
 800804e:	2201      	movs	r2, #1
 8008050:	fa02 f303 	lsl.w	r3, r2, r3
 8008054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6a1a      	ldr	r2, [r3, #32]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	43db      	mvns	r3, r3
 800805e:	401a      	ands	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6a1a      	ldr	r2, [r3, #32]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	fa01 f303 	lsl.w	r3, r1, r3
 8008074:	431a      	orrs	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	621a      	str	r2, [r3, #32]
}
 800807a:	bf00      	nop
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	bc80      	pop	{r7}
 8008082:	4770      	bx	lr

08008084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008098:	2302      	movs	r3, #2
 800809a:	e046      	b.n	800812a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a16      	ldr	r2, [pc, #88]	; (8008134 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d00e      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e8:	d009      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a12      	ldr	r2, [pc, #72]	; (8008138 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d004      	beq.n	80080fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a10      	ldr	r2, [pc, #64]	; (800813c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d10c      	bne.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	4313      	orrs	r3, r2
 800810e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	bc80      	pop	{r7}
 8008132:	4770      	bx	lr
 8008134:	40012c00 	.word	0x40012c00
 8008138:	40000400 	.word	0x40000400
 800813c:	40000800 	.word	0x40000800

08008140 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008158:	2302      	movs	r3, #2
 800815a:	e03d      	b.n	80081d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4313      	orrs	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr

08008206 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008206:	b084      	sub	sp, #16
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	f107 0014 	add.w	r0, r7, #20
 8008214:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	bc80      	pop	{r7}
 8008222:	b004      	add	sp, #16
 8008224:	4770      	bx	lr

08008226 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008236:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800823a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	b29a      	uxth	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	bc80      	pop	{r7}
 8008250:	4770      	bx	lr

08008252 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800825a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800825e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	b29b      	uxth	r3, r3
 800826c:	43db      	mvns	r3, r3
 800826e:	b29b      	uxth	r3, r3
 8008270:	4013      	ands	r3, r2
 8008272:	b29a      	uxth	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr

08008286 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8008286:	b480      	push	{r7}
 8008288:	b083      	sub	sp, #12
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	bc80      	pop	{r7}
 800829c:	4770      	bx	lr

0800829e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800829e:	b084      	sub	sp, #16
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	f107 0014 	add.w	r0, r7, #20
 80082ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bc80      	pop	{r7}
 80082da:	b004      	add	sp, #16
 80082dc:	4770      	bx	lr
	...

080082e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b09b      	sub	sp, #108	; 0x6c
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008306:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	78db      	ldrb	r3, [r3, #3]
 800830e:	2b03      	cmp	r3, #3
 8008310:	d81f      	bhi.n	8008352 <USB_ActivateEndpoint+0x72>
 8008312:	a201      	add	r2, pc, #4	; (adr r2, 8008318 <USB_ActivateEndpoint+0x38>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	08008329 	.word	0x08008329
 800831c:	08008345 	.word	0x08008345
 8008320:	0800835b 	.word	0x0800835b
 8008324:	08008337 	.word	0x08008337
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008328:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800832c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008330:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008334:	e012      	b.n	800835c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008336:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800833a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800833e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008342:	e00b      	b.n	800835c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008344:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008348:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800834c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008350:	e004      	b.n	800835c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008358:	e000      	b.n	800835c <USB_ActivateEndpoint+0x7c>
      break;
 800835a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	441a      	add	r2, r3
 8008366:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800836a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800837a:	b29b      	uxth	r3, r3
 800837c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008394:	b29a      	uxth	r2, r3
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	b29b      	uxth	r3, r3
 800839c:	4313      	orrs	r3, r2
 800839e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	441a      	add	r2, r3
 80083ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80083b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	7b1b      	ldrb	r3, [r3, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f040 8149 	bne.w	8008660 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 8084 	beq.w	80084e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	4413      	add	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	011a      	lsls	r2, r3, #4
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083fa:	613b      	str	r3, [r7, #16]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	88db      	ldrh	r3, [r3, #6]
 8008400:	085b      	lsrs	r3, r3, #1
 8008402:	b29b      	uxth	r3, r3
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	b29a      	uxth	r2, r3
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	81fb      	strh	r3, [r7, #14]
 800841a:	89fb      	ldrh	r3, [r7, #14]
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01b      	beq.n	800845c <USB_ActivateEndpoint+0x17c>
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843a:	81bb      	strh	r3, [r7, #12]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	441a      	add	r2, r3
 8008446:	89bb      	ldrh	r3, [r7, #12]
 8008448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800844c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008454:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008458:	b29b      	uxth	r3, r3
 800845a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	78db      	ldrb	r3, [r3, #3]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d020      	beq.n	80084a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	b29b      	uxth	r3, r3
 8008472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800847a:	813b      	strh	r3, [r7, #8]
 800847c:	893b      	ldrh	r3, [r7, #8]
 800847e:	f083 0320 	eor.w	r3, r3, #32
 8008482:	813b      	strh	r3, [r7, #8]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	441a      	add	r2, r3
 800848e:	893b      	ldrh	r3, [r7, #8]
 8008490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800849c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	8013      	strh	r3, [r2, #0]
 80084a4:	e27f      	b.n	80089a6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084bc:	817b      	strh	r3, [r7, #10]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	441a      	add	r2, r3
 80084c8:	897b      	ldrh	r3, [r7, #10]
 80084ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084da:	b29b      	uxth	r3, r3
 80084dc:	8013      	strh	r3, [r2, #0]
 80084de:	e262      	b.n	80089a6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	4413      	add	r3, r2
 80084f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	011a      	lsls	r2, r3, #4
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008502:	62bb      	str	r3, [r7, #40]	; 0x28
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	88db      	ldrh	r3, [r3, #6]
 8008508:	085b      	lsrs	r3, r3, #1
 800850a:	b29b      	uxth	r3, r3
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800851e:	b29b      	uxth	r3, r3
 8008520:	461a      	mov	r2, r3
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	4413      	add	r3, r2
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	011a      	lsls	r2, r3, #4
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	4413      	add	r3, r2
 8008532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008536:	623b      	str	r3, [r7, #32]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d112      	bne.n	8008566 <USB_ActivateEndpoint+0x286>
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800854a:	b29a      	uxth	r2, r3
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800855a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800855e:	b29a      	uxth	r2, r3
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	e02f      	b.n	80085c6 <USB_ActivateEndpoint+0x2e6>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	2b3e      	cmp	r3, #62	; 0x3e
 800856c:	d813      	bhi.n	8008596 <USB_ActivateEndpoint+0x2b6>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	085b      	lsrs	r3, r3, #1
 8008574:	663b      	str	r3, [r7, #96]	; 0x60
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <USB_ActivateEndpoint+0x2a8>
 8008582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008584:	3301      	adds	r3, #1
 8008586:	663b      	str	r3, [r7, #96]	; 0x60
 8008588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800858a:	b29b      	uxth	r3, r3
 800858c:	029b      	lsls	r3, r3, #10
 800858e:	b29a      	uxth	r2, r3
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	801a      	strh	r2, [r3, #0]
 8008594:	e017      	b.n	80085c6 <USB_ActivateEndpoint+0x2e6>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	663b      	str	r3, [r7, #96]	; 0x60
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	f003 031f 	and.w	r3, r3, #31
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d102      	bne.n	80085b0 <USB_ActivateEndpoint+0x2d0>
 80085aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085ac:	3b01      	subs	r3, #1
 80085ae:	663b      	str	r3, [r7, #96]	; 0x60
 80085b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	029b      	lsls	r3, r3, #10
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	83fb      	strh	r3, [r7, #30]
 80085d4:	8bfb      	ldrh	r3, [r7, #30]
 80085d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d01b      	beq.n	8008616 <USB_ActivateEndpoint+0x336>
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f4:	83bb      	strh	r3, [r7, #28]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	009b      	lsls	r3, r3, #2
 80085fe:	441a      	add	r2, r3
 8008600:	8bbb      	ldrh	r3, [r7, #28]
 8008602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800860a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800860e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008612:	b29b      	uxth	r3, r3
 8008614:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29b      	uxth	r3, r3
 8008624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862c:	837b      	strh	r3, [r7, #26]
 800862e:	8b7b      	ldrh	r3, [r7, #26]
 8008630:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008634:	837b      	strh	r3, [r7, #26]
 8008636:	8b7b      	ldrh	r3, [r7, #26]
 8008638:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800863c:	837b      	strh	r3, [r7, #26]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	441a      	add	r2, r3
 8008648:	8b7b      	ldrh	r3, [r7, #26]
 800864a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800864e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800865a:	b29b      	uxth	r3, r3
 800865c:	8013      	strh	r3, [r2, #0]
 800865e:	e1a2      	b.n	80089a6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29b      	uxth	r3, r3
 800866e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008676:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	441a      	add	r2, r3
 8008684:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800868c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008690:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008698:	b29b      	uxth	r3, r3
 800869a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	65bb      	str	r3, [r7, #88]	; 0x58
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086ac:	4413      	add	r3, r2
 80086ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	011a      	lsls	r2, r3, #4
 80086b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086be:	657b      	str	r3, [r7, #84]	; 0x54
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	891b      	ldrh	r3, [r3, #8]
 80086c4:	085b      	lsrs	r3, r3, #1
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086ce:	801a      	strh	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	653b      	str	r3, [r7, #80]	; 0x50
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086da:	b29b      	uxth	r3, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e0:	4413      	add	r3, r2
 80086e2:	653b      	str	r3, [r7, #80]	; 0x50
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	011a      	lsls	r2, r3, #4
 80086ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80086f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	895b      	ldrh	r3, [r3, #10]
 80086f8:	085b      	lsrs	r3, r3, #1
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008702:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	785b      	ldrb	r3, [r3, #1]
 8008708:	2b00      	cmp	r3, #0
 800870a:	f040 8091 	bne.w	8008830 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800871c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800871e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d01b      	beq.n	800875e <USB_ActivateEndpoint+0x47e>
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	b29b      	uxth	r3, r3
 8008734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	441a      	add	r2, r3
 8008748:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800874a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800874e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008752:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875a:	b29b      	uxth	r3, r3
 800875c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	873b      	strh	r3, [r7, #56]	; 0x38
 800876c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800876e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d01b      	beq.n	80087ae <USB_ActivateEndpoint+0x4ce>
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29b      	uxth	r3, r3
 8008784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	441a      	add	r2, r3
 8008798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800879a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800879e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	441a      	add	r2, r3
 80087e0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800880c:	867b      	strh	r3, [r7, #50]	; 0x32
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	441a      	add	r2, r3
 8008818:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800881a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800881e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800882a:	b29b      	uxth	r3, r3
 800882c:	8013      	strh	r3, [r2, #0]
 800882e:	e0ba      	b.n	80089a6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008840:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01d      	beq.n	8008888 <USB_ActivateEndpoint+0x5a8>
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800885e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008862:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	441a      	add	r2, r3
 8008870:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800887c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008884:	b29b      	uxth	r3, r3
 8008886:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	881b      	ldrh	r3, [r3, #0]
 8008894:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008898:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800889c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d01d      	beq.n	80088e0 <USB_ActivateEndpoint+0x600>
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	441a      	add	r2, r3
 80088c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80088cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088dc:	b29b      	uxth	r3, r3
 80088de:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	78db      	ldrb	r3, [r3, #3]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d024      	beq.n	8008932 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	4413      	add	r3, r2
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008902:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008906:	f083 0320 	eor.w	r3, r3, #32
 800890a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	441a      	add	r2, r3
 8008918:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800891c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892c:	b29b      	uxth	r3, r3
 800892e:	8013      	strh	r3, [r2, #0]
 8008930:	e01d      	b.n	800896e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008948:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	441a      	add	r2, r3
 8008956:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800895a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800896a:	b29b      	uxth	r3, r3
 800896c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	b29b      	uxth	r3, r3
 800897c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008984:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	441a      	add	r2, r3
 8008990:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800899a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800899e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80089a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	376c      	adds	r7, #108	; 0x6c
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bc80      	pop	{r7}
 80089b2:	4770      	bx	lr

080089b4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b08d      	sub	sp, #52	; 0x34
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	7b1b      	ldrb	r3, [r3, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f040 808e 	bne.w	8008ae4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	785b      	ldrb	r3, [r3, #1]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d044      	beq.n	8008a5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	881b      	ldrh	r3, [r3, #0]
 80089dc:	81bb      	strh	r3, [r7, #12]
 80089de:	89bb      	ldrh	r3, [r7, #12]
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01b      	beq.n	8008a20 <USB_DeactivateEndpoint+0x6c>
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fe:	817b      	strh	r3, [r7, #10]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	441a      	add	r2, r3
 8008a0a:	897b      	ldrh	r3, [r7, #10]
 8008a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a36:	813b      	strh	r3, [r7, #8]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	441a      	add	r2, r3
 8008a42:	893b      	ldrh	r3, [r7, #8]
 8008a44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	8013      	strh	r3, [r2, #0]
 8008a58:	e192      	b.n	8008d80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	827b      	strh	r3, [r7, #18]
 8008a68:	8a7b      	ldrh	r3, [r7, #18]
 8008a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d01b      	beq.n	8008aaa <USB_DeactivateEndpoint+0xf6>
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a88:	823b      	strh	r3, [r7, #16]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	441a      	add	r2, r3
 8008a94:	8a3b      	ldrh	r3, [r7, #16]
 8008a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac0:	81fb      	strh	r3, [r7, #14]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	441a      	add	r2, r3
 8008acc:	89fb      	ldrh	r3, [r7, #14]
 8008ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	8013      	strh	r3, [r2, #0]
 8008ae2:	e14d      	b.n	8008d80 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	785b      	ldrb	r3, [r3, #1]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f040 80a5 	bne.w	8008c38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	843b      	strh	r3, [r7, #32]
 8008afc:	8c3b      	ldrh	r3, [r7, #32]
 8008afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d01b      	beq.n	8008b3e <USB_DeactivateEndpoint+0x18a>
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	881b      	ldrh	r3, [r3, #0]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b1c:	83fb      	strh	r3, [r7, #30]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	441a      	add	r2, r3
 8008b28:	8bfb      	ldrh	r3, [r7, #30]
 8008b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	83bb      	strh	r3, [r7, #28]
 8008b4c:	8bbb      	ldrh	r3, [r7, #28]
 8008b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d01b      	beq.n	8008b8e <USB_DeactivateEndpoint+0x1da>
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6c:	837b      	strh	r3, [r7, #26]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	441a      	add	r2, r3
 8008b78:	8b7b      	ldrh	r3, [r7, #26]
 8008b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba4:	833b      	strh	r3, [r7, #24]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	441a      	add	r2, r3
 8008bb0:	8b3b      	ldrh	r3, [r7, #24]
 8008bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bdc:	82fb      	strh	r3, [r7, #22]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	441a      	add	r2, r3
 8008be8:	8afb      	ldrh	r3, [r7, #22]
 8008bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c14:	82bb      	strh	r3, [r7, #20]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	441a      	add	r2, r3
 8008c20:	8abb      	ldrh	r3, [r7, #20]
 8008c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	8013      	strh	r3, [r2, #0]
 8008c36:	e0a3      	b.n	8008d80 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4413      	add	r3, r2
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d01b      	beq.n	8008c88 <USB_DeactivateEndpoint+0x2d4>
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	441a      	add	r2, r3
 8008c72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4413      	add	r3, r2
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008c96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01b      	beq.n	8008cd8 <USB_DeactivateEndpoint+0x324>
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	441a      	add	r2, r3
 8008cc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	441a      	add	r2, r3
 8008cfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	441a      	add	r2, r3
 8008d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	441a      	add	r2, r3
 8008d6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3734      	adds	r7, #52	; 0x34
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bc80      	pop	{r7}
 8008d8a:	4770      	bx	lr

08008d8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b0cc      	sub	sp, #304	; 0x130
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d9a:	6018      	str	r0, [r3, #0]
 8008d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008da4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	f041 817d 	bne.w	800a0b2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	699a      	ldr	r2, [r3, #24]
 8008dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d908      	bls.n	8008de6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008de4:	e007      	b.n	8008df6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	7b1b      	ldrb	r3, [r3, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d152      	bne.n	8008eac <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6959      	ldr	r1, [r3, #20]
 8008e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	88da      	ldrh	r2, [r3, #6]
 8008e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008e28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008e2c:	6800      	ldr	r0, [r0, #0]
 8008e2e:	f001 ff23 	bl	800ac78 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e3e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008e42:	6812      	ldr	r2, [r2, #0]
 8008e44:	601a      	str	r2, [r3, #0]
 8008e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	4619      	mov	r1, r3
 8008e58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e64:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	440a      	add	r2, r1
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	011a      	lsls	r2, r3, #4
 8008e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4413      	add	r3, r2
 8008e88:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	801a      	strh	r2, [r3, #0]
 8008ea8:	f001 b8b5 	b.w	800a016 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	78db      	ldrb	r3, [r3, #3]
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	f040 84c6 	bne.w	800984a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6a1a      	ldr	r2, [r3, #32]
 8008eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ece:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	f240 8443 	bls.w	8009762 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f02:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	441a      	add	r2, r3
 8008f20:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6a1a      	ldr	r2, [r3, #32]
 8008f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f48:	1ad2      	subs	r2, r2, r3
 8008f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 823e 	beq.w	80093fa <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f82:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008f86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f8a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008f8e:	6812      	ldr	r2, [r2, #0]
 8008f90:	601a      	str	r2, [r3, #0]
 8008f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f040 809a 	bne.w	80090d8 <USB_EPStartXfer+0x34c>
 8008fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fb0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008fb4:	6812      	ldr	r2, [r2, #0]
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	4619      	mov	r1, r3
 8008fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fd6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008fda:	6812      	ldr	r2, [r2, #0]
 8008fdc:	440a      	add	r2, r1
 8008fde:	601a      	str	r2, [r3, #0]
 8008fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	011a      	lsls	r2, r3, #4
 8008fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8008ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009002:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d122      	bne.n	8009056 <USB_EPStartXfer+0x2ca>
 8009010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009014:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009022:	b29a      	uxth	r2, r3
 8009024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009028:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	801a      	strh	r2, [r3, #0]
 8009030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009034:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	b29b      	uxth	r3, r3
 800903e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009046:	b29a      	uxth	r2, r3
 8009048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800904c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	e079      	b.n	800914a <USB_EPStartXfer+0x3be>
 8009056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800905a:	2b3e      	cmp	r3, #62	; 0x3e
 800905c:	d81b      	bhi.n	8009096 <USB_EPStartXfer+0x30a>
 800905e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <USB_EPStartXfer+0x2f2>
 8009074:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009078:	3301      	adds	r3, #1
 800907a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800907e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009082:	b29b      	uxth	r3, r3
 8009084:	029b      	lsls	r3, r3, #10
 8009086:	b29a      	uxth	r2, r3
 8009088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	801a      	strh	r2, [r3, #0]
 8009094:	e059      	b.n	800914a <USB_EPStartXfer+0x3be>
 8009096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800909a:	095b      	lsrs	r3, r3, #5
 800909c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80090a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a4:	f003 031f 	and.w	r3, r3, #31
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d104      	bne.n	80090b6 <USB_EPStartXfer+0x32a>
 80090ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090b0:	3b01      	subs	r3, #1
 80090b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80090b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	029b      	lsls	r3, r3, #10
 80090be:	b29b      	uxth	r3, r3
 80090c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	e038      	b.n	800914a <USB_EPStartXfer+0x3be>
 80090d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	785b      	ldrb	r3, [r3, #1]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d130      	bne.n	800914a <USB_EPStartXfer+0x3be>
 80090e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	4619      	mov	r1, r3
 80090fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009102:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009106:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800910a:	6812      	ldr	r2, [r2, #0]
 800910c:	440a      	add	r2, r1
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	011a      	lsls	r2, r3, #4
 800911e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009122:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4413      	add	r3, r2
 800912a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800912e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800913c:	b29a      	uxth	r2, r3
 800913e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800914a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800914e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	895b      	ldrh	r3, [r3, #10]
 8009156:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800915a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800915e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6959      	ldr	r1, [r3, #20]
 8009166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800916a:	b29b      	uxth	r3, r3
 800916c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009170:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009174:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009178:	6800      	ldr	r0, [r0, #0]
 800917a:	f001 fd7d 	bl	800ac78 <USB_WritePMA>
            ep->xfer_buff += len;
 800917e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	695a      	ldr	r2, [r3, #20]
 800918a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800918e:	441a      	add	r2, r3
 8009190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800919c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6a1a      	ldr	r2, [r3, #32]
 80091a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d90f      	bls.n	80091d8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80091b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6a1a      	ldr	r2, [r3, #32]
 80091c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091c8:	1ad2      	subs	r2, r2, r3
 80091ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	621a      	str	r2, [r3, #32]
 80091d6:	e00e      	b.n	80091f6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80091d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6a1b      	ldr	r3, [r3, #32]
 80091e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80091e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2200      	movs	r2, #0
 80091f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	785b      	ldrb	r3, [r3, #1]
 8009202:	2b00      	cmp	r3, #0
 8009204:	f040 809a 	bne.w	800933c <USB_EPStartXfer+0x5b0>
 8009208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800920c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009210:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009214:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009218:	6812      	ldr	r2, [r2, #0]
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800922a:	b29b      	uxth	r3, r3
 800922c:	4619      	mov	r1, r3
 800922e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009232:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009236:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800923a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800923e:	6812      	ldr	r2, [r2, #0]
 8009240:	440a      	add	r2, r1
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	011a      	lsls	r2, r3, #4
 8009252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009256:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4413      	add	r3, r2
 800925e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009266:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800926a:	601a      	str	r2, [r3, #0]
 800926c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d122      	bne.n	80092ba <USB_EPStartXfer+0x52e>
 8009274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009278:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	881b      	ldrh	r3, [r3, #0]
 8009280:	b29b      	uxth	r3, r3
 8009282:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009286:	b29a      	uxth	r2, r3
 8009288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	801a      	strh	r2, [r3, #0]
 8009294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009298:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	801a      	strh	r2, [r3, #0]
 80092b8:	e083      	b.n	80093c2 <USB_EPStartXfer+0x636>
 80092ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092be:	2b3e      	cmp	r3, #62	; 0x3e
 80092c0:	d81b      	bhi.n	80092fa <USB_EPStartXfer+0x56e>
 80092c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c6:	085b      	lsrs	r3, r3, #1
 80092c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80092cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d004      	beq.n	80092e2 <USB_EPStartXfer+0x556>
 80092d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80092dc:	3301      	adds	r3, #1
 80092de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80092e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	029b      	lsls	r3, r3, #10
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	801a      	strh	r2, [r3, #0]
 80092f8:	e063      	b.n	80093c2 <USB_EPStartXfer+0x636>
 80092fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092fe:	095b      	lsrs	r3, r3, #5
 8009300:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009308:	f003 031f 	and.w	r3, r3, #31
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <USB_EPStartXfer+0x58e>
 8009310:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009314:	3b01      	subs	r3, #1
 8009316:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800931a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800931e:	b29b      	uxth	r3, r3
 8009320:	029b      	lsls	r3, r3, #10
 8009322:	b29b      	uxth	r3, r3
 8009324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800932c:	b29a      	uxth	r2, r3
 800932e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009332:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	801a      	strh	r2, [r3, #0]
 800933a:	e042      	b.n	80093c2 <USB_EPStartXfer+0x636>
 800933c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	785b      	ldrb	r3, [r3, #1]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d13a      	bne.n	80093c2 <USB_EPStartXfer+0x636>
 800934c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009350:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009354:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009358:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800935c:	6812      	ldr	r2, [r2, #0]
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009364:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800936e:	b29b      	uxth	r3, r3
 8009370:	4619      	mov	r1, r3
 8009372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009376:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800937a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800937e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8009382:	6812      	ldr	r2, [r2, #0]
 8009384:	440a      	add	r2, r1
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800938c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	011a      	lsls	r2, r3, #4
 8009396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800939a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4413      	add	r3, r2
 80093a2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80093a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80093c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	891b      	ldrh	r3, [r3, #8]
 80093ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6959      	ldr	r1, [r3, #20]
 80093de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80093e8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80093ec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80093f0:	6800      	ldr	r0, [r0, #0]
 80093f2:	f001 fc41 	bl	800ac78 <USB_WritePMA>
 80093f6:	f000 be0e 	b.w	800a016 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80093fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d16d      	bne.n	80094e6 <USB_EPStartXfer+0x75a>
 800940a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800940e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	64bb      	str	r3, [r7, #72]	; 0x48
 8009416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800941a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009424:	b29b      	uxth	r3, r3
 8009426:	461a      	mov	r2, r3
 8009428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800942a:	4413      	add	r3, r2
 800942c:	64bb      	str	r3, [r7, #72]	; 0x48
 800942e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	011a      	lsls	r2, r3, #4
 800943c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943e:	4413      	add	r3, r2
 8009440:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009444:	647b      	str	r3, [r7, #68]	; 0x44
 8009446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d112      	bne.n	8009474 <USB_EPStartXfer+0x6e8>
 800944e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29b      	uxth	r3, r3
 8009454:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009458:	b29a      	uxth	r2, r3
 800945a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800945c:	801a      	strh	r2, [r3, #0]
 800945e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	b29b      	uxth	r3, r3
 8009464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800946c:	b29a      	uxth	r2, r3
 800946e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009470:	801a      	strh	r2, [r3, #0]
 8009472:	e063      	b.n	800953c <USB_EPStartXfer+0x7b0>
 8009474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009478:	2b3e      	cmp	r3, #62	; 0x3e
 800947a:	d817      	bhi.n	80094ac <USB_EPStartXfer+0x720>
 800947c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009480:	085b      	lsrs	r3, r3, #1
 8009482:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b00      	cmp	r3, #0
 8009490:	d004      	beq.n	800949c <USB_EPStartXfer+0x710>
 8009492:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009496:	3301      	adds	r3, #1
 8009498:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800949c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	029b      	lsls	r3, r3, #10
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a8:	801a      	strh	r2, [r3, #0]
 80094aa:	e047      	b.n	800953c <USB_EPStartXfer+0x7b0>
 80094ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094b0:	095b      	lsrs	r3, r3, #5
 80094b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ba:	f003 031f 	and.w	r3, r3, #31
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d104      	bne.n	80094cc <USB_EPStartXfer+0x740>
 80094c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094c6:	3b01      	subs	r3, #1
 80094c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	029b      	lsls	r3, r3, #10
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094de:	b29a      	uxth	r2, r3
 80094e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094e2:	801a      	strh	r2, [r3, #0]
 80094e4:	e02a      	b.n	800953c <USB_EPStartXfer+0x7b0>
 80094e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	785b      	ldrb	r3, [r3, #1]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d122      	bne.n	800953c <USB_EPStartXfer+0x7b0>
 80094f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	653b      	str	r3, [r7, #80]	; 0x50
 8009502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009510:	b29b      	uxth	r3, r3
 8009512:	461a      	mov	r2, r3
 8009514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009516:	4413      	add	r3, r2
 8009518:	653b      	str	r3, [r7, #80]	; 0x50
 800951a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800951e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	011a      	lsls	r2, r3, #4
 8009528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800952a:	4413      	add	r3, r2
 800952c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009530:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009536:	b29a      	uxth	r2, r3
 8009538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800953a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800953c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	891b      	ldrh	r3, [r3, #8]
 8009548:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800954c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	6959      	ldr	r1, [r3, #20]
 8009558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800955c:	b29b      	uxth	r3, r3
 800955e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009562:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009566:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800956a:	6800      	ldr	r0, [r0, #0]
 800956c:	f001 fb84 	bl	800ac78 <USB_WritePMA>
            ep->xfer_buff += len;
 8009570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	695a      	ldr	r2, [r3, #20]
 800957c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009580:	441a      	add	r2, r3
 8009582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800958e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6a1a      	ldr	r2, [r3, #32]
 800959a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800959e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d90f      	bls.n	80095ca <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80095aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6a1a      	ldr	r2, [r3, #32]
 80095b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ba:	1ad2      	subs	r2, r2, r3
 80095bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	621a      	str	r2, [r3, #32]
 80095c8:	e00e      	b.n	80095e8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80095ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6a1b      	ldr	r3, [r3, #32]
 80095d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80095da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2200      	movs	r2, #0
 80095e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	643b      	str	r3, [r7, #64]	; 0x40
 80095f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	785b      	ldrb	r3, [r3, #1]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d16d      	bne.n	80096e0 <USB_EPStartXfer+0x954>
 8009604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009608:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009614:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800961e:	b29b      	uxth	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009624:	4413      	add	r3, r2
 8009626:	63bb      	str	r3, [r7, #56]	; 0x38
 8009628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800962c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	011a      	lsls	r2, r3, #4
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	4413      	add	r3, r2
 800963a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800963e:	637b      	str	r3, [r7, #52]	; 0x34
 8009640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d112      	bne.n	800966e <USB_EPStartXfer+0x8e2>
 8009648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800964a:	881b      	ldrh	r3, [r3, #0]
 800964c:	b29b      	uxth	r3, r3
 800964e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009652:	b29a      	uxth	r2, r3
 8009654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009656:	801a      	strh	r2, [r3, #0]
 8009658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b29b      	uxth	r3, r3
 800965e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009666:	b29a      	uxth	r2, r3
 8009668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966a:	801a      	strh	r2, [r3, #0]
 800966c:	e05d      	b.n	800972a <USB_EPStartXfer+0x99e>
 800966e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009672:	2b3e      	cmp	r3, #62	; 0x3e
 8009674:	d817      	bhi.n	80096a6 <USB_EPStartXfer+0x91a>
 8009676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800967a:	085b      	lsrs	r3, r3, #1
 800967c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	2b00      	cmp	r3, #0
 800968a:	d004      	beq.n	8009696 <USB_EPStartXfer+0x90a>
 800968c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009690:	3301      	adds	r3, #1
 8009692:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009696:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800969a:	b29b      	uxth	r3, r3
 800969c:	029b      	lsls	r3, r3, #10
 800969e:	b29a      	uxth	r2, r3
 80096a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a2:	801a      	strh	r2, [r3, #0]
 80096a4:	e041      	b.n	800972a <USB_EPStartXfer+0x99e>
 80096a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096aa:	095b      	lsrs	r3, r3, #5
 80096ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80096b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096b4:	f003 031f 	and.w	r3, r3, #31
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <USB_EPStartXfer+0x93a>
 80096bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096c0:	3b01      	subs	r3, #1
 80096c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80096c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	029b      	lsls	r3, r3, #10
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096d8:	b29a      	uxth	r2, r3
 80096da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096dc:	801a      	strh	r2, [r3, #0]
 80096de:	e024      	b.n	800972a <USB_EPStartXfer+0x99e>
 80096e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	785b      	ldrb	r3, [r3, #1]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d11c      	bne.n	800972a <USB_EPStartXfer+0x99e>
 80096f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096fe:	b29b      	uxth	r3, r3
 8009700:	461a      	mov	r2, r3
 8009702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009704:	4413      	add	r3, r2
 8009706:	643b      	str	r3, [r7, #64]	; 0x40
 8009708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800970c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	011a      	lsls	r2, r3, #4
 8009716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009718:	4413      	add	r3, r2
 800971a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009724:	b29a      	uxth	r2, r3
 8009726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009728:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800972a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800972e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	895b      	ldrh	r3, [r3, #10]
 8009736:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800973a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800973e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6959      	ldr	r1, [r3, #20]
 8009746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800974a:	b29b      	uxth	r3, r3
 800974c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009750:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009754:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009758:	6800      	ldr	r0, [r0, #0]
 800975a:	f001 fa8d 	bl	800ac78 <USB_WritePMA>
 800975e:	f000 bc5a 	b.w	800a016 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	b29b      	uxth	r3, r3
 8009790:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009798:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800979c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	441a      	add	r2, r3
 80097b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80097ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80097ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	461a      	mov	r2, r3
 80097ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097ee:	4413      	add	r3, r2
 80097f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	011a      	lsls	r2, r3, #4
 8009800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009802:	4413      	add	r3, r2
 8009804:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009808:	65bb      	str	r3, [r7, #88]	; 0x58
 800980a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800980e:	b29a      	uxth	r2, r3
 8009810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009812:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	891b      	ldrh	r3, [r3, #8]
 8009820:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6959      	ldr	r1, [r3, #20]
 8009830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009834:	b29b      	uxth	r3, r3
 8009836:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800983a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800983e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009842:	6800      	ldr	r0, [r0, #0]
 8009844:	f001 fa18 	bl	800ac78 <USB_WritePMA>
 8009848:	e3e5      	b.n	800a016 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800984a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800984e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	b29b      	uxth	r3, r3
 8009868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800986c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009870:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	441a      	add	r2, r3
 800988e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8009892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800989a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800989e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80098a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6a1a      	ldr	r2, [r3, #32]
 80098b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b6:	1ad2      	subs	r2, r2, r3
 80098b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80098c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	881b      	ldrh	r3, [r3, #0]
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 81bc 	beq.w	8009c64 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80098ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	785b      	ldrb	r3, [r3, #1]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d16d      	bne.n	80099e6 <USB_EPStartXfer+0xc5a>
 800990a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800990e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	67bb      	str	r3, [r7, #120]	; 0x78
 8009916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800991a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009924:	b29b      	uxth	r3, r3
 8009926:	461a      	mov	r2, r3
 8009928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800992a:	4413      	add	r3, r2
 800992c:	67bb      	str	r3, [r7, #120]	; 0x78
 800992e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	011a      	lsls	r2, r3, #4
 800993c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800993e:	4413      	add	r3, r2
 8009940:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009944:	677b      	str	r3, [r7, #116]	; 0x74
 8009946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800994a:	2b00      	cmp	r3, #0
 800994c:	d112      	bne.n	8009974 <USB_EPStartXfer+0xbe8>
 800994e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009958:	b29a      	uxth	r2, r3
 800995a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800995c:	801a      	strh	r2, [r3, #0]
 800995e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009960:	881b      	ldrh	r3, [r3, #0]
 8009962:	b29b      	uxth	r3, r3
 8009964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800996c:	b29a      	uxth	r2, r3
 800996e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009970:	801a      	strh	r2, [r3, #0]
 8009972:	e060      	b.n	8009a36 <USB_EPStartXfer+0xcaa>
 8009974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009978:	2b3e      	cmp	r3, #62	; 0x3e
 800997a:	d817      	bhi.n	80099ac <USB_EPStartXfer+0xc20>
 800997c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009980:	085b      	lsrs	r3, r3, #1
 8009982:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b00      	cmp	r3, #0
 8009990:	d004      	beq.n	800999c <USB_EPStartXfer+0xc10>
 8009992:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009996:	3301      	adds	r3, #1
 8009998:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800999c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	029b      	lsls	r3, r3, #10
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099a8:	801a      	strh	r2, [r3, #0]
 80099aa:	e044      	b.n	8009a36 <USB_EPStartXfer+0xcaa>
 80099ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099b0:	095b      	lsrs	r3, r3, #5
 80099b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ba:	f003 031f 	and.w	r3, r3, #31
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d104      	bne.n	80099cc <USB_EPStartXfer+0xc40>
 80099c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099c6:	3b01      	subs	r3, #1
 80099c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	029b      	lsls	r3, r3, #10
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099de:	b29a      	uxth	r2, r3
 80099e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099e2:	801a      	strh	r2, [r3, #0]
 80099e4:	e027      	b.n	8009a36 <USB_EPStartXfer+0xcaa>
 80099e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	785b      	ldrb	r3, [r3, #1]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d11f      	bne.n	8009a36 <USB_EPStartXfer+0xcaa>
 80099f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	461a      	mov	r2, r3
 8009a08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	011a      	lsls	r2, r3, #4
 8009a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a24:	4413      	add	r3, r2
 8009a26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	895b      	ldrh	r3, [r3, #10]
 8009a42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6959      	ldr	r1, [r3, #20]
 8009a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009a60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009a64:	6800      	ldr	r0, [r0, #0]
 8009a66:	f001 f907 	bl	800ac78 <USB_WritePMA>
          ep->xfer_buff += len;
 8009a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	695a      	ldr	r2, [r3, #20]
 8009a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a7a:	441a      	add	r2, r3
 8009a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	6a1a      	ldr	r2, [r3, #32]
 8009a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d90f      	bls.n	8009ac4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	6a1a      	ldr	r2, [r3, #32]
 8009ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab4:	1ad2      	subs	r2, r2, r3
 8009ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	621a      	str	r2, [r3, #32]
 8009ac2:	e00e      	b.n	8009ae2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 8295 	beq.w	800a016 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	785b      	ldrb	r3, [r3, #1]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d16d      	bne.n	8009bd8 <USB_EPStartXfer+0xe4c>
 8009afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	461a      	mov	r2, r3
 8009b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b1c:	4413      	add	r3, r2
 8009b1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	011a      	lsls	r2, r3, #4
 8009b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b30:	4413      	add	r3, r2
 8009b32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b36:	667b      	str	r3, [r7, #100]	; 0x64
 8009b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d112      	bne.n	8009b66 <USB_EPStartXfer+0xdda>
 8009b40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b4e:	801a      	strh	r2, [r3, #0]
 8009b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b62:	801a      	strh	r2, [r3, #0]
 8009b64:	e063      	b.n	8009c2e <USB_EPStartXfer+0xea2>
 8009b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b6a:	2b3e      	cmp	r3, #62	; 0x3e
 8009b6c:	d817      	bhi.n	8009b9e <USB_EPStartXfer+0xe12>
 8009b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b72:	085b      	lsrs	r3, r3, #1
 8009b74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d004      	beq.n	8009b8e <USB_EPStartXfer+0xe02>
 8009b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b88:	3301      	adds	r3, #1
 8009b8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	029b      	lsls	r3, r3, #10
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b9a:	801a      	strh	r2, [r3, #0]
 8009b9c:	e047      	b.n	8009c2e <USB_EPStartXfer+0xea2>
 8009b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba2:	095b      	lsrs	r3, r3, #5
 8009ba4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bac:	f003 031f 	and.w	r3, r3, #31
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d104      	bne.n	8009bbe <USB_EPStartXfer+0xe32>
 8009bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	029b      	lsls	r3, r3, #10
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bd4:	801a      	strh	r2, [r3, #0]
 8009bd6:	e02a      	b.n	8009c2e <USB_EPStartXfer+0xea2>
 8009bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	785b      	ldrb	r3, [r3, #1]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d122      	bne.n	8009c2e <USB_EPStartXfer+0xea2>
 8009be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	673b      	str	r3, [r7, #112]	; 0x70
 8009bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c08:	4413      	add	r3, r2
 8009c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8009c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	011a      	lsls	r2, r3, #4
 8009c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	891b      	ldrh	r3, [r3, #8]
 8009c3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6959      	ldr	r1, [r3, #20]
 8009c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009c54:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009c58:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009c5c:	6800      	ldr	r0, [r0, #0]
 8009c5e:	f001 f80b 	bl	800ac78 <USB_WritePMA>
 8009c62:	e1d8      	b.n	800a016 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d178      	bne.n	8009d66 <USB_EPStartXfer+0xfda>
 8009c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c98:	4413      	add	r3, r2
 8009c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	011a      	lsls	r2, r3, #4
 8009cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009cb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d116      	bne.n	8009cf0 <USB_EPStartXfer+0xf64>
 8009cc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cd4:	801a      	strh	r2, [r3, #0]
 8009cd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cec:	801a      	strh	r2, [r3, #0]
 8009cee:	e06b      	b.n	8009dc8 <USB_EPStartXfer+0x103c>
 8009cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf4:	2b3e      	cmp	r3, #62	; 0x3e
 8009cf6:	d818      	bhi.n	8009d2a <USB_EPStartXfer+0xf9e>
 8009cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cfc:	085b      	lsrs	r3, r3, #1
 8009cfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d004      	beq.n	8009d18 <USB_EPStartXfer+0xf8c>
 8009d0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d12:	3301      	adds	r3, #1
 8009d14:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	029b      	lsls	r3, r3, #10
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d26:	801a      	strh	r2, [r3, #0]
 8009d28:	e04e      	b.n	8009dc8 <USB_EPStartXfer+0x103c>
 8009d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d38:	f003 031f 	and.w	r3, r3, #31
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d104      	bne.n	8009d4a <USB_EPStartXfer+0xfbe>
 8009d40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d44:	3b01      	subs	r3, #1
 8009d46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	029b      	lsls	r3, r3, #10
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d62:	801a      	strh	r2, [r3, #0]
 8009d64:	e030      	b.n	8009dc8 <USB_EPStartXfer+0x103c>
 8009d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d128      	bne.n	8009dc8 <USB_EPStartXfer+0x103c>
 8009d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	461a      	mov	r2, r3
 8009d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	011a      	lsls	r2, r3, #4
 8009dae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009db2:	4413      	add	r3, r2
 8009db4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009dc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	891b      	ldrh	r3, [r3, #8]
 8009dd4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ddc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6959      	ldr	r1, [r3, #20]
 8009de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009dee:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009df2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009df6:	6800      	ldr	r0, [r0, #0]
 8009df8:	f000 ff3e 	bl	800ac78 <USB_WritePMA>
          ep->xfer_buff += len;
 8009dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	695a      	ldr	r2, [r3, #20]
 8009e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e0c:	441a      	add	r2, r3
 8009e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	6a1a      	ldr	r2, [r3, #32]
 8009e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d90f      	bls.n	8009e56 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6a1a      	ldr	r2, [r3, #32]
 8009e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e46:	1ad2      	subs	r2, r2, r3
 8009e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	621a      	str	r2, [r3, #32]
 8009e54:	e00e      	b.n	8009e74 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2200      	movs	r2, #0
 8009e72:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 80cc 	beq.w	800a016 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d178      	bne.n	8009f8e <USB_EPStartXfer+0x1202>
 8009e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	011a      	lsls	r2, r3, #4
 8009ed4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ed8:	4413      	add	r3, r2
 8009eda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ede:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d116      	bne.n	8009f18 <USB_EPStartXfer+0x118c>
 8009eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009efc:	801a      	strh	r2, [r3, #0]
 8009efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f14:	801a      	strh	r2, [r3, #0]
 8009f16:	e064      	b.n	8009fe2 <USB_EPStartXfer+0x1256>
 8009f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f1c:	2b3e      	cmp	r3, #62	; 0x3e
 8009f1e:	d818      	bhi.n	8009f52 <USB_EPStartXfer+0x11c6>
 8009f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f24:	085b      	lsrs	r3, r3, #1
 8009f26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d004      	beq.n	8009f40 <USB_EPStartXfer+0x11b4>
 8009f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	029b      	lsls	r3, r3, #10
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f4e:	801a      	strh	r2, [r3, #0]
 8009f50:	e047      	b.n	8009fe2 <USB_EPStartXfer+0x1256>
 8009f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f56:	095b      	lsrs	r3, r3, #5
 8009f58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f60:	f003 031f 	and.w	r3, r3, #31
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d104      	bne.n	8009f72 <USB_EPStartXfer+0x11e6>
 8009f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	029b      	lsls	r3, r3, #10
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f8a:	801a      	strh	r2, [r3, #0]
 8009f8c:	e029      	b.n	8009fe2 <USB_EPStartXfer+0x1256>
 8009f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	785b      	ldrb	r3, [r3, #1]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d121      	bne.n	8009fe2 <USB_EPStartXfer+0x1256>
 8009f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	011a      	lsls	r2, r3, #4
 8009fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fcc:	4413      	add	r3, r2
 8009fce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009fd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fe0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	895b      	ldrh	r3, [r3, #10]
 8009fee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6959      	ldr	r1, [r3, #20]
 8009ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a002:	b29b      	uxth	r3, r3
 800a004:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a008:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a00c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a010:	6800      	ldr	r0, [r0, #0]
 800a012:	f000 fe31 	bl	800ac78 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	b29b      	uxth	r3, r3
 800a034:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a038:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a03c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a044:	8013      	strh	r3, [r2, #0]
 800a046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a04a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a04e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a052:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a056:	8812      	ldrh	r2, [r2, #0]
 800a058:	f082 0210 	eor.w	r2, r2, #16
 800a05c:	801a      	strh	r2, [r3, #0]
 800a05e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a062:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a066:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a06a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a06e:	8812      	ldrh	r2, [r2, #0]
 800a070:	f082 0220 	eor.w	r2, r2, #32
 800a074:	801a      	strh	r2, [r3, #0]
 800a076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a07a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	441a      	add	r2, r3
 800a090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a094:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a098:	881b      	ldrh	r3, [r3, #0]
 800a09a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a09e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	8013      	strh	r3, [r2, #0]
 800a0ae:	f000 bc9f 	b.w	800a9f0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a0b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	7b1b      	ldrb	r3, [r3, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f040 80ae 	bne.w	800a220 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a0c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	699a      	ldr	r2, [r3, #24]
 800a0d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d917      	bls.n	800a110 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800a0e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a0f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	699a      	ldr	r2, [r3, #24]
 800a0fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a100:	1ad2      	subs	r2, r2, r3
 800a102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	619a      	str	r2, [r3, #24]
 800a10e:	e00e      	b.n	800a12e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800a110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a124:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	2200      	movs	r2, #0
 800a12c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a12e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a132:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a13c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a140:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	461a      	mov	r2, r3
 800a14e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a152:	4413      	add	r3, r2
 800a154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a15c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	011a      	lsls	r2, r3, #4
 800a166:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a16a:	4413      	add	r3, r2
 800a16c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a170:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d116      	bne.n	800a1aa <USB_EPStartXfer+0x141e>
 800a17c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	b29b      	uxth	r3, r3
 800a184:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a188:	b29a      	uxth	r2, r3
 800a18a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a18e:	801a      	strh	r2, [r3, #0]
 800a190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	b29b      	uxth	r3, r3
 800a198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a19c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1a6:	801a      	strh	r2, [r3, #0]
 800a1a8:	e3e8      	b.n	800a97c <USB_EPStartXfer+0x1bf0>
 800a1aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1ae:	2b3e      	cmp	r3, #62	; 0x3e
 800a1b0:	d818      	bhi.n	800a1e4 <USB_EPStartXfer+0x1458>
 800a1b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1b6:	085b      	lsrs	r3, r3, #1
 800a1b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a1bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d004      	beq.n	800a1d2 <USB_EPStartXfer+0x1446>
 800a1c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a1d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	029b      	lsls	r3, r3, #10
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1e0:	801a      	strh	r2, [r3, #0]
 800a1e2:	e3cb      	b.n	800a97c <USB_EPStartXfer+0x1bf0>
 800a1e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1e8:	095b      	lsrs	r3, r3, #5
 800a1ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a1ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1f2:	f003 031f 	and.w	r3, r3, #31
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d104      	bne.n	800a204 <USB_EPStartXfer+0x1478>
 800a1fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1fe:	3b01      	subs	r3, #1
 800a200:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a204:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a208:	b29b      	uxth	r3, r3
 800a20a:	029b      	lsls	r3, r3, #10
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a212:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a216:	b29a      	uxth	r2, r3
 800a218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a21c:	801a      	strh	r2, [r3, #0]
 800a21e:	e3ad      	b.n	800a97c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	78db      	ldrb	r3, [r3, #3]
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	f040 8200 	bne.w	800a632 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	785b      	ldrb	r3, [r3, #1]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f040 8091 	bne.w	800a366 <USB_EPStartXfer+0x15da>
 800a244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a260:	b29b      	uxth	r3, r3
 800a262:	461a      	mov	r2, r3
 800a264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a268:	4413      	add	r3, r2
 800a26a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a26e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	011a      	lsls	r2, r3, #4
 800a27c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a280:	4413      	add	r3, r2
 800a282:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a28a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a28e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d116      	bne.n	800a2c8 <USB_EPStartXfer+0x153c>
 800a29a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2ac:	801a      	strh	r2, [r3, #0]
 800a2ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2c4:	801a      	strh	r2, [r3, #0]
 800a2c6:	e083      	b.n	800a3d0 <USB_EPStartXfer+0x1644>
 800a2c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	2b3e      	cmp	r3, #62	; 0x3e
 800a2d6:	d820      	bhi.n	800a31a <USB_EPStartXfer+0x158e>
 800a2d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	085b      	lsrs	r3, r3, #1
 800a2e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a2ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <USB_EPStartXfer+0x157c>
 800a2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a302:	3301      	adds	r3, #1
 800a304:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	029b      	lsls	r3, r3, #10
 800a310:	b29a      	uxth	r2, r3
 800a312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a316:	801a      	strh	r2, [r3, #0]
 800a318:	e05a      	b.n	800a3d0 <USB_EPStartXfer+0x1644>
 800a31a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a31e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	095b      	lsrs	r3, r3, #5
 800a328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a32c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	f003 031f 	and.w	r3, r3, #31
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d104      	bne.n	800a34a <USB_EPStartXfer+0x15be>
 800a340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a344:	3b01      	subs	r3, #1
 800a346:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a34e:	b29b      	uxth	r3, r3
 800a350:	029b      	lsls	r3, r3, #10
 800a352:	b29b      	uxth	r3, r3
 800a354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a362:	801a      	strh	r2, [r3, #0]
 800a364:	e034      	b.n	800a3d0 <USB_EPStartXfer+0x1644>
 800a366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	785b      	ldrb	r3, [r3, #1]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d12c      	bne.n	800a3d0 <USB_EPStartXfer+0x1644>
 800a376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a392:	b29b      	uxth	r3, r3
 800a394:	461a      	mov	r2, r3
 800a396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a39a:	4413      	add	r3, r2
 800a39c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a3a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	011a      	lsls	r2, r3, #4
 800a3ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a3ce:	801a      	strh	r2, [r3, #0]
 800a3d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	785b      	ldrb	r3, [r3, #1]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f040 8091 	bne.w	800a512 <USB_EPStartXfer+0x1786>
 800a3f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a3fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	461a      	mov	r2, r3
 800a410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a414:	4413      	add	r3, r2
 800a416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a41a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a41e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	011a      	lsls	r2, r3, #4
 800a428:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a42c:	4413      	add	r3, r2
 800a42e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a432:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a43a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d116      	bne.n	800a474 <USB_EPStartXfer+0x16e8>
 800a446:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a44a:	881b      	ldrh	r3, [r3, #0]
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a452:	b29a      	uxth	r2, r3
 800a454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a458:	801a      	strh	r2, [r3, #0]
 800a45a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a470:	801a      	strh	r2, [r3, #0]
 800a472:	e07c      	b.n	800a56e <USB_EPStartXfer+0x17e2>
 800a474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	2b3e      	cmp	r3, #62	; 0x3e
 800a482:	d820      	bhi.n	800a4c6 <USB_EPStartXfer+0x173a>
 800a484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	085b      	lsrs	r3, r3, #1
 800a492:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a49a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <USB_EPStartXfer+0x1728>
 800a4aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	029b      	lsls	r3, r3, #10
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4c2:	801a      	strh	r2, [r3, #0]
 800a4c4:	e053      	b.n	800a56e <USB_EPStartXfer+0x17e2>
 800a4c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	095b      	lsrs	r3, r3, #5
 800a4d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	f003 031f 	and.w	r3, r3, #31
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d104      	bne.n	800a4f6 <USB_EPStartXfer+0x176a>
 800a4ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	029b      	lsls	r3, r3, #10
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a508:	b29a      	uxth	r2, r3
 800a50a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a50e:	801a      	strh	r2, [r3, #0]
 800a510:	e02d      	b.n	800a56e <USB_EPStartXfer+0x17e2>
 800a512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d125      	bne.n	800a56e <USB_EPStartXfer+0x17e2>
 800a522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a530:	b29b      	uxth	r3, r3
 800a532:	461a      	mov	r2, r3
 800a534:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a538:	4413      	add	r3, r2
 800a53a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a53e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	011a      	lsls	r2, r3, #4
 800a54c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a550:	4413      	add	r3, r2
 800a552:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a55a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a55e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	b29a      	uxth	r2, r3
 800a568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a56c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a56e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	69db      	ldr	r3, [r3, #28]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f000 81fe 	beq.w	800a97c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a584:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a58e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4413      	add	r3, r2
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d005      	beq.n	800a5b8 <USB_EPStartXfer+0x182c>
 800a5ac:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10d      	bne.n	800a5d4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5b8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f040 81db 	bne.w	800a97c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5c6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f040 81d4 	bne.w	800a97c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a5d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	881b      	ldrh	r3, [r3, #0]
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fa:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a5fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a60c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	441a      	add	r2, r3
 800a618:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a61c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a628:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	8013      	strh	r3, [r2, #0]
 800a630:	e1a4      	b.n	800a97c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	78db      	ldrb	r3, [r3, #3]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	f040 819a 	bne.w	800a978 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	699a      	ldr	r2, [r3, #24]
 800a650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d917      	bls.n	800a690 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	699a      	ldr	r2, [r3, #24]
 800a67c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a680:	1ad2      	subs	r2, r2, r3
 800a682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	619a      	str	r2, [r3, #24]
 800a68e:	e00e      	b.n	800a6ae <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a6a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a6ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	785b      	ldrb	r3, [r3, #1]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d178      	bne.n	800a7b0 <USB_EPStartXfer+0x1a24>
 800a6be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a6cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	461a      	mov	r2, r3
 800a6de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a6e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	011a      	lsls	r2, r3, #4
 800a6f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a700:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d116      	bne.n	800a73a <USB_EPStartXfer+0x19ae>
 800a70c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	b29b      	uxth	r3, r3
 800a714:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a718:	b29a      	uxth	r2, r3
 800a71a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a71e:	801a      	strh	r2, [r3, #0]
 800a720:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	b29b      	uxth	r3, r3
 800a728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a72c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a730:	b29a      	uxth	r2, r3
 800a732:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a736:	801a      	strh	r2, [r3, #0]
 800a738:	e06b      	b.n	800a812 <USB_EPStartXfer+0x1a86>
 800a73a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a73e:	2b3e      	cmp	r3, #62	; 0x3e
 800a740:	d818      	bhi.n	800a774 <USB_EPStartXfer+0x19e8>
 800a742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a746:	085b      	lsrs	r3, r3, #1
 800a748:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a74c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b00      	cmp	r3, #0
 800a756:	d004      	beq.n	800a762 <USB_EPStartXfer+0x19d6>
 800a758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a75c:	3301      	adds	r3, #1
 800a75e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a766:	b29b      	uxth	r3, r3
 800a768:	029b      	lsls	r3, r3, #10
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a770:	801a      	strh	r2, [r3, #0]
 800a772:	e04e      	b.n	800a812 <USB_EPStartXfer+0x1a86>
 800a774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a778:	095b      	lsrs	r3, r3, #5
 800a77a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a77e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a782:	f003 031f 	and.w	r3, r3, #31
 800a786:	2b00      	cmp	r3, #0
 800a788:	d104      	bne.n	800a794 <USB_EPStartXfer+0x1a08>
 800a78a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a78e:	3b01      	subs	r3, #1
 800a790:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a798:	b29b      	uxth	r3, r3
 800a79a:	029b      	lsls	r3, r3, #10
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7ac:	801a      	strh	r2, [r3, #0]
 800a7ae:	e030      	b.n	800a812 <USB_EPStartXfer+0x1a86>
 800a7b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	785b      	ldrb	r3, [r3, #1]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d128      	bne.n	800a812 <USB_EPStartXfer+0x1a86>
 800a7c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	461a      	mov	r2, r3
 800a7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	011a      	lsls	r2, r3, #4
 800a7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a802:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a810:	801a      	strh	r2, [r3, #0]
 800a812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	785b      	ldrb	r3, [r3, #1]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d178      	bne.n	800a922 <USB_EPStartXfer+0x1b96>
 800a830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a834:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a83e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a842:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	461a      	mov	r2, r3
 800a850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a854:	4413      	add	r3, r2
 800a856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a85a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a85e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	011a      	lsls	r2, r3, #4
 800a868:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a86c:	4413      	add	r3, r2
 800a86e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a872:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d116      	bne.n	800a8ac <USB_EPStartXfer+0x1b20>
 800a87e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	b29b      	uxth	r3, r3
 800a886:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a890:	801a      	strh	r2, [r3, #0]
 800a892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	b29b      	uxth	r3, r3
 800a89a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a89e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8a8:	801a      	strh	r2, [r3, #0]
 800a8aa:	e067      	b.n	800a97c <USB_EPStartXfer+0x1bf0>
 800a8ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8b0:	2b3e      	cmp	r3, #62	; 0x3e
 800a8b2:	d818      	bhi.n	800a8e6 <USB_EPStartXfer+0x1b5a>
 800a8b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8b8:	085b      	lsrs	r3, r3, #1
 800a8ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8c2:	f003 0301 	and.w	r3, r3, #1
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d004      	beq.n	800a8d4 <USB_EPStartXfer+0x1b48>
 800a8ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	029b      	lsls	r3, r3, #10
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8e2:	801a      	strh	r2, [r3, #0]
 800a8e4:	e04a      	b.n	800a97c <USB_EPStartXfer+0x1bf0>
 800a8e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8ea:	095b      	lsrs	r3, r3, #5
 800a8ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8f4:	f003 031f 	and.w	r3, r3, #31
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d104      	bne.n	800a906 <USB_EPStartXfer+0x1b7a>
 800a8fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a900:	3b01      	subs	r3, #1
 800a902:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	029b      	lsls	r3, r3, #10
 800a90e:	b29b      	uxth	r3, r3
 800a910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a918:	b29a      	uxth	r2, r3
 800a91a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a91e:	801a      	strh	r2, [r3, #0]
 800a920:	e02c      	b.n	800a97c <USB_EPStartXfer+0x1bf0>
 800a922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	785b      	ldrb	r3, [r3, #1]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d124      	bne.n	800a97c <USB_EPStartXfer+0x1bf0>
 800a932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a936:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a940:	b29b      	uxth	r3, r3
 800a942:	461a      	mov	r2, r3
 800a944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a948:	4413      	add	r3, r2
 800a94a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a94e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	011a      	lsls	r2, r3, #4
 800a95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a960:	4413      	add	r3, r2
 800a962:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a966:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a96a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a96e:	b29a      	uxth	r2, r3
 800a970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a974:	801a      	strh	r2, [r3, #0]
 800a976:	e001      	b.n	800a97c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e03a      	b.n	800a9f2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a97c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a98a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a99e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a9a6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a9aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a9b2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a9b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a9ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a9be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	441a      	add	r2, r3
 800a9d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a9dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	785b      	ldrb	r3, [r3, #1]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d020      	beq.n	800aa50 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa24:	81bb      	strh	r3, [r7, #12]
 800aa26:	89bb      	ldrh	r3, [r7, #12]
 800aa28:	f083 0310 	eor.w	r3, r3, #16
 800aa2c:	81bb      	strh	r3, [r7, #12]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	441a      	add	r2, r3
 800aa38:	89bb      	ldrh	r3, [r7, #12]
 800aa3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	8013      	strh	r3, [r2, #0]
 800aa4e:	e01f      	b.n	800aa90 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa66:	81fb      	strh	r3, [r7, #14]
 800aa68:	89fb      	ldrh	r3, [r7, #14]
 800aa6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa6e:	81fb      	strh	r3, [r7, #14]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	441a      	add	r2, r3
 800aa7a:	89fb      	ldrh	r3, [r7, #14]
 800aa7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bc80      	pop	{r7}
 800aa9a:	4770      	bx	lr

0800aa9c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	7b1b      	ldrb	r3, [r3, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f040 809d 	bne.w	800abea <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	785b      	ldrb	r3, [r3, #1]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d04c      	beq.n	800ab52 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	823b      	strh	r3, [r7, #16]
 800aac6:	8a3b      	ldrh	r3, [r7, #16]
 800aac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d01b      	beq.n	800ab08 <USB_EPClearStall+0x6c>
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	881b      	ldrh	r3, [r3, #0]
 800aadc:	b29b      	uxth	r3, r3
 800aade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aae6:	81fb      	strh	r3, [r7, #14]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	441a      	add	r2, r3
 800aaf2:	89fb      	ldrh	r3, [r7, #14]
 800aaf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aafc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	78db      	ldrb	r3, [r3, #3]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d06c      	beq.n	800abea <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab26:	81bb      	strh	r3, [r7, #12]
 800ab28:	89bb      	ldrh	r3, [r7, #12]
 800ab2a:	f083 0320 	eor.w	r3, r3, #32
 800ab2e:	81bb      	strh	r3, [r7, #12]
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	441a      	add	r2, r3
 800ab3a:	89bb      	ldrh	r3, [r7, #12]
 800ab3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	8013      	strh	r3, [r2, #0]
 800ab50:	e04b      	b.n	800abea <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	82fb      	strh	r3, [r7, #22]
 800ab60:	8afb      	ldrh	r3, [r7, #22]
 800ab62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d01b      	beq.n	800aba2 <USB_EPClearStall+0x106>
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4413      	add	r3, r2
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab80:	82bb      	strh	r3, [r7, #20]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	441a      	add	r2, r3
 800ab8c:	8abb      	ldrh	r3, [r7, #20]
 800ab8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	b29b      	uxth	r3, r3
 800abb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abb8:	827b      	strh	r3, [r7, #18]
 800abba:	8a7b      	ldrh	r3, [r7, #18]
 800abbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800abc0:	827b      	strh	r3, [r7, #18]
 800abc2:	8a7b      	ldrh	r3, [r7, #18]
 800abc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800abc8:	827b      	strh	r3, [r7, #18]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	441a      	add	r2, r3
 800abd4:	8a7b      	ldrh	r3, [r7, #18]
 800abd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	371c      	adds	r7, #28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bc80      	pop	{r7}
 800abf4:	4770      	bx	lr

0800abf6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ac02:	78fb      	ldrb	r3, [r7, #3]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d103      	bne.n	800ac10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2280      	movs	r2, #128	; 0x80
 800ac0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bc80      	pop	{r7}
 800ac1a:	4770      	bx	lr

0800ac1c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b083      	sub	sp, #12
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bc80      	pop	{r7}
 800ac2e:	4770      	bx	lr

0800ac30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bc80      	pop	{r7}
 800ac42:	4770      	bx	lr

0800ac44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ac56:	68fb      	ldr	r3, [r7, #12]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bc80      	pop	{r7}
 800ac60:	4770      	bx	lr

0800ac62 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b083      	sub	sp, #12
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bc80      	pop	{r7}
 800ac76:	4770      	bx	lr

0800ac78 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b08d      	sub	sp, #52	; 0x34
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	4611      	mov	r1, r2
 800ac84:	461a      	mov	r2, r3
 800ac86:	460b      	mov	r3, r1
 800ac88:	80fb      	strh	r3, [r7, #6]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ac8e:	88bb      	ldrh	r3, [r7, #4]
 800ac90:	3301      	adds	r3, #1
 800ac92:	085b      	lsrs	r3, r3, #1
 800ac94:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac9e:	88fb      	ldrh	r3, [r7, #6]
 800aca0:	005a      	lsls	r2, r3, #1
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acaa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acb0:	e01e      	b.n	800acf0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800acb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800acb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acba:	3301      	adds	r3, #1
 800acbc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800acbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	461a      	mov	r2, r3
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	4313      	orrs	r3, r2
 800acce:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acda:	3302      	adds	r3, #2
 800acdc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace0:	3302      	adds	r3, #2
 800ace2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	3301      	adds	r3, #1
 800ace8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acec:	3b01      	subs	r3, #1
 800acee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1dd      	bne.n	800acb2 <USB_WritePMA+0x3a>
  }
}
 800acf6:	bf00      	nop
 800acf8:	bf00      	nop
 800acfa:	3734      	adds	r7, #52	; 0x34
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bc80      	pop	{r7}
 800ad00:	4770      	bx	lr

0800ad02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad02:	b480      	push	{r7}
 800ad04:	b08b      	sub	sp, #44	; 0x2c
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	60f8      	str	r0, [r7, #12]
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	461a      	mov	r2, r3
 800ad10:	460b      	mov	r3, r1
 800ad12:	80fb      	strh	r3, [r7, #6]
 800ad14:	4613      	mov	r3, r2
 800ad16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ad18:	88bb      	ldrh	r3, [r7, #4]
 800ad1a:	085b      	lsrs	r3, r3, #1
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad28:	88fb      	ldrh	r3, [r7, #6]
 800ad2a:	005a      	lsls	r2, r3, #1
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad34:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
 800ad3a:	e01b      	b.n	800ad74 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ad3c:	6a3b      	ldr	r3, [r7, #32]
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	3302      	adds	r3, #2
 800ad48:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	3301      	adds	r3, #1
 800ad56:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	0a1b      	lsrs	r3, r3, #8
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	69fb      	ldr	r3, [r7, #28]
 800ad60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	3301      	adds	r3, #1
 800ad66:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	3302      	adds	r3, #2
 800ad6c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad70:	3b01      	subs	r3, #1
 800ad72:	627b      	str	r3, [r7, #36]	; 0x24
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1e0      	bne.n	800ad3c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ad7a:	88bb      	ldrh	r3, [r7, #4]
 800ad7c:	f003 0301 	and.w	r3, r3, #1
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d007      	beq.n	800ad96 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	701a      	strb	r2, [r3, #0]
  }
}
 800ad96:	bf00      	nop
 800ad98:	372c      	adds	r7, #44	; 0x2c
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bc80      	pop	{r7}
 800ad9e:	4770      	bx	lr

0800ada0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	7c1b      	ldrb	r3, [r3, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d115      	bne.n	800ade4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800adb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adbc:	2202      	movs	r2, #2
 800adbe:	2181      	movs	r1, #129	; 0x81
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f001 feac 	bl	800cb1e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800adcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800add0:	2202      	movs	r2, #2
 800add2:	2101      	movs	r1, #1
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 fea2 	bl	800cb1e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ade2:	e012      	b.n	800ae0a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ade4:	2340      	movs	r3, #64	; 0x40
 800ade6:	2202      	movs	r2, #2
 800ade8:	2181      	movs	r1, #129	; 0x81
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f001 fe97 	bl	800cb1e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800adf6:	2340      	movs	r3, #64	; 0x40
 800adf8:	2202      	movs	r2, #2
 800adfa:	2101      	movs	r1, #1
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f001 fe8e 	bl	800cb1e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae0a:	2308      	movs	r3, #8
 800ae0c:	2203      	movs	r2, #3
 800ae0e:	2182      	movs	r1, #130	; 0x82
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f001 fe84 	bl	800cb1e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae1c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae20:	f001 ffa4 	bl	800cd6c <USBD_static_malloc>
 800ae24:	4602      	mov	r2, r0
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d102      	bne.n	800ae3c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800ae36:	2301      	movs	r3, #1
 800ae38:	73fb      	strb	r3, [r7, #15]
 800ae3a:	e026      	b.n	800ae8a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae42:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	7c1b      	ldrb	r3, [r3, #16]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d109      	bne.n	800ae7a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae70:	2101      	movs	r1, #1
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f001 ff44 	bl	800cd00 <USBD_LL_PrepareReceive>
 800ae78:	e007      	b.n	800ae8a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae80:	2340      	movs	r3, #64	; 0x40
 800ae82:	2101      	movs	r1, #1
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 ff3b 	bl	800cd00 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aea4:	2181      	movs	r1, #129	; 0x81
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f001 fe5f 	bl	800cb6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 fe58 	bl	800cb6a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aec2:	2182      	movs	r1, #130	; 0x82
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f001 fe50 	bl	800cb6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00e      	beq.n	800aef8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeea:	4618      	mov	r0, r3
 800aeec:	f001 ff4a 	bl	800cd84 <USBD_static_free>
    pdev->pClassData = NULL;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b086      	sub	sp, #24
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af12:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800af14:	2300      	movs	r3, #0
 800af16:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800af18:	2300      	movs	r3, #0
 800af1a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d039      	beq.n	800afa0 <USBD_CDC_Setup+0x9e>
 800af2c:	2b20      	cmp	r3, #32
 800af2e:	d17f      	bne.n	800b030 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	88db      	ldrh	r3, [r3, #6]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d029      	beq.n	800af8c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	b25b      	sxtb	r3, r3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	da11      	bge.n	800af66 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800af4e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	88d2      	ldrh	r2, [r2, #6]
 800af54:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800af56:	6939      	ldr	r1, [r7, #16]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	88db      	ldrh	r3, [r3, #6]
 800af5c:	461a      	mov	r2, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 fa09 	bl	800c376 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800af64:	e06b      	b.n	800b03e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	785a      	ldrb	r2, [r3, #1]
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	88db      	ldrh	r3, [r3, #6]
 800af74:	b2da      	uxtb	r2, r3
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800af7c:	6939      	ldr	r1, [r7, #16]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	88db      	ldrh	r3, [r3, #6]
 800af82:	461a      	mov	r2, r3
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f001 fa24 	bl	800c3d2 <USBD_CtlPrepareRx>
      break;
 800af8a:	e058      	b.n	800b03e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	7850      	ldrb	r0, [r2, #1]
 800af98:	2200      	movs	r2, #0
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	4798      	blx	r3
      break;
 800af9e:	e04e      	b.n	800b03e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	785b      	ldrb	r3, [r3, #1]
 800afa4:	2b0b      	cmp	r3, #11
 800afa6:	d02e      	beq.n	800b006 <USBD_CDC_Setup+0x104>
 800afa8:	2b0b      	cmp	r3, #11
 800afaa:	dc38      	bgt.n	800b01e <USBD_CDC_Setup+0x11c>
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <USBD_CDC_Setup+0xb4>
 800afb0:	2b0a      	cmp	r3, #10
 800afb2:	d014      	beq.n	800afde <USBD_CDC_Setup+0xdc>
 800afb4:	e033      	b.n	800b01e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afbc:	2b03      	cmp	r3, #3
 800afbe:	d107      	bne.n	800afd0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800afc0:	f107 030c 	add.w	r3, r7, #12
 800afc4:	2202      	movs	r2, #2
 800afc6:	4619      	mov	r1, r3
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f001 f9d4 	bl	800c376 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afce:	e02e      	b.n	800b02e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f001 f965 	bl	800c2a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800afd8:	2302      	movs	r3, #2
 800afda:	75fb      	strb	r3, [r7, #23]
          break;
 800afdc:	e027      	b.n	800b02e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d107      	bne.n	800aff8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800afe8:	f107 030f 	add.w	r3, r7, #15
 800afec:	2201      	movs	r2, #1
 800afee:	4619      	mov	r1, r3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f001 f9c0 	bl	800c376 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aff6:	e01a      	b.n	800b02e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aff8:	6839      	ldr	r1, [r7, #0]
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f001 f951 	bl	800c2a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b000:	2302      	movs	r3, #2
 800b002:	75fb      	strb	r3, [r7, #23]
          break;
 800b004:	e013      	b.n	800b02e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d00d      	beq.n	800b02c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f001 f945 	bl	800c2a2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b018:	2302      	movs	r3, #2
 800b01a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b01c:	e006      	b.n	800b02c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b01e:	6839      	ldr	r1, [r7, #0]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f001 f93e 	bl	800c2a2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b026:	2302      	movs	r3, #2
 800b028:	75fb      	strb	r3, [r7, #23]
          break;
 800b02a:	e000      	b.n	800b02e <USBD_CDC_Setup+0x12c>
          break;
 800b02c:	bf00      	nop
      }
      break;
 800b02e:	e006      	b.n	800b03e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f001 f935 	bl	800c2a2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b038:	2302      	movs	r3, #2
 800b03a:	75fb      	strb	r3, [r7, #23]
      break;
 800b03c:	bf00      	nop
  }

  return ret;
 800b03e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b040:	4618      	mov	r0, r3
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b05a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b062:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d03a      	beq.n	800b0e4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b06e:	78fa      	ldrb	r2, [r7, #3]
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	4613      	mov	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	440b      	add	r3, r1
 800b07c:	331c      	adds	r3, #28
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d029      	beq.n	800b0d8 <USBD_CDC_DataIn+0x90>
 800b084:	78fa      	ldrb	r2, [r7, #3]
 800b086:	6879      	ldr	r1, [r7, #4]
 800b088:	4613      	mov	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4413      	add	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	440b      	add	r3, r1
 800b092:	331c      	adds	r3, #28
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	78f9      	ldrb	r1, [r7, #3]
 800b098:	68b8      	ldr	r0, [r7, #8]
 800b09a:	460b      	mov	r3, r1
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	00db      	lsls	r3, r3, #3
 800b0a2:	4403      	add	r3, r0
 800b0a4:	3338      	adds	r3, #56	; 0x38
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0ac:	fb01 f303 	mul.w	r3, r1, r3
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d110      	bne.n	800b0d8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b0b6:	78fa      	ldrb	r2, [r7, #3]
 800b0b8:	6879      	ldr	r1, [r7, #4]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	440b      	add	r3, r1
 800b0c4:	331c      	adds	r3, #28
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0ca:	78f9      	ldrb	r1, [r7, #3]
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f001 fdf2 	bl	800ccba <USBD_LL_Transmit>
 800b0d6:	e003      	b.n	800b0e0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e000      	b.n	800b0e6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b0e4:	2302      	movs	r3, #2
  }
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b100:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b102:	78fb      	ldrb	r3, [r7, #3]
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f001 fe1d 	bl	800cd46 <USBD_LL_GetRxDataSize>
 800b10c:	4602      	mov	r2, r0
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00d      	beq.n	800b13a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b132:	4611      	mov	r1, r2
 800b134:	4798      	blx	r3

    return USBD_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	e000      	b.n	800b13c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b13a:	2302      	movs	r3, #2
  }
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b152:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d015      	beq.n	800b18a <USBD_CDC_EP0_RxReady+0x46>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b164:	2bff      	cmp	r3, #255	; 0xff
 800b166:	d010      	beq.n	800b18a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b176:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b17e:	b292      	uxth	r2, r2
 800b180:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	22ff      	movs	r2, #255	; 0xff
 800b186:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2243      	movs	r2, #67	; 0x43
 800b1a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b1a2:	4b03      	ldr	r3, [pc, #12]	; (800b1b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bc80      	pop	{r7}
 800b1ac:	4770      	bx	lr
 800b1ae:	bf00      	nop
 800b1b0:	2000009c 	.word	0x2000009c

0800b1b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2243      	movs	r2, #67	; 0x43
 800b1c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b1c2:	4b03      	ldr	r3, [pc, #12]	; (800b1d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bc80      	pop	{r7}
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	20000058 	.word	0x20000058

0800b1d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2243      	movs	r2, #67	; 0x43
 800b1e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b1e2:	4b03      	ldr	r3, [pc, #12]	; (800b1f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bc80      	pop	{r7}
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	200000e0 	.word	0x200000e0

0800b1f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	220a      	movs	r2, #10
 800b200:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b202:	4b03      	ldr	r3, [pc, #12]	; (800b210 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b204:	4618      	mov	r0, r3
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	bc80      	pop	{r7}
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	20000014 	.word	0x20000014

0800b214 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b21e:	2302      	movs	r3, #2
 800b220:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d005      	beq.n	800b234 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b234:	7bfb      	ldrb	r3, [r7, #15]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bc80      	pop	{r7}
 800b23e:	4770      	bx	lr

0800b240 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b240:	b480      	push	{r7}
 800b242:	b087      	sub	sp, #28
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	4613      	mov	r3, r2
 800b24c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b254:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b25e:	88fa      	ldrh	r2, [r7, #6]
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	371c      	adds	r7, #28
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bc80      	pop	{r7}
 800b270:	4770      	bx	lr

0800b272 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b272:	b480      	push	{r7}
 800b274:	b085      	sub	sp, #20
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b282:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	bc80      	pop	{r7}
 800b296:	4770      	bx	lr

0800b298 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01c      	beq.n	800b2ec <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d115      	bne.n	800b2e8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	2181      	movs	r1, #129	; 0x81
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f001 fceb 	bl	800ccba <USBD_LL_Transmit>

      return USBD_OK;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	e002      	b.n	800b2ee <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e000      	b.n	800b2ee <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b2ec:	2302      	movs	r3, #2
  }
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b304:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d017      	beq.n	800b340 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	7c1b      	ldrb	r3, [r3, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d109      	bne.n	800b32c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b31e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b322:	2101      	movs	r1, #1
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f001 fceb 	bl	800cd00 <USBD_LL_PrepareReceive>
 800b32a:	e007      	b.n	800b33c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b332:	2340      	movs	r3, #64	; 0x40
 800b334:	2101      	movs	r1, #1
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f001 fce2 	bl	800cd00 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b33c:	2300      	movs	r3, #0
 800b33e:	e000      	b.n	800b342 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b340:	2302      	movs	r3, #2
  }
}
 800b342:	4618      	mov	r0, r3
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b084      	sub	sp, #16
 800b34e:	af00      	add	r7, sp, #0
 800b350:	60f8      	str	r0, [r7, #12]
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	4613      	mov	r3, r2
 800b356:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d101      	bne.n	800b362 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b35e:	2302      	movs	r3, #2
 800b360:	e01a      	b.n	800b398 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2201      	movs	r2, #1
 800b386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	79fa      	ldrb	r2, [r7, #7]
 800b38e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f001 fb4f 	bl	800ca34 <USBD_LL_Init>

  return USBD_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d006      	beq.n	800b3c2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	73fb      	strb	r3, [r7, #15]
 800b3c0:	e001      	b.n	800b3c6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bc80      	pop	{r7}
 800b3d0:	4770      	bx	lr

0800b3d2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b082      	sub	sp, #8
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f001 fb84 	bl	800cae8 <USBD_LL_Start>

  return USBD_OK;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bc80      	pop	{r7}
 800b3fc:	4770      	bx	lr

0800b3fe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b084      	sub	sp, #16
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	460b      	mov	r3, r1
 800b408:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b40a:	2302      	movs	r3, #2
 800b40c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00c      	beq.n	800b432 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	78fa      	ldrb	r2, [r7, #3]
 800b422:	4611      	mov	r1, r2
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	4798      	blx	r3
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b432:	7bfb      	ldrb	r3, [r7, #15]
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	78fa      	ldrb	r2, [r7, #3]
 800b452:	4611      	mov	r1, r2
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	4798      	blx	r3

  return USBD_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b082      	sub	sp, #8
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 fed8 	bl	800c22a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b488:	461a      	mov	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b496:	f003 031f 	and.w	r3, r3, #31
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d016      	beq.n	800b4cc <USBD_LL_SetupStage+0x6a>
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d81c      	bhi.n	800b4dc <USBD_LL_SetupStage+0x7a>
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <USBD_LL_SetupStage+0x4a>
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d008      	beq.n	800b4bc <USBD_LL_SetupStage+0x5a>
 800b4aa:	e017      	b.n	800b4dc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f9cb 	bl	800b850 <USBD_StdDevReq>
      break;
 800b4ba:	e01a      	b.n	800b4f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fa2d 	bl	800b924 <USBD_StdItfReq>
      break;
 800b4ca:	e012      	b.n	800b4f2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fa6d 	bl	800b9b4 <USBD_StdEPReq>
      break;
 800b4da:	e00a      	b.n	800b4f2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b4e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f001 fb5c 	bl	800cba8 <USBD_LL_StallEP>
      break;
 800b4f0:	bf00      	nop
  }

  return USBD_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	460b      	mov	r3, r1
 800b506:	607a      	str	r2, [r7, #4]
 800b508:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b50a:	7afb      	ldrb	r3, [r7, #11]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d14b      	bne.n	800b5a8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b516:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d134      	bne.n	800b58c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d919      	bls.n	800b562 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	68da      	ldr	r2, [r3, #12]
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	1ad2      	subs	r2, r2, r3
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	68da      	ldr	r2, [r3, #12]
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b544:	429a      	cmp	r2, r3
 800b546:	d203      	bcs.n	800b550 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	e002      	b.n	800b556 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b554:	b29b      	uxth	r3, r3
 800b556:	461a      	mov	r2, r3
 800b558:	6879      	ldr	r1, [r7, #4]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 ff57 	bl	800c40e <USBD_CtlContinueRx>
 800b560:	e038      	b.n	800b5d4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b568:	691b      	ldr	r3, [r3, #16]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00a      	beq.n	800b584 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b574:	2b03      	cmp	r3, #3
 800b576:	d105      	bne.n	800b584 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f000 ff54 	bl	800c432 <USBD_CtlSendStatus>
 800b58a:	e023      	b.n	800b5d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b592:	2b05      	cmp	r3, #5
 800b594:	d11e      	bne.n	800b5d4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b59e:	2100      	movs	r1, #0
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f001 fb01 	bl	800cba8 <USBD_LL_StallEP>
 800b5a6:	e015      	b.n	800b5d4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00d      	beq.n	800b5d0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d108      	bne.n	800b5d0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	7afa      	ldrb	r2, [r7, #11]
 800b5c8:	4611      	mov	r1, r2
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	4798      	blx	r3
 800b5ce:	e001      	b.n	800b5d4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b5d0:	2302      	movs	r3, #2
 800b5d2:	e000      	b.n	800b5d6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3718      	adds	r7, #24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b086      	sub	sp, #24
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	607a      	str	r2, [r7, #4]
 800b5ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b5ec:	7afb      	ldrb	r3, [r7, #11]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d17f      	bne.n	800b6f2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3314      	adds	r3, #20
 800b5f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d15c      	bne.n	800b6bc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	68da      	ldr	r2, [r3, #12]
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d915      	bls.n	800b63a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	691b      	ldr	r3, [r3, #16]
 800b616:	1ad2      	subs	r2, r2, r3
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	b29b      	uxth	r3, r3
 800b622:	461a      	mov	r2, r3
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 fec1 	bl	800c3ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b62c:	2300      	movs	r3, #0
 800b62e:	2200      	movs	r2, #0
 800b630:	2100      	movs	r1, #0
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f001 fb64 	bl	800cd00 <USBD_LL_PrepareReceive>
 800b638:	e04e      	b.n	800b6d8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	6912      	ldr	r2, [r2, #16]
 800b642:	fbb3 f1f2 	udiv	r1, r3, r2
 800b646:	fb01 f202 	mul.w	r2, r1, r2
 800b64a:	1a9b      	subs	r3, r3, r2
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d11c      	bne.n	800b68a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	689a      	ldr	r2, [r3, #8]
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b658:	429a      	cmp	r2, r3
 800b65a:	d316      	bcc.n	800b68a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	689a      	ldr	r2, [r3, #8]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b666:	429a      	cmp	r2, r3
 800b668:	d20f      	bcs.n	800b68a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b66a:	2200      	movs	r2, #0
 800b66c:	2100      	movs	r1, #0
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f000 fe9d 	bl	800c3ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b67c:	2300      	movs	r3, #0
 800b67e:	2200      	movs	r2, #0
 800b680:	2100      	movs	r1, #0
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f001 fb3c 	bl	800cd00 <USBD_LL_PrepareReceive>
 800b688:	e026      	b.n	800b6d8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00a      	beq.n	800b6ac <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b69c:	2b03      	cmp	r3, #3
 800b69e:	d105      	bne.n	800b6ac <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b6ac:	2180      	movs	r1, #128	; 0x80
 800b6ae:	68f8      	ldr	r0, [r7, #12]
 800b6b0:	f001 fa7a 	bl	800cba8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f000 fecf 	bl	800c458 <USBD_CtlReceiveStatus>
 800b6ba:	e00d      	b.n	800b6d8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6c2:	2b04      	cmp	r3, #4
 800b6c4:	d004      	beq.n	800b6d0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d103      	bne.n	800b6d8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b6d0:	2180      	movs	r1, #128	; 0x80
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f001 fa68 	bl	800cba8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d11d      	bne.n	800b71e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f7ff fe81 	bl	800b3ea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b6f0:	e015      	b.n	800b71e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00d      	beq.n	800b71a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b704:	2b03      	cmp	r3, #3
 800b706:	d108      	bne.n	800b71a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	7afa      	ldrb	r2, [r7, #11]
 800b712:	4611      	mov	r1, r2
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	4798      	blx	r3
 800b718:	e001      	b.n	800b71e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b71a:	2302      	movs	r3, #2
 800b71c:	e000      	b.n	800b720 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3718      	adds	r7, #24
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b730:	2340      	movs	r3, #64	; 0x40
 800b732:	2200      	movs	r2, #0
 800b734:	2100      	movs	r1, #0
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f001 f9f1 	bl	800cb1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2240      	movs	r2, #64	; 0x40
 800b748:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b74c:	2340      	movs	r3, #64	; 0x40
 800b74e:	2200      	movs	r2, #0
 800b750:	2180      	movs	r1, #128	; 0x80
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f001 f9e3 	bl	800cb1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2240      	movs	r2, #64	; 0x40
 800b762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d009      	beq.n	800b7a0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	6852      	ldr	r2, [r2, #4]
 800b798:	b2d2      	uxtb	r2, r2
 800b79a:	4611      	mov	r1, r2
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	4798      	blx	r3
  }

  return USBD_OK;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b7aa:	b480      	push	{r7}
 800b7ac:	b083      	sub	sp, #12
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	78fa      	ldrb	r2, [r7, #3]
 800b7ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	370c      	adds	r7, #12
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bc80      	pop	{r7}
 800b7c6:	4770      	bx	lr

0800b7c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2204      	movs	r2, #4
 800b7e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bc80      	pop	{r7}
 800b7ee:	4770      	bx	lr

0800b7f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	d105      	bne.n	800b80e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	bc80      	pop	{r7}
 800b818:	4770      	bx	lr

0800b81a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b082      	sub	sp, #8
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d10b      	bne.n	800b844 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d005      	beq.n	800b844 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83e:	69db      	ldr	r3, [r3, #28]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
	...

0800b850 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b866:	2b40      	cmp	r3, #64	; 0x40
 800b868:	d005      	beq.n	800b876 <USBD_StdDevReq+0x26>
 800b86a:	2b40      	cmp	r3, #64	; 0x40
 800b86c:	d84f      	bhi.n	800b90e <USBD_StdDevReq+0xbe>
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d009      	beq.n	800b886 <USBD_StdDevReq+0x36>
 800b872:	2b20      	cmp	r3, #32
 800b874:	d14b      	bne.n	800b90e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	6839      	ldr	r1, [r7, #0]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	4798      	blx	r3
      break;
 800b884:	e048      	b.n	800b918 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	785b      	ldrb	r3, [r3, #1]
 800b88a:	2b09      	cmp	r3, #9
 800b88c:	d839      	bhi.n	800b902 <USBD_StdDevReq+0xb2>
 800b88e:	a201      	add	r2, pc, #4	; (adr r2, 800b894 <USBD_StdDevReq+0x44>)
 800b890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b894:	0800b8e5 	.word	0x0800b8e5
 800b898:	0800b8f9 	.word	0x0800b8f9
 800b89c:	0800b903 	.word	0x0800b903
 800b8a0:	0800b8ef 	.word	0x0800b8ef
 800b8a4:	0800b903 	.word	0x0800b903
 800b8a8:	0800b8c7 	.word	0x0800b8c7
 800b8ac:	0800b8bd 	.word	0x0800b8bd
 800b8b0:	0800b903 	.word	0x0800b903
 800b8b4:	0800b8db 	.word	0x0800b8db
 800b8b8:	0800b8d1 	.word	0x0800b8d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8bc:	6839      	ldr	r1, [r7, #0]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f9dc 	bl	800bc7c <USBD_GetDescriptor>
          break;
 800b8c4:	e022      	b.n	800b90c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fb3f 	bl	800bf4c <USBD_SetAddress>
          break;
 800b8ce:	e01d      	b.n	800b90c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fb7e 	bl	800bfd4 <USBD_SetConfig>
          break;
 800b8d8:	e018      	b.n	800b90c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 fc07 	bl	800c0f0 <USBD_GetConfig>
          break;
 800b8e2:	e013      	b.n	800b90c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fc37 	bl	800c15a <USBD_GetStatus>
          break;
 800b8ec:	e00e      	b.n	800b90c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fc65 	bl	800c1c0 <USBD_SetFeature>
          break;
 800b8f6:	e009      	b.n	800b90c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fc74 	bl	800c1e8 <USBD_ClrFeature>
          break;
 800b900:	e004      	b.n	800b90c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fccc 	bl	800c2a2 <USBD_CtlError>
          break;
 800b90a:	bf00      	nop
      }
      break;
 800b90c:	e004      	b.n	800b918 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fcc6 	bl	800c2a2 <USBD_CtlError>
      break;
 800b916:	bf00      	nop
  }

  return ret;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop

0800b924 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b93a:	2b40      	cmp	r3, #64	; 0x40
 800b93c:	d005      	beq.n	800b94a <USBD_StdItfReq+0x26>
 800b93e:	2b40      	cmp	r3, #64	; 0x40
 800b940:	d82e      	bhi.n	800b9a0 <USBD_StdItfReq+0x7c>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <USBD_StdItfReq+0x26>
 800b946:	2b20      	cmp	r3, #32
 800b948:	d12a      	bne.n	800b9a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b950:	3b01      	subs	r3, #1
 800b952:	2b02      	cmp	r3, #2
 800b954:	d81d      	bhi.n	800b992 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	889b      	ldrh	r3, [r3, #4]
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d813      	bhi.n	800b988 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	4798      	blx	r3
 800b96e:	4603      	mov	r3, r0
 800b970:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	88db      	ldrh	r3, [r3, #6]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d110      	bne.n	800b99c <USBD_StdItfReq+0x78>
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10d      	bne.n	800b99c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fd56 	bl	800c432 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b986:	e009      	b.n	800b99c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fc89 	bl	800c2a2 <USBD_CtlError>
          break;
 800b990:	e004      	b.n	800b99c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fc84 	bl	800c2a2 <USBD_CtlError>
          break;
 800b99a:	e000      	b.n	800b99e <USBD_StdItfReq+0x7a>
          break;
 800b99c:	bf00      	nop
      }
      break;
 800b99e:	e004      	b.n	800b9aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fc7d 	bl	800c2a2 <USBD_CtlError>
      break;
 800b9a8:	bf00      	nop
  }

  return USBD_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	889b      	ldrh	r3, [r3, #4]
 800b9c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9d0:	2b40      	cmp	r3, #64	; 0x40
 800b9d2:	d007      	beq.n	800b9e4 <USBD_StdEPReq+0x30>
 800b9d4:	2b40      	cmp	r3, #64	; 0x40
 800b9d6:	f200 8146 	bhi.w	800bc66 <USBD_StdEPReq+0x2b2>
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <USBD_StdEPReq+0x40>
 800b9de:	2b20      	cmp	r3, #32
 800b9e0:	f040 8141 	bne.w	800bc66 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ea:	689b      	ldr	r3, [r3, #8]
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	4798      	blx	r3
      break;
 800b9f2:	e13d      	b.n	800bc70 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9fc:	2b20      	cmp	r3, #32
 800b9fe:	d10a      	bne.n	800ba16 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	4798      	blx	r3
 800ba0e:	4603      	mov	r3, r0
 800ba10:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ba12:	7bfb      	ldrb	r3, [r7, #15]
 800ba14:	e12d      	b.n	800bc72 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	785b      	ldrb	r3, [r3, #1]
 800ba1a:	2b03      	cmp	r3, #3
 800ba1c:	d007      	beq.n	800ba2e <USBD_StdEPReq+0x7a>
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	f300 811b 	bgt.w	800bc5a <USBD_StdEPReq+0x2a6>
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d072      	beq.n	800bb0e <USBD_StdEPReq+0x15a>
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d03a      	beq.n	800baa2 <USBD_StdEPReq+0xee>
 800ba2c:	e115      	b.n	800bc5a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d002      	beq.n	800ba3e <USBD_StdEPReq+0x8a>
 800ba38:	2b03      	cmp	r3, #3
 800ba3a:	d015      	beq.n	800ba68 <USBD_StdEPReq+0xb4>
 800ba3c:	e02b      	b.n	800ba96 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba3e:	7bbb      	ldrb	r3, [r7, #14]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00c      	beq.n	800ba5e <USBD_StdEPReq+0xaa>
 800ba44:	7bbb      	ldrb	r3, [r7, #14]
 800ba46:	2b80      	cmp	r3, #128	; 0x80
 800ba48:	d009      	beq.n	800ba5e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f001 f8aa 	bl	800cba8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ba54:	2180      	movs	r1, #128	; 0x80
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 f8a6 	bl	800cba8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba5c:	e020      	b.n	800baa0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fc1e 	bl	800c2a2 <USBD_CtlError>
              break;
 800ba66:	e01b      	b.n	800baa0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	885b      	ldrh	r3, [r3, #2]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10e      	bne.n	800ba8e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ba70:	7bbb      	ldrb	r3, [r7, #14]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00b      	beq.n	800ba8e <USBD_StdEPReq+0xda>
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	2b80      	cmp	r3, #128	; 0x80
 800ba7a:	d008      	beq.n	800ba8e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	88db      	ldrh	r3, [r3, #6]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d104      	bne.n	800ba8e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ba84:	7bbb      	ldrb	r3, [r7, #14]
 800ba86:	4619      	mov	r1, r3
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f001 f88d 	bl	800cba8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fccf 	bl	800c432 <USBD_CtlSendStatus>

              break;
 800ba94:	e004      	b.n	800baa0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fc02 	bl	800c2a2 <USBD_CtlError>
              break;
 800ba9e:	bf00      	nop
          }
          break;
 800baa0:	e0e0      	b.n	800bc64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d002      	beq.n	800bab2 <USBD_StdEPReq+0xfe>
 800baac:	2b03      	cmp	r3, #3
 800baae:	d015      	beq.n	800badc <USBD_StdEPReq+0x128>
 800bab0:	e026      	b.n	800bb00 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00c      	beq.n	800bad2 <USBD_StdEPReq+0x11e>
 800bab8:	7bbb      	ldrb	r3, [r7, #14]
 800baba:	2b80      	cmp	r3, #128	; 0x80
 800babc:	d009      	beq.n	800bad2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800babe:	7bbb      	ldrb	r3, [r7, #14]
 800bac0:	4619      	mov	r1, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f001 f870 	bl	800cba8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bac8:	2180      	movs	r1, #128	; 0x80
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f001 f86c 	bl	800cba8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bad0:	e01c      	b.n	800bb0c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fbe4 	bl	800c2a2 <USBD_CtlError>
              break;
 800bada:	e017      	b.n	800bb0c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	885b      	ldrh	r3, [r3, #2]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d112      	bne.n	800bb0a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
 800bae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baea:	2b00      	cmp	r3, #0
 800baec:	d004      	beq.n	800baf8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800baee:	7bbb      	ldrb	r3, [r7, #14]
 800baf0:	4619      	mov	r1, r3
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f001 f877 	bl	800cbe6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fc9a 	bl	800c432 <USBD_CtlSendStatus>
              }
              break;
 800bafe:	e004      	b.n	800bb0a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fbcd 	bl	800c2a2 <USBD_CtlError>
              break;
 800bb08:	e000      	b.n	800bb0c <USBD_StdEPReq+0x158>
              break;
 800bb0a:	bf00      	nop
          }
          break;
 800bb0c:	e0aa      	b.n	800bc64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d002      	beq.n	800bb1e <USBD_StdEPReq+0x16a>
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d032      	beq.n	800bb82 <USBD_StdEPReq+0x1ce>
 800bb1c:	e097      	b.n	800bc4e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d007      	beq.n	800bb34 <USBD_StdEPReq+0x180>
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
 800bb26:	2b80      	cmp	r3, #128	; 0x80
 800bb28:	d004      	beq.n	800bb34 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fbb8 	bl	800c2a2 <USBD_CtlError>
                break;
 800bb32:	e091      	b.n	800bc58 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	da0b      	bge.n	800bb54 <USBD_StdEPReq+0x1a0>
 800bb3c:	7bbb      	ldrb	r3, [r7, #14]
 800bb3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb42:	4613      	mov	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	4413      	add	r3, r2
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	3310      	adds	r3, #16
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	4413      	add	r3, r2
 800bb50:	3304      	adds	r3, #4
 800bb52:	e00b      	b.n	800bb6c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
 800bb56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4413      	add	r3, r2
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	4413      	add	r3, r2
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2200      	movs	r2, #0
 800bb72:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2202      	movs	r2, #2
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fbfb 	bl	800c376 <USBD_CtlSendData>
              break;
 800bb80:	e06a      	b.n	800bc58 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	da11      	bge.n	800bbae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb8a:	7bbb      	ldrb	r3, [r7, #14]
 800bb8c:	f003 020f 	and.w	r2, r3, #15
 800bb90:	6879      	ldr	r1, [r7, #4]
 800bb92:	4613      	mov	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	440b      	add	r3, r1
 800bb9c:	3318      	adds	r3, #24
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d117      	bne.n	800bbd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fb7b 	bl	800c2a2 <USBD_CtlError>
                  break;
 800bbac:	e054      	b.n	800bc58 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bbae:	7bbb      	ldrb	r3, [r7, #14]
 800bbb0:	f003 020f 	and.w	r2, r3, #15
 800bbb4:	6879      	ldr	r1, [r7, #4]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	440b      	add	r3, r1
 800bbc0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d104      	bne.n	800bbd4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fb68 	bl	800c2a2 <USBD_CtlError>
                  break;
 800bbd2:	e041      	b.n	800bc58 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	da0b      	bge.n	800bbf4 <USBD_StdEPReq+0x240>
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
 800bbde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	3310      	adds	r3, #16
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	4413      	add	r3, r2
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	e00b      	b.n	800bc0c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4413      	add	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	4413      	add	r3, r2
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <USBD_StdEPReq+0x266>
 800bc14:	7bbb      	ldrb	r3, [r7, #14]
 800bc16:	2b80      	cmp	r3, #128	; 0x80
 800bc18:	d103      	bne.n	800bc22 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	601a      	str	r2, [r3, #0]
 800bc20:	e00e      	b.n	800bc40 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bc22:	7bbb      	ldrb	r3, [r7, #14]
 800bc24:	4619      	mov	r1, r3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fffc 	bl	800cc24 <USBD_LL_IsStallEP>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	2201      	movs	r2, #1
 800bc36:	601a      	str	r2, [r3, #0]
 800bc38:	e002      	b.n	800bc40 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2202      	movs	r2, #2
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fb95 	bl	800c376 <USBD_CtlSendData>
              break;
 800bc4c:	e004      	b.n	800bc58 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bc4e:	6839      	ldr	r1, [r7, #0]
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fb26 	bl	800c2a2 <USBD_CtlError>
              break;
 800bc56:	bf00      	nop
          }
          break;
 800bc58:	e004      	b.n	800bc64 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bc5a:	6839      	ldr	r1, [r7, #0]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fb20 	bl	800c2a2 <USBD_CtlError>
          break;
 800bc62:	bf00      	nop
      }
      break;
 800bc64:	e004      	b.n	800bc70 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fb1a 	bl	800c2a2 <USBD_CtlError>
      break;
 800bc6e:	bf00      	nop
  }

  return ret;
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
	...

0800bc7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	885b      	ldrh	r3, [r3, #2]
 800bc96:	0a1b      	lsrs	r3, r3, #8
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	2b06      	cmp	r3, #6
 800bc9e:	f200 8128 	bhi.w	800bef2 <USBD_GetDescriptor+0x276>
 800bca2:	a201      	add	r2, pc, #4	; (adr r2, 800bca8 <USBD_GetDescriptor+0x2c>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bcc5 	.word	0x0800bcc5
 800bcac:	0800bcdd 	.word	0x0800bcdd
 800bcb0:	0800bd1d 	.word	0x0800bd1d
 800bcb4:	0800bef3 	.word	0x0800bef3
 800bcb8:	0800bef3 	.word	0x0800bef3
 800bcbc:	0800be93 	.word	0x0800be93
 800bcc0:	0800bebf 	.word	0x0800bebf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	7c12      	ldrb	r2, [r2, #16]
 800bcd0:	f107 0108 	add.w	r1, r7, #8
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	4798      	blx	r3
 800bcd8:	60f8      	str	r0, [r7, #12]
      break;
 800bcda:	e112      	b.n	800bf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	7c1b      	ldrb	r3, [r3, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10d      	bne.n	800bd00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcec:	f107 0208 	add.w	r2, r7, #8
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	4798      	blx	r3
 800bcf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	2202      	movs	r2, #2
 800bcfc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bcfe:	e100      	b.n	800bf02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	f107 0208 	add.w	r2, r7, #8
 800bd0c:	4610      	mov	r0, r2
 800bd0e:	4798      	blx	r3
 800bd10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3301      	adds	r3, #1
 800bd16:	2202      	movs	r2, #2
 800bd18:	701a      	strb	r2, [r3, #0]
      break;
 800bd1a:	e0f2      	b.n	800bf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	885b      	ldrh	r3, [r3, #2]
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b05      	cmp	r3, #5
 800bd24:	f200 80ac 	bhi.w	800be80 <USBD_GetDescriptor+0x204>
 800bd28:	a201      	add	r2, pc, #4	; (adr r2, 800bd30 <USBD_GetDescriptor+0xb4>)
 800bd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2e:	bf00      	nop
 800bd30:	0800bd49 	.word	0x0800bd49
 800bd34:	0800bd7d 	.word	0x0800bd7d
 800bd38:	0800bdb1 	.word	0x0800bdb1
 800bd3c:	0800bde5 	.word	0x0800bde5
 800bd40:	0800be19 	.word	0x0800be19
 800bd44:	0800be4d 	.word	0x0800be4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00b      	beq.n	800bd6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	7c12      	ldrb	r2, [r2, #16]
 800bd60:	f107 0108 	add.w	r1, r7, #8
 800bd64:	4610      	mov	r0, r2
 800bd66:	4798      	blx	r3
 800bd68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd6a:	e091      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd6c:	6839      	ldr	r1, [r7, #0]
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fa97 	bl	800c2a2 <USBD_CtlError>
            err++;
 800bd74:	7afb      	ldrb	r3, [r7, #11]
 800bd76:	3301      	adds	r3, #1
 800bd78:	72fb      	strb	r3, [r7, #11]
          break;
 800bd7a:	e089      	b.n	800be90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00b      	beq.n	800bda0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	7c12      	ldrb	r2, [r2, #16]
 800bd94:	f107 0108 	add.w	r1, r7, #8
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4798      	blx	r3
 800bd9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd9e:	e077      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bda0:	6839      	ldr	r1, [r7, #0]
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 fa7d 	bl	800c2a2 <USBD_CtlError>
            err++;
 800bda8:	7afb      	ldrb	r3, [r7, #11]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	72fb      	strb	r3, [r7, #11]
          break;
 800bdae:	e06f      	b.n	800be90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00b      	beq.n	800bdd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	7c12      	ldrb	r2, [r2, #16]
 800bdc8:	f107 0108 	add.w	r1, r7, #8
 800bdcc:	4610      	mov	r0, r2
 800bdce:	4798      	blx	r3
 800bdd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdd2:	e05d      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdd4:	6839      	ldr	r1, [r7, #0]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fa63 	bl	800c2a2 <USBD_CtlError>
            err++;
 800bddc:	7afb      	ldrb	r3, [r7, #11]
 800bdde:	3301      	adds	r3, #1
 800bde0:	72fb      	strb	r3, [r7, #11]
          break;
 800bde2:	e055      	b.n	800be90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d00b      	beq.n	800be08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	7c12      	ldrb	r2, [r2, #16]
 800bdfc:	f107 0108 	add.w	r1, r7, #8
 800be00:	4610      	mov	r0, r2
 800be02:	4798      	blx	r3
 800be04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be06:	e043      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fa49 	bl	800c2a2 <USBD_CtlError>
            err++;
 800be10:	7afb      	ldrb	r3, [r7, #11]
 800be12:	3301      	adds	r3, #1
 800be14:	72fb      	strb	r3, [r7, #11]
          break;
 800be16:	e03b      	b.n	800be90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be1e:	695b      	ldr	r3, [r3, #20]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00b      	beq.n	800be3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be2a:	695b      	ldr	r3, [r3, #20]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	7c12      	ldrb	r2, [r2, #16]
 800be30:	f107 0108 	add.w	r1, r7, #8
 800be34:	4610      	mov	r0, r2
 800be36:	4798      	blx	r3
 800be38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be3a:	e029      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fa2f 	bl	800c2a2 <USBD_CtlError>
            err++;
 800be44:	7afb      	ldrb	r3, [r7, #11]
 800be46:	3301      	adds	r3, #1
 800be48:	72fb      	strb	r3, [r7, #11]
          break;
 800be4a:	e021      	b.n	800be90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	7c12      	ldrb	r2, [r2, #16]
 800be64:	f107 0108 	add.w	r1, r7, #8
 800be68:	4610      	mov	r0, r2
 800be6a:	4798      	blx	r3
 800be6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be6e:	e00f      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fa15 	bl	800c2a2 <USBD_CtlError>
            err++;
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	3301      	adds	r3, #1
 800be7c:	72fb      	strb	r3, [r7, #11]
          break;
 800be7e:	e007      	b.n	800be90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa0d 	bl	800c2a2 <USBD_CtlError>
          err++;
 800be88:	7afb      	ldrb	r3, [r7, #11]
 800be8a:	3301      	adds	r3, #1
 800be8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800be8e:	e038      	b.n	800bf02 <USBD_GetDescriptor+0x286>
 800be90:	e037      	b.n	800bf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	7c1b      	ldrb	r3, [r3, #16]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d109      	bne.n	800beae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bea2:	f107 0208 	add.w	r2, r7, #8
 800bea6:	4610      	mov	r0, r2
 800bea8:	4798      	blx	r3
 800beaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800beac:	e029      	b.n	800bf02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f9f6 	bl	800c2a2 <USBD_CtlError>
        err++;
 800beb6:	7afb      	ldrb	r3, [r7, #11]
 800beb8:	3301      	adds	r3, #1
 800beba:	72fb      	strb	r3, [r7, #11]
      break;
 800bebc:	e021      	b.n	800bf02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	7c1b      	ldrb	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10d      	bne.n	800bee2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800becc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bece:	f107 0208 	add.w	r2, r7, #8
 800bed2:	4610      	mov	r0, r2
 800bed4:	4798      	blx	r3
 800bed6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	3301      	adds	r3, #1
 800bedc:	2207      	movs	r2, #7
 800bede:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bee0:	e00f      	b.n	800bf02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f9dc 	bl	800c2a2 <USBD_CtlError>
        err++;
 800beea:	7afb      	ldrb	r3, [r7, #11]
 800beec:	3301      	adds	r3, #1
 800beee:	72fb      	strb	r3, [r7, #11]
      break;
 800bef0:	e007      	b.n	800bf02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 f9d4 	bl	800c2a2 <USBD_CtlError>
      err++;
 800befa:	7afb      	ldrb	r3, [r7, #11]
 800befc:	3301      	adds	r3, #1
 800befe:	72fb      	strb	r3, [r7, #11]
      break;
 800bf00:	bf00      	nop
  }

  if (err != 0U)
 800bf02:	7afb      	ldrb	r3, [r7, #11]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d11c      	bne.n	800bf42 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800bf08:	893b      	ldrh	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d011      	beq.n	800bf32 <USBD_GetDescriptor+0x2b6>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	88db      	ldrh	r3, [r3, #6]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00d      	beq.n	800bf32 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	88da      	ldrh	r2, [r3, #6]
 800bf1a:	893b      	ldrh	r3, [r7, #8]
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	bf28      	it	cs
 800bf20:	4613      	movcs	r3, r2
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf26:	893b      	ldrh	r3, [r7, #8]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fa22 	bl	800c376 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	88db      	ldrh	r3, [r3, #6]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d104      	bne.n	800bf44 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa79 	bl	800c432 <USBD_CtlSendStatus>
 800bf40:	e000      	b.n	800bf44 <USBD_GetDescriptor+0x2c8>
    return;
 800bf42:	bf00      	nop
    }
  }
}
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop

0800bf4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	889b      	ldrh	r3, [r3, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d130      	bne.n	800bfc0 <USBD_SetAddress+0x74>
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	88db      	ldrh	r3, [r3, #6]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d12c      	bne.n	800bfc0 <USBD_SetAddress+0x74>
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	885b      	ldrh	r3, [r3, #2]
 800bf6a:	2b7f      	cmp	r3, #127	; 0x7f
 800bf6c:	d828      	bhi.n	800bfc0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	885b      	ldrh	r3, [r3, #2]
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf80:	2b03      	cmp	r3, #3
 800bf82:	d104      	bne.n	800bf8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f98b 	bl	800c2a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf8c:	e01d      	b.n	800bfca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	7bfa      	ldrb	r2, [r7, #15]
 800bf92:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf96:	7bfb      	ldrb	r3, [r7, #15]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fe6e 	bl	800cc7c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 fa46 	bl	800c432 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d004      	beq.n	800bfb6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2202      	movs	r2, #2
 800bfb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb4:	e009      	b.n	800bfca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfbe:	e004      	b.n	800bfca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f96d 	bl	800c2a2 <USBD_CtlError>
  }
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	885b      	ldrh	r3, [r3, #2]
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	4b41      	ldr	r3, [pc, #260]	; (800c0ec <USBD_SetConfig+0x118>)
 800bfe6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bfe8:	4b40      	ldr	r3, [pc, #256]	; (800c0ec <USBD_SetConfig+0x118>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d904      	bls.n	800bffa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f955 	bl	800c2a2 <USBD_CtlError>
 800bff8:	e075      	b.n	800c0e6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c000:	2b02      	cmp	r3, #2
 800c002:	d002      	beq.n	800c00a <USBD_SetConfig+0x36>
 800c004:	2b03      	cmp	r3, #3
 800c006:	d023      	beq.n	800c050 <USBD_SetConfig+0x7c>
 800c008:	e062      	b.n	800c0d0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c00a:	4b38      	ldr	r3, [pc, #224]	; (800c0ec <USBD_SetConfig+0x118>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d01a      	beq.n	800c048 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c012:	4b36      	ldr	r3, [pc, #216]	; (800c0ec <USBD_SetConfig+0x118>)
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2203      	movs	r2, #3
 800c020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c024:	4b31      	ldr	r3, [pc, #196]	; (800c0ec <USBD_SetConfig+0x118>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	4619      	mov	r1, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7ff f9e7 	bl	800b3fe <USBD_SetClassConfig>
 800c030:	4603      	mov	r3, r0
 800c032:	2b02      	cmp	r3, #2
 800c034:	d104      	bne.n	800c040 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f932 	bl	800c2a2 <USBD_CtlError>
            return;
 800c03e:	e052      	b.n	800c0e6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f9f6 	bl	800c432 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c046:	e04e      	b.n	800c0e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f9f2 	bl	800c432 <USBD_CtlSendStatus>
        break;
 800c04e:	e04a      	b.n	800c0e6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c050:	4b26      	ldr	r3, [pc, #152]	; (800c0ec <USBD_SetConfig+0x118>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d112      	bne.n	800c07e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2202      	movs	r2, #2
 800c05c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c060:	4b22      	ldr	r3, [pc, #136]	; (800c0ec <USBD_SetConfig+0x118>)
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	461a      	mov	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c06a:	4b20      	ldr	r3, [pc, #128]	; (800c0ec <USBD_SetConfig+0x118>)
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff f9e3 	bl	800b43c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f9db 	bl	800c432 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c07c:	e033      	b.n	800c0e6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c07e:	4b1b      	ldr	r3, [pc, #108]	; (800c0ec <USBD_SetConfig+0x118>)
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d01d      	beq.n	800c0c8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	b2db      	uxtb	r3, r3
 800c092:	4619      	mov	r1, r3
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff f9d1 	bl	800b43c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c09a:	4b14      	ldr	r3, [pc, #80]	; (800c0ec <USBD_SetConfig+0x118>)
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c0a4:	4b11      	ldr	r3, [pc, #68]	; (800c0ec <USBD_SetConfig+0x118>)
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff f9a7 	bl	800b3fe <USBD_SetClassConfig>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d104      	bne.n	800c0c0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f8f2 	bl	800c2a2 <USBD_CtlError>
            return;
 800c0be:	e012      	b.n	800c0e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f9b6 	bl	800c432 <USBD_CtlSendStatus>
        break;
 800c0c6:	e00e      	b.n	800c0e6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 f9b2 	bl	800c432 <USBD_CtlSendStatus>
        break;
 800c0ce:	e00a      	b.n	800c0e6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f8e5 	bl	800c2a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c0d8:	4b04      	ldr	r3, [pc, #16]	; (800c0ec <USBD_SetConfig+0x118>)
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	4619      	mov	r1, r3
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff f9ac 	bl	800b43c <USBD_ClrClassConfig>
        break;
 800c0e4:	bf00      	nop
    }
  }
}
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	20000b40 	.word	0x20000b40

0800c0f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	88db      	ldrh	r3, [r3, #6]
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d004      	beq.n	800c10c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f8cc 	bl	800c2a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c10a:	e022      	b.n	800c152 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c112:	2b02      	cmp	r3, #2
 800c114:	dc02      	bgt.n	800c11c <USBD_GetConfig+0x2c>
 800c116:	2b00      	cmp	r3, #0
 800c118:	dc03      	bgt.n	800c122 <USBD_GetConfig+0x32>
 800c11a:	e015      	b.n	800c148 <USBD_GetConfig+0x58>
 800c11c:	2b03      	cmp	r3, #3
 800c11e:	d00b      	beq.n	800c138 <USBD_GetConfig+0x48>
 800c120:	e012      	b.n	800c148 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	3308      	adds	r3, #8
 800c12c:	2201      	movs	r2, #1
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f920 	bl	800c376 <USBD_CtlSendData>
        break;
 800c136:	e00c      	b.n	800c152 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	3304      	adds	r3, #4
 800c13c:	2201      	movs	r2, #1
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f918 	bl	800c376 <USBD_CtlSendData>
        break;
 800c146:	e004      	b.n	800c152 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f8a9 	bl	800c2a2 <USBD_CtlError>
        break;
 800c150:	bf00      	nop
}
 800c152:	bf00      	nop
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
 800c162:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c16a:	3b01      	subs	r3, #1
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d81e      	bhi.n	800c1ae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	88db      	ldrh	r3, [r3, #6]
 800c174:	2b02      	cmp	r3, #2
 800c176:	d004      	beq.n	800c182 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f891 	bl	800c2a2 <USBD_CtlError>
        break;
 800c180:	e01a      	b.n	800c1b8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2201      	movs	r2, #1
 800c186:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d005      	beq.n	800c19e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	f043 0202 	orr.w	r2, r3, #2
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	330c      	adds	r3, #12
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f8e5 	bl	800c376 <USBD_CtlSendData>
      break;
 800c1ac:	e004      	b.n	800c1b8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f876 	bl	800c2a2 <USBD_CtlError>
      break;
 800c1b6:	bf00      	nop
  }
}
 800c1b8:	bf00      	nop
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	885b      	ldrh	r3, [r3, #2]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d106      	bne.n	800c1e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f929 	bl	800c432 <USBD_CtlSendStatus>
  }
}
 800c1e0:	bf00      	nop
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d80b      	bhi.n	800c216 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	885b      	ldrh	r3, [r3, #2]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d10c      	bne.n	800c220 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f90f 	bl	800c432 <USBD_CtlSendStatus>
      }
      break;
 800c214:	e004      	b.n	800c220 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c216:	6839      	ldr	r1, [r7, #0]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 f842 	bl	800c2a2 <USBD_CtlError>
      break;
 800c21e:	e000      	b.n	800c222 <USBD_ClrFeature+0x3a>
      break;
 800c220:	bf00      	nop
  }
}
 800c222:	bf00      	nop
 800c224:	3708      	adds	r7, #8
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c22a:	b480      	push	{r7}
 800c22c:	b083      	sub	sp, #12
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	781a      	ldrb	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	785a      	ldrb	r2, [r3, #1]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	3302      	adds	r3, #2
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	3303      	adds	r3, #3
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b29b      	uxth	r3, r3
 800c254:	021b      	lsls	r3, r3, #8
 800c256:	b29b      	uxth	r3, r3
 800c258:	4413      	add	r3, r2
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	3304      	adds	r3, #4
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	b29a      	uxth	r2, r3
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	3305      	adds	r3, #5
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	b29b      	uxth	r3, r3
 800c270:	021b      	lsls	r3, r3, #8
 800c272:	b29b      	uxth	r3, r3
 800c274:	4413      	add	r3, r2
 800c276:	b29a      	uxth	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	3306      	adds	r3, #6
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	b29a      	uxth	r2, r3
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	3307      	adds	r3, #7
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	021b      	lsls	r3, r3, #8
 800c28e:	b29b      	uxth	r3, r3
 800c290:	4413      	add	r3, r2
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	80da      	strh	r2, [r3, #6]

}
 800c298:	bf00      	nop
 800c29a:	370c      	adds	r7, #12
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bc80      	pop	{r7}
 800c2a0:	4770      	bx	lr

0800c2a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b082      	sub	sp, #8
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c2ac:	2180      	movs	r1, #128	; 0x80
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fc7a 	bl	800cba8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fc76 	bl	800cba8 <USBD_LL_StallEP>
}
 800c2bc:	bf00      	nop
 800c2be:	3708      	adds	r7, #8
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}

0800c2c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d032      	beq.n	800c340 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f000 f834 	bl	800c348 <USBD_GetLen>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	005b      	lsls	r3, r3, #1
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	1c5a      	adds	r2, r3, #1
 800c2f2:	75fa      	strb	r2, [r7, #23]
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	7812      	ldrb	r2, [r2, #0]
 800c2fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c300:	7dfb      	ldrb	r3, [r7, #23]
 800c302:	1c5a      	adds	r2, r3, #1
 800c304:	75fa      	strb	r2, [r7, #23]
 800c306:	461a      	mov	r2, r3
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	4413      	add	r3, r2
 800c30c:	2203      	movs	r2, #3
 800c30e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c310:	e012      	b.n	800c338 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	1c5a      	adds	r2, r3, #1
 800c316:	60fa      	str	r2, [r7, #12]
 800c318:	7dfa      	ldrb	r2, [r7, #23]
 800c31a:	1c51      	adds	r1, r2, #1
 800c31c:	75f9      	strb	r1, [r7, #23]
 800c31e:	4611      	mov	r1, r2
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	440a      	add	r2, r1
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c328:	7dfb      	ldrb	r3, [r7, #23]
 800c32a:	1c5a      	adds	r2, r3, #1
 800c32c:	75fa      	strb	r2, [r7, #23]
 800c32e:	461a      	mov	r2, r3
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	4413      	add	r3, r2
 800c334:	2200      	movs	r2, #0
 800c336:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1e8      	bne.n	800c312 <USBD_GetString+0x4e>
    }
  }
}
 800c340:	bf00      	nop
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c350:	2300      	movs	r3, #0
 800c352:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c354:	e005      	b.n	800c362 <USBD_GetLen+0x1a>
  {
    len++;
 800c356:	7bfb      	ldrb	r3, [r7, #15]
 800c358:	3301      	adds	r3, #1
 800c35a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	3301      	adds	r3, #1
 800c360:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1f5      	bne.n	800c356 <USBD_GetLen+0xe>
  }

  return len;
 800c36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	bc80      	pop	{r7}
 800c374:	4770      	bx	lr

0800c376 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b084      	sub	sp, #16
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	60b9      	str	r1, [r7, #8]
 800c380:	4613      	mov	r3, r2
 800c382:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2202      	movs	r2, #2
 800c388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c38c:	88fa      	ldrh	r2, [r7, #6]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c392:	88fa      	ldrh	r2, [r7, #6]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c398:	88fb      	ldrh	r3, [r7, #6]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	2100      	movs	r1, #0
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f000 fc8b 	bl	800ccba <USBD_LL_Transmit>

  return USBD_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b084      	sub	sp, #16
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	60f8      	str	r0, [r7, #12]
 800c3b6:	60b9      	str	r1, [r7, #8]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3bc:	88fb      	ldrh	r3, [r7, #6]
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f000 fc79 	bl	800ccba <USBD_LL_Transmit>

  return USBD_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	60f8      	str	r0, [r7, #12]
 800c3da:	60b9      	str	r1, [r7, #8]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2203      	movs	r2, #3
 800c3e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c3e8:	88fa      	ldrh	r2, [r7, #6]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c3f0:	88fa      	ldrh	r2, [r7, #6]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3f8:	88fb      	ldrh	r3, [r7, #6]
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 fc7e 	bl	800cd00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b084      	sub	sp, #16
 800c412:	af00      	add	r7, sp, #0
 800c414:	60f8      	str	r0, [r7, #12]
 800c416:	60b9      	str	r1, [r7, #8]
 800c418:	4613      	mov	r3, r2
 800c41a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c41c:	88fb      	ldrh	r3, [r7, #6]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	2100      	movs	r1, #0
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f000 fc6c 	bl	800cd00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b082      	sub	sp, #8
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2204      	movs	r2, #4
 800c43e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c442:	2300      	movs	r3, #0
 800c444:	2200      	movs	r2, #0
 800c446:	2100      	movs	r1, #0
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 fc36 	bl	800ccba <USBD_LL_Transmit>

  return USBD_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2205      	movs	r2, #5
 800c464:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c468:	2300      	movs	r3, #0
 800c46a:	2200      	movs	r2, #0
 800c46c:	2100      	movs	r1, #0
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fc46 	bl	800cd00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3708      	adds	r7, #8
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
	...

0800c480 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c484:	2200      	movs	r2, #0
 800c486:	4912      	ldr	r1, [pc, #72]	; (800c4d0 <MX_USB_DEVICE_Init+0x50>)
 800c488:	4812      	ldr	r0, [pc, #72]	; (800c4d4 <MX_USB_DEVICE_Init+0x54>)
 800c48a:	f7fe ff5e 	bl	800b34a <USBD_Init>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c494:	f7f5 fb42 	bl	8001b1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c498:	490f      	ldr	r1, [pc, #60]	; (800c4d8 <MX_USB_DEVICE_Init+0x58>)
 800c49a:	480e      	ldr	r0, [pc, #56]	; (800c4d4 <MX_USB_DEVICE_Init+0x54>)
 800c49c:	f7fe ff80 	bl	800b3a0 <USBD_RegisterClass>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d001      	beq.n	800c4aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c4a6:	f7f5 fb39 	bl	8001b1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4aa:	490c      	ldr	r1, [pc, #48]	; (800c4dc <MX_USB_DEVICE_Init+0x5c>)
 800c4ac:	4809      	ldr	r0, [pc, #36]	; (800c4d4 <MX_USB_DEVICE_Init+0x54>)
 800c4ae:	f7fe feb1 	bl	800b214 <USBD_CDC_RegisterInterface>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d001      	beq.n	800c4bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c4b8:	f7f5 fb30 	bl	8001b1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c4bc:	4805      	ldr	r0, [pc, #20]	; (800c4d4 <MX_USB_DEVICE_Init+0x54>)
 800c4be:	f7fe ff88 	bl	800b3d2 <USBD_Start>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d001      	beq.n	800c4cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c4c8:	f7f5 fb28 	bl	8001b1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c4cc:	bf00      	nop
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	2000013c 	.word	0x2000013c
 800c4d4:	20000b44 	.word	0x20000b44
 800c4d8:	20000020 	.word	0x20000020
 800c4dc:	2000012c 	.word	0x2000012c

0800c4e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	4905      	ldr	r1, [pc, #20]	; (800c4fc <CDC_Init_FS+0x1c>)
 800c4e8:	4805      	ldr	r0, [pc, #20]	; (800c500 <CDC_Init_FS+0x20>)
 800c4ea:	f7fe fea9 	bl	800b240 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c4ee:	4905      	ldr	r1, [pc, #20]	; (800c504 <CDC_Init_FS+0x24>)
 800c4f0:	4803      	ldr	r0, [pc, #12]	; (800c500 <CDC_Init_FS+0x20>)
 800c4f2:	f7fe febe 	bl	800b272 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c4f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	200011f0 	.word	0x200011f0
 800c500:	20000b44 	.word	0x20000b44
 800c504:	20000e08 	.word	0x20000e08

0800c508 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c508:	b480      	push	{r7}
 800c50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c50c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c50e:	4618      	mov	r0, r3
 800c510:	46bd      	mov	sp, r7
 800c512:	bc80      	pop	{r7}
 800c514:	4770      	bx	lr
	...

0800c518 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	6039      	str	r1, [r7, #0]
 800c522:	71fb      	strb	r3, [r7, #7]
 800c524:	4613      	mov	r3, r2
 800c526:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c528:	79fb      	ldrb	r3, [r7, #7]
 800c52a:	2b23      	cmp	r3, #35	; 0x23
 800c52c:	d85c      	bhi.n	800c5e8 <CDC_Control_FS+0xd0>
 800c52e:	a201      	add	r2, pc, #4	; (adr r2, 800c534 <CDC_Control_FS+0x1c>)
 800c530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c534:	0800c5e9 	.word	0x0800c5e9
 800c538:	0800c5e9 	.word	0x0800c5e9
 800c53c:	0800c5e9 	.word	0x0800c5e9
 800c540:	0800c5e9 	.word	0x0800c5e9
 800c544:	0800c5e9 	.word	0x0800c5e9
 800c548:	0800c5e9 	.word	0x0800c5e9
 800c54c:	0800c5e9 	.word	0x0800c5e9
 800c550:	0800c5e9 	.word	0x0800c5e9
 800c554:	0800c5e9 	.word	0x0800c5e9
 800c558:	0800c5e9 	.word	0x0800c5e9
 800c55c:	0800c5e9 	.word	0x0800c5e9
 800c560:	0800c5e9 	.word	0x0800c5e9
 800c564:	0800c5e9 	.word	0x0800c5e9
 800c568:	0800c5e9 	.word	0x0800c5e9
 800c56c:	0800c5e9 	.word	0x0800c5e9
 800c570:	0800c5e9 	.word	0x0800c5e9
 800c574:	0800c5e9 	.word	0x0800c5e9
 800c578:	0800c5e9 	.word	0x0800c5e9
 800c57c:	0800c5e9 	.word	0x0800c5e9
 800c580:	0800c5e9 	.word	0x0800c5e9
 800c584:	0800c5e9 	.word	0x0800c5e9
 800c588:	0800c5e9 	.word	0x0800c5e9
 800c58c:	0800c5e9 	.word	0x0800c5e9
 800c590:	0800c5e9 	.word	0x0800c5e9
 800c594:	0800c5e9 	.word	0x0800c5e9
 800c598:	0800c5e9 	.word	0x0800c5e9
 800c59c:	0800c5e9 	.word	0x0800c5e9
 800c5a0:	0800c5e9 	.word	0x0800c5e9
 800c5a4:	0800c5e9 	.word	0x0800c5e9
 800c5a8:	0800c5e9 	.word	0x0800c5e9
 800c5ac:	0800c5e9 	.word	0x0800c5e9
 800c5b0:	0800c5e9 	.word	0x0800c5e9
 800c5b4:	0800c5c5 	.word	0x0800c5c5
 800c5b8:	0800c5d7 	.word	0x0800c5d7
 800c5bc:	0800c5e9 	.word	0x0800c5e9
 800c5c0:	0800c5e9 	.word	0x0800c5e9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(line_code,pbuf,7);
 800c5c4:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <CDC_Control_FS+0xe0>)
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	6810      	ldr	r0, [r2, #0]
 800c5ca:	6018      	str	r0, [r3, #0]
 800c5cc:	8891      	ldrh	r1, [r2, #4]
 800c5ce:	7992      	ldrb	r2, [r2, #6]
 800c5d0:	8099      	strh	r1, [r3, #4]
 800c5d2:	719a      	strb	r2, [r3, #6]
    break;
 800c5d4:	e009      	b.n	800c5ea <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf,line_code,7);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	4a07      	ldr	r2, [pc, #28]	; (800c5f8 <CDC_Control_FS+0xe0>)
 800c5da:	6810      	ldr	r0, [r2, #0]
 800c5dc:	6018      	str	r0, [r3, #0]
 800c5de:	8891      	ldrh	r1, [r2, #4]
 800c5e0:	7992      	ldrb	r2, [r2, #6]
 800c5e2:	8099      	strh	r1, [r3, #4]
 800c5e4:	719a      	strb	r2, [r3, #6]
    break;
 800c5e6:	e000      	b.n	800c5ea <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c5e8:	bf00      	nop
  }

  return (USBD_OK);
 800c5ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bc80      	pop	{r7}
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	20000124 	.word	0x20000124

0800c5fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 if(*Len > 0)
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d005      	beq.n	800c61a <CDC_Receive_FS+0x1e>
	  {
	    app_usb_cbk(Buf,*Len);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7f4 f815 	bl	8000644 <app_usb_cbk>
	  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c61a:	6879      	ldr	r1, [r7, #4]
 800c61c:	4805      	ldr	r0, [pc, #20]	; (800c634 <CDC_Receive_FS+0x38>)
 800c61e:	f7fe fe28 	bl	800b272 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c622:	4804      	ldr	r0, [pc, #16]	; (800c634 <CDC_Receive_FS+0x38>)
 800c624:	f7fe fe67 	bl	800b2f6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c628:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	20000b44 	.word	0x20000b44

0800c638 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c648:	4b0d      	ldr	r3, [pc, #52]	; (800c680 <CDC_Transmit_FS+0x48>)
 800c64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c64e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c65a:	2301      	movs	r3, #1
 800c65c:	e00b      	b.n	800c676 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c65e:	887b      	ldrh	r3, [r7, #2]
 800c660:	461a      	mov	r2, r3
 800c662:	6879      	ldr	r1, [r7, #4]
 800c664:	4806      	ldr	r0, [pc, #24]	; (800c680 <CDC_Transmit_FS+0x48>)
 800c666:	f7fe fdeb 	bl	800b240 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c66a:	4805      	ldr	r0, [pc, #20]	; (800c680 <CDC_Transmit_FS+0x48>)
 800c66c:	f7fe fe14 	bl	800b298 <USBD_CDC_TransmitPacket>
 800c670:	4603      	mov	r3, r0
 800c672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c674:	7bfb      	ldrb	r3, [r7, #15]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	20000b44 	.word	0x20000b44

0800c684 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	4603      	mov	r3, r0
 800c68c:	6039      	str	r1, [r7, #0]
 800c68e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2212      	movs	r2, #18
 800c694:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c696:	4b03      	ldr	r3, [pc, #12]	; (800c6a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c698:	4618      	mov	r0, r3
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bc80      	pop	{r7}
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	20000158 	.word	0x20000158

0800c6a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	6039      	str	r1, [r7, #0]
 800c6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	2204      	movs	r2, #4
 800c6b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6ba:	4b03      	ldr	r3, [pc, #12]	; (800c6c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bc80      	pop	{r7}
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	2000016c 	.word	0x2000016c

0800c6cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	6039      	str	r1, [r7, #0]
 800c6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d105      	bne.n	800c6ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	4907      	ldr	r1, [pc, #28]	; (800c700 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6e2:	4808      	ldr	r0, [pc, #32]	; (800c704 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6e4:	f7ff fdee 	bl	800c2c4 <USBD_GetString>
 800c6e8:	e004      	b.n	800c6f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	4904      	ldr	r1, [pc, #16]	; (800c700 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6ee:	4805      	ldr	r0, [pc, #20]	; (800c704 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6f0:	f7ff fde8 	bl	800c2c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6f4:	4b02      	ldr	r3, [pc, #8]	; (800c700 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	200015d8 	.word	0x200015d8
 800c704:	0800d874 	.word	0x0800d874

0800c708 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	4603      	mov	r3, r0
 800c710:	6039      	str	r1, [r7, #0]
 800c712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	4904      	ldr	r1, [pc, #16]	; (800c728 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c718:	4804      	ldr	r0, [pc, #16]	; (800c72c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c71a:	f7ff fdd3 	bl	800c2c4 <USBD_GetString>
  return USBD_StrDesc;
 800c71e:	4b02      	ldr	r3, [pc, #8]	; (800c728 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c720:	4618      	mov	r0, r3
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	200015d8 	.word	0x200015d8
 800c72c:	0800d888 	.word	0x0800d888

0800c730 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	6039      	str	r1, [r7, #0]
 800c73a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	221a      	movs	r2, #26
 800c740:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c742:	f000 f843 	bl	800c7cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c746:	4b02      	ldr	r3, [pc, #8]	; (800c750 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	20000170 	.word	0x20000170

0800c754 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	6039      	str	r1, [r7, #0]
 800c75e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c760:	79fb      	ldrb	r3, [r7, #7]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d105      	bne.n	800c772 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	4907      	ldr	r1, [pc, #28]	; (800c788 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c76a:	4808      	ldr	r0, [pc, #32]	; (800c78c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c76c:	f7ff fdaa 	bl	800c2c4 <USBD_GetString>
 800c770:	e004      	b.n	800c77c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	4904      	ldr	r1, [pc, #16]	; (800c788 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c776:	4805      	ldr	r0, [pc, #20]	; (800c78c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c778:	f7ff fda4 	bl	800c2c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c77c:	4b02      	ldr	r3, [pc, #8]	; (800c788 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	200015d8 	.word	0x200015d8
 800c78c:	0800d890 	.word	0x0800d890

0800c790 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	4603      	mov	r3, r0
 800c798:	6039      	str	r1, [r7, #0]
 800c79a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c79c:	79fb      	ldrb	r3, [r7, #7]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d105      	bne.n	800c7ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	4907      	ldr	r1, [pc, #28]	; (800c7c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7a6:	4808      	ldr	r0, [pc, #32]	; (800c7c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7a8:	f7ff fd8c 	bl	800c2c4 <USBD_GetString>
 800c7ac:	e004      	b.n	800c7b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	4904      	ldr	r1, [pc, #16]	; (800c7c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7b2:	4805      	ldr	r0, [pc, #20]	; (800c7c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7b4:	f7ff fd86 	bl	800c2c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7b8:	4b02      	ldr	r3, [pc, #8]	; (800c7c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	200015d8 	.word	0x200015d8
 800c7c8:	0800d89c 	.word	0x0800d89c

0800c7cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7d2:	4b0f      	ldr	r3, [pc, #60]	; (800c810 <Get_SerialNum+0x44>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7d8:	4b0e      	ldr	r3, [pc, #56]	; (800c814 <Get_SerialNum+0x48>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7de:	4b0e      	ldr	r3, [pc, #56]	; (800c818 <Get_SerialNum+0x4c>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4413      	add	r3, r2
 800c7ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d009      	beq.n	800c806 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7f2:	2208      	movs	r2, #8
 800c7f4:	4909      	ldr	r1, [pc, #36]	; (800c81c <Get_SerialNum+0x50>)
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f000 f814 	bl	800c824 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7fc:	2204      	movs	r2, #4
 800c7fe:	4908      	ldr	r1, [pc, #32]	; (800c820 <Get_SerialNum+0x54>)
 800c800:	68b8      	ldr	r0, [r7, #8]
 800c802:	f000 f80f 	bl	800c824 <IntToUnicode>
  }
}
 800c806:	bf00      	nop
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	1ffff7e8 	.word	0x1ffff7e8
 800c814:	1ffff7ec 	.word	0x1ffff7ec
 800c818:	1ffff7f0 	.word	0x1ffff7f0
 800c81c:	20000172 	.word	0x20000172
 800c820:	20000182 	.word	0x20000182

0800c824 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c824:	b480      	push	{r7}
 800c826:	b087      	sub	sp, #28
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	4613      	mov	r3, r2
 800c830:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c836:	2300      	movs	r3, #0
 800c838:	75fb      	strb	r3, [r7, #23]
 800c83a:	e027      	b.n	800c88c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	0f1b      	lsrs	r3, r3, #28
 800c840:	2b09      	cmp	r3, #9
 800c842:	d80b      	bhi.n	800c85c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	0f1b      	lsrs	r3, r3, #28
 800c848:	b2da      	uxtb	r2, r3
 800c84a:	7dfb      	ldrb	r3, [r7, #23]
 800c84c:	005b      	lsls	r3, r3, #1
 800c84e:	4619      	mov	r1, r3
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	440b      	add	r3, r1
 800c854:	3230      	adds	r2, #48	; 0x30
 800c856:	b2d2      	uxtb	r2, r2
 800c858:	701a      	strb	r2, [r3, #0]
 800c85a:	e00a      	b.n	800c872 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	0f1b      	lsrs	r3, r3, #28
 800c860:	b2da      	uxtb	r2, r3
 800c862:	7dfb      	ldrb	r3, [r7, #23]
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	4619      	mov	r1, r3
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	440b      	add	r3, r1
 800c86c:	3237      	adds	r2, #55	; 0x37
 800c86e:	b2d2      	uxtb	r2, r2
 800c870:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	011b      	lsls	r3, r3, #4
 800c876:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c878:	7dfb      	ldrb	r3, [r7, #23]
 800c87a:	005b      	lsls	r3, r3, #1
 800c87c:	3301      	adds	r3, #1
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	4413      	add	r3, r2
 800c882:	2200      	movs	r2, #0
 800c884:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c886:	7dfb      	ldrb	r3, [r7, #23]
 800c888:	3301      	adds	r3, #1
 800c88a:	75fb      	strb	r3, [r7, #23]
 800c88c:	7dfa      	ldrb	r2, [r7, #23]
 800c88e:	79fb      	ldrb	r3, [r7, #7]
 800c890:	429a      	cmp	r2, r3
 800c892:	d3d3      	bcc.n	800c83c <IntToUnicode+0x18>
  }
}
 800c894:	bf00      	nop
 800c896:	bf00      	nop
 800c898:	371c      	adds	r7, #28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bc80      	pop	{r7}
 800c89e:	4770      	bx	lr

0800c8a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a11      	ldr	r2, [pc, #68]	; (800c8f4 <HAL_PCD_MspInit+0x54>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d11b      	bne.n	800c8ea <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c8b2:	4b11      	ldr	r3, [pc, #68]	; (800c8f8 <HAL_PCD_MspInit+0x58>)
 800c8b4:	69db      	ldr	r3, [r3, #28]
 800c8b6:	4a10      	ldr	r2, [pc, #64]	; (800c8f8 <HAL_PCD_MspInit+0x58>)
 800c8b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c8bc:	61d3      	str	r3, [r2, #28]
 800c8be:	4b0e      	ldr	r3, [pc, #56]	; (800c8f8 <HAL_PCD_MspInit+0x58>)
 800c8c0:	69db      	ldr	r3, [r3, #28]
 800c8c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8c6:	60fb      	str	r3, [r7, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	2013      	movs	r0, #19
 800c8d0:	f7f7 fe79 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800c8d4:	2013      	movs	r0, #19
 800c8d6:	f7f7 fe92 	bl	80045fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2100      	movs	r1, #0
 800c8de:	2014      	movs	r0, #20
 800c8e0:	f7f7 fe71 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c8e4:	2014      	movs	r0, #20
 800c8e6:	f7f7 fe8a 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c8ea:	bf00      	nop
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	40005c00 	.word	0x40005c00
 800c8f8:	40021000 	.word	0x40021000

0800c8fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c910:	4619      	mov	r1, r3
 800c912:	4610      	mov	r0, r2
 800c914:	f7fe fda5 	bl	800b462 <USBD_LL_SetupStage>
}
 800c918:	bf00      	nop
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c932:	78fa      	ldrb	r2, [r7, #3]
 800c934:	6879      	ldr	r1, [r7, #4]
 800c936:	4613      	mov	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	4413      	add	r3, r2
 800c93c:	00db      	lsls	r3, r3, #3
 800c93e:	440b      	add	r3, r1
 800c940:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	78fb      	ldrb	r3, [r7, #3]
 800c948:	4619      	mov	r1, r3
 800c94a:	f7fe fdd7 	bl	800b4fc <USBD_LL_DataOutStage>
}
 800c94e:	bf00      	nop
 800c950:	3708      	adds	r7, #8
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b082      	sub	sp, #8
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
 800c95e:	460b      	mov	r3, r1
 800c960:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c968:	78fa      	ldrb	r2, [r7, #3]
 800c96a:	6879      	ldr	r1, [r7, #4]
 800c96c:	4613      	mov	r3, r2
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	4413      	add	r3, r2
 800c972:	00db      	lsls	r3, r3, #3
 800c974:	440b      	add	r3, r1
 800c976:	333c      	adds	r3, #60	; 0x3c
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	78fb      	ldrb	r3, [r7, #3]
 800c97c:	4619      	mov	r1, r3
 800c97e:	f7fe fe2e 	bl	800b5de <USBD_LL_DataInStage>
}
 800c982:	bf00      	nop
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b082      	sub	sp, #8
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fe ff3e 	bl	800b81a <USBD_LL_SOF>
}
 800c99e:	bf00      	nop
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b084      	sub	sp, #16
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d001      	beq.n	800c9be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9ba:	f7f5 f8af 	bl	8001b1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c9c4:	7bfa      	ldrb	r2, [r7, #15]
 800c9c6:	4611      	mov	r1, r2
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe feee 	bl	800b7aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fe fea7 	bl	800b728 <USBD_LL_Reset>
}
 800c9da:	bf00      	nop
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
	...

0800c9e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fe fee8 	bl	800b7c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	699b      	ldr	r3, [r3, #24]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d005      	beq.n	800ca0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca00:	4b04      	ldr	r3, [pc, #16]	; (800ca14 <HAL_PCD_SuspendCallback+0x30>)
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	4a03      	ldr	r2, [pc, #12]	; (800ca14 <HAL_PCD_SuspendCallback+0x30>)
 800ca06:	f043 0306 	orr.w	r3, r3, #6
 800ca0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca0c:	bf00      	nop
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	e000ed00 	.word	0xe000ed00

0800ca18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fe fee2 	bl	800b7f0 <USBD_LL_Resume>
}
 800ca2c:	bf00      	nop
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca3c:	4a28      	ldr	r2, [pc, #160]	; (800cae0 <USBD_LL_Init+0xac>)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a26      	ldr	r2, [pc, #152]	; (800cae0 <USBD_LL_Init+0xac>)
 800ca48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ca4c:	4b24      	ldr	r3, [pc, #144]	; (800cae0 <USBD_LL_Init+0xac>)
 800ca4e:	4a25      	ldr	r2, [pc, #148]	; (800cae4 <USBD_LL_Init+0xb0>)
 800ca50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca52:	4b23      	ldr	r3, [pc, #140]	; (800cae0 <USBD_LL_Init+0xac>)
 800ca54:	2208      	movs	r2, #8
 800ca56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca58:	4b21      	ldr	r3, [pc, #132]	; (800cae0 <USBD_LL_Init+0xac>)
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca5e:	4b20      	ldr	r3, [pc, #128]	; (800cae0 <USBD_LL_Init+0xac>)
 800ca60:	2200      	movs	r2, #0
 800ca62:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca64:	4b1e      	ldr	r3, [pc, #120]	; (800cae0 <USBD_LL_Init+0xac>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca6a:	4b1d      	ldr	r3, [pc, #116]	; (800cae0 <USBD_LL_Init+0xac>)
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca70:	481b      	ldr	r0, [pc, #108]	; (800cae0 <USBD_LL_Init+0xac>)
 800ca72:	f7f7 ffbf 	bl	80049f4 <HAL_PCD_Init>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ca7c:	f7f5 f84e 	bl	8001b1c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca86:	2318      	movs	r3, #24
 800ca88:	2200      	movs	r2, #0
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	f7f9 fc33 	bl	80062f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca96:	2358      	movs	r3, #88	; 0x58
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2180      	movs	r1, #128	; 0x80
 800ca9c:	f7f9 fc2b 	bl	80062f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800caa6:	23c0      	movs	r3, #192	; 0xc0
 800caa8:	2200      	movs	r2, #0
 800caaa:	2181      	movs	r1, #129	; 0x81
 800caac:	f7f9 fc23 	bl	80062f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cab6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800caba:	2200      	movs	r2, #0
 800cabc:	2101      	movs	r1, #1
 800cabe:	f7f9 fc1a 	bl	80062f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cacc:	2200      	movs	r2, #0
 800cace:	2182      	movs	r1, #130	; 0x82
 800cad0:	f7f9 fc11 	bl	80062f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	200017d8 	.word	0x200017d8
 800cae4:	40005c00 	.word	0x40005c00

0800cae8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caf0:	2300      	movs	r3, #0
 800caf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caf4:	2300      	movs	r3, #0
 800caf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7f8 f883 	bl	8004c0a <HAL_PCD_Start>
 800cb04:	4603      	mov	r3, r0
 800cb06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb08:	7bfb      	ldrb	r3, [r7, #15]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 f94e 	bl	800cdac <USBD_Get_USB_Status>
 800cb10:	4603      	mov	r3, r0
 800cb12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb14:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b084      	sub	sp, #16
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	4608      	mov	r0, r1
 800cb28:	4611      	mov	r1, r2
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	70fb      	strb	r3, [r7, #3]
 800cb30:	460b      	mov	r3, r1
 800cb32:	70bb      	strb	r3, [r7, #2]
 800cb34:	4613      	mov	r3, r2
 800cb36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb46:	78bb      	ldrb	r3, [r7, #2]
 800cb48:	883a      	ldrh	r2, [r7, #0]
 800cb4a:	78f9      	ldrb	r1, [r7, #3]
 800cb4c:	f7f8 f9fb 	bl	8004f46 <HAL_PCD_EP_Open>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
 800cb56:	4618      	mov	r0, r3
 800cb58:	f000 f928 	bl	800cdac <USBD_Get_USB_Status>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb60:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	460b      	mov	r3, r1
 800cb74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb84:	78fa      	ldrb	r2, [r7, #3]
 800cb86:	4611      	mov	r1, r2
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7f8 fa42 	bl	8005012 <HAL_PCD_EP_Close>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb92:	7bfb      	ldrb	r3, [r7, #15]
 800cb94:	4618      	mov	r0, r3
 800cb96:	f000 f909 	bl	800cdac <USBD_Get_USB_Status>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbc2:	78fa      	ldrb	r2, [r7, #3]
 800cbc4:	4611      	mov	r1, r2
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7f8 fb02 	bl	80051d0 <HAL_PCD_EP_SetStall>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 f8ea 	bl	800cdac <USBD_Get_USB_Status>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b084      	sub	sp, #16
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	460b      	mov	r3, r1
 800cbf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc00:	78fa      	ldrb	r2, [r7, #3]
 800cc02:	4611      	mov	r1, r2
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7f8 fb43 	bl	8005290 <HAL_PCD_EP_ClrStall>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
 800cc10:	4618      	mov	r0, r3
 800cc12:	f000 f8cb 	bl	800cdac <USBD_Get_USB_Status>
 800cc16:	4603      	mov	r3, r0
 800cc18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	da0c      	bge.n	800cc5a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc40:	78fb      	ldrb	r3, [r7, #3]
 800cc42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc46:	68f9      	ldr	r1, [r7, #12]
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	00db      	lsls	r3, r3, #3
 800cc52:	440b      	add	r3, r1
 800cc54:	3302      	adds	r3, #2
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	e00b      	b.n	800cc72 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc5a:	78fb      	ldrb	r3, [r7, #3]
 800cc5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc60:	68f9      	ldr	r1, [r7, #12]
 800cc62:	4613      	mov	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	00db      	lsls	r3, r3, #3
 800cc6a:	440b      	add	r3, r1
 800cc6c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cc70:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3714      	adds	r7, #20
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bc80      	pop	{r7}
 800cc7a:	4770      	bx	lr

0800cc7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	460b      	mov	r3, r1
 800cc86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc96:	78fa      	ldrb	r2, [r7, #3]
 800cc98:	4611      	mov	r1, r2
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7f8 f92e 	bl	8004efc <HAL_PCD_SetAddress>
 800cca0:	4603      	mov	r3, r0
 800cca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cca4:	7bfb      	ldrb	r3, [r7, #15]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 f880 	bl	800cdac <USBD_Get_USB_Status>
 800ccac:	4603      	mov	r3, r0
 800ccae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b086      	sub	sp, #24
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	60f8      	str	r0, [r7, #12]
 800ccc2:	607a      	str	r2, [r7, #4]
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	72fb      	strb	r3, [r7, #11]
 800ccca:	4613      	mov	r3, r2
 800cccc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ccdc:	893b      	ldrh	r3, [r7, #8]
 800ccde:	7af9      	ldrb	r1, [r7, #11]
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	f7f8 fa32 	bl	800514a <HAL_PCD_EP_Transmit>
 800cce6:	4603      	mov	r3, r0
 800cce8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 f85d 	bl	800cdac <USBD_Get_USB_Status>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ccf6:	7dbb      	ldrb	r3, [r7, #22]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3718      	adds	r7, #24
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	607a      	str	r2, [r7, #4]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	72fb      	strb	r3, [r7, #11]
 800cd10:	4613      	mov	r3, r2
 800cd12:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd22:	893b      	ldrh	r3, [r7, #8]
 800cd24:	7af9      	ldrb	r1, [r7, #11]
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	f7f8 f9bb 	bl	80050a2 <HAL_PCD_EP_Receive>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd30:	7dfb      	ldrb	r3, [r7, #23]
 800cd32:	4618      	mov	r0, r3
 800cd34:	f000 f83a 	bl	800cdac <USBD_Get_USB_Status>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd3c:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	460b      	mov	r3, r1
 800cd50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd58:	78fa      	ldrb	r2, [r7, #3]
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7f8 f9dd 	bl	800511c <HAL_PCD_EP_GetRxCount>
 800cd62:	4603      	mov	r3, r0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cd74:	4b02      	ldr	r3, [pc, #8]	; (800cd80 <USBD_static_malloc+0x14>)
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	370c      	adds	r7, #12
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bc80      	pop	{r7}
 800cd7e:	4770      	bx	lr
 800cd80:	20001ac4 	.word	0x20001ac4

0800cd84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]

}
 800cd8c:	bf00      	nop
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bc80      	pop	{r7}
 800cd94:	4770      	bx	lr

0800cd96 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd96:	b480      	push	{r7}
 800cd98:	b083      	sub	sp, #12
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	460b      	mov	r3, r1
 800cda0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cda2:	bf00      	nop
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bc80      	pop	{r7}
 800cdaa:	4770      	bx	lr

0800cdac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	2b03      	cmp	r3, #3
 800cdbe:	d817      	bhi.n	800cdf0 <USBD_Get_USB_Status+0x44>
 800cdc0:	a201      	add	r2, pc, #4	; (adr r2, 800cdc8 <USBD_Get_USB_Status+0x1c>)
 800cdc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc6:	bf00      	nop
 800cdc8:	0800cdd9 	.word	0x0800cdd9
 800cdcc:	0800cddf 	.word	0x0800cddf
 800cdd0:	0800cde5 	.word	0x0800cde5
 800cdd4:	0800cdeb 	.word	0x0800cdeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	73fb      	strb	r3, [r7, #15]
    break;
 800cddc:	e00b      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdde:	2302      	movs	r3, #2
 800cde0:	73fb      	strb	r3, [r7, #15]
    break;
 800cde2:	e008      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cde4:	2301      	movs	r3, #1
 800cde6:	73fb      	strb	r3, [r7, #15]
    break;
 800cde8:	e005      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdea:	2302      	movs	r3, #2
 800cdec:	73fb      	strb	r3, [r7, #15]
    break;
 800cdee:	e002      	b.n	800cdf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdf4:	bf00      	nop
  }
  return usb_status;
 800cdf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bc80      	pop	{r7}
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop

0800ce04 <__errno>:
 800ce04:	4b01      	ldr	r3, [pc, #4]	; (800ce0c <__errno+0x8>)
 800ce06:	6818      	ldr	r0, [r3, #0]
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	2000018c 	.word	0x2000018c

0800ce10 <__libc_init_array>:
 800ce10:	b570      	push	{r4, r5, r6, lr}
 800ce12:	2600      	movs	r6, #0
 800ce14:	4d0c      	ldr	r5, [pc, #48]	; (800ce48 <__libc_init_array+0x38>)
 800ce16:	4c0d      	ldr	r4, [pc, #52]	; (800ce4c <__libc_init_array+0x3c>)
 800ce18:	1b64      	subs	r4, r4, r5
 800ce1a:	10a4      	asrs	r4, r4, #2
 800ce1c:	42a6      	cmp	r6, r4
 800ce1e:	d109      	bne.n	800ce34 <__libc_init_array+0x24>
 800ce20:	f000 fcd6 	bl	800d7d0 <_init>
 800ce24:	2600      	movs	r6, #0
 800ce26:	4d0a      	ldr	r5, [pc, #40]	; (800ce50 <__libc_init_array+0x40>)
 800ce28:	4c0a      	ldr	r4, [pc, #40]	; (800ce54 <__libc_init_array+0x44>)
 800ce2a:	1b64      	subs	r4, r4, r5
 800ce2c:	10a4      	asrs	r4, r4, #2
 800ce2e:	42a6      	cmp	r6, r4
 800ce30:	d105      	bne.n	800ce3e <__libc_init_array+0x2e>
 800ce32:	bd70      	pop	{r4, r5, r6, pc}
 800ce34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce38:	4798      	blx	r3
 800ce3a:	3601      	adds	r6, #1
 800ce3c:	e7ee      	b.n	800ce1c <__libc_init_array+0xc>
 800ce3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce42:	4798      	blx	r3
 800ce44:	3601      	adds	r6, #1
 800ce46:	e7f2      	b.n	800ce2e <__libc_init_array+0x1e>
 800ce48:	0800e744 	.word	0x0800e744
 800ce4c:	0800e744 	.word	0x0800e744
 800ce50:	0800e744 	.word	0x0800e744
 800ce54:	0800e748 	.word	0x0800e748

0800ce58 <memcpy>:
 800ce58:	440a      	add	r2, r1
 800ce5a:	4291      	cmp	r1, r2
 800ce5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce60:	d100      	bne.n	800ce64 <memcpy+0xc>
 800ce62:	4770      	bx	lr
 800ce64:	b510      	push	{r4, lr}
 800ce66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce6a:	4291      	cmp	r1, r2
 800ce6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce70:	d1f9      	bne.n	800ce66 <memcpy+0xe>
 800ce72:	bd10      	pop	{r4, pc}

0800ce74 <memset>:
 800ce74:	4603      	mov	r3, r0
 800ce76:	4402      	add	r2, r0
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d100      	bne.n	800ce7e <memset+0xa>
 800ce7c:	4770      	bx	lr
 800ce7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ce82:	e7f9      	b.n	800ce78 <memset+0x4>

0800ce84 <sniprintf>:
 800ce84:	b40c      	push	{r2, r3}
 800ce86:	b530      	push	{r4, r5, lr}
 800ce88:	4b17      	ldr	r3, [pc, #92]	; (800cee8 <sniprintf+0x64>)
 800ce8a:	1e0c      	subs	r4, r1, #0
 800ce8c:	681d      	ldr	r5, [r3, #0]
 800ce8e:	b09d      	sub	sp, #116	; 0x74
 800ce90:	da08      	bge.n	800cea4 <sniprintf+0x20>
 800ce92:	238b      	movs	r3, #139	; 0x8b
 800ce94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	b01d      	add	sp, #116	; 0x74
 800ce9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cea0:	b002      	add	sp, #8
 800cea2:	4770      	bx	lr
 800cea4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cea8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ceac:	bf0c      	ite	eq
 800ceae:	4623      	moveq	r3, r4
 800ceb0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	9307      	str	r3, [sp, #28]
 800ceb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cebc:	9002      	str	r0, [sp, #8]
 800cebe:	9006      	str	r0, [sp, #24]
 800cec0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cec4:	4628      	mov	r0, r5
 800cec6:	ab21      	add	r3, sp, #132	; 0x84
 800cec8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ceca:	a902      	add	r1, sp, #8
 800cecc:	9301      	str	r3, [sp, #4]
 800cece:	f000 f88f 	bl	800cff0 <_svfiprintf_r>
 800ced2:	1c43      	adds	r3, r0, #1
 800ced4:	bfbc      	itt	lt
 800ced6:	238b      	movlt	r3, #139	; 0x8b
 800ced8:	602b      	strlt	r3, [r5, #0]
 800ceda:	2c00      	cmp	r4, #0
 800cedc:	d0dd      	beq.n	800ce9a <sniprintf+0x16>
 800cede:	2200      	movs	r2, #0
 800cee0:	9b02      	ldr	r3, [sp, #8]
 800cee2:	701a      	strb	r2, [r3, #0]
 800cee4:	e7d9      	b.n	800ce9a <sniprintf+0x16>
 800cee6:	bf00      	nop
 800cee8:	2000018c 	.word	0x2000018c

0800ceec <strncmp>:
 800ceec:	4603      	mov	r3, r0
 800ceee:	b510      	push	{r4, lr}
 800cef0:	b172      	cbz	r2, 800cf10 <strncmp+0x24>
 800cef2:	3901      	subs	r1, #1
 800cef4:	1884      	adds	r4, r0, r2
 800cef6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cefa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cefe:	4290      	cmp	r0, r2
 800cf00:	d101      	bne.n	800cf06 <strncmp+0x1a>
 800cf02:	42a3      	cmp	r3, r4
 800cf04:	d101      	bne.n	800cf0a <strncmp+0x1e>
 800cf06:	1a80      	subs	r0, r0, r2
 800cf08:	bd10      	pop	{r4, pc}
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d1f3      	bne.n	800cef6 <strncmp+0xa>
 800cf0e:	e7fa      	b.n	800cf06 <strncmp+0x1a>
 800cf10:	4610      	mov	r0, r2
 800cf12:	e7f9      	b.n	800cf08 <strncmp+0x1c>

0800cf14 <strncpy>:
 800cf14:	4603      	mov	r3, r0
 800cf16:	b510      	push	{r4, lr}
 800cf18:	3901      	subs	r1, #1
 800cf1a:	b132      	cbz	r2, 800cf2a <strncpy+0x16>
 800cf1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cf20:	3a01      	subs	r2, #1
 800cf22:	f803 4b01 	strb.w	r4, [r3], #1
 800cf26:	2c00      	cmp	r4, #0
 800cf28:	d1f7      	bne.n	800cf1a <strncpy+0x6>
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	441a      	add	r2, r3
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d100      	bne.n	800cf34 <strncpy+0x20>
 800cf32:	bd10      	pop	{r4, pc}
 800cf34:	f803 1b01 	strb.w	r1, [r3], #1
 800cf38:	e7f9      	b.n	800cf2e <strncpy+0x1a>

0800cf3a <__ssputs_r>:
 800cf3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf3e:	688e      	ldr	r6, [r1, #8]
 800cf40:	4682      	mov	sl, r0
 800cf42:	429e      	cmp	r6, r3
 800cf44:	460c      	mov	r4, r1
 800cf46:	4690      	mov	r8, r2
 800cf48:	461f      	mov	r7, r3
 800cf4a:	d838      	bhi.n	800cfbe <__ssputs_r+0x84>
 800cf4c:	898a      	ldrh	r2, [r1, #12]
 800cf4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf52:	d032      	beq.n	800cfba <__ssputs_r+0x80>
 800cf54:	6825      	ldr	r5, [r4, #0]
 800cf56:	6909      	ldr	r1, [r1, #16]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	eba5 0901 	sub.w	r9, r5, r1
 800cf5e:	6965      	ldr	r5, [r4, #20]
 800cf60:	444b      	add	r3, r9
 800cf62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf6a:	106d      	asrs	r5, r5, #1
 800cf6c:	429d      	cmp	r5, r3
 800cf6e:	bf38      	it	cc
 800cf70:	461d      	movcc	r5, r3
 800cf72:	0553      	lsls	r3, r2, #21
 800cf74:	d531      	bpl.n	800cfda <__ssputs_r+0xa0>
 800cf76:	4629      	mov	r1, r5
 800cf78:	f000 fb60 	bl	800d63c <_malloc_r>
 800cf7c:	4606      	mov	r6, r0
 800cf7e:	b950      	cbnz	r0, 800cf96 <__ssputs_r+0x5c>
 800cf80:	230c      	movs	r3, #12
 800cf82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf86:	f8ca 3000 	str.w	r3, [sl]
 800cf8a:	89a3      	ldrh	r3, [r4, #12]
 800cf8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf90:	81a3      	strh	r3, [r4, #12]
 800cf92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf96:	464a      	mov	r2, r9
 800cf98:	6921      	ldr	r1, [r4, #16]
 800cf9a:	f7ff ff5d 	bl	800ce58 <memcpy>
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa8:	81a3      	strh	r3, [r4, #12]
 800cfaa:	6126      	str	r6, [r4, #16]
 800cfac:	444e      	add	r6, r9
 800cfae:	6026      	str	r6, [r4, #0]
 800cfb0:	463e      	mov	r6, r7
 800cfb2:	6165      	str	r5, [r4, #20]
 800cfb4:	eba5 0509 	sub.w	r5, r5, r9
 800cfb8:	60a5      	str	r5, [r4, #8]
 800cfba:	42be      	cmp	r6, r7
 800cfbc:	d900      	bls.n	800cfc0 <__ssputs_r+0x86>
 800cfbe:	463e      	mov	r6, r7
 800cfc0:	4632      	mov	r2, r6
 800cfc2:	4641      	mov	r1, r8
 800cfc4:	6820      	ldr	r0, [r4, #0]
 800cfc6:	f000 fab7 	bl	800d538 <memmove>
 800cfca:	68a3      	ldr	r3, [r4, #8]
 800cfcc:	2000      	movs	r0, #0
 800cfce:	1b9b      	subs	r3, r3, r6
 800cfd0:	60a3      	str	r3, [r4, #8]
 800cfd2:	6823      	ldr	r3, [r4, #0]
 800cfd4:	4433      	add	r3, r6
 800cfd6:	6023      	str	r3, [r4, #0]
 800cfd8:	e7db      	b.n	800cf92 <__ssputs_r+0x58>
 800cfda:	462a      	mov	r2, r5
 800cfdc:	f000 fba2 	bl	800d724 <_realloc_r>
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	2800      	cmp	r0, #0
 800cfe4:	d1e1      	bne.n	800cfaa <__ssputs_r+0x70>
 800cfe6:	4650      	mov	r0, sl
 800cfe8:	6921      	ldr	r1, [r4, #16]
 800cfea:	f000 fabf 	bl	800d56c <_free_r>
 800cfee:	e7c7      	b.n	800cf80 <__ssputs_r+0x46>

0800cff0 <_svfiprintf_r>:
 800cff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff4:	4698      	mov	r8, r3
 800cff6:	898b      	ldrh	r3, [r1, #12]
 800cff8:	4607      	mov	r7, r0
 800cffa:	061b      	lsls	r3, r3, #24
 800cffc:	460d      	mov	r5, r1
 800cffe:	4614      	mov	r4, r2
 800d000:	b09d      	sub	sp, #116	; 0x74
 800d002:	d50e      	bpl.n	800d022 <_svfiprintf_r+0x32>
 800d004:	690b      	ldr	r3, [r1, #16]
 800d006:	b963      	cbnz	r3, 800d022 <_svfiprintf_r+0x32>
 800d008:	2140      	movs	r1, #64	; 0x40
 800d00a:	f000 fb17 	bl	800d63c <_malloc_r>
 800d00e:	6028      	str	r0, [r5, #0]
 800d010:	6128      	str	r0, [r5, #16]
 800d012:	b920      	cbnz	r0, 800d01e <_svfiprintf_r+0x2e>
 800d014:	230c      	movs	r3, #12
 800d016:	603b      	str	r3, [r7, #0]
 800d018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d01c:	e0d1      	b.n	800d1c2 <_svfiprintf_r+0x1d2>
 800d01e:	2340      	movs	r3, #64	; 0x40
 800d020:	616b      	str	r3, [r5, #20]
 800d022:	2300      	movs	r3, #0
 800d024:	9309      	str	r3, [sp, #36]	; 0x24
 800d026:	2320      	movs	r3, #32
 800d028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d02c:	2330      	movs	r3, #48	; 0x30
 800d02e:	f04f 0901 	mov.w	r9, #1
 800d032:	f8cd 800c 	str.w	r8, [sp, #12]
 800d036:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d1dc <_svfiprintf_r+0x1ec>
 800d03a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d03e:	4623      	mov	r3, r4
 800d040:	469a      	mov	sl, r3
 800d042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d046:	b10a      	cbz	r2, 800d04c <_svfiprintf_r+0x5c>
 800d048:	2a25      	cmp	r2, #37	; 0x25
 800d04a:	d1f9      	bne.n	800d040 <_svfiprintf_r+0x50>
 800d04c:	ebba 0b04 	subs.w	fp, sl, r4
 800d050:	d00b      	beq.n	800d06a <_svfiprintf_r+0x7a>
 800d052:	465b      	mov	r3, fp
 800d054:	4622      	mov	r2, r4
 800d056:	4629      	mov	r1, r5
 800d058:	4638      	mov	r0, r7
 800d05a:	f7ff ff6e 	bl	800cf3a <__ssputs_r>
 800d05e:	3001      	adds	r0, #1
 800d060:	f000 80aa 	beq.w	800d1b8 <_svfiprintf_r+0x1c8>
 800d064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d066:	445a      	add	r2, fp
 800d068:	9209      	str	r2, [sp, #36]	; 0x24
 800d06a:	f89a 3000 	ldrb.w	r3, [sl]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f000 80a2 	beq.w	800d1b8 <_svfiprintf_r+0x1c8>
 800d074:	2300      	movs	r3, #0
 800d076:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d07a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d07e:	f10a 0a01 	add.w	sl, sl, #1
 800d082:	9304      	str	r3, [sp, #16]
 800d084:	9307      	str	r3, [sp, #28]
 800d086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d08a:	931a      	str	r3, [sp, #104]	; 0x68
 800d08c:	4654      	mov	r4, sl
 800d08e:	2205      	movs	r2, #5
 800d090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d094:	4851      	ldr	r0, [pc, #324]	; (800d1dc <_svfiprintf_r+0x1ec>)
 800d096:	f000 fa41 	bl	800d51c <memchr>
 800d09a:	9a04      	ldr	r2, [sp, #16]
 800d09c:	b9d8      	cbnz	r0, 800d0d6 <_svfiprintf_r+0xe6>
 800d09e:	06d0      	lsls	r0, r2, #27
 800d0a0:	bf44      	itt	mi
 800d0a2:	2320      	movmi	r3, #32
 800d0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0a8:	0711      	lsls	r1, r2, #28
 800d0aa:	bf44      	itt	mi
 800d0ac:	232b      	movmi	r3, #43	; 0x2b
 800d0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d0b8:	d015      	beq.n	800d0e6 <_svfiprintf_r+0xf6>
 800d0ba:	4654      	mov	r4, sl
 800d0bc:	2000      	movs	r0, #0
 800d0be:	f04f 0c0a 	mov.w	ip, #10
 800d0c2:	9a07      	ldr	r2, [sp, #28]
 800d0c4:	4621      	mov	r1, r4
 800d0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0ca:	3b30      	subs	r3, #48	; 0x30
 800d0cc:	2b09      	cmp	r3, #9
 800d0ce:	d94e      	bls.n	800d16e <_svfiprintf_r+0x17e>
 800d0d0:	b1b0      	cbz	r0, 800d100 <_svfiprintf_r+0x110>
 800d0d2:	9207      	str	r2, [sp, #28]
 800d0d4:	e014      	b.n	800d100 <_svfiprintf_r+0x110>
 800d0d6:	eba0 0308 	sub.w	r3, r0, r8
 800d0da:	fa09 f303 	lsl.w	r3, r9, r3
 800d0de:	4313      	orrs	r3, r2
 800d0e0:	46a2      	mov	sl, r4
 800d0e2:	9304      	str	r3, [sp, #16]
 800d0e4:	e7d2      	b.n	800d08c <_svfiprintf_r+0x9c>
 800d0e6:	9b03      	ldr	r3, [sp, #12]
 800d0e8:	1d19      	adds	r1, r3, #4
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	9103      	str	r1, [sp, #12]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	bfbb      	ittet	lt
 800d0f2:	425b      	neglt	r3, r3
 800d0f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d0f8:	9307      	strge	r3, [sp, #28]
 800d0fa:	9307      	strlt	r3, [sp, #28]
 800d0fc:	bfb8      	it	lt
 800d0fe:	9204      	strlt	r2, [sp, #16]
 800d100:	7823      	ldrb	r3, [r4, #0]
 800d102:	2b2e      	cmp	r3, #46	; 0x2e
 800d104:	d10c      	bne.n	800d120 <_svfiprintf_r+0x130>
 800d106:	7863      	ldrb	r3, [r4, #1]
 800d108:	2b2a      	cmp	r3, #42	; 0x2a
 800d10a:	d135      	bne.n	800d178 <_svfiprintf_r+0x188>
 800d10c:	9b03      	ldr	r3, [sp, #12]
 800d10e:	3402      	adds	r4, #2
 800d110:	1d1a      	adds	r2, r3, #4
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	9203      	str	r2, [sp, #12]
 800d116:	2b00      	cmp	r3, #0
 800d118:	bfb8      	it	lt
 800d11a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d11e:	9305      	str	r3, [sp, #20]
 800d120:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d1e0 <_svfiprintf_r+0x1f0>
 800d124:	2203      	movs	r2, #3
 800d126:	4650      	mov	r0, sl
 800d128:	7821      	ldrb	r1, [r4, #0]
 800d12a:	f000 f9f7 	bl	800d51c <memchr>
 800d12e:	b140      	cbz	r0, 800d142 <_svfiprintf_r+0x152>
 800d130:	2340      	movs	r3, #64	; 0x40
 800d132:	eba0 000a 	sub.w	r0, r0, sl
 800d136:	fa03 f000 	lsl.w	r0, r3, r0
 800d13a:	9b04      	ldr	r3, [sp, #16]
 800d13c:	3401      	adds	r4, #1
 800d13e:	4303      	orrs	r3, r0
 800d140:	9304      	str	r3, [sp, #16]
 800d142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d146:	2206      	movs	r2, #6
 800d148:	4826      	ldr	r0, [pc, #152]	; (800d1e4 <_svfiprintf_r+0x1f4>)
 800d14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d14e:	f000 f9e5 	bl	800d51c <memchr>
 800d152:	2800      	cmp	r0, #0
 800d154:	d038      	beq.n	800d1c8 <_svfiprintf_r+0x1d8>
 800d156:	4b24      	ldr	r3, [pc, #144]	; (800d1e8 <_svfiprintf_r+0x1f8>)
 800d158:	bb1b      	cbnz	r3, 800d1a2 <_svfiprintf_r+0x1b2>
 800d15a:	9b03      	ldr	r3, [sp, #12]
 800d15c:	3307      	adds	r3, #7
 800d15e:	f023 0307 	bic.w	r3, r3, #7
 800d162:	3308      	adds	r3, #8
 800d164:	9303      	str	r3, [sp, #12]
 800d166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d168:	4433      	add	r3, r6
 800d16a:	9309      	str	r3, [sp, #36]	; 0x24
 800d16c:	e767      	b.n	800d03e <_svfiprintf_r+0x4e>
 800d16e:	460c      	mov	r4, r1
 800d170:	2001      	movs	r0, #1
 800d172:	fb0c 3202 	mla	r2, ip, r2, r3
 800d176:	e7a5      	b.n	800d0c4 <_svfiprintf_r+0xd4>
 800d178:	2300      	movs	r3, #0
 800d17a:	f04f 0c0a 	mov.w	ip, #10
 800d17e:	4619      	mov	r1, r3
 800d180:	3401      	adds	r4, #1
 800d182:	9305      	str	r3, [sp, #20]
 800d184:	4620      	mov	r0, r4
 800d186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d18a:	3a30      	subs	r2, #48	; 0x30
 800d18c:	2a09      	cmp	r2, #9
 800d18e:	d903      	bls.n	800d198 <_svfiprintf_r+0x1a8>
 800d190:	2b00      	cmp	r3, #0
 800d192:	d0c5      	beq.n	800d120 <_svfiprintf_r+0x130>
 800d194:	9105      	str	r1, [sp, #20]
 800d196:	e7c3      	b.n	800d120 <_svfiprintf_r+0x130>
 800d198:	4604      	mov	r4, r0
 800d19a:	2301      	movs	r3, #1
 800d19c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1a0:	e7f0      	b.n	800d184 <_svfiprintf_r+0x194>
 800d1a2:	ab03      	add	r3, sp, #12
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	462a      	mov	r2, r5
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	4b10      	ldr	r3, [pc, #64]	; (800d1ec <_svfiprintf_r+0x1fc>)
 800d1ac:	a904      	add	r1, sp, #16
 800d1ae:	f3af 8000 	nop.w
 800d1b2:	1c42      	adds	r2, r0, #1
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	d1d6      	bne.n	800d166 <_svfiprintf_r+0x176>
 800d1b8:	89ab      	ldrh	r3, [r5, #12]
 800d1ba:	065b      	lsls	r3, r3, #25
 800d1bc:	f53f af2c 	bmi.w	800d018 <_svfiprintf_r+0x28>
 800d1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1c2:	b01d      	add	sp, #116	; 0x74
 800d1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c8:	ab03      	add	r3, sp, #12
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	462a      	mov	r2, r5
 800d1ce:	4638      	mov	r0, r7
 800d1d0:	4b06      	ldr	r3, [pc, #24]	; (800d1ec <_svfiprintf_r+0x1fc>)
 800d1d2:	a904      	add	r1, sp, #16
 800d1d4:	f000 f87c 	bl	800d2d0 <_printf_i>
 800d1d8:	e7eb      	b.n	800d1b2 <_svfiprintf_r+0x1c2>
 800d1da:	bf00      	nop
 800d1dc:	0800e70f 	.word	0x0800e70f
 800d1e0:	0800e715 	.word	0x0800e715
 800d1e4:	0800e719 	.word	0x0800e719
 800d1e8:	00000000 	.word	0x00000000
 800d1ec:	0800cf3b 	.word	0x0800cf3b

0800d1f0 <_printf_common>:
 800d1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1f4:	4616      	mov	r6, r2
 800d1f6:	4699      	mov	r9, r3
 800d1f8:	688a      	ldr	r2, [r1, #8]
 800d1fa:	690b      	ldr	r3, [r1, #16]
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	4293      	cmp	r3, r2
 800d200:	bfb8      	it	lt
 800d202:	4613      	movlt	r3, r2
 800d204:	6033      	str	r3, [r6, #0]
 800d206:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d20a:	460c      	mov	r4, r1
 800d20c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d210:	b10a      	cbz	r2, 800d216 <_printf_common+0x26>
 800d212:	3301      	adds	r3, #1
 800d214:	6033      	str	r3, [r6, #0]
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	0699      	lsls	r1, r3, #26
 800d21a:	bf42      	ittt	mi
 800d21c:	6833      	ldrmi	r3, [r6, #0]
 800d21e:	3302      	addmi	r3, #2
 800d220:	6033      	strmi	r3, [r6, #0]
 800d222:	6825      	ldr	r5, [r4, #0]
 800d224:	f015 0506 	ands.w	r5, r5, #6
 800d228:	d106      	bne.n	800d238 <_printf_common+0x48>
 800d22a:	f104 0a19 	add.w	sl, r4, #25
 800d22e:	68e3      	ldr	r3, [r4, #12]
 800d230:	6832      	ldr	r2, [r6, #0]
 800d232:	1a9b      	subs	r3, r3, r2
 800d234:	42ab      	cmp	r3, r5
 800d236:	dc28      	bgt.n	800d28a <_printf_common+0x9a>
 800d238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d23c:	1e13      	subs	r3, r2, #0
 800d23e:	6822      	ldr	r2, [r4, #0]
 800d240:	bf18      	it	ne
 800d242:	2301      	movne	r3, #1
 800d244:	0692      	lsls	r2, r2, #26
 800d246:	d42d      	bmi.n	800d2a4 <_printf_common+0xb4>
 800d248:	4649      	mov	r1, r9
 800d24a:	4638      	mov	r0, r7
 800d24c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d250:	47c0      	blx	r8
 800d252:	3001      	adds	r0, #1
 800d254:	d020      	beq.n	800d298 <_printf_common+0xa8>
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	68e5      	ldr	r5, [r4, #12]
 800d25a:	f003 0306 	and.w	r3, r3, #6
 800d25e:	2b04      	cmp	r3, #4
 800d260:	bf18      	it	ne
 800d262:	2500      	movne	r5, #0
 800d264:	6832      	ldr	r2, [r6, #0]
 800d266:	f04f 0600 	mov.w	r6, #0
 800d26a:	68a3      	ldr	r3, [r4, #8]
 800d26c:	bf08      	it	eq
 800d26e:	1aad      	subeq	r5, r5, r2
 800d270:	6922      	ldr	r2, [r4, #16]
 800d272:	bf08      	it	eq
 800d274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d278:	4293      	cmp	r3, r2
 800d27a:	bfc4      	itt	gt
 800d27c:	1a9b      	subgt	r3, r3, r2
 800d27e:	18ed      	addgt	r5, r5, r3
 800d280:	341a      	adds	r4, #26
 800d282:	42b5      	cmp	r5, r6
 800d284:	d11a      	bne.n	800d2bc <_printf_common+0xcc>
 800d286:	2000      	movs	r0, #0
 800d288:	e008      	b.n	800d29c <_printf_common+0xac>
 800d28a:	2301      	movs	r3, #1
 800d28c:	4652      	mov	r2, sl
 800d28e:	4649      	mov	r1, r9
 800d290:	4638      	mov	r0, r7
 800d292:	47c0      	blx	r8
 800d294:	3001      	adds	r0, #1
 800d296:	d103      	bne.n	800d2a0 <_printf_common+0xb0>
 800d298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a0:	3501      	adds	r5, #1
 800d2a2:	e7c4      	b.n	800d22e <_printf_common+0x3e>
 800d2a4:	2030      	movs	r0, #48	; 0x30
 800d2a6:	18e1      	adds	r1, r4, r3
 800d2a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2b2:	4422      	add	r2, r4
 800d2b4:	3302      	adds	r3, #2
 800d2b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2ba:	e7c5      	b.n	800d248 <_printf_common+0x58>
 800d2bc:	2301      	movs	r3, #1
 800d2be:	4622      	mov	r2, r4
 800d2c0:	4649      	mov	r1, r9
 800d2c2:	4638      	mov	r0, r7
 800d2c4:	47c0      	blx	r8
 800d2c6:	3001      	adds	r0, #1
 800d2c8:	d0e6      	beq.n	800d298 <_printf_common+0xa8>
 800d2ca:	3601      	adds	r6, #1
 800d2cc:	e7d9      	b.n	800d282 <_printf_common+0x92>
	...

0800d2d0 <_printf_i>:
 800d2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2d4:	7e0f      	ldrb	r7, [r1, #24]
 800d2d6:	4691      	mov	r9, r2
 800d2d8:	2f78      	cmp	r7, #120	; 0x78
 800d2da:	4680      	mov	r8, r0
 800d2dc:	460c      	mov	r4, r1
 800d2de:	469a      	mov	sl, r3
 800d2e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2e6:	d807      	bhi.n	800d2f8 <_printf_i+0x28>
 800d2e8:	2f62      	cmp	r7, #98	; 0x62
 800d2ea:	d80a      	bhi.n	800d302 <_printf_i+0x32>
 800d2ec:	2f00      	cmp	r7, #0
 800d2ee:	f000 80d9 	beq.w	800d4a4 <_printf_i+0x1d4>
 800d2f2:	2f58      	cmp	r7, #88	; 0x58
 800d2f4:	f000 80a4 	beq.w	800d440 <_printf_i+0x170>
 800d2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d300:	e03a      	b.n	800d378 <_printf_i+0xa8>
 800d302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d306:	2b15      	cmp	r3, #21
 800d308:	d8f6      	bhi.n	800d2f8 <_printf_i+0x28>
 800d30a:	a101      	add	r1, pc, #4	; (adr r1, 800d310 <_printf_i+0x40>)
 800d30c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d310:	0800d369 	.word	0x0800d369
 800d314:	0800d37d 	.word	0x0800d37d
 800d318:	0800d2f9 	.word	0x0800d2f9
 800d31c:	0800d2f9 	.word	0x0800d2f9
 800d320:	0800d2f9 	.word	0x0800d2f9
 800d324:	0800d2f9 	.word	0x0800d2f9
 800d328:	0800d37d 	.word	0x0800d37d
 800d32c:	0800d2f9 	.word	0x0800d2f9
 800d330:	0800d2f9 	.word	0x0800d2f9
 800d334:	0800d2f9 	.word	0x0800d2f9
 800d338:	0800d2f9 	.word	0x0800d2f9
 800d33c:	0800d48b 	.word	0x0800d48b
 800d340:	0800d3ad 	.word	0x0800d3ad
 800d344:	0800d46d 	.word	0x0800d46d
 800d348:	0800d2f9 	.word	0x0800d2f9
 800d34c:	0800d2f9 	.word	0x0800d2f9
 800d350:	0800d4ad 	.word	0x0800d4ad
 800d354:	0800d2f9 	.word	0x0800d2f9
 800d358:	0800d3ad 	.word	0x0800d3ad
 800d35c:	0800d2f9 	.word	0x0800d2f9
 800d360:	0800d2f9 	.word	0x0800d2f9
 800d364:	0800d475 	.word	0x0800d475
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	1d1a      	adds	r2, r3, #4
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	602a      	str	r2, [r5, #0]
 800d370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d378:	2301      	movs	r3, #1
 800d37a:	e0a4      	b.n	800d4c6 <_printf_i+0x1f6>
 800d37c:	6820      	ldr	r0, [r4, #0]
 800d37e:	6829      	ldr	r1, [r5, #0]
 800d380:	0606      	lsls	r6, r0, #24
 800d382:	f101 0304 	add.w	r3, r1, #4
 800d386:	d50a      	bpl.n	800d39e <_printf_i+0xce>
 800d388:	680e      	ldr	r6, [r1, #0]
 800d38a:	602b      	str	r3, [r5, #0]
 800d38c:	2e00      	cmp	r6, #0
 800d38e:	da03      	bge.n	800d398 <_printf_i+0xc8>
 800d390:	232d      	movs	r3, #45	; 0x2d
 800d392:	4276      	negs	r6, r6
 800d394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d398:	230a      	movs	r3, #10
 800d39a:	485e      	ldr	r0, [pc, #376]	; (800d514 <_printf_i+0x244>)
 800d39c:	e019      	b.n	800d3d2 <_printf_i+0x102>
 800d39e:	680e      	ldr	r6, [r1, #0]
 800d3a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3a4:	602b      	str	r3, [r5, #0]
 800d3a6:	bf18      	it	ne
 800d3a8:	b236      	sxthne	r6, r6
 800d3aa:	e7ef      	b.n	800d38c <_printf_i+0xbc>
 800d3ac:	682b      	ldr	r3, [r5, #0]
 800d3ae:	6820      	ldr	r0, [r4, #0]
 800d3b0:	1d19      	adds	r1, r3, #4
 800d3b2:	6029      	str	r1, [r5, #0]
 800d3b4:	0601      	lsls	r1, r0, #24
 800d3b6:	d501      	bpl.n	800d3bc <_printf_i+0xec>
 800d3b8:	681e      	ldr	r6, [r3, #0]
 800d3ba:	e002      	b.n	800d3c2 <_printf_i+0xf2>
 800d3bc:	0646      	lsls	r6, r0, #25
 800d3be:	d5fb      	bpl.n	800d3b8 <_printf_i+0xe8>
 800d3c0:	881e      	ldrh	r6, [r3, #0]
 800d3c2:	2f6f      	cmp	r7, #111	; 0x6f
 800d3c4:	bf0c      	ite	eq
 800d3c6:	2308      	moveq	r3, #8
 800d3c8:	230a      	movne	r3, #10
 800d3ca:	4852      	ldr	r0, [pc, #328]	; (800d514 <_printf_i+0x244>)
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3d2:	6865      	ldr	r5, [r4, #4]
 800d3d4:	2d00      	cmp	r5, #0
 800d3d6:	bfa8      	it	ge
 800d3d8:	6821      	ldrge	r1, [r4, #0]
 800d3da:	60a5      	str	r5, [r4, #8]
 800d3dc:	bfa4      	itt	ge
 800d3de:	f021 0104 	bicge.w	r1, r1, #4
 800d3e2:	6021      	strge	r1, [r4, #0]
 800d3e4:	b90e      	cbnz	r6, 800d3ea <_printf_i+0x11a>
 800d3e6:	2d00      	cmp	r5, #0
 800d3e8:	d04d      	beq.n	800d486 <_printf_i+0x1b6>
 800d3ea:	4615      	mov	r5, r2
 800d3ec:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3f0:	fb03 6711 	mls	r7, r3, r1, r6
 800d3f4:	5dc7      	ldrb	r7, [r0, r7]
 800d3f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3fa:	4637      	mov	r7, r6
 800d3fc:	42bb      	cmp	r3, r7
 800d3fe:	460e      	mov	r6, r1
 800d400:	d9f4      	bls.n	800d3ec <_printf_i+0x11c>
 800d402:	2b08      	cmp	r3, #8
 800d404:	d10b      	bne.n	800d41e <_printf_i+0x14e>
 800d406:	6823      	ldr	r3, [r4, #0]
 800d408:	07de      	lsls	r6, r3, #31
 800d40a:	d508      	bpl.n	800d41e <_printf_i+0x14e>
 800d40c:	6923      	ldr	r3, [r4, #16]
 800d40e:	6861      	ldr	r1, [r4, #4]
 800d410:	4299      	cmp	r1, r3
 800d412:	bfde      	ittt	le
 800d414:	2330      	movle	r3, #48	; 0x30
 800d416:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d41a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d41e:	1b52      	subs	r2, r2, r5
 800d420:	6122      	str	r2, [r4, #16]
 800d422:	464b      	mov	r3, r9
 800d424:	4621      	mov	r1, r4
 800d426:	4640      	mov	r0, r8
 800d428:	f8cd a000 	str.w	sl, [sp]
 800d42c:	aa03      	add	r2, sp, #12
 800d42e:	f7ff fedf 	bl	800d1f0 <_printf_common>
 800d432:	3001      	adds	r0, #1
 800d434:	d14c      	bne.n	800d4d0 <_printf_i+0x200>
 800d436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d43a:	b004      	add	sp, #16
 800d43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d440:	4834      	ldr	r0, [pc, #208]	; (800d514 <_printf_i+0x244>)
 800d442:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d446:	6829      	ldr	r1, [r5, #0]
 800d448:	6823      	ldr	r3, [r4, #0]
 800d44a:	f851 6b04 	ldr.w	r6, [r1], #4
 800d44e:	6029      	str	r1, [r5, #0]
 800d450:	061d      	lsls	r5, r3, #24
 800d452:	d514      	bpl.n	800d47e <_printf_i+0x1ae>
 800d454:	07df      	lsls	r7, r3, #31
 800d456:	bf44      	itt	mi
 800d458:	f043 0320 	orrmi.w	r3, r3, #32
 800d45c:	6023      	strmi	r3, [r4, #0]
 800d45e:	b91e      	cbnz	r6, 800d468 <_printf_i+0x198>
 800d460:	6823      	ldr	r3, [r4, #0]
 800d462:	f023 0320 	bic.w	r3, r3, #32
 800d466:	6023      	str	r3, [r4, #0]
 800d468:	2310      	movs	r3, #16
 800d46a:	e7af      	b.n	800d3cc <_printf_i+0xfc>
 800d46c:	6823      	ldr	r3, [r4, #0]
 800d46e:	f043 0320 	orr.w	r3, r3, #32
 800d472:	6023      	str	r3, [r4, #0]
 800d474:	2378      	movs	r3, #120	; 0x78
 800d476:	4828      	ldr	r0, [pc, #160]	; (800d518 <_printf_i+0x248>)
 800d478:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d47c:	e7e3      	b.n	800d446 <_printf_i+0x176>
 800d47e:	0659      	lsls	r1, r3, #25
 800d480:	bf48      	it	mi
 800d482:	b2b6      	uxthmi	r6, r6
 800d484:	e7e6      	b.n	800d454 <_printf_i+0x184>
 800d486:	4615      	mov	r5, r2
 800d488:	e7bb      	b.n	800d402 <_printf_i+0x132>
 800d48a:	682b      	ldr	r3, [r5, #0]
 800d48c:	6826      	ldr	r6, [r4, #0]
 800d48e:	1d18      	adds	r0, r3, #4
 800d490:	6961      	ldr	r1, [r4, #20]
 800d492:	6028      	str	r0, [r5, #0]
 800d494:	0635      	lsls	r5, r6, #24
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	d501      	bpl.n	800d49e <_printf_i+0x1ce>
 800d49a:	6019      	str	r1, [r3, #0]
 800d49c:	e002      	b.n	800d4a4 <_printf_i+0x1d4>
 800d49e:	0670      	lsls	r0, r6, #25
 800d4a0:	d5fb      	bpl.n	800d49a <_printf_i+0x1ca>
 800d4a2:	8019      	strh	r1, [r3, #0]
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	4615      	mov	r5, r2
 800d4a8:	6123      	str	r3, [r4, #16]
 800d4aa:	e7ba      	b.n	800d422 <_printf_i+0x152>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	1d1a      	adds	r2, r3, #4
 800d4b2:	602a      	str	r2, [r5, #0]
 800d4b4:	681d      	ldr	r5, [r3, #0]
 800d4b6:	6862      	ldr	r2, [r4, #4]
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	f000 f82f 	bl	800d51c <memchr>
 800d4be:	b108      	cbz	r0, 800d4c4 <_printf_i+0x1f4>
 800d4c0:	1b40      	subs	r0, r0, r5
 800d4c2:	6060      	str	r0, [r4, #4]
 800d4c4:	6863      	ldr	r3, [r4, #4]
 800d4c6:	6123      	str	r3, [r4, #16]
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4ce:	e7a8      	b.n	800d422 <_printf_i+0x152>
 800d4d0:	462a      	mov	r2, r5
 800d4d2:	4649      	mov	r1, r9
 800d4d4:	4640      	mov	r0, r8
 800d4d6:	6923      	ldr	r3, [r4, #16]
 800d4d8:	47d0      	blx	sl
 800d4da:	3001      	adds	r0, #1
 800d4dc:	d0ab      	beq.n	800d436 <_printf_i+0x166>
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	079b      	lsls	r3, r3, #30
 800d4e2:	d413      	bmi.n	800d50c <_printf_i+0x23c>
 800d4e4:	68e0      	ldr	r0, [r4, #12]
 800d4e6:	9b03      	ldr	r3, [sp, #12]
 800d4e8:	4298      	cmp	r0, r3
 800d4ea:	bfb8      	it	lt
 800d4ec:	4618      	movlt	r0, r3
 800d4ee:	e7a4      	b.n	800d43a <_printf_i+0x16a>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	4632      	mov	r2, r6
 800d4f4:	4649      	mov	r1, r9
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	47d0      	blx	sl
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	d09b      	beq.n	800d436 <_printf_i+0x166>
 800d4fe:	3501      	adds	r5, #1
 800d500:	68e3      	ldr	r3, [r4, #12]
 800d502:	9903      	ldr	r1, [sp, #12]
 800d504:	1a5b      	subs	r3, r3, r1
 800d506:	42ab      	cmp	r3, r5
 800d508:	dcf2      	bgt.n	800d4f0 <_printf_i+0x220>
 800d50a:	e7eb      	b.n	800d4e4 <_printf_i+0x214>
 800d50c:	2500      	movs	r5, #0
 800d50e:	f104 0619 	add.w	r6, r4, #25
 800d512:	e7f5      	b.n	800d500 <_printf_i+0x230>
 800d514:	0800e720 	.word	0x0800e720
 800d518:	0800e731 	.word	0x0800e731

0800d51c <memchr>:
 800d51c:	4603      	mov	r3, r0
 800d51e:	b510      	push	{r4, lr}
 800d520:	b2c9      	uxtb	r1, r1
 800d522:	4402      	add	r2, r0
 800d524:	4293      	cmp	r3, r2
 800d526:	4618      	mov	r0, r3
 800d528:	d101      	bne.n	800d52e <memchr+0x12>
 800d52a:	2000      	movs	r0, #0
 800d52c:	e003      	b.n	800d536 <memchr+0x1a>
 800d52e:	7804      	ldrb	r4, [r0, #0]
 800d530:	3301      	adds	r3, #1
 800d532:	428c      	cmp	r4, r1
 800d534:	d1f6      	bne.n	800d524 <memchr+0x8>
 800d536:	bd10      	pop	{r4, pc}

0800d538 <memmove>:
 800d538:	4288      	cmp	r0, r1
 800d53a:	b510      	push	{r4, lr}
 800d53c:	eb01 0402 	add.w	r4, r1, r2
 800d540:	d902      	bls.n	800d548 <memmove+0x10>
 800d542:	4284      	cmp	r4, r0
 800d544:	4623      	mov	r3, r4
 800d546:	d807      	bhi.n	800d558 <memmove+0x20>
 800d548:	1e43      	subs	r3, r0, #1
 800d54a:	42a1      	cmp	r1, r4
 800d54c:	d008      	beq.n	800d560 <memmove+0x28>
 800d54e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d552:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d556:	e7f8      	b.n	800d54a <memmove+0x12>
 800d558:	4601      	mov	r1, r0
 800d55a:	4402      	add	r2, r0
 800d55c:	428a      	cmp	r2, r1
 800d55e:	d100      	bne.n	800d562 <memmove+0x2a>
 800d560:	bd10      	pop	{r4, pc}
 800d562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d56a:	e7f7      	b.n	800d55c <memmove+0x24>

0800d56c <_free_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4605      	mov	r5, r0
 800d570:	2900      	cmp	r1, #0
 800d572:	d040      	beq.n	800d5f6 <_free_r+0x8a>
 800d574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d578:	1f0c      	subs	r4, r1, #4
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	bfb8      	it	lt
 800d57e:	18e4      	addlt	r4, r4, r3
 800d580:	f000 f910 	bl	800d7a4 <__malloc_lock>
 800d584:	4a1c      	ldr	r2, [pc, #112]	; (800d5f8 <_free_r+0x8c>)
 800d586:	6813      	ldr	r3, [r2, #0]
 800d588:	b933      	cbnz	r3, 800d598 <_free_r+0x2c>
 800d58a:	6063      	str	r3, [r4, #4]
 800d58c:	6014      	str	r4, [r2, #0]
 800d58e:	4628      	mov	r0, r5
 800d590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d594:	f000 b90c 	b.w	800d7b0 <__malloc_unlock>
 800d598:	42a3      	cmp	r3, r4
 800d59a:	d908      	bls.n	800d5ae <_free_r+0x42>
 800d59c:	6820      	ldr	r0, [r4, #0]
 800d59e:	1821      	adds	r1, r4, r0
 800d5a0:	428b      	cmp	r3, r1
 800d5a2:	bf01      	itttt	eq
 800d5a4:	6819      	ldreq	r1, [r3, #0]
 800d5a6:	685b      	ldreq	r3, [r3, #4]
 800d5a8:	1809      	addeq	r1, r1, r0
 800d5aa:	6021      	streq	r1, [r4, #0]
 800d5ac:	e7ed      	b.n	800d58a <_free_r+0x1e>
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	b10b      	cbz	r3, 800d5b8 <_free_r+0x4c>
 800d5b4:	42a3      	cmp	r3, r4
 800d5b6:	d9fa      	bls.n	800d5ae <_free_r+0x42>
 800d5b8:	6811      	ldr	r1, [r2, #0]
 800d5ba:	1850      	adds	r0, r2, r1
 800d5bc:	42a0      	cmp	r0, r4
 800d5be:	d10b      	bne.n	800d5d8 <_free_r+0x6c>
 800d5c0:	6820      	ldr	r0, [r4, #0]
 800d5c2:	4401      	add	r1, r0
 800d5c4:	1850      	adds	r0, r2, r1
 800d5c6:	4283      	cmp	r3, r0
 800d5c8:	6011      	str	r1, [r2, #0]
 800d5ca:	d1e0      	bne.n	800d58e <_free_r+0x22>
 800d5cc:	6818      	ldr	r0, [r3, #0]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	4401      	add	r1, r0
 800d5d2:	6011      	str	r1, [r2, #0]
 800d5d4:	6053      	str	r3, [r2, #4]
 800d5d6:	e7da      	b.n	800d58e <_free_r+0x22>
 800d5d8:	d902      	bls.n	800d5e0 <_free_r+0x74>
 800d5da:	230c      	movs	r3, #12
 800d5dc:	602b      	str	r3, [r5, #0]
 800d5de:	e7d6      	b.n	800d58e <_free_r+0x22>
 800d5e0:	6820      	ldr	r0, [r4, #0]
 800d5e2:	1821      	adds	r1, r4, r0
 800d5e4:	428b      	cmp	r3, r1
 800d5e6:	bf01      	itttt	eq
 800d5e8:	6819      	ldreq	r1, [r3, #0]
 800d5ea:	685b      	ldreq	r3, [r3, #4]
 800d5ec:	1809      	addeq	r1, r1, r0
 800d5ee:	6021      	streq	r1, [r4, #0]
 800d5f0:	6063      	str	r3, [r4, #4]
 800d5f2:	6054      	str	r4, [r2, #4]
 800d5f4:	e7cb      	b.n	800d58e <_free_r+0x22>
 800d5f6:	bd38      	pop	{r3, r4, r5, pc}
 800d5f8:	20001ce4 	.word	0x20001ce4

0800d5fc <sbrk_aligned>:
 800d5fc:	b570      	push	{r4, r5, r6, lr}
 800d5fe:	4e0e      	ldr	r6, [pc, #56]	; (800d638 <sbrk_aligned+0x3c>)
 800d600:	460c      	mov	r4, r1
 800d602:	6831      	ldr	r1, [r6, #0]
 800d604:	4605      	mov	r5, r0
 800d606:	b911      	cbnz	r1, 800d60e <sbrk_aligned+0x12>
 800d608:	f000 f8bc 	bl	800d784 <_sbrk_r>
 800d60c:	6030      	str	r0, [r6, #0]
 800d60e:	4621      	mov	r1, r4
 800d610:	4628      	mov	r0, r5
 800d612:	f000 f8b7 	bl	800d784 <_sbrk_r>
 800d616:	1c43      	adds	r3, r0, #1
 800d618:	d00a      	beq.n	800d630 <sbrk_aligned+0x34>
 800d61a:	1cc4      	adds	r4, r0, #3
 800d61c:	f024 0403 	bic.w	r4, r4, #3
 800d620:	42a0      	cmp	r0, r4
 800d622:	d007      	beq.n	800d634 <sbrk_aligned+0x38>
 800d624:	1a21      	subs	r1, r4, r0
 800d626:	4628      	mov	r0, r5
 800d628:	f000 f8ac 	bl	800d784 <_sbrk_r>
 800d62c:	3001      	adds	r0, #1
 800d62e:	d101      	bne.n	800d634 <sbrk_aligned+0x38>
 800d630:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d634:	4620      	mov	r0, r4
 800d636:	bd70      	pop	{r4, r5, r6, pc}
 800d638:	20001ce8 	.word	0x20001ce8

0800d63c <_malloc_r>:
 800d63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d640:	1ccd      	adds	r5, r1, #3
 800d642:	f025 0503 	bic.w	r5, r5, #3
 800d646:	3508      	adds	r5, #8
 800d648:	2d0c      	cmp	r5, #12
 800d64a:	bf38      	it	cc
 800d64c:	250c      	movcc	r5, #12
 800d64e:	2d00      	cmp	r5, #0
 800d650:	4607      	mov	r7, r0
 800d652:	db01      	blt.n	800d658 <_malloc_r+0x1c>
 800d654:	42a9      	cmp	r1, r5
 800d656:	d905      	bls.n	800d664 <_malloc_r+0x28>
 800d658:	230c      	movs	r3, #12
 800d65a:	2600      	movs	r6, #0
 800d65c:	603b      	str	r3, [r7, #0]
 800d65e:	4630      	mov	r0, r6
 800d660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d664:	4e2e      	ldr	r6, [pc, #184]	; (800d720 <_malloc_r+0xe4>)
 800d666:	f000 f89d 	bl	800d7a4 <__malloc_lock>
 800d66a:	6833      	ldr	r3, [r6, #0]
 800d66c:	461c      	mov	r4, r3
 800d66e:	bb34      	cbnz	r4, 800d6be <_malloc_r+0x82>
 800d670:	4629      	mov	r1, r5
 800d672:	4638      	mov	r0, r7
 800d674:	f7ff ffc2 	bl	800d5fc <sbrk_aligned>
 800d678:	1c43      	adds	r3, r0, #1
 800d67a:	4604      	mov	r4, r0
 800d67c:	d14d      	bne.n	800d71a <_malloc_r+0xde>
 800d67e:	6834      	ldr	r4, [r6, #0]
 800d680:	4626      	mov	r6, r4
 800d682:	2e00      	cmp	r6, #0
 800d684:	d140      	bne.n	800d708 <_malloc_r+0xcc>
 800d686:	6823      	ldr	r3, [r4, #0]
 800d688:	4631      	mov	r1, r6
 800d68a:	4638      	mov	r0, r7
 800d68c:	eb04 0803 	add.w	r8, r4, r3
 800d690:	f000 f878 	bl	800d784 <_sbrk_r>
 800d694:	4580      	cmp	r8, r0
 800d696:	d13a      	bne.n	800d70e <_malloc_r+0xd2>
 800d698:	6821      	ldr	r1, [r4, #0]
 800d69a:	3503      	adds	r5, #3
 800d69c:	1a6d      	subs	r5, r5, r1
 800d69e:	f025 0503 	bic.w	r5, r5, #3
 800d6a2:	3508      	adds	r5, #8
 800d6a4:	2d0c      	cmp	r5, #12
 800d6a6:	bf38      	it	cc
 800d6a8:	250c      	movcc	r5, #12
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	4629      	mov	r1, r5
 800d6ae:	f7ff ffa5 	bl	800d5fc <sbrk_aligned>
 800d6b2:	3001      	adds	r0, #1
 800d6b4:	d02b      	beq.n	800d70e <_malloc_r+0xd2>
 800d6b6:	6823      	ldr	r3, [r4, #0]
 800d6b8:	442b      	add	r3, r5
 800d6ba:	6023      	str	r3, [r4, #0]
 800d6bc:	e00e      	b.n	800d6dc <_malloc_r+0xa0>
 800d6be:	6822      	ldr	r2, [r4, #0]
 800d6c0:	1b52      	subs	r2, r2, r5
 800d6c2:	d41e      	bmi.n	800d702 <_malloc_r+0xc6>
 800d6c4:	2a0b      	cmp	r2, #11
 800d6c6:	d916      	bls.n	800d6f6 <_malloc_r+0xba>
 800d6c8:	1961      	adds	r1, r4, r5
 800d6ca:	42a3      	cmp	r3, r4
 800d6cc:	6025      	str	r5, [r4, #0]
 800d6ce:	bf18      	it	ne
 800d6d0:	6059      	strne	r1, [r3, #4]
 800d6d2:	6863      	ldr	r3, [r4, #4]
 800d6d4:	bf08      	it	eq
 800d6d6:	6031      	streq	r1, [r6, #0]
 800d6d8:	5162      	str	r2, [r4, r5]
 800d6da:	604b      	str	r3, [r1, #4]
 800d6dc:	4638      	mov	r0, r7
 800d6de:	f104 060b 	add.w	r6, r4, #11
 800d6e2:	f000 f865 	bl	800d7b0 <__malloc_unlock>
 800d6e6:	f026 0607 	bic.w	r6, r6, #7
 800d6ea:	1d23      	adds	r3, r4, #4
 800d6ec:	1af2      	subs	r2, r6, r3
 800d6ee:	d0b6      	beq.n	800d65e <_malloc_r+0x22>
 800d6f0:	1b9b      	subs	r3, r3, r6
 800d6f2:	50a3      	str	r3, [r4, r2]
 800d6f4:	e7b3      	b.n	800d65e <_malloc_r+0x22>
 800d6f6:	6862      	ldr	r2, [r4, #4]
 800d6f8:	42a3      	cmp	r3, r4
 800d6fa:	bf0c      	ite	eq
 800d6fc:	6032      	streq	r2, [r6, #0]
 800d6fe:	605a      	strne	r2, [r3, #4]
 800d700:	e7ec      	b.n	800d6dc <_malloc_r+0xa0>
 800d702:	4623      	mov	r3, r4
 800d704:	6864      	ldr	r4, [r4, #4]
 800d706:	e7b2      	b.n	800d66e <_malloc_r+0x32>
 800d708:	4634      	mov	r4, r6
 800d70a:	6876      	ldr	r6, [r6, #4]
 800d70c:	e7b9      	b.n	800d682 <_malloc_r+0x46>
 800d70e:	230c      	movs	r3, #12
 800d710:	4638      	mov	r0, r7
 800d712:	603b      	str	r3, [r7, #0]
 800d714:	f000 f84c 	bl	800d7b0 <__malloc_unlock>
 800d718:	e7a1      	b.n	800d65e <_malloc_r+0x22>
 800d71a:	6025      	str	r5, [r4, #0]
 800d71c:	e7de      	b.n	800d6dc <_malloc_r+0xa0>
 800d71e:	bf00      	nop
 800d720:	20001ce4 	.word	0x20001ce4

0800d724 <_realloc_r>:
 800d724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d728:	4680      	mov	r8, r0
 800d72a:	4614      	mov	r4, r2
 800d72c:	460e      	mov	r6, r1
 800d72e:	b921      	cbnz	r1, 800d73a <_realloc_r+0x16>
 800d730:	4611      	mov	r1, r2
 800d732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d736:	f7ff bf81 	b.w	800d63c <_malloc_r>
 800d73a:	b92a      	cbnz	r2, 800d748 <_realloc_r+0x24>
 800d73c:	f7ff ff16 	bl	800d56c <_free_r>
 800d740:	4625      	mov	r5, r4
 800d742:	4628      	mov	r0, r5
 800d744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d748:	f000 f838 	bl	800d7bc <_malloc_usable_size_r>
 800d74c:	4284      	cmp	r4, r0
 800d74e:	4607      	mov	r7, r0
 800d750:	d802      	bhi.n	800d758 <_realloc_r+0x34>
 800d752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d756:	d812      	bhi.n	800d77e <_realloc_r+0x5a>
 800d758:	4621      	mov	r1, r4
 800d75a:	4640      	mov	r0, r8
 800d75c:	f7ff ff6e 	bl	800d63c <_malloc_r>
 800d760:	4605      	mov	r5, r0
 800d762:	2800      	cmp	r0, #0
 800d764:	d0ed      	beq.n	800d742 <_realloc_r+0x1e>
 800d766:	42bc      	cmp	r4, r7
 800d768:	4622      	mov	r2, r4
 800d76a:	4631      	mov	r1, r6
 800d76c:	bf28      	it	cs
 800d76e:	463a      	movcs	r2, r7
 800d770:	f7ff fb72 	bl	800ce58 <memcpy>
 800d774:	4631      	mov	r1, r6
 800d776:	4640      	mov	r0, r8
 800d778:	f7ff fef8 	bl	800d56c <_free_r>
 800d77c:	e7e1      	b.n	800d742 <_realloc_r+0x1e>
 800d77e:	4635      	mov	r5, r6
 800d780:	e7df      	b.n	800d742 <_realloc_r+0x1e>
	...

0800d784 <_sbrk_r>:
 800d784:	b538      	push	{r3, r4, r5, lr}
 800d786:	2300      	movs	r3, #0
 800d788:	4d05      	ldr	r5, [pc, #20]	; (800d7a0 <_sbrk_r+0x1c>)
 800d78a:	4604      	mov	r4, r0
 800d78c:	4608      	mov	r0, r1
 800d78e:	602b      	str	r3, [r5, #0]
 800d790:	f7f4 fb20 	bl	8001dd4 <_sbrk>
 800d794:	1c43      	adds	r3, r0, #1
 800d796:	d102      	bne.n	800d79e <_sbrk_r+0x1a>
 800d798:	682b      	ldr	r3, [r5, #0]
 800d79a:	b103      	cbz	r3, 800d79e <_sbrk_r+0x1a>
 800d79c:	6023      	str	r3, [r4, #0]
 800d79e:	bd38      	pop	{r3, r4, r5, pc}
 800d7a0:	20001cec 	.word	0x20001cec

0800d7a4 <__malloc_lock>:
 800d7a4:	4801      	ldr	r0, [pc, #4]	; (800d7ac <__malloc_lock+0x8>)
 800d7a6:	f000 b811 	b.w	800d7cc <__retarget_lock_acquire_recursive>
 800d7aa:	bf00      	nop
 800d7ac:	20001cf0 	.word	0x20001cf0

0800d7b0 <__malloc_unlock>:
 800d7b0:	4801      	ldr	r0, [pc, #4]	; (800d7b8 <__malloc_unlock+0x8>)
 800d7b2:	f000 b80c 	b.w	800d7ce <__retarget_lock_release_recursive>
 800d7b6:	bf00      	nop
 800d7b8:	20001cf0 	.word	0x20001cf0

0800d7bc <_malloc_usable_size_r>:
 800d7bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7c0:	1f18      	subs	r0, r3, #4
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bfbc      	itt	lt
 800d7c6:	580b      	ldrlt	r3, [r1, r0]
 800d7c8:	18c0      	addlt	r0, r0, r3
 800d7ca:	4770      	bx	lr

0800d7cc <__retarget_lock_acquire_recursive>:
 800d7cc:	4770      	bx	lr

0800d7ce <__retarget_lock_release_recursive>:
 800d7ce:	4770      	bx	lr

0800d7d0 <_init>:
 800d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d2:	bf00      	nop
 800d7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7d6:	bc08      	pop	{r3}
 800d7d8:	469e      	mov	lr, r3
 800d7da:	4770      	bx	lr

0800d7dc <_fini>:
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	bf00      	nop
 800d7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7e2:	bc08      	pop	{r3}
 800d7e4:	469e      	mov	lr, r3
 800d7e6:	4770      	bx	lr
